<?xml version="1.0" encoding="utf-8"?>
<DirectedGraph Title="DG" xmlns="http://schemas.microsoft.com/vs/2009/dgml">
<Nodes>
<Node Id="EXTERNAL" Label="EXTERNAL" />
<Node Id="25014:[387..448).1" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 721348" />
<Node Id="25014:[390..448).1" Label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 721349" />
<Node Id="28001:[588..156578).1" Label="param BindingTests(this) 721350" />
<Node Id="21002:[790..793).1" Label="'C' 721351" />
<Node Id="21002:[772..793).1" Label="DefaultTypeName = 'C' 721352" />
<Node Id="21002:[845..848).1" Label="'M' 721353" />
<Node Id="21002:[825..848).1" Label="DefaultMethodName = 'M' 721354" />
<Node Id="21002:[3243..25375).1" Label="@'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 721355" />
<Node Id="21002:[3098..25375).1" Label="LINQ =
        #region the string LINQ defines a complete LINQ API called List1$T$ (for instance method) and List2$T$ (for extension methods)
 @'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 721356" />
<Node Id="21002:[678..25421).1" Label="param CompilingTestBase(this) 721357" />
<Node Id="21003:[1338..2835).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 721358" />
<Node Id="21003:[1308..2835).1" Label="NullableAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 721359" />
<Node Id="21003:[2908..3440).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 721360" />
<Node Id="21003:[2871..3440).1" Label="NullableContextAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 721361" />
<Node Id="21003:[3516..3915).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 721362" />
<Node Id="21003:[3476..3915).1" Label="NullablePublicOnlyAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 721363" />
<Node Id="21003:[4223..4448).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 721364" />
<Node Id="21003:[4192..4448).1" Label="AllowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 721365" />
<Node Id="21003:[4518..4746).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 721366" />
<Node Id="21003:[4484..4746).1" Label="DisallowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 721367" />
<Node Id="21003:[4813..5071).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 721368" />
<Node Id="21003:[4782..5071).1" Label="MaybeNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 721369" />
<Node Id="21003:[5142..5397).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 721370" />
<Node Id="21003:[5107..5397).1" Label="MaybeNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 721371" />
<Node Id="21003:[5462..5718).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 721372" />
<Node Id="21003:[5433..5718).1" Label="NotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 721373" />
<Node Id="21003:[5787..6038).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 721374" />
<Node Id="21003:[5754..6038).1" Label="NotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 721375" />
<Node Id="21003:[6109..6460).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 721376" />
<Node Id="21003:[6074..6460).1" Label="MemberNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 721377" />
<Node Id="21003:[6535..6920).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 721378" />
<Node Id="21003:[6496..6920).1" Label="MemberNotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 721379" />
<Node Id="21003:[6993..7250).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 721380" />
<Node Id="21003:[6956..7250).1" Label="DoesNotReturnIfAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 721381" />
<Node Id="21003:[7321..7557).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 721382" />
<Node Id="21003:[7286..7557).1" Label="DoesNotReturnAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 721383" />
<Node Id="21003:[7631..7980).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 721384" />
<Node Id="21003:[7593..7980).1" Label="NotNullIfNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 721385" />
<Node Id="21003:[8047..8155).1" Label="@'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 721386" />
<Node Id="21003:[8016..8155).1" Label="IsExternalInitTypeDefinition = @'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 721387" />
<Node Id="21003:[8220..8359).1" Label="@'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 721388" />
<Node Id="21003:[8191..8359).1" Label="IAsyncDisposableDefinition = @'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 721389" />
<Node Id="21003:[8415..20279).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 721390" />
<Node Id="21003:[8395..20279).1" Label="AsyncStreamsTypes = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 721391" />
<Node Id="21003:[20353..20617).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 721392" />
<Node Id="21003:[20315..20617).1" Label="EnumeratorCancellationAttributeType = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 721393" />
<Node Id="21003:[20689..21473).1" Label="@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 721394" />
<Node Id="21003:[20653..21473).1" Label="NativeIntegerAttributeDefinition =
@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 721395" />
<Node Id="25004:[2227..2317).1" Label="() =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 721396" />
<Node Id="25004:[2332..2368).1" Label="LazyThreadSafetyMode.PublicationOnly 721397" />
<Node Id="25004:[2183..2369).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 721398" />
<Node Id="25004:[2155..2369).1" Label="s_lazyDefaultVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 721399" />
<Node Id="25004:[2602..2696).1" Label="() =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 721400" />
<Node Id="25004:[2711..2747).1" Label="LazyThreadSafetyMode.PublicationOnly 721401" />
<Node Id="25004:[2558..2748).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 721402" />
<Node Id="25004:[2531..2748).1" Label="s_lazyLatestVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 721403" />
<Node Id="25004:[2914..2947).1" Label="RuntimeUtilities.IsCoreClrRuntime 721404" />
<Node Id="25004:[3094..3171).1" Label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 721405" />
<Node Id="25004:[3077..3172).1" Label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 721406" />
<Node Id="25004:[2894..3172).1" Label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime
            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')
            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 721407" />
<Node Id="25004:[3490..5167).1" Label="() =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            } 721408" />
<Node Id="25004:[5182..5218).1" Label="LazyThreadSafetyMode.PublicationOnly 721409" />
<Node Id="25004:[3446..5219).1" Label="new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 721410" />
<Node Id="25004:[3432..5219).1" Label="s_winRtRefs = new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 721411" />
<Node Id="25004:[5576..5645).1" Label="() =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 721412" />
<Node Id="25004:[5660..5696).1" Label="LazyThreadSafetyMode.PublicationOnly 721413" />
<Node Id="25004:[5532..5697).1" Label="new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 721414" />
<Node Id="25004:[5508..5697).1" Label="s_portableRefsMinimal = new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 721415" />
<Node Id="25004:[6321..6439).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 721416" />
<Node Id="25004:[6458..6494).1" Label="LazyThreadSafetyMode.PublicationOnly 721417" />
<Node Id="25004:[6275..6495).1" Label="new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 721418" />
<Node Id="25004:[6244..6495).1" Label="s_systemCoreRef =
            new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 721419" />
<Node Id="25004:[6714..6838).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 721420" />
<Node Id="25004:[6853..6889).1" Label="LazyThreadSafetyMode.PublicationOnly 721421" />
<Node Id="25004:[6672..6890).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721422" />
<Node Id="25004:[6637..6890).1" Label="s_systemCoreRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721423" />
<Node Id="25004:[7130..7249).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 721424" />
<Node Id="25004:[7264..7300).1" Label="LazyThreadSafetyMode.PublicationOnly 721425" />
<Node Id="25004:[7088..7301).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721426" />
<Node Id="25004:[7066..7301).1" Label="s_systemCoreRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721427" />
<Node Id="25004:[7532..7667).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 721428" />
<Node Id="25004:[7682..7718).1" Label="LazyThreadSafetyMode.PublicationOnly 721429" />
<Node Id="25004:[7490..7719).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721430" />
<Node Id="25004:[7464..7719).1" Label="s_systemWindowsFormsRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721431" />
<Node Id="25004:[7940..8064).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 721432" />
<Node Id="25004:[8079..8115).1" Label="LazyThreadSafetyMode.PublicationOnly 721433" />
<Node Id="25004:[7898..8116).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721434" />
<Node Id="25004:[7877..8116).1" Label="s_systemDrawingRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721435" />
<Node Id="25004:[8324..8442).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 721436" />
<Node Id="25004:[8457..8493).1" Label="LazyThreadSafetyMode.PublicationOnly 721437" />
<Node Id="25004:[8282..8494).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721438" />
<Node Id="25004:[8264..8494).1" Label="s_systemDataRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721439" />
<Node Id="25004:[8694..8807).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 721440" />
<Node Id="25004:[8822..8858).1" Label="LazyThreadSafetyMode.PublicationOnly 721441" />
<Node Id="25004:[8652..8859).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721442" />
<Node Id="25004:[8636..8859).1" Label="s_mscorlibRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721443" />
<Node Id="25004:[9063..9214).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 721444" />
<Node Id="25004:[9229..9265).1" Label="LazyThreadSafetyMode.PublicationOnly 721445" />
<Node Id="25004:[9021..9266).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721446" />
<Node Id="25004:[8997..9266).1" Label="s_mscorlibRefPortable = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721447" />
<Node Id="25004:[9478..10389).1" Label="() =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            } 721448" />
<Node Id="25004:[10404..10440).1" Label="LazyThreadSafetyMode.PublicationOnly 721449" />
<Node Id="25004:[9436..10441).1" Label="new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 721450" />
<Node Id="25004:[9420..10441).1" Label="s_aacorlibRef = new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 721451" />
<Node Id="25004:[10811..10967).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri') 721452" />
<Node Id="25004:[10982..11018).1" Label="LazyThreadSafetyMode.PublicationOnly 721453" />
<Node Id="25004:[10769..11019).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 721454" />
<Node Id="25004:[10749..11019).1" Label="s_mscorlibRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 721455" />
<Node Id="25004:[11415..11589).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 721456" />
<Node Id="25004:[11604..11640).1" Label="LazyThreadSafetyMode.PublicationOnly 721457" />
<Node Id="25004:[11373..11641).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721458" />
<Node Id="25004:[11345..11641).1" Label="s_mscorlibRef_silverlight = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721459" />
<Node Id="25004:[12432..12560).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 721460" />
<Node Id="25004:[12575..12611).1" Label="LazyThreadSafetyMode.PublicationOnly 721461" />
<Node Id="25004:[12390..12612).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721462" />
<Node Id="25004:[12369..12612).1" Label="s_desktopCSharpRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721463" />
<Node Id="25004:[12815..12944).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 721464" />
<Node Id="25004:[12959..12995).1" Label="LazyThreadSafetyMode.PublicationOnly 721465" />
<Node Id="25004:[12773..12996).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721466" />
<Node Id="25004:[12760..12996).1" Label="s_std20Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721467" />
<Node Id="25004:[13204..13343).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 721468" />
<Node Id="25004:[13358..13394).1" Label="LazyThreadSafetyMode.PublicationOnly 721469" />
<Node Id="25004:[13162..13395).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721470" />
<Node Id="25004:[13138..13395).1" Label="s_46NetStandardFacade = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721471" />
<Node Id="25004:[13621..13796).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 721472" />
<Node Id="25004:[13811..13847).1" Label="LazyThreadSafetyMode.PublicationOnly 721473" />
<Node Id="25004:[13579..13848).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 721474" />
<Node Id="25004:[13551..13848).1" Label="s_systemDynamicRuntimeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 721475" />
<Node Id="25004:[14066..14175).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 721476" />
<Node Id="25004:[14190..14226).1" Label="LazyThreadSafetyMode.PublicationOnly 721477" />
<Node Id="25004:[14024..14227).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721478" />
<Node Id="25004:[14010..14227).1" Label="s_systemRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721479" />
<Node Id="25004:[14421..14531).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 721480" />
<Node Id="25004:[14546..14582).1" Label="LazyThreadSafetyMode.PublicationOnly 721481" />
<Node Id="25004:[14379..14583).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721482" />
<Node Id="25004:[14361..14583).1" Label="s_systemRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721483" />
<Node Id="25004:[14798..14913).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 721484" />
<Node Id="25004:[14928..14964).1" Label="LazyThreadSafetyMode.PublicationOnly 721485" />
<Node Id="25004:[14756..14965).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721486" />
<Node Id="25004:[14725..14965).1" Label="s_systemRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721487" />
<Node Id="25004:[15193..15301).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 721488" />
<Node Id="25004:[15316..15352).1" Label="LazyThreadSafetyMode.PublicationOnly 721489" />
<Node Id="25004:[15151..15353).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721490" />
<Node Id="25004:[15133..15353).1" Label="s_systemRef_v20 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721491" />
<Node Id="25004:[15554..15670).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 721492" />
<Node Id="25004:[15685..15721).1" Label="LazyThreadSafetyMode.PublicationOnly 721493" />
<Node Id="25004:[15512..15722).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721494" />
<Node Id="25004:[15495..15722).1" Label="s_systemXmlRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721495" />
<Node Id="25004:[15925..16050).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 721496" />
<Node Id="25004:[16065..16101).1" Label="LazyThreadSafetyMode.PublicationOnly 721497" />
<Node Id="25004:[15883..16102).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721498" />
<Node Id="25004:[15862..16102).1" Label="s_systemXmlLinqRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721499" />
<Node Id="25004:[16314..16416).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 721500" />
<Node Id="25004:[16431..16467).1" Label="LazyThreadSafetyMode.PublicationOnly 721501" />
<Node Id="25004:[16272..16468).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721502" />
<Node Id="25004:[16250..16468).1" Label="s_mscorlibFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721503" />
<Node Id="25004:[16687..16800).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 721504" />
<Node Id="25004:[16815..16851).1" Label="LazyThreadSafetyMode.PublicationOnly 721505" />
<Node Id="25004:[16645..16852).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721506" />
<Node Id="25004:[16618..16852).1" Label="s_systemRuntimeFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721507" />
<Node Id="25004:[17083..17200).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 721508" />
<Node Id="25004:[17215..17251).1" Label="LazyThreadSafetyMode.PublicationOnly 721509" />
<Node Id="25004:[17041..17252).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721510" />
<Node Id="25004:[17012..17252).1" Label="s_systemThreadingFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721511" />
<Node Id="25004:[17497..17625).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 721512" />
<Node Id="25004:[17640..17676).1" Label="LazyThreadSafetyMode.PublicationOnly 721513" />
<Node Id="25004:[17455..17677).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721514" />
<Node Id="25004:[17421..17677).1" Label="s_systemThreadingTasksFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721515" />
<Node Id="25004:[17911..18059).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 721516" />
<Node Id="25004:[18074..18110).1" Label="LazyThreadSafetyMode.PublicationOnly 721517" />
<Node Id="25004:[17869..18111).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721518" />
<Node Id="25004:[17850..18111).1" Label="s_mscorlibPP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721519" />
<Node Id="25004:[18321..18481).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 721520" />
<Node Id="25004:[18496..18532).1" Label="LazyThreadSafetyMode.PublicationOnly 721521" />
<Node Id="25004:[18279..18533).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721522" />
<Node Id="25004:[18255..18533).1" Label="s_systemRuntimePP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721523" />
<Node Id="25004:[18754..18880).1" Label="() =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 721524" />
<Node Id="25004:[18895..18931).1" Label="LazyThreadSafetyMode.PublicationOnly 721525" />
<Node Id="25004:[18712..18932).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721526" />
<Node Id="25004:[18687..18932).1" Label="s_FSharpTestLibraryRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 721527" />
<Node Id="25004:[19130..19147).1" Label="@'R:\Invalid.dll' 721528" />
<Node Id="25004:[19120..19147).1" Label="fullPath: @'R:\Invalid.dll' 721529" />
<Node Id="25004:[19094..19148).1" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 721530" />
<Node Id="25004:[19094..19148).5" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 721531" />
<Node Id="25004:[19081..19148).1" Label="InvalidRef = new TestMetadataReference(fullPath: @'R:\Invalid.dll') 721532" />
<Node Id="21003:[51329..51357).1" Label="MscorlibRef_v4_0_30316_17626 721533" />
<Node Id="25004:[10673..10688).1" Label="Net451.mscorlib 721534" />
<Node Id="21003:[51307..51358).1" Label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 721535" />
<Node Id="21003:[51292..51358).1" Label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 721536" />
<Node Id="21003:[56538..56550).1" Label="'/*$bind$*/' 721537" />
<Node Id="21003:[56524..56550).1" Label="StartString = '/*$bind$*/' 721538" />
<Node Id="21003:[56596..56609).1" Label="'/*$/bind$*/' 721539" />
<Node Id="21003:[56584..56609).1" Label="EndString = '/*$/bind$*/' 721540" />
<Node Id="21003:[92394..99056).1" Label="@'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 721541" />
<Node Id="21003:[92381..99056).1" Label="SpanSource = @'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 721542" />
<Node Id="21003:[101764..102290).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 721543" />
<Node Id="21003:[101743..102290).1" Label="s_IAsyncEnumerable = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 721544" />
<Node Id="21003:[1215..102298).1" Label="param CSharpTestBase(this) 721545" />
<Node Id="25015:[917..26825).1" Label="param CommonTestBase(this) 721546" />
<Node Id="25004:[926..968).1" Label="param TestBase(this) 721547" />
<Node Id="25004:[908..913).1" Label="_temp 721548" />
<Node Id="25014:[387..448).372" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 721549" />
<Node Id="28001:[46124..47168).1" Label="param UnimplementedInterfaceSquiggleLocation13UnimplementedInterfaceSquiggleLocation_InterfaceInheritanceScenario09(this) 721550" />
<Node Id="28001:[46437..46751).1" Label="string scenarioCode = @'
public class ITT : IDerived
{
    void IBase2.method2()
    { }

    void IDerived.method3()
    { }
}

public interface IBase
{
    void method1();
}

public interface IBase2
{
    void method2();
}
public interface IDerived : IBase, IBase2
{
    void method3();
}'; 721551" />
<Node Id="28001:[46765..46816).1" Label="var testAssembly = CreateCompilation(scenarioCode); 721552" />
<Node Id="28001:[46802..46814).1" Label="scenarioCode 721553" />
<Node Id="21004:[2251..2264).1" Label="param operator(string source) 721554" />
<Node Id="21004:[2290..2296).1" Label="source 721555" />
<Node Id="21004:[2269..2297).1" Label="new CSharpTestSource(source) 721556" />
<Node Id="21004:[839..851).1" Label="param CSharpTestSource(object value) 721557" />
<Node Id="21004:[814..902).1" Label="param CSharpTestSource(this) 721558" />
<Node Id="21004:[877..882).1" Label="Value 721559" />
<Node Id="28001:[46765..46816).2" Label="var testAssembly = CreateCompilation(scenarioCode); 721560" />
<Node Id="28001:[46765..46816).4" Label="var testAssembly = CreateCompilation(scenarioCode); 721561" />
<Node Id="28001:[46784..46815).1" Label="CreateCompilation(scenarioCode) 721562" />
<Node Id="21003:[44736..44759).1" Label="param CreateCompilation(CSharpTestSource source) 721563" />
<Node Id="21003:[44774..44822).1" Label="param CreateCompilation(IEnumerable$MetadataReference$ references = null) 721564" />
<Node Id="21003:[44837..44876).1" Label="param CreateCompilation(CSharpCompilationOptions options = null) 721565" />
<Node Id="21003:[44891..44929).1" Label="param CreateCompilation(CSharpParseOptions parseOptions = null) 721566" />
<Node Id="21003:[44944..45002).1" Label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 721567" />
<Node Id="21003:[45017..45041).1" Label="param CreateCompilation(string assemblyName = '') 721568" />
<Node Id="21003:[45056..45082).1" Label="param CreateCompilation(string sourceFileName = '') 721569" />
<Node Id="21003:[45097..45128).1" Label="param CreateCompilation(bool skipUsesIsNullable = false) 721570" />
<Node Id="21003:[45156..45162).1" Label="source 721571" />
<Node Id="21003:[45198..45213).1" Label="targetFramework 721572" />
<Node Id="21003:[45215..45225).1" Label="references 721573" />
<Node Id="21003:[45164..45226).1" Label="TargetFrameworkUtil.GetReferences(targetFramework, references) 721574" />
<Node Id="25005:[9600..9618).1" Label="param GetReferences(TargetFramework tf) 721575" />
<Node Id="25005:[9620..9671).1" Label="param GetReferences(IEnumerable$MetadataReference$ additionalReferences) 721576" />
<Node Id="25005:[9697..9732).1" Label="var references = GetReferences(tf); 721577" />
<Node Id="25005:[9714..9731).1" Label="GetReferences(tf) 721578" />
<Node Id="25005:[7569..7600).1" Label="param GetReferences(TargetFramework targetFramework) 721579" />
<Node Id="25005:[7605..9525).1" Label="targetFramework switch
        {
            TargetFramework.Empty =$ ImmutableArray$MetadataReference$.Empty,
            TargetFramework.Mscorlib40 =$ Mscorlib40References,
            TargetFramework.Mscorlib40Extended =$ Mscorlib40ExtendedReferences,
            TargetFramework.Mscorlib40AndSystemCore =$ Mscorlib40andSystemCoreReferences,
            TargetFramework.Mscorlib40AndVBRuntime =$ Mscorlib40andVBRuntimeReferences,
            TargetFramework.Mscorlib45 =$ Mscorlib45References,
            TargetFramework.Mscorlib45Extended =$ Mscorlib45ExtendedReferences,
            TargetFramework.Mscorlib45AndCSharp =$ Mscorlib45AndCSharpReferences,
            TargetFramework.Mscorlib45AndVBRuntime =$ Mscorlib45AndVBRuntimeReferences,
            TargetFramework.Mscorlib46 =$ Mscorlib46References,
            TargetFramework.Mscorlib46Extended =$ Mscorlib46ExtendedReferences,
            TargetFramework.Mscorlib461 =$ Mscorlib46References,
            TargetFramework.Mscorlib461Extended =$ Mscorlib461ExtendedReferences,
            TargetFramework.NetStandard20 =$ NetStandard20References,
            TargetFramework.NetCoreApp =$ NetCoreAppReferences,
            TargetFramework.WinRT =$ WinRTReferences,
            TargetFramework.Standard =$ StandardReferences,
            TargetFramework.StandardLatest =$ StandardLatestReferences,
            TargetFramework.StandardAndCSharp =$ StandardAndCSharpReferences,
            TargetFramework.StandardAndVBRuntime =$ StandardAndVBRuntimeReferences,
            TargetFramework.StandardCompat =$ StandardCompatReferences,
            TargetFramework.DefaultVb =$ DefaultVbReferences,
            TargetFramework.Minimal =$ MinimalReferences,
            TargetFramework.MinimalAsync =$ MinimalAsyncReferences,
            _ =$ throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),
        } 721580" />
<Node Id="25005:[8889..8907).1" Label="StandardReferences 721581" />
<Node Id="25005:[6208..6241).1" Label="RuntimeUtilities.IsCoreClrRuntime 721582" />
<Node Id="25005:[6270..6298).1" Label="Mscorlib46ExtendedReferences 721583" />
<Node Id="25005:[4543..4693).1" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 721584" />
<Node Id="25005:[4648..4670).1" Label="TestBase.ValueTupleRef 721585" />
<Node Id="25004:[12011..12051).1" Label="TestReferences.NetFx.ValueTuple.tuplelib 721586" />
<Node Id="25005:[4543..4693).7" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 721587" />
<Node Id="25005:[6208..6298).1" Label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 721588" />
<Node Id="25005:[9746..9845).1" Label="if (additionalReferences == null)
            {
                return references;
            } 721589" />
<Node Id="25005:[9746..9845).2" Label="if (additionalReferences == null)
            {
                return references;
            } 721590" />
<Node Id="25005:[9812..9830).1" Label="return references; 721591" />
<Node Id="21003:[45228..45235).1" Label="options 721592" />
<Node Id="21003:[45237..45249).1" Label="parseOptions 721593" />
<Node Id="21003:[45251..45263).1" Label="assemblyName 721594" />
<Node Id="21003:[45265..45279).1" Label="sourceFileName 721595" />
<Node Id="21003:[45281..45299).1" Label="skipUsesIsNullable 721596" />
<Node Id="21003:[45133..45300).1" Label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 721597" />
<Node Id="21003:[45382..45405).1" Label="param CreateEmptyCompilation(CSharpTestSource source) 721598" />
<Node Id="21003:[45420..45468).1" Label="param CreateEmptyCompilation(IEnumerable$MetadataReference$ references = null) 721599" />
<Node Id="21003:[45483..45522).1" Label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 721600" />
<Node Id="21003:[45537..45575).1" Label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 721601" />
<Node Id="21003:[45590..45614).1" Label="param CreateEmptyCompilation(string assemblyName = '') 721602" />
<Node Id="21003:[45629..45655).1" Label="param CreateEmptyCompilation(string sourceFileName = '') 721603" />
<Node Id="21003:[45670..45701).1" Label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 721604" />
<Node Id="21003:[45728..45734).1" Label="source 721605" />
<Node Id="21003:[45736..45746).1" Label="references 721606" />
<Node Id="21003:[45748..45755).1" Label="options 721607" />
<Node Id="21003:[45757..45769).1" Label="parseOptions 721608" />
<Node Id="21003:[45771..45783).1" Label="assemblyName 721609" />
<Node Id="21003:[45785..45799).1" Label="sourceFileName 721610" />
<Node Id="21003:[45801..45819).1" Label="skipUsesIsNullable 721611" />
<Node Id="21003:[45842..45846).1" Label="null 721612" />
<Node Id="21003:[45821..45846).1" Label="experimentalFeature: null 721613" />
<Node Id="21003:[45706..45847).1" Label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 721614" />
<Node Id="21003:[45929..45952).1" Label="param CreateCompilationCore(CSharpTestSource source) 721615" />
<Node Id="21003:[45967..46008).1" Label="param CreateCompilationCore(IEnumerable$MetadataReference$ references) 721616" />
<Node Id="21003:[46023..46055).1" Label="param CreateCompilationCore(CSharpCompilationOptions options) 721617" />
<Node Id="21003:[46070..46101).1" Label="param CreateCompilationCore(CSharpParseOptions parseOptions) 721618" />
<Node Id="21003:[46116..46135).1" Label="param CreateCompilationCore(string assemblyName) 721619" />
<Node Id="21003:[46150..46171).1" Label="param CreateCompilationCore(string sourceFileName) 721620" />
<Node Id="21003:[46186..46209).1" Label="param CreateCompilationCore(bool skipUsesIsNullable) 721621" />
<Node Id="21003:[46224..46254).1" Label="param CreateCompilationCore(MessageID? experimentalFeature) 721622" />
<Node Id="21003:[46280..46350).1" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 721623" />
<Node Id="21003:[46280..46350).2" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 721624" />
<Node Id="21003:[46298..46349).1" Label="source.GetSyntaxTrees(parseOptions, sourceFileName) 721625" />
<Node Id="21004:[949..980).1" Label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 721626" />
<Node Id="21004:[982..1008).1" Label="param GetSyntaxTrees(string sourceFileName = '') 721627" />
<Node Id="21004:[914..2190).1" Label="param GetSyntaxTrees(this) 721628" />
<Node Id="21004:[1034..2179).1" Label="switch (Value)
            {
                case string source:
                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };
                case string[] sources:
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return CSharpTestBase.Parse(parseOptions, sources);
                case SyntaxTree tree:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return new[] { tree };
                case SyntaxTree[] trees:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return trees;
                case CSharpTestSource[] testSources:
                    return testSources.SelectMany(s =$ s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();
                case null:
                    return Array.Empty$SyntaxTree$();
                default:
                    throw new Exception($'Unexpected value: {Value}');
            } 721629" />
<Node Id="21004:[1122..1208).1" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 721630" />
<Node Id="21004:[1122..1208).3" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 721631" />
<Node Id="21004:[1122..1208).4" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 721632" />
<Node Id="21004:[1137..1205).1" Label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 721633" />
<Node Id="21003:[34078..34089).1" Label="param Parse(string text) 721634" />
<Node Id="21003:[34091..34111).1" Label="param Parse(string filename = '') 721635" />
<Node Id="21003:[34113..34146).1" Label="param Parse(CSharpParseOptions options = null) 721636" />
<Node Id="21003:[34148..34172).1" Label="param Parse(Encoding encoding = null) 721637" />
<Node Id="21003:[34198..34304).1" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 721638" />
<Node Id="21003:[34198..34304).2" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 721639" />
<Node Id="21010:[590..618).1" Label="kind: SourceCodeKind.Regular 721640" />
<Node Id="21010:[620..662).1" Label="documentationMode: DocumentationMode.Parse 721641" />
<Node Id="21010:[567..663).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 721642" />
<Node Id="21010:[567..663).5" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 721643" />
<Node Id="21010:[557..663).1" Label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 721644" />
<Node Id="21010:[742..763).1" Label="SourceCodeKind.Script 721645" />
<Node Id="21010:[725..764).1" Label="Regular.WithKind(SourceCodeKind.Script) 721646" />
<Node Id="21010:[716..764).1" Label="Script = Regular.WithKind(SourceCodeKind.Script) 721647" />
<Node Id="21010:[856..879).1" Label="LanguageVersion.CSharp6 721648" />
<Node Id="21010:[828..880).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 721649" />
<Node Id="21010:[817..880).1" Label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 721650" />
<Node Id="21010:[972..995).1" Label="LanguageVersion.CSharp7 721651" />
<Node Id="21010:[944..996).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 721652" />
<Node Id="21010:[933..996).1" Label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 721653" />
<Node Id="21010:[1090..1115).1" Label="LanguageVersion.CSharp7_1 721654" />
<Node Id="21010:[1062..1116).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 721655" />
<Node Id="21010:[1049..1116).1" Label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 721656" />
<Node Id="21010:[1210..1235).1" Label="LanguageVersion.CSharp7_2 721657" />
<Node Id="21010:[1182..1236).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 721658" />
<Node Id="21010:[1169..1236).1" Label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 721659" />
<Node Id="21010:[1330..1355).1" Label="LanguageVersion.CSharp7_3 721660" />
<Node Id="21010:[1302..1356).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 721661" />
<Node Id="21010:[1289..1356).1" Label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 721662" />
<Node Id="21010:[1454..1477).1" Label="LanguageVersion.Default 721663" />
<Node Id="21010:[1426..1478).1" Label="Regular.WithLanguageVersion(LanguageVersion.Default) 721664" />
<Node Id="21010:[1409..1478).1" Label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 721665" />
<Node Id="21010:[1576..1599).1" Label="LanguageVersion.Preview 721666" />
<Node Id="21010:[1548..1600).1" Label="Regular.WithLanguageVersion(LanguageVersion.Preview) 721667" />
<Node Id="21010:[1531..1600).1" Label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 721668" />
<Node Id="21010:[1692..1715).1" Label="LanguageVersion.CSharp8 721669" />
<Node Id="21010:[1664..1716).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 721670" />
<Node Id="21010:[1653..1716).1" Label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 721671" />
<Node Id="21010:[1808..1831).1" Label="LanguageVersion.CSharp9 721672" />
<Node Id="21010:[1780..1832).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 721673" />
<Node Id="21010:[1769..1832).1" Label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 721674" />
<Node Id="21010:[1950..1976).1" Label="DocumentationMode.Diagnose 721675" />
<Node Id="21010:[1920..1977).1" Label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 721676" />
<Node Id="21010:[1885..1977).1" Label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 721677" />
<Node Id="21010:[2060..2067).1" Label="Regular 721678" />
<Node Id="21010:[2080..2109).1" Label="'UseLegacyStrongNameProvider' 721679" />
<Node Id="21010:[2060..2110).1" Label="Regular.WithFeature('UseLegacyStrongNameProvider') 721680" />
<Node Id="21010:[7783..7814).1" Label="param WithFeature(this CSharpParseOptions options) 721681" />
<Node Id="21010:[7816..7830).1" Label="param WithFeature(string feature) 721682" />
<Node Id="21010:[7832..7853).1" Label="param WithFeature(string value = 'true') 721683" />
<Node Id="21010:[7879..7992).1" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 721684" />
<Node Id="21010:[7879..7992).2" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 721685" />
<Node Id="21010:[7879..7992).3" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 721686" />
<Node Id="21010:[7879..7992).4" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 721687" />
<Node Id="21010:[7879..7992).5" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 721688" />
<Node Id="21010:[7931..7989).1" Label="new[] { new KeyValuePair$string, string$(feature, value) } 721689" />
<Node Id="21010:[7879..7992).9" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 721690" />
<Node Id="21010:[2030..2110).1" Label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 721691" />
<Node Id="21010:[2227..2274).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates 721692" />
<Node Id="21010:[2227..2292).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 721693" />
<Node Id="21010:[2295..2296).1" Label="1 721694" />
<Node Id="21010:[2227..2296).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 721695" />
<Node Id="21010:[2199..2297).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 721696" />
<Node Id="21010:[2163..2297).1" Label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 721697" />
<Node Id="21010:[2401..2450).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides 721698" />
<Node Id="21010:[2401..2468).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 721699" />
<Node Id="21010:[2373..2469).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 721700" />
<Node Id="21010:[2350..2469).1" Label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 721701" />
<Node Id="21010:[2576..2599).1" Label="LanguageVersion.CSharp8 721702" />
<Node Id="21010:[2548..2600).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 721703" />
<Node Id="21010:[2522..2600).1" Label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 721704" />
<Node Id="21010:[2655..2705).1" Label="RegularWithExtendedPartialMethods = RegularPreview 721705" />
<Node Id="21010:[2799..2838).1" Label="new SmallDictionary$string, string$ { } 721706" />
<Node Id="21010:[2774..2838).1" Label="s_experimentalFeatures = new SmallDictionary$string, string$ { } 721707" />
<Node Id="21010:[2954..2982).1" Label="kind: SourceCodeKind.Regular 721708" />
<Node Id="21010:[2984..3025).1" Label="documentationMode: DocumentationMode.None 721709" />
<Node Id="21010:[3027..3067).1" Label="languageVersion: LanguageVersion.Preview 721710" />
<Node Id="21010:[2931..3068).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 721711" />
<Node Id="21010:[2931..3068).3" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 721712" />
<Node Id="21010:[3082..3104).1" Label="s_experimentalFeatures 721713" />
<Node Id="21010:[2931..3105).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 721714" />
<Node Id="21010:[2891..3105).1" Label="ExperimentalParseOptions =
            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 721715" />
<Node Id="21010:[3487..3556).1" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 721716" />
<Node Id="21010:[3524..3544).1" Label="'testV7SwitchBinder' 721717" />
<Node Id="21010:[3546..3552).1" Label="'true' 721718" />
<Node Id="21010:[3487..3556).2" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 721719" />
<Node Id="21010:[3465..3557).1" Label="Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 721720" />
<Node Id="21010:[3436..3557).1" Label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 721721" />
<Node Id="21010:[3612..3656).1" Label="RegularWithoutRecursivePatterns = Regular7_3 721722" />
<Node Id="21010:[3709..3748).1" Label="RegularWithRecursivePatterns = Regular8 721723" />
<Node Id="21010:[3801..3844).1" Label="RegularWithoutPatternCombinators = Regular8 721724" />
<Node Id="21010:[3897..3943).1" Label="RegularWithPatternCombinators = RegularPreview 721725" />
<Node Id="21010:[4035..4070).1" Label="OutputKind.DynamicallyLinkedLibrary 721726" />
<Node Id="21010:[4072..4097).1" Label="OptimizationLevel.Release 721727" />
<Node Id="21010:[4017..4098).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 721728" />
<Node Id="21010:[10204..10225).1" Label="param CreateTestOptions(OutputKind outputKind) 721729" />
<Node Id="21010:[10227..10262).1" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721730" />
<Node Id="21010:[10264..10288).1" Label="param CreateTestOptions(bool allowUnsafe = false) 721731" />
<Node Id="21010:[10335..10345).1" Label="outputKind 721732" />
<Node Id="21010:[10347..10383).1" Label="optimizationLevel: optimizationLevel 721733" />
<Node Id="21010:[10385..10425).1" Label="warningLevel: Diagnostic.MaxWarningLevel 721734" />
<Node Id="21010:[10427..10451).1" Label="allowUnsafe: allowUnsafe 721735" />
<Node Id="21010:[10306..10452).1" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721736" />
<Node Id="21010:[10306..10452).47" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721737" />
<Node Id="21010:[4004..4098).1" Label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 721738" />
<Node Id="21010:[4188..4217).1" Label="OutputKind.ConsoleApplication 721739" />
<Node Id="21010:[4219..4244).1" Label="OptimizationLevel.Release 721740" />
<Node Id="21010:[4170..4245).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 721741" />
<Node Id="21010:[10204..10225).2" Label="param CreateTestOptions(OutputKind outputKind) 721742" />
<Node Id="21010:[10227..10262).2" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721743" />
<Node Id="21010:[10264..10288).2" Label="param CreateTestOptions(bool allowUnsafe = false) 721744" />
<Node Id="21010:[10335..10345).2" Label="outputKind 721745" />
<Node Id="21010:[10347..10383).2" Label="optimizationLevel: optimizationLevel 721746" />
<Node Id="21010:[10385..10425).2" Label="warningLevel: Diagnostic.MaxWarningLevel 721747" />
<Node Id="21010:[10427..10451).2" Label="allowUnsafe: allowUnsafe 721748" />
<Node Id="21010:[10306..10452).49" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721749" />
<Node Id="21010:[10306..10452).95" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721750" />
<Node Id="21010:[4157..4245).1" Label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 721751" />
<Node Id="21010:[4353..4357).1" Label="true 721752" />
<Node Id="21010:[4324..4358).1" Label="ReleaseDll.WithDebugPlusMode(true) 721753" />
<Node Id="21010:[4306..4358).1" Label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 721754" />
<Node Id="21010:[4466..4470).1" Label="true 721755" />
<Node Id="21010:[4437..4471).1" Label="ReleaseExe.WithDebugPlusMode(true) 721756" />
<Node Id="21010:[4419..4471).1" Label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 721757" />
<Node Id="21010:[4561..4596).1" Label="OutputKind.DynamicallyLinkedLibrary 721758" />
<Node Id="21010:[4598..4621).1" Label="OptimizationLevel.Debug 721759" />
<Node Id="21010:[4543..4622).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 721760" />
<Node Id="21010:[10204..10225).3" Label="param CreateTestOptions(OutputKind outputKind) 721761" />
<Node Id="21010:[10227..10262).3" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721762" />
<Node Id="21010:[10264..10288).3" Label="param CreateTestOptions(bool allowUnsafe = false) 721763" />
<Node Id="21010:[10335..10345).3" Label="outputKind 721764" />
<Node Id="21010:[10347..10383).3" Label="optimizationLevel: optimizationLevel 721765" />
<Node Id="21010:[10385..10425).3" Label="warningLevel: Diagnostic.MaxWarningLevel 721766" />
<Node Id="21010:[10427..10451).3" Label="allowUnsafe: allowUnsafe 721767" />
<Node Id="21010:[10306..10452).97" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721768" />
<Node Id="21010:[10306..10452).143" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721769" />
<Node Id="21010:[4532..4622).1" Label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 721770" />
<Node Id="21010:[4710..4739).1" Label="OutputKind.ConsoleApplication 721771" />
<Node Id="21010:[4741..4764).1" Label="OptimizationLevel.Debug 721772" />
<Node Id="21010:[4692..4765).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 721773" />
<Node Id="21010:[10204..10225).4" Label="param CreateTestOptions(OutputKind outputKind) 721774" />
<Node Id="21010:[10227..10262).4" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721775" />
<Node Id="21010:[10264..10288).4" Label="param CreateTestOptions(bool allowUnsafe = false) 721776" />
<Node Id="21010:[10335..10345).4" Label="outputKind 721777" />
<Node Id="21010:[10347..10383).4" Label="optimizationLevel: optimizationLevel 721778" />
<Node Id="21010:[10385..10425).4" Label="warningLevel: Diagnostic.MaxWarningLevel 721779" />
<Node Id="21010:[10427..10451).4" Label="allowUnsafe: allowUnsafe 721780" />
<Node Id="21010:[10306..10452).145" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721781" />
<Node Id="21010:[10306..10452).191" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721782" />
<Node Id="21010:[4681..4765).1" Label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 721783" />
<Node Id="21010:[4859..4892).1" Label="OutputKind.WindowsRuntimeMetadata 721784" />
<Node Id="21010:[4894..4919).1" Label="OptimizationLevel.Release 721785" />
<Node Id="21010:[4841..4920).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 721786" />
<Node Id="21010:[10204..10225).5" Label="param CreateTestOptions(OutputKind outputKind) 721787" />
<Node Id="21010:[10227..10262).5" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721788" />
<Node Id="21010:[10264..10288).5" Label="param CreateTestOptions(bool allowUnsafe = false) 721789" />
<Node Id="21010:[10335..10345).5" Label="outputKind 721790" />
<Node Id="21010:[10347..10383).5" Label="optimizationLevel: optimizationLevel 721791" />
<Node Id="21010:[10385..10425).5" Label="warningLevel: Diagnostic.MaxWarningLevel 721792" />
<Node Id="21010:[10427..10451).5" Label="allowUnsafe: allowUnsafe 721793" />
<Node Id="21010:[10306..10452).193" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721794" />
<Node Id="21010:[10306..10452).239" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721795" />
<Node Id="21010:[4826..4920).1" Label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 721796" />
<Node Id="21010:[5010..5043).1" Label="OutputKind.WindowsRuntimeMetadata 721797" />
<Node Id="21010:[5045..5068).1" Label="OptimizationLevel.Debug 721798" />
<Node Id="21010:[4992..5069).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 721799" />
<Node Id="21010:[10204..10225).6" Label="param CreateTestOptions(OutputKind outputKind) 721800" />
<Node Id="21010:[10227..10262).6" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721801" />
<Node Id="21010:[10264..10288).6" Label="param CreateTestOptions(bool allowUnsafe = false) 721802" />
<Node Id="21010:[10335..10345).6" Label="outputKind 721803" />
<Node Id="21010:[10347..10383).6" Label="optimizationLevel: optimizationLevel 721804" />
<Node Id="21010:[10385..10425).6" Label="warningLevel: Diagnostic.MaxWarningLevel 721805" />
<Node Id="21010:[10427..10451).6" Label="allowUnsafe: allowUnsafe 721806" />
<Node Id="21010:[10306..10452).241" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721807" />
<Node Id="21010:[10306..10452).287" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721808" />
<Node Id="21010:[4979..5069).1" Label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 721809" />
<Node Id="21010:[5164..5184).1" Label="OutputKind.NetModule 721810" />
<Node Id="21010:[5186..5211).1" Label="OptimizationLevel.Release 721811" />
<Node Id="21010:[5146..5212).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 721812" />
<Node Id="21010:[10204..10225).7" Label="param CreateTestOptions(OutputKind outputKind) 721813" />
<Node Id="21010:[10227..10262).7" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721814" />
<Node Id="21010:[10264..10288).7" Label="param CreateTestOptions(bool allowUnsafe = false) 721815" />
<Node Id="21010:[10335..10345).7" Label="outputKind 721816" />
<Node Id="21010:[10347..10383).7" Label="optimizationLevel: optimizationLevel 721817" />
<Node Id="21010:[10385..10425).7" Label="warningLevel: Diagnostic.MaxWarningLevel 721818" />
<Node Id="21010:[10427..10451).7" Label="allowUnsafe: allowUnsafe 721819" />
<Node Id="21010:[10306..10452).289" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721820" />
<Node Id="21010:[10306..10452).335" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721821" />
<Node Id="21010:[5130..5212).1" Label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 721822" />
<Node Id="21010:[5303..5323).1" Label="OutputKind.NetModule 721823" />
<Node Id="21010:[5325..5348).1" Label="OptimizationLevel.Debug 721824" />
<Node Id="21010:[5285..5349).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 721825" />
<Node Id="21010:[10204..10225).8" Label="param CreateTestOptions(OutputKind outputKind) 721826" />
<Node Id="21010:[10227..10262).8" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 721827" />
<Node Id="21010:[10264..10288).8" Label="param CreateTestOptions(bool allowUnsafe = false) 721828" />
<Node Id="21010:[10335..10345).8" Label="outputKind 721829" />
<Node Id="21010:[10347..10383).8" Label="optimizationLevel: optimizationLevel 721830" />
<Node Id="21010:[10385..10425).8" Label="warningLevel: Diagnostic.MaxWarningLevel 721831" />
<Node Id="21010:[10427..10451).8" Label="allowUnsafe: allowUnsafe 721832" />
<Node Id="21010:[10306..10452).337" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721833" />
<Node Id="21010:[10306..10452).383" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 721834" />
<Node Id="21010:[5271..5349).1" Label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 721835" />
<Node Id="21010:[5456..5460).1" Label="true 721836" />
<Node Id="21010:[5429..5461).1" Label="ReleaseDll.WithAllowUnsafe(true) 721837" />
<Node Id="21010:[5410..5461).1" Label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 721838" />
<Node Id="21010:[5566..5570).1" Label="true 721839" />
<Node Id="21010:[5539..5571).1" Label="ReleaseExe.WithAllowUnsafe(true) 721840" />
<Node Id="21010:[5520..5571).1" Label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 721841" />
<Node Id="21010:[5674..5678).1" Label="true 721842" />
<Node Id="21010:[5649..5679).1" Label="DebugDll.WithAllowUnsafe(true) 721843" />
<Node Id="21010:[5632..5679).1" Label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 721844" />
<Node Id="21010:[5780..5784).1" Label="true 721845" />
<Node Id="21010:[5755..5785).1" Label="DebugExe.WithAllowUnsafe(true) 721846" />
<Node Id="21010:[5738..5785).1" Label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 721847" />
<Node Id="21010:[5900..5951).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 721848" />
<Node Id="21010:[5866..5952).1" Label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721849" />
<Node Id="21010:[5846..5952).1" Label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721850" />
<Node Id="21010:[6065..6116).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 721851" />
<Node Id="21010:[6031..6117).1" Label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721852" />
<Node Id="21010:[6011..6117).1" Label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721853" />
<Node Id="21010:[6236..6287).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 721854" />
<Node Id="21010:[6199..6288).1" Label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721855" />
<Node Id="21010:[6176..6288).1" Label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721856" />
<Node Id="21010:[6397..6448).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 721857" />
<Node Id="21010:[6365..6449).1" Label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721858" />
<Node Id="21010:[6347..6449).1" Label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 721859" />
<Node Id="21010:[6560..6586).1" Label="DebugInformationFormat.Pdb 721860" />
<Node Id="21010:[6513..6587).1" Label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 721861" />
<Node Id="21010:[6497..6587).1" Label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 721862" />
<Node Id="21003:[34259..34289).1" Label="options = TestOptions.Regular; 721863" />
<Node Id="21003:[34320..34386).1" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 721864" />
<Node Id="21003:[34320..34386).2" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 721865" />
<Node Id="21003:[34320..34386).3" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 721866" />
<Node Id="21003:[34320..34386).5" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 721867" />
<Node Id="21003:[34320..34386).7" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 721868" />
<Node Id="21003:[34400..34487).1" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 721869" />
<Node Id="21003:[34400..34487).2" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 721870" />
<Node Id="21003:[34400..34487).3" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 721871" />
<Node Id="21003:[34400..34487).4" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 721872" />
<Node Id="21003:[34400..34487).6" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 721873" />
<Node Id="21003:[34407..34486).1" Label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 721874" />
<Node Id="21003:[34554..34569).1" Label="param CheckSerializable(SyntaxTree tree) 721875" />
<Node Id="21003:[34595..34627).1" Label="var stream = new MemoryStream(); 721876" />
<Node Id="21003:[34641..34667).1" Label="var root = tree.GetRoot(); 721877" />
<Node Id="21003:[34641..34667).3" Label="var root = tree.GetRoot(); 721878" />
<Node Id="21003:[34681..34706).1" Label="root.SerializeTo(stream); 721879" />
<Node Id="21003:[34681..34706).2" Label="root.SerializeTo(stream); 721880" />
<Node Id="21003:[34681..34706).4" Label="root.SerializeTo(stream); 721881" />
<Node Id="21003:[34720..34740).1" Label="stream.Position = 0; 721882" />
<Node Id="21003:[34720..34735).1" Label="stream.Position 721883" />
<Node Id="21003:[34754..34818).1" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 721884" />
<Node Id="21003:[34754..34818).2" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 721885" />
<Node Id="21003:[34754..34818).4" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 721886" />
<Node Id="21003:[34832..34844).1" Label="return tree; 721887" />
<Node Id="21004:[1129..1207).1" Label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 721888" />
<Node Id="21003:[46280..46350).3" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 721889" />
<Node Id="21003:[46366..46650).1" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 721890" />
<Node Id="21003:[46366..46650).2" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 721891" />
<Node Id="21003:[46419..46533).1" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 721892" />
<Node Id="21003:[46419..46533).2" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 721893" />
<Node Id="21003:[46419..46533).4" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 721894" />
<Node Id="21003:[46563..46584).1" Label="hasTopLevelStatements 721895" />
<Node Id="21003:[46553..46635).1" Label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 721896" />
<Node Id="21003:[46755..46872).1" Label="if (Debugger.IsAttached)
            {
                options = options.WithConcurrentBuild(false);
            } 721897" />
<Node Id="21003:[46888..47066).1" Label="if (experimentalFeature.HasValue)
            {
                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);
            } 721898" />
<Node Id="21003:[47082..47319).1" Label="Func$CSharpCompilation$ createCompilationLambda = () =$ CSharpCompilation.Create(
                assemblyName == '' ? GetUniqueName() : assemblyName,
                syntaxTrees,
                references,
                options); 721899" />
<Node Id="21003:[47333..47400).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 721900" />
<Node Id="21003:[47333..47399).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 721901" />
<Node Id="25006:[11552..11587).1" Label="param ValidateIOperations(Func$Compilation$ createCompilation) 721902" />
<Node Id="25006:[11613..11696).1" Label="if (!EnableVerifyIOperation)
            {
                return;
            } 721903" />
<Node Id="25006:[11674..11681).1" Label="return; 721904" />
<Node Id="21003:[47333..47400).2" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 721905" />
<Node Id="21003:[47414..47458).1" Label="var compilation = createCompilationLambda(); 721906" />
<Node Id="21003:[47414..47458).2" Label="var compilation = createCompilationLambda(); 721907" />
<Node Id="25004:[1041..1077).1" Label="return Guid.NewGuid().ToString('D'); 721908" />
<Node Id="21003:[47414..47458).4" Label="var compilation = createCompilationLambda(); 721909" />
<Node Id="21003:[47689..47930).1" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 721910" />
<Node Id="21003:[47717..47747).1" Label="IsNullableEnabled(compilation) 721911" />
<Node Id="21003:[48025..48054).1" Label="param IsNullableEnabled(CSharpCompilation compilation) 721912" />
<Node Id="21003:[48175..48211).1" Label="var trees = compilation.SyntaxTrees; 721913" />
<Node Id="21003:[48225..48313).1" Label="if (trees.IsDefaultOrEmpty)
            {
                return false;
            } 721914" />
<Node Id="21003:[48327..48378).1" Label="var options = (CSharpParseOptions)trees[0].Options; 721915" />
<Node Id="21003:[48327..48378).2" Label="var options = (CSharpParseOptions)trees[0].Options; 721916" />
<Node Id="21003:[48392..48469).1" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 721917" />
<Node Id="21003:[48392..48469).2" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 721918" />
<Node Id="21003:[47689..47930).3" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 721919" />
<Node Id="21003:[47944..47963).1" Label="return compilation; 721920" />
<Node Id="28001:[46830..47157).1" Label="testAssembly.VerifyDiagnostics(
                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'
                // public class ITT : IDerived
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 721921" />
<Node Id="28001:[46830..47157).2" Label="testAssembly.VerifyDiagnostics(
                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'
                // public class ITT : IDerived
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 721922" />
<Node Id="28001:[46830..47157).3" Label="testAssembly.VerifyDiagnostics(
                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'
                // public class ITT : IDerived
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 721923" />
<Node Id="28001:[47029..47095).1" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived') 721924" />
<Node Id="25004:[19277..19288).1" Label="param Diagnostic(object code) 721925" />
<Node Id="25004:[19303..19330).1" Label="param Diagnostic(string squiggledText = null) 721926" />
<Node Id="25004:[19345..19370).1" Label="param Diagnostic(object[] arguments = null) 721927" />
<Node Id="25004:[19385..19419).1" Label="param Diagnostic(LinePosition? startLocation = null) 721928" />
<Node Id="25004:[19434..19483).1" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 721929" />
<Node Id="25004:[19498..19537).1" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 721930" />
<Node Id="25004:[19552..19577).1" Label="param Diagnostic(bool isSuppressed = false) 721931" />
<Node Id="25004:[19603..19877).1" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 721932" />
<Node Id="25004:[19603..19877).2" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 721933" />
<Node Id="25004:[19603..19877).3" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 721934" />
<Node Id="25004:[19603..19877).4" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 721935" />
<Node Id="25004:[19603..19877).5" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 721936" />
<Node Id="25004:[19603..19877).6" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 721937" />
<Node Id="25004:[19603..19877).7" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 721938" />
<Node Id="25004:[19610..19876).1" Label="TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed) 721939" />
<Node Id="25007:[3334..3345).1" Label="param Diagnostic(object code) 721940" />
<Node Id="25007:[3360..3387).1" Label="param Diagnostic(string squiggledText = null) 721941" />
<Node Id="25007:[3402..3427).1" Label="param Diagnostic(object[] arguments = null) 721942" />
<Node Id="25007:[3442..3476).1" Label="param Diagnostic(LinePosition? startLocation = null) 721943" />
<Node Id="25007:[3491..3540).1" Label="param Diagnostic(Func$SyntaxNode, bool$ syntaxNodePredicate = null) 721944" />
<Node Id="25007:[3555..3594).1" Label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 721945" />
<Node Id="25007:[3609..3634).1" Label="param Diagnostic(bool isSuppressed = false) 721946" />
<Node Id="25007:[3660..3885).1" Label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||
                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||
                         code is int ||
                         code is string); 721947" />
<Node Id="25007:[3901..4266).1" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 721948" />
<Node Id="25007:[3901..4266).4" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 721949" />
<Node Id="25007:[3901..4266).6" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 721950" />
<Node Id="25007:[3901..4266).7" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 721951" />
<Node Id="25007:[3901..4266).8" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 721952" />
<Node Id="25007:[3901..4266).9" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 721953" />
<Node Id="25007:[3901..4266).10" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 721954" />
<Node Id="25003:[747..750).1" Label="{ } 721955" />
<Node Id="25003:[740..750).1" Label="None = { } 721956" />
<Node Id="25003:[814..818).1" Label="null 721957" />
<Node Id="25003:[808..818).1" Label="Any = null 721958" />
<Node Id="25007:[3901..4266).13" Label="return new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed); 721959" />
<Node Id="25007:[3908..4265).1" Label="new DiagnosticDescription(
                code as string ?? (object)(int)code,
                false,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                code.GetType(),
                isSuppressed: isSuppressed) 721960" />
<Node Id="25003:[2816..2827).1" Label="param DiagnosticDescription(object code) 721961" />
<Node Id="25003:[2842..2863).1" Label="param DiagnosticDescription(bool isWarningAsError) 721962" />
<Node Id="25003:[2878..2898).1" Label="param DiagnosticDescription(string squiggledText) 721963" />
<Node Id="25003:[2913..2931).1" Label="param DiagnosticDescription(object[] arguments) 721964" />
<Node Id="25003:[2946..2973).1" Label="param DiagnosticDescription(LinePosition? startLocation) 721965" />
<Node Id="25003:[2988..3030).1" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 721966" />
<Node Id="25003:[3045..3076).1" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 721967" />
<Node Id="25003:[3091..3116).1" Label="param DiagnosticDescription(Type errorCodeType = null) 721968" />
<Node Id="25003:[3131..3176).1" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 721969" />
<Node Id="25003:[3191..3238).1" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 721970" />
<Node Id="25003:[3253..3278).1" Label="param DiagnosticDescription(bool isSuppressed = false) 721971" />
<Node Id="25003:[2773..3850).1" Label="param DiagnosticDescription(this) 721972" />
<Node Id="25003:[912..917).1" Label="_code 721973" />
<Node Id="25003:[950..967).1" Label="_isWarningAsError 721974" />
<Node Id="25003:[1000..1013).1" Label="_isSuppressed 721975" />
<Node Id="25003:[1048..1062).1" Label="_squiggledText 721976" />
<Node Id="25003:[1099..1109).1" Label="_arguments 721977" />
<Node Id="25003:[1151..1165).1" Label="_startPosition 721978" />
<Node Id="25003:[1276..1303).1" Label="_argumentOrderDoesNotMatter 721979" />
<Node Id="25003:[1336..1350).1" Label="_errorCodeType 721980" />
<Node Id="25003:[1383..1412).1" Label="_ignoreArgumentsWhenComparing 721981" />
<Node Id="25003:[1460..1479).1" Label="_defaultSeverityOpt 721982" />
<Node Id="25003:[1527..1548).1" Label="_effectiveSeverityOpt 721983" />
<Node Id="25003:[1673..1689).1" Label="_syntaxPredicate 721984" />
<Node Id="25003:[1713..1727).1" Label="_showPredicate 721985" />
<Node Id="25003:[1891..1900).1" Label="_location 721986" />
<Node Id="25003:[1941..1960).1" Label="_argumentsAsStrings 721987" />
<Node Id="25003:[3304..3309).1" Label="_code 721988" />
<Node Id="25003:[3331..3348).1" Label="_isWarningAsError 721989" />
<Node Id="25003:[3382..3396).1" Label="_squiggledText 721990" />
<Node Id="25003:[3427..3437).1" Label="_arguments 721991" />
<Node Id="25003:[3464..3478).1" Label="_startPosition 721992" />
<Node Id="25003:[3509..3525).1" Label="_syntaxPredicate 721993" />
<Node Id="25003:[3562..3589).1" Label="_argumentOrderDoesNotMatter 721994" />
<Node Id="25003:[3633..3682).1" Label="_errorCodeType = errorCodeType ?? code.GetType(); 721995" />
<Node Id="25003:[3633..3647).1" Label="_errorCodeType 721996" />
<Node Id="25003:[3696..3715).1" Label="_defaultSeverityOpt 721997" />
<Node Id="25003:[3751..3772).1" Label="_effectiveSeverityOpt 721998" />
<Node Id="25003:[3810..3823).1" Label="_isSuppressed 721999" />
<Node Id="25004:[19603..19877).8" Label="return TestHelpers.Diagnostic(
                code,
                squiggledText,
                arguments,
                startLocation,
                syntaxNodePredicate,
                argumentOrderDoesNotMatter,
                isSuppressed: isSuppressed); 722000" />
<Node Id="28001:[46830..47157).16" Label="testAssembly.VerifyDiagnostics(
                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'
                // public class ITT : IDerived
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 722001" />
<Node Id="28001:[47029..47135).1" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()') 722002" />
<Node Id="28001:[47029..47135).3" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()') 722003" />
<Node Id="25003:[7407..7432).1" Label="param WithArguments(params object[] arguments) 722004" />
<Node Id="25003:[7364..7671).1" Label="param WithArguments(this) 722005" />
<Node Id="25003:[7458..7660).1" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722006" />
<Node Id="25003:[7458..7660).2" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722007" />
<Node Id="25003:[7458..7660).3" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722008" />
<Node Id="25003:[7458..7660).4" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722009" />
<Node Id="25003:[7458..7660).5" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722010" />
<Node Id="25003:[7458..7660).6" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722011" />
<Node Id="25003:[7458..7660).7" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722012" />
<Node Id="25003:[7458..7660).9" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722013" />
<Node Id="25003:[7458..7660).10" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722014" />
<Node Id="25003:[7458..7660).11" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722015" />
<Node Id="25003:[7458..7660).12" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722016" />
<Node Id="25003:[7465..7659).1" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 722017" />
<Node Id="25003:[2816..2827).2" Label="param DiagnosticDescription(object code) 722018" />
<Node Id="25003:[2842..2863).2" Label="param DiagnosticDescription(bool isWarningAsError) 722019" />
<Node Id="25003:[2878..2898).2" Label="param DiagnosticDescription(string squiggledText) 722020" />
<Node Id="25003:[2913..2931).2" Label="param DiagnosticDescription(object[] arguments) 722021" />
<Node Id="25003:[2946..2973).2" Label="param DiagnosticDescription(LinePosition? startLocation) 722022" />
<Node Id="25003:[2988..3030).2" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 722023" />
<Node Id="25003:[3045..3076).2" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 722024" />
<Node Id="25003:[3091..3116).2" Label="param DiagnosticDescription(Type errorCodeType = null) 722025" />
<Node Id="25003:[3131..3176).2" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 722026" />
<Node Id="25003:[3191..3238).2" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 722027" />
<Node Id="25003:[3253..3278).2" Label="param DiagnosticDescription(bool isSuppressed = false) 722028" />
<Node Id="25003:[2773..3850).2" Label="param DiagnosticDescription(this) 722029" />
<Node Id="25003:[912..917).2" Label="_code 722030" />
<Node Id="25003:[950..967).2" Label="_isWarningAsError 722031" />
<Node Id="25003:[1000..1013).2" Label="_isSuppressed 722032" />
<Node Id="25003:[1048..1062).2" Label="_squiggledText 722033" />
<Node Id="25003:[1099..1109).2" Label="_arguments 722034" />
<Node Id="25003:[1151..1165).4" Label="_startPosition 722035" />
<Node Id="25003:[1276..1303).2" Label="_argumentOrderDoesNotMatter 722036" />
<Node Id="25003:[1336..1350).2" Label="_errorCodeType 722037" />
<Node Id="25003:[1383..1412).2" Label="_ignoreArgumentsWhenComparing 722038" />
<Node Id="25003:[1460..1479).2" Label="_defaultSeverityOpt 722039" />
<Node Id="25003:[1527..1548).2" Label="_effectiveSeverityOpt 722040" />
<Node Id="25003:[1673..1689).2" Label="_syntaxPredicate 722041" />
<Node Id="25003:[1713..1727).2" Label="_showPredicate 722042" />
<Node Id="25003:[1891..1900).2" Label="_location 722043" />
<Node Id="25003:[1941..1960).2" Label="_argumentsAsStrings 722044" />
<Node Id="25003:[3427..3437).2" Label="_arguments 722045" />
<Node Id="25003:[3562..3589).2" Label="_argumentOrderDoesNotMatter 722046" />
<Node Id="28001:[46830..47157).23" Label="testAssembly.VerifyDiagnostics(
                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'
                // public class ITT : IDerived
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 722047" />
<Node Id="28001:[47029..47155).1" Label="Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20) 722048" />
<Node Id="25003:[9181..9189).1" Label="param WithLocation(int line) 722049" />
<Node Id="25003:[9191..9201).1" Label="param WithLocation(int column) 722050" />
<Node Id="25003:[9139..9487).1" Label="param WithLocation(this) 722051" />
<Node Id="25003:[9227..9476).1" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722052" />
<Node Id="25003:[9227..9476).2" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722053" />
<Node Id="25003:[9227..9476).3" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722054" />
<Node Id="25003:[9227..9476).4" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722055" />
<Node Id="25003:[9227..9476).5" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722056" />
<Node Id="25003:[9227..9476).6" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722057" />
<Node Id="25003:[9227..9476).9" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722058" />
<Node Id="25003:[9227..9476).11" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722059" />
<Node Id="25003:[9227..9476).13" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722060" />
<Node Id="25003:[9227..9476).14" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722061" />
<Node Id="25003:[9227..9476).15" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722062" />
<Node Id="25003:[9227..9476).16" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722063" />
<Node Id="25003:[9227..9476).17" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722064" />
<Node Id="25003:[9227..9476).18" Label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 722065" />
<Node Id="25003:[9234..9475).1" Label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, _arguments, new LinePosition(line - 1, column - 1), _syntaxPredicate, _argumentOrderDoesNotMatter, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 722066" />
<Node Id="25003:[2816..2827).3" Label="param DiagnosticDescription(object code) 722067" />
<Node Id="25003:[2842..2863).3" Label="param DiagnosticDescription(bool isWarningAsError) 722068" />
<Node Id="25003:[2878..2898).3" Label="param DiagnosticDescription(string squiggledText) 722069" />
<Node Id="25003:[2913..2931).3" Label="param DiagnosticDescription(object[] arguments) 722070" />
<Node Id="25003:[2946..2973).3" Label="param DiagnosticDescription(LinePosition? startLocation) 722071" />
<Node Id="25003:[2988..3030).3" Label="param DiagnosticDescription(Func$SyntaxNode, bool$ syntaxNodePredicate) 722072" />
<Node Id="25003:[3045..3076).3" Label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 722073" />
<Node Id="25003:[3091..3116).3" Label="param DiagnosticDescription(Type errorCodeType = null) 722074" />
<Node Id="25003:[3131..3176).3" Label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 722075" />
<Node Id="25003:[3191..3238).3" Label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 722076" />
<Node Id="25003:[3253..3278).3" Label="param DiagnosticDescription(bool isSuppressed = false) 722077" />
<Node Id="25003:[2773..3850).3" Label="param DiagnosticDescription(this) 722078" />
<Node Id="25003:[912..917).3" Label="_code 722079" />
<Node Id="25003:[950..967).3" Label="_isWarningAsError 722080" />
<Node Id="25003:[1000..1013).3" Label="_isSuppressed 722081" />
<Node Id="25003:[1048..1062).3" Label="_squiggledText 722082" />
<Node Id="25003:[1099..1109).3" Label="_arguments 722083" />
<Node Id="25003:[1151..1165).7" Label="_startPosition 722084" />
<Node Id="25003:[1276..1303).3" Label="_argumentOrderDoesNotMatter 722085" />
<Node Id="25003:[1336..1350).3" Label="_errorCodeType 722086" />
<Node Id="25003:[1383..1412).3" Label="_ignoreArgumentsWhenComparing 722087" />
<Node Id="25003:[1460..1479).3" Label="_defaultSeverityOpt 722088" />
<Node Id="25003:[1527..1548).3" Label="_effectiveSeverityOpt 722089" />
<Node Id="25003:[1673..1689).3" Label="_syntaxPredicate 722090" />
<Node Id="25003:[1713..1727).3" Label="_showPredicate 722091" />
<Node Id="25003:[1891..1900).3" Label="_location 722092" />
<Node Id="25003:[1941..1960).3" Label="_argumentsAsStrings 722093" />
<Node Id="25003:[3464..3478).3" Label="_startPosition 722094" />
<Node Id="28001:[46830..47157).28" Label="testAssembly.VerifyDiagnostics(
                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'
                // public class ITT : IDerived
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)); 722095" />
<Node Id="28001:[46830..47156).1" Label="testAssembly.VerifyDiagnostics(
                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'
                // public class ITT : IDerived
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)) 722096" />
<Node Id="28001:[46830..47156).2" Label="testAssembly.VerifyDiagnostics(
                // (2,20): error CS0535: 'ITT' does not implement interface member 'IBase.method1()'
                // public class ITT : IDerived
                Diagnostic(ErrorCode.ERR_UnimplementedInterfaceMember, 'IDerived').WithArguments('ITT', 'IBase.method1()').WithLocation(2, 20)) 722097" />
<Node Id="25002:[4263..4282).1" Label="param VerifyDiagnostics(this TCompilation c) 722098" />
<Node Id="25002:[4284..4323).1" Label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 722099" />
<Node Id="25002:[4395..4432).1" Label="var diagnostics = c.GetDiagnostics(); 722100" />
<Node Id="10345:[956..960).1" Label="null 722101" />
<Node Id="10345:[975..1032).1" Label="ImmutableDictionary$string, AliasAndUsingDirective$.Empty 722102" />
<Node Id="10345:[1047..1101).1" Label="ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty 722103" />
<Node Id="10345:[1116..1166).1" Label="ImmutableArray$AliasAndExternAliasDirective$.Empty 722104" />
<Node Id="10345:[1181..1185).1" Label="null 722105" />
<Node Id="10345:[930..1186).1" Label="new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 722106" />
<Node Id="10345:[1753..1782).1" Label="param Imports(CSharpCompilation compilation) 722107" />
<Node Id="10345:[1797..1861).1" Label="param Imports(ImmutableDictionary$string, AliasAndUsingDirective$ usingAliases) 722108" />
<Node Id="10345:[1876..1931).1" Label="param Imports(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 722109" />
<Node Id="10345:[1946..1998).1" Label="param Imports(ImmutableArray$AliasAndExternAliasDirective$ externs) 722110" />
<Node Id="10345:[2013..2038).1" Label="param Imports(DiagnosticBag diagnostics) 722111" />
<Node Id="10345:[1723..2412).1" Label="param Imports(this) 722112" />
<Node Id="10345:[1234..1246).1" Label="_compilation 722113" />
<Node Id="10345:[1288..1300).1" Label="_diagnostics 722114" />
<Node Id="10345:[1531..1543).1" Label="UsingAliases 722115" />
<Node Id="10345:[2064..2099).1" Label="Debug.Assert(usingAliases != null); 722116" />
<Node Id="10345:[2064..2099).2" Label="Debug.Assert(usingAliases != null); 722117" />
<Node Id="10345:[2113..2145).1" Label="Debug.Assert(!usings.IsDefault); 722118" />
<Node Id="10345:[2159..2192).1" Label="Debug.Assert(!externs.IsDefault); 722119" />
<Node Id="10345:[2208..2220).1" Label="_compilation 722120" />
<Node Id="10345:[2249..2266).1" Label="this.UsingAliases 722121" />
<Node Id="10345:[2296..2307).1" Label="this.Usings 722122" />
<Node Id="10345:[2331..2343).1" Label="_diagnostics 722123" />
<Node Id="10345:[2372..2390).1" Label="this.ExternAliases 722124" />
<Node Id="10345:[922..1186).1" Label="Empty = new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 722125" />
<Node Id="25002:[4395..4432).3" Label="var diagnostics = c.GetDiagnostics(); 722126" />
<Node Id="10345:[13089..13118).1" Label="param FromGlobalUsings(CSharpCompilation compilation) 722127" />
<Node Id="10345:[13144..13184).1" Label="var usings = compilation.Options.Usings; 722128" />
<Node Id="10345:[13200..13326).1" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 722129" />
<Node Id="10345:[13200..13326).2" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 722130" />
<Node Id="10345:[13200..13326).4" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 722131" />
<Node Id="10345:[13298..13311).1" Label="return Empty; 722132" />
<Node Id="25002:[4395..4432).6" Label="var diagnostics = c.GetDiagnostics(); 722133" />
<Node Id="10345:[24530..24565).1" Label="param Complete(CancellationToken cancellationToken) 722134" />
<Node Id="10345:[24507..26254).1" Label="param Complete(this) 722135" />
<Node Id="10345:[24591..26243).1" Label="while (true)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var incompletePart = _state.NextIncompletePart;
                switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                }

                _state.SpinWaitComplete(incompletePart, cancellationToken);
            } 722136" />
<Node Id="10345:[24636..24685).1" Label="cancellationToken.ThrowIfCancellationRequested(); 722137" />
<Node Id="10345:[24703..24750).1" Label="var incompletePart = _state.NextIncompletePart; 722138" />
<Node Id="10345:[24768..26149).1" Label="switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                } 722139" />
<Node Id="10345:[26025..26098).1" Label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 722140" />
<Node Id="10345:[26169..26228).1" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 722141" />
<Node Id="10345:[26169..26228).2" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 722142" />
<Node Id="10345:[26169..26228).3" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 722143" />
<Node Id="10345:[24932..25204).1" Label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            } 722144" />
<Node Id="10345:[25064..25074).1" Label="Validate() 722145" />
<Node Id="10345:[26266..28173).1" Label="param Validate(this) 722146" />
<Node Id="10345:[26314..26387).1" Label="if (this == Empty)
            {
                return;
            } 722147" />
<Node Id="10345:[26365..26372).1" Label="return; 722148" />
<Node Id="10345:[25064..25075).1" Label="Validate(); 722149" />
<Node Id="10345:[25109..25173).1" Label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 722150" />
<Node Id="10345:[25858..25865).1" Label="return; 722151" />
<Node Id="10298:[471..492).1" Label="param Includes(this BinderFlags self) 722152" />
<Node Id="10298:[494..511).1" Label="param Includes(BinderFlags other) 722153" />
<Node Id="10298:[537..568).1" Label="return (self & other) == other; 722154" />
<Node Id="25002:[4395..4432).10" Label="var diagnostics = c.GetDiagnostics(); 722155" />
<Node Id="10292:[1720..1721).1" Label="0 722156" />
<Node Id="10292:[1704..1721).1" Label="ExternalScope = 0 722157" />
<Node Id="10292:[1768..1769).1" Label="1 722158" />
<Node Id="10292:[1752..1769).1" Label="TopLevelScope = 1 722159" />
<Node Id="10292:[1992..1993).1" Label="2 722160" />
<Node Id="10292:[1963..1993).1" Label="ValueKindInsignificantBits = 2 722161" />
<Node Id="10292:[2032..2129).1" Label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 $$ ValueKindInsignificantBits) - 1)) 722162" />
<Node Id="10306:[388969..389344).1" Label="property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 722163" />
<Node Id="10306:[388923..389344).1" Label="s_isIndexedPropertyWithNonOptionalArguments = property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 722164" />
<Node Id="10306:[389480..389543).1" Label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 722165" />
<Node Id="10306:[389562..389646).1" Label="memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType 722166" />
<Node Id="10306:[389708..389839).1" Label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 722167" />
<Node Id="10306:[389665..389839).1" Label="miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 722168" />
<Node Id="10306:[389438..389840).1" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 722169" />
<Node Id="10306:[389438..389840).17" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 722170" />
<Node Id="10306:[389401..389840).1" Label="s_propertyGroupFormat =
            new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 722171" />
<Node Id="10310:[84494..84496).1" Label="10 722172" />
<Node Id="10310:[84458..84496).1" Label="MaxParameterListsForErrorRecovery = 10 722173" />
<Node Id="10316:[802..830).1" Label="'$$h__TransparentIdentifier' 722174" />
<Node Id="10316:[772..830).1" Label="transparentIdentifierPrefix = '$$h__TransparentIdentifier' 722175" />
<Node Id="10319:[69643..69663).1" Label="s =$ (MethodSymbol)s 722176" />
<Node Id="10319:[69620..69663).1" Label="s_toMethodSymbolFunc = s =$ (MethodSymbol)s 722177" />
<Node Id="10319:[69752..69774).1" Label="s =$ (PropertySymbol)s 722178" />
<Node Id="10319:[69727..69774).1" Label="s_toPropertySymbolFunc = s =$ (PropertySymbol)s 722179" />
<Node Id="10286:[30925..30954).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 722180" />
<Node Id="10286:[30969..31000).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 722181" />
<Node Id="10286:[31015..31040).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 722182" />
<Node Id="10286:[31055..31080).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 722183" />
<Node Id="10286:[31095..31126).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 722184" />
<Node Id="10286:[31152..31210).1" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 722185" />
<Node Id="10286:[31152..31210).2" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 722186" />
<Node Id="10286:[31152..31210).4" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 722187" />
<Node Id="10286:[31152..31210).5" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 722188" />
<Node Id="10286:[31515..31598).1" Label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 722189" />
<Node Id="10286:[31614..31710).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722190" />
<Node Id="10286:[31614..31710).2" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722191" />
<Node Id="10286:[31614..31710).3" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722192" />
<Node Id="10286:[31614..31710).4" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722193" />
<Node Id="10286:[31614..31710).5" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722194" />
<Node Id="10286:[31614..31710).6" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 722195" />
<Node Id="10286:[31614..31709).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 722196" />
<Node Id="10319:[80080..80109).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 722197" />
<Node Id="10319:[80111..80133).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 722198" />
<Node Id="10319:[80135..80160).1" Label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 722199" />
<Node Id="10319:[80162..80186).1" Label="param GetWellKnownTypeMember(Location location = null) 722200" />
<Node Id="10319:[80188..80212).1" Label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 722201" />
<Node Id="10319:[80214..80237).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 722202" />
<Node Id="10319:[80263..80315).1" Label="Debug.Assert((syntax != null) ^ (location != null)); 722203" />
<Node Id="10319:[80263..80315).2" Label="Debug.Assert((syntax != null) ^ (location != null)); 722204" />
<Node Id="10319:[80263..80315).4" Label="Debug.Assert((syntax != null) ^ (location != null)); 722205" />
<Node Id="10319:[80263..80315).5" Label="Debug.Assert((syntax != null) ^ (location != null)); 722206" />
<Node Id="10319:[80331..80364).1" Label="DiagnosticInfo useSiteDiagnostic; 722207" />
<Node Id="10319:[80378..80479).1" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 722208" />
<Node Id="10319:[80378..80479).2" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 722209" />
<Node Id="10319:[80378..80479).3" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 722210" />
<Node Id="10319:[80378..80479).4" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 722211" />
<Node Id="10319:[80400..80478).1" Label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 722212" />
<Node Id="10319:[80843..80872).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 722213" />
<Node Id="10319:[80874..80896).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 722214" />
<Node Id="10319:[80898..80931).1" Label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 722215" />
<Node Id="10319:[80933..80956).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 722216" />
<Node Id="10319:[80982..81047).1" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 722217" />
<Node Id="10319:[80982..81047).2" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 722218" />
<Node Id="10319:[80982..81047).3" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 722219" />
<Node Id="10060:[2841..2854).1" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722220" />
<Node Id="10060:[2856..2875).1" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722221" />
<Node Id="10060:[2901..2932).1" Label="Debug.Assert(symbol is object); 722222" />
<Node Id="10060:[2948..3467).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 722223" />
<Node Id="10060:[3483..3502).1" Label="isInternal = false; 722224" />
<Node Id="10060:[3553..4223).1" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 722225" />
<Node Id="10060:[4243..4274).1" Label="symbol = symbol.ContainingType; 722226" />
<Node Id="10060:[3518..4328).1" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 722227" />
<Node Id="10060:[4344..4356).1" Label="return true; 722228" />
<Node Id="10319:[80982..81047).8" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 722229" />
<Node Id="10060:[2841..2854).2" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722230" />
<Node Id="10060:[2856..2875).2" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722231" />
<Node Id="10060:[2901..2932).3" Label="Debug.Assert(symbol is object); 722232" />
<Node Id="10060:[2948..3467).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 722233" />
<Node Id="10060:[3553..4223).2" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 722234" />
<Node Id="10060:[4243..4274).2" Label="symbol = symbol.ContainingType; 722235" />
<Node Id="10060:[3518..4328).2" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 722236" />
<Node Id="10060:[3553..4223).3" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 722237" />
<Node Id="10319:[80982..81047).15" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 722238" />
<Node Id="10319:[81063..82500).1" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 722239" />
<Node Id="10319:[81063..82500).2" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 722240" />
<Node Id="10319:[81129..81207).1" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 722241" />
<Node Id="10319:[81129..81207).2" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 722242" />
<Node Id="10060:[2841..2854).4" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722243" />
<Node Id="10060:[2856..2875).4" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722244" />
<Node Id="10060:[2901..2932).7" Label="Debug.Assert(symbol is object); 722245" />
<Node Id="10060:[2948..3467).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 722246" />
<Node Id="10060:[3483..3502).7" Label="isInternal = false; 722247" />
<Node Id="10060:[3553..4223).6" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 722248" />
<Node Id="10060:[4243..4274).6" Label="symbol = symbol.ContainingType; 722249" />
<Node Id="10060:[3518..4328).6" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 722250" />
<Node Id="10060:[2841..2854).5" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722251" />
<Node Id="10060:[2856..2875).5" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722252" />
<Node Id="10060:[2901..2932).9" Label="Debug.Assert(symbol is object); 722253" />
<Node Id="10060:[2948..3467).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 722254" />
<Node Id="10060:[3553..4223).7" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 722255" />
<Node Id="10060:[4243..4274).7" Label="symbol = symbol.ContainingType; 722256" />
<Node Id="10060:[3518..4328).7" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 722257" />
<Node Id="10319:[81225..82039).1" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 722258" />
<Node Id="10319:[81225..82039).2" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 722259" />
<Node Id="10319:[82516..82536).1" Label="return memberSymbol; 722260" />
<Node Id="10319:[80495..80738).1" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 722261" />
<Node Id="10319:[80495..80738).2" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 722262" />
<Node Id="10319:[80754..80774).1" Label="return memberSymbol; 722263" />
<Node Id="10060:[2841..2854).9" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722264" />
<Node Id="10060:[2856..2875).9" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722265" />
<Node Id="10060:[2901..2932).17" Label="Debug.Assert(symbol is object); 722266" />
<Node Id="10060:[2948..3467).9" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 722267" />
<Node Id="10060:[3553..4223).11" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 722268" />
<Node Id="10060:[4243..4274).11" Label="symbol = symbol.ContainingType; 722269" />
<Node Id="10060:[3518..4328).11" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 722270" />
<Node Id="10060:[2841..2854).10" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 722271" />
<Node Id="10060:[2856..2875).10" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 722272" />
<Node Id="10060:[2901..2932).19" Label="Debug.Assert(symbol is object); 722273" />
<Node Id="10060:[2948..3467).10" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 722274" />
<Node Id="10060:[3553..4223).12" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 722275" />
<Node Id="10060:[4243..4274).12" Label="symbol = symbol.ContainingType; 722276" />
<Node Id="10060:[3518..4328).12" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 722277" />
<Node Id="10319:[81225..82039).4" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 722278" />
<Node Id="10319:[81225..82039).5" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 722279" />
<Node Id="10319:[82516..82536).2" Label="return memberSymbol; 722280" />
<Node Id="10319:[80495..80738).5" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 722281" />
<Node Id="10319:[80754..80774).2" Label="return memberSymbol; 722282" />
<Node Id="10319:[81225..82039).7" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 722283" />
<Node Id="10319:[82516..82536).3" Label="return memberSymbol; 722284" />
<Node Id="10319:[80754..80774).3" Label="return memberSymbol; 722285" />
<Node Id="10076:[2308..2337).1" Label="param BinderFactory(CSharpCompilation compilation) 722286" />
<Node Id="10076:[2339..2360).1" Label="param BinderFactory(SyntaxTree syntaxTree) 722287" />
<Node Id="10076:[2362..2386).1" Label="param BinderFactory(bool ignoreAccessibility) 722288" />
<Node Id="10076:[2285..3386).1" Label="param BinderFactory(this) 722289" />
<Node Id="10076:[1715..1727).1" Label="_binderCache 722290" />
<Node Id="10076:[1773..1785).1" Label="_compilation 722291" />
<Node Id="10076:[1824..1835).1" Label="_syntaxTree 722292" />
<Node Id="10076:[1883..1903).1" Label="_buckStopsHereBinder 722293" />
<Node Id="10076:[1936..1956).1" Label="_ignoreAccessibility 722294" />
<Node Id="10076:[2247..2272).1" Label="_binderFactoryVisitorPool 722295" />
<Node Id="10076:[2412..2424).1" Label="_compilation 722296" />
<Node Id="10076:[2453..2464).1" Label="_syntaxTree 722297" />
<Node Id="10076:[2492..2512).1" Label="_ignoreAccessibility 722298" />
<Node Id="10076:[2551..2658).1" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 722299" />
<Node Id="10076:[2551..2658).3" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 722300" />
<Node Id="10076:[2551..2658).5" Label="_binderFactoryVisitorPool = new ObjectPool$BinderFactoryVisitor$(() =$ new BinderFactoryVisitor(this), 64); 722301" />
<Node Id="10076:[2551..2576).1" Label="_binderFactoryVisitorPool 722302" />
<Node Id="10076:[3236..3299).1" Label="_binderCache = new ConcurrentCache$BinderCacheKey, Binder$(50); 722303" />
<Node Id="10076:[3236..3248).1" Label="_binderCache 722304" />
<Node Id="10076:[3315..3375).1" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 722305" />
<Node Id="10076:[3315..3375).2" Label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 722306" />
<Node Id="10076:[3338..3374).1" Label="new BuckStopsHereBinder(compilation) 722307" />
<Node Id="10325:[645..674).1" Label="param BuckStopsHereBinder(CSharpCompilation compilation) 722308" />
<Node Id="10325:[616..730).1" Label="param BuckStopsHereBinder(this) 722309" />
<Node Id="10325:[696..707).1" Label="compilation 722310" />
<Node Id="10325:[616..730).2" Label="param BuckStopsHereBinder(this) 722311" />
<Node Id="10286:[939..968).1" Label="param Binder(CSharpCompilation compilation) 722312" />
<Node Id="10286:[923..1219).1" Label="param Binder(this) 722313" />
<Node Id="10286:[726..773).1" Label="internal CSharpCompilation Compilation { get; } 722314" />
<Node Id="10286:[815..820).1" Label="Flags 722315" />
<Node Id="10286:[2975..3015).1" Label="protected internal Binder? Next { get; } 722316" />
<Node Id="10286:[17802..17818).1" Label="_lazyConversions 722317" />
<Node Id="10286:[18200..18223).1" Label="_lazyOverloadResolution 722318" />
<Node Id="10286:[994..1034).1" Label="RoslynDebug.Assert(compilation != null); 722319" />
<Node Id="10286:[994..1034).2" Label="RoslynDebug.Assert(compilation != null); 722320" />
<Node Id="10286:[1048..1096).1" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 722321" />
<Node Id="10286:[1048..1096).2" Label="RoslynDebug.Assert(this is BuckStopsHereBinder); 722322" />
<Node Id="10286:[1110..1120).1" Label="this.Flags 722323" />
<Node Id="10286:[1177..1193).1" Label="this.Compilation 722324" />
<Node Id="10076:[3315..3335).1" Label="_buckStopsHereBinder 722325" />
<Node Id="25002:[4395..4432).19" Label="var diagnostics = c.GetDiagnostics(); 722326" />
<Node Id="10076:[4437..4452).1" Label="param GetBinder(SyntaxNode node) 722327" />
<Node Id="10076:[4454..4498).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 722328" />
<Node Id="10076:[4500..4523).1" Label="param GetBinder(Symbol memberOpt = null) 722329" />
<Node Id="10076:[4411..5059).1" Label="param GetBinder(this) 722330" />
<Node Id="10076:[4549..4579).1" Label="int position = node.SpanStart; 722331" />
<Node Id="10076:[4821..4829).1" Label="InScript 722332" />
<Node Id="10076:[3592..3700).1" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 722333" />
<Node Id="10076:[3628..3685).1" Label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 722334" />
<Node Id="10076:[4815..4966).1" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 722335" />
<Node Id="10076:[4815..4966).3" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 722336" />
<Node Id="10076:[4815..4966).4" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 722337" />
<Node Id="10076:[4815..4966).5" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 722338" />
<Node Id="10076:[4932..4951).1" Label="node = node.Parent; 722339" />
<Node Id="10076:[4982..5048).1" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 722340" />
<Node Id="10076:[4982..5048).2" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 722341" />
<Node Id="10076:[4982..5048).3" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 722342" />
<Node Id="10076:[4982..5048).4" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 722343" />
<Node Id="10076:[4989..5047).1" Label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 722344" />
<Node Id="10076:[5097..5112).1" Label="param GetBinder(SyntaxNode node) 722345" />
<Node Id="10076:[5114..5126).1" Label="param GetBinder(int position) 722346" />
<Node Id="10076:[5128..5172).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 722347" />
<Node Id="10076:[5174..5197).1" Label="param GetBinder(Symbol memberOpt = null) 722348" />
<Node Id="10076:[5071..5759).1" Label="param GetBinder(this) 722349" />
<Node Id="10076:[5223..5250).1" Label="Debug.Assert(node != null); 722350" />
<Node Id="10076:[5223..5250).2" Label="Debug.Assert(node != null); 722351" />
<Node Id="10076:[5277..5448).1" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 722352" />
<Node Id="10076:[5277..5448).2" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 722353" />
<Node Id="10076:[5470..5538).1" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 722354" />
<Node Id="10076:[5470..5538).3" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 722355" />
<Node Id="10077:[909..930).1" Label="param BinderFactoryVisitor(BinderFactory factory) 722356" />
<Node Id="10077:[879..998).1" Label="param BinderFactoryVisitor(this) 722357" />
<Node Id="10077:[879..998).2" Label="param BinderFactoryVisitor(this) 722358" />
<Node Id="10077:[698..707).1" Label="_position 722359" />
<Node Id="10077:[747..768).1" Label="_memberDeclarationOpt 722360" />
<Node Id="10077:[798..808).1" Label="_memberOpt 722361" />
<Node Id="10077:[854..862).1" Label="_factory 722362" />
<Node Id="10077:[964..972).1" Label="_factory 722363" />
<Node Id="10076:[5470..5538).4" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 722364" />
<Node Id="10076:[5552..5614).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 722365" />
<Node Id="10076:[5552..5614).2" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 722366" />
<Node Id="10076:[5552..5614).3" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 722367" />
<Node Id="10076:[5552..5613).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 722368" />
<Node Id="10077:[1039..1051).1" Label="param Initialize(int position) 722369" />
<Node Id="10077:[1053..1090).1" Label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 722370" />
<Node Id="10077:[1092..1108).1" Label="param Initialize(Symbol memberOpt) 722371" />
<Node Id="10077:[1014..1370).1" Label="param Initialize(this) 722372" />
<Node Id="10077:[1142..1210).1" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 722373" />
<Node Id="10077:[1142..1210).2" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 722374" />
<Node Id="10077:[1142..1210).4" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 722375" />
<Node Id="10077:[1142..1210).5" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 722376" />
<Node Id="10077:[1230..1239).1" Label="_position 722377" />
<Node Id="10077:[1269..1290).1" Label="_memberDeclarationOpt 722378" />
<Node Id="10077:[1332..1342).1" Label="_memberOpt 722379" />
<Node Id="10076:[5552..5614).4" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 722380" />
<Node Id="10076:[5628..5664).1" Label="Binder result = visitor.Visit(node); 722381" />
<Node Id="10076:[5644..5663).1" Label="visitor.Visit(node) 722382" />
<Node Id="10077:[2693..2708).1" Label="param Visit(SyntaxNode node) 722383" />
<Node Id="10077:[2664..2780).1" Label="param Visit(this) 722384" />
<Node Id="10077:[2742..2765).1" Label="return VisitCore(node); 722385" />
<Node Id="10077:[2749..2764).1" Label="VisitCore(node) 722386" />
<Node Id="10077:[2877..2892).1" Label="param VisitCore(SyntaxNode node) 722387" />
<Node Id="10077:[2852..2986).1" Label="param VisitCore(this) 722388" />
<Node Id="10077:[2926..2971).1" Label="return ((CSharpSyntaxNode)node).Accept(this); 722389" />
<Node Id="10077:[2926..2971).2" Label="return ((CSharpSyntaxNode)node).Accept(this); 722390" />
<Node Id="10077:[2926..2971).3" Label="return ((CSharpSyntaxNode)node).Accept(this); 722391" />
<Node Id="10077:[34617..34644).1" Label="param VisitClassDeclaration(ClassDeclarationSyntax node) 722392" />
<Node Id="10077:[34572..34731).1" Label="param VisitClassDeclaration(this) 722393" />
<Node Id="10077:[34678..34716).1" Label="return VisitTypeDeclarationCore(node); 722394" />
<Node Id="10077:[34685..34715).1" Label="VisitTypeDeclarationCore(node) 722395" />
<Node Id="10077:[31025..31053).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 722396" />
<Node Id="10077:[30985..32417).1" Label="param VisitTypeDeclarationCore(this) 722397" />
<Node Id="10077:[31087..31238).1" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 722398" />
<Node Id="10077:[31087..31238).2" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 722399" />
<Node Id="10077:[31087..31238).3" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 722400" />
<Node Id="10077:[31258..31297).1" Label="NodeUsage extraInfo = NodeUsage.Normal; 722401" />
<Node Id="10077:[31490..32331).1" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 722402" />
<Node Id="10077:[31490..32331).2" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 722403" />
<Node Id="10077:[31490..32331).6" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 722404" />
<Node Id="10077:[31490..32331).7" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 722405" />
<Node Id="10077:[31936..32331).1" Label="if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 722406" />
<Node Id="10077:[31936..32331).2" Label="if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 722407" />
<Node Id="10077:[32131..32331).1" Label="if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 722408" />
<Node Id="10077:[32131..32331).2" Label="if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 722409" />
<Node Id="10077:[32257..32312).1" Label="extraInfo = NodeUsage.NamedTypeBaseListOrParameterList; 722410" />
<Node Id="10077:[32351..32402).1" Label="return VisitTypeDeclarationCore(parent, extraInfo); 722411" />
<Node Id="10077:[32351..32402).2" Label="return VisitTypeDeclarationCore(parent, extraInfo); 722412" />
<Node Id="10077:[32358..32401).1" Label="VisitTypeDeclarationCore(parent, extraInfo) 722413" />
<Node Id="10077:[32474..32502).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 722414" />
<Node Id="10077:[32504..32523).1" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 722415" />
<Node Id="10077:[32433..34556).1" Label="param VisitTypeDeclarationCore(this) 722416" />
<Node Id="10077:[32557..32607).1" Label="var key = CreateBinderCacheKey(parent, extraInfo); 722417" />
<Node Id="10077:[32557..32607).2" Label="var key = CreateBinderCacheKey(parent, extraInfo); 722418" />
<Node Id="10077:[32567..32606).1" Label="CreateBinderCacheKey(parent, extraInfo) 722419" />
<Node Id="10077:[44159..44180).1" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 722420" />
<Node Id="10077:[44182..44197).1" Label="param CreateBinderCacheKey(NodeUsage usage) 722421" />
<Node Id="10077:[44231..44317).1" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 722422" />
<Node Id="10077:[44231..44317).3" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 722423" />
<Node Id="10077:[44335..44374).1" Label="return new BinderCacheKey(node, usage); 722424" />
<Node Id="10077:[44335..44374).2" Label="return new BinderCacheKey(node, usage); 722425" />
<Node Id="10077:[44335..44374).3" Label="return new BinderCacheKey(node, usage); 722426" />
<Node Id="10077:[44342..44373).1" Label="new BinderCacheKey(node, usage) 722427" />
<Node Id="10076:[875..902).1" Label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 722428" />
<Node Id="10076:[904..919).1" Label="param BinderCacheKey(NodeUsage usage) 722429" />
<Node Id="10076:[853..1034).1" Label="param BinderCacheKey(this) 722430" />
<Node Id="10076:[953..968).1" Label="this.syntaxNode 722431" />
<Node Id="10076:[1000..1010).1" Label="this.usage 722432" />
<Node Id="10077:[32557..32607).3" Label="var key = CreateBinderCacheKey(parent, extraInfo); 722433" />
<Node Id="10077:[32627..32647).1" Label="Binder resultBinder; 722434" />
<Node Id="10077:[32670..32681).1" Label="binderCache 722435" />
<Node Id="10077:[2066..2158).1" Label="get
                {
                    return _factory._binderCache;
                } 722436" />
<Node Id="10077:[2110..2139).1" Label="return _factory._binderCache; 722437" />
<Node Id="10077:[32665..34501).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 722438" />
<Node Id="10077:[32665..34501).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 722439" />
<Node Id="10077:[32665..34501).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 722440" />
<Node Id="10077:[32665..34501).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 722441" />
<Node Id="10077:[32665..34501).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 722442" />
<Node Id="10076:[1241..1380).1" Label="param GetHashCode(this) 722443" />
<Node Id="10076:[1307..1365).1" Label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 722444" />
<Node Id="10077:[33226..33266).1" Label="resultBinder = VisitCore(parent.Parent); 722445" />
<Node Id="10077:[33241..33265).1" Label="VisitCore(parent.Parent) 722446" />
<Node Id="10077:[2877..2892).2" Label="param VisitCore(SyntaxNode node) 722447" />
<Node Id="10077:[39020..39048).1" Label="param VisitCompilationUnit(CompilationUnitSyntax parent) 722448" />
<Node Id="10077:[38976..39245).1" Label="param VisitCompilationUnit(this) 722449" />
<Node Id="10077:[39082..39230).1" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 722450" />
<Node Id="10077:[39170..39187).1" Label="IsInUsing(parent) 722451" />
<Node Id="10077:[44823..44854).1" Label="param IsInUsing(CSharpSyntaxNode containingNode) 722452" />
<Node Id="10077:[44800..46356).1" Label="param IsInUsing(this) 722453" />
<Node Id="10077:[44888..44934).1" Label="TextSpan containingSpan = containingNode.Span; 722454" />
<Node Id="10077:[44954..44972).1" Label="SyntaxToken token; 722455" />
<Node Id="10077:[44966..44971).1" Label="token 722456" />
<Node Id="10077:[44990..45616).1" Label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)
                {
                    // This occurs at EOF
                    token = containingNode.GetLastToken();
                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());
                }
                else if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 722457" />
<Node Id="10077:[45331..45616).1" Label="if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 722458" />
<Node Id="10077:[45553..45597).1" Label="token = containingNode.FindToken(_position); 722459" />
<Node Id="10077:[45553..45597).2" Label="token = containingNode.FindToken(_position); 722460" />
<Node Id="10077:[45636..45660).1" Label="var node = token.Parent; 722461" />
<Node Id="10077:[45678..46310).1" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 722462" />
<Node Id="10077:[45678..46310).2" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 722463" />
<Node Id="10077:[45678..46310).3" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 722464" />
<Node Id="10077:[46088..46248).1" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 722465" />
<Node Id="10077:[46088..46248).2" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 722466" />
<Node Id="10077:[46272..46291).1" Label="node = node.Parent; 722467" />
<Node Id="10077:[46328..46341).1" Label="return false; 722468" />
<Node Id="10077:[39082..39230).3" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 722469" />
<Node Id="10077:[39220..39228).1" Label="InScript 722470" />
<Node Id="10077:[2243..2331).1" Label="get
                {
                    return _factory.InScript;
                } 722471" />
<Node Id="10077:[2294..2311).1" Label="_factory.InScript 722472" />
<Node Id="10076:[3592..3700).2" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 722473" />
<Node Id="10077:[2287..2312).1" Label="return _factory.InScript; 722474" />
<Node Id="10077:[39089..39229).1" Label="VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript) 722475" />
<Node Id="10077:[39298..39335).1" Label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 722476" />
<Node Id="10077:[39337..39349).1" Label="param VisitCompilationUnit(bool inUsing) 722477" />
<Node Id="10077:[39351..39364).1" Label="param VisitCompilationUnit(bool inScript) 722478" />
<Node Id="10077:[39261..44091).1" Label="param VisitCompilationUnit(this) 722479" />
<Node Id="10077:[39421..39431).1" Label="syntaxTree 722480" />
<Node Id="10077:[1641..1732).1" Label="get
                {
                    return _factory._syntaxTree;
                } 722481" />
<Node Id="10077:[1685..1713).1" Label="return _factory._syntaxTree; 722482" />
<Node Id="10077:[39398..39590).1" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 722483" />
<Node Id="10077:[39398..39590).2" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 722484" />
<Node Id="10077:[39398..39590).5" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 722485" />
<Node Id="10077:[39626..39633).1" Label="inUsing 722486" />
<Node Id="10077:[39766..39774).1" Label="inScript 722487" />
<Node Id="10077:[39610..39829).1" Label="var extraInfo = inUsing
                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)
                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 722488" />
<Node Id="10077:[39877..39936).1" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 722489" />
<Node Id="10077:[39877..39936).2" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 722490" />
<Node Id="10077:[39887..39935).1" Label="CreateBinderCacheKey(compilationUnit, extraInfo) 722491" />
<Node Id="10077:[44159..44180).2" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 722492" />
<Node Id="10077:[44182..44197).2" Label="param CreateBinderCacheKey(NodeUsage usage) 722493" />
<Node Id="10077:[44231..44317).9" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 722494" />
<Node Id="10077:[44231..44317).11" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 722495" />
<Node Id="10077:[39877..39936).3" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 722496" />
<Node Id="10077:[39956..39970).1" Label="Binder result; 722497" />
<Node Id="10077:[39993..40004).1" Label="binderCache 722498" />
<Node Id="10077:[2066..2158).2" Label="get
                {
                    return _factory._binderCache;
                } 722499" />
<Node Id="10077:[2110..2139).2" Label="return _factory._binderCache; 722500" />
<Node Id="10077:[39988..44042).1" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 722501" />
<Node Id="10077:[39988..44042).2" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 722502" />
<Node Id="10077:[39988..44042).3" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 722503" />
<Node Id="10077:[39988..44042).4" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 722504" />
<Node Id="10077:[39988..44042).5" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 722505" />
<Node Id="10077:[40084..40108).1" Label="this.buckStopsHereBinder 722506" />
<Node Id="10077:[1843..1943).1" Label="get
                {
                    return _factory._buckStopsHereBinder;
                } 722507" />
<Node Id="10077:[1887..1924).1" Label="return _factory._buckStopsHereBinder; 722508" />
<Node Id="10077:[40075..40109).1" Label="result = this.buckStopsHereBinder; 722509" />
<Node Id="10077:[40133..43967).1" Label="if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    } 722510" />
<Node Id="10077:[43302..43313).1" Label="compilation 722511" />
<Node Id="10077:[1456..1548).1" Label="get
                {
                    return _factory._compilation;
                } 722512" />
<Node Id="10077:[1500..1529).1" Label="return _factory._compilation; 722513" />
<Node Id="10077:[43271..43374).1" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 722514" />
<Node Id="10077:[43271..43374).3" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 722515" />
<Node Id="10077:[43271..43374).4" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 722516" />
<Node Id="10077:[43271..43374).5" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 722517" />
<Node Id="10077:[43271..43374).6" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 722518" />
<Node Id="10077:[43280..43373).1" Label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 722519" />
<Node Id="10346:[1426..1457).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 722520" />
<Node Id="10346:[1459..1470).1" Label="param InContainerBinder(Binder next) 722521" />
<Node Id="10346:[1472..1506).1" Label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 722522" />
<Node Id="10346:[1508..1520).1" Label="param InContainerBinder(bool inUsing) 722523" />
<Node Id="10346:[1399..2435).1" Label="param InContainerBinder(this) 722524" />
<Node Id="10346:[1542..1546).1" Label="next 722525" />
<Node Id="10346:[1399..2435).2" Label="param InContainerBinder(this) 722526" />
<Node Id="10286:[1247..1258).1" Label="param Binder(Binder next) 722527" />
<Node Id="10286:[1231..1520).1" Label="param Binder(this) 722528" />
<Node Id="10286:[1260..1291).1" Label="param Binder(Conversions? conversions = null) 722529" />
<Node Id="10286:[1317..1350).1" Label="RoslynDebug.Assert(next != null); 722530" />
<Node Id="10286:[1317..1350).2" Label="RoslynDebug.Assert(next != null); 722531" />
<Node Id="10286:[1364..1368).1" Label="Next 722532" />
<Node Id="10286:[1390..1400).1" Label="this.Flags 722533" />
<Node Id="10286:[1428..1444).1" Label="this.Compilation 722534" />
<Node Id="10286:[1478..1494).1" Label="_lazyConversions 722535" />
<Node Id="10346:[858..868).1" Label="_container 722536" />
<Node Id="10346:[932..947).1" Label="_computeImports 722537" />
<Node Id="10346:[974..986).1" Label="_lazyImports 722538" />
<Node Id="10346:[1017..1033).1" Label="_lazyImportChain 722539" />
<Node Id="10346:[1074..1100).1" Label="_lazyQuickAttributeChecker 722540" />
<Node Id="10346:[1572..1612).1" Label="Debug.Assert((object)container != null); 722541" />
<Node Id="10346:[1572..1612).2" Label="Debug.Assert((object)container != null); 722542" />
<Node Id="10346:[1626..1666).1" Label="Debug.Assert(declarationSyntax != null); 722543" />
<Node Id="10346:[1626..1666).2" Label="Debug.Assert(declarationSyntax != null); 722544" />
<Node Id="10346:[1682..1692).1" Label="_container 722545" />
<Node Id="10346:[1719..1832).1" Label="_computeImports = basesBeingResolved =$ Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 722546" />
<Node Id="10346:[1719..1734).1" Label="_computeImports 722547" />
<Node Id="10346:[1848..2424).1" Label="if (!inUsing)
            {
                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                }
            } 722548" />
<Node Id="10346:[1894..2409).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 722549" />
<Node Id="10346:[1994..2057).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 722550" />
<Node Id="10346:[2079..2092).1" Label="_usingsSyntax 722551" />
<Node Id="10077:[43503..43514).1" Label="compilation 722552" />
<Node Id="10077:[1456..1548).2" Label="get
                {
                    return _factory._compilation;
                } 722553" />
<Node Id="10077:[1500..1529).2" Label="return _factory._compilation; 722554" />
<Node Id="10077:[43402..43944).1" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 722555" />
<Node Id="10077:[43402..43944).3" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 722556" />
<Node Id="10077:[43402..43944).4" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 722557" />
<Node Id="10077:[43991..44002).1" Label="binderCache 722558" />
<Node Id="10077:[2110..2139).3" Label="return _factory._binderCache; 722559" />
<Node Id="10077:[43991..44023).1" Label="binderCache.TryAdd(key, result); 722560" />
<Node Id="10077:[43991..44023).2" Label="binderCache.TryAdd(key, result); 722561" />
<Node Id="10077:[43991..44023).3" Label="binderCache.TryAdd(key, result); 722562" />
<Node Id="10077:[43991..44023).4" Label="binderCache.TryAdd(key, result); 722563" />
<Node Id="10077:[43991..44023).5" Label="binderCache.TryAdd(key, result); 722564" />
<Node Id="10076:[1089..1109).1" Label="param Equals(BinderCacheKey other) 722565" />
<Node Id="10076:[1050..1225).1" Label="param Equals(this) 722566" />
<Node Id="10076:[1143..1210).1" Label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 722567" />
<Node Id="10077:[44062..44076).1" Label="return result; 722568" />
<Node Id="10077:[2926..2971).8" Label="return ((CSharpSyntaxNode)node).Accept(this); 722569" />
<Node Id="10077:[33290..34322).1" Label="if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    } 722570" />
<Node Id="10077:[33414..33451).1" Label="resultBinder.ContainingMemberOrLambda 722571" />
<Node Id="10346:[7369..7588).1" Label="get
            {
                var merged = _container as MergedNamespaceSymbol;
                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;
            } 722572" />
<Node Id="10346:[7405..7454).1" Label="var merged = _container as MergedNamespaceSymbol; 722573" />
<Node Id="10346:[7472..7573).1" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 722574" />
<Node Id="10346:[7472..7573).2" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 722575" />
<Node Id="10346:[7479..7503).1" Label="((object)merged != null) 722576" />
<Node Id="10077:[33373..33481).1" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 722577" />
<Node Id="10077:[33373..33481).2" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 722578" />
<Node Id="10077:[33509..34299).1" Label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        } 722579" />
<Node Id="10077:[33780..33855).1" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 722580" />
<Node Id="10077:[33780..33855).2" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 722581" />
<Node Id="10077:[33780..33855).3" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 722582" />
<Node Id="10077:[33795..33854).1" Label="new WithClassTypeParametersBinder(typeSymbol, resultBinder) 722583" />
<Node Id="10376:[838..863).1" Label="param WithClassTypeParametersBinder(NamedTypeSymbol container) 722584" />
<Node Id="10376:[865..876).1" Label="param WithClassTypeParametersBinder(Binder next) 722585" />
<Node Id="10376:[799..1016).1" Label="param WithClassTypeParametersBinder(this) 722586" />
<Node Id="10376:[898..902).1" Label="next 722587" />
<Node Id="10376:[799..1016).2" Label="param WithClassTypeParametersBinder(this) 722588" />
<Node Id="10382:[520..531).1" Label="param WithTypeParametersBinder(Binder next) 722589" />
<Node Id="10382:[486..580).1" Label="param WithTypeParametersBinder(this) 722590" />
<Node Id="10382:[553..557).1" Label="next 722591" />
<Node Id="10382:[486..580).2" Label="param WithTypeParametersBinder(this) 722592" />
<Node Id="10286:[1247..1258).2" Label="param Binder(Binder next) 722593" />
<Node Id="10286:[1231..1520).2" Label="param Binder(this) 722594" />
<Node Id="10286:[1260..1291).2" Label="param Binder(Conversions? conversions = null) 722595" />
<Node Id="10286:[1317..1350).5" Label="RoslynDebug.Assert(next != null); 722596" />
<Node Id="10286:[1317..1350).6" Label="RoslynDebug.Assert(next != null); 722597" />
<Node Id="10286:[1390..1400).2" Label="this.Flags 722598" />
<Node Id="10286:[1428..1444).2" Label="this.Compilation 722599" />
<Node Id="10286:[1478..1494).2" Label="_lazyConversions 722600" />
<Node Id="10376:[691..701).1" Label="_namedType 722601" />
<Node Id="10376:[765..786).1" Label="_lazyTypeParameterMap 722602" />
<Node Id="10376:[928..968).1" Label="Debug.Assert((object)container != null); 722603" />
<Node Id="10376:[928..968).2" Label="Debug.Assert((object)container != null); 722604" />
<Node Id="10376:[982..992).1" Label="_namedType 722605" />
<Node Id="10077:[34346..34420).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 722606" />
<Node Id="10077:[34361..34419).1" Label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 722607" />
<Node Id="10307:[3496..3521).1" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 722608" />
<Node Id="10307:[3452..3756).1" Label="param WithUnsafeRegionIfNecessary(this) 722609" />
<Node Id="10307:[3547..3745).1" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 722610" />
<Node Id="10307:[3547..3745).2" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 722611" />
<Node Id="10307:[3555..3600).1" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 722612" />
<Node Id="10298:[471..492).6" Label="param Includes(this BinderFlags self) 722613" />
<Node Id="10298:[494..511).6" Label="param Includes(BinderFlags other) 722614" />
<Node Id="10307:[3547..3745).4" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 722615" />
<Node Id="10307:[3547..3745).7" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 722616" />
<Node Id="10307:[3554..3645).1" Label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 722617" />
<Node Id="10077:[34444..34455).1" Label="binderCache 722618" />
<Node Id="10077:[2110..2139).4" Label="return _factory._binderCache; 722619" />
<Node Id="10077:[34444..34482).1" Label="binderCache.TryAdd(key, resultBinder); 722620" />
<Node Id="10077:[34444..34482).2" Label="binderCache.TryAdd(key, resultBinder); 722621" />
<Node Id="10077:[34444..34482).3" Label="binderCache.TryAdd(key, resultBinder); 722622" />
<Node Id="10077:[34444..34482).4" Label="binderCache.TryAdd(key, resultBinder); 722623" />
<Node Id="10077:[34444..34482).5" Label="binderCache.TryAdd(key, resultBinder); 722624" />
<Node Id="10077:[34521..34541).1" Label="return resultBinder; 722625" />
<Node Id="10077:[2926..2971).12" Label="return ((CSharpSyntaxNode)node).Accept(this); 722626" />
<Node Id="10076:[5678..5718).1" Label="_binderFactoryVisitorPool.Free(visitor); 722627" />
<Node Id="10076:[5678..5718).2" Label="_binderFactoryVisitorPool.Free(visitor); 722628" />
<Node Id="10076:[5734..5748).1" Label="return result; 722629" />
<Node Id="25002:[4395..4432).22" Label="var diagnostics = c.GetDiagnostics(); 722630" />
<Node Id="10307:[3228..3245).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 722631" />
<Node Id="10307:[3247..3264).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 722632" />
<Node Id="10307:[3165..3440).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 722633" />
<Node Id="10307:[3290..3331).1" Label="Debug.Assert((object)containing != null); 722634" />
<Node Id="10307:[3290..3331).2" Label="Debug.Assert((object)containing != null); 722635" />
<Node Id="10307:[3345..3429).1" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 722636" />
<Node Id="10307:[3345..3429).2" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 722637" />
<Node Id="10307:[3345..3429).4" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 722638" />
<Node Id="10307:[3345..3429).5" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 722639" />
<Node Id="10307:[3352..3428).1" Label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 722640" />
<Node Id="10307:[1072..1083).1" Label="param BinderWithContainingMemberOrLambda(Binder next) 722641" />
<Node Id="10307:[1085..1102).1" Label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 722642" />
<Node Id="10307:[1104..1135).1" Label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 722643" />
<Node Id="10307:[1028..1341).1" Label="param BinderWithContainingMemberOrLambda(this) 722644" />
<Node Id="10307:[1161..1165).1" Label="next 722645" />
<Node Id="10307:[1167..1172).1" Label="flags 722646" />
<Node Id="10307:[1028..1341).2" Label="param BinderWithContainingMemberOrLambda(this) 722647" />
<Node Id="10286:[1549..1560).1" Label="param Binder(Binder next) 722648" />
<Node Id="10286:[1562..1579).1" Label="param Binder(BinderFlags flags) 722649" />
<Node Id="10286:[1532..2083).1" Label="param Binder(this) 722650" />
<Node Id="10286:[726..773).4" Label="internal CSharpCompilation Compilation { get; } 722651" />
<Node Id="10286:[815..820).4" Label="Flags 722652" />
<Node Id="10286:[2975..3015).4" Label="protected internal Binder? Next { get; } 722653" />
<Node Id="10286:[17802..17818).4" Label="_lazyConversions 722654" />
<Node Id="10286:[18200..18223).4" Label="_lazyOverloadResolution 722655" />
<Node Id="10286:[1605..1638).1" Label="RoslynDebug.Assert(next != null); 722656" />
<Node Id="10286:[1605..1638).2" Label="RoslynDebug.Assert(next != null); 722657" />
<Node Id="10286:[1688..1781).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 722658" />
<Node Id="10286:[1688..1781).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 722659" />
<Node Id="10286:[1708..1779).1" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 722660" />
<Node Id="10298:[471..492).7" Label="param Includes(this BinderFlags self) 722661" />
<Node Id="10298:[494..511).7" Label="param Includes(BinderFlags other) 722662" />
<Node Id="10286:[1820..1963).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 722663" />
<Node Id="10286:[1820..1963).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 722664" />
<Node Id="10286:[1840..1888).1" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 722665" />
<Node Id="10298:[471..492).8" Label="param Includes(this BinderFlags self) 722666" />
<Node Id="10298:[494..511).8" Label="param Includes(BinderFlags other) 722667" />
<Node Id="10286:[1977..1981).1" Label="Next 722668" />
<Node Id="10286:[2003..2013).1" Label="this.Flags 722669" />
<Node Id="10286:[2036..2052).1" Label="this.Compilation 722670" />
<Node Id="10307:[683..708).1" Label="_containingMemberOrLambda 722671" />
<Node Id="10307:[1206..1253).1" Label="Debug.Assert(containingMemberOrLambda != null); 722672" />
<Node Id="10307:[1206..1253).2" Label="Debug.Assert(containingMemberOrLambda != null); 722673" />
<Node Id="10307:[1273..1298).1" Label="_containingMemberOrLambda 722674" />
<Node Id="25002:[4395..4432).25" Label="var diagnostics = c.GetDiagnostics(); 722675" />
<Node Id="10319:[13685..13708).1" Label="param BindType(ExpressionSyntax syntax) 722676" />
<Node Id="10319:[13710..13735).1" Label="param BindType(DiagnosticBag diagnostics) 722677" />
<Node Id="10319:[13737..13783).1" Label="param BindType(ConsList$TypeSymbol$ basesBeingResolved = null) 722678" />
<Node Id="10319:[13785..13824).1" Label="param BindType(bool suppressUseSiteDiagnostics = false) 722679" />
<Node Id="10319:[13647..14061).1" Label="param BindType(this) 722680" />
<Node Id="10319:[13850..13948).1" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 722681" />
<Node Id="10319:[13850..13948).2" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 722682" />
<Node Id="10319:[13850..13948).3" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 722683" />
<Node Id="10319:[13850..13948).4" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 722684" />
<Node Id="10319:[13863..13947).1" Label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 722685" />
<Node Id="10319:[14931..14954).1" Label="param BindTypeOrAlias(ExpressionSyntax syntax) 722686" />
<Node Id="10319:[14956..14981).1" Label="param BindTypeOrAlias(DiagnosticBag diagnostics) 722687" />
<Node Id="10319:[14983..15029).1" Label="param BindTypeOrAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 722688" />
<Node Id="10319:[15031..15070).1" Label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 722689" />
<Node Id="10319:[14862..16302).1" Label="param BindTypeOrAlias(this) 722690" />
<Node Id="10319:[15096..15130).1" Label="Debug.Assert(diagnostics != null); 722691" />
<Node Id="10319:[15096..15130).2" Label="Debug.Assert(diagnostics != null); 722692" />
<Node Id="10319:[15146..15291).1" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 722693" />
<Node Id="10319:[15146..15291).2" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 722694" />
<Node Id="10319:[15146..15291).3" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 722695" />
<Node Id="10319:[15146..15291).4" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 722696" />
<Node Id="10319:[15146..15291).5" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 722697" />
<Node Id="10319:[15159..15290).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 722698" />
<Node Id="10319:[20002..20025).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 722699" />
<Node Id="10319:[20027..20052).1" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 722700" />
<Node Id="10319:[20054..20093).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 722701" />
<Node Id="10319:[20095..20126).1" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 722702" />
<Node Id="10319:[19916..30085).1" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 722703" />
<Node Id="10319:[20152..24647).1" Label="switch (syntax.Kind())
            {
                case SyntaxKind.NullableType:
                    return bindNullable(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.PredefinedType:
                    return bindPredefined(syntax, diagnostics);

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);

                case SyntaxKind.AliasQualifiedName:
                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);

                case SyntaxKind.QualifiedName:
                    {
                        var node = (QualifiedNameSyntax)syntax;
                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.SimpleMemberAccessExpression:
                    {
                        var node = (MemberAccessExpressionSyntax)syntax;
                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.ArrayType:
                    {
                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);
                    }

                case SyntaxKind.PointerType:
                    return bindPointer(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.FunctionPointerType:
                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;
                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)
                    {
                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;
                        var asterisk = functionPointerTypeSyntax.AsteriskToken;
                        RoslynDebug.Assert(@delegate.SyntaxTree is object);
                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));
                    }

                    return TypeWithAnnotations.Create(
                        FunctionPointerTypeSymbol.CreateFromSource(
                            functionPointerTypeSyntax,
                            this,
                            diagnostics,
                            basesBeingResolved,
                            suppressUseSiteDiagnostics));

                case SyntaxKind.OmittedTypeArgument:
                    {
                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);
                    }

                case SyntaxKind.TupleType:
                    {
                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;
                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));
                    }

                case SyntaxKind.RefType:
                    {
                        // ref needs to be handled by the caller
                        var refTypeSyntax = (RefTypeSyntax)syntax;
                        var refToken = refTypeSyntax.RefKeyword;
                        if (!syntax.HasErrors)
                        {
                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());
                        }

                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                default:
                    {
                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind
                        // is attempted to be bound as a type pattern.
                        return createErrorType(syntax);
                    }
            } 722704" />
<Node Id="10319:[20508..20675).1" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 722705" />
<Node Id="10319:[20508..20675).2" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 722706" />
<Node Id="10319:[20508..20675).3" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 722707" />
<Node Id="10319:[20508..20675).4" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 722708" />
<Node Id="10319:[20508..20675).5" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 722709" />
<Node Id="10319:[20515..20674).1" Label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 722710" />
<Node Id="10319:[41849..41874).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 722711" />
<Node Id="10319:[41889..41914).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 722712" />
<Node Id="10319:[41929..41968).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 722713" />
<Node Id="10319:[41983..42014).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 722714" />
<Node Id="10319:[42029..42063).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 722715" />
<Node Id="10319:[41732..45579).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 722716" />
<Node Id="10319:[42089..42141).1" Label="var identifierValueText = node.Identifier.ValueText; 722717" />
<Node Id="10319:[42478..42805).1" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 722718" />
<Node Id="10319:[42821..42938).1" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722719" />
<Node Id="10319:[42821..42938).2" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722720" />
<Node Id="10319:[42821..42938).3" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722721" />
<Node Id="10319:[42821..42938).4" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722722" />
<Node Id="10319:[42821..42938).6" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722723" />
<Node Id="10319:[42839..42937).1" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 722724" />
<Node Id="10319:[63849..63870).1" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 722725" />
<Node Id="10319:[63885..63919).1" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 722726" />
<Node Id="10319:[63934..63945).1" Label="param CreateErrorIfLookupOnTypeParameter(string name) 722727" />
<Node Id="10319:[63960..63969).1" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 722728" />
<Node Id="10319:[63984..64009).1" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 722729" />
<Node Id="10319:[63768..64484).1" Label="param CreateErrorIfLookupOnTypeParameter(this) 722730" />
<Node Id="10319:[64035..64445).1" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 722731" />
<Node Id="10319:[64035..64445).2" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 722732" />
<Node Id="10319:[64461..64473).1" Label="return null; 722733" />
<Node Id="10319:[42821..42938).7" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 722734" />
<Node Id="10319:[42952..43079).1" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 722735" />
<Node Id="10319:[42952..43079).2" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 722736" />
<Node Id="10354:[10826..10838).1" Label="CreatePool() 722737" />
<Node Id="10354:[10975..11012).1" Label="ObjectPool$LookupResult$ pool = null; 722738" />
<Node Id="10354:[11026..11097).1" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 722739" />
<Node Id="10354:[11026..11097).3" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 722740" />
<Node Id="10354:[11142..11154).1" Label="return pool; 722741" />
<Node Id="10354:[10809..10838).1" Label="s_poolInstance = CreatePool() 722742" />
<Node Id="10319:[43108..43134).1" Label="LookupResult.GetInstance() 722743" />
<Node Id="10354:[11244..11285).1" Label="var instance = s_poolInstance.Allocate(); 722744" />
<Node Id="10354:[11244..11285).2" Label="var instance = s_poolInstance.Allocate(); 722745" />
<Node Id="10354:[11244..11285).3" Label="var instance = s_poolInstance.Allocate(); 722746" />
<Node Id="10354:[3419..3448).1" Label="param LookupResult(ObjectPool$LookupResult$ pool) 722747" />
<Node Id="10354:[3398..3626).1" Label="param LookupResult(this) 722748" />
<Node Id="10354:[3068..3073).1" Label="_kind 722749" />
<Node Id="10354:[3200..3211).1" Label="_symbolList 722750" />
<Node Id="10354:[3319..3325).1" Label="_error 722751" />
<Node Id="10354:[3380..3385).1" Label="_pool 722752" />
<Node Id="10354:[3474..3479).1" Label="_pool 722753" />
<Node Id="10354:[3501..3506).1" Label="_kind 722754" />
<Node Id="10354:[3546..3587).1" Label="_symbolList = new ArrayBuilder$Symbol$(); 722755" />
<Node Id="10354:[3546..3557).1" Label="_symbolList 722756" />
<Node Id="10354:[3601..3615).1" Label="_error = null; 722757" />
<Node Id="10354:[3601..3607).1" Label="_error 722758" />
<Node Id="10354:[11244..11285).4" Label="var instance = s_poolInstance.Allocate(); 722759" />
<Node Id="10354:[11312..11328).1" Label="instance.IsClear 722760" />
<Node Id="10354:[3684..3818).1" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 722761" />
<Node Id="10354:[3720..3803).1" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722762" />
<Node Id="10354:[3720..3803).2" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722763" />
<Node Id="10354:[3720..3803).3" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722764" />
<Node Id="10354:[11299..11330).1" Label="Debug.Assert(instance.IsClear); 722765" />
<Node Id="10354:[11344..11360).1" Label="return instance; 722766" />
<Node Id="10319:[43095..43135).1" Label="var result = LookupResult.GetInstance(); 722767" />
<Node Id="10319:[43149..43246).1" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 722768" />
<Node Id="10319:[43149..43246).2" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 722769" />
<Node Id="10319:[43173..43245).1" Label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 722770" />
<Node Id="10319:[50313..50328).1" Label="param GetSimpleNameLookupOptions(NameSyntax node) 722771" />
<Node Id="10319:[50330..50355).1" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 722772" />
<Node Id="10319:[50381..51340).1" Label="if (SyntaxFacts.IsAttributeName(node))
            {
                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.
                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.
                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity
                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled
                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only
                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.

                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;
            }
            else
            {
                return LookupOptions.NamespacesOrTypesOnly;
            } 722773" />
<Node Id="10319:[51282..51325).1" Label="return LookupOptions.NamespacesOrTypesOnly; 722774" />
<Node Id="10319:[43262..43312).1" Label="HashSet$DiagnosticInfo$ useSiteDiagnostics = null; 722775" />
<Node Id="10319:[43326..43490).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722776" />
<Node Id="10319:[43326..43490).2" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722777" />
<Node Id="10319:[43326..43490).3" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722778" />
<Node Id="10319:[43326..43490).4" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722779" />
<Node Id="10319:[43326..43490).6" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722780" />
<Node Id="10319:[43326..43490).7" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722781" />
<Node Id="10319:[43326..43490).10" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 722782" />
<Node Id="10319:[43326..43489).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 722783" />
<Node Id="10312:[994..1013).1" Label="param LookupSymbolsSimpleName(LookupResult result) 722784" />
<Node Id="10312:[1028..1062).1" Label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 722785" />
<Node Id="10312:[1077..1093).1" Label="param LookupSymbolsSimpleName(string plainName) 722786" />
<Node Id="10312:[1108..1117).1" Label="param LookupSymbolsSimpleName(int arity) 722787" />
<Node Id="10312:[1132..1171).1" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 722788" />
<Node Id="10312:[1186..1207).1" Label="param LookupSymbolsSimpleName(LookupOptions options) 722789" />
<Node Id="10312:[1222..1235).1" Label="param LookupSymbolsSimpleName(bool diagnose) 722790" />
<Node Id="10312:[1250..1296).1" Label="param LookupSymbolsSimpleName(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 722791" />
<Node Id="10312:[942..1750).1" Label="param LookupSymbolsSimpleName(this) 722792" />
<Node Id="10312:[1322..1739).1" Label="if (options.IsAttributeTypeLookup())
            {
                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 722793" />
<Node Id="10312:[1326..1357).1" Label="options.IsAttributeTypeLookup() 722794" />
<Node Id="10353:[7504..7530).1" Label="param IsAttributeTypeLookup(this LookupOptions options) 722795" />
<Node Id="10353:[7556..7642).1" Label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 722796" />
<Node Id="10312:[1585..1724).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722797" />
<Node Id="10312:[1585..1724).2" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722798" />
<Node Id="10312:[1585..1724).3" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722799" />
<Node Id="10312:[1585..1724).4" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722800" />
<Node Id="10312:[1585..1724).5" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722801" />
<Node Id="10312:[1585..1724).6" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722802" />
<Node Id="10312:[1585..1724).7" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722803" />
<Node Id="10312:[1585..1724).8" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722804" />
<Node Id="10312:[1585..1723).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 722805" />
<Node Id="10312:[5721..5740).1" Label="param LookupSymbolsOrMembersInternal(LookupResult result) 722806" />
<Node Id="10312:[5755..5789).1" Label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 722807" />
<Node Id="10312:[5804..5815).1" Label="param LookupSymbolsOrMembersInternal(string name) 722808" />
<Node Id="10312:[5830..5839).1" Label="param LookupSymbolsOrMembersInternal(int arity) 722809" />
<Node Id="10312:[5854..5893).1" Label="param LookupSymbolsOrMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 722810" />
<Node Id="10312:[5908..5929).1" Label="param LookupSymbolsOrMembersInternal(LookupOptions options) 722811" />
<Node Id="10312:[5944..5957).1" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 722812" />
<Node Id="10312:[5972..6018).1" Label="param LookupSymbolsOrMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 722813" />
<Node Id="10312:[5663..6444).1" Label="param LookupSymbolsOrMembersInternal(this) 722814" />
<Node Id="10312:[6044..6433).1" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 722815" />
<Node Id="10312:[6044..6433).2" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 722816" />
<Node Id="10312:[6110..6221).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722817" />
<Node Id="10312:[6110..6221).2" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722818" />
<Node Id="10312:[6110..6221).3" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722819" />
<Node Id="10312:[6110..6221).4" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722820" />
<Node Id="10312:[6110..6221).5" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722821" />
<Node Id="10312:[6110..6221).6" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722822" />
<Node Id="10312:[6110..6221).7" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 722823" />
<Node Id="10312:[6110..6220).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 722824" />
<Node Id="10312:[3696..3715).1" Label="param LookupSymbolsInternal(LookupResult result) 722825" />
<Node Id="10312:[3717..3728).1" Label="param LookupSymbolsInternal(string name) 722826" />
<Node Id="10312:[3730..3739).1" Label="param LookupSymbolsInternal(int arity) 722827" />
<Node Id="10312:[3741..3780).1" Label="param LookupSymbolsInternal(ConsList$TypeSymbol$ basesBeingResolved) 722828" />
<Node Id="10312:[3782..3803).1" Label="param LookupSymbolsInternal(LookupOptions options) 722829" />
<Node Id="10312:[3805..3818).1" Label="param LookupSymbolsInternal(bool diagnose) 722830" />
<Node Id="10312:[3820..3866).1" Label="param LookupSymbolsInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 722831" />
<Node Id="10312:[3645..5112).1" Label="param LookupSymbolsInternal(this) 722832" />
<Node Id="10312:[3905..3919).1" Label="result.IsClear 722833" />
<Node Id="10354:[3684..3818).2" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 722834" />
<Node Id="10354:[3720..3803).9" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722835" />
<Node Id="10354:[3720..3803).10" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722836" />
<Node Id="10354:[3720..3803).11" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722837" />
<Node Id="10312:[3892..3921).1" Label="Debug.Assert(result.IsClear); 722838" />
<Node Id="10312:[3935..3968).1" Label="Debug.Assert(options.AreValid()); 722839" />
<Node Id="10312:[3948..3966).1" Label="options.AreValid() 722840" />
<Node Id="10353:[4698..4724).1" Label="param AreValid(this LookupOptions options) 722841" />
<Node Id="10353:[4750..4847).1" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 722842" />
<Node Id="10353:[4863..5000).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 722843" />
<Node Id="10353:[4863..5000).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 722844" />
<Node Id="10353:[5079..5183).1" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 722845" />
<Node Id="10353:[5197..5323).1" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 722846" />
<Node Id="10353:[5485..5759).1" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 722847" />
<Node Id="10353:[5485..5759).2" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 722848" />
<Node Id="10353:[5485..5759).3" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 722849" />
<Node Id="10353:[5775..5979).1" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 722850" />
<Node Id="10353:[5775..5979).3" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 722851" />
<Node Id="10353:[5995..6029).1" Label="return OnlyOneBitSet(onlyOptions); 722852" />
<Node Id="10353:[6002..6028).1" Label="OnlyOneBitSet(onlyOptions) 722853" />
<Node Id="10353:[6343..6358).1" Label="param OnlyOneBitSet(LookupOptions o) 722854" />
<Node Id="10353:[6384..6410).1" Label="return (o & (o - 1)) == 0; 722855" />
<Node Id="10353:[6384..6410).2" Label="return (o & (o - 1)) == 0; 722856" />
<Node Id="10312:[3984..4005).1" Label="Binder binder = null; 722857" />
<Node Id="10312:[4019..5073).1" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 722858" />
<Node Id="10312:[4019..5073).2" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 722859" />
<Node Id="10312:[4060..4080).1" Label="result.IsMultiViable 722860" />
<Node Id="10354:[4919..5009).1" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 722861" />
<Node Id="10354:[4962..4966).1" Label="Kind 722862" />
<Node Id="10354:[4058..4122).1" Label="get
            {
                return _kind;
            } 722863" />
<Node Id="10354:[4094..4107).1" Label="return _kind; 722864" />
<Node Id="10354:[4955..4994).1" Label="return Kind == LookupResultKind.Viable; 722865" />
<Node Id="10312:[4019..5073).4" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 722866" />
<Node Id="10312:[4019..5073).5" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 722867" />
<Node Id="10312:[4134..4806).1" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 722868" />
<Node Id="10312:[4134..4806).2" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 722869" />
<Node Id="10312:[4534..4658).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722870" />
<Node Id="10312:[4534..4658).2" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722871" />
<Node Id="10312:[4534..4658).3" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722872" />
<Node Id="10312:[4534..4658).4" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722873" />
<Node Id="10312:[4534..4658).5" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722874" />
<Node Id="10312:[4534..4658).6" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722875" />
<Node Id="10312:[4534..4658).7" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722876" />
<Node Id="10312:[4534..4658).8" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722877" />
<Node Id="10312:[4534..4657).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 722878" />
<Node Id="10312:[5188..5207).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 722879" />
<Node Id="10312:[5209..5220).1" Label="param LookupSymbolsInSingleBinder(string name) 722880" />
<Node Id="10312:[5222..5231).1" Label="param LookupSymbolsInSingleBinder(int arity) 722881" />
<Node Id="10312:[5233..5272).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 722882" />
<Node Id="10312:[5274..5295).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 722883" />
<Node Id="10312:[5297..5318).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 722884" />
<Node Id="10312:[5320..5333).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 722885" />
<Node Id="10312:[5335..5381).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 722886" />
<Node Id="10312:[5124..5404).1" Label="param LookupSymbolsInSingleBinder(this) 722887" />
<Node Id="10312:[4534..4658).9" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722888" />
<Node Id="10312:[4685..4699).1" Label="result.IsClear 722889" />
<Node Id="10354:[3684..3818).3" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 722890" />
<Node Id="10354:[3720..3803).17" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722891" />
<Node Id="10354:[3720..3803).18" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722892" />
<Node Id="10354:[3720..3803).19" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722893" />
<Node Id="10312:[4680..4787).1" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 722894" />
<Node Id="10312:[4826..5058).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 722895" />
<Node Id="10312:[4826..5058).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 722896" />
<Node Id="10382:[1340..1359).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 722897" />
<Node Id="10382:[1361..1372).1" Label="param LookupSymbolsInSingleBinder(string name) 722898" />
<Node Id="10382:[1374..1383).1" Label="param LookupSymbolsInSingleBinder(int arity) 722899" />
<Node Id="10382:[1385..1424).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 722900" />
<Node Id="10382:[1426..1447).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 722901" />
<Node Id="10382:[1449..1470).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 722902" />
<Node Id="10382:[1472..1485).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 722903" />
<Node Id="10382:[1487..1533).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 722904" />
<Node Id="10382:[1275..1939).1" Label="param LookupSymbolsInSingleBinder(this) 722905" />
<Node Id="10382:[1572..1586).1" Label="result.IsClear 722906" />
<Node Id="10354:[3684..3818).4" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 722907" />
<Node Id="10354:[3720..3803).25" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722908" />
<Node Id="10354:[3720..3803).26" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722909" />
<Node Id="10354:[3720..3803).27" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722910" />
<Node Id="10382:[1559..1588).1" Label="Debug.Assert(result.IsClear); 722911" />
<Node Id="10382:[1619..1629).1" Label="LookupMask 722912" />
<Node Id="10382:[913..1046).1" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 722913" />
<Node Id="10382:[949..1031).1" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 722914" />
<Node Id="10382:[1604..1691).1" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 722915" />
<Node Id="10382:[1604..1691).2" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 722916" />
<Node Id="10382:[1604..1691).3" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 722917" />
<Node Id="10382:[1737..1753).1" Label="TypeParameterMap 722918" />
<Node Id="10376:[1542..2071).1" Label="get
            {
                if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                }
                return _lazyTypeParameterMap;
            } 722919" />
<Node Id="10376:[1578..2009).1" Label="if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                } 722920" />
<Node Id="10376:[1578..2009).2" Label="if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                } 722921" />
<Node Id="10376:[1653..1717).1" Label="var result = new MultiDictionary$string, TypeParameterSymbol$(); 722922" />
<Node Id="10376:[1739..1899).1" Label="foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    } 722923" />
<Node Id="10376:[1921..1990).1" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 722924" />
<Node Id="10376:[1921..1990).2" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 722925" />
<Node Id="10376:[1921..1990).3" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 722926" />
<Node Id="10376:[2027..2056).1" Label="return _lazyTypeParameterMap; 722927" />
<Node Id="10382:[1707..1928).1" Label="foreach (var typeParameter in TypeParameterMap[name])
            {
                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));
            } 722928" />
<Node Id="10382:[1707..1928).2" Label="foreach (var typeParameter in TypeParameterMap[name])
            {
                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));
            } 722929" />
<Node Id="10312:[4534..4658).21" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722930" />
<Node Id="10312:[4534..4658).22" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722931" />
<Node Id="10312:[4534..4658).23" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722932" />
<Node Id="10312:[4534..4658).25" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722933" />
<Node Id="10312:[4534..4658).26" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 722934" />
<Node Id="10346:[10629..10648).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 722935" />
<Node Id="10346:[10650..10661).1" Label="param LookupSymbolsInSingleBinder(string name) 722936" />
<Node Id="10346:[10663..10672).1" Label="param LookupSymbolsInSingleBinder(int arity) 722937" />
<Node Id="10346:[10674..10713).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 722938" />
<Node Id="10346:[10715..10736).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 722939" />
<Node Id="10346:[10738..10759).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 722940" />
<Node Id="10346:[10761..10774).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 722941" />
<Node Id="10346:[10776..10822).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 722942" />
<Node Id="10346:[10564..12467).1" Label="param LookupSymbolsInSingleBinder(this) 722943" />
<Node Id="10346:[10861..10875).1" Label="result.IsClear 722944" />
<Node Id="10354:[3684..3818).6" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 722945" />
<Node Id="10354:[3720..3803).41" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722946" />
<Node Id="10354:[3720..3803).42" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722947" />
<Node Id="10354:[3720..3803).43" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 722948" />
<Node Id="10346:[10848..10877).1" Label="Debug.Assert(result.IsClear); 722949" />
<Node Id="10346:[10897..10914).1" Label="IsSubmissionClass 722950" />
<Node Id="10346:[7666..7775).1" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 722951" />
<Node Id="10346:[7672..7773).1" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 722952" />
<Node Id="10346:[10893..11127).1" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 722953" />
<Node Id="10346:[11143..11188).1" Label="var imports = GetImports(basesBeingResolved); 722954" />
<Node Id="10346:[11157..11187).1" Label="GetImports(basesBeingResolved) 722955" />
<Node Id="10346:[3460..3499).1" Label="param GetImports(ConsList$TypeSymbol$ basesBeingResolved) 722956" />
<Node Id="10346:[3423..3863).1" Label="param GetImports(this) 722957" />
<Node Id="10346:[3525..3638).1" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 722958" />
<Node Id="10346:[3525..3638).2" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 722959" />
<Node Id="10346:[3654..3816).1" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 722960" />
<Node Id="10346:[3654..3816).2" Label="if (_lazyImports == null)
            {
                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);
            } 722961" />
<Node Id="10346:[3712..3801).1" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 722962" />
<Node Id="10346:[3712..3801).2" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 722963" />
<Node Id="10346:[3712..3801).4" Label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 722964" />
<Node Id="10345:[2889..2923).1" Label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 722965" />
<Node Id="10345:[2938..2962).1" Label="param FromSyntax(InContainerBinder binder) 722966" />
<Node Id="10345:[2977..3016).1" Label="param FromSyntax(ConsList$TypeSymbol$ basesBeingResolved) 722967" />
<Node Id="10345:[3031..3043).1" Label="param FromSyntax(bool inUsing) 722968" />
<Node Id="10345:[3069..3118).1" Label="SyntaxList$UsingDirectiveSyntax$ usingDirectives; 722969" />
<Node Id="10345:[3102..3117).1" Label="usingDirectives 722970" />
<Node Id="10345:[3132..3193).1" Label="SyntaxList$ExternAliasDirectiveSyntax$ externAliasDirectives; 722971" />
<Node Id="10345:[3171..3192).1" Label="externAliasDirectives 722972" />
<Node Id="10345:[3207..4163).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
            {
                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings;
                externAliasDirectives = compilationUnit.Externs;
            }
            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
            {
                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                // using directives are not in scope within using directives
                usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : namespaceDecl.Usings;
                externAliasDirectives = namespaceDecl.Externs;
            }
            else
            {
                return Empty;
            } 722973" />
<Node Id="10345:[3299..3362).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 722974" />
<Node Id="10345:[3476..3483).1" Label="inUsing 722975" />
<Node Id="10345:[3530..3552).1" Label="compilationUnit.Usings 722976" />
<Node Id="10345:[3458..3553).1" Label="usingDirectives = inUsing ? default(SyntaxList$UsingDirectiveSyntax$) : compilationUnit.Usings; 722977" />
<Node Id="10345:[3571..3619).1" Label="externAliasDirectives = compilationUnit.Externs; 722978" />
<Node Id="10345:[4179..4307).1" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 722979" />
<Node Id="10345:[4179..4307).2" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 722980" />
<Node Id="10345:[4179..4307).4" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 722981" />
<Node Id="10345:[4179..4307).5" Label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)
            {
                return Empty;
            } 722982" />
<Node Id="10345:[4279..4292).1" Label="return Empty; 722983" />
<Node Id="10346:[3832..3852).1" Label="return _lazyImports; 722984" />
<Node Id="10346:[11258..12246).1" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 722985" />
<Node Id="10346:[11258..12246).2" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 722986" />
<Node Id="10346:[11258..12246).5" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 722987" />
<Node Id="10346:[11258..12246).6" Label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);

                if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                }
            } 722988" />
<Node Id="10346:[11369..11508).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722989" />
<Node Id="10346:[11369..11508).2" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722990" />
<Node Id="10346:[11369..11508).3" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722991" />
<Node Id="10346:[11369..11508).4" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722992" />
<Node Id="10346:[11369..11508).5" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722993" />
<Node Id="10346:[11369..11508).6" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722994" />
<Node Id="10346:[11369..11508).7" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722995" />
<Node Id="10346:[11369..11508).8" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722996" />
<Node Id="10346:[11369..11508).9" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 722997" />
<Node Id="10346:[11369..11507).1" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 722998" />
<Node Id="10312:[7652..7671).1" Label="param LookupMembersInternal(LookupResult result) 722999" />
<Node Id="10312:[7673..7703).1" Label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 723000" />
<Node Id="10312:[7705..7716).1" Label="param LookupMembersInternal(string name) 723001" />
<Node Id="10312:[7718..7727).1" Label="param LookupMembersInternal(int arity) 723002" />
<Node Id="10312:[7729..7768).1" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 723003" />
<Node Id="10312:[7770..7791).1" Label="param LookupMembersInternal(LookupOptions options) 723004" />
<Node Id="10312:[7793..7814).1" Label="param LookupMembersInternal(Binder originalBinder) 723005" />
<Node Id="10312:[7816..7829).1" Label="param LookupMembersInternal(bool diagnose) 723006" />
<Node Id="10312:[7831..7877).1" Label="param LookupMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 723007" />
<Node Id="10312:[7615..8420).1" Label="param LookupMembersInternal(this) 723008" />
<Node Id="10312:[7903..7936).1" Label="Debug.Assert(options.AreValid()); 723009" />
<Node Id="10312:[7916..7934).1" Label="options.AreValid() 723010" />
<Node Id="10353:[4698..4724).2" Label="param AreValid(this LookupOptions options) 723011" />
<Node Id="10353:[4750..4847).3" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 723012" />
<Node Id="10353:[4863..5000).5" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 723013" />
<Node Id="10353:[4863..5000).6" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 723014" />
<Node Id="10353:[5079..5183).3" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 723015" />
<Node Id="10353:[5197..5323).4" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 723016" />
<Node Id="10353:[5485..5759).7" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 723017" />
<Node Id="10353:[5485..5759).8" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 723018" />
<Node Id="10353:[5485..5759).9" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 723019" />
<Node Id="10353:[5775..5979).5" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 723020" />
<Node Id="10353:[5775..5979).7" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 723021" />
<Node Id="10353:[5995..6029).4" Label="return OnlyOneBitSet(onlyOptions); 723022" />
<Node Id="10353:[6002..6028).2" Label="OnlyOneBitSet(onlyOptions) 723023" />
<Node Id="10353:[6343..6358).2" Label="param OnlyOneBitSet(LookupOptions o) 723024" />
<Node Id="10353:[6384..6410).7" Label="return (o & (o - 1)) == 0; 723025" />
<Node Id="10353:[6384..6410).8" Label="return (o & (o - 1)) == 0; 723026" />
<Node Id="10312:[7952..7977).1" Label="Debug.Assert(arity $= 0); 723027" />
<Node Id="10312:[7952..7977).2" Label="Debug.Assert(arity $= 0); 723028" />
<Node Id="10312:[7991..8409).1" Label="if (nsOrType.IsNamespace)
            {
                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
            } 723029" />
<Node Id="10312:[8049..8181).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723030" />
<Node Id="10312:[8049..8181).2" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723031" />
<Node Id="10312:[8049..8181).3" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723032" />
<Node Id="10312:[8049..8181).4" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723033" />
<Node Id="10312:[8049..8181).5" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723034" />
<Node Id="10312:[8049..8181).6" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723035" />
<Node Id="10312:[8049..8181).7" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723036" />
<Node Id="10312:[8049..8181).8" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723037" />
<Node Id="10312:[8049..8180).1" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 723038" />
<Node Id="10312:[18976..18995).1" Label="param LookupMembersInNamespace(LookupResult result) 723039" />
<Node Id="10312:[18997..19015).1" Label="param LookupMembersInNamespace(NamespaceSymbol ns) 723040" />
<Node Id="10312:[19017..19028).1" Label="param LookupMembersInNamespace(string name) 723041" />
<Node Id="10312:[19030..19039).1" Label="param LookupMembersInNamespace(int arity) 723042" />
<Node Id="10312:[19041..19062).1" Label="param LookupMembersInNamespace(LookupOptions options) 723043" />
<Node Id="10312:[19064..19085).1" Label="param LookupMembersInNamespace(Binder originalBinder) 723044" />
<Node Id="10312:[19087..19100).1" Label="param LookupMembersInNamespace(bool diagnose) 723045" />
<Node Id="10312:[19102..19148).1" Label="param LookupMembersInNamespace(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 723046" />
<Node Id="10312:[19174..19243).1" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 723047" />
<Node Id="10312:[19174..19243).2" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 723048" />
<Node Id="10312:[19174..19243).3" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 723049" />
<Node Id="10312:[19174..19243).4" Label="var members = GetCandidateMembers(ns, name, options, originalBinder); 723050" />
<Node Id="10312:[19188..19242).1" Label="GetCandidateMembers(ns, name, options, originalBinder) 723051" />
<Node Id="10312:[61540..61570).1" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 723052" />
<Node Id="10312:[61572..61583).1" Label="param GetCandidateMembers(string name) 723053" />
<Node Id="10312:[61585..61606).1" Label="param GetCandidateMembers(LookupOptions options) 723054" />
<Node Id="10312:[61608..61629).1" Label="param GetCandidateMembers(Binder originalBinder) 723055" />
<Node Id="10312:[61655..62327).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 723056" />
<Node Id="10312:[61655..62327).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 723057" />
<Node Id="10312:[61655..62327).4" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 723058" />
<Node Id="10312:[61874..62327).1" Label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 723059" />
<Node Id="10312:[62098..62327).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 723060" />
<Node Id="10312:[62098..62327).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 723061" />
<Node Id="10312:[62279..62312).1" Label="return nsOrType.GetMembers(name); 723062" />
<Node Id="10312:[19259..19531).1" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 723063" />
<Node Id="10312:[19326..19460).1" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 723064" />
<Node Id="10312:[19326..19460).2" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 723065" />
<Node Id="10312:[19326..19460).3" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 723066" />
<Node Id="10312:[19326..19460).6" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 723067" />
<Node Id="10312:[19326..19460).7" Label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 723068" />
<Node Id="10312:[19366..19459).1" Label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 723069" />
<Node Id="10312:[63424..63437).1" Label="param CheckViability(Symbol symbol) 723070" />
<Node Id="10312:[63439..63448).1" Label="param CheckViability(int arity) 723071" />
<Node Id="10312:[63450..63471).1" Label="param CheckViability(LookupOptions options) 723072" />
<Node Id="10312:[63473..63501).1" Label="param CheckViability(TypeSymbol accessThroughType) 723073" />
<Node Id="10312:[63503..63516).1" Label="param CheckViability(bool diagnose) 723074" />
<Node Id="10312:[63518..63564).1" Label="param CheckViability(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 723075" />
<Node Id="10312:[63566..63612).1" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 723076" />
<Node Id="10312:[63381..70761).1" Label="param CheckViability(this) 723077" />
<Node Id="10312:[63638..63668).1" Label="bool inaccessibleViaQualifier; 723078" />
<Node Id="10312:[63682..63706).1" Label="DiagnosticInfo diagInfo; 723079" />
<Node Id="10312:[63859..64015).1" Label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias
                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)
                : symbol; 723080" />
<Node Id="10312:[63881..63912).1" Label="symbol.Kind == SymbolKind.Alias 723081" />
<Node Id="10312:[64121..69285).1" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723082" />
<Node Id="10312:[64121..69285).2" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723083" />
<Node Id="10312:[64353..69285).1" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723084" />
<Node Id="10312:[64353..69285).2" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723085" />
<Node Id="10312:[64353..69285).3" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723086" />
<Node Id="10312:[64353..69285).4" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723087" />
<Node Id="10312:[64353..69285).5" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723088" />
<Node Id="10312:[64357..64415).1" Label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 723089" />
<Node Id="10312:[80978..80991).1" Label="param WrongArity(Symbol symbol) 723090" />
<Node Id="10312:[80993..81002).1" Label="param WrongArity(int arity) 723091" />
<Node Id="10312:[81004..81017).1" Label="param WrongArity(bool diagnose) 723092" />
<Node Id="10312:[81019..81040).1" Label="param WrongArity(LookupOptions options) 723093" />
<Node Id="10312:[81042..81069).1" Label="param WrongArity(out DiagnosticInfo diagInfo) 723094" />
<Node Id="10312:[81095..84034).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 723095" />
<Node Id="10312:[81196..82523).1" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 723096" />
<Node Id="10312:[81196..82523).2" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 723097" />
<Node Id="10312:[81196..82523).3" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 723098" />
<Node Id="10312:[81196..82523).6" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 723099" />
<Node Id="10312:[81319..81371).1" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 723100" />
<Node Id="10312:[81495..81570).1" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 723101" />
<Node Id="10312:[81495..81570).2" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 723102" />
<Node Id="10312:[81596..82500).1" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 723103" />
<Node Id="10312:[81596..82500).2" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 723104" />
<Node Id="10312:[81628..81659).1" Label="options.IsAttributeTypeLookup() 723105" />
<Node Id="10353:[7504..7530).2" Label="param IsAttributeTypeLookup(this LookupOptions options) 723106" />
<Node Id="10312:[81596..82500).5" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 723107" />
<Node Id="10312:[84050..84066).1" Label="diagInfo = null; 723108" />
<Node Id="10312:[84080..84093).1" Label="return false; 723109" />
<Node Id="10312:[64353..69285).6" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723110" />
<Node Id="10312:[64537..64543).1" Label="InCref 723111" />
<Node Id="10306:[3196..3249).1" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 723112" />
<Node Id="10306:[3202..3247).1" Label="return this.Flags.Includes(BinderFlags.Cref); 723113" />
<Node Id="10306:[3202..3247).2" Label="return this.Flags.Includes(BinderFlags.Cref); 723114" />
<Node Id="10306:[3209..3246).1" Label="this.Flags.Includes(BinderFlags.Cref) 723115" />
<Node Id="10298:[471..492).9" Label="param Includes(this BinderFlags self) 723116" />
<Node Id="10298:[494..511).9" Label="param Includes(BinderFlags other) 723117" />
<Node Id="10312:[64532..69285).1" Label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723118" />
<Node Id="10312:[65229..69285).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723119" />
<Node Id="10312:[65229..69285).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723120" />
<Node Id="10312:[65474..69285).1" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723121" />
<Node Id="10312:[65474..69285).2" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723122" />
<Node Id="10312:[65730..65736).1" Label="InCref 723123" />
<Node Id="10312:[65726..69285).1" Label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723124" />
<Node Id="10312:[66182..66188).1" Label="InCref 723125" />
<Node Id="10312:[66177..69285).1" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723126" />
<Node Id="10312:[66177..69285).2" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723127" />
<Node Id="10312:[66177..69285).3" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723128" />
<Node Id="10312:[66177..69285).4" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723129" />
<Node Id="10312:[66291..66342).1" Label="RefineAccessThroughType(options, accessThroughType) 723130" />
<Node Id="10312:[75301..75322).1" Label="param RefineAccessThroughType(LookupOptions options) 723131" />
<Node Id="10312:[75324..75352).1" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 723132" />
<Node Id="10312:[75735..75866).1" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 723133" />
<Node Id="10312:[75735..75866).2" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 723134" />
<Node Id="10312:[75742..75804).1" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 723135" />
<Node Id="10312:[75735..75866).4" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 723136" />
<Node Id="10312:[66177..69285).7" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723137" />
<Node Id="10312:[66177..69285).8" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723138" />
<Node Id="10312:[66177..69285).9" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723139" />
<Node Id="10312:[66215..66540).1" Label="this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved) 723140" />
<Node Id="10312:[77528..77541).1" Label="param IsAccessible(Symbol symbol) 723141" />
<Node Id="10312:[77543..77571).1" Label="param IsAccessible(TypeSymbol accessThroughType) 723142" />
<Node Id="10312:[77573..77604).1" Label="param IsAccessible(out bool failedThroughTypeCheck) 723143" />
<Node Id="10312:[77606..77652).1" Label="param IsAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 723144" />
<Node Id="10312:[77654..77700).1" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 723145" />
<Node Id="10312:[77501..78044).1" Label="param IsAccessible(this) 723146" />
<Node Id="10312:[77726..77892).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 723147" />
<Node Id="10312:[77726..77892).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 723148" />
<Node Id="10312:[77730..77782).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 723149" />
<Node Id="10298:[471..492).12" Label="param Includes(this BinderFlags self) 723150" />
<Node Id="10298:[494..511).12" Label="param Includes(BinderFlags other) 723151" />
<Node Id="10312:[77908..78033).1" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723152" />
<Node Id="10312:[77908..78033).2" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723153" />
<Node Id="10312:[77908..78033).3" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723154" />
<Node Id="10312:[77908..78033).4" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723155" />
<Node Id="10312:[77908..78033).5" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723156" />
<Node Id="10312:[77915..78032).1" Label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 723157" />
<Node Id="10312:[78387..78400).1" Label="param IsAccessibleHelper(Symbol symbol) 723158" />
<Node Id="10312:[78402..78430).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 723159" />
<Node Id="10312:[78432..78463).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 723160" />
<Node Id="10312:[78465..78511).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 723161" />
<Node Id="10312:[78513..78552).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 723162" />
<Node Id="10312:[78346..78783).1" Label="param IsAccessibleHelper(this) 723163" />
<Node Id="10312:[78642..78772).1" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723164" />
<Node Id="10312:[78642..78772).2" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723165" />
<Node Id="10312:[78642..78772).3" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723166" />
<Node Id="10312:[78642..78772).4" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723167" />
<Node Id="10312:[78642..78772).5" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723168" />
<Node Id="10312:[78649..78771).1" Label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 723169" />
<Node Id="10376:[1070..1083).1" Label="param IsAccessibleHelper(Symbol symbol) 723170" />
<Node Id="10376:[1085..1113).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 723171" />
<Node Id="10376:[1115..1146).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 723172" />
<Node Id="10376:[1148..1194).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 723173" />
<Node Id="10376:[1196..1235).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 723174" />
<Node Id="10376:[1028..1425).1" Label="param IsAccessibleHelper(this) 723175" />
<Node Id="10376:[1261..1414).1" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723176" />
<Node Id="10376:[1261..1414).2" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723177" />
<Node Id="10376:[1261..1414).3" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723178" />
<Node Id="10376:[1261..1414).4" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723179" />
<Node Id="10376:[1261..1414).5" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723180" />
<Node Id="10376:[1261..1414).6" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723181" />
<Node Id="10376:[1268..1413).1" Label="this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 723182" />
<Node Id="10286:[30070..30083).1" Label="param IsSymbolAccessibleConditional(Symbol symbol) 723183" />
<Node Id="10286:[30098..30120).1" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 723184" />
<Node Id="10286:[30135..30160).1" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 723185" />
<Node Id="10286:[30175..30206).1" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 723186" />
<Node Id="10286:[30221..30268).1" Label="param IsSymbolAccessibleConditional(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 723187" />
<Node Id="10286:[30283..30330).1" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 723188" />
<Node Id="10286:[30012..30691).1" Label="param IsSymbolAccessibleConditional(this) 723189" />
<Node Id="10286:[30356..30522).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 723190" />
<Node Id="10286:[30356..30522).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 723191" />
<Node Id="10286:[30360..30412).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 723192" />
<Node Id="10298:[471..492).13" Label="param Includes(this BinderFlags self) 723193" />
<Node Id="10298:[494..511).13" Label="param Includes(BinderFlags other) 723194" />
<Node Id="10286:[30538..30680).1" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723195" />
<Node Id="10286:[30538..30680).2" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723196" />
<Node Id="10286:[30538..30680).3" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723197" />
<Node Id="10286:[30538..30680).4" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723198" />
<Node Id="10286:[30538..30680).5" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723199" />
<Node Id="10286:[30538..30680).6" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 723200" />
<Node Id="10286:[30545..30679).1" Label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 723201" />
<Node Id="10060:[2108..2121).1" Label="param IsSymbolAccessible(Symbol symbol) 723202" />
<Node Id="10060:[2136..2158).1" Label="param IsSymbolAccessible(NamedTypeSymbol within) 723203" />
<Node Id="10060:[2173..2198).1" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 723204" />
<Node Id="10060:[2213..2244).1" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 723205" />
<Node Id="10060:[2259..2305).1" Label="param IsSymbolAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 723206" />
<Node Id="10060:[2320..2366).1" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 723207" />
<Node Id="10060:[2392..2555).1" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723208" />
<Node Id="10060:[2392..2555).2" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723209" />
<Node Id="10060:[2392..2555).3" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723210" />
<Node Id="10060:[2392..2555).4" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723211" />
<Node Id="10060:[2392..2555).5" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723212" />
<Node Id="10060:[2392..2555).6" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723213" />
<Node Id="10060:[2392..2555).7" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 723214" />
<Node Id="10060:[2399..2554).1" Label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 723215" />
<Node Id="10060:[5593..5606).1" Label="param IsSymbolAccessibleCore(Symbol symbol) 723216" />
<Node Id="10060:[5621..5634).1" Label="param IsSymbolAccessibleCore(Symbol within) 723217" />
<Node Id="10060:[5691..5716).1" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 723218" />
<Node Id="10060:[5731..5762).1" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 723219" />
<Node Id="10060:[5777..5806).1" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 723220" />
<Node Id="10060:[5821..5867).1" Label="param IsSymbolAccessibleCore(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 723221" />
<Node Id="10060:[5882..5928).1" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 723222" />
<Node Id="10060:[5954..5991).1" Label="Debug.Assert((object)symbol != null); 723223" />
<Node Id="10060:[5954..5991).2" Label="Debug.Assert((object)symbol != null); 723224" />
<Node Id="10060:[6005..6042).1" Label="Debug.Assert((object)within != null); 723225" />
<Node Id="10060:[6005..6042).2" Label="Debug.Assert((object)within != null); 723226" />
<Node Id="10060:[6056..6090).1" Label="Debug.Assert(within.IsDefinition); 723227" />
<Node Id="10060:[6104..6172).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723228" />
<Node Id="10060:[6188..6219).1" Label="failedThroughTypeCheck = false; 723229" />
<Node Id="10060:[6235..9907).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.ArrayType:
                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.PointerType:
                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.NamedType:
                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Alias:
                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Discard:
                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.FunctionPointerType:
                    var funcPtr = (FunctionPointerTypeSymbol)symbol;
                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }

                    foreach (var param in funcPtr.Signature.Parameters)
                    {
                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                        {
                            return false;
                        }
                    }

                    return true;

                case SymbolKind.ErrorType:
                    // Always assume that error types are accessible.
                    return true;

                case SymbolKind.TypeParameter:
                case SymbolKind.Parameter:
                case SymbolKind.Local:
                case SymbolKind.Label:
                case SymbolKind.Namespace:
                case SymbolKind.DynamicType:
                case SymbolKind.Assembly:
                case SymbolKind.NetModule:
                case SymbolKind.RangeVariable:
                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:
                    // These types of symbols are always accessible (if visible).
                    return true;

                case SymbolKind.Method:
                case SymbolKind.Property:
                case SymbolKind.Event:
                case SymbolKind.Field:
                    if (!symbol.RequiresInstanceReceiver())
                    {
                        // static members aren't accessed 'through' an 'instance' of any type.  So we
                        // null out the 'through' instance here.  This ensures that we'll understand
                        // accessing protected statics properly.
                        throughTypeOpt = null;
                    }

                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);

                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 723230" />
<Node Id="10060:[6814..6920).1" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 723231" />
<Node Id="10060:[6814..6920).2" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 723232" />
<Node Id="10060:[6814..6920).3" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 723233" />
<Node Id="10060:[6814..6920).4" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 723234" />
<Node Id="10060:[6821..6919).1" Label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 723235" />
<Node Id="10060:[10180..10200).1" Label="param IsNamedTypeAccessible(NamedTypeSymbol type) 723236" />
<Node Id="10060:[10202..10215).1" Label="param IsNamedTypeAccessible(Symbol within) 723237" />
<Node Id="10060:[10217..10263).1" Label="param IsNamedTypeAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 723238" />
<Node Id="10060:[10265..10311).1" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 723239" />
<Node Id="10060:[10337..10405).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723240" />
<Node Id="10060:[10419..10454).1" Label="Debug.Assert((object)type != null); 723241" />
<Node Id="10060:[10419..10454).2" Label="Debug.Assert((object)type != null); 723242" />
<Node Id="10060:[10470..10516).1" Label="var compilation = within.DeclaringCompilation; 723243" />
<Node Id="10060:[10532..10544).1" Label="bool unused; 723244" />
<Node Id="10060:[10558..11295).1" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 723245" />
<Node Id="10060:[11311..11352).1" Label="var containingType = type.ContainingType; 723246" />
<Node Id="10060:[11366..11675).1" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 723247" />
<Node Id="10060:[11366..11675).2" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 723248" />
<Node Id="10060:[11373..11403).1" Label="(object)containingType == null 723249" />
<Node Id="10060:[11366..11675).5" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 723250" />
<Node Id="10060:[11423..11509).1" Label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 723251" />
<Node Id="10060:[11990..12013).1" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 723252" />
<Node Id="10060:[12028..12063).1" Label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 723253" />
<Node Id="10060:[12078..12091).1" Label="param IsNonNestedTypeAccessible(Symbol within) 723254" />
<Node Id="10060:[12117..12185).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723255" />
<Node Id="10060:[12199..12238).1" Label="Debug.Assert((object)assembly != null); 723256" />
<Node Id="10060:[12199..12238).2" Label="Debug.Assert((object)assembly != null); 723257" />
<Node Id="10060:[12254..13527).1" Label="switch (declaredAccessibility)
            {
                case Accessibility.NotApplicable:
                case Accessibility.Public:
                    // Public symbols are always accessible from any context
                    return true;

                case Accessibility.Private:
                case Accessibility.Protected:
                case Accessibility.ProtectedAndInternal:
                    // Shouldn't happen except in error cases.
                    return false;

                case Accessibility.Internal:
                case Accessibility.ProtectedOrInternal:

                    // within is typically a type
                    var withinType = within as NamedTypeSymbol;
                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;

                    // An internal type is accessible if we're in the same assembly or we have
                    // friend access to the assembly it was defined in.
                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);

                default:
                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);
            } 723258" />
<Node Id="10060:[12494..12506).1" Label="return true; 723259" />
<Node Id="10312:[66177..69285).11" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723260" />
<Node Id="10312:[67587..67593).1" Label="InCref 723261" />
<Node Id="10312:[67582..69285).1" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723262" />
<Node Id="10312:[67582..69285).2" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723263" />
<Node Id="10312:[67858..69285).1" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723264" />
<Node Id="10312:[67858..69285).2" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723265" />
<Node Id="10312:[68183..69285).1" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723266" />
<Node Id="10312:[68183..69285).2" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723267" />
<Node Id="10312:[68512..69285).1" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723268" />
<Node Id="10312:[68512..69285).2" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723269" />
<Node Id="10312:[68882..69285).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723270" />
<Node Id="10312:[68882..69285).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723271" />
<Node Id="10312:[69237..69270).1" Label="return LookupResult.Good(symbol); 723272" />
<Node Id="10312:[69244..69269).1" Label="LookupResult.Good(symbol) 723273" />
<Node Id="10354:[5400..5413).1" Label="param Good(Symbol symbol) 723274" />
<Node Id="10354:[5439..5508).1" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 723275" />
<Node Id="10354:[5439..5508).2" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 723276" />
<Node Id="10354:[5439..5508).3" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 723277" />
<Node Id="10354:[5446..5507).1" Label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 723278" />
<Node Id="10368:[1076..1097).1" Label="param SingleLookupResult(LookupResultKind kind) 723279" />
<Node Id="10368:[1099..1112).1" Label="param SingleLookupResult(Symbol symbol) 723280" />
<Node Id="10368:[1114..1134).1" Label="param SingleLookupResult(DiagnosticInfo error) 723281" />
<Node Id="10368:[1048..1256).1" Label="param SingleLookupResult(this) 723282" />
<Node Id="10368:[1160..1169).1" Label="this.Kind 723283" />
<Node Id="10368:[1191..1202).1" Label="this.Symbol 723284" />
<Node Id="10368:[1226..1236).1" Label="this.Error 723285" />
<Node Id="10312:[69237..69270).2" Label="return LookupResult.Good(symbol); 723286" />
<Node Id="10312:[19478..19516).1" Label="result.MergeEqual(resultOfThisMember); 723287" />
<Node Id="10312:[19478..19515).1" Label="result.MergeEqual(resultOfThisMember) 723288" />
<Node Id="10354:[10217..10242).1" Label="param MergeEqual(SingleLookupResult result) 723289" />
<Node Id="10354:[10192..10676).1" Label="param MergeEqual(this) 723290" />
<Node Id="10354:[10272..10276).1" Label="Kind 723291" />
<Node Id="10354:[4058..4122).4" Label="get
            {
                return _kind;
            } 723292" />
<Node Id="10354:[10268..10665).1" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 723293" />
<Node Id="10354:[10268..10665).2" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 723294" />
<Node Id="10354:[10404..10408).1" Label="Kind 723295" />
<Node Id="10354:[10386..10665).1" Label="if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 723296" />
<Node Id="10354:[10442..10463).1" Label="this.SetFrom(result); 723297" />
<Node Id="10354:[10442..10462).1" Label="this.SetFrom(result) 723298" />
<Node Id="10354:[8131..8155).1" Label="param SetFrom(SingleLookupResult other) 723299" />
<Node Id="10354:[8109..8324).1" Label="param SetFrom(this) 723300" />
<Node Id="10354:[8181..8186).1" Label="_kind 723301" />
<Node Id="10354:[8214..8234).1" Label="_symbolList.Clear(); 723302" />
<Node Id="10354:[8248..8278).1" Label="_symbolList.Add(other.Symbol); 723303" />
<Node Id="10354:[8248..8278).2" Label="_symbolList.Add(other.Symbol); 723304" />
<Node Id="10354:[8292..8298).1" Label="_error 723305" />
<Node Id="10354:[10442..10463).2" Label="this.SetFrom(result); 723306" />
<Node Id="10312:[19478..19516).2" Label="result.MergeEqual(resultOfThisMember); 723307" />
<Node Id="10312:[19259..19531).4" Label="foreach (Symbol member in members)
            {
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);
                result.MergeEqual(resultOfThisMember);
            } 723308" />
<Node Id="10312:[8049..8181).9" Label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 723309" />
<Node Id="10346:[11369..11508).10" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 723310" />
<Node Id="10346:[11532..11552).1" Label="result.IsMultiViable 723311" />
<Node Id="10354:[4919..5009).4" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 723312" />
<Node Id="10354:[4094..4107).6" Label="return _kind; 723313" />
<Node Id="10346:[11528..12231).1" Label="if (result.IsMultiViable)
                {
                    // symbols cannot conflict with using alias names
                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    }

                    return;
                } 723314" />
<Node Id="10346:[11665..12181).1" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 723315" />
<Node Id="10346:[11665..12181).2" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 723316" />
<Node Id="10346:[11665..12181).3" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 723317" />
<Node Id="10346:[11710..11746).1" Label="originalBinder.IsSemanticModelBinder 723318" />
<Node Id="10286:[2155..2260).1" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 723319" />
<Node Id="10286:[2191..2245).1" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 723320" />
<Node Id="10286:[2191..2245).2" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 723321" />
<Node Id="10286:[2198..2244).1" Label="this.Flags.Includes(BinderFlags.SemanticModel) 723322" />
<Node Id="10298:[471..492).15" Label="param Includes(this BinderFlags self) 723323" />
<Node Id="10298:[494..511).15" Label="param Includes(BinderFlags other) 723324" />
<Node Id="10346:[11665..12181).4" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 723325" />
<Node Id="10346:[11683..11747).1" Label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 723326" />
<Node Id="10345:[28212..28223).1" Label="param IsUsingAlias(string name) 723327" />
<Node Id="10345:[28225..28251).1" Label="param IsUsingAlias(bool callerIsSemanticModel) 723328" />
<Node Id="10345:[28185..28951).1" Label="param IsUsingAlias(this) 723329" />
<Node Id="10345:[28277..28305).1" Label="AliasAndUsingDirective node; 723330" />
<Node Id="10345:[28300..28304).1" Label="node 723331" />
<Node Id="10345:[28319..28911).1" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 723332" />
<Node Id="10345:[28319..28911).2" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 723333" />
<Node Id="10345:[28319..28911).3" Label="if (this.UsingAliases.TryGetValue(name, out node))
            {
                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if
                // there's a conflict between an alias and a member.  As a conflict may cause a
                // speculative lambda binding to fail this is semantically relevant and we need to
                // mark this using alias as referenced (and thus not something that can be removed).
                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);
                return true;
            } 723334" />
<Node Id="10345:[28927..28940).1" Label="return false; 723335" />
<Node Id="10346:[11665..12181).6" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 723336" />
<Node Id="10346:[11665..12181).7" Label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))
                    {
                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);
                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);
                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                    } 723337" />
<Node Id="10346:[12205..12212).1" Label="return; 723338" />
<Node Id="10312:[4685..4699).3" Label="result.IsClear 723339" />
<Node Id="10354:[3684..3818).7" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 723340" />
<Node Id="10354:[3720..3803).49" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723341" />
<Node Id="10312:[4680..4787).5" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 723342" />
<Node Id="10312:[4749..4764).1" Label="binder = scope; 723343" />
<Node Id="10312:[4826..5058).11" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 723344" />
<Node Id="10312:[4826..5058).12" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 723345" />
<Node Id="10312:[5087..5101).1" Label="return binder; 723346" />
<Node Id="10312:[1585..1724).9" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 723347" />
<Node Id="10319:[43504..43546).1" Label="diagnostics.Add(node, useSiteDiagnostics); 723348" />
<Node Id="10319:[43504..43546).2" Label="diagnostics.Add(node, useSiteDiagnostics); 723349" />
<Node Id="10319:[43504..43546).3" Label="diagnostics.Add(node, useSiteDiagnostics); 723350" />
<Node Id="10319:[43504..43546).4" Label="diagnostics.Add(node, useSiteDiagnostics); 723351" />
<Node Id="10319:[43562..43590).1" Label="Symbol bindingResult = null; 723352" />
<Node Id="10319:[43799..44676).1" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 723353" />
<Node Id="10319:[43799..44676).2" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 723354" />
<Node Id="10319:[43799..44676).3" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 723355" />
<Node Id="10319:[43853..43873).1" Label="IsViableType(result) 723356" />
<Node Id="10319:[41088..41107).1" Label="param IsViableType(LookupResult result) 723357" />
<Node Id="10319:[41138..41158).1" Label="result.IsMultiViable 723358" />
<Node Id="10354:[4919..5009).6" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 723359" />
<Node Id="10354:[4962..4966).6" Label="Kind 723360" />
<Node Id="10354:[4058..4122).8" Label="get
            {
                return _kind;
            } 723361" />
<Node Id="10354:[4094..4107).8" Label="return _kind; 723362" />
<Node Id="10319:[41133..41220).1" Label="if (!result.IsMultiViable)
            {
                return false;
            } 723363" />
<Node Id="10319:[41254..41268).1" Label="result.Symbols 723364" />
<Node Id="10354:[4525..4595).1" Label="get
            {
                return _symbolList;
            } 723365" />
<Node Id="10354:[4561..4580).1" Label="return _symbolList; 723366" />
<Node Id="10319:[41236..41680).1" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 723367" />
<Node Id="10319:[41302..41665).1" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 723368" />
<Node Id="10319:[41634..41646).1" Label="return true; 723369" />
<Node Id="10319:[44692..45392).1" Label="if (bindingResult is null)
            {
                bool wasError;

                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);
                if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
            } 723370" />
<Node Id="10319:[44751..44765).1" Label="bool wasError; 723371" />
<Node Id="10319:[44785..44930).1" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723372" />
<Node Id="10319:[44785..44930).2" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723373" />
<Node Id="10319:[44785..44930).3" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723374" />
<Node Id="10319:[44785..44930).5" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723375" />
<Node Id="10319:[44785..44930).6" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723376" />
<Node Id="10319:[44785..44930).7" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723377" />
<Node Id="10319:[44785..44930).8" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723378" />
<Node Id="10319:[44785..44930).9" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723379" />
<Node Id="10319:[44785..44930).10" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723380" />
<Node Id="10319:[44801..44929).1" Label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 723381" />
<Node Id="10319:[84167..84186).1" Label="param ResultSymbol(LookupResult result) 723382" />
<Node Id="10319:[84201..84218).1" Label="param ResultSymbol(string simpleName) 723383" />
<Node Id="10319:[84233..84242).1" Label="param ResultSymbol(int arity) 723384" />
<Node Id="10319:[84257..84273).1" Label="param ResultSymbol(SyntaxNode where) 723385" />
<Node Id="10319:[84288..84313).1" Label="param ResultSymbol(DiagnosticBag diagnostics) 723386" />
<Node Id="10319:[84328..84359).1" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 723387" />
<Node Id="10319:[84374..84391).1" Label="param ResultSymbol(out bool wasError) 723388" />
<Node Id="10319:[84406..84447).1" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 723389" />
<Node Id="10319:[84462..84508).1" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 723390" />
<Node Id="10319:[84124..109887).1" Label="param ResultSymbol(this) 723391" />
<Node Id="10319:[84534..84675).1" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723392" />
<Node Id="10319:[84534..84675).2" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723393" />
<Node Id="10319:[84534..84675).3" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723394" />
<Node Id="10319:[84534..84675).4" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723395" />
<Node Id="10319:[84534..84675).5" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723396" />
<Node Id="10319:[84534..84675).6" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723397" />
<Node Id="10319:[84534..84675).7" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723398" />
<Node Id="10319:[84534..84675).8" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723399" />
<Node Id="10319:[84534..84675).9" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 723400" />
<Node Id="10319:[84550..84674).1" Label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 723401" />
<Node Id="10319:[84907..109876).1" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 723402" />
<Node Id="10319:[84907..109876).2" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 723403" />
<Node Id="10319:[84907..109876).3" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 723404" />
<Node Id="10319:[84907..109876).4" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 723405" />
<Node Id="10319:[84907..109876).5" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 723406" />
<Node Id="10319:[84907..109876).6" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 723407" />
<Node Id="10319:[84907..109876).7" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 723408" />
<Node Id="10319:[84907..109876).8" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 723409" />
<Node Id="10319:[84907..109876).9" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 723410" />
<Node Id="10319:[84907..109876).10" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 723411" />
<Node Id="10319:[85320..85348).1" Label="Debug.Assert(where != null); 723412" />
<Node Id="10319:[85320..85348).2" Label="Debug.Assert(where != null); 723413" />
<Node Id="10319:[85366..85400).1" Label="Debug.Assert(diagnostics != null); 723414" />
<Node Id="10319:[85366..85400).2" Label="Debug.Assert(diagnostics != null); 723415" />
<Node Id="10319:[85434..85448).1" Label="result.Symbols 723416" />
<Node Id="10354:[4525..4595).2" Label="get
            {
                return _symbolList;
            } 723417" />
<Node Id="10354:[4561..4580).2" Label="return _symbolList; 723418" />
<Node Id="10319:[85420..85449).1" Label="var symbols = result.Symbols; 723419" />
<Node Id="10319:[85467..85484).1" Label="wasError = false; 723420" />
<Node Id="10319:[85508..85528).1" Label="result.IsMultiViable 723421" />
<Node Id="10354:[4919..5009).7" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 723422" />
<Node Id="10354:[4962..4966).7" Label="Kind 723423" />
<Node Id="10354:[4058..4122).9" Label="get
            {
                return _kind;
            } 723424" />
<Node Id="10354:[4094..4107).9" Label="return _kind; 723425" />
<Node Id="10319:[85504..106825).1" Label="if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                } 723426" />
<Node Id="10319:[85570..106806).1" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 723427" />
<Node Id="10319:[85570..106806).2" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 723428" />
<Node Id="10319:[103953..103983).1" Label="var singleResult = symbols[0]; 723429" />
<Node Id="10319:[104078..104122).1" Label="var singleType = singleResult as TypeSymbol; 723430" />
<Node Id="10319:[104148..106735).1" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 723431" />
<Node Id="10319:[104148..106735).2" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 723432" />
<Node Id="10319:[104148..106735).3" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 723433" />
<Node Id="10319:[104874..105336).1" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 723434" />
<Node Id="10319:[104874..105336).2" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 723435" />
<Node Id="10319:[105368..106708).1" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 723436" />
<Node Id="10319:[105601..106708).1" Label="if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 723437" />
<Node Id="10319:[106763..106783).1" Label="return singleResult; 723438" />
<Node Id="10319:[84691..84861).1" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 723439" />
<Node Id="10319:[84764..84846).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723440" />
<Node Id="10319:[84764..84846).2" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723441" />
<Node Id="10319:[84764..84846).4" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723442" />
<Node Id="10319:[84764..84846).5" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723443" />
<Node Id="10319:[84764..84845).1" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 723444" />
<Node Id="10306:[358886..358901).1" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 723445" />
<Node Id="10306:[358903..358930).1" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 723446" />
<Node Id="10306:[358932..358945).1" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 723447" />
<Node Id="10306:[358947..358972).1" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 723448" />
<Node Id="10306:[358838..360009).1" Label="param CheckRuntimeSupportForSymbolAccess(this) 723449" />
<Node Id="10306:[358998..359998).1" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 723450" />
<Node Id="10306:[358998..359998).2" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 723451" />
<Node Id="10319:[84877..84891).1" Label="return symbol; 723452" />
<Node Id="10319:[44948..45377).1" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 723453" />
<Node Id="10319:[45408..45421).1" Label="result.Free() 723454" />
<Node Id="10354:[11383..11549).1" Label="param Free(this) 723455" />
<Node Id="10354:[11428..11440).1" Label="this.Clear() 723456" />
<Node Id="10354:[3841..3991).1" Label="param Clear(this) 723457" />
<Node Id="10354:[3887..3892).1" Label="_kind 723458" />
<Node Id="10354:[3932..3952).1" Label="_symbolList.Clear(); 723459" />
<Node Id="10354:[3966..3980).1" Label="_error = null; 723460" />
<Node Id="10354:[3966..3972).1" Label="_error 723461" />
<Node Id="10354:[11428..11441).1" Label="this.Clear(); 723462" />
<Node Id="10354:[11455..11538).1" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 723463" />
<Node Id="10354:[11455..11538).2" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 723464" />
<Node Id="10354:[11506..11523).1" Label="_pool.Free(this); 723465" />
<Node Id="10354:[11506..11523).2" Label="_pool.Free(this); 723466" />
<Node Id="10319:[45408..45422).1" Label="result.Free(); 723467" />
<Node Id="10319:[45436..45568).1" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 723468" />
<Node Id="10319:[45505..45551).1" Label="AreNullableAnnotationsEnabled(node.Identifier) 723469" />
<Node Id="10286:[10010..10027).1" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 723470" />
<Node Id="10286:[9966..10197).1" Label="param AreNullableAnnotationsEnabled(this) 723471" />
<Node Id="10286:[10053..10100).1" Label="RoslynDebug.Assert(token.SyntaxTree is object); 723472" />
<Node Id="10286:[10114..10186).1" Label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 723473" />
<Node Id="10286:[10121..10185).1" Label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 723474" />
<Node Id="10286:[9073..9094).1" Label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 723475" />
<Node Id="10286:[9096..9108).1" Label="param AreNullableAnnotationsEnabled(int position) 723476" />
<Node Id="10286:[9029..9954).1" Label="param AreNullableAnnotationsEnabled(this) 723477" />
<Node Id="10286:[9134..9189).1" Label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 723478" />
<Node Id="10286:[9203..9282).1" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 723479" />
<Node Id="10286:[9203..9282).2" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 723480" />
<Node Id="10286:[9305..9942).1" Label="context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            } 723481" />
<Node Id="10286:[9298..9943).1" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 723482" />
<Node Id="10286:[9298..9943).2" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 723483" />
<Node Id="10286:[9798..9837).1" Label="AreNullableAnnotationsGloballyEnabled() 723484" />
<Node Id="10286:[10465..10663).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 723485" />
<Node Id="10286:[10551..10586).1" Label="RoslynDebug.Assert(Next is object); 723486" />
<Node Id="10286:[10607..10651).1" Label="Next.AreNullableAnnotationsGloballyEnabled() 723487" />
<Node Id="10286:[10465..10663).2" Label="param AreNullableAnnotationsGloballyEnabled(this) 723488" />
<Node Id="10325:[4462..4594).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 723489" />
<Node Id="10325:[4556..4582).1" Label="GetGlobalAnnotationState() 723490" />
<Node Id="10286:[10675..11259).1" Label="param GetGlobalAnnotationState(this) 723491" />
<Node Id="10286:[10741..11248).1" Label="switch (Compilation.Options.NullableContextOptions)
            {
                case NullableContextOptions.Enable:
                case NullableContextOptions.Annotations:
                    return true;

                case NullableContextOptions.Disable:
                case NullableContextOptions.Warnings:
                    return false;

                default:
                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);
            } 723492" />
<Node Id="10286:[11085..11098).1" Label="return false; 723493" />
<Node Id="10325:[4549..4583).1" Label="return GetGlobalAnnotationState(); 723494" />
<Node Id="10286:[10600..10652).1" Label="return Next.AreNullableAnnotationsGloballyEnabled(); 723495" />
<Node Id="10319:[45436..45568).4" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 723496" />
<Node Id="10319:[45443..45567).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 723497" />
<Node Id="10287:[2306..2328).1" Label="param CreateUnannotated(bool isNullableEnabled) 723498" />
<Node Id="10287:[2330..2343).1" Label="param CreateUnannotated(Symbol symbol) 723499" />
<Node Id="10287:[2377..2471).1" Label="if (symbol is null)
                {
                    return default;
                } 723500" />
<Node Id="10287:[2489..2521).1" Label="var type = symbol as TypeSymbol; 723501" />
<Node Id="10287:[2539..2781).1" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 723502" />
<Node Id="10287:[2546..2558).1" Label="type is null 723503" />
<Node Id="10287:[2539..2781).2" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 723504" />
<Node Id="10287:[2680..2780).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 723505" />
<Node Id="10287:[718..757).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 723506" />
<Node Id="10287:[666..1076).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 723507" />
<Node Id="10287:[791..833).1" Label="Debug.Assert(typeWithAnnotations.HasType); 723508" />
<Node Id="10287:[851..871).1" Label="_typeWithAnnotations 723509" />
<Node Id="10287:[912..927).1" Label="_symbol = null; 723510" />
<Node Id="10287:[912..919).1" Label="_symbol 723511" />
<Node Id="10287:[945..972).1" Label="_isNullableEnabled = false; 723512" />
<Node Id="10287:[945..963).1" Label="_isNullableEnabled 723513" />
<Node Id="10319:[15383..15396).1" Label="symbol.IsType 723514" />
<Node Id="10287:[1609..1643).1" Label="=$ !_typeWithAnnotations.IsDefault 723515" />
<Node Id="10287:[1612..1643).1" Label="!_typeWithAnnotations.IsDefault 723516" />
<Node Id="10319:[15379..15933).1" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 723517" />
<Node Id="10319:[15548..15561).1" Label="symbol.IsType 723518" />
<Node Id="10319:[15544..15884).1" Label="if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                } 723519" />
<Node Id="10319:[15783..15809).1" Label="symbol.TypeWithAnnotations 723520" />
<Node Id="10287:[1474..1497).1" Label="=$ _typeWithAnnotations 723521" />
<Node Id="10287:[1477..1497).1" Label="_typeWithAnnotations 723522" />
<Node Id="10319:[15783..15865).1" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 723523" />
<Node Id="10319:[15783..15865).2" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 723524" />
<Node Id="10319:[15783..15865).3" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 723525" />
<Node Id="10319:[15783..15865).4" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 723526" />
<Node Id="10319:[15783..15865).6" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 723527" />
<Node Id="10286:[21504..21529).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723528" />
<Node Id="10286:[21531..21544).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 723529" />
<Node Id="10286:[21546..21561).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 723530" />
<Node Id="10286:[21563..21583).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723531" />
<Node Id="10286:[21462..21711).1" Label="param ReportDiagnosticsIfObsolete(this) 723532" />
<Node Id="10286:[21609..21700).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 723533" />
<Node Id="10286:[21609..21700).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 723534" />
<Node Id="10286:[21609..21700).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 723535" />
<Node Id="10286:[21609..21700).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 723536" />
<Node Id="10286:[21609..21699).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 723537" />
<Node Id="10286:[22044..22069).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723538" />
<Node Id="10286:[22071..22084).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 723539" />
<Node Id="10286:[22086..22108).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 723540" />
<Node Id="10286:[22110..22130).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723541" />
<Node Id="10286:[22002..22611).1" Label="param ReportDiagnosticsIfObsolete(this) 723542" />
<Node Id="10286:[22156..22600).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Event:
                case SymbolKind.Property:
                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);
                    break;
            } 723543" />
<Node Id="10286:[22421..22557).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723544" />
<Node Id="10286:[22421..22557).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723545" />
<Node Id="10286:[22421..22557).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723546" />
<Node Id="10286:[22421..22557).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723547" />
<Node Id="10286:[22493..22522).1" Label="this.ContainingMemberOrLambda 723548" />
<Node Id="10307:[1439..1480).1" Label="get { return _containingMemberOrLambda; } 723549" />
<Node Id="10307:[1445..1478).1" Label="return _containingMemberOrLambda; 723550" />
<Node Id="10286:[22421..22557).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723551" />
<Node Id="10286:[22524..22543).1" Label="this.ContainingType 723552" />
<Node Id="10286:[15519..15926).1" Label="get
            {
                var member = this.ContainingMemberOrLambda;
                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);
                return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                };
            } 723553" />
<Node Id="10286:[15568..15597).1" Label="this.ContainingMemberOrLambda 723554" />
<Node Id="10307:[1439..1480).2" Label="get { return _containingMemberOrLambda; } 723555" />
<Node Id="10307:[1445..1478).2" Label="return _containingMemberOrLambda; 723556" />
<Node Id="10286:[15555..15598).1" Label="var member = this.ContainingMemberOrLambda; 723557" />
<Node Id="10286:[15616..15690).1" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 723558" />
<Node Id="10286:[15616..15690).2" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 723559" />
<Node Id="10286:[15715..15910).1" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 723560" />
<Node Id="10286:[15708..15911).1" Label="return member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                }; 723561" />
<Node Id="10286:[22421..22557).7" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723562" />
<Node Id="10286:[22421..22557).9" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723563" />
<Node Id="10286:[22421..22556).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 723564" />
<Node Id="10286:[23056..23081).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723565" />
<Node Id="10286:[23096..23109).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 723566" />
<Node Id="10286:[23124..23146).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 723567" />
<Node Id="10286:[23161..23181).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723568" />
<Node Id="10286:[23196..23220).1" Label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 723569" />
<Node Id="10286:[23235..23266).1" Label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 723570" />
<Node Id="10286:[23281..23301).1" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 723571" />
<Node Id="10286:[23327..23364).1" Label="RoslynDebug.Assert(symbol is object); 723572" />
<Node Id="10286:[23380..23684).1" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 723573" />
<Node Id="10286:[23893..24026).1" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 723574" />
<Node Id="10286:[24450..24529).1" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 723575" />
<Node Id="10286:[24450..24529).2" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 723576" />
<Node Id="10286:[24450..24529).3" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 723577" />
<Node Id="10286:[24545..24641).1" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 723578" />
<Node Id="10286:[24655..25349).1" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 723579" />
<Node Id="10286:[25365..25492).1" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 723580" />
<Node Id="10286:[25365..25492).2" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 723581" />
<Node Id="10286:[25365..25492).3" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 723582" />
<Node Id="10286:[25365..25492).4" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 723583" />
<Node Id="10286:[25365..25492).5" Label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 723584" />
<Node Id="10286:[25386..25491).1" Label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 723585" />
<Node Id="10286:[26910..26935).1" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 723586" />
<Node Id="10286:[26937..26950).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 723587" />
<Node Id="10286:[26952..26974).1" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 723588" />
<Node Id="10286:[26976..27000).1" Label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 723589" />
<Node Id="10286:[27002..27022).1" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 723590" />
<Node Id="10286:[27048..27088).1" Label="RoslynDebug.Assert(diagnostics != null); 723591" />
<Node Id="10286:[27048..27088).2" Label="RoslynDebug.Assert(diagnostics != null); 723592" />
<Node Id="10286:[27104..27192).1" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 723593" />
<Node Id="10286:[27104..27192).2" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 723594" />
<Node Id="10286:[27104..27192).3" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 723595" />
<Node Id="10286:[27104..27192).5" Label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 723596" />
<Node Id="10286:[27208..27236).1" Label="DiagnosticInfo? info = null; 723597" />
<Node Id="10286:[27250..27722).1" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 723598" />
<Node Id="10286:[27738..27845).1" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 723599" />
<Node Id="10286:[27738..27845).2" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 723600" />
<Node Id="10286:[27861..27873).1" Label="return kind; 723601" />
<Node Id="10286:[26281..26812).1" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 723602" />
<Node Id="10286:[26450..26769).1" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 723603" />
<Node Id="10286:[22421..22557).10" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723604" />
<Node Id="10286:[21609..21700).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 723605" />
<Node Id="10319:[15904..15918).1" Label="return symbol; 723606" />
<Node Id="10319:[13962..14050).1" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 723607" />
<Node Id="10319:[13962..14050).2" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 723608" />
<Node Id="10319:[13962..14050).3" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 723609" />
<Node Id="10319:[13962..14050).4" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 723610" />
<Node Id="10319:[13969..14029).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 723611" />
<Node Id="10319:[51762..51815).1" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 723612" />
<Node Id="10319:[51817..51842).1" Label="param UnwrapAlias(DiagnosticBag diagnostics) 723613" />
<Node Id="10319:[51844..51861).1" Label="param UnwrapAlias(SyntaxNode syntax) 723614" />
<Node Id="10319:[51863..51909).1" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 723615" />
<Node Id="10319:[51698..52285).1" Label="param UnwrapAlias(this) 723616" />
<Node Id="10319:[51939..51953).1" Label="symbol.IsAlias 723617" />
<Node Id="10287:[1680..1716).1" Label="=$ _symbol?.Kind == SymbolKind.Alias 723618" />
<Node Id="10287:[1683..1690).1" Label="_symbol 723619" />
<Node Id="10287:[1683..1716).1" Label="_symbol?.Kind == SymbolKind.Alias 723620" />
<Node Id="10319:[51935..52244).1" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 723621" />
<Node Id="10319:[52260..52274).1" Label="return symbol; 723622" />
<Node Id="10319:[13969..14049).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 723623" />
<Node Id="10287:[1474..1497).2" Label="=$ _typeWithAnnotations 723624" />
<Node Id="10287:[1477..1497).2" Label="_typeWithAnnotations 723625" />
<Node Id="25002:[4395..4432).28" Label="var diagnostics = c.GetDiagnostics(); 723626" />
<Node Id="10076:[5223..5250).6" Label="Debug.Assert(node != null); 723627" />
<Node Id="10076:[5277..5448).6" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 723628" />
<Node Id="10077:[31258..31297).2" Label="NodeUsage extraInfo = NodeUsage.Normal; 723629" />
<Node Id="10077:[44231..44317).17" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 723630" />
<Node Id="10077:[44954..44972).2" Label="SyntaxToken token; 723631" />
<Node Id="10077:[44966..44971).34" Label="token 723632" />
<Node Id="10077:[39421..39431).2" Label="syntaxTree 723633" />
<Node Id="10077:[1641..1732).2" Label="get
                {
                    return _factory._syntaxTree;
                } 723634" />
<Node Id="10077:[1685..1713).2" Label="return _factory._syntaxTree; 723635" />
<Node Id="10077:[39398..39590).7" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 723636" />
<Node Id="10077:[39398..39590).8" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 723637" />
<Node Id="10077:[44231..44317).25" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 723638" />
<Node Id="10286:[1317..1350).9" Label="RoslynDebug.Assert(next != null); 723639" />
<Node Id="10376:[691..701).2" Label="_namedType 723640" />
<Node Id="10376:[928..968).5" Label="Debug.Assert((object)container != null); 723641" />
<Node Id="10286:[1688..1781).7" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 723642" />
<Node Id="10298:[471..492).17" Label="param Includes(this BinderFlags self) 723643" />
<Node Id="10286:[1820..1963).7" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 723644" />
<Node Id="10298:[471..492).18" Label="param Includes(this BinderFlags self) 723645" />
<Node Id="10319:[15146..15291).15" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 723646" />
<Node Id="10319:[20095..20126).2" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 723647" />
<Node Id="10319:[20508..20675).12" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 723648" />
<Node Id="10319:[41983..42014).2" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 723649" />
<Node Id="10319:[42478..42805).4" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 723650" />
<Node Id="10319:[42821..42938).9" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 723651" />
<Node Id="10319:[42839..42937).2" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 723652" />
<Node Id="10319:[63849..63870).2" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 723653" />
<Node Id="10319:[63885..63919).2" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 723654" />
<Node Id="10319:[63934..63945).2" Label="param CreateErrorIfLookupOnTypeParameter(string name) 723655" />
<Node Id="10319:[63960..63969).2" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 723656" />
<Node Id="10319:[63984..64009).2" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 723657" />
<Node Id="10319:[63768..64484).2" Label="param CreateErrorIfLookupOnTypeParameter(this) 723658" />
<Node Id="10319:[64035..64445).5" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 723659" />
<Node Id="10319:[64035..64445).6" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 723660" />
<Node Id="10319:[64461..64473).3" Label="return null; 723661" />
<Node Id="10319:[42821..42938).15" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 723662" />
<Node Id="10319:[42952..43079).4" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 723663" />
<Node Id="10319:[42952..43079).5" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 723664" />
<Node Id="10354:[11312..11328).2" Label="instance.IsClear 723665" />
<Node Id="10354:[3684..3818).8" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 723666" />
<Node Id="10354:[3720..3803).53" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723667" />
<Node Id="10354:[3720..3803).54" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723668" />
<Node Id="10354:[3720..3803).55" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723669" />
<Node Id="10354:[11299..11330).4" Label="Debug.Assert(instance.IsClear); 723670" />
<Node Id="10319:[50330..50355).2" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 723671" />
<Node Id="10312:[1108..1117).2" Label="param LookupSymbolsSimpleName(int arity) 723672" />
<Node Id="10312:[1222..1235).2" Label="param LookupSymbolsSimpleName(bool diagnose) 723673" />
<Node Id="10312:[5830..5839).2" Label="param LookupSymbolsOrMembersInternal(int arity) 723674" />
<Node Id="10312:[5944..5957).2" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 723675" />
<Node Id="10312:[3730..3739).2" Label="param LookupSymbolsInternal(int arity) 723676" />
<Node Id="10312:[3805..3818).2" Label="param LookupSymbolsInternal(bool diagnose) 723677" />
<Node Id="10312:[3905..3919).2" Label="result.IsClear 723678" />
<Node Id="10354:[3684..3818).9" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 723679" />
<Node Id="10354:[3720..3803).61" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723680" />
<Node Id="10354:[3720..3803).62" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723681" />
<Node Id="10354:[3720..3803).63" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723682" />
<Node Id="10312:[3892..3921).4" Label="Debug.Assert(result.IsClear); 723683" />
<Node Id="10312:[3935..3968).5" Label="Debug.Assert(options.AreValid()); 723684" />
<Node Id="10312:[3948..3966).2" Label="options.AreValid() 723685" />
<Node Id="10353:[4698..4724).3" Label="param AreValid(this LookupOptions options) 723686" />
<Node Id="10353:[4750..4847).5" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 723687" />
<Node Id="10353:[4863..5000).9" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 723688" />
<Node Id="10353:[4863..5000).10" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 723689" />
<Node Id="10353:[5079..5183).5" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 723690" />
<Node Id="10353:[5197..5323).7" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 723691" />
<Node Id="10353:[5485..5759).13" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 723692" />
<Node Id="10353:[5485..5759).14" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 723693" />
<Node Id="10353:[5485..5759).15" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 723694" />
<Node Id="10353:[5775..5979).9" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 723695" />
<Node Id="10353:[5775..5979).11" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 723696" />
<Node Id="10353:[5995..6029).7" Label="return OnlyOneBitSet(onlyOptions); 723697" />
<Node Id="10353:[6002..6028).3" Label="OnlyOneBitSet(onlyOptions) 723698" />
<Node Id="10353:[6343..6358).3" Label="param OnlyOneBitSet(LookupOptions o) 723699" />
<Node Id="10353:[6384..6410).13" Label="return (o & (o - 1)) == 0; 723700" />
<Node Id="10353:[6384..6410).14" Label="return (o & (o - 1)) == 0; 723701" />
<Node Id="10312:[5188..5207).2" Label="param LookupSymbolsInSingleBinder(LookupResult result) 723702" />
<Node Id="10312:[5209..5220).2" Label="param LookupSymbolsInSingleBinder(string name) 723703" />
<Node Id="10312:[5222..5231).2" Label="param LookupSymbolsInSingleBinder(int arity) 723704" />
<Node Id="10312:[5233..5272).2" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 723705" />
<Node Id="10312:[5274..5295).2" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 723706" />
<Node Id="10312:[5297..5318).2" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 723707" />
<Node Id="10312:[5320..5333).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 723708" />
<Node Id="10312:[5124..5404).2" Label="param LookupSymbolsInSingleBinder(this) 723709" />
<Node Id="10312:[4685..4699).4" Label="result.IsClear 723710" />
<Node Id="10354:[3684..3818).10" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 723711" />
<Node Id="10354:[3720..3803).69" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723712" />
<Node Id="10354:[3720..3803).70" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723713" />
<Node Id="10354:[3720..3803).71" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723714" />
<Node Id="10312:[4680..4787).7" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 723715" />
<Node Id="10312:[4826..5058).16" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 723716" />
<Node Id="10312:[4826..5058).17" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 723717" />
<Node Id="10382:[1340..1359).2" Label="param LookupSymbolsInSingleBinder(LookupResult result) 723718" />
<Node Id="10382:[1374..1383).2" Label="param LookupSymbolsInSingleBinder(int arity) 723719" />
<Node Id="10382:[1385..1424).2" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 723720" />
<Node Id="10382:[1426..1447).2" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 723721" />
<Node Id="10382:[1449..1470).2" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 723722" />
<Node Id="10382:[1472..1485).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 723723" />
<Node Id="10382:[1572..1586).2" Label="result.IsClear 723724" />
<Node Id="10354:[3684..3818).11" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 723725" />
<Node Id="10354:[3720..3803).77" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723726" />
<Node Id="10354:[3720..3803).78" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723727" />
<Node Id="10354:[3720..3803).79" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723728" />
<Node Id="10382:[1559..1588).4" Label="Debug.Assert(result.IsClear); 723729" />
<Node Id="10382:[1619..1629).2" Label="LookupMask 723730" />
<Node Id="10382:[913..1046).2" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 723731" />
<Node Id="10382:[949..1031).3" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 723732" />
<Node Id="10382:[1604..1691).6" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 723733" />
<Node Id="10382:[1604..1691).7" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 723734" />
<Node Id="10382:[1604..1691).8" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 723735" />
<Node Id="10376:[1739..1899).4" Label="foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    } 723736" />
<Node Id="10346:[10663..10672).2" Label="param LookupSymbolsInSingleBinder(int arity) 723737" />
<Node Id="10346:[10761..10774).2" Label="param LookupSymbolsInSingleBinder(bool diagnose) 723738" />
<Node Id="10346:[10861..10875).2" Label="result.IsClear 723739" />
<Node Id="10354:[3684..3818).13" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 723740" />
<Node Id="10354:[3720..3803).93" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723741" />
<Node Id="10354:[3720..3803).94" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723742" />
<Node Id="10354:[3720..3803).95" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723743" />
<Node Id="10346:[10848..10877).4" Label="Debug.Assert(result.IsClear); 723744" />
<Node Id="10346:[10897..10914).2" Label="IsSubmissionClass 723745" />
<Node Id="10346:[7666..7775).2" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 723746" />
<Node Id="10346:[7672..7773).4" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 723747" />
<Node Id="10346:[10893..11127).3" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 723748" />
<Node Id="10346:[3525..3638).10" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 723749" />
<Node Id="10345:[2938..2962).2" Label="param FromSyntax(InContainerBinder binder) 723750" />
<Node Id="10345:[2977..3016).2" Label="param FromSyntax(ConsList$TypeSymbol$ basesBeingResolved) 723751" />
<Node Id="10345:[3069..3118).2" Label="SyntaxList$UsingDirectiveSyntax$ usingDirectives; 723752" />
<Node Id="10345:[3102..3117).8" Label="usingDirectives 723753" />
<Node Id="10345:[3132..3193).2" Label="SyntaxList$ExternAliasDirectiveSyntax$ externAliasDirectives; 723754" />
<Node Id="10345:[3171..3192).8" Label="externAliasDirectives 723755" />
<Node Id="10346:[11369..11508).18" Label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 723756" />
<Node Id="10312:[7718..7727).2" Label="param LookupMembersInternal(int arity) 723757" />
<Node Id="10312:[7729..7768).2" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 723758" />
<Node Id="10312:[7816..7829).2" Label="param LookupMembersInternal(bool diagnose) 723759" />
<Node Id="10312:[7615..8420).2" Label="param LookupMembersInternal(this) 723760" />
<Node Id="10312:[7903..7936).5" Label="Debug.Assert(options.AreValid()); 723761" />
<Node Id="10312:[7916..7934).2" Label="options.AreValid() 723762" />
<Node Id="10353:[4698..4724).4" Label="param AreValid(this LookupOptions options) 723763" />
<Node Id="10353:[4750..4847).7" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 723764" />
<Node Id="10353:[4863..5000).13" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 723765" />
<Node Id="10353:[4863..5000).14" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 723766" />
<Node Id="10353:[5079..5183).7" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 723767" />
<Node Id="10353:[5197..5323).10" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 723768" />
<Node Id="10353:[5485..5759).19" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 723769" />
<Node Id="10353:[5485..5759).20" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 723770" />
<Node Id="10353:[5485..5759).21" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 723771" />
<Node Id="10353:[5775..5979).13" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 723772" />
<Node Id="10353:[5775..5979).15" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 723773" />
<Node Id="10353:[5995..6029).10" Label="return OnlyOneBitSet(onlyOptions); 723774" />
<Node Id="10353:[6002..6028).4" Label="OnlyOneBitSet(onlyOptions) 723775" />
<Node Id="10353:[6343..6358).4" Label="param OnlyOneBitSet(LookupOptions o) 723776" />
<Node Id="10353:[6384..6410).19" Label="return (o & (o - 1)) == 0; 723777" />
<Node Id="10353:[6384..6410).20" Label="return (o & (o - 1)) == 0; 723778" />
<Node Id="10312:[7952..7977).5" Label="Debug.Assert(arity $= 0); 723779" />
<Node Id="10312:[7952..7977).6" Label="Debug.Assert(arity $= 0); 723780" />
<Node Id="10312:[19030..19039).2" Label="param LookupMembersInNamespace(int arity) 723781" />
<Node Id="10312:[19087..19100).2" Label="param LookupMembersInNamespace(bool diagnose) 723782" />
<Node Id="10312:[61608..61629).2" Label="param GetCandidateMembers(Binder originalBinder) 723783" />
<Node Id="10312:[63439..63448).2" Label="param CheckViability(int arity) 723784" />
<Node Id="10312:[63473..63501).2" Label="param CheckViability(TypeSymbol accessThroughType) 723785" />
<Node Id="10312:[63503..63516).2" Label="param CheckViability(bool diagnose) 723786" />
<Node Id="10312:[63566..63612).2" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 723787" />
<Node Id="10312:[63638..63668).2" Label="bool inaccessibleViaQualifier; 723788" />
<Node Id="10312:[63682..63706).2" Label="DiagnosticInfo diagInfo; 723789" />
<Node Id="10312:[64353..69285).10" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723790" />
<Node Id="10312:[64353..69285).12" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723791" />
<Node Id="10312:[80978..80991).2" Label="param WrongArity(Symbol symbol) 723792" />
<Node Id="10312:[80993..81002).2" Label="param WrongArity(int arity) 723793" />
<Node Id="10312:[81004..81017).2" Label="param WrongArity(bool diagnose) 723794" />
<Node Id="10312:[81019..81040).2" Label="param WrongArity(LookupOptions options) 723795" />
<Node Id="10312:[81042..81069).2" Label="param WrongArity(out DiagnosticInfo diagInfo) 723796" />
<Node Id="10312:[81095..84034).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 723797" />
<Node Id="10312:[81196..82523).8" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 723798" />
<Node Id="10312:[81196..82523).9" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 723799" />
<Node Id="10312:[81196..82523).10" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 723800" />
<Node Id="10312:[81196..82523).13" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 723801" />
<Node Id="10312:[81319..81371).2" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 723802" />
<Node Id="10312:[81495..81570).6" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 723803" />
<Node Id="10312:[81495..81570).7" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 723804" />
<Node Id="10312:[81596..82500).7" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 723805" />
<Node Id="10312:[81596..82500).8" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 723806" />
<Node Id="10312:[81628..81659).2" Label="options.IsAttributeTypeLookup() 723807" />
<Node Id="10353:[7504..7530).4" Label="param IsAttributeTypeLookup(this LookupOptions options) 723808" />
<Node Id="10312:[81596..82500).11" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 723809" />
<Node Id="10312:[84050..84066).3" Label="diagInfo = null; 723810" />
<Node Id="10312:[66177..69285).16" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723811" />
<Node Id="10312:[66291..66342).2" Label="RefineAccessThroughType(options, accessThroughType) 723812" />
<Node Id="10312:[75301..75322).2" Label="param RefineAccessThroughType(LookupOptions options) 723813" />
<Node Id="10312:[75324..75352).2" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 723814" />
<Node Id="10312:[75735..75866).6" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 723815" />
<Node Id="10312:[75735..75866).7" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 723816" />
<Node Id="10312:[75742..75804).2" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 723817" />
<Node Id="10312:[75735..75866).9" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 723818" />
<Node Id="10312:[66177..69285).19" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723819" />
<Node Id="10312:[66177..69285).21" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 723820" />
<Node Id="10312:[77543..77571).2" Label="param IsAccessible(TypeSymbol accessThroughType) 723821" />
<Node Id="10312:[77573..77604).2" Label="param IsAccessible(out bool failedThroughTypeCheck) 723822" />
<Node Id="10312:[77654..77700).2" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 723823" />
<Node Id="10312:[77501..78044).2" Label="param IsAccessible(this) 723824" />
<Node Id="10312:[77726..77892).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 723825" />
<Node Id="10312:[77726..77892).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 723826" />
<Node Id="10312:[77730..77782).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 723827" />
<Node Id="10298:[471..492).22" Label="param Includes(this BinderFlags self) 723828" />
<Node Id="10298:[494..511).22" Label="param Includes(BinderFlags other) 723829" />
<Node Id="10312:[78402..78430).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 723830" />
<Node Id="10312:[78432..78463).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 723831" />
<Node Id="10312:[78513..78552).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 723832" />
<Node Id="10312:[78346..78783).2" Label="param IsAccessibleHelper(this) 723833" />
<Node Id="10376:[1085..1113).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 723834" />
<Node Id="10376:[1115..1146).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 723835" />
<Node Id="10376:[1196..1235).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 723836" />
<Node Id="10376:[1028..1425).2" Label="param IsAccessibleHelper(this) 723837" />
<Node Id="10286:[30098..30120).2" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 723838" />
<Node Id="10286:[30135..30160).2" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 723839" />
<Node Id="10286:[30175..30206).2" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 723840" />
<Node Id="10286:[30283..30330).2" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 723841" />
<Node Id="10286:[30012..30691).2" Label="param IsSymbolAccessibleConditional(this) 723842" />
<Node Id="10286:[30356..30522).5" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 723843" />
<Node Id="10286:[30356..30522).6" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 723844" />
<Node Id="10286:[30360..30412).2" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 723845" />
<Node Id="10298:[471..492).23" Label="param Includes(this BinderFlags self) 723846" />
<Node Id="10298:[494..511).23" Label="param Includes(BinderFlags other) 723847" />
<Node Id="10060:[2136..2158).2" Label="param IsSymbolAccessible(NamedTypeSymbol within) 723848" />
<Node Id="10060:[2173..2198).2" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 723849" />
<Node Id="10060:[2213..2244).2" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 723850" />
<Node Id="10060:[2320..2366).2" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 723851" />
<Node Id="10060:[5621..5634).2" Label="param IsSymbolAccessibleCore(Symbol within) 723852" />
<Node Id="10060:[5691..5716).2" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 723853" />
<Node Id="10060:[5731..5762).2" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 723854" />
<Node Id="10060:[5777..5806).2" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 723855" />
<Node Id="10060:[5882..5928).2" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 723856" />
<Node Id="10060:[5954..5991).5" Label="Debug.Assert((object)symbol != null); 723857" />
<Node Id="10060:[6005..6042).5" Label="Debug.Assert((object)within != null); 723858" />
<Node Id="10060:[6005..6042).6" Label="Debug.Assert((object)within != null); 723859" />
<Node Id="10060:[6056..6090).3" Label="Debug.Assert(within.IsDefinition); 723860" />
<Node Id="10060:[6104..6172).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723861" />
<Node Id="10060:[6188..6219).3" Label="failedThroughTypeCheck = false; 723862" />
<Node Id="10060:[10202..10215).2" Label="param IsNamedTypeAccessible(Symbol within) 723863" />
<Node Id="10060:[10265..10311).2" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 723864" />
<Node Id="10060:[10337..10405).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723865" />
<Node Id="10060:[10419..10454).5" Label="Debug.Assert((object)type != null); 723866" />
<Node Id="10060:[10470..10516).2" Label="var compilation = within.DeclaringCompilation; 723867" />
<Node Id="10060:[10532..10544).2" Label="bool unused; 723868" />
<Node Id="10060:[10558..11295).2" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 723869" />
<Node Id="10060:[11990..12013).2" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 723870" />
<Node Id="10060:[12078..12091).2" Label="param IsNonNestedTypeAccessible(Symbol within) 723871" />
<Node Id="10060:[12117..12185).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 723872" />
<Node Id="10060:[12199..12238).5" Label="Debug.Assert((object)assembly != null); 723873" />
<Node Id="10060:[12199..12238).6" Label="Debug.Assert((object)assembly != null); 723874" />
<Node Id="10346:[11710..11746).2" Label="originalBinder.IsSemanticModelBinder 723875" />
<Node Id="10286:[2155..2260).2" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 723876" />
<Node Id="10286:[2191..2245).5" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 723877" />
<Node Id="10286:[2191..2245).6" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 723878" />
<Node Id="10286:[2198..2244).2" Label="this.Flags.Includes(BinderFlags.SemanticModel) 723879" />
<Node Id="10298:[471..492).25" Label="param Includes(this BinderFlags self) 723880" />
<Node Id="10298:[494..511).25" Label="param Includes(BinderFlags other) 723881" />
<Node Id="10345:[28225..28251).2" Label="param IsUsingAlias(bool callerIsSemanticModel) 723882" />
<Node Id="10345:[28927..28940).3" Label="return false; 723883" />
<Node Id="10346:[12205..12212).2" Label="return; 723884" />
<Node Id="10354:[3720..3803).101" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 723885" />
<Node Id="10312:[4680..4787).11" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 723886" />
<Node Id="10312:[4749..4764).2" Label="binder = scope; 723887" />
<Node Id="10312:[5087..5101).2" Label="return binder; 723888" />
<Node Id="10319:[43799..44676).7" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 723889" />
<Node Id="10319:[43853..43873).2" Label="IsViableType(result) 723890" />
<Node Id="10319:[41088..41107).2" Label="param IsViableType(LookupResult result) 723891" />
<Node Id="10319:[41138..41158).2" Label="result.IsMultiViable 723892" />
<Node Id="10354:[4919..5009).13" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 723893" />
<Node Id="10354:[4094..4107).17" Label="return _kind; 723894" />
<Node Id="10319:[41133..41220).3" Label="if (!result.IsMultiViable)
            {
                return false;
            } 723895" />
<Node Id="10319:[41254..41268).2" Label="result.Symbols 723896" />
<Node Id="10354:[4525..4595).3" Label="get
            {
                return _symbolList;
            } 723897" />
<Node Id="10354:[4561..4580).3" Label="return _symbolList; 723898" />
<Node Id="10319:[41236..41680).5" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 723899" />
<Node Id="10319:[41302..41665).2" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 723900" />
<Node Id="10319:[41634..41646).3" Label="return true; 723901" />
<Node Id="10319:[44751..44765).2" Label="bool wasError; 723902" />
<Node Id="10319:[84201..84218).2" Label="param ResultSymbol(string simpleName) 723903" />
<Node Id="10319:[84233..84242).2" Label="param ResultSymbol(int arity) 723904" />
<Node Id="10319:[84257..84273).2" Label="param ResultSymbol(SyntaxNode where) 723905" />
<Node Id="10319:[84288..84313).2" Label="param ResultSymbol(DiagnosticBag diagnostics) 723906" />
<Node Id="10319:[84328..84359).2" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 723907" />
<Node Id="10319:[84374..84391).2" Label="param ResultSymbol(out bool wasError) 723908" />
<Node Id="10319:[84406..84447).2" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 723909" />
<Node Id="10319:[84462..84508).2" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 723910" />
<Node Id="10319:[84124..109887).2" Label="param ResultSymbol(this) 723911" />
<Node Id="10319:[85320..85348).5" Label="Debug.Assert(where != null); 723912" />
<Node Id="10319:[85320..85348).6" Label="Debug.Assert(where != null); 723913" />
<Node Id="10319:[85366..85400).5" Label="Debug.Assert(diagnostics != null); 723914" />
<Node Id="10319:[85366..85400).6" Label="Debug.Assert(diagnostics != null); 723915" />
<Node Id="10319:[85467..85484).3" Label="wasError = false; 723916" />
<Node Id="10319:[104078..104122).2" Label="var singleType = singleResult as TypeSymbol; 723917" />
<Node Id="10319:[104148..106735).7" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 723918" />
<Node Id="10319:[104148..106735).8" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 723919" />
<Node Id="10319:[104148..106735).9" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 723920" />
<Node Id="10319:[104874..105336).4" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 723921" />
<Node Id="10319:[104874..105336).5" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 723922" />
<Node Id="10319:[105368..106708).2" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 723923" />
<Node Id="10319:[105465..105535).1" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 723924" />
<Node Id="10319:[105465..105535).2" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 723925" />
<Node Id="10319:[105465..105535).3" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 723926" />
<Node Id="10319:[105476..105534).1" Label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 723927" />
<Node Id="10319:[76345..76358).1" Label="param ReportUseSiteDiagnostics(Symbol symbol) 723928" />
<Node Id="10319:[76360..76385).1" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 723929" />
<Node Id="10319:[76387..76402).1" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 723930" />
<Node Id="10319:[76428..76480).1" Label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 723931" />
<Node Id="10319:[76494..76582).1" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 723932" />
<Node Id="10319:[76494..76582).2" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 723933" />
<Node Id="10319:[84691..84861).3" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 723934" />
<Node Id="10319:[84764..84846).7" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723935" />
<Node Id="10319:[84764..84846).8" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723936" />
<Node Id="10319:[84764..84846).10" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723937" />
<Node Id="10319:[84764..84846).11" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 723938" />
<Node Id="10319:[84764..84845).2" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 723939" />
<Node Id="10306:[358886..358901).2" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 723940" />
<Node Id="10306:[358903..358930).2" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 723941" />
<Node Id="10306:[358932..358945).2" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 723942" />
<Node Id="10306:[358947..358972).2" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 723943" />
<Node Id="10306:[358838..360009).2" Label="param CheckRuntimeSupportForSymbolAccess(this) 723944" />
<Node Id="10306:[358998..359998).7" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 723945" />
<Node Id="10306:[358998..359998).8" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 723946" />
<Node Id="10319:[44948..45377).3" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 723947" />
<Node Id="10354:[11428..11441).2" Label="this.Clear(); 723948" />
<Node Id="10319:[45408..45422).2" Label="result.Free(); 723949" />
<Node Id="10287:[2377..2471).3" Label="if (symbol is null)
                {
                    return default;
                } 723950" />
<Node Id="10287:[791..833).3" Label="Debug.Assert(typeWithAnnotations.HasType); 723951" />
<Node Id="10287:[912..927).2" Label="_symbol = null; 723952" />
<Node Id="10287:[912..919).2" Label="_symbol 723953" />
<Node Id="10287:[945..972).2" Label="_isNullableEnabled = false; 723954" />
<Node Id="10287:[945..963).2" Label="_isNullableEnabled 723955" />
<Node Id="10286:[21504..21529).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723956" />
<Node Id="10286:[21546..21561).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 723957" />
<Node Id="10286:[21563..21583).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723958" />
<Node Id="10286:[22044..22069).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723959" />
<Node Id="10286:[22086..22108).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 723960" />
<Node Id="10286:[22110..22130).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723961" />
<Node Id="10286:[22421..22557).13" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723962" />
<Node Id="10286:[22421..22557).14" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 723963" />
<Node Id="10286:[15616..15690).6" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 723964" />
<Node Id="10286:[15616..15690).7" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 723965" />
<Node Id="10286:[15715..15910).2" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 723966" />
<Node Id="10286:[23056..23081).2" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 723967" />
<Node Id="10286:[23124..23146).2" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 723968" />
<Node Id="10286:[23161..23181).2" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 723969" />
<Node Id="10286:[23281..23301).2" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 723970" />
<Node Id="10286:[23380..23684).8" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 723971" />
<Node Id="10286:[23893..24026).3" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 723972" />
<Node Id="10286:[24545..24641).3" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 723973" />
<Node Id="10286:[24655..25349).2" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 723974" />
<Node Id="10286:[26910..26935).2" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 723975" />
<Node Id="10286:[26952..26974).2" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 723976" />
<Node Id="10286:[27002..27022).2" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 723977" />
<Node Id="10286:[27048..27088).5" Label="RoslynDebug.Assert(diagnostics != null); 723978" />
<Node Id="10286:[27048..27088).6" Label="RoslynDebug.Assert(diagnostics != null); 723979" />
<Node Id="10286:[27208..27236).3" Label="DiagnosticInfo? info = null; 723980" />
<Node Id="10286:[27250..27722).2" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 723981" />
<Node Id="10286:[27738..27845).4" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 723982" />
<Node Id="10286:[27738..27845).5" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 723983" />
<Node Id="10286:[27861..27873).2" Label="return kind; 723984" />
<Node Id="10286:[26281..26812).2" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 723985" />
<Node Id="10286:[26450..26769).2" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 723986" />
<Node Id="10287:[1680..1716).2" Label="=$ _symbol?.Kind == SymbolKind.Alias 723987" />
<Node Id="10287:[1683..1690).2" Label="_symbol 723988" />
<Node Id="10287:[1683..1716).3" Label="_symbol?.Kind == SymbolKind.Alias 723989" />
<Node Id="10319:[51935..52244).3" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 723990" />
<Node Id="10845:[522..547).1" Label="param TypeConversions(AssemblySymbol corLibrary) 723991" />
<Node Id="10845:[549..580).1" Label="param TypeConversions(bool includeNullability = false) 723992" />
<Node Id="10845:[499..728).1" Label="param TypeConversions(this) 723993" />
<Node Id="10845:[602..612).1" Label="corLibrary 723994" />
<Node Id="10845:[637..638).1" Label="0 723995" />
<Node Id="10845:[660..678).1" Label="includeNullability 723996" />
<Node Id="10845:[701..705).1" Label="null 723997" />
<Node Id="10845:[499..728).2" Label="param TypeConversions(this) 723998" />
<Node Id="10845:[764..789).1" Label="param TypeConversions(AssemblySymbol corLibrary) 723999" />
<Node Id="10845:[791..816).1" Label="param TypeConversions(int currentRecursionDepth) 724000" />
<Node Id="10845:[818..841).1" Label="param TypeConversions(bool includeNullability) 724001" />
<Node Id="10845:[843..878).1" Label="param TypeConversions(TypeConversions otherNullabilityOpt) 724002" />
<Node Id="10845:[740..997).1" Label="param TypeConversions(this) 724003" />
<Node Id="10843:[685..687).1" Label="50 724004" />
<Node Id="10843:[661..687).1" Label="MaximumRecursionDepth = 50 724005" />
<Node Id="10843:[82075..82080).1" Label="false 724006" />
<Node Id="10843:[82071..82080).1" Label="F = false 724007" />
<Node Id="10843:[82114..82118).1" Label="true 724008" />
<Node Id="10843:[82110..82118).1" Label="T = true 724009" />
<Node Id="10843:[82447..82485).1" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 724010" />
<Node Id="10843:[82447..82485).2" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 724011" />
<Node Id="10843:[82447..82485).4" Label="{ F, F, T, F, T, F, T, F, F, T, T, T } 724012" />
<Node Id="10843:[82519..82557).1" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 724013" />
<Node Id="10843:[82519..82557).2" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 724014" />
<Node Id="10843:[82519..82557).4" Label="{ F, F, T, T, T, T, T, T, F, T, T, T } 724015" />
<Node Id="10843:[82591..82629).1" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 724016" />
<Node Id="10843:[82591..82629).2" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 724017" />
<Node Id="10843:[82591..82629).6" Label="{ F, F, F, F, T, F, T, F, F, T, T, T } 724018" />
<Node Id="10843:[82663..82701).1" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 724019" />
<Node Id="10843:[82663..82701).2" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 724020" />
<Node Id="10843:[82663..82701).6" Label="{ F, F, F, F, T, T, T, T, F, T, T, T } 724021" />
<Node Id="10843:[82735..82773).1" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 724022" />
<Node Id="10843:[82735..82773).2" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 724023" />
<Node Id="10843:[82735..82773).8" Label="{ F, F, F, F, F, F, T, F, F, T, T, T } 724024" />
<Node Id="10843:[82807..82845).1" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 724025" />
<Node Id="10843:[82807..82845).2" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 724026" />
<Node Id="10843:[82807..82845).8" Label="{ F, F, F, F, F, F, T, T, F, T, T, T } 724027" />
<Node Id="10843:[82879..82917).1" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724028" />
<Node Id="10843:[82879..82917).2" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724029" />
<Node Id="10843:[82879..82917).11" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724030" />
<Node Id="10843:[82951..82989).1" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724031" />
<Node Id="10843:[82951..82989).2" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724032" />
<Node Id="10843:[82951..82989).11" Label="{ F, F, F, F, F, F, F, F, F, T, T, T } 724033" />
<Node Id="10843:[83023..83061).1" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 724034" />
<Node Id="10843:[83023..83061).2" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 724035" />
<Node Id="10843:[83023..83061).5" Label="{ F, F, F, T, T, T, T, T, F, T, T, T } 724036" />
<Node Id="10843:[83095..83133).1" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 724037" />
<Node Id="10843:[83095..83133).2" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 724038" />
<Node Id="10843:[83095..83133).12" Label="{ F, F, F, F, F, F, F, F, F, F, T, F } 724039" />
<Node Id="10843:[83167..83205).1" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 724040" />
<Node Id="10843:[83167..83205).2" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 724041" />
<Node Id="10843:[83239..83277).1" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 724042" />
<Node Id="10843:[83239..83277).2" Label="{ F, F, F, F, F, F, F, F, F, F, F, F } 724043" />
<Node Id="10843:[82333..83288).1" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724044" />
<Node Id="10843:[82333..83288).2" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724045" />
<Node Id="10843:[82333..83288).3" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724046" />
<Node Id="10843:[82333..83288).4" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724047" />
<Node Id="10843:[82333..83288).5" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724048" />
<Node Id="10843:[82333..83288).6" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724049" />
<Node Id="10843:[82333..83288).7" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724050" />
<Node Id="10843:[82333..83288).8" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724051" />
<Node Id="10843:[82333..83288).9" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724052" />
<Node Id="10843:[82333..83288).10" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724053" />
<Node Id="10843:[82333..83288).11" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724054" />
<Node Id="10843:[82333..83288).12" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724055" />
<Node Id="10843:[82333..83288).13" Label="{
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724056" />
<Node Id="10843:[82293..83288).1" Label="s_implicitNumericConversions =
        {
            // to     sb  b  s  us i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, F, T, F, T, F, T, F, F, T, T, T },
            /*  b */
         { F, F, T, T, T, T, T, T, F, T, T, T },
            /*  s */
         { F, F, F, F, T, F, T, F, F, T, T, T },
            /* us */
         { F, F, F, F, T, T, T, T, F, T, T, T },
            /*  i */
         { F, F, F, F, F, F, T, F, F, T, T, T },
            /* ui */
         { F, F, F, F, F, F, T, T, F, T, T, T },
            /*  l */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /* ul */
         { F, F, F, F, F, F, F, F, F, T, T, T },
            /*  c */
         { F, F, F, T, T, T, T, T, F, T, T, T },
            /*  f */
         { F, F, F, F, F, F, F, F, F, F, T, F },
            /*  d */
         { F, F, F, F, F, F, F, F, F, F, F, F },
            /*  m */
         { F, F, F, F, F, F, F, F, F, F, F, F }
        } 724057" />
<Node Id="10843:[83487..83525).1" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 724058" />
<Node Id="10843:[83487..83525).2" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 724059" />
<Node Id="10843:[83487..83525).3" Label="{ F, T, F, T, F, T, F, T, T, F, F, F } 724060" />
<Node Id="10843:[83559..83597).1" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 724061" />
<Node Id="10843:[83559..83597).2" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 724062" />
<Node Id="10843:[83559..83597).3" Label="{ T, F, F, F, F, F, F, F, T, F, F, F } 724063" />
<Node Id="10843:[83631..83669).1" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 724064" />
<Node Id="10843:[83631..83669).2" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 724065" />
<Node Id="10843:[83631..83669).4" Label="{ T, T, F, T, F, T, F, T, T, F, F, F } 724066" />
<Node Id="10843:[83703..83741).1" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 724067" />
<Node Id="10843:[83703..83741).2" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 724068" />
<Node Id="10843:[83703..83741).5" Label="{ T, T, T, F, F, F, F, F, T, F, F, F } 724069" />
<Node Id="10843:[83775..83813).1" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 724070" />
<Node Id="10843:[83775..83813).2" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 724071" />
<Node Id="10843:[83775..83813).6" Label="{ T, T, T, T, F, T, F, T, T, F, F, F } 724072" />
<Node Id="10843:[83847..83885).1" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 724073" />
<Node Id="10843:[83847..83885).2" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 724074" />
<Node Id="10843:[83847..83885).7" Label="{ T, T, T, T, T, F, F, F, T, F, F, F } 724075" />
<Node Id="10843:[83919..83957).1" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 724076" />
<Node Id="10843:[83919..83957).2" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 724077" />
<Node Id="10843:[83919..83957).8" Label="{ T, T, T, T, T, T, F, T, T, F, F, F } 724078" />
<Node Id="10843:[83991..84029).1" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 724079" />
<Node Id="10843:[83991..84029).2" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 724080" />
<Node Id="10843:[83991..84029).9" Label="{ T, T, T, T, T, T, T, F, T, F, F, F } 724081" />
<Node Id="10843:[84063..84101).1" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 724082" />
<Node Id="10843:[84063..84101).2" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 724083" />
<Node Id="10843:[84063..84101).5" Label="{ T, T, T, F, F, F, F, F, F, F, F, F } 724084" />
<Node Id="10843:[84135..84173).1" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 724085" />
<Node Id="10843:[84135..84173).2" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 724086" />
<Node Id="10843:[84135..84173).11" Label="{ T, T, T, T, T, T, T, T, T, F, F, T } 724087" />
<Node Id="10843:[84207..84245).1" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 724088" />
<Node Id="10843:[84207..84245).2" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 724089" />
<Node Id="10843:[84207..84245).12" Label="{ T, T, T, T, T, T, T, T, T, T, F, T } 724090" />
<Node Id="10843:[84279..84317).1" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 724091" />
<Node Id="10843:[84279..84317).2" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 724092" />
<Node Id="10843:[84279..84317).13" Label="{ T, T, T, T, T, T, T, T, T, T, T, F } 724093" />
<Node Id="10843:[83373..84328).1" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724094" />
<Node Id="10843:[83373..84328).2" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724095" />
<Node Id="10843:[83373..84328).3" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724096" />
<Node Id="10843:[83373..84328).4" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724097" />
<Node Id="10843:[83373..84328).5" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724098" />
<Node Id="10843:[83373..84328).6" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724099" />
<Node Id="10843:[83373..84328).7" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724100" />
<Node Id="10843:[83373..84328).8" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724101" />
<Node Id="10843:[83373..84328).9" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724102" />
<Node Id="10843:[83373..84328).10" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724103" />
<Node Id="10843:[83373..84328).11" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724104" />
<Node Id="10843:[83373..84328).12" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724105" />
<Node Id="10843:[83373..84328).13" Label="{
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724106" />
<Node Id="10843:[83333..84328).1" Label="s_explicitNumericConversions =
        {
            // to     sb  b  s us  i ui  l ul  c  f  d  m
            // from
            /* sb */
         { F, T, F, T, F, T, F, T, T, F, F, F },
            /*  b */
         { T, F, F, F, F, F, F, F, T, F, F, F },
            /*  s */
         { T, T, F, T, F, T, F, T, T, F, F, F },
            /* us */
         { T, T, T, F, F, F, F, F, T, F, F, F },
            /*  i */
         { T, T, T, T, F, T, F, T, T, F, F, F },
            /* ui */
         { T, T, T, T, T, F, F, F, T, F, F, F },
            /*  l */
         { T, T, T, T, T, T, F, T, T, F, F, F },
            /* ul */
         { T, T, T, T, T, T, T, F, T, F, F, F },
            /*  c */
         { T, T, T, F, F, F, F, F, F, F, F, F },
            /*  f */
         { T, T, T, T, T, T, T, T, T, F, F, T },
            /*  d */
         { T, T, T, T, T, T, T, T, T, T, F, T },
            /*  m */
         { T, T, T, T, T, T, T, T, T, T, T, F }
        } 724107" />
<Node Id="10845:[900..910).1" Label="corLibrary 724108" />
<Node Id="10845:[912..933).1" Label="currentRecursionDepth 724109" />
<Node Id="10845:[935..953).1" Label="includeNullability 724110" />
<Node Id="10845:[955..974).1" Label="otherNullabilityOpt 724111" />
<Node Id="10845:[740..997).2" Label="param TypeConversions(this) 724112" />
<Node Id="10843:[1173..1198).1" Label="param ConversionsBase(AssemblySymbol corLibrary) 724113" />
<Node Id="10843:[1200..1225).1" Label="param ConversionsBase(int currentRecursionDepth) 724114" />
<Node Id="10843:[1227..1250).1" Label="param ConversionsBase(bool includeNullability) 724115" />
<Node Id="10843:[1252..1287).1" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 724116" />
<Node Id="10843:[1147..1833).1" Label="param ConversionsBase(this) 724117" />
<Node Id="10843:[734..744).1" Label="corLibrary 724118" />
<Node Id="10843:[778..799).1" Label="currentRecursionDepth 724119" />
<Node Id="10843:[835..853).1" Label="IncludeNullability 724120" />
<Node Id="10843:[1113..1134).1" Label="_lazyOtherNullability 724121" />
<Node Id="10843:[1313..1354).1" Label="Debug.Assert((object)corLibrary != null); 724122" />
<Node Id="10843:[1313..1354).2" Label="Debug.Assert((object)corLibrary != null); 724123" />
<Node Id="10843:[1368..1474).1" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 724124" />
<Node Id="10843:[1368..1474).2" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 724125" />
<Node Id="10843:[1488..1600).1" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 724126" />
<Node Id="10843:[1488..1600).2" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 724127" />
<Node Id="10843:[1616..1631).1" Label="this.corLibrary 724128" />
<Node Id="10843:[1659..1685).1" Label="this.currentRecursionDepth 724129" />
<Node Id="10843:[1724..1742).1" Label="IncludeNullability 724130" />
<Node Id="10843:[1778..1799).1" Label="_lazyOtherNullability 724131" />
<Node Id="25002:[4395..4432).40" Label="var diagnostics = c.GetDiagnostics(); 724132" />
<Node Id="10076:[5223..5250).10" Label="Debug.Assert(node != null); 724133" />
<Node Id="10076:[5277..5448).10" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 724134" />
<Node Id="10077:[31258..31297).3" Label="NodeUsage extraInfo = NodeUsage.Normal; 724135" />
<Node Id="10077:[31842..31894).1" Label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 724136" />
<Node Id="10077:[44231..44317).33" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 724137" />
<Node Id="10077:[44954..44972).3" Label="SyntaxToken token; 724138" />
<Node Id="10077:[44966..44971).67" Label="token 724139" />
<Node Id="10077:[39421..39431).3" Label="syntaxTree 724140" />
<Node Id="10077:[1641..1732).3" Label="get
                {
                    return _factory._syntaxTree;
                } 724141" />
<Node Id="10077:[1685..1713).3" Label="return _factory._syntaxTree; 724142" />
<Node Id="10077:[39398..39590).13" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 724143" />
<Node Id="10077:[39398..39590).14" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 724144" />
<Node Id="10077:[44231..44317).41" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 724145" />
<Node Id="10077:[33969..34032).1" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 724146" />
<Node Id="10077:[33984..34031).1" Label="new InContainerBinder(typeSymbol, resultBinder) 724147" />
<Node Id="10346:[2571..2602).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 724148" />
<Node Id="10346:[2604..2615).1" Label="param InContainerBinder(Binder next) 724149" />
<Node Id="10346:[2617..2639).1" Label="param InContainerBinder(Imports imports = null) 724150" />
<Node Id="10346:[2544..2854).1" Label="param InContainerBinder(this) 724151" />
<Node Id="10346:[2661..2665).1" Label="next 724152" />
<Node Id="10346:[2544..2854).2" Label="param InContainerBinder(this) 724153" />
<Node Id="10286:[1247..1258).4" Label="param Binder(Binder next) 724154" />
<Node Id="10286:[1317..1350).13" Label="RoslynDebug.Assert(next != null); 724155" />
<Node Id="10286:[1317..1350).14" Label="RoslynDebug.Assert(next != null); 724156" />
<Node Id="10346:[858..868).2" Label="_container 724157" />
<Node Id="10346:[932..947).2" Label="_computeImports 724158" />
<Node Id="10346:[2691..2750).1" Label="Debug.Assert((object)container != null || imports != null); 724159" />
<Node Id="10346:[2691..2750).2" Label="Debug.Assert((object)container != null || imports != null); 724160" />
<Node Id="10346:[2766..2776).1" Label="_container 724161" />
<Node Id="10346:[2803..2843).1" Label="_lazyImports = imports ?? Imports.Empty; 724162" />
<Node Id="10346:[2803..2843).2" Label="_lazyImports = imports ?? Imports.Empty; 724163" />
<Node Id="10346:[2803..2815).1" Label="_lazyImports 724164" />
<Node Id="10077:[34064..34272).1" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 724165" />
<Node Id="10077:[34444..34482).20" Label="binderCache.TryAdd(key, resultBinder); 724166" />
<Node Id="10307:[2552..2569).1" Label="param WithAdditionalFlags(BinderFlags flags) 724167" />
<Node Id="10307:[2516..2720).1" Label="param WithAdditionalFlags(this) 724168" />
<Node Id="10307:[2595..2709).1" Label="return this.Flags.Includes(flags)
                ? this
                : new Binder(this, this.Flags | flags); 724169" />
<Node Id="10307:[2595..2709).2" Label="return this.Flags.Includes(flags)
                ? this
                : new Binder(this, this.Flags | flags); 724170" />
<Node Id="10307:[2602..2628).1" Label="this.Flags.Includes(flags) 724171" />
<Node Id="10298:[471..492).27" Label="param Includes(this BinderFlags self) 724172" />
<Node Id="10298:[494..511).27" Label="param Includes(BinderFlags other) 724173" />
<Node Id="10298:[537..568).79" Label="return (self & other) == other; 724174" />
<Node Id="10307:[2672..2708).1" Label="new Binder(this, this.Flags | flags) 724175" />
<Node Id="10286:[1605..1638).9" Label="RoslynDebug.Assert(next != null); 724176" />
<Node Id="10286:[1688..1781).13" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 724177" />
<Node Id="10286:[1688..1781).14" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 724178" />
<Node Id="10286:[1708..1779).3" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 724179" />
<Node Id="10298:[471..492).28" Label="param Includes(this BinderFlags self) 724180" />
<Node Id="10298:[494..511).28" Label="param Includes(BinderFlags other) 724181" />
<Node Id="10286:[1820..1963).13" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 724182" />
<Node Id="10286:[1820..1963).14" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 724183" />
<Node Id="10286:[1840..1888).3" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 724184" />
<Node Id="10298:[471..492).29" Label="param Includes(this BinderFlags self) 724185" />
<Node Id="10298:[494..511).29" Label="param Includes(BinderFlags other) 724186" />
<Node Id="10319:[42478..42805).7" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 724187" />
<Node Id="10319:[42821..42938).17" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 724188" />
<Node Id="10319:[42839..42937).3" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 724189" />
<Node Id="10319:[63849..63870).3" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 724190" />
<Node Id="10319:[63885..63919).3" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 724191" />
<Node Id="10319:[63934..63945).3" Label="param CreateErrorIfLookupOnTypeParameter(string name) 724192" />
<Node Id="10319:[63960..63969).3" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 724193" />
<Node Id="10319:[63984..64009).3" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 724194" />
<Node Id="10319:[63768..64484).3" Label="param CreateErrorIfLookupOnTypeParameter(this) 724195" />
<Node Id="10319:[64035..64445).9" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 724196" />
<Node Id="10319:[64035..64445).10" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 724197" />
<Node Id="10319:[64461..64473).5" Label="return null; 724198" />
<Node Id="10319:[42821..42938).23" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 724199" />
<Node Id="10319:[42952..43079).7" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 724200" />
<Node Id="10319:[42952..43079).8" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 724201" />
<Node Id="10354:[11312..11328).3" Label="instance.IsClear 724202" />
<Node Id="10354:[3684..3818).15" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 724203" />
<Node Id="10354:[3720..3803).105" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724204" />
<Node Id="10354:[3720..3803).106" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724205" />
<Node Id="10354:[3720..3803).107" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724206" />
<Node Id="10354:[11299..11330).7" Label="Debug.Assert(instance.IsClear); 724207" />
<Node Id="10319:[50330..50355).3" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 724208" />
<Node Id="10312:[1222..1235).3" Label="param LookupSymbolsSimpleName(bool diagnose) 724209" />
<Node Id="10312:[5944..5957).3" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 724210" />
<Node Id="10312:[3805..3818).3" Label="param LookupSymbolsInternal(bool diagnose) 724211" />
<Node Id="10312:[3905..3919).3" Label="result.IsClear 724212" />
<Node Id="10354:[3684..3818).16" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 724213" />
<Node Id="10354:[3720..3803).113" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724214" />
<Node Id="10354:[3720..3803).114" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724215" />
<Node Id="10354:[3720..3803).115" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724216" />
<Node Id="10312:[3892..3921).7" Label="Debug.Assert(result.IsClear); 724217" />
<Node Id="10312:[3935..3968).9" Label="Debug.Assert(options.AreValid()); 724218" />
<Node Id="10312:[3948..3966).3" Label="options.AreValid() 724219" />
<Node Id="10353:[4698..4724).5" Label="param AreValid(this LookupOptions options) 724220" />
<Node Id="10353:[4750..4847).9" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 724221" />
<Node Id="10353:[4863..5000).17" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 724222" />
<Node Id="10353:[4863..5000).18" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 724223" />
<Node Id="10353:[5079..5183).9" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 724224" />
<Node Id="10353:[5197..5323).13" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 724225" />
<Node Id="10353:[5485..5759).25" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724226" />
<Node Id="10353:[5485..5759).26" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724227" />
<Node Id="10353:[5485..5759).27" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724228" />
<Node Id="10353:[5775..5979).17" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 724229" />
<Node Id="10353:[5775..5979).19" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 724230" />
<Node Id="10353:[5995..6029).13" Label="return OnlyOneBitSet(onlyOptions); 724231" />
<Node Id="10353:[6002..6028).5" Label="OnlyOneBitSet(onlyOptions) 724232" />
<Node Id="10353:[6343..6358).5" Label="param OnlyOneBitSet(LookupOptions o) 724233" />
<Node Id="10353:[6384..6410).25" Label="return (o & (o - 1)) == 0; 724234" />
<Node Id="10353:[6384..6410).26" Label="return (o & (o - 1)) == 0; 724235" />
<Node Id="10312:[5188..5207).3" Label="param LookupSymbolsInSingleBinder(LookupResult result) 724236" />
<Node Id="10312:[5209..5220).3" Label="param LookupSymbolsInSingleBinder(string name) 724237" />
<Node Id="10312:[5222..5231).3" Label="param LookupSymbolsInSingleBinder(int arity) 724238" />
<Node Id="10312:[5233..5272).3" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 724239" />
<Node Id="10312:[5274..5295).3" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 724240" />
<Node Id="10312:[5297..5318).3" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 724241" />
<Node Id="10312:[5320..5333).3" Label="param LookupSymbolsInSingleBinder(bool diagnose) 724242" />
<Node Id="10312:[5124..5404).3" Label="param LookupSymbolsInSingleBinder(this) 724243" />
<Node Id="10312:[4685..4699).7" Label="result.IsClear 724244" />
<Node Id="10354:[3684..3818).17" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 724245" />
<Node Id="10354:[3720..3803).121" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724246" />
<Node Id="10354:[3720..3803).122" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724247" />
<Node Id="10354:[3720..3803).123" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724248" />
<Node Id="10312:[4680..4787).13" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 724249" />
<Node Id="10312:[4826..5058).31" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 724250" />
<Node Id="10312:[4826..5058).32" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 724251" />
<Node Id="10346:[10761..10774).3" Label="param LookupSymbolsInSingleBinder(bool diagnose) 724252" />
<Node Id="10346:[10861..10875).3" Label="result.IsClear 724253" />
<Node Id="10354:[3684..3818).18" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 724254" />
<Node Id="10354:[3720..3803).129" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724255" />
<Node Id="10354:[3720..3803).130" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724256" />
<Node Id="10354:[3720..3803).131" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724257" />
<Node Id="10346:[10848..10877).7" Label="Debug.Assert(result.IsClear); 724258" />
<Node Id="10346:[10897..10914).3" Label="IsSubmissionClass 724259" />
<Node Id="10346:[7666..7775).3" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 724260" />
<Node Id="10346:[7672..7773).7" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 724261" />
<Node Id="10346:[10893..11127).5" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 724262" />
<Node Id="10346:[3525..3638).19" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 724263" />
<Node Id="10312:[7729..7768).3" Label="param LookupMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 724264" />
<Node Id="10312:[7816..7829).3" Label="param LookupMembersInternal(bool diagnose) 724265" />
<Node Id="10312:[7615..8420).3" Label="param LookupMembersInternal(this) 724266" />
<Node Id="10312:[7903..7936).9" Label="Debug.Assert(options.AreValid()); 724267" />
<Node Id="10312:[7916..7934).3" Label="options.AreValid() 724268" />
<Node Id="10353:[4698..4724).6" Label="param AreValid(this LookupOptions options) 724269" />
<Node Id="10353:[4750..4847).11" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 724270" />
<Node Id="10353:[4863..5000).21" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 724271" />
<Node Id="10353:[4863..5000).22" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 724272" />
<Node Id="10353:[5079..5183).11" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 724273" />
<Node Id="10353:[5197..5323).16" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 724274" />
<Node Id="10353:[5485..5759).31" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724275" />
<Node Id="10353:[5485..5759).32" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724276" />
<Node Id="10353:[5485..5759).33" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724277" />
<Node Id="10353:[5775..5979).21" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 724278" />
<Node Id="10353:[5775..5979).23" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 724279" />
<Node Id="10353:[5995..6029).16" Label="return OnlyOneBitSet(onlyOptions); 724280" />
<Node Id="10353:[6002..6028).6" Label="OnlyOneBitSet(onlyOptions) 724281" />
<Node Id="10353:[6343..6358).6" Label="param OnlyOneBitSet(LookupOptions o) 724282" />
<Node Id="10353:[6384..6410).31" Label="return (o & (o - 1)) == 0; 724283" />
<Node Id="10353:[6384..6410).32" Label="return (o & (o - 1)) == 0; 724284" />
<Node Id="10312:[7952..7977).9" Label="Debug.Assert(arity $= 0); 724285" />
<Node Id="10312:[8247..8394).1" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724286" />
<Node Id="10312:[8247..8394).5" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724287" />
<Node Id="10312:[8247..8394).8" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724288" />
<Node Id="10312:[8247..8394).9" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724289" />
<Node Id="10312:[8247..8393).1" Label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 724290" />
<Node Id="10312:[8543..8562).1" Label="param LookupMembersInType(LookupResult result) 724291" />
<Node Id="10312:[8564..8579).1" Label="param LookupMembersInType(TypeSymbol type) 724292" />
<Node Id="10312:[8581..8592).1" Label="param LookupMembersInType(string name) 724293" />
<Node Id="10312:[8594..8603).1" Label="param LookupMembersInType(int arity) 724294" />
<Node Id="10312:[8605..8644).1" Label="param LookupMembersInType(ConsList$TypeSymbol$ basesBeingResolved) 724295" />
<Node Id="10312:[8646..8667).1" Label="param LookupMembersInType(LookupOptions options) 724296" />
<Node Id="10312:[8669..8690).1" Label="param LookupMembersInType(Binder originalBinder) 724297" />
<Node Id="10312:[8692..8705).1" Label="param LookupMembersInType(bool diagnose) 724298" />
<Node Id="10312:[8707..8753).1" Label="param LookupMembersInType(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 724299" />
<Node Id="10312:[8508..10685).1" Label="param LookupMembersInType(this) 724300" />
<Node Id="10312:[8779..10524).1" Label="switch (type.TypeKind)
            {
                case TypeKind.TypeParameter:
                    this.LookupMembersInTypeParameter(result, (TypeParameterSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Interface:
                    this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Class:
                case TypeKind.Struct:
                case TypeKind.Enum:
                case TypeKind.Delegate:
                case TypeKind.Array:
                case TypeKind.Dynamic:
                    this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Submission:
                    this.LookupMembersInSubmissions(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Error:
                    LookupMembersInErrorType(result, (ErrorTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                    break;

                case TypeKind.Pointer:
                case TypeKind.FunctionPointer:
                    result.Clear();
                    break;

                case TypeKind.Unknown:
                default:
                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);
            } 724301" />
<Node Id="10312:[9577..9709).1" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724302" />
<Node Id="10312:[9577..9709).2" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724303" />
<Node Id="10312:[9577..9709).3" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724304" />
<Node Id="10312:[9577..9709).4" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724305" />
<Node Id="10312:[9577..9709).5" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724306" />
<Node Id="10312:[9577..9709).6" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724307" />
<Node Id="10312:[9577..9709).7" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724308" />
<Node Id="10312:[9577..9709).8" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724309" />
<Node Id="10312:[9577..9709).9" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724310" />
<Node Id="10312:[9577..9708).1" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 724311" />
<Node Id="10312:[34707..34726).1" Label="param LookupMembersInClass(LookupResult result) 724312" />
<Node Id="10312:[34741..34756).1" Label="param LookupMembersInClass(TypeSymbol type) 724313" />
<Node Id="10312:[34771..34782).1" Label="param LookupMembersInClass(string name) 724314" />
<Node Id="10312:[34797..34806).1" Label="param LookupMembersInClass(int arity) 724315" />
<Node Id="10312:[34821..34860).1" Label="param LookupMembersInClass(ConsList$TypeSymbol$ basesBeingResolved) 724316" />
<Node Id="10312:[34875..34896).1" Label="param LookupMembersInClass(LookupOptions options) 724317" />
<Node Id="10312:[34911..34932).1" Label="param LookupMembersInClass(Binder originalBinder) 724318" />
<Node Id="10312:[34947..34960).1" Label="param LookupMembersInClass(bool diagnose) 724319" />
<Node Id="10312:[34975..35021).1" Label="param LookupMembersInClass(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 724320" />
<Node Id="10312:[34659..35191).1" Label="param LookupMembersInClass(this) 724321" />
<Node Id="10312:[35047..35180).1" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724322" />
<Node Id="10312:[35047..35180).2" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724323" />
<Node Id="10312:[35047..35180).3" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724324" />
<Node Id="10312:[35047..35180).4" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724325" />
<Node Id="10312:[35047..35180).5" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724326" />
<Node Id="10312:[35047..35180).6" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724327" />
<Node Id="10312:[35047..35180).7" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724328" />
<Node Id="10312:[35047..35180).9" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724329" />
<Node Id="10312:[35047..35180).10" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724330" />
<Node Id="10312:[35047..35179).1" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 724331" />
<Node Id="10312:[35313..35332).1" Label="param LookupMembersInClass(LookupResult result) 724332" />
<Node Id="10312:[35347..35362).1" Label="param LookupMembersInClass(TypeSymbol type) 724333" />
<Node Id="10312:[35377..35388).1" Label="param LookupMembersInClass(string name) 724334" />
<Node Id="10312:[35403..35412).1" Label="param LookupMembersInClass(int arity) 724335" />
<Node Id="10312:[35427..35466).1" Label="param LookupMembersInClass(ConsList$TypeSymbol$ basesBeingResolved) 724336" />
<Node Id="10312:[35481..35502).1" Label="param LookupMembersInClass(LookupOptions options) 724337" />
<Node Id="10312:[35517..35538).1" Label="param LookupMembersInClass(Binder originalBinder) 724338" />
<Node Id="10312:[35553..35581).1" Label="param LookupMembersInClass(TypeSymbol accessThroughType) 724339" />
<Node Id="10312:[35596..35609).1" Label="param LookupMembersInClass(bool diagnose) 724340" />
<Node Id="10312:[35624..35670).1" Label="param LookupMembersInClass(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 724341" />
<Node Id="10312:[35265..38808).1" Label="param LookupMembersInClass(this) 724342" />
<Node Id="10312:[35696..35731).1" Label="Debug.Assert((object)type != null); 724343" />
<Node Id="10312:[35696..35731).2" Label="Debug.Assert((object)type != null); 724344" />
<Node Id="10312:[35745..35826).1" Label="Debug.Assert(!type.IsInterfaceType() && type.TypeKind != TypeKind.TypeParameter); 724345" />
<Node Id="10312:[35842..35872).1" Label="TypeSymbol currentType = type; 724346" />
<Node Id="10312:[35898..35924).1" Label="LookupResult.GetInstance() 724347" />
<Node Id="10354:[11244..11285).11" Label="var instance = s_poolInstance.Allocate(); 724348" />
<Node Id="10354:[11312..11328).4" Label="instance.IsClear 724349" />
<Node Id="10354:[3684..3818).19" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 724350" />
<Node Id="10354:[3720..3803).137" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724351" />
<Node Id="10354:[3720..3803).138" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724352" />
<Node Id="10354:[3720..3803).139" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724353" />
<Node Id="10354:[11299..11330).10" Label="Debug.Assert(instance.IsClear); 724354" />
<Node Id="10312:[35888..35925).1" Label="var tmp = LookupResult.GetInstance(); 724355" />
<Node Id="10312:[35939..35985).1" Label="PooledHashSet$NamedTypeSymbol$ visited = null; 724356" />
<Node Id="10312:[35999..38740).1" Label="while ((object)currentType != null)
            {
                tmp.Clear();
                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);

                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);

                // If the type is from a winmd and implements any of the special WinRT collection
                // projections then we may need to add underlying interface members. 
                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;
                if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                }

                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes
                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);

                // short circuit looking up bases if we already have a viable result and we won't be adding on more
                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                }

                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                }

                // As in dev11, we don't consider inherited members within crefs.
                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,
                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.
                if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                }

                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);
                if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                }
            } 724357" />
<Node Id="10312:[35999..38740).2" Label="while ((object)currentType != null)
            {
                tmp.Clear();
                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);

                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);

                // If the type is from a winmd and implements any of the special WinRT collection
                // projections then we may need to add underlying interface members. 
                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;
                if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                }

                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes
                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);

                // short circuit looking up bases if we already have a viable result and we won't be adding on more
                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                }

                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                }

                // As in dev11, we don't consider inherited members within crefs.
                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,
                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.
                if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                }

                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);
                if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                }
            } 724358" />
<Node Id="10312:[36067..36078).1" Label="tmp.Clear() 724359" />
<Node Id="10354:[3841..3991).3" Label="param Clear(this) 724360" />
<Node Id="10312:[36067..36079).1" Label="tmp.Clear(); 724361" />
<Node Id="10312:[36097..36258).1" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724362" />
<Node Id="10312:[36097..36258).2" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724363" />
<Node Id="10312:[36097..36258).3" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724364" />
<Node Id="10312:[36097..36258).4" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724365" />
<Node Id="10312:[36097..36258).5" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724366" />
<Node Id="10312:[36097..36258).6" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724367" />
<Node Id="10312:[36097..36258).7" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724368" />
<Node Id="10312:[36097..36258).8" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724369" />
<Node Id="10312:[36097..36258).9" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724370" />
<Node Id="10312:[36097..36258).10" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724371" />
<Node Id="10312:[36097..36257).1" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 724372" />
<Node Id="10312:[33656..33675).1" Label="param LookupMembersWithoutInheritance(LookupResult result) 724373" />
<Node Id="10312:[33677..33692).1" Label="param LookupMembersWithoutInheritance(TypeSymbol type) 724374" />
<Node Id="10312:[33694..33705).1" Label="param LookupMembersWithoutInheritance(string name) 724375" />
<Node Id="10312:[33707..33716).1" Label="param LookupMembersWithoutInheritance(int arity) 724376" />
<Node Id="10312:[33731..33752).1" Label="param LookupMembersWithoutInheritance(LookupOptions options) 724377" />
<Node Id="10312:[33754..33775).1" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 724378" />
<Node Id="10312:[33777..33805).1" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 724379" />
<Node Id="10312:[33807..33820).1" Label="param LookupMembersWithoutInheritance(bool diagnose) 724380" />
<Node Id="10312:[33822..33868).1" Label="param LookupMembersWithoutInheritance(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 724381" />
<Node Id="10312:[33870..33909).1" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 724382" />
<Node Id="10312:[33935..34006).1" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 724383" />
<Node Id="10312:[33935..34006).2" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 724384" />
<Node Id="10312:[33935..34006).3" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 724385" />
<Node Id="10312:[33935..34006).4" Label="var members = GetCandidateMembers(type, name, options, originalBinder); 724386" />
<Node Id="10312:[33949..34005).1" Label="GetCandidateMembers(type, name, options, originalBinder) 724387" />
<Node Id="10312:[61540..61570).3" Label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 724388" />
<Node Id="10312:[61572..61583).3" Label="param GetCandidateMembers(string name) 724389" />
<Node Id="10312:[61585..61606).3" Label="param GetCandidateMembers(LookupOptions options) 724390" />
<Node Id="10312:[61608..61629).3" Label="param GetCandidateMembers(Binder originalBinder) 724391" />
<Node Id="10312:[61655..62327).14" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)
            {
                return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$();
            }
            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)
            {
                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return ImmutableArray$Symbol$.Empty;
            }
            else
            {
                return nsOrType.GetMembers(name);
            } 724392" />
<Node Id="10312:[61771..61840).1" Label="return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$(); 724393" />
<Node Id="10312:[61771..61840).2" Label="return nsOrType.GetTypeMembers(name).Cast$NamedTypeSymbol, Symbol$(); 724394" />
<Node Id="10312:[34022..34574).1" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 724395" />
<Node Id="10312:[36097..36258).11" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724396" />
<Node Id="10312:[36278..36360).1" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724397" />
<Node Id="10312:[36278..36360).2" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724398" />
<Node Id="10312:[36278..36360).3" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724399" />
<Node Id="10312:[36278..36360).4" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724400" />
<Node Id="10312:[36278..36360).5" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724401" />
<Node Id="10312:[36278..36360).6" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724402" />
<Node Id="10354:[9012..9030).1" Label="param MergePrioritized(LookupResult other) 724403" />
<Node Id="10354:[8981..9152).1" Label="param MergePrioritized(this) 724404" />
<Node Id="10354:[9060..9070).1" Label="other.Kind 724405" />
<Node Id="10354:[4058..4122).22" Label="get
            {
                return _kind;
            } 724406" />
<Node Id="10354:[9056..9141).1" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 724407" />
<Node Id="10354:[9073..9077).1" Label="Kind 724408" />
<Node Id="10354:[4058..4122).23" Label="get
            {
                return _kind;
            } 724409" />
<Node Id="10354:[9056..9141).2" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 724410" />
<Node Id="10354:[9056..9141).3" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 724411" />
<Node Id="10312:[36566..36625).1" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 724412" />
<Node Id="10312:[36643..36855).1" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 724413" />
<Node Id="10312:[36643..36855).2" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 724414" />
<Node Id="10312:[37061..37078).1" Label="tmp.IsMultiViable 724415" />
<Node Id="10354:[4919..5009).18" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 724416" />
<Node Id="10354:[4094..4107).24" Label="return _kind; 724417" />
<Node Id="10312:[37029..37117).1" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 724418" />
<Node Id="10312:[37258..37278).1" Label="result.IsMultiViable 724419" />
<Node Id="10354:[4919..5009).19" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 724420" />
<Node Id="10354:[4094..4107).25" Label="return _kind; 724421" />
<Node Id="10312:[37254..37416).1" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 724422" />
<Node Id="10312:[37436..37988).1" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 724423" />
<Node Id="10312:[37436..37988).2" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 724424" />
<Node Id="10312:[38290..38338).1" Label="originalBinder.InCrefButNotParameterOrReturnType 724425" />
<Node Id="10306:[3345..3430).1" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 724426" />
<Node Id="10306:[3358..3364).1" Label="InCref 724427" />
<Node Id="10306:[3196..3249).9" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 724428" />
<Node Id="10306:[3202..3247).33" Label="return this.Flags.Includes(BinderFlags.Cref); 724429" />
<Node Id="10306:[3351..3428).1" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 724430" />
<Node Id="10312:[38286..38405).1" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 724431" />
<Node Id="10312:[38425..38538).1" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 724432" />
<Node Id="10312:[38425..38538).2" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 724433" />
<Node Id="10312:[38425..38538).3" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 724434" />
<Node Id="10312:[38425..38538).4" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 724435" />
<Node Id="10312:[38425..38538).5" Label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 724436" />
<Node Id="10312:[38556..38725).1" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 724437" />
<Node Id="10312:[38556..38725).2" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 724438" />
<Node Id="10312:[38629..38706).1" Label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 724439" />
<Node Id="10312:[38629..38706).2" Label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 724440" />
<Node Id="10312:[36067..36079).2" Label="tmp.Clear(); 724441" />
<Node Id="10312:[36097..36258).15" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724442" />
<Node Id="10312:[36097..36258).17" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724443" />
<Node Id="10312:[36097..36258).18" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724444" />
<Node Id="10312:[36097..36258).19" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724445" />
<Node Id="10312:[33656..33675).2" Label="param LookupMembersWithoutInheritance(LookupResult result) 724446" />
<Node Id="10312:[33707..33716).2" Label="param LookupMembersWithoutInheritance(int arity) 724447" />
<Node Id="10312:[33754..33775).2" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 724448" />
<Node Id="10312:[33777..33805).2" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 724449" />
<Node Id="10312:[33807..33820).2" Label="param LookupMembersWithoutInheritance(bool diagnose) 724450" />
<Node Id="10312:[33870..33909).2" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 724451" />
<Node Id="10312:[61608..61629).4" Label="param GetCandidateMembers(Binder originalBinder) 724452" />
<Node Id="10312:[34022..34574).4" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 724453" />
<Node Id="10354:[9012..9030).2" Label="param MergePrioritized(LookupResult other) 724454" />
<Node Id="10354:[8981..9152).2" Label="param MergePrioritized(this) 724455" />
<Node Id="10354:[9060..9070).2" Label="other.Kind 724456" />
<Node Id="10354:[4058..4122).27" Label="get
            {
                return _kind;
            } 724457" />
<Node Id="10354:[9056..9141).5" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 724458" />
<Node Id="10354:[9073..9077).2" Label="Kind 724459" />
<Node Id="10354:[4058..4122).28" Label="get
            {
                return _kind;
            } 724460" />
<Node Id="10354:[9056..9141).6" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 724461" />
<Node Id="10354:[9056..9141).7" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 724462" />
<Node Id="10312:[36566..36625).2" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 724463" />
<Node Id="10312:[36643..36855).4" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 724464" />
<Node Id="10312:[36643..36855).5" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 724465" />
<Node Id="10312:[37061..37078).2" Label="tmp.IsMultiViable 724466" />
<Node Id="10354:[4094..4107).29" Label="return _kind; 724467" />
<Node Id="10312:[37029..37117).4" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 724468" />
<Node Id="10312:[37258..37278).2" Label="result.IsMultiViable 724469" />
<Node Id="10354:[4094..4107).30" Label="return _kind; 724470" />
<Node Id="10312:[37254..37416).4" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 724471" />
<Node Id="10312:[37436..37988).5" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 724472" />
<Node Id="10312:[38290..38338).2" Label="originalBinder.InCrefButNotParameterOrReturnType 724473" />
<Node Id="10306:[3345..3430).2" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 724474" />
<Node Id="10306:[3358..3364).2" Label="InCref 724475" />
<Node Id="10306:[3196..3249).10" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 724476" />
<Node Id="10306:[3202..3247).37" Label="return this.Flags.Includes(BinderFlags.Cref); 724477" />
<Node Id="10306:[3351..3428).4" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 724478" />
<Node Id="10312:[38286..38405).3" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 724479" />
<Node Id="10312:[38556..38725).4" Label="if ((object)currentType != null)
                {
                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);
                } 724480" />
<Node Id="10312:[38756..38772).1" Label="visited?.Free(); 724481" />
<Node Id="10312:[38786..38796).1" Label="tmp.Free() 724482" />
<Node Id="10354:[11383..11549).3" Label="param Free(this) 724483" />
<Node Id="10354:[3932..3952).5" Label="_symbolList.Clear(); 724484" />
<Node Id="10354:[11428..11441).3" Label="this.Clear(); 724485" />
<Node Id="10312:[38786..38797).1" Label="tmp.Free(); 724486" />
<Node Id="10312:[35047..35180).11" Label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 724487" />
<Node Id="10312:[9577..9709).10" Label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 724488" />
<Node Id="10346:[12335..12456).1" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724489" />
<Node Id="10346:[12335..12456).7" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724490" />
<Node Id="10346:[12335..12456).8" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724491" />
<Node Id="10346:[12335..12455).1" Label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 724492" />
<Node Id="10345:[29004..29025).1" Label="param LookupSymbol(Binder originalBinder) 724493" />
<Node Id="10345:[29040..29059).1" Label="param LookupSymbol(LookupResult result) 724494" />
<Node Id="10345:[29074..29085).1" Label="param LookupSymbol(string name) 724495" />
<Node Id="10345:[29100..29109).1" Label="param LookupSymbol(int arity) 724496" />
<Node Id="10345:[29124..29163).1" Label="param LookupSymbol(ConsList$TypeSymbol$ basesBeingResolved) 724497" />
<Node Id="10345:[29178..29199).1" Label="param LookupSymbol(LookupOptions options) 724498" />
<Node Id="10345:[29214..29227).1" Label="param LookupSymbol(bool diagnose) 724499" />
<Node Id="10345:[29242..29288).1" Label="param LookupSymbol(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 724500" />
<Node Id="10345:[28963..29726).1" Label="param LookupSymbol(this) 724501" />
<Node Id="10345:[29314..29436).1" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724502" />
<Node Id="10345:[29314..29436).2" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724503" />
<Node Id="10345:[29314..29436).3" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724504" />
<Node Id="10345:[29314..29436).4" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724505" />
<Node Id="10345:[29314..29436).5" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724506" />
<Node Id="10345:[29314..29436).6" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724507" />
<Node Id="10345:[29314..29436).7" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724508" />
<Node Id="10345:[29314..29436).8" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724509" />
<Node Id="10345:[29314..29435).1" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 724510" />
<Node Id="10345:[29788..29809).1" Label="param LookupSymbolInAliases(Binder originalBinder) 724511" />
<Node Id="10345:[29824..29843).1" Label="param LookupSymbolInAliases(LookupResult result) 724512" />
<Node Id="10345:[29858..29869).1" Label="param LookupSymbolInAliases(string name) 724513" />
<Node Id="10345:[29884..29893).1" Label="param LookupSymbolInAliases(int arity) 724514" />
<Node Id="10345:[29908..29947).1" Label="param LookupSymbolInAliases(ConsList$TypeSymbol$ basesBeingResolved) 724515" />
<Node Id="10345:[29962..29983).1" Label="param LookupSymbolInAliases(LookupOptions options) 724516" />
<Node Id="10345:[29998..30011).1" Label="param LookupSymbolInAliases(bool diagnose) 724517" />
<Node Id="10345:[30026..30072).1" Label="param LookupSymbolInAliases(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 724518" />
<Node Id="10345:[29738..31666).1" Label="param LookupSymbolInAliases(this) 724519" />
<Node Id="10345:[30127..30163).1" Label="originalBinder.IsSemanticModelBinder 724520" />
<Node Id="10286:[2155..2260).3" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 724521" />
<Node Id="10286:[2191..2245).9" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 724522" />
<Node Id="10286:[2191..2245).10" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 724523" />
<Node Id="10286:[2198..2244).3" Label="this.Flags.Includes(BinderFlags.SemanticModel) 724524" />
<Node Id="10298:[471..492).32" Label="param Includes(this BinderFlags self) 724525" />
<Node Id="10298:[494..511).32" Label="param Includes(BinderFlags other) 724526" />
<Node Id="10345:[30098..30164).1" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 724527" />
<Node Id="10345:[30180..30209).1" Label="AliasAndUsingDirective alias; 724528" />
<Node Id="10345:[30203..30208).1" Label="alias 724529" />
<Node Id="10345:[30223..30867).1" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 724530" />
<Node Id="10345:[30223..30867).2" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 724531" />
<Node Id="10345:[30223..30867).3" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 724532" />
<Node Id="10345:[30883..31655).1" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 724533" />
<Node Id="10345:[29314..29436).9" Label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724534" />
<Node Id="10345:[29457..29477).1" Label="result.IsMultiViable 724535" />
<Node Id="10354:[4919..5009).24" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 724536" />
<Node Id="10354:[4094..4107).32" Label="return _kind; 724537" />
<Node Id="10345:[29452..29715).1" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 724538" />
<Node Id="10345:[29452..29715).2" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 724539" />
<Node Id="10345:[29452..29715).3" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 724540" />
<Node Id="10345:[29452..29715).5" Label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)
            {
                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 724541" />
<Node Id="10345:[29566..29700).1" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724542" />
<Node Id="10345:[29566..29700).2" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724543" />
<Node Id="10345:[29566..29700).3" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724544" />
<Node Id="10345:[29566..29700).4" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724545" />
<Node Id="10345:[29566..29700).5" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724546" />
<Node Id="10345:[29566..29700).6" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724547" />
<Node Id="10345:[29566..29700).7" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724548" />
<Node Id="10345:[29566..29700).8" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724549" />
<Node Id="10345:[29566..29700).9" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724550" />
<Node Id="10345:[29566..29699).1" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 724551" />
<Node Id="10345:[31734..31789).1" Label="param LookupSymbolInUsings(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 724552" />
<Node Id="10345:[31804..31825).1" Label="param LookupSymbolInUsings(Binder originalBinder) 724553" />
<Node Id="10345:[31840..31859).1" Label="param LookupSymbolInUsings(LookupResult result) 724554" />
<Node Id="10345:[31874..31885).1" Label="param LookupSymbolInUsings(string name) 724555" />
<Node Id="10345:[31900..31909).1" Label="param LookupSymbolInUsings(int arity) 724556" />
<Node Id="10345:[31924..31963).1" Label="param LookupSymbolInUsings(ConsList$TypeSymbol$ basesBeingResolved) 724557" />
<Node Id="10345:[31978..31999).1" Label="param LookupSymbolInUsings(LookupOptions options) 724558" />
<Node Id="10345:[32014..32027).1" Label="param LookupSymbolInUsings(bool diagnose) 724559" />
<Node Id="10345:[32042..32088).1" Label="param LookupSymbolInUsings(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 724560" />
<Node Id="10345:[32114..32230).1" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 724561" />
<Node Id="10345:[32114..32230).2" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 724562" />
<Node Id="10345:[32118..32174).1" Label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 724563" />
<Node Id="10298:[471..492).33" Label="param Includes(this BinderFlags self) 724564" />
<Node Id="10298:[494..511).33" Label="param Includes(BinderFlags other) 724565" />
<Node Id="10345:[32275..32311).1" Label="originalBinder.IsSemanticModelBinder 724566" />
<Node Id="10286:[2155..2260).4" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 724567" />
<Node Id="10286:[2191..2245).13" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 724568" />
<Node Id="10286:[2191..2245).14" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 724569" />
<Node Id="10286:[2198..2244).4" Label="this.Flags.Includes(BinderFlags.SemanticModel) 724570" />
<Node Id="10298:[471..492).34" Label="param Includes(this BinderFlags self) 724571" />
<Node Id="10298:[494..511).34" Label="param Includes(BinderFlags other) 724572" />
<Node Id="10345:[32246..32312).1" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 724573" />
<Node Id="10345:[32328..33465).1" Label="foreach (var typeOrNamespace in usings)
            {
                ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);
                foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 724574" />
<Node Id="10345:[29566..29700).10" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 724575" />
<Node Id="10354:[3720..3803).145" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724576" />
<Node Id="10354:[3720..3803).147" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724577" />
<Node Id="10312:[4680..4787).15" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 724578" />
<Node Id="10346:[10861..10875).4" Label="result.IsClear 724579" />
<Node Id="10354:[3684..3818).21" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 724580" />
<Node Id="10354:[3720..3803).153" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724581" />
<Node Id="10354:[3720..3803).154" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724582" />
<Node Id="10354:[3720..3803).155" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724583" />
<Node Id="10346:[10848..10877).10" Label="Debug.Assert(result.IsClear); 724584" />
<Node Id="10346:[10897..10914).4" Label="IsSubmissionClass 724585" />
<Node Id="10346:[7666..7775).4" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 724586" />
<Node Id="10346:[7672..7773).10" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 724587" />
<Node Id="10346:[10893..11127).7" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 724588" />
<Node Id="10346:[3525..3638).26" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 724589" />
<Node Id="10312:[7816..7829).4" Label="param LookupMembersInternal(bool diagnose) 724590" />
<Node Id="10312:[7903..7936).13" Label="Debug.Assert(options.AreValid()); 724591" />
<Node Id="10312:[7916..7934).4" Label="options.AreValid() 724592" />
<Node Id="10353:[4698..4724).7" Label="param AreValid(this LookupOptions options) 724593" />
<Node Id="10353:[4750..4847).13" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 724594" />
<Node Id="10353:[4863..5000).25" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 724595" />
<Node Id="10353:[4863..5000).26" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 724596" />
<Node Id="10353:[5079..5183).13" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 724597" />
<Node Id="10353:[5197..5323).19" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 724598" />
<Node Id="10353:[5485..5759).37" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724599" />
<Node Id="10353:[5485..5759).38" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724600" />
<Node Id="10353:[5485..5759).39" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724601" />
<Node Id="10353:[5775..5979).25" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 724602" />
<Node Id="10353:[5775..5979).27" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 724603" />
<Node Id="10353:[5995..6029).19" Label="return OnlyOneBitSet(onlyOptions); 724604" />
<Node Id="10353:[6002..6028).7" Label="OnlyOneBitSet(onlyOptions) 724605" />
<Node Id="10353:[6343..6358).7" Label="param OnlyOneBitSet(LookupOptions o) 724606" />
<Node Id="10353:[6384..6410).37" Label="return (o & (o - 1)) == 0; 724607" />
<Node Id="10353:[6384..6410).38" Label="return (o & (o - 1)) == 0; 724608" />
<Node Id="10312:[7952..7977).13" Label="Debug.Assert(arity $= 0); 724609" />
<Node Id="10312:[19087..19100).3" Label="param LookupMembersInNamespace(bool diagnose) 724610" />
<Node Id="10312:[61608..61629).5" Label="param GetCandidateMembers(Binder originalBinder) 724611" />
<Node Id="10312:[63439..63448).3" Label="param CheckViability(int arity) 724612" />
<Node Id="10312:[63473..63501).3" Label="param CheckViability(TypeSymbol accessThroughType) 724613" />
<Node Id="10312:[63503..63516).3" Label="param CheckViability(bool diagnose) 724614" />
<Node Id="10312:[63566..63612).3" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 724615" />
<Node Id="10312:[63638..63668).3" Label="bool inaccessibleViaQualifier; 724616" />
<Node Id="10312:[63682..63706).3" Label="DiagnosticInfo diagInfo; 724617" />
<Node Id="10312:[80978..80991).3" Label="param WrongArity(Symbol symbol) 724618" />
<Node Id="10312:[80993..81002).3" Label="param WrongArity(int arity) 724619" />
<Node Id="10312:[81004..81017).3" Label="param WrongArity(bool diagnose) 724620" />
<Node Id="10312:[81019..81040).3" Label="param WrongArity(LookupOptions options) 724621" />
<Node Id="10312:[81042..81069).3" Label="param WrongArity(out DiagnosticInfo diagInfo) 724622" />
<Node Id="10312:[81095..84034).3" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 724623" />
<Node Id="10312:[81196..82523).15" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 724624" />
<Node Id="10312:[81196..82523).16" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 724625" />
<Node Id="10312:[81196..82523).17" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 724626" />
<Node Id="10312:[81196..82523).20" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 724627" />
<Node Id="10312:[81319..81371).3" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 724628" />
<Node Id="10312:[81495..81570).11" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 724629" />
<Node Id="10312:[81495..81570).12" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 724630" />
<Node Id="10312:[81596..82500).13" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 724631" />
<Node Id="10312:[81596..82500).14" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 724632" />
<Node Id="10312:[81628..81659).3" Label="options.IsAttributeTypeLookup() 724633" />
<Node Id="10353:[7504..7530).6" Label="param IsAttributeTypeLookup(this LookupOptions options) 724634" />
<Node Id="10312:[81596..82500).17" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 724635" />
<Node Id="10312:[84050..84066).5" Label="diagInfo = null; 724636" />
<Node Id="10312:[66177..69285).28" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 724637" />
<Node Id="10312:[66291..66342).3" Label="RefineAccessThroughType(options, accessThroughType) 724638" />
<Node Id="10312:[75301..75322).3" Label="param RefineAccessThroughType(LookupOptions options) 724639" />
<Node Id="10312:[75324..75352).3" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 724640" />
<Node Id="10312:[75735..75866).11" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 724641" />
<Node Id="10312:[75735..75866).12" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 724642" />
<Node Id="10312:[75742..75804).3" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 724643" />
<Node Id="10312:[75735..75866).14" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 724644" />
<Node Id="10312:[66177..69285).31" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 724645" />
<Node Id="10312:[66177..69285).32" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 724646" />
<Node Id="10312:[66177..69285).33" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 724647" />
<Node Id="10312:[77543..77571).3" Label="param IsAccessible(TypeSymbol accessThroughType) 724648" />
<Node Id="10312:[77573..77604).3" Label="param IsAccessible(out bool failedThroughTypeCheck) 724649" />
<Node Id="10312:[77654..77700).3" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 724650" />
<Node Id="10312:[77501..78044).3" Label="param IsAccessible(this) 724651" />
<Node Id="10312:[77726..77892).9" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 724652" />
<Node Id="10312:[77726..77892).10" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 724653" />
<Node Id="10312:[77730..77782).3" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 724654" />
<Node Id="10298:[471..492).38" Label="param Includes(this BinderFlags self) 724655" />
<Node Id="10298:[494..511).38" Label="param Includes(BinderFlags other) 724656" />
<Node Id="10312:[78402..78430).3" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 724657" />
<Node Id="10312:[78432..78463).3" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 724658" />
<Node Id="10312:[78513..78552).3" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 724659" />
<Node Id="10312:[78346..78783).3" Label="param IsAccessibleHelper(this) 724660" />
<Node Id="10346:[8019..8032).1" Label="param IsAccessibleHelper(Symbol symbol) 724661" />
<Node Id="10346:[8034..8062).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 724662" />
<Node Id="10346:[8064..8095).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 724663" />
<Node Id="10346:[8097..8143).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 724664" />
<Node Id="10346:[8145..8184).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 724665" />
<Node Id="10346:[7977..8737).1" Label="param IsAccessibleHelper(this) 724666" />
<Node Id="10346:[8210..8251).1" Label="var type = _container as NamedTypeSymbol; 724667" />
<Node Id="10346:[8265..8726).1" Label="if ((object)type != null)
            {
                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);
            }
            else
            {
                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.
            } 724668" />
<Node Id="10346:[8265..8726).2" Label="if ((object)type != null)
            {
                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);
            }
            else
            {
                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.
            } 724669" />
<Node Id="10346:[8323..8450).1" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724670" />
<Node Id="10346:[8323..8450).2" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724671" />
<Node Id="10346:[8323..8450).3" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724672" />
<Node Id="10346:[8323..8450).4" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724673" />
<Node Id="10346:[8323..8450).5" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724674" />
<Node Id="10346:[8323..8450).6" Label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 724675" />
<Node Id="10346:[8330..8449).1" Label="this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics) 724676" />
<Node Id="10286:[30070..30083).3" Label="param IsSymbolAccessibleConditional(Symbol symbol) 724677" />
<Node Id="10286:[30098..30120).3" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 724678" />
<Node Id="10286:[30135..30160).3" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 724679" />
<Node Id="10286:[30175..30206).3" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 724680" />
<Node Id="10286:[30221..30268).3" Label="param IsSymbolAccessibleConditional(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 724681" />
<Node Id="10286:[30283..30330).3" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 724682" />
<Node Id="10286:[30012..30691).3" Label="param IsSymbolAccessibleConditional(this) 724683" />
<Node Id="10286:[30356..30522).9" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 724684" />
<Node Id="10286:[30356..30522).10" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 724685" />
<Node Id="10286:[30360..30412).3" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 724686" />
<Node Id="10298:[471..492).39" Label="param Includes(this BinderFlags self) 724687" />
<Node Id="10298:[494..511).39" Label="param Includes(BinderFlags other) 724688" />
<Node Id="10060:[2136..2158).3" Label="param IsSymbolAccessible(NamedTypeSymbol within) 724689" />
<Node Id="10060:[2173..2198).3" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 724690" />
<Node Id="10060:[2213..2244).3" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 724691" />
<Node Id="10060:[2320..2366).3" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 724692" />
<Node Id="10060:[5621..5634).3" Label="param IsSymbolAccessibleCore(Symbol within) 724693" />
<Node Id="10060:[5691..5716).3" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 724694" />
<Node Id="10060:[5731..5762).3" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 724695" />
<Node Id="10060:[5777..5806).3" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 724696" />
<Node Id="10060:[5882..5928).3" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 724697" />
<Node Id="10060:[5954..5991).9" Label="Debug.Assert((object)symbol != null); 724698" />
<Node Id="10060:[5954..5991).10" Label="Debug.Assert((object)symbol != null); 724699" />
<Node Id="10060:[6005..6042).9" Label="Debug.Assert((object)within != null); 724700" />
<Node Id="10060:[6005..6042).10" Label="Debug.Assert((object)within != null); 724701" />
<Node Id="10060:[6056..6090).5" Label="Debug.Assert(within.IsDefinition); 724702" />
<Node Id="10060:[6104..6172).7" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 724703" />
<Node Id="10060:[6188..6219).5" Label="failedThroughTypeCheck = false; 724704" />
<Node Id="10060:[6814..6920).14" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 724705" />
<Node Id="10060:[6814..6920).15" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 724706" />
<Node Id="10060:[6814..6920).16" Label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 724707" />
<Node Id="10060:[10202..10215).3" Label="param IsNamedTypeAccessible(Symbol within) 724708" />
<Node Id="10060:[10265..10311).3" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 724709" />
<Node Id="10060:[10337..10405).7" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 724710" />
<Node Id="10060:[10419..10454).9" Label="Debug.Assert((object)type != null); 724711" />
<Node Id="10060:[10470..10516).3" Label="var compilation = within.DeclaringCompilation; 724712" />
<Node Id="10060:[10532..10544).3" Label="bool unused; 724713" />
<Node Id="10060:[10558..11295).3" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 724714" />
<Node Id="10060:[11990..12013).3" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 724715" />
<Node Id="10060:[12078..12091).3" Label="param IsNonNestedTypeAccessible(Symbol within) 724716" />
<Node Id="10060:[12117..12185).7" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 724717" />
<Node Id="10060:[12199..12238).9" Label="Debug.Assert((object)assembly != null); 724718" />
<Node Id="10060:[12199..12238).10" Label="Debug.Assert((object)assembly != null); 724719" />
<Node Id="10346:[11710..11746).3" Label="originalBinder.IsSemanticModelBinder 724720" />
<Node Id="10286:[2155..2260).5" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 724721" />
<Node Id="10286:[2191..2245).17" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 724722" />
<Node Id="10286:[2191..2245).18" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 724723" />
<Node Id="10286:[2198..2244).5" Label="this.Flags.Includes(BinderFlags.SemanticModel) 724724" />
<Node Id="10298:[471..492).41" Label="param Includes(this BinderFlags self) 724725" />
<Node Id="10298:[494..511).41" Label="param Includes(BinderFlags other) 724726" />
<Node Id="10345:[28225..28251).3" Label="param IsUsingAlias(bool callerIsSemanticModel) 724727" />
<Node Id="10345:[28927..28940).5" Label="return false; 724728" />
<Node Id="10346:[12205..12212).3" Label="return; 724729" />
<Node Id="10312:[4685..4699).9" Label="result.IsClear 724730" />
<Node Id="10354:[3684..3818).22" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 724731" />
<Node Id="10354:[3720..3803).161" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724732" />
<Node Id="10312:[4680..4787).17" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 724733" />
<Node Id="10312:[4749..4764).3" Label="binder = scope; 724734" />
<Node Id="10312:[4826..5058).41" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 724735" />
<Node Id="10312:[4826..5058).42" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 724736" />
<Node Id="10312:[5087..5101).3" Label="return binder; 724737" />
<Node Id="10319:[43799..44676).13" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 724738" />
<Node Id="10319:[43853..43873).3" Label="IsViableType(result) 724739" />
<Node Id="10319:[41088..41107).3" Label="param IsViableType(LookupResult result) 724740" />
<Node Id="10319:[41138..41158).3" Label="result.IsMultiViable 724741" />
<Node Id="10354:[4919..5009).28" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 724742" />
<Node Id="10354:[4094..4107).38" Label="return _kind; 724743" />
<Node Id="10319:[41133..41220).5" Label="if (!result.IsMultiViable)
            {
                return false;
            } 724744" />
<Node Id="10319:[41254..41268).3" Label="result.Symbols 724745" />
<Node Id="10354:[4525..4595).5" Label="get
            {
                return _symbolList;
            } 724746" />
<Node Id="10354:[4561..4580).5" Label="return _symbolList; 724747" />
<Node Id="10319:[41236..41680).9" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 724748" />
<Node Id="10319:[41302..41665).3" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 724749" />
<Node Id="10319:[41634..41646).5" Label="return true; 724750" />
<Node Id="10319:[44751..44765).3" Label="bool wasError; 724751" />
<Node Id="10319:[84201..84218).3" Label="param ResultSymbol(string simpleName) 724752" />
<Node Id="10319:[84233..84242).3" Label="param ResultSymbol(int arity) 724753" />
<Node Id="10319:[84257..84273).3" Label="param ResultSymbol(SyntaxNode where) 724754" />
<Node Id="10319:[84288..84313).3" Label="param ResultSymbol(DiagnosticBag diagnostics) 724755" />
<Node Id="10319:[84374..84391).3" Label="param ResultSymbol(out bool wasError) 724756" />
<Node Id="10319:[84406..84447).3" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 724757" />
<Node Id="10319:[84462..84508).3" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 724758" />
<Node Id="10319:[84124..109887).3" Label="param ResultSymbol(this) 724759" />
<Node Id="10319:[85320..85348).9" Label="Debug.Assert(where != null); 724760" />
<Node Id="10319:[85320..85348).10" Label="Debug.Assert(where != null); 724761" />
<Node Id="10319:[85366..85400).9" Label="Debug.Assert(diagnostics != null); 724762" />
<Node Id="10319:[85366..85400).10" Label="Debug.Assert(diagnostics != null); 724763" />
<Node Id="10319:[85467..85484).5" Label="wasError = false; 724764" />
<Node Id="10319:[104874..105336).7" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 724765" />
<Node Id="10319:[104874..105336).8" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 724766" />
<Node Id="10319:[105368..106708).3" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 724767" />
<Node Id="10319:[105465..105535).7" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 724768" />
<Node Id="10319:[105465..105535).8" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 724769" />
<Node Id="10319:[76360..76385).2" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 724770" />
<Node Id="10319:[76387..76402).2" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 724771" />
<Node Id="10319:[76494..76582).5" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 724772" />
<Node Id="10319:[84691..84861).5" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 724773" />
<Node Id="10319:[84764..84846).13" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 724774" />
<Node Id="10319:[84764..84846).14" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 724775" />
<Node Id="10319:[84764..84846).16" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 724776" />
<Node Id="10319:[84764..84846).17" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 724777" />
<Node Id="10319:[84764..84845).3" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 724778" />
<Node Id="10306:[358886..358901).3" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 724779" />
<Node Id="10306:[358903..358930).3" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 724780" />
<Node Id="10306:[358932..358945).3" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 724781" />
<Node Id="10306:[358947..358972).3" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 724782" />
<Node Id="10306:[358838..360009).3" Label="param CheckRuntimeSupportForSymbolAccess(this) 724783" />
<Node Id="10306:[358998..359998).13" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 724784" />
<Node Id="10306:[358998..359998).14" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 724785" />
<Node Id="10319:[44948..45377).5" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 724786" />
<Node Id="10354:[11428..11441).4" Label="this.Clear(); 724787" />
<Node Id="10319:[45408..45422).3" Label="result.Free(); 724788" />
<Node Id="10287:[2377..2471).5" Label="if (symbol is null)
                {
                    return default;
                } 724789" />
<Node Id="10287:[791..833).5" Label="Debug.Assert(typeWithAnnotations.HasType); 724790" />
<Node Id="10287:[912..927).3" Label="_symbol = null; 724791" />
<Node Id="10287:[912..919).3" Label="_symbol 724792" />
<Node Id="10287:[945..972).3" Label="_isNullableEnabled = false; 724793" />
<Node Id="10287:[945..963).3" Label="_isNullableEnabled 724794" />
<Node Id="10286:[21546..21561).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 724795" />
<Node Id="10286:[21563..21583).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 724796" />
<Node Id="10286:[22044..22069).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 724797" />
<Node Id="10286:[22086..22108).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 724798" />
<Node Id="10286:[22110..22130).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 724799" />
<Node Id="10286:[8725..8866).1" Label="get
            {
                RoslynDebug.Assert(Next is object);
                return Next.ContainingMemberOrLambda;
            } 724800" />
<Node Id="10286:[8761..8796).1" Label="RoslynDebug.Assert(Next is object); 724801" />
<Node Id="10286:[8821..8850).1" Label="Next.ContainingMemberOrLambda 724802" />
<Node Id="10346:[7369..7588).4" Label="get
            {
                var merged = _container as MergedNamespaceSymbol;
                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;
            } 724803" />
<Node Id="10346:[7562..7572).1" Label="_container 724804" />
<Node Id="10286:[8814..8851).1" Label="return Next.ContainingMemberOrLambda; 724805" />
<Node Id="10286:[15616..15690).11" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 724806" />
<Node Id="10286:[15616..15690).12" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 724807" />
<Node Id="10286:[15715..15910).3" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 724808" />
<Node Id="10286:[23056..23081).3" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 724809" />
<Node Id="10286:[23124..23146).3" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 724810" />
<Node Id="10286:[23161..23181).3" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 724811" />
<Node Id="10286:[23281..23301).3" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 724812" />
<Node Id="10286:[23327..23364).6" Label="RoslynDebug.Assert(symbol is object); 724813" />
<Node Id="10286:[23380..23684).15" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 724814" />
<Node Id="10286:[23893..24026).5" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 724815" />
<Node Id="10286:[24450..24529).11" Label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 724816" />
<Node Id="10286:[24545..24641).5" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 724817" />
<Node Id="10286:[24655..25349).3" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 724818" />
<Node Id="10286:[26910..26935).3" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 724819" />
<Node Id="10286:[26952..26974).3" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 724820" />
<Node Id="10286:[27002..27022).3" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 724821" />
<Node Id="10286:[27048..27088).9" Label="RoslynDebug.Assert(diagnostics != null); 724822" />
<Node Id="10286:[27048..27088).10" Label="RoslynDebug.Assert(diagnostics != null); 724823" />
<Node Id="10286:[27208..27236).5" Label="DiagnosticInfo? info = null; 724824" />
<Node Id="10286:[27250..27722).3" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 724825" />
<Node Id="10286:[27738..27845).7" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 724826" />
<Node Id="10286:[27738..27845).8" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 724827" />
<Node Id="10286:[27861..27873).3" Label="return kind; 724828" />
<Node Id="10286:[26281..26812).3" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 724829" />
<Node Id="10286:[26450..26769).3" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 724830" />
<Node Id="10287:[1680..1716).3" Label="=$ _symbol?.Kind == SymbolKind.Alias 724831" />
<Node Id="10287:[1683..1690).3" Label="_symbol 724832" />
<Node Id="10287:[1683..1716).5" Label="_symbol?.Kind == SymbolKind.Alias 724833" />
<Node Id="10319:[51935..52244).5" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 724834" />
<Node Id="10286:[1605..1638).13" Label="RoslynDebug.Assert(next != null); 724835" />
<Node Id="10286:[1688..1781).19" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 724836" />
<Node Id="10286:[1688..1781).20" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 724837" />
<Node Id="10286:[1708..1779).4" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 724838" />
<Node Id="10298:[471..492).43" Label="param Includes(this BinderFlags self) 724839" />
<Node Id="10298:[494..511).43" Label="param Includes(BinderFlags other) 724840" />
<Node Id="10286:[1820..1963).19" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 724841" />
<Node Id="10286:[1820..1963).20" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 724842" />
<Node Id="10286:[1840..1888).4" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 724843" />
<Node Id="10298:[471..492).44" Label="param Includes(this BinderFlags self) 724844" />
<Node Id="10298:[494..511).44" Label="param Includes(BinderFlags other) 724845" />
<Node Id="10319:[42478..42805).10" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 724846" />
<Node Id="10319:[42821..42938).25" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 724847" />
<Node Id="10319:[42839..42937).4" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 724848" />
<Node Id="10319:[63849..63870).4" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 724849" />
<Node Id="10319:[63885..63919).4" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 724850" />
<Node Id="10319:[63934..63945).4" Label="param CreateErrorIfLookupOnTypeParameter(string name) 724851" />
<Node Id="10319:[63960..63969).4" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 724852" />
<Node Id="10319:[63984..64009).4" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 724853" />
<Node Id="10319:[63768..64484).4" Label="param CreateErrorIfLookupOnTypeParameter(this) 724854" />
<Node Id="10319:[64035..64445).13" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 724855" />
<Node Id="10319:[64035..64445).14" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 724856" />
<Node Id="10319:[64461..64473).7" Label="return null; 724857" />
<Node Id="10319:[42821..42938).31" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 724858" />
<Node Id="10319:[42952..43079).10" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 724859" />
<Node Id="10319:[42952..43079).11" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 724860" />
<Node Id="10354:[11312..11328).5" Label="instance.IsClear 724861" />
<Node Id="10354:[3684..3818).23" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 724862" />
<Node Id="10354:[3720..3803).165" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724863" />
<Node Id="10354:[3720..3803).166" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724864" />
<Node Id="10354:[3720..3803).167" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724865" />
<Node Id="10354:[11299..11330).13" Label="Debug.Assert(instance.IsClear); 724866" />
<Node Id="10319:[50330..50355).4" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 724867" />
<Node Id="10312:[3905..3919).4" Label="result.IsClear 724868" />
<Node Id="10354:[3684..3818).24" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 724869" />
<Node Id="10354:[3720..3803).173" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724870" />
<Node Id="10354:[3720..3803).174" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724871" />
<Node Id="10354:[3720..3803).175" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724872" />
<Node Id="10312:[3892..3921).10" Label="Debug.Assert(result.IsClear); 724873" />
<Node Id="10312:[3935..3968).13" Label="Debug.Assert(options.AreValid()); 724874" />
<Node Id="10312:[3948..3966).4" Label="options.AreValid() 724875" />
<Node Id="10353:[4698..4724).8" Label="param AreValid(this LookupOptions options) 724876" />
<Node Id="10353:[4750..4847).15" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 724877" />
<Node Id="10353:[4863..5000).29" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 724878" />
<Node Id="10353:[4863..5000).30" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 724879" />
<Node Id="10353:[5079..5183).15" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 724880" />
<Node Id="10353:[5197..5323).22" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 724881" />
<Node Id="10353:[5485..5759).43" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724882" />
<Node Id="10353:[5485..5759).44" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724883" />
<Node Id="10353:[5485..5759).45" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724884" />
<Node Id="10353:[5775..5979).29" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 724885" />
<Node Id="10353:[5775..5979).31" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 724886" />
<Node Id="10353:[5995..6029).22" Label="return OnlyOneBitSet(onlyOptions); 724887" />
<Node Id="10353:[6002..6028).8" Label="OnlyOneBitSet(onlyOptions) 724888" />
<Node Id="10353:[6343..6358).8" Label="param OnlyOneBitSet(LookupOptions o) 724889" />
<Node Id="10353:[6384..6410).43" Label="return (o & (o - 1)) == 0; 724890" />
<Node Id="10353:[6384..6410).44" Label="return (o & (o - 1)) == 0; 724891" />
<Node Id="10312:[5188..5207).4" Label="param LookupSymbolsInSingleBinder(LookupResult result) 724892" />
<Node Id="10312:[5209..5220).4" Label="param LookupSymbolsInSingleBinder(string name) 724893" />
<Node Id="10312:[5222..5231).4" Label="param LookupSymbolsInSingleBinder(int arity) 724894" />
<Node Id="10312:[5233..5272).4" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 724895" />
<Node Id="10312:[5274..5295).4" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 724896" />
<Node Id="10312:[5297..5318).4" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 724897" />
<Node Id="10312:[5320..5333).4" Label="param LookupSymbolsInSingleBinder(bool diagnose) 724898" />
<Node Id="10312:[5124..5404).4" Label="param LookupSymbolsInSingleBinder(this) 724899" />
<Node Id="10312:[4685..4699).10" Label="result.IsClear 724900" />
<Node Id="10354:[3684..3818).25" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 724901" />
<Node Id="10354:[3720..3803).181" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724902" />
<Node Id="10354:[3720..3803).182" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724903" />
<Node Id="10354:[3720..3803).183" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724904" />
<Node Id="10312:[4680..4787).19" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 724905" />
<Node Id="10312:[4826..5058).46" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 724906" />
<Node Id="10312:[4826..5058).47" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 724907" />
<Node Id="10346:[10861..10875).5" Label="result.IsClear 724908" />
<Node Id="10354:[3684..3818).26" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 724909" />
<Node Id="10354:[3720..3803).189" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724910" />
<Node Id="10354:[3720..3803).190" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724911" />
<Node Id="10354:[3720..3803).191" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 724912" />
<Node Id="10346:[10848..10877).13" Label="Debug.Assert(result.IsClear); 724913" />
<Node Id="10346:[10897..10914).5" Label="IsSubmissionClass 724914" />
<Node Id="10346:[7666..7775).5" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 724915" />
<Node Id="10346:[7672..7773).13" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 724916" />
<Node Id="10346:[10893..11127).9" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 724917" />
<Node Id="10346:[3525..3638).33" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 724918" />
<Node Id="10312:[7816..7829).5" Label="param LookupMembersInternal(bool diagnose) 724919" />
<Node Id="10312:[7903..7936).17" Label="Debug.Assert(options.AreValid()); 724920" />
<Node Id="10312:[7916..7934).5" Label="options.AreValid() 724921" />
<Node Id="10353:[4698..4724).9" Label="param AreValid(this LookupOptions options) 724922" />
<Node Id="10353:[4750..4847).17" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 724923" />
<Node Id="10353:[4863..5000).33" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 724924" />
<Node Id="10353:[4863..5000).34" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 724925" />
<Node Id="10353:[5079..5183).17" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 724926" />
<Node Id="10353:[5197..5323).25" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 724927" />
<Node Id="10353:[5485..5759).49" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724928" />
<Node Id="10353:[5485..5759).50" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724929" />
<Node Id="10353:[5485..5759).51" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 724930" />
<Node Id="10353:[5775..5979).33" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 724931" />
<Node Id="10353:[5775..5979).35" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 724932" />
<Node Id="10353:[5995..6029).25" Label="return OnlyOneBitSet(onlyOptions); 724933" />
<Node Id="10353:[6002..6028).9" Label="OnlyOneBitSet(onlyOptions) 724934" />
<Node Id="10353:[6343..6358).9" Label="param OnlyOneBitSet(LookupOptions o) 724935" />
<Node Id="10353:[6384..6410).49" Label="return (o & (o - 1)) == 0; 724936" />
<Node Id="10353:[6384..6410).50" Label="return (o & (o - 1)) == 0; 724937" />
<Node Id="10312:[7952..7977).17" Label="Debug.Assert(arity $= 0); 724938" />
<Node Id="10312:[8594..8603).2" Label="param LookupMembersInType(int arity) 724939" />
<Node Id="10312:[8669..8690).2" Label="param LookupMembersInType(Binder originalBinder) 724940" />
<Node Id="10312:[8692..8705).2" Label="param LookupMembersInType(bool diagnose) 724941" />
<Node Id="10312:[34797..34806).2" Label="param LookupMembersInClass(int arity) 724942" />
<Node Id="10312:[34911..34932).2" Label="param LookupMembersInClass(Binder originalBinder) 724943" />
<Node Id="10312:[34947..34960).2" Label="param LookupMembersInClass(bool diagnose) 724944" />
<Node Id="10312:[35403..35412).2" Label="param LookupMembersInClass(int arity) 724945" />
<Node Id="10312:[35517..35538).2" Label="param LookupMembersInClass(Binder originalBinder) 724946" />
<Node Id="10312:[35553..35581).2" Label="param LookupMembersInClass(TypeSymbol accessThroughType) 724947" />
<Node Id="10312:[35596..35609).2" Label="param LookupMembersInClass(bool diagnose) 724948" />
<Node Id="10312:[35696..35731).5" Label="Debug.Assert((object)type != null); 724949" />
<Node Id="10312:[36067..36079).3" Label="tmp.Clear(); 724950" />
<Node Id="10312:[33656..33675).3" Label="param LookupMembersWithoutInheritance(LookupResult result) 724951" />
<Node Id="10312:[33707..33716).3" Label="param LookupMembersWithoutInheritance(int arity) 724952" />
<Node Id="10312:[33754..33775).3" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 724953" />
<Node Id="10312:[33777..33805).3" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 724954" />
<Node Id="10312:[33807..33820).3" Label="param LookupMembersWithoutInheritance(bool diagnose) 724955" />
<Node Id="10312:[33870..33909).3" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 724956" />
<Node Id="10312:[61608..61629).6" Label="param GetCandidateMembers(Binder originalBinder) 724957" />
<Node Id="10312:[34022..34574).7" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 724958" />
<Node Id="10312:[36278..36360).25" Label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 724959" />
<Node Id="10354:[9012..9030).3" Label="param MergePrioritized(LookupResult other) 724960" />
<Node Id="10354:[8981..9152).3" Label="param MergePrioritized(this) 724961" />
<Node Id="10354:[9060..9070).3" Label="other.Kind 724962" />
<Node Id="10354:[4058..4122).43" Label="get
            {
                return _kind;
            } 724963" />
<Node Id="10354:[9056..9141).9" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 724964" />
<Node Id="10354:[9073..9077).3" Label="Kind 724965" />
<Node Id="10354:[4058..4122).44" Label="get
            {
                return _kind;
            } 724966" />
<Node Id="10354:[9056..9141).10" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 724967" />
<Node Id="10354:[9056..9141).11" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 724968" />
<Node Id="10312:[36566..36625).3" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 724969" />
<Node Id="10312:[36643..36855).7" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 724970" />
<Node Id="10312:[36643..36855).8" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 724971" />
<Node Id="10312:[37061..37078).3" Label="tmp.IsMultiViable 724972" />
<Node Id="10354:[4094..4107).45" Label="return _kind; 724973" />
<Node Id="10312:[37029..37117).7" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 724974" />
<Node Id="10312:[37258..37278).3" Label="result.IsMultiViable 724975" />
<Node Id="10354:[4094..4107).46" Label="return _kind; 724976" />
<Node Id="10312:[37254..37416).7" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 724977" />
<Node Id="10312:[37436..37988).9" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 724978" />
<Node Id="10312:[37436..37988).10" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 724979" />
<Node Id="10312:[38290..38338).3" Label="originalBinder.InCrefButNotParameterOrReturnType 724980" />
<Node Id="10306:[3345..3430).3" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 724981" />
<Node Id="10306:[3358..3364).3" Label="InCref 724982" />
<Node Id="10306:[3196..3249).15" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 724983" />
<Node Id="10306:[3202..3247).57" Label="return this.Flags.Includes(BinderFlags.Cref); 724984" />
<Node Id="10306:[3351..3428).7" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 724985" />
<Node Id="10312:[38286..38405).5" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 724986" />
<Node Id="10312:[36067..36079).4" Label="tmp.Clear(); 724987" />
<Node Id="10312:[36097..36258).39" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724988" />
<Node Id="10312:[36097..36258).40" Label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 724989" />
<Node Id="10312:[33656..33675).4" Label="param LookupMembersWithoutInheritance(LookupResult result) 724990" />
<Node Id="10312:[33707..33716).4" Label="param LookupMembersWithoutInheritance(int arity) 724991" />
<Node Id="10312:[33754..33775).4" Label="param LookupMembersWithoutInheritance(Binder originalBinder) 724992" />
<Node Id="10312:[33777..33805).4" Label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 724993" />
<Node Id="10312:[33807..33820).4" Label="param LookupMembersWithoutInheritance(bool diagnose) 724994" />
<Node Id="10312:[33870..33909).4" Label="param LookupMembersWithoutInheritance(ConsList$TypeSymbol$ basesBeingResolved) 724995" />
<Node Id="10312:[61608..61629).7" Label="param GetCandidateMembers(Binder originalBinder) 724996" />
<Node Id="10312:[34022..34574).10" Label="foreach (Symbol member in members)
            {
                // Do we need to exclude override members, or is that done later by overload resolution. It seems like
                // not excluding them here can't lead to problems, because we will always find the overridden method as well.
                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                result.MergeEqual(resultOfThisMember);
            } 724997" />
<Node Id="10354:[9012..9030).4" Label="param MergePrioritized(LookupResult other) 724998" />
<Node Id="10354:[8981..9152).4" Label="param MergePrioritized(this) 724999" />
<Node Id="10354:[9060..9070).4" Label="other.Kind 725000" />
<Node Id="10354:[4058..4122).48" Label="get
            {
                return _kind;
            } 725001" />
<Node Id="10354:[9056..9141).13" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 725002" />
<Node Id="10354:[9073..9077).4" Label="Kind 725003" />
<Node Id="10354:[4058..4122).49" Label="get
            {
                return _kind;
            } 725004" />
<Node Id="10354:[9056..9141).14" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 725005" />
<Node Id="10354:[9056..9141).15" Label="if (other.Kind $ Kind)
            {
                SetFrom(other);
            } 725006" />
<Node Id="10312:[36566..36625).4" Label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 725007" />
<Node Id="10312:[36643..36855).10" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 725008" />
<Node Id="10312:[36643..36855).11" Label="if (namedType?.ShouldAddWinRTMembers == true)
                {
                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);
                } 725009" />
<Node Id="10312:[37061..37078).4" Label="tmp.IsMultiViable 725010" />
<Node Id="10312:[37029..37117).10" Label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 725011" />
<Node Id="10312:[37258..37278).4" Label="result.IsMultiViable 725012" />
<Node Id="10312:[37254..37416).10" Label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))
                {
                    break;
                } 725013" />
<Node Id="10312:[37436..37988).13" Label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))
                {
                    var other = GetNearestOtherSymbol(basesBeingResolved, type);
                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);
                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);
                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result
                } 725014" />
<Node Id="10312:[38290..38338).4" Label="originalBinder.InCrefButNotParameterOrReturnType 725015" />
<Node Id="10306:[3345..3430).4" Label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 725016" />
<Node Id="10306:[3358..3364).4" Label="InCref 725017" />
<Node Id="10306:[3196..3249).16" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 725018" />
<Node Id="10306:[3351..3428).10" Label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 725019" />
<Node Id="10312:[38286..38405).7" Label="if (originalBinder.InCrefButNotParameterOrReturnType)
                {
                    break;
                } 725020" />
<Node Id="10312:[38756..38772).2" Label="visited?.Free(); 725021" />
<Node Id="10354:[11428..11441).5" Label="this.Clear(); 725022" />
<Node Id="10312:[38786..38797).2" Label="tmp.Free(); 725023" />
<Node Id="10345:[29004..29025).2" Label="param LookupSymbol(Binder originalBinder) 725024" />
<Node Id="10345:[29100..29109).2" Label="param LookupSymbol(int arity) 725025" />
<Node Id="10345:[29124..29163).2" Label="param LookupSymbol(ConsList$TypeSymbol$ basesBeingResolved) 725026" />
<Node Id="10345:[29214..29227).2" Label="param LookupSymbol(bool diagnose) 725027" />
<Node Id="10345:[29788..29809).2" Label="param LookupSymbolInAliases(Binder originalBinder) 725028" />
<Node Id="10345:[29824..29843).2" Label="param LookupSymbolInAliases(LookupResult result) 725029" />
<Node Id="10345:[29884..29893).2" Label="param LookupSymbolInAliases(int arity) 725030" />
<Node Id="10345:[29908..29947).2" Label="param LookupSymbolInAliases(ConsList$TypeSymbol$ basesBeingResolved) 725031" />
<Node Id="10345:[29962..29983).2" Label="param LookupSymbolInAliases(LookupOptions options) 725032" />
<Node Id="10345:[29998..30011).2" Label="param LookupSymbolInAliases(bool diagnose) 725033" />
<Node Id="10345:[30127..30163).2" Label="originalBinder.IsSemanticModelBinder 725034" />
<Node Id="10286:[2155..2260).6" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 725035" />
<Node Id="10286:[2191..2245).21" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 725036" />
<Node Id="10286:[2191..2245).22" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 725037" />
<Node Id="10286:[2198..2244).6" Label="this.Flags.Includes(BinderFlags.SemanticModel) 725038" />
<Node Id="10298:[471..492).47" Label="param Includes(this BinderFlags self) 725039" />
<Node Id="10298:[494..511).47" Label="param Includes(BinderFlags other) 725040" />
<Node Id="10345:[30098..30164).3" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 725041" />
<Node Id="10345:[30223..30867).7" Label="if (this.UsingAliases.TryGetValue(name, out alias))
            {
                // Found a match in our list of normal aliases.  Mark the alias as being seen so that
                // it won't be reported to the user as something that can be removed.
                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                if (res.Kind == LookupResultKind.Viable)
                {
                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);
                }

                result.MergeEqual(res);
            } 725042" />
<Node Id="10345:[30883..31655).4" Label="foreach (var a in this.ExternAliases)
            {
                if (a.Alias.Name == name)
                {
                    // Found a match in our list of extern aliases.  Mark the extern alias as being
                    // seen so that it won't be reported to the user as something that can be
                    // removed.
                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 725043" />
<Node Id="10354:[4094..4107).53" Label="return _kind; 725044" />
<Node Id="10345:[29566..29700).15" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 725045" />
<Node Id="10345:[29566..29700).16" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 725046" />
<Node Id="10345:[29566..29700).18" Label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 725047" />
<Node Id="10345:[31734..31789).2" Label="param LookupSymbolInUsings(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 725048" />
<Node Id="10345:[31804..31825).2" Label="param LookupSymbolInUsings(Binder originalBinder) 725049" />
<Node Id="10345:[31840..31859).2" Label="param LookupSymbolInUsings(LookupResult result) 725050" />
<Node Id="10345:[31874..31885).2" Label="param LookupSymbolInUsings(string name) 725051" />
<Node Id="10345:[31900..31909).2" Label="param LookupSymbolInUsings(int arity) 725052" />
<Node Id="10345:[31924..31963).2" Label="param LookupSymbolInUsings(ConsList$TypeSymbol$ basesBeingResolved) 725053" />
<Node Id="10345:[31978..31999).2" Label="param LookupSymbolInUsings(LookupOptions options) 725054" />
<Node Id="10345:[32014..32027).2" Label="param LookupSymbolInUsings(bool diagnose) 725055" />
<Node Id="10345:[32114..32230).5" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 725056" />
<Node Id="10345:[32114..32230).6" Label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))
            {
                return;
            } 725057" />
<Node Id="10345:[32118..32174).2" Label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 725058" />
<Node Id="10298:[471..492).48" Label="param Includes(this BinderFlags self) 725059" />
<Node Id="10298:[494..511).48" Label="param Includes(BinderFlags other) 725060" />
<Node Id="10345:[32275..32311).2" Label="originalBinder.IsSemanticModelBinder 725061" />
<Node Id="10286:[2155..2260).7" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 725062" />
<Node Id="10286:[2191..2245).25" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 725063" />
<Node Id="10286:[2191..2245).26" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 725064" />
<Node Id="10286:[2198..2244).7" Label="this.Flags.Includes(BinderFlags.SemanticModel) 725065" />
<Node Id="10298:[471..492).49" Label="param Includes(this BinderFlags self) 725066" />
<Node Id="10298:[494..511).49" Label="param Includes(BinderFlags other) 725067" />
<Node Id="10345:[32246..32312).3" Label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 725068" />
<Node Id="10345:[32328..33465).4" Label="foreach (var typeOrNamespace in usings)
            {
                ImmutableArray$Symbol$ candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);
                foreach (Symbol symbol in candidates)
                {
                    if (!IsValidLookupCandidateInUsings(symbol))
                    {
                        continue;
                    }

                    // Found a match in our list of normal using directives.  Mark the directive
                    // as being seen so that it won't be reported to the user as something that
                    // can be removed.
                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);
                    if (res.Kind == LookupResultKind.Viable)
                    {
                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);
                    }

                    result.MergeEqual(res);
                }
            } 725069" />
<Node Id="10354:[3720..3803).205" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725070" />
<Node Id="10354:[3720..3803).207" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725071" />
<Node Id="10312:[4680..4787).21" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 725072" />
<Node Id="10346:[10861..10875).6" Label="result.IsClear 725073" />
<Node Id="10354:[3684..3818).29" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 725074" />
<Node Id="10354:[3720..3803).213" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725075" />
<Node Id="10354:[3720..3803).214" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725076" />
<Node Id="10354:[3720..3803).215" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725077" />
<Node Id="10346:[10848..10877).16" Label="Debug.Assert(result.IsClear); 725078" />
<Node Id="10346:[10897..10914).6" Label="IsSubmissionClass 725079" />
<Node Id="10346:[7666..7775).6" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 725080" />
<Node Id="10346:[7672..7773).16" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 725081" />
<Node Id="10346:[10893..11127).11" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 725082" />
<Node Id="10346:[3525..3638).40" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 725083" />
<Node Id="10312:[7903..7936).21" Label="Debug.Assert(options.AreValid()); 725084" />
<Node Id="10312:[7916..7934).6" Label="options.AreValid() 725085" />
<Node Id="10353:[4698..4724).10" Label="param AreValid(this LookupOptions options) 725086" />
<Node Id="10353:[4750..4847).19" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 725087" />
<Node Id="10353:[4863..5000).37" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 725088" />
<Node Id="10353:[4863..5000).38" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 725089" />
<Node Id="10353:[5079..5183).19" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 725090" />
<Node Id="10353:[5197..5323).28" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 725091" />
<Node Id="10353:[5485..5759).55" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 725092" />
<Node Id="10353:[5485..5759).56" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 725093" />
<Node Id="10353:[5485..5759).57" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 725094" />
<Node Id="10353:[5775..5979).37" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 725095" />
<Node Id="10353:[5775..5979).39" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 725096" />
<Node Id="10353:[5995..6029).28" Label="return OnlyOneBitSet(onlyOptions); 725097" />
<Node Id="10353:[6002..6028).10" Label="OnlyOneBitSet(onlyOptions) 725098" />
<Node Id="10353:[6343..6358).10" Label="param OnlyOneBitSet(LookupOptions o) 725099" />
<Node Id="10353:[6384..6410).55" Label="return (o & (o - 1)) == 0; 725100" />
<Node Id="10353:[6384..6410).56" Label="return (o & (o - 1)) == 0; 725101" />
<Node Id="10312:[7952..7977).21" Label="Debug.Assert(arity $= 0); 725102" />
<Node Id="10312:[19087..19100).4" Label="param LookupMembersInNamespace(bool diagnose) 725103" />
<Node Id="10312:[61608..61629).8" Label="param GetCandidateMembers(Binder originalBinder) 725104" />
<Node Id="10312:[63473..63501).4" Label="param CheckViability(TypeSymbol accessThroughType) 725105" />
<Node Id="10312:[63503..63516).4" Label="param CheckViability(bool diagnose) 725106" />
<Node Id="10312:[63566..63612).4" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 725107" />
<Node Id="10312:[63638..63668).4" Label="bool inaccessibleViaQualifier; 725108" />
<Node Id="10312:[63682..63706).4" Label="DiagnosticInfo diagInfo; 725109" />
<Node Id="10312:[80978..80991).4" Label="param WrongArity(Symbol symbol) 725110" />
<Node Id="10312:[80993..81002).4" Label="param WrongArity(int arity) 725111" />
<Node Id="10312:[81004..81017).4" Label="param WrongArity(bool diagnose) 725112" />
<Node Id="10312:[81019..81040).4" Label="param WrongArity(LookupOptions options) 725113" />
<Node Id="10312:[81042..81069).4" Label="param WrongArity(out DiagnosticInfo diagInfo) 725114" />
<Node Id="10312:[81095..84034).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 725115" />
<Node Id="10312:[81196..82523).22" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 725116" />
<Node Id="10312:[81196..82523).23" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 725117" />
<Node Id="10312:[81196..82523).24" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 725118" />
<Node Id="10312:[81196..82523).27" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 725119" />
<Node Id="10312:[81319..81371).4" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 725120" />
<Node Id="10312:[81495..81570).16" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 725121" />
<Node Id="10312:[81495..81570).17" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 725122" />
<Node Id="10312:[81596..82500).19" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 725123" />
<Node Id="10312:[81596..82500).20" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 725124" />
<Node Id="10312:[81628..81659).4" Label="options.IsAttributeTypeLookup() 725125" />
<Node Id="10353:[7504..7530).8" Label="param IsAttributeTypeLookup(this LookupOptions options) 725126" />
<Node Id="10312:[81596..82500).23" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 725127" />
<Node Id="10312:[84050..84066).7" Label="diagInfo = null; 725128" />
<Node Id="10312:[66177..69285).40" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 725129" />
<Node Id="10312:[66291..66342).4" Label="RefineAccessThroughType(options, accessThroughType) 725130" />
<Node Id="10312:[75301..75322).4" Label="param RefineAccessThroughType(LookupOptions options) 725131" />
<Node Id="10312:[75324..75352).4" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 725132" />
<Node Id="10312:[75735..75866).16" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 725133" />
<Node Id="10312:[75735..75866).17" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 725134" />
<Node Id="10312:[75742..75804).4" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 725135" />
<Node Id="10312:[75735..75866).19" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 725136" />
<Node Id="10312:[66177..69285).43" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 725137" />
<Node Id="10312:[66177..69285).44" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 725138" />
<Node Id="10312:[66177..69285).45" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 725139" />
<Node Id="10312:[77543..77571).4" Label="param IsAccessible(TypeSymbol accessThroughType) 725140" />
<Node Id="10312:[77573..77604).4" Label="param IsAccessible(out bool failedThroughTypeCheck) 725141" />
<Node Id="10312:[77654..77700).4" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 725142" />
<Node Id="10312:[77726..77892).13" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 725143" />
<Node Id="10312:[77726..77892).14" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 725144" />
<Node Id="10312:[77730..77782).4" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 725145" />
<Node Id="10298:[471..492).53" Label="param Includes(this BinderFlags self) 725146" />
<Node Id="10298:[494..511).53" Label="param Includes(BinderFlags other) 725147" />
<Node Id="10312:[78402..78430).4" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 725148" />
<Node Id="10312:[78432..78463).4" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 725149" />
<Node Id="10312:[78513..78552).4" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 725150" />
<Node Id="10346:[8034..8062).2" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 725151" />
<Node Id="10346:[8064..8095).2" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 725152" />
<Node Id="10346:[8145..8184).2" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 725153" />
<Node Id="10286:[30098..30120).4" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 725154" />
<Node Id="10286:[30135..30160).4" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 725155" />
<Node Id="10286:[30175..30206).4" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 725156" />
<Node Id="10286:[30283..30330).4" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 725157" />
<Node Id="10286:[30012..30691).4" Label="param IsSymbolAccessibleConditional(this) 725158" />
<Node Id="10286:[30356..30522).13" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 725159" />
<Node Id="10286:[30356..30522).14" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 725160" />
<Node Id="10286:[30360..30412).4" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 725161" />
<Node Id="10298:[471..492).54" Label="param Includes(this BinderFlags self) 725162" />
<Node Id="10298:[494..511).54" Label="param Includes(BinderFlags other) 725163" />
<Node Id="10060:[2136..2158).4" Label="param IsSymbolAccessible(NamedTypeSymbol within) 725164" />
<Node Id="10060:[2173..2198).4" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 725165" />
<Node Id="10060:[2213..2244).4" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 725166" />
<Node Id="10060:[2320..2366).4" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 725167" />
<Node Id="10060:[5621..5634).4" Label="param IsSymbolAccessibleCore(Symbol within) 725168" />
<Node Id="10060:[5691..5716).4" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 725169" />
<Node Id="10060:[5731..5762).4" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 725170" />
<Node Id="10060:[5777..5806).4" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 725171" />
<Node Id="10060:[5882..5928).4" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 725172" />
<Node Id="10060:[5954..5991).13" Label="Debug.Assert((object)symbol != null); 725173" />
<Node Id="10060:[6005..6042).13" Label="Debug.Assert((object)within != null); 725174" />
<Node Id="10060:[6005..6042).14" Label="Debug.Assert((object)within != null); 725175" />
<Node Id="10060:[6056..6090).7" Label="Debug.Assert(within.IsDefinition); 725176" />
<Node Id="10060:[6104..6172).10" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725177" />
<Node Id="10060:[6188..6219).7" Label="failedThroughTypeCheck = false; 725178" />
<Node Id="10060:[10202..10215).4" Label="param IsNamedTypeAccessible(Symbol within) 725179" />
<Node Id="10060:[10265..10311).4" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 725180" />
<Node Id="10060:[10337..10405).10" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725181" />
<Node Id="10060:[10419..10454).13" Label="Debug.Assert((object)type != null); 725182" />
<Node Id="10060:[10470..10516).4" Label="var compilation = within.DeclaringCompilation; 725183" />
<Node Id="10060:[10532..10544).4" Label="bool unused; 725184" />
<Node Id="10060:[10558..11295).4" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 725185" />
<Node Id="10060:[11990..12013).4" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 725186" />
<Node Id="10060:[12078..12091).4" Label="param IsNonNestedTypeAccessible(Symbol within) 725187" />
<Node Id="10060:[12117..12185).10" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725188" />
<Node Id="10060:[12199..12238).13" Label="Debug.Assert((object)assembly != null); 725189" />
<Node Id="10060:[12199..12238).14" Label="Debug.Assert((object)assembly != null); 725190" />
<Node Id="10346:[11710..11746).4" Label="originalBinder.IsSemanticModelBinder 725191" />
<Node Id="10286:[2155..2260).8" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 725192" />
<Node Id="10286:[2191..2245).29" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 725193" />
<Node Id="10286:[2191..2245).30" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 725194" />
<Node Id="10286:[2198..2244).8" Label="this.Flags.Includes(BinderFlags.SemanticModel) 725195" />
<Node Id="10298:[471..492).56" Label="param Includes(this BinderFlags self) 725196" />
<Node Id="10298:[494..511).56" Label="param Includes(BinderFlags other) 725197" />
<Node Id="10345:[28225..28251).4" Label="param IsUsingAlias(bool callerIsSemanticModel) 725198" />
<Node Id="10345:[28927..28940).7" Label="return false; 725199" />
<Node Id="10346:[12205..12212).4" Label="return; 725200" />
<Node Id="10312:[4685..4699).12" Label="result.IsClear 725201" />
<Node Id="10354:[3684..3818).30" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 725202" />
<Node Id="10354:[3720..3803).221" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725203" />
<Node Id="10312:[4680..4787).23" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 725204" />
<Node Id="10312:[4749..4764).4" Label="binder = scope; 725205" />
<Node Id="10312:[4826..5058).56" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 725206" />
<Node Id="10312:[4826..5058).57" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 725207" />
<Node Id="10312:[5087..5101).4" Label="return binder; 725208" />
<Node Id="10319:[43504..43546).16" Label="diagnostics.Add(node, useSiteDiagnostics); 725209" />
<Node Id="10319:[43799..44676).19" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 725210" />
<Node Id="10319:[43853..43873).4" Label="IsViableType(result) 725211" />
<Node Id="10319:[41088..41107).4" Label="param IsViableType(LookupResult result) 725212" />
<Node Id="10319:[41138..41158).4" Label="result.IsMultiViable 725213" />
<Node Id="10354:[4919..5009).43" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 725214" />
<Node Id="10354:[4094..4107).59" Label="return _kind; 725215" />
<Node Id="10319:[41133..41220).7" Label="if (!result.IsMultiViable)
            {
                return false;
            } 725216" />
<Node Id="10319:[41254..41268).4" Label="result.Symbols 725217" />
<Node Id="10354:[4525..4595).7" Label="get
            {
                return _symbolList;
            } 725218" />
<Node Id="10354:[4561..4580).7" Label="return _symbolList; 725219" />
<Node Id="10319:[41236..41680).13" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 725220" />
<Node Id="10319:[41302..41665).4" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 725221" />
<Node Id="10319:[41634..41646).7" Label="return true; 725222" />
<Node Id="10319:[44751..44765).4" Label="bool wasError; 725223" />
<Node Id="10319:[84233..84242).4" Label="param ResultSymbol(int arity) 725224" />
<Node Id="10319:[84257..84273).4" Label="param ResultSymbol(SyntaxNode where) 725225" />
<Node Id="10319:[84288..84313).4" Label="param ResultSymbol(DiagnosticBag diagnostics) 725226" />
<Node Id="10319:[84374..84391).4" Label="param ResultSymbol(out bool wasError) 725227" />
<Node Id="10319:[84406..84447).4" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 725228" />
<Node Id="10319:[84462..84508).4" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 725229" />
<Node Id="10319:[84124..109887).4" Label="param ResultSymbol(this) 725230" />
<Node Id="10319:[85320..85348).13" Label="Debug.Assert(where != null); 725231" />
<Node Id="10319:[85320..85348).14" Label="Debug.Assert(where != null); 725232" />
<Node Id="10319:[85366..85400).13" Label="Debug.Assert(diagnostics != null); 725233" />
<Node Id="10319:[85366..85400).14" Label="Debug.Assert(diagnostics != null); 725234" />
<Node Id="10319:[85467..85484).7" Label="wasError = false; 725235" />
<Node Id="10319:[104874..105336).10" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 725236" />
<Node Id="10319:[104874..105336).11" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 725237" />
<Node Id="10319:[105368..106708).4" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 725238" />
<Node Id="10319:[105465..105535).12" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 725239" />
<Node Id="10319:[105465..105535).13" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 725240" />
<Node Id="10319:[76360..76385).3" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 725241" />
<Node Id="10319:[76387..76402).3" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 725242" />
<Node Id="10319:[76494..76582).9" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 725243" />
<Node Id="10319:[84691..84861).7" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 725244" />
<Node Id="10319:[84764..84846).19" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 725245" />
<Node Id="10319:[84764..84846).20" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 725246" />
<Node Id="10319:[84764..84846).22" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 725247" />
<Node Id="10319:[84764..84846).23" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 725248" />
<Node Id="10319:[84764..84845).4" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 725249" />
<Node Id="10306:[358886..358901).4" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 725250" />
<Node Id="10306:[358903..358930).4" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 725251" />
<Node Id="10306:[358932..358945).4" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 725252" />
<Node Id="10306:[358947..358972).4" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 725253" />
<Node Id="10306:[358838..360009).4" Label="param CheckRuntimeSupportForSymbolAccess(this) 725254" />
<Node Id="10306:[358998..359998).19" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 725255" />
<Node Id="10306:[358998..359998).20" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 725256" />
<Node Id="10319:[44948..45377).7" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 725257" />
<Node Id="10319:[45408..45422).4" Label="result.Free(); 725258" />
<Node Id="10287:[2377..2471).7" Label="if (symbol is null)
                {
                    return default;
                } 725259" />
<Node Id="10287:[791..833).7" Label="Debug.Assert(typeWithAnnotations.HasType); 725260" />
<Node Id="10287:[912..927).4" Label="_symbol = null; 725261" />
<Node Id="10287:[912..919).4" Label="_symbol 725262" />
<Node Id="10287:[945..972).4" Label="_isNullableEnabled = false; 725263" />
<Node Id="10287:[945..963).4" Label="_isNullableEnabled 725264" />
<Node Id="10286:[21546..21561).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 725265" />
<Node Id="10286:[21563..21583).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725266" />
<Node Id="10286:[22086..22108).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725267" />
<Node Id="10286:[22110..22130).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725268" />
<Node Id="10286:[15616..15690).16" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725269" />
<Node Id="10286:[15616..15690).17" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725270" />
<Node Id="10286:[15715..15910).4" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 725271" />
<Node Id="10286:[23056..23081).4" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 725272" />
<Node Id="10286:[23124..23146).4" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725273" />
<Node Id="10286:[23161..23181).4" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725274" />
<Node Id="10286:[23281..23301).4" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 725275" />
<Node Id="10286:[23380..23684).22" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 725276" />
<Node Id="10286:[23893..24026).7" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 725277" />
<Node Id="10286:[24545..24641).7" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 725278" />
<Node Id="10286:[24655..25349).4" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 725279" />
<Node Id="10286:[26910..26935).4" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 725280" />
<Node Id="10286:[26952..26974).4" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 725281" />
<Node Id="10286:[27002..27022).4" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 725282" />
<Node Id="10286:[27048..27088).13" Label="RoslynDebug.Assert(diagnostics != null); 725283" />
<Node Id="10286:[27048..27088).14" Label="RoslynDebug.Assert(diagnostics != null); 725284" />
<Node Id="10286:[27208..27236).7" Label="DiagnosticInfo? info = null; 725285" />
<Node Id="10286:[27250..27722).4" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 725286" />
<Node Id="10286:[27738..27845).10" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 725287" />
<Node Id="10286:[27738..27845).11" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 725288" />
<Node Id="10286:[27861..27873).4" Label="return kind; 725289" />
<Node Id="10286:[26281..26812).4" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 725290" />
<Node Id="10286:[26450..26769).4" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 725291" />
<Node Id="10287:[1680..1716).4" Label="=$ _symbol?.Kind == SymbolKind.Alias 725292" />
<Node Id="10287:[1683..1690).4" Label="_symbol 725293" />
<Node Id="10287:[1683..1716).7" Label="_symbol?.Kind == SymbolKind.Alias 725294" />
<Node Id="10319:[51935..52244).7" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 725295" />
<Node Id="10076:[5223..5250).14" Label="Debug.Assert(node != null); 725296" />
<Node Id="10076:[5277..5448).14" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 725297" />
<Node Id="10076:[5391..5433).1" Label="container.AssertMemberExposure(memberOpt); 725298" />
<Node Id="10076:[5391..5433).2" Label="container.AssertMemberExposure(memberOpt); 725299" />
<Node Id="10077:[4637..4671).1" Label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 725300" />
<Node Id="10077:[4591..7075).1" Label="param VisitMethodDeclaration(this) 725301" />
<Node Id="10077:[4705..4866).1" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 725302" />
<Node Id="10077:[4705..4866).2" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 725303" />
<Node Id="10077:[4705..4866).3" Label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))
                {
                    return VisitCore(methodDecl.Parent);
                } 725304" />
<Node Id="10077:[4886..4902).1" Label="NodeUsage usage; 725305" />
<Node Id="10077:[4920..5555).1" Label="if (LookupPosition.IsInBody(_position, methodDecl))
                {
                    usage = NodeUsage.MethodBody;
                }
                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 725306" />
<Node Id="10077:[4920..5555).2" Label="if (LookupPosition.IsInBody(_position, methodDecl))
                {
                    usage = NodeUsage.MethodBody;
                }
                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 725307" />
<Node Id="10077:[5083..5555).1" Label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 725308" />
<Node Id="10077:[5083..5555).2" Label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))
                {
                    usage = NodeUsage.MethodTypeParameters;
                }
                else
                {
                    // Normal - is when method itself is not involved (will use outer binder)
                    //          that would be if position is within the return type or method name
                    usage = NodeUsage.Normal;
                } 725309" />
<Node Id="10077:[5511..5536).1" Label="usage = NodeUsage.Normal; 725310" />
<Node Id="10077:[5575..5625).1" Label="var key = CreateBinderCacheKey(methodDecl, usage); 725311" />
<Node Id="10077:[5575..5625).2" Label="var key = CreateBinderCacheKey(methodDecl, usage); 725312" />
<Node Id="10077:[5585..5624).1" Label="CreateBinderCacheKey(methodDecl, usage) 725313" />
<Node Id="10077:[44159..44180).7" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 725314" />
<Node Id="10077:[44182..44197).7" Label="param CreateBinderCacheKey(NodeUsage usage) 725315" />
<Node Id="10077:[44231..44317).49" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 725316" />
<Node Id="10077:[44231..44317).51" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 725317" />
<Node Id="10077:[44335..44374).27" Label="return new BinderCacheKey(node, usage); 725318" />
<Node Id="10077:[44342..44373).7" Label="new BinderCacheKey(node, usage) 725319" />
<Node Id="10076:[853..1034).7" Label="param BinderCacheKey(this) 725320" />
<Node Id="10077:[5575..5625).3" Label="var key = CreateBinderCacheKey(methodDecl, usage); 725321" />
<Node Id="10077:[5645..5665).1" Label="Binder resultBinder; 725322" />
<Node Id="10077:[5688..5699).1" Label="binderCache 725323" />
<Node Id="10077:[2066..2158).11" Label="get
                {
                    return _factory._binderCache;
                } 725324" />
<Node Id="10077:[2110..2139).11" Label="return _factory._binderCache; 725325" />
<Node Id="10077:[5683..7020).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 725326" />
<Node Id="10077:[5683..7020).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 725327" />
<Node Id="10077:[5683..7020).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 725328" />
<Node Id="10077:[5683..7020).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 725329" />
<Node Id="10077:[5683..7020).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;
                    if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    }

                    SourceMemberMethodSymbol method = null;

                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    }

                    if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);
                    binderCache.TryAdd(key, resultBinder);
                } 725330" />
<Node Id="10077:[5776..5836).1" Label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 725331" />
<Node Id="10077:[5858..6188).1" Label="if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    } 725332" />
<Node Id="10077:[5858..6188).2" Label="if (parentType != null)
                    {
                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);
                    }
                    else
                    {
                        resultBinder = VisitCore(methodDecl.Parent);
                    } 725333" />
<Node Id="10077:[5930..6023).1" Label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 725334" />
<Node Id="10077:[5930..6023).2" Label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 725335" />
<Node Id="10077:[5945..6022).1" Label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 725336" />
<Node Id="10077:[32474..32502).4" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 725337" />
<Node Id="10077:[32504..32523).4" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 725338" />
<Node Id="10077:[44231..44317).57" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 725339" />
<Node Id="10077:[44231..44317).59" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 725340" />
<Node Id="10077:[6212..6251).1" Label="SourceMemberMethodSymbol method = null; 725341" />
<Node Id="10077:[6275..6566).1" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 725342" />
<Node Id="10077:[6590..6839).1" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 725343" />
<Node Id="10077:[6863..6941).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 725344" />
<Node Id="10077:[6878..6940).1" Label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 725345" />
<Node Id="10307:[3496..3521).4" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 725346" />
<Node Id="10307:[3452..3756).4" Label="param WithUnsafeRegionIfNecessary(this) 725347" />
<Node Id="10077:[6963..6974).1" Label="binderCache 725348" />
<Node Id="10077:[2110..2139).13" Label="return _factory._binderCache; 725349" />
<Node Id="10077:[6963..7001).1" Label="binderCache.TryAdd(key, resultBinder); 725350" />
<Node Id="10077:[6963..7001).2" Label="binderCache.TryAdd(key, resultBinder); 725351" />
<Node Id="10077:[6963..7001).3" Label="binderCache.TryAdd(key, resultBinder); 725352" />
<Node Id="10077:[6963..7001).5" Label="binderCache.TryAdd(key, resultBinder); 725353" />
<Node Id="10077:[7040..7060).1" Label="return resultBinder; 725354" />
<Node Id="10077:[2926..2971).47" Label="return ((CSharpSyntaxNode)node).Accept(this); 725355" />
<Node Id="10286:[1688..1781).25" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 725356" />
<Node Id="10298:[471..492).58" Label="param Includes(this BinderFlags self) 725357" />
<Node Id="10286:[1820..1963).25" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 725358" />
<Node Id="10298:[471..492).59" Label="param Includes(this BinderFlags self) 725359" />
<Node Id="10313:[1230..1280).1" Label="param ValidateParameterNameConflicts(ImmutableArray$TypeParameterSymbol$ typeParameters) 725360" />
<Node Id="10313:[1295..1337).1" Label="param ValidateParameterNameConflicts(ImmutableArray$ParameterSymbol$ parameters) 725361" />
<Node Id="10313:[1352..1376).1" Label="param ValidateParameterNameConflicts(bool allowShadowingNames) 725362" />
<Node Id="10313:[1391..1416).1" Label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 725363" />
<Node Id="10313:[1171..3563).1" Label="param ValidateParameterNameConflicts(this) 725364" />
<Node Id="10313:[1442..1480).1" Label="PooledHashSet$string$? tpNames = null; 725365" />
<Node Id="10313:[1494..2257).1" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 725366" />
<Node Id="10313:[2273..2310).1" Label="PooledHashSet$string$? pNames = null; 725367" />
<Node Id="10313:[2324..3491).1" Label="if (!parameters.IsDefaultOrEmpty)
            {
                pNames = PooledHashSet$string$.GetInstance();
                foreach (var p in parameters)
                {
                    var name = p.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    }

                    if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    }
                }
            } 725368" />
<Node Id="10313:[3507..3523).1" Label="tpNames?.Free(); 725369" />
<Node Id="10313:[3537..3552).1" Label="pNames?.Free(); 725370" />
<Node Id="10319:[20392..20435).1" Label="return bindPredefined(syntax, diagnostics); 725371" />
<Node Id="10319:[20392..20435).2" Label="return bindPredefined(syntax, diagnostics); 725372" />
<Node Id="10319:[20399..20434).1" Label="bindPredefined(syntax, diagnostics) 725373" />
<Node Id="10319:[27647..28051).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 725374" />
<Node Id="10319:[27647..28051).2" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 725375" />
<Node Id="10319:[27647..28051).3" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)
            {
                var predefinedType = (PredefinedTypeSyntax)syntax;
                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);
                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);
            } 725376" />
<Node Id="10319:[27790..27840).1" Label="var predefinedType = (PredefinedTypeSyntax)syntax; 725377" />
<Node Id="10319:[27858..27923).1" Label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 725378" />
<Node Id="10319:[27858..27923).2" Label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 725379" />
<Node Id="10319:[27869..27922).1" Label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 725380" />
<Node Id="10319:[39111..39136).1" Label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 725381" />
<Node Id="10319:[39138..39163).1" Label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 725382" />
<Node Id="10319:[39062..39279).1" Label="param BindPredefinedTypeSymbol(this) 725383" />
<Node Id="10319:[39189..39268).1" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 725384" />
<Node Id="10319:[39189..39268).6" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 725385" />
<Node Id="10319:[39189..39268).7" Label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 725386" />
<Node Id="10319:[39196..39267).1" Label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 725387" />
<Node Id="10319:[73460..73478).1" Label="param GetSpecialType(SpecialType typeId) 725388" />
<Node Id="10319:[73480..73505).1" Label="param GetSpecialType(DiagnosticBag diagnostics) 725389" />
<Node Id="10319:[73507..73522).1" Label="param GetSpecialType(SyntaxNode node) 725390" />
<Node Id="10319:[73420..73626).1" Label="param GetSpecialType(this) 725391" />
<Node Id="10319:[73548..73615).1" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 725392" />
<Node Id="10319:[73548..73615).2" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 725393" />
<Node Id="10319:[73548..73615).3" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 725394" />
<Node Id="10319:[73548..73615).4" Label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 725395" />
<Node Id="10319:[73555..73614).1" Label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 725396" />
<Node Id="10319:[73685..73714).1" Label="param GetSpecialType(CSharpCompilation compilation) 725397" />
<Node Id="10319:[73716..73734).1" Label="param GetSpecialType(SpecialType typeId) 725398" />
<Node Id="10319:[73736..73751).1" Label="param GetSpecialType(SyntaxNode node) 725399" />
<Node Id="10319:[73753..73778).1" Label="param GetSpecialType(DiagnosticBag diagnostics) 725400" />
<Node Id="10319:[73804..73868).1" Label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 725401" />
<Node Id="10319:[73804..73868).2" Label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 725402" />
<Node Id="10319:[73882..73975).1" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 725403" />
<Node Id="10319:[73882..73975).2" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 725404" />
<Node Id="10319:[73989..74045).1" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 725405" />
<Node Id="10319:[73989..74045).2" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 725406" />
<Node Id="10319:[73989..74045).3" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 725407" />
<Node Id="10319:[73989..74044).1" Label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 725408" />
<Node Id="10319:[76345..76358).4" Label="param ReportUseSiteDiagnostics(Symbol symbol) 725409" />
<Node Id="10319:[76360..76385).4" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 725410" />
<Node Id="10319:[76387..76402).4" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 725411" />
<Node Id="10319:[76494..76582).13" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 725412" />
<Node Id="10319:[76494..76582).14" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 725413" />
<Node Id="10319:[74059..74077).1" Label="return typeSymbol; 725414" />
<Node Id="10319:[27941..28036).1" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 725415" />
<Node Id="10319:[27975..28028).1" Label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 725416" />
<Node Id="10286:[10010..10027).5" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 725417" />
<Node Id="10286:[9966..10197).5" Label="param AreNullableAnnotationsEnabled(this) 725418" />
<Node Id="10319:[27941..28036).4" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 725419" />
<Node Id="10319:[28030..28034).1" Label="type 725420" />
<Node Id="10287:[2888..2927).1" Label="param operator(TypeWithAnnotations typeWithAnnotations) 725421" />
<Node Id="10287:[2961..3037).1" Label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 725422" />
<Node Id="10287:[2961..3037).2" Label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 725423" />
<Node Id="10287:[2968..3036).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 725424" />
<Node Id="10287:[718..757).5" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 725425" />
<Node Id="10287:[666..1076).5" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 725426" />
<Node Id="10287:[791..833).9" Label="Debug.Assert(typeWithAnnotations.HasType); 725427" />
<Node Id="10287:[912..927).5" Label="_symbol = null; 725428" />
<Node Id="10287:[912..919).5" Label="_symbol 725429" />
<Node Id="10287:[945..972).5" Label="_isNullableEnabled = false; 725430" />
<Node Id="10287:[945..963).5" Label="_isNullableEnabled 725431" />
<Node Id="10319:[27941..28036).5" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 725432" />
<Node Id="10319:[27941..28036).7" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 725433" />
<Node Id="10319:[27941..28036).9" Label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 725434" />
<Node Id="10286:[21546..21561).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 725435" />
<Node Id="10286:[21563..21583).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725436" />
<Node Id="10286:[22086..22108).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725437" />
<Node Id="10286:[22110..22130).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725438" />
<Node Id="10286:[15616..15690).21" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725439" />
<Node Id="10286:[15616..15690).22" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725440" />
<Node Id="10286:[15715..15910).5" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 725441" />
<Node Id="10286:[23124..23146).5" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725442" />
<Node Id="10286:[23161..23181).5" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725443" />
<Node Id="10286:[23281..23301).5" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 725444" />
<Node Id="10286:[23380..23684).29" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 725445" />
<Node Id="10286:[23893..24026).9" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 725446" />
<Node Id="10286:[24545..24641).9" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 725447" />
<Node Id="10286:[24655..25349).5" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 725448" />
<Node Id="10286:[26910..26935).5" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 725449" />
<Node Id="10286:[26952..26974).5" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 725450" />
<Node Id="10286:[27002..27022).5" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 725451" />
<Node Id="10286:[27048..27088).17" Label="RoslynDebug.Assert(diagnostics != null); 725452" />
<Node Id="10286:[27048..27088).18" Label="RoslynDebug.Assert(diagnostics != null); 725453" />
<Node Id="10286:[27208..27236).9" Label="DiagnosticInfo? info = null; 725454" />
<Node Id="10286:[27250..27722).5" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 725455" />
<Node Id="10286:[27738..27845).13" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 725456" />
<Node Id="10286:[27738..27845).14" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 725457" />
<Node Id="10286:[27861..27873).5" Label="return kind; 725458" />
<Node Id="10286:[26281..26812).5" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 725459" />
<Node Id="10286:[26450..26769).5" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 725460" />
<Node Id="10287:[1680..1716).5" Label="=$ _symbol?.Kind == SymbolKind.Alias 725461" />
<Node Id="10287:[1683..1690).5" Label="_symbol 725462" />
<Node Id="10287:[1683..1716).9" Label="_symbol?.Kind == SymbolKind.Alias 725463" />
<Node Id="10319:[51935..52244).9" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 725464" />
<Node Id="10060:[1398..1411).1" Label="param IsSymbolAccessible(Symbol symbol) 725465" />
<Node Id="10060:[1426..1448).1" Label="param IsSymbolAccessible(NamedTypeSymbol within) 725466" />
<Node Id="10060:[1463..1509).1" Label="param IsSymbolAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 725467" />
<Node Id="10060:[1524..1556).1" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 725468" />
<Node Id="10060:[1582..1610).1" Label="bool failedThroughTypeCheck; 725469" />
<Node Id="10060:[1624..1767).1" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725470" />
<Node Id="10060:[1624..1767).2" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725471" />
<Node Id="10060:[1624..1767).3" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725472" />
<Node Id="10060:[1624..1767).4" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725473" />
<Node Id="10060:[1624..1767).5" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725474" />
<Node Id="10060:[1624..1767).6" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725475" />
<Node Id="10060:[1624..1767).7" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725476" />
<Node Id="10060:[1631..1766).1" Label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics) 725477" />
<Node Id="10060:[5593..5606).5" Label="param IsSymbolAccessibleCore(Symbol symbol) 725478" />
<Node Id="10060:[5621..5634).5" Label="param IsSymbolAccessibleCore(Symbol within) 725479" />
<Node Id="10060:[5691..5716).5" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 725480" />
<Node Id="10060:[5731..5762).5" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 725481" />
<Node Id="10060:[5777..5806).5" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 725482" />
<Node Id="10060:[5821..5867).5" Label="param IsSymbolAccessibleCore(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 725483" />
<Node Id="10060:[5882..5928).5" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 725484" />
<Node Id="10060:[5954..5991).17" Label="Debug.Assert((object)symbol != null); 725485" />
<Node Id="10060:[5954..5991).18" Label="Debug.Assert((object)symbol != null); 725486" />
<Node Id="10060:[6005..6042).17" Label="Debug.Assert((object)within != null); 725487" />
<Node Id="10060:[6005..6042).18" Label="Debug.Assert((object)within != null); 725488" />
<Node Id="10060:[6056..6090).9" Label="Debug.Assert(within.IsDefinition); 725489" />
<Node Id="10060:[6104..6172).13" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725490" />
<Node Id="10060:[6188..6219).9" Label="failedThroughTypeCheck = false; 725491" />
<Node Id="10060:[6235..9907).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.ArrayType:
                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.PointerType:
                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.NamedType:
                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Alias:
                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Discard:
                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.FunctionPointerType:
                    var funcPtr = (FunctionPointerTypeSymbol)symbol;
                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }

                    foreach (var param in funcPtr.Signature.Parameters)
                    {
                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                        {
                            return false;
                        }
                    }

                    return true;

                case SymbolKind.ErrorType:
                    // Always assume that error types are accessible.
                    return true;

                case SymbolKind.TypeParameter:
                case SymbolKind.Parameter:
                case SymbolKind.Local:
                case SymbolKind.Label:
                case SymbolKind.Namespace:
                case SymbolKind.DynamicType:
                case SymbolKind.Assembly:
                case SymbolKind.NetModule:
                case SymbolKind.RangeVariable:
                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:
                    // These types of symbols are always accessible (if visible).
                    return true;

                case SymbolKind.Method:
                case SymbolKind.Property:
                case SymbolKind.Event:
                case SymbolKind.Field:
                    if (!symbol.RequiresInstanceReceiver())
                    {
                        // static members aren't accessed 'through' an 'instance' of any type.  So we
                        // null out the 'through' instance here.  This ensures that we'll understand
                        // accessing protected statics properly.
                        throughTypeOpt = null;
                    }

                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);

                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 725492" />
<Node Id="10060:[6235..9907).6" Label="switch (symbol.Kind)
            {
                case SymbolKind.ArrayType:
                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.PointerType:
                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.NamedType:
                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Alias:
                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Discard:
                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.FunctionPointerType:
                    var funcPtr = (FunctionPointerTypeSymbol)symbol;
                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }

                    foreach (var param in funcPtr.Signature.Parameters)
                    {
                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                        {
                            return false;
                        }
                    }

                    return true;

                case SymbolKind.ErrorType:
                    // Always assume that error types are accessible.
                    return true;

                case SymbolKind.TypeParameter:
                case SymbolKind.Parameter:
                case SymbolKind.Local:
                case SymbolKind.Label:
                case SymbolKind.Namespace:
                case SymbolKind.DynamicType:
                case SymbolKind.Assembly:
                case SymbolKind.NetModule:
                case SymbolKind.RangeVariable:
                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:
                    // These types of symbols are always accessible (if visible).
                    return true;

                case SymbolKind.Method:
                case SymbolKind.Property:
                case SymbolKind.Event:
                case SymbolKind.Field:
                    if (!symbol.RequiresInstanceReceiver())
                    {
                        // static members aren't accessed 'through' an 'instance' of any type.  So we
                        // null out the 'through' instance here.  This ensures that we'll understand
                        // accessing protected statics properly.
                        throughTypeOpt = null;
                    }

                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);

                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 725493" />
<Node Id="10060:[9192..9596).1" Label="if (!symbol.RequiresInstanceReceiver())
                    {
                        // static members aren't accessed 'through' an 'instance' of any type.  So we
                        // null out the 'through' instance here.  This ensures that we'll understand
                        // accessing protected statics properly.
                        throughTypeOpt = null;
                    } 725494" />
<Node Id="10060:[9620..9788).1" Label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725495" />
<Node Id="10060:[9620..9788).3" Label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725496" />
<Node Id="10060:[9620..9788).4" Label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725497" />
<Node Id="10060:[9620..9788).5" Label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725498" />
<Node Id="10060:[9620..9788).6" Label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725499" />
<Node Id="10060:[9620..9788).7" Label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725500" />
<Node Id="10060:[9620..9788).8" Label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725501" />
<Node Id="10060:[9627..9787).1" Label="IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics) 725502" />
<Node Id="10060:[13816..13846).1" Label="param IsMemberAccessible(NamedTypeSymbol containingType) 725503" />
<Node Id="10060:[13906..13941).1" Label="param IsMemberAccessible(Accessibility declaredAccessibility) 725504" />
<Node Id="10060:[13956..13969).1" Label="param IsMemberAccessible(Symbol within) 725505" />
<Node Id="10060:[13984..14009).1" Label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 725506" />
<Node Id="10060:[14024..14055).1" Label="param IsMemberAccessible(out bool failedThroughTypeCheck) 725507" />
<Node Id="10060:[14070..14099).1" Label="param IsMemberAccessible(CSharpCompilation compilation) 725508" />
<Node Id="10060:[14114..14160).1" Label="param IsMemberAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 725509" />
<Node Id="10060:[14175..14221).1" Label="param IsMemberAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 725510" />
<Node Id="10060:[14247..14315).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725511" />
<Node Id="10060:[14329..14374).1" Label="Debug.Assert((object)containingType != null); 725512" />
<Node Id="10060:[14329..14374).2" Label="Debug.Assert((object)containingType != null); 725513" />
<Node Id="10060:[14390..14421).1" Label="failedThroughTypeCheck = false; 725514" />
<Node Id="10060:[14508..14613).1" Label="if ((object)containingType == (object)within)
            {
                return true;
            } 725515" />
<Node Id="10060:[14726..14882).1" Label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))
            {
                return false;
            } 725516" />
<Node Id="10060:[14726..14882).2" Label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))
            {
                return false;
            } 725517" />
<Node Id="10060:[14726..14882).3" Label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))
            {
                return false;
            } 725518" />
<Node Id="10060:[14726..14882).4" Label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))
            {
                return false;
            } 725519" />
<Node Id="10060:[14731..14820).1" Label="IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved) 725520" />
<Node Id="10060:[10180..10200).5" Label="param IsNamedTypeAccessible(NamedTypeSymbol type) 725521" />
<Node Id="10060:[10202..10215).5" Label="param IsNamedTypeAccessible(Symbol within) 725522" />
<Node Id="10060:[10217..10263).5" Label="param IsNamedTypeAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 725523" />
<Node Id="10060:[10265..10311).5" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 725524" />
<Node Id="10060:[10337..10405).13" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725525" />
<Node Id="10060:[10419..10454).17" Label="Debug.Assert((object)type != null); 725526" />
<Node Id="10060:[10419..10454).18" Label="Debug.Assert((object)type != null); 725527" />
<Node Id="10060:[10470..10516).5" Label="var compilation = within.DeclaringCompilation; 725528" />
<Node Id="10060:[10532..10544).5" Label="bool unused; 725529" />
<Node Id="10060:[10558..11295).5" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 725530" />
<Node Id="10060:[11366..11675).37" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 725531" />
<Node Id="10060:[11990..12013).5" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 725532" />
<Node Id="10060:[12078..12091).5" Label="param IsNonNestedTypeAccessible(Symbol within) 725533" />
<Node Id="10060:[12117..12185).13" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725534" />
<Node Id="10060:[12199..12238).17" Label="Debug.Assert((object)assembly != null); 725535" />
<Node Id="10060:[12199..12238).18" Label="Debug.Assert((object)assembly != null); 725536" />
<Node Id="10060:[14954..15064).1" Label="if (declaredAccessibility == Accessibility.Public)
            {
                return true;
            } 725537" />
<Node Id="10060:[15037..15049).1" Label="return true; 725538" />
<Node Id="25002:[4395..4432).71" Label="var diagnostics = c.GetDiagnostics(); 725539" />
<Node Id="10325:[616..730).4" Label="param BuckStopsHereBinder(this) 725540" />
<Node Id="10286:[994..1034).5" Label="RoslynDebug.Assert(compilation != null); 725541" />
<Node Id="10286:[994..1034).6" Label="RoslynDebug.Assert(compilation != null); 725542" />
<Node Id="10286:[17886..18149).1" Label="get
            {
                if (_lazyConversions == null)
                {
                    Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null);
                }

                return _lazyConversions;
            } 725543" />
<Node Id="10286:[17922..18090).1" Label="if (_lazyConversions == null)
                {
                    Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null);
                } 725544" />
<Node Id="10286:[17922..18090).2" Label="if (_lazyConversions == null)
                {
                    Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null);
                } 725545" />
<Node Id="10286:[17992..18071).1" Label="Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null); 725546" />
<Node Id="10286:[17992..18071).2" Label="Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null); 725547" />
<Node Id="10286:[17992..18071).3" Label="Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null); 725548" />
<Node Id="10286:[18042..18063).1" Label="new Conversions(this) 725549" />
<Node Id="10842:[570..583).1" Label="param Conversions(Binder binder) 725550" />
<Node Id="10842:[551..714).1" Label="param Conversions(this) 725551" />
<Node Id="10842:[605..611).1" Label="binder 725552" />
<Node Id="10842:[636..637).1" Label="0 725553" />
<Node Id="10842:[659..664).1" Label="false 725554" />
<Node Id="10842:[687..691).1" Label="null 725555" />
<Node Id="10842:[551..714).2" Label="param Conversions(this) 725556" />
<Node Id="10842:[746..759).1" Label="param Conversions(Binder binder) 725557" />
<Node Id="10842:[761..786).1" Label="param Conversions(int currentRecursionDepth) 725558" />
<Node Id="10842:[788..811).1" Label="param Conversions(bool includeNullability) 725559" />
<Node Id="10842:[813..844).1" Label="param Conversions(Conversions otherNullabilityOpt) 725560" />
<Node Id="10842:[726..1022).1" Label="param Conversions(this) 725561" />
<Node Id="10842:[866..904).1" Label="binder.Compilation.Assembly.CorLibrary 725562" />
<Node Id="10842:[906..927).1" Label="currentRecursionDepth 725563" />
<Node Id="10842:[929..947).1" Label="includeNullability 725564" />
<Node Id="10842:[949..968).1" Label="otherNullabilityOpt 725565" />
<Node Id="10842:[726..1022).2" Label="param Conversions(this) 725566" />
<Node Id="10843:[1173..1198).3" Label="param ConversionsBase(AssemblySymbol corLibrary) 725567" />
<Node Id="10843:[1200..1225).3" Label="param ConversionsBase(int currentRecursionDepth) 725568" />
<Node Id="10843:[1227..1250).3" Label="param ConversionsBase(bool includeNullability) 725569" />
<Node Id="10843:[1252..1287).3" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 725570" />
<Node Id="10843:[734..744).3" Label="corLibrary 725571" />
<Node Id="10843:[778..799).3" Label="currentRecursionDepth 725572" />
<Node Id="10843:[835..853).3" Label="IncludeNullability 725573" />
<Node Id="10843:[1113..1134).3" Label="_lazyOtherNullability 725574" />
<Node Id="10843:[1313..1354).9" Label="Debug.Assert((object)corLibrary != null); 725575" />
<Node Id="10843:[1313..1354).10" Label="Debug.Assert((object)corLibrary != null); 725576" />
<Node Id="10843:[1368..1474).11" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 725577" />
<Node Id="10843:[1368..1474).12" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 725578" />
<Node Id="10843:[1488..1600).11" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 725579" />
<Node Id="10843:[1488..1600).12" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 725580" />
<Node Id="10843:[1659..1685).3" Label="this.currentRecursionDepth 725581" />
<Node Id="10843:[1724..1742).3" Label="IncludeNullability 725582" />
<Node Id="10843:[1778..1799).3" Label="_lazyOtherNullability 725583" />
<Node Id="10842:[531..538).1" Label="_binder 725584" />
<Node Id="10842:[994..1001).1" Label="_binder 725585" />
<Node Id="10286:[17992..18071).7" Label="Interlocked.CompareExchange(ref _lazyConversions, new Conversions(this), null); 725586" />
<Node Id="10286:[18110..18134).1" Label="return _lazyConversions; 725587" />
<Node Id="10843:[2103..2126).1" Label="param WithNullability(bool includeNullability) 725588" />
<Node Id="10843:[2062..2680).1" Label="param WithNullability(this) 725589" />
<Node Id="10843:[2152..2257).1" Label="if (IncludeNullability == includeNullability)
            {
                return this;
            } 725590" />
<Node Id="10843:[2271..2455).1" Label="if (_lazyOtherNullability == null)
            {
                Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null);
            } 725591" />
<Node Id="10843:[2271..2455).2" Label="if (_lazyOtherNullability == null)
            {
                Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null);
            } 725592" />
<Node Id="10843:[2338..2440).1" Label="Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null); 725593" />
<Node Id="10843:[2338..2440).2" Label="Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null); 725594" />
<Node Id="10843:[2393..2432).1" Label="WithNullabilityCore(includeNullability) 725595" />
<Node Id="10842:[1404..1427).1" Label="param WithNullabilityCore(bool includeNullability) 725596" />
<Node Id="10842:[1349..1614).1" Label="param WithNullabilityCore(this) 725597" />
<Node Id="10842:[1453..1508).1" Label="Debug.Assert(IncludeNullability != includeNullability); 725598" />
<Node Id="10842:[1522..1603).1" Label="return new Conversions(_binder, currentRecursionDepth, includeNullability, this); 725599" />
<Node Id="10842:[1522..1603).3" Label="return new Conversions(_binder, currentRecursionDepth, includeNullability, this); 725600" />
<Node Id="10842:[1522..1603).4" Label="return new Conversions(_binder, currentRecursionDepth, includeNullability, this); 725601" />
<Node Id="10842:[1522..1603).5" Label="return new Conversions(_binder, currentRecursionDepth, includeNullability, this); 725602" />
<Node Id="10842:[1529..1602).1" Label="new Conversions(_binder, currentRecursionDepth, includeNullability, this) 725603" />
<Node Id="10842:[746..759).2" Label="param Conversions(Binder binder) 725604" />
<Node Id="10842:[761..786).2" Label="param Conversions(int currentRecursionDepth) 725605" />
<Node Id="10842:[788..811).2" Label="param Conversions(bool includeNullability) 725606" />
<Node Id="10842:[813..844).2" Label="param Conversions(Conversions otherNullabilityOpt) 725607" />
<Node Id="10842:[726..1022).3" Label="param Conversions(this) 725608" />
<Node Id="10843:[734..744).4" Label="corLibrary 725609" />
<Node Id="10843:[778..799).4" Label="currentRecursionDepth 725610" />
<Node Id="10843:[835..853).4" Label="IncludeNullability 725611" />
<Node Id="10843:[1113..1134).4" Label="_lazyOtherNullability 725612" />
<Node Id="10843:[1313..1354).13" Label="Debug.Assert((object)corLibrary != null); 725613" />
<Node Id="10843:[1313..1354).14" Label="Debug.Assert((object)corLibrary != null); 725614" />
<Node Id="10843:[1368..1474).16" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 725615" />
<Node Id="10843:[1368..1474).17" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 725616" />
<Node Id="10843:[1368..1474).18" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 725617" />
<Node Id="10843:[1488..1600).16" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 725618" />
<Node Id="10843:[1488..1600).17" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 725619" />
<Node Id="10843:[1488..1600).18" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 725620" />
<Node Id="10842:[531..538).2" Label="_binder 725621" />
<Node Id="10843:[2338..2440).3" Label="Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null); 725622" />
<Node Id="10843:[2338..2440).5" Label="Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null); 725623" />
<Node Id="10843:[2338..2440).7" Label="Interlocked.CompareExchange(ref _lazyOtherNullability, WithNullabilityCore(includeNullability), null); 725624" />
<Node Id="10843:[2469..2546).1" Label="Debug.Assert(_lazyOtherNullability.IncludeNullability == includeNullability); 725625" />
<Node Id="10843:[2560..2626).1" Label="Debug.Assert(_lazyOtherNullability._lazyOtherNullability == this); 725626" />
<Node Id="10843:[2640..2669).1" Label="return _lazyOtherNullability; 725627" />
<Node Id="10843:[6907..6924).1" Label="param ClassifyImplicitConversionFromType(TypeSymbol source) 725628" />
<Node Id="10843:[6926..6948).1" Label="param ClassifyImplicitConversionFromType(TypeSymbol destination) 725629" />
<Node Id="10843:[6950..6996).1" Label="param ClassifyImplicitConversionFromType(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 725630" />
<Node Id="10843:[6854..8071).1" Label="param ClassifyImplicitConversionFromType(this) 725631" />
<Node Id="10843:[7022..7059).1" Label="Debug.Assert((object)source != null); 725632" />
<Node Id="10843:[7022..7059).2" Label="Debug.Assert((object)source != null); 725633" />
<Node Id="10843:[7073..7115).1" Label="Debug.Assert((object)destination != null); 725634" />
<Node Id="10843:[7073..7115).2" Label="Debug.Assert((object)destination != null); 725635" />
<Node Id="10843:[7212..7342).1" Label="if (HasIdentityConversionInternal(source, destination))
            {
                return Conversion.Identity;
            } 725636" />
<Node Id="10843:[7212..7342).2" Label="if (HasIdentityConversionInternal(source, destination))
            {
                return Conversion.Identity;
            } 725637" />
<Node Id="10843:[7216..7266).1" Label="HasIdentityConversionInternal(source, destination) 725638" />
<Node Id="10843:[72508..72524).1" Label="param HasIdentityConversionInternal(TypeSymbol type1) 725639" />
<Node Id="10843:[72526..72542).1" Label="param HasIdentityConversionInternal(TypeSymbol type2) 725640" />
<Node Id="10843:[72465..72650).1" Label="param HasIdentityConversionInternal(this) 725641" />
<Node Id="10843:[72568..72639).1" Label="return HasIdentityConversionInternal(type1, type2, IncludeNullability); 725642" />
<Node Id="10843:[72568..72639).2" Label="return HasIdentityConversionInternal(type1, type2, IncludeNullability); 725643" />
<Node Id="10843:[72568..72639).3" Label="return HasIdentityConversionInternal(type1, type2, IncludeNullability); 725644" />
<Node Id="10843:[72575..72638).1" Label="HasIdentityConversionInternal(type1, type2, IncludeNullability) 725645" />
<Node Id="10843:[71283..71299).1" Label="param HasIdentityConversionInternal(TypeSymbol type1) 725646" />
<Node Id="10843:[71301..71317).1" Label="param HasIdentityConversionInternal(TypeSymbol type2) 725647" />
<Node Id="10843:[71319..71342).1" Label="param HasIdentityConversionInternal(bool includeNullability) 725648" />
<Node Id="10843:[71916..71952).1" Label="Debug.Assert((object)type1 != null); 725649" />
<Node Id="10843:[71916..71952).2" Label="Debug.Assert((object)type1 != null); 725650" />
<Node Id="10843:[71966..72002).1" Label="Debug.Assert((object)type2 != null); 725651" />
<Node Id="10843:[71966..72002).2" Label="Debug.Assert((object)type2 != null); 725652" />
<Node Id="10843:[72205..72223).1" Label="includeNullability 725653" />
<Node Id="10843:[72187..72388).1" Label="var compareKind = includeNullability ?
                TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreNullableModifiersForReferenceTypes :
                TypeCompareKind.AllIgnoreOptions; 725654" />
<Node Id="10843:[72402..72442).1" Label="return type1.Equals(type2, compareKind); 725655" />
<Node Id="10843:[72402..72442).2" Label="return type1.Equals(type2, compareKind); 725656" />
<Node Id="10843:[72402..72442).3" Label="return type1.Equals(type2, compareKind); 725657" />
<Node Id="10843:[7307..7326).1" Label="Conversion.Identity 725658" />
<Node Id="10838:[9032..9055).1" Label="ConversionKind.Identity 725659" />
<Node Id="10838:[9017..9056).1" Label="new Conversion(ConversionKind.Identity) 725660" />
<Node Id="10838:[3566..3585).1" Label="param Conversion(ConversionKind kind) 725661" />
<Node Id="10838:[3547..3640).1" Label="param Conversion(this) 725662" />
<Node Id="10838:[3607..3611).1" Label="kind 725663" />
<Node Id="10838:[3613..3617).1" Label="null 725664" />
<Node Id="10838:[3382..3401).1" Label="param Conversion(ConversionKind kind) 725665" />
<Node Id="10838:[3416..3442).1" Label="param Conversion(UncommonData? uncommonData) 725666" />
<Node Id="10838:[3349..3535).1" Label="param Conversion(this) 725667" />
<Node Id="10838:[3468..3473).1" Label="_kind 725668" />
<Node Id="10838:[3495..3508).1" Label="_uncommonData 725669" />
<Node Id="10843:[7300..7327).1" Label="return Conversion.Identity; 725670" />
<Node Id="25002:[4395..4432).83" Label="var diagnostics = c.GetDiagnostics(); 725671" />
<Node Id="10838:[16000..16064).1" Label="get
            {
                return _kind;
            } 725672" />
<Node Id="10838:[16036..16049).1" Label="return _kind; 725673" />
<Node Id="10076:[5223..5250).18" Label="Debug.Assert(node != null); 725674" />
<Node Id="10077:[1142..1210).30" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 725675" />
<Node Id="10077:[44231..44317).65" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 725676" />
<Node Id="10077:[44231..44317).73" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 725677" />
<Node Id="10077:[6212..6251).3" Label="SourceMemberMethodSymbol method = null; 725678" />
<Node Id="10077:[6275..6566).4" Label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)
                    {
                        method = GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);
                    } 725679" />
<Node Id="10077:[6590..6839).3" Label="if (usage == NodeUsage.MethodBody)
                    {
                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);
                        resultBinder = new InMethodBinder(method, resultBinder);
                    } 725680" />
<Node Id="10307:[3290..3331).14" Label="Debug.Assert((object)containing != null); 725681" />
<Node Id="10286:[1605..1638).22" Label="RoslynDebug.Assert(next != null); 725682" />
<Node Id="10286:[1688..1781).31" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 725683" />
<Node Id="10298:[471..492).61" Label="param Includes(this BinderFlags self) 725684" />
<Node Id="10286:[1820..1963).31" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 725685" />
<Node Id="10298:[471..492).62" Label="param Includes(this BinderFlags self) 725686" />
<Node Id="10307:[1206..1253).14" Label="Debug.Assert(containingMemberOrLambda != null); 725687" />
<Node Id="10313:[1230..1280).2" Label="param ValidateParameterNameConflicts(ImmutableArray$TypeParameterSymbol$ typeParameters) 725688" />
<Node Id="10313:[1295..1337).2" Label="param ValidateParameterNameConflicts(ImmutableArray$ParameterSymbol$ parameters) 725689" />
<Node Id="10313:[1352..1376).2" Label="param ValidateParameterNameConflicts(bool allowShadowingNames) 725690" />
<Node Id="10313:[1391..1416).2" Label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 725691" />
<Node Id="10313:[1171..3563).2" Label="param ValidateParameterNameConflicts(this) 725692" />
<Node Id="10313:[1494..2257).2" Label="if (!typeParameters.IsDefaultOrEmpty)
            {
                tpNames = PooledHashSet$string$.GetInstance();
                foreach (var tp in typeParameters)
                {
                    var name = tp.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (!tpNames.Add(name))
                    {
                        // Type parameter declaration name conflicts are detected elsewhere
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);
                    }
                }
            } 725693" />
<Node Id="10313:[2324..3491).2" Label="if (!parameters.IsDefaultOrEmpty)
            {
                pNames = PooledHashSet$string$.GetInstance();
                foreach (var p in parameters)
                {
                    var name = p.Name;
                    if (string.IsNullOrEmpty(name))
                    {
                        continue;
                    }

                    if (tpNames != null && tpNames.Contains(name))
                    {
                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter
                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);
                    }

                    if (!pNames.Add(name))
                    {
                        // The parameter name '{0}' is a duplicate
                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);
                    }
                    else if (!allowShadowingNames)
                    {
                        ValidateDeclarationNameConflictsInScope(p, diagnostics);
                    }
                }
            } 725694" />
<Node Id="10319:[15096..15130).22" Label="Debug.Assert(diagnostics != null); 725695" />
<Node Id="10319:[39138..39163).2" Label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 725696" />
<Node Id="10319:[73480..73505).2" Label="param GetSpecialType(DiagnosticBag diagnostics) 725697" />
<Node Id="10319:[73507..73522).2" Label="param GetSpecialType(SyntaxNode node) 725698" />
<Node Id="10319:[73736..73751).2" Label="param GetSpecialType(SyntaxNode node) 725699" />
<Node Id="10319:[73753..73778).2" Label="param GetSpecialType(DiagnosticBag diagnostics) 725700" />
<Node Id="10319:[73882..73975).7" Label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 725701" />
<Node Id="10319:[76360..76385).5" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 725702" />
<Node Id="10319:[76387..76402).5" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 725703" />
<Node Id="10319:[76494..76582).17" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 725704" />
<Node Id="10287:[791..833).11" Label="Debug.Assert(typeWithAnnotations.HasType); 725705" />
<Node Id="10286:[21546..21561).6" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 725706" />
<Node Id="10286:[21563..21583).6" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725707" />
<Node Id="10286:[22086..22108).6" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725708" />
<Node Id="10286:[22110..22130).6" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725709" />
<Node Id="10286:[15616..15690).26" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725710" />
<Node Id="10286:[15616..15690).27" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 725711" />
<Node Id="10286:[15715..15910).6" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 725712" />
<Node Id="10286:[23124..23146).6" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 725713" />
<Node Id="10286:[23161..23181).6" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 725714" />
<Node Id="10286:[23281..23301).6" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 725715" />
<Node Id="10286:[23380..23684).36" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 725716" />
<Node Id="10286:[23893..24026).11" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 725717" />
<Node Id="10286:[24545..24641).11" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 725718" />
<Node Id="10286:[24655..25349).6" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 725719" />
<Node Id="10286:[26910..26935).6" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 725720" />
<Node Id="10286:[26952..26974).6" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 725721" />
<Node Id="10286:[27002..27022).6" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 725722" />
<Node Id="10286:[27048..27088).21" Label="RoslynDebug.Assert(diagnostics != null); 725723" />
<Node Id="10286:[27048..27088).22" Label="RoslynDebug.Assert(diagnostics != null); 725724" />
<Node Id="10286:[27208..27236).11" Label="DiagnosticInfo? info = null; 725725" />
<Node Id="10286:[27250..27722).6" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 725726" />
<Node Id="10286:[27738..27845).16" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 725727" />
<Node Id="10286:[27738..27845).17" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 725728" />
<Node Id="10286:[27861..27873).6" Label="return kind; 725729" />
<Node Id="10286:[26281..26812).6" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 725730" />
<Node Id="10286:[26450..26769).6" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 725731" />
<Node Id="10319:[51817..51842).6" Label="param UnwrapAlias(DiagnosticBag diagnostics) 725732" />
<Node Id="10319:[51844..51861).6" Label="param UnwrapAlias(SyntaxNode syntax) 725733" />
<Node Id="10319:[51863..51909).6" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 725734" />
<Node Id="10319:[51698..52285).6" Label="param UnwrapAlias(this) 725735" />
<Node Id="10287:[1680..1716).6" Label="=$ _symbol?.Kind == SymbolKind.Alias 725736" />
<Node Id="10287:[1683..1690).6" Label="_symbol 725737" />
<Node Id="10287:[1683..1716).11" Label="_symbol?.Kind == SymbolKind.Alias 725738" />
<Node Id="10319:[51935..52244).11" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 725739" />
<Node Id="10060:[1426..1448).2" Label="param IsSymbolAccessible(NamedTypeSymbol within) 725740" />
<Node Id="10060:[1524..1556).2" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 725741" />
<Node Id="10060:[1624..1767).15" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 725742" />
<Node Id="10060:[5621..5634).6" Label="param IsSymbolAccessibleCore(Symbol within) 725743" />
<Node Id="10060:[5691..5716).6" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 725744" />
<Node Id="10060:[5777..5806).6" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 725745" />
<Node Id="10060:[5954..5991).22" Label="Debug.Assert((object)symbol != null); 725746" />
<Node Id="10060:[6005..6042).22" Label="Debug.Assert((object)within != null); 725747" />
<Node Id="10060:[6056..6090).11" Label="Debug.Assert(within.IsDefinition); 725748" />
<Node Id="10060:[6104..6172).16" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725749" />
<Node Id="10060:[9620..9788).14" Label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725750" />
<Node Id="10060:[9620..9788).15" Label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725751" />
<Node Id="10060:[9620..9788).16" Label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725752" />
<Node Id="10060:[9620..9788).18" Label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 725753" />
<Node Id="10060:[13816..13846).2" Label="param IsMemberAccessible(NamedTypeSymbol containingType) 725754" />
<Node Id="10060:[13956..13969).2" Label="param IsMemberAccessible(Symbol within) 725755" />
<Node Id="10060:[13984..14009).2" Label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 725756" />
<Node Id="10060:[14024..14055).2" Label="param IsMemberAccessible(out bool failedThroughTypeCheck) 725757" />
<Node Id="10060:[14070..14099).2" Label="param IsMemberAccessible(CSharpCompilation compilation) 725758" />
<Node Id="10060:[14175..14221).2" Label="param IsMemberAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 725759" />
<Node Id="10060:[14247..14315).4" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725760" />
<Node Id="10060:[14329..14374).5" Label="Debug.Assert((object)containingType != null); 725761" />
<Node Id="10060:[14329..14374).6" Label="Debug.Assert((object)containingType != null); 725762" />
<Node Id="10060:[14390..14421).3" Label="failedThroughTypeCheck = false; 725763" />
<Node Id="10060:[14508..14613).3" Label="if ((object)containingType == (object)within)
            {
                return true;
            } 725764" />
<Node Id="10060:[10202..10215).6" Label="param IsNamedTypeAccessible(Symbol within) 725765" />
<Node Id="10060:[10265..10311).6" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 725766" />
<Node Id="10060:[10337..10405).16" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725767" />
<Node Id="10060:[10419..10454).21" Label="Debug.Assert((object)type != null); 725768" />
<Node Id="10060:[10419..10454).22" Label="Debug.Assert((object)type != null); 725769" />
<Node Id="10060:[10470..10516).6" Label="var compilation = within.DeclaringCompilation; 725770" />
<Node Id="10060:[10532..10544).6" Label="bool unused; 725771" />
<Node Id="10060:[10558..11295).6" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 725772" />
<Node Id="10060:[11366..11675).45" Label="return (object)containingType == null
                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)
                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 725773" />
<Node Id="10060:[11990..12013).6" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 725774" />
<Node Id="10060:[12078..12091).6" Label="param IsNonNestedTypeAccessible(Symbol within) 725775" />
<Node Id="10060:[12117..12185).16" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725776" />
<Node Id="10060:[12199..12238).21" Label="Debug.Assert((object)assembly != null); 725777" />
<Node Id="10060:[12199..12238).22" Label="Debug.Assert((object)assembly != null); 725778" />
<Node Id="10843:[2152..2257).3" Label="if (IncludeNullability == includeNullability)
            {
                return this;
            } 725779" />
<Node Id="10843:[2469..2546).4" Label="Debug.Assert(_lazyOtherNullability.IncludeNullability == includeNullability); 725780" />
<Node Id="10843:[2560..2626).4" Label="Debug.Assert(_lazyOtherNullability._lazyOtherNullability == this); 725781" />
<Node Id="10843:[7022..7059).6" Label="Debug.Assert((object)source != null); 725782" />
<Node Id="10843:[7073..7115).6" Label="Debug.Assert((object)destination != null); 725783" />
<Node Id="10843:[71916..71952).6" Label="Debug.Assert((object)type1 != null); 725784" />
<Node Id="10843:[71966..72002).6" Label="Debug.Assert((object)type2 != null); 725785" />
<Node Id="10076:[5223..5250).22" Label="Debug.Assert(node != null); 725786" />
<Node Id="10077:[1142..1210).37" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 725787" />
<Node Id="10077:[31258..31297).4" Label="NodeUsage extraInfo = NodeUsage.Normal; 725788" />
<Node Id="10077:[44231..44317).81" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 725789" />
<Node Id="10307:[3290..3331).18" Label="Debug.Assert((object)containing != null); 725790" />
<Node Id="10286:[1605..1638).26" Label="RoslynDebug.Assert(next != null); 725791" />
<Node Id="10286:[1688..1781).37" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 725792" />
<Node Id="10298:[471..492).63" Label="param Includes(this BinderFlags self) 725793" />
<Node Id="10286:[1820..1963).37" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 725794" />
<Node Id="10298:[471..492).64" Label="param Includes(this BinderFlags self) 725795" />
<Node Id="10307:[1206..1253).18" Label="Debug.Assert(containingMemberOrLambda != null); 725796" />
<Node Id="10319:[15096..15130).26" Label="Debug.Assert(diagnostics != null); 725797" />
<Node Id="10319:[42478..42805).13" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 725798" />
<Node Id="10319:[42821..42938).33" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 725799" />
<Node Id="10319:[42839..42937).5" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 725800" />
<Node Id="10319:[63849..63870).5" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 725801" />
<Node Id="10319:[63885..63919).5" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 725802" />
<Node Id="10319:[63934..63945).5" Label="param CreateErrorIfLookupOnTypeParameter(string name) 725803" />
<Node Id="10319:[63960..63969).5" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 725804" />
<Node Id="10319:[63984..64009).5" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 725805" />
<Node Id="10319:[63768..64484).5" Label="param CreateErrorIfLookupOnTypeParameter(this) 725806" />
<Node Id="10319:[64035..64445).17" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 725807" />
<Node Id="10319:[64035..64445).18" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 725808" />
<Node Id="10319:[64461..64473).9" Label="return null; 725809" />
<Node Id="10319:[42821..42938).39" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 725810" />
<Node Id="10319:[42952..43079).13" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 725811" />
<Node Id="10319:[42952..43079).14" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 725812" />
<Node Id="10354:[11312..11328).7" Label="instance.IsClear 725813" />
<Node Id="10354:[3684..3818).31" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 725814" />
<Node Id="10354:[3720..3803).225" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725815" />
<Node Id="10354:[3720..3803).226" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725816" />
<Node Id="10354:[3720..3803).227" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725817" />
<Node Id="10354:[11299..11330).19" Label="Debug.Assert(instance.IsClear); 725818" />
<Node Id="10319:[50330..50355).5" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 725819" />
<Node Id="10312:[3905..3919).5" Label="result.IsClear 725820" />
<Node Id="10354:[3684..3818).32" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 725821" />
<Node Id="10354:[3720..3803).233" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725822" />
<Node Id="10354:[3720..3803).234" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725823" />
<Node Id="10354:[3720..3803).235" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725824" />
<Node Id="10312:[3892..3921).13" Label="Debug.Assert(result.IsClear); 725825" />
<Node Id="10312:[3935..3968).17" Label="Debug.Assert(options.AreValid()); 725826" />
<Node Id="10312:[3948..3966).5" Label="options.AreValid() 725827" />
<Node Id="10353:[4698..4724).11" Label="param AreValid(this LookupOptions options) 725828" />
<Node Id="10353:[4750..4847).21" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 725829" />
<Node Id="10353:[4863..5000).41" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 725830" />
<Node Id="10353:[4863..5000).42" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 725831" />
<Node Id="10353:[5079..5183).21" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 725832" />
<Node Id="10353:[5197..5323).31" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 725833" />
<Node Id="10353:[5485..5759).61" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 725834" />
<Node Id="10353:[5485..5759).62" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 725835" />
<Node Id="10353:[5485..5759).63" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 725836" />
<Node Id="10353:[5775..5979).41" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 725837" />
<Node Id="10353:[5775..5979).43" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 725838" />
<Node Id="10353:[5995..6029).31" Label="return OnlyOneBitSet(onlyOptions); 725839" />
<Node Id="10353:[6002..6028).11" Label="OnlyOneBitSet(onlyOptions) 725840" />
<Node Id="10353:[6343..6358).11" Label="param OnlyOneBitSet(LookupOptions o) 725841" />
<Node Id="10353:[6384..6410).61" Label="return (o & (o - 1)) == 0; 725842" />
<Node Id="10353:[6384..6410).62" Label="return (o & (o - 1)) == 0; 725843" />
<Node Id="10312:[5188..5207).5" Label="param LookupSymbolsInSingleBinder(LookupResult result) 725844" />
<Node Id="10312:[5209..5220).5" Label="param LookupSymbolsInSingleBinder(string name) 725845" />
<Node Id="10312:[5222..5231).5" Label="param LookupSymbolsInSingleBinder(int arity) 725846" />
<Node Id="10312:[5233..5272).5" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 725847" />
<Node Id="10312:[5274..5295).5" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 725848" />
<Node Id="10312:[5297..5318).5" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 725849" />
<Node Id="10312:[5320..5333).5" Label="param LookupSymbolsInSingleBinder(bool diagnose) 725850" />
<Node Id="10312:[5124..5404).5" Label="param LookupSymbolsInSingleBinder(this) 725851" />
<Node Id="10312:[4685..4699).13" Label="result.IsClear 725852" />
<Node Id="10354:[3684..3818).33" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 725853" />
<Node Id="10354:[3720..3803).241" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725854" />
<Node Id="10354:[3720..3803).242" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725855" />
<Node Id="10354:[3720..3803).243" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725856" />
<Node Id="10312:[4680..4787).25" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 725857" />
<Node Id="10312:[4826..5058).61" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 725858" />
<Node Id="10312:[4826..5058).62" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 725859" />
<Node Id="10382:[1340..1359).3" Label="param LookupSymbolsInSingleBinder(LookupResult result) 725860" />
<Node Id="10382:[1374..1383).3" Label="param LookupSymbolsInSingleBinder(int arity) 725861" />
<Node Id="10382:[1385..1424).3" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 725862" />
<Node Id="10382:[1426..1447).3" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 725863" />
<Node Id="10382:[1449..1470).3" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 725864" />
<Node Id="10382:[1472..1485).3" Label="param LookupSymbolsInSingleBinder(bool diagnose) 725865" />
<Node Id="10382:[1572..1586).3" Label="result.IsClear 725866" />
<Node Id="10354:[3684..3818).34" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 725867" />
<Node Id="10354:[3720..3803).249" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725868" />
<Node Id="10354:[3720..3803).250" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725869" />
<Node Id="10354:[3720..3803).251" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725870" />
<Node Id="10382:[1559..1588).7" Label="Debug.Assert(result.IsClear); 725871" />
<Node Id="10382:[1619..1629).3" Label="LookupMask 725872" />
<Node Id="10382:[913..1046).3" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 725873" />
<Node Id="10382:[949..1031).5" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 725874" />
<Node Id="10382:[1604..1691).11" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 725875" />
<Node Id="10382:[1604..1691).12" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 725876" />
<Node Id="10382:[1604..1691).13" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 725877" />
<Node Id="10346:[10861..10875).7" Label="result.IsClear 725878" />
<Node Id="10354:[3684..3818).36" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 725879" />
<Node Id="10354:[3720..3803).265" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725880" />
<Node Id="10354:[3720..3803).266" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725881" />
<Node Id="10354:[3720..3803).267" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 725882" />
<Node Id="10346:[10848..10877).19" Label="Debug.Assert(result.IsClear); 725883" />
<Node Id="10346:[10897..10914).7" Label="IsSubmissionClass 725884" />
<Node Id="10346:[7666..7775).7" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 725885" />
<Node Id="10346:[7672..7773).19" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 725886" />
<Node Id="10346:[10893..11127).13" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 725887" />
<Node Id="10346:[3525..3638).47" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 725888" />
<Node Id="10312:[7903..7936).25" Label="Debug.Assert(options.AreValid()); 725889" />
<Node Id="10312:[7916..7934).7" Label="options.AreValid() 725890" />
<Node Id="10353:[4698..4724).12" Label="param AreValid(this LookupOptions options) 725891" />
<Node Id="10353:[4750..4847).23" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 725892" />
<Node Id="10353:[4863..5000).45" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 725893" />
<Node Id="10353:[4863..5000).46" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 725894" />
<Node Id="10353:[5079..5183).23" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 725895" />
<Node Id="10353:[5197..5323).34" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 725896" />
<Node Id="10353:[5485..5759).67" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 725897" />
<Node Id="10353:[5485..5759).68" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 725898" />
<Node Id="10353:[5485..5759).69" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 725899" />
<Node Id="10353:[5775..5979).45" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 725900" />
<Node Id="10353:[5775..5979).47" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 725901" />
<Node Id="10353:[5995..6029).34" Label="return OnlyOneBitSet(onlyOptions); 725902" />
<Node Id="10353:[6002..6028).12" Label="OnlyOneBitSet(onlyOptions) 725903" />
<Node Id="10353:[6343..6358).12" Label="param OnlyOneBitSet(LookupOptions o) 725904" />
<Node Id="10353:[6384..6410).67" Label="return (o & (o - 1)) == 0; 725905" />
<Node Id="10353:[6384..6410).68" Label="return (o & (o - 1)) == 0; 725906" />
<Node Id="10312:[7952..7977).25" Label="Debug.Assert(arity $= 0); 725907" />
<Node Id="10312:[61608..61629).9" Label="param GetCandidateMembers(Binder originalBinder) 725908" />
<Node Id="10312:[63473..63501).5" Label="param CheckViability(TypeSymbol accessThroughType) 725909" />
<Node Id="10312:[63503..63516).5" Label="param CheckViability(bool diagnose) 725910" />
<Node Id="10312:[63566..63612).5" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 725911" />
<Node Id="10312:[63638..63668).5" Label="bool inaccessibleViaQualifier; 725912" />
<Node Id="10312:[80978..80991).5" Label="param WrongArity(Symbol symbol) 725913" />
<Node Id="10312:[80993..81002).5" Label="param WrongArity(int arity) 725914" />
<Node Id="10312:[81004..81017).5" Label="param WrongArity(bool diagnose) 725915" />
<Node Id="10312:[81019..81040).5" Label="param WrongArity(LookupOptions options) 725916" />
<Node Id="10312:[81042..81069).5" Label="param WrongArity(out DiagnosticInfo diagInfo) 725917" />
<Node Id="10312:[81095..84034).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 725918" />
<Node Id="10312:[81196..82523).29" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 725919" />
<Node Id="10312:[81196..82523).30" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 725920" />
<Node Id="10312:[81196..82523).31" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 725921" />
<Node Id="10312:[81196..82523).34" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 725922" />
<Node Id="10312:[81319..81371).5" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 725923" />
<Node Id="10312:[81495..81570).21" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 725924" />
<Node Id="10312:[81495..81570).22" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 725925" />
<Node Id="10312:[81596..82500).25" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 725926" />
<Node Id="10312:[81596..82500).26" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 725927" />
<Node Id="10312:[81628..81659).5" Label="options.IsAttributeTypeLookup() 725928" />
<Node Id="10353:[7504..7530).10" Label="param IsAttributeTypeLookup(this LookupOptions options) 725929" />
<Node Id="10312:[81596..82500).29" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 725930" />
<Node Id="10312:[84050..84066).9" Label="diagInfo = null; 725931" />
<Node Id="10312:[66177..69285).52" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 725932" />
<Node Id="10312:[66291..66342).5" Label="RefineAccessThroughType(options, accessThroughType) 725933" />
<Node Id="10312:[75301..75322).5" Label="param RefineAccessThroughType(LookupOptions options) 725934" />
<Node Id="10312:[75324..75352).5" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 725935" />
<Node Id="10312:[75735..75866).21" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 725936" />
<Node Id="10312:[75735..75866).22" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 725937" />
<Node Id="10312:[75742..75804).5" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 725938" />
<Node Id="10312:[75735..75866).24" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 725939" />
<Node Id="10312:[66177..69285).55" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 725940" />
<Node Id="10312:[66177..69285).57" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 725941" />
<Node Id="10312:[77543..77571).5" Label="param IsAccessible(TypeSymbol accessThroughType) 725942" />
<Node Id="10312:[77573..77604).5" Label="param IsAccessible(out bool failedThroughTypeCheck) 725943" />
<Node Id="10312:[77654..77700).5" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 725944" />
<Node Id="10312:[77726..77892).17" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 725945" />
<Node Id="10312:[77726..77892).18" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 725946" />
<Node Id="10312:[77730..77782).5" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 725947" />
<Node Id="10298:[471..492).68" Label="param Includes(this BinderFlags self) 725948" />
<Node Id="10298:[494..511).68" Label="param Includes(BinderFlags other) 725949" />
<Node Id="10312:[78402..78430).5" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 725950" />
<Node Id="10312:[78432..78463).5" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 725951" />
<Node Id="10312:[78513..78552).5" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 725952" />
<Node Id="10376:[1085..1113).3" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 725953" />
<Node Id="10376:[1115..1146).3" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 725954" />
<Node Id="10376:[1196..1235).3" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 725955" />
<Node Id="10376:[1028..1425).3" Label="param IsAccessibleHelper(this) 725956" />
<Node Id="10286:[30135..30160).5" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 725957" />
<Node Id="10286:[30175..30206).5" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 725958" />
<Node Id="10286:[30283..30330).5" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 725959" />
<Node Id="10286:[30012..30691).5" Label="param IsSymbolAccessibleConditional(this) 725960" />
<Node Id="10286:[30356..30522).17" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 725961" />
<Node Id="10286:[30356..30522).18" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 725962" />
<Node Id="10286:[30360..30412).5" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 725963" />
<Node Id="10298:[471..492).69" Label="param Includes(this BinderFlags self) 725964" />
<Node Id="10298:[494..511).69" Label="param Includes(BinderFlags other) 725965" />
<Node Id="10060:[2136..2158).5" Label="param IsSymbolAccessible(NamedTypeSymbol within) 725966" />
<Node Id="10060:[2173..2198).5" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 725967" />
<Node Id="10060:[2213..2244).5" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 725968" />
<Node Id="10060:[2320..2366).5" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 725969" />
<Node Id="10060:[5621..5634).7" Label="param IsSymbolAccessibleCore(Symbol within) 725970" />
<Node Id="10060:[5691..5716).7" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 725971" />
<Node Id="10060:[5731..5762).7" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 725972" />
<Node Id="10060:[5777..5806).7" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 725973" />
<Node Id="10060:[5882..5928).7" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 725974" />
<Node Id="10060:[5954..5991).25" Label="Debug.Assert((object)symbol != null); 725975" />
<Node Id="10060:[6005..6042).25" Label="Debug.Assert((object)within != null); 725976" />
<Node Id="10060:[6005..6042).26" Label="Debug.Assert((object)within != null); 725977" />
<Node Id="10060:[6056..6090).13" Label="Debug.Assert(within.IsDefinition); 725978" />
<Node Id="10060:[6104..6172).19" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725979" />
<Node Id="10060:[6188..6219).13" Label="failedThroughTypeCheck = false; 725980" />
<Node Id="10060:[10202..10215).7" Label="param IsNamedTypeAccessible(Symbol within) 725981" />
<Node Id="10060:[10265..10311).7" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 725982" />
<Node Id="10060:[10337..10405).19" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725983" />
<Node Id="10060:[10419..10454).25" Label="Debug.Assert((object)type != null); 725984" />
<Node Id="10060:[10470..10516).7" Label="var compilation = within.DeclaringCompilation; 725985" />
<Node Id="10060:[10532..10544).7" Label="bool unused; 725986" />
<Node Id="10060:[10558..11295).7" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 725987" />
<Node Id="10060:[11990..12013).7" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 725988" />
<Node Id="10060:[12078..12091).7" Label="param IsNonNestedTypeAccessible(Symbol within) 725989" />
<Node Id="10060:[12117..12185).19" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 725990" />
<Node Id="10060:[12199..12238).25" Label="Debug.Assert((object)assembly != null); 725991" />
<Node Id="10060:[12199..12238).26" Label="Debug.Assert((object)assembly != null); 725992" />
<Node Id="10346:[11710..11746).5" Label="originalBinder.IsSemanticModelBinder 725993" />
<Node Id="10286:[2155..2260).9" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 725994" />
<Node Id="10286:[2191..2245).33" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 725995" />
<Node Id="10286:[2191..2245).34" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 725996" />
<Node Id="10286:[2198..2244).9" Label="this.Flags.Includes(BinderFlags.SemanticModel) 725997" />
<Node Id="10298:[471..492).71" Label="param Includes(this BinderFlags self) 725998" />
<Node Id="10298:[494..511).71" Label="param Includes(BinderFlags other) 725999" />
<Node Id="10345:[28225..28251).5" Label="param IsUsingAlias(bool callerIsSemanticModel) 726000" />
<Node Id="10345:[28927..28940).9" Label="return false; 726001" />
<Node Id="10346:[12205..12212).5" Label="return; 726002" />
<Node Id="10354:[3720..3803).273" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726003" />
<Node Id="10312:[4680..4787).29" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 726004" />
<Node Id="10312:[4749..4764).5" Label="binder = scope; 726005" />
<Node Id="10312:[5087..5101).5" Label="return binder; 726006" />
<Node Id="10319:[43799..44676).25" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 726007" />
<Node Id="10319:[43853..43873).5" Label="IsViableType(result) 726008" />
<Node Id="10319:[41088..41107).5" Label="param IsViableType(LookupResult result) 726009" />
<Node Id="10319:[41138..41158).5" Label="result.IsMultiViable 726010" />
<Node Id="10354:[4919..5009).50" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 726011" />
<Node Id="10354:[4094..4107).68" Label="return _kind; 726012" />
<Node Id="10319:[41133..41220).9" Label="if (!result.IsMultiViable)
            {
                return false;
            } 726013" />
<Node Id="10319:[41254..41268).5" Label="result.Symbols 726014" />
<Node Id="10354:[4525..4595).9" Label="get
            {
                return _symbolList;
            } 726015" />
<Node Id="10354:[4561..4580).9" Label="return _symbolList; 726016" />
<Node Id="10319:[41236..41680).17" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 726017" />
<Node Id="10319:[41302..41665).5" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 726018" />
<Node Id="10319:[41634..41646).9" Label="return true; 726019" />
<Node Id="10319:[44751..44765).5" Label="bool wasError; 726020" />
<Node Id="10319:[84257..84273).5" Label="param ResultSymbol(SyntaxNode where) 726021" />
<Node Id="10319:[84288..84313).5" Label="param ResultSymbol(DiagnosticBag diagnostics) 726022" />
<Node Id="10319:[84374..84391).5" Label="param ResultSymbol(out bool wasError) 726023" />
<Node Id="10319:[84406..84447).5" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 726024" />
<Node Id="10319:[84462..84508).5" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 726025" />
<Node Id="10319:[84124..109887).5" Label="param ResultSymbol(this) 726026" />
<Node Id="10319:[85320..85348).17" Label="Debug.Assert(where != null); 726027" />
<Node Id="10319:[85320..85348).18" Label="Debug.Assert(where != null); 726028" />
<Node Id="10319:[85366..85400).17" Label="Debug.Assert(diagnostics != null); 726029" />
<Node Id="10319:[85366..85400).18" Label="Debug.Assert(diagnostics != null); 726030" />
<Node Id="10319:[85467..85484).9" Label="wasError = false; 726031" />
<Node Id="10319:[104874..105336).13" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 726032" />
<Node Id="10319:[104874..105336).14" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 726033" />
<Node Id="10319:[105368..106708).5" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 726034" />
<Node Id="10319:[105465..105535).17" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 726035" />
<Node Id="10319:[76360..76385).6" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 726036" />
<Node Id="10319:[76387..76402).6" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 726037" />
<Node Id="10319:[76494..76582).21" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 726038" />
<Node Id="10319:[84691..84861).9" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 726039" />
<Node Id="10319:[84764..84846).25" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726040" />
<Node Id="10319:[84764..84846).26" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726041" />
<Node Id="10319:[84764..84846).28" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726042" />
<Node Id="10319:[84764..84846).29" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726043" />
<Node Id="10319:[84764..84845).5" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 726044" />
<Node Id="10306:[358886..358901).5" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 726045" />
<Node Id="10306:[358903..358930).5" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 726046" />
<Node Id="10306:[358932..358945).5" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 726047" />
<Node Id="10306:[358947..358972).5" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 726048" />
<Node Id="10306:[358838..360009).5" Label="param CheckRuntimeSupportForSymbolAccess(this) 726049" />
<Node Id="10306:[358998..359998).25" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 726050" />
<Node Id="10306:[358998..359998).26" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 726051" />
<Node Id="10319:[44948..45377).9" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 726052" />
<Node Id="10354:[11428..11441).7" Label="this.Clear(); 726053" />
<Node Id="10319:[45408..45422).5" Label="result.Free(); 726054" />
<Node Id="10287:[2377..2471).9" Label="if (symbol is null)
                {
                    return default;
                } 726055" />
<Node Id="10287:[791..833).13" Label="Debug.Assert(typeWithAnnotations.HasType); 726056" />
<Node Id="10286:[21546..21561).7" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 726057" />
<Node Id="10286:[21563..21583).7" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726058" />
<Node Id="10286:[22086..22108).7" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 726059" />
<Node Id="10286:[22110..22130).7" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726060" />
<Node Id="10286:[15616..15690).31" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 726061" />
<Node Id="10286:[15616..15690).32" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 726062" />
<Node Id="10286:[15715..15910).7" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 726063" />
<Node Id="10286:[23124..23146).7" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 726064" />
<Node Id="10286:[23161..23181).7" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726065" />
<Node Id="10286:[23281..23301).7" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 726066" />
<Node Id="10286:[23380..23684).43" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 726067" />
<Node Id="10286:[23893..24026).13" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 726068" />
<Node Id="10286:[24545..24641).13" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 726069" />
<Node Id="10286:[24655..25349).7" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 726070" />
<Node Id="10286:[26910..26935).7" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 726071" />
<Node Id="10286:[26952..26974).7" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 726072" />
<Node Id="10286:[27002..27022).7" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 726073" />
<Node Id="10286:[27048..27088).25" Label="RoslynDebug.Assert(diagnostics != null); 726074" />
<Node Id="10286:[27048..27088).26" Label="RoslynDebug.Assert(diagnostics != null); 726075" />
<Node Id="10286:[27208..27236).13" Label="DiagnosticInfo? info = null; 726076" />
<Node Id="10286:[27250..27722).7" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 726077" />
<Node Id="10286:[27738..27845).19" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 726078" />
<Node Id="10286:[27738..27845).20" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 726079" />
<Node Id="10286:[27861..27873).7" Label="return kind; 726080" />
<Node Id="10286:[26281..26812).7" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 726081" />
<Node Id="10286:[26450..26769).7" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 726082" />
<Node Id="10319:[51817..51842).7" Label="param UnwrapAlias(DiagnosticBag diagnostics) 726083" />
<Node Id="10319:[51844..51861).7" Label="param UnwrapAlias(SyntaxNode syntax) 726084" />
<Node Id="10319:[51863..51909).7" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 726085" />
<Node Id="10319:[51698..52285).7" Label="param UnwrapAlias(this) 726086" />
<Node Id="10287:[1680..1716).7" Label="=$ _symbol?.Kind == SymbolKind.Alias 726087" />
<Node Id="10287:[1683..1690).7" Label="_symbol 726088" />
<Node Id="10287:[1683..1716).13" Label="_symbol?.Kind == SymbolKind.Alias 726089" />
<Node Id="10319:[51935..52244).13" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 726090" />
<Node Id="10076:[5223..5250).26" Label="Debug.Assert(node != null); 726091" />
<Node Id="10077:[44231..44317).89" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 726092" />
<Node Id="10286:[1688..1781).43" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 726093" />
<Node Id="10298:[471..492).72" Label="param Includes(this BinderFlags self) 726094" />
<Node Id="10286:[1820..1963).43" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 726095" />
<Node Id="10298:[471..492).73" Label="param Includes(this BinderFlags self) 726096" />
<Node Id="10319:[42478..42805).16" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 726097" />
<Node Id="10319:[42821..42938).41" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 726098" />
<Node Id="10319:[42839..42937).6" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 726099" />
<Node Id="10319:[63849..63870).6" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 726100" />
<Node Id="10319:[63885..63919).6" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 726101" />
<Node Id="10319:[63934..63945).6" Label="param CreateErrorIfLookupOnTypeParameter(string name) 726102" />
<Node Id="10319:[63960..63969).6" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 726103" />
<Node Id="10319:[63984..64009).6" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 726104" />
<Node Id="10319:[63768..64484).6" Label="param CreateErrorIfLookupOnTypeParameter(this) 726105" />
<Node Id="10319:[64035..64445).21" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 726106" />
<Node Id="10319:[64035..64445).22" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 726107" />
<Node Id="10319:[64461..64473).11" Label="return null; 726108" />
<Node Id="10319:[42821..42938).47" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 726109" />
<Node Id="10319:[42952..43079).16" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 726110" />
<Node Id="10319:[42952..43079).17" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 726111" />
<Node Id="10354:[11312..11328).8" Label="instance.IsClear 726112" />
<Node Id="10354:[3684..3818).38" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 726113" />
<Node Id="10354:[3720..3803).277" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726114" />
<Node Id="10354:[3720..3803).278" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726115" />
<Node Id="10354:[3720..3803).279" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726116" />
<Node Id="10354:[11299..11330).22" Label="Debug.Assert(instance.IsClear); 726117" />
<Node Id="10319:[50330..50355).6" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 726118" />
<Node Id="10312:[3905..3919).6" Label="result.IsClear 726119" />
<Node Id="10354:[3684..3818).39" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 726120" />
<Node Id="10354:[3720..3803).285" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726121" />
<Node Id="10354:[3720..3803).286" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726122" />
<Node Id="10354:[3720..3803).287" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726123" />
<Node Id="10312:[3892..3921).16" Label="Debug.Assert(result.IsClear); 726124" />
<Node Id="10312:[3935..3968).21" Label="Debug.Assert(options.AreValid()); 726125" />
<Node Id="10312:[3948..3966).6" Label="options.AreValid() 726126" />
<Node Id="10353:[4698..4724).13" Label="param AreValid(this LookupOptions options) 726127" />
<Node Id="10353:[4750..4847).25" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 726128" />
<Node Id="10353:[4863..5000).49" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 726129" />
<Node Id="10353:[4863..5000).50" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 726130" />
<Node Id="10353:[5079..5183).25" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 726131" />
<Node Id="10353:[5197..5323).37" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 726132" />
<Node Id="10353:[5485..5759).73" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 726133" />
<Node Id="10353:[5485..5759).74" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 726134" />
<Node Id="10353:[5485..5759).75" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 726135" />
<Node Id="10353:[5775..5979).49" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 726136" />
<Node Id="10353:[5775..5979).51" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 726137" />
<Node Id="10353:[5995..6029).37" Label="return OnlyOneBitSet(onlyOptions); 726138" />
<Node Id="10353:[6002..6028).13" Label="OnlyOneBitSet(onlyOptions) 726139" />
<Node Id="10353:[6343..6358).13" Label="param OnlyOneBitSet(LookupOptions o) 726140" />
<Node Id="10353:[6384..6410).73" Label="return (o & (o - 1)) == 0; 726141" />
<Node Id="10353:[6384..6410).74" Label="return (o & (o - 1)) == 0; 726142" />
<Node Id="10312:[5188..5207).6" Label="param LookupSymbolsInSingleBinder(LookupResult result) 726143" />
<Node Id="10312:[5209..5220).6" Label="param LookupSymbolsInSingleBinder(string name) 726144" />
<Node Id="10312:[5222..5231).6" Label="param LookupSymbolsInSingleBinder(int arity) 726145" />
<Node Id="10312:[5233..5272).6" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 726146" />
<Node Id="10312:[5274..5295).6" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 726147" />
<Node Id="10312:[5297..5318).6" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 726148" />
<Node Id="10312:[5320..5333).6" Label="param LookupSymbolsInSingleBinder(bool diagnose) 726149" />
<Node Id="10312:[5124..5404).6" Label="param LookupSymbolsInSingleBinder(this) 726150" />
<Node Id="10312:[4685..4699).16" Label="result.IsClear 726151" />
<Node Id="10354:[3684..3818).40" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 726152" />
<Node Id="10354:[3720..3803).293" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726153" />
<Node Id="10354:[3720..3803).294" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726154" />
<Node Id="10354:[3720..3803).295" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726155" />
<Node Id="10312:[4680..4787).31" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 726156" />
<Node Id="10312:[4826..5058).76" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 726157" />
<Node Id="10312:[4826..5058).77" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 726158" />
<Node Id="10382:[1340..1359).4" Label="param LookupSymbolsInSingleBinder(LookupResult result) 726159" />
<Node Id="10382:[1374..1383).4" Label="param LookupSymbolsInSingleBinder(int arity) 726160" />
<Node Id="10382:[1385..1424).4" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 726161" />
<Node Id="10382:[1426..1447).4" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 726162" />
<Node Id="10382:[1449..1470).4" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 726163" />
<Node Id="10382:[1472..1485).4" Label="param LookupSymbolsInSingleBinder(bool diagnose) 726164" />
<Node Id="10382:[1572..1586).4" Label="result.IsClear 726165" />
<Node Id="10354:[3684..3818).41" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 726166" />
<Node Id="10354:[3720..3803).301" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726167" />
<Node Id="10354:[3720..3803).302" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726168" />
<Node Id="10354:[3720..3803).303" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726169" />
<Node Id="10382:[1559..1588).10" Label="Debug.Assert(result.IsClear); 726170" />
<Node Id="10382:[1619..1629).4" Label="LookupMask 726171" />
<Node Id="10382:[913..1046).4" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 726172" />
<Node Id="10382:[949..1031).7" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 726173" />
<Node Id="10382:[1604..1691).16" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 726174" />
<Node Id="10382:[1604..1691).17" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 726175" />
<Node Id="10382:[1604..1691).18" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 726176" />
<Node Id="10346:[10861..10875).8" Label="result.IsClear 726177" />
<Node Id="10354:[3684..3818).43" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 726178" />
<Node Id="10354:[3720..3803).317" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726179" />
<Node Id="10354:[3720..3803).318" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726180" />
<Node Id="10354:[3720..3803).319" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726181" />
<Node Id="10346:[10848..10877).22" Label="Debug.Assert(result.IsClear); 726182" />
<Node Id="10346:[10897..10914).8" Label="IsSubmissionClass 726183" />
<Node Id="10346:[7666..7775).8" Label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 726184" />
<Node Id="10346:[7672..7773).22" Label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 726185" />
<Node Id="10346:[10893..11127).15" Label="if (IsSubmissionClass)
            {
                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);
                return;
            } 726186" />
<Node Id="10346:[3525..3638).54" Label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 726187" />
<Node Id="10312:[7903..7936).29" Label="Debug.Assert(options.AreValid()); 726188" />
<Node Id="10312:[7916..7934).8" Label="options.AreValid() 726189" />
<Node Id="10353:[4698..4724).14" Label="param AreValid(this LookupOptions options) 726190" />
<Node Id="10353:[4750..4847).27" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 726191" />
<Node Id="10353:[4863..5000).53" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 726192" />
<Node Id="10353:[4863..5000).54" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 726193" />
<Node Id="10353:[5079..5183).27" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 726194" />
<Node Id="10353:[5197..5323).40" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 726195" />
<Node Id="10353:[5485..5759).79" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 726196" />
<Node Id="10353:[5485..5759).80" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 726197" />
<Node Id="10353:[5485..5759).81" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 726198" />
<Node Id="10353:[5775..5979).53" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 726199" />
<Node Id="10353:[5775..5979).55" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 726200" />
<Node Id="10353:[5995..6029).40" Label="return OnlyOneBitSet(onlyOptions); 726201" />
<Node Id="10353:[6002..6028).14" Label="OnlyOneBitSet(onlyOptions) 726202" />
<Node Id="10353:[6343..6358).14" Label="param OnlyOneBitSet(LookupOptions o) 726203" />
<Node Id="10353:[6384..6410).79" Label="return (o & (o - 1)) == 0; 726204" />
<Node Id="10353:[6384..6410).80" Label="return (o & (o - 1)) == 0; 726205" />
<Node Id="10312:[7952..7977).29" Label="Debug.Assert(arity $= 0); 726206" />
<Node Id="10312:[61608..61629).10" Label="param GetCandidateMembers(Binder originalBinder) 726207" />
<Node Id="10312:[63473..63501).6" Label="param CheckViability(TypeSymbol accessThroughType) 726208" />
<Node Id="10312:[63566..63612).6" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 726209" />
<Node Id="10312:[63638..63668).6" Label="bool inaccessibleViaQualifier; 726210" />
<Node Id="10312:[80978..80991).6" Label="param WrongArity(Symbol symbol) 726211" />
<Node Id="10312:[80993..81002).6" Label="param WrongArity(int arity) 726212" />
<Node Id="10312:[81004..81017).6" Label="param WrongArity(bool diagnose) 726213" />
<Node Id="10312:[81019..81040).6" Label="param WrongArity(LookupOptions options) 726214" />
<Node Id="10312:[81042..81069).6" Label="param WrongArity(out DiagnosticInfo diagInfo) 726215" />
<Node Id="10312:[81095..84034).6" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 726216" />
<Node Id="10312:[81196..82523).36" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 726217" />
<Node Id="10312:[81196..82523).37" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 726218" />
<Node Id="10312:[81196..82523).38" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 726219" />
<Node Id="10312:[81196..82523).41" Label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    } 726220" />
<Node Id="10312:[81319..81371).6" Label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 726221" />
<Node Id="10312:[81495..81570).26" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 726222" />
<Node Id="10312:[81495..81570).27" Label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 726223" />
<Node Id="10312:[81596..82500).31" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 726224" />
<Node Id="10312:[81596..82500).32" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 726225" />
<Node Id="10312:[81628..81659).6" Label="options.IsAttributeTypeLookup() 726226" />
<Node Id="10353:[7504..7530).12" Label="param IsAttributeTypeLookup(this LookupOptions options) 726227" />
<Node Id="10312:[81596..82500).35" Label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        } 726228" />
<Node Id="10312:[84050..84066).11" Label="diagInfo = null; 726229" />
<Node Id="10312:[66291..66342).6" Label="RefineAccessThroughType(options, accessThroughType) 726230" />
<Node Id="10312:[75301..75322).6" Label="param RefineAccessThroughType(LookupOptions options) 726231" />
<Node Id="10312:[75324..75352).6" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 726232" />
<Node Id="10312:[75735..75866).26" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 726233" />
<Node Id="10312:[75735..75866).27" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 726234" />
<Node Id="10312:[75742..75804).6" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 726235" />
<Node Id="10312:[75735..75866).29" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 726236" />
<Node Id="10312:[77543..77571).6" Label="param IsAccessible(TypeSymbol accessThroughType) 726237" />
<Node Id="10312:[77573..77604).6" Label="param IsAccessible(out bool failedThroughTypeCheck) 726238" />
<Node Id="10312:[77654..77700).6" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 726239" />
<Node Id="10312:[77726..77892).21" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 726240" />
<Node Id="10312:[77726..77892).22" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 726241" />
<Node Id="10312:[77730..77782).6" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 726242" />
<Node Id="10298:[471..492).77" Label="param Includes(this BinderFlags self) 726243" />
<Node Id="10298:[494..511).77" Label="param Includes(BinderFlags other) 726244" />
<Node Id="10312:[78402..78430).6" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 726245" />
<Node Id="10312:[78432..78463).6" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 726246" />
<Node Id="10312:[78513..78552).6" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 726247" />
<Node Id="10376:[1085..1113).4" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 726248" />
<Node Id="10376:[1115..1146).4" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 726249" />
<Node Id="10376:[1196..1235).4" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 726250" />
<Node Id="10376:[1028..1425).4" Label="param IsAccessibleHelper(this) 726251" />
<Node Id="10286:[30135..30160).6" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 726252" />
<Node Id="10286:[30175..30206).6" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 726253" />
<Node Id="10286:[30283..30330).6" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 726254" />
<Node Id="10286:[30012..30691).6" Label="param IsSymbolAccessibleConditional(this) 726255" />
<Node Id="10286:[30356..30522).21" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 726256" />
<Node Id="10286:[30356..30522).22" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 726257" />
<Node Id="10286:[30360..30412).6" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 726258" />
<Node Id="10298:[471..492).78" Label="param Includes(this BinderFlags self) 726259" />
<Node Id="10298:[494..511).78" Label="param Includes(BinderFlags other) 726260" />
<Node Id="10060:[2136..2158).6" Label="param IsSymbolAccessible(NamedTypeSymbol within) 726261" />
<Node Id="10060:[2173..2198).6" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 726262" />
<Node Id="10060:[2213..2244).6" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 726263" />
<Node Id="10060:[2320..2366).6" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 726264" />
<Node Id="10060:[5621..5634).8" Label="param IsSymbolAccessibleCore(Symbol within) 726265" />
<Node Id="10060:[5691..5716).8" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 726266" />
<Node Id="10060:[5731..5762).8" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 726267" />
<Node Id="10060:[5777..5806).8" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 726268" />
<Node Id="10060:[5882..5928).8" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 726269" />
<Node Id="10060:[5954..5991).29" Label="Debug.Assert((object)symbol != null); 726270" />
<Node Id="10060:[6005..6042).29" Label="Debug.Assert((object)within != null); 726271" />
<Node Id="10060:[6005..6042).30" Label="Debug.Assert((object)within != null); 726272" />
<Node Id="10060:[6056..6090).15" Label="Debug.Assert(within.IsDefinition); 726273" />
<Node Id="10060:[6104..6172).22" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 726274" />
<Node Id="10060:[6188..6219).15" Label="failedThroughTypeCheck = false; 726275" />
<Node Id="10060:[10202..10215).8" Label="param IsNamedTypeAccessible(Symbol within) 726276" />
<Node Id="10060:[10265..10311).8" Label="param IsNamedTypeAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 726277" />
<Node Id="10060:[10337..10405).22" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 726278" />
<Node Id="10060:[10419..10454).29" Label="Debug.Assert((object)type != null); 726279" />
<Node Id="10060:[10470..10516).8" Label="var compilation = within.DeclaringCompilation; 726280" />
<Node Id="10060:[10532..10544).8" Label="bool unused; 726281" />
<Node Id="10060:[10558..11295).8" Label="if (!type.IsDefinition)
            {
                // All type argument must be accessible.
                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);
                foreach (var typeArg in typeArgs)
                {
                    // type parameters are always accessible, so don't check those (so common it's
                    // worth optimizing this).
                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }
                }
            } 726282" />
<Node Id="10060:[11990..12013).8" Label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 726283" />
<Node Id="10060:[12078..12091).8" Label="param IsNonNestedTypeAccessible(Symbol within) 726284" />
<Node Id="10060:[12117..12185).22" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 726285" />
<Node Id="10060:[12199..12238).29" Label="Debug.Assert((object)assembly != null); 726286" />
<Node Id="10060:[12199..12238).30" Label="Debug.Assert((object)assembly != null); 726287" />
<Node Id="10346:[11710..11746).6" Label="originalBinder.IsSemanticModelBinder 726288" />
<Node Id="10286:[2155..2260).10" Label="get
            {
                return this.Flags.Includes(BinderFlags.SemanticModel);
            } 726289" />
<Node Id="10286:[2191..2245).37" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 726290" />
<Node Id="10286:[2191..2245).38" Label="return this.Flags.Includes(BinderFlags.SemanticModel); 726291" />
<Node Id="10286:[2198..2244).10" Label="this.Flags.Includes(BinderFlags.SemanticModel) 726292" />
<Node Id="10298:[471..492).80" Label="param Includes(this BinderFlags self) 726293" />
<Node Id="10298:[494..511).80" Label="param Includes(BinderFlags other) 726294" />
<Node Id="10345:[28225..28251).6" Label="param IsUsingAlias(bool callerIsSemanticModel) 726295" />
<Node Id="10345:[28927..28940).11" Label="return false; 726296" />
<Node Id="10346:[12205..12212).6" Label="return; 726297" />
<Node Id="10354:[3720..3803).325" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 726298" />
<Node Id="10312:[4680..4787).35" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 726299" />
<Node Id="10312:[4749..4764).6" Label="binder = scope; 726300" />
<Node Id="10312:[5087..5101).6" Label="return binder; 726301" />
<Node Id="10319:[43799..44676).31" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 726302" />
<Node Id="10319:[43853..43873).6" Label="IsViableType(result) 726303" />
<Node Id="10319:[41088..41107).6" Label="param IsViableType(LookupResult result) 726304" />
<Node Id="10319:[41138..41158).6" Label="result.IsMultiViable 726305" />
<Node Id="10354:[4919..5009).57" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 726306" />
<Node Id="10354:[4094..4107).77" Label="return _kind; 726307" />
<Node Id="10319:[41133..41220).11" Label="if (!result.IsMultiViable)
            {
                return false;
            } 726308" />
<Node Id="10319:[41254..41268).6" Label="result.Symbols 726309" />
<Node Id="10354:[4525..4595).11" Label="get
            {
                return _symbolList;
            } 726310" />
<Node Id="10354:[4561..4580).11" Label="return _symbolList; 726311" />
<Node Id="10319:[41236..41680).21" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 726312" />
<Node Id="10319:[41302..41665).6" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 726313" />
<Node Id="10319:[41634..41646).11" Label="return true; 726314" />
<Node Id="10319:[44751..44765).6" Label="bool wasError; 726315" />
<Node Id="10319:[84288..84313).6" Label="param ResultSymbol(DiagnosticBag diagnostics) 726316" />
<Node Id="10319:[84374..84391).6" Label="param ResultSymbol(out bool wasError) 726317" />
<Node Id="10319:[84406..84447).6" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 726318" />
<Node Id="10319:[84462..84508).6" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 726319" />
<Node Id="10319:[84124..109887).6" Label="param ResultSymbol(this) 726320" />
<Node Id="10319:[85320..85348).21" Label="Debug.Assert(where != null); 726321" />
<Node Id="10319:[85366..85400).21" Label="Debug.Assert(diagnostics != null); 726322" />
<Node Id="10319:[85366..85400).22" Label="Debug.Assert(diagnostics != null); 726323" />
<Node Id="10319:[85467..85484).11" Label="wasError = false; 726324" />
<Node Id="10319:[104874..105336).16" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 726325" />
<Node Id="10319:[104874..105336).17" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 726326" />
<Node Id="10319:[105368..106708).6" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 726327" />
<Node Id="10319:[76360..76385).7" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 726328" />
<Node Id="10319:[76387..76402).7" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 726329" />
<Node Id="10319:[76494..76582).25" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 726330" />
<Node Id="10319:[84691..84861).11" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 726331" />
<Node Id="10319:[84764..84846).31" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726332" />
<Node Id="10319:[84764..84846).32" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726333" />
<Node Id="10319:[84764..84846).34" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726334" />
<Node Id="10319:[84764..84846).35" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 726335" />
<Node Id="10319:[84764..84845).6" Label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 726336" />
<Node Id="10306:[358886..358901).6" Label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 726337" />
<Node Id="10306:[358903..358930).6" Label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 726338" />
<Node Id="10306:[358932..358945).6" Label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 726339" />
<Node Id="10306:[358947..358972).6" Label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 726340" />
<Node Id="10306:[358838..360009).6" Label="param CheckRuntimeSupportForSymbolAccess(this) 726341" />
<Node Id="10306:[358998..359998).31" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 726342" />
<Node Id="10306:[358998..359998).32" Label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)
            {
                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&
                    !symbol.IsImplementableInterfaceMember())
                {
                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);
                }
                else
                {
                    switch (symbol.DeclaredAccessibility)
                    {
                        case Accessibility.Protected:
                        case Accessibility.ProtectedOrInternal:
                        case Accessibility.ProtectedAndInternal:

                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);
                            break;
                    }
                }
            } 726343" />
<Node Id="10319:[44948..45377).11" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 726344" />
<Node Id="10354:[11428..11441).8" Label="this.Clear(); 726345" />
<Node Id="10319:[45408..45422).6" Label="result.Free(); 726346" />
<Node Id="10287:[2377..2471).11" Label="if (symbol is null)
                {
                    return default;
                } 726347" />
<Node Id="10287:[791..833).15" Label="Debug.Assert(typeWithAnnotations.HasType); 726348" />
<Node Id="10286:[21546..21561).8" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 726349" />
<Node Id="10286:[21563..21583).8" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726350" />
<Node Id="10286:[22086..22108).8" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 726351" />
<Node Id="10286:[22110..22130).8" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726352" />
<Node Id="10286:[15616..15690).36" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 726353" />
<Node Id="10286:[15616..15690).37" Label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 726354" />
<Node Id="10286:[15715..15910).8" Label="member switch
                {
                    null =$ null,
                    NamedTypeSymbol namedType =$ namedType,
                    _ =$ member.ContainingType
                } 726355" />
<Node Id="10286:[23124..23146).8" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 726356" />
<Node Id="10286:[23161..23181).8" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 726357" />
<Node Id="10286:[23281..23301).8" Label="param ReportDiagnosticsIfObsolete(BinderFlags location) 726358" />
<Node Id="10286:[23380..23684).50" Label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||
                         symbol.Kind == SymbolKind.Field ||
                         symbol.Kind == SymbolKind.Method ||
                         symbol.Kind == SymbolKind.Event ||
                         symbol.Kind == SymbolKind.Property); 726359" />
<Node Id="10286:[23893..24026).15" Label="if (symbol.Kind == SymbolKind.Method)
            {
                symbol = ((MethodSymbol)symbol).ConstructedFrom;
            } 726360" />
<Node Id="10286:[24545..24641).15" Label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 726361" />
<Node Id="10286:[24655..25349).8" Label="if (checkOverridingSymbol)
            {
                // If we have a base receiver, we must be done with declaration binding, so it should
                // be safe to decode diagnostics.  We want to do this since reporting for the overriding
                // member is conditional on reporting for the overridden member (i.e. we need a definite
                // answer so we don't double-report).  You might think that double reporting just results
                // in cascading diagnostics, but it's possible that the second diagnostic is an error
                // while the first is merely a warning.
                leastOverriddenSymbol.GetAttributes();
            } 726362" />
<Node Id="10286:[26910..26935).8" Label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 726363" />
<Node Id="10286:[26952..26974).8" Label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 726364" />
<Node Id="10286:[27002..27022).8" Label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 726365" />
<Node Id="10286:[27048..27088).29" Label="RoslynDebug.Assert(diagnostics != null); 726366" />
<Node Id="10286:[27048..27088).30" Label="RoslynDebug.Assert(diagnostics != null); 726367" />
<Node Id="10286:[27208..27236).15" Label="DiagnosticInfo? info = null; 726368" />
<Node Id="10286:[27250..27722).8" Label="switch (kind)
            {
                case ObsoleteDiagnosticKind.Diagnostic:
                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);
                    break;
                case ObsoleteDiagnosticKind.Lazy:
                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:
                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);
                    break;
            } 726369" />
<Node Id="10286:[27738..27845).22" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 726370" />
<Node Id="10286:[27738..27845).23" Label="if (info != null)
            {
                diagnostics.Add(info, node.GetLocation());
            } 726371" />
<Node Id="10286:[27861..27873).8" Label="return kind; 726372" />
<Node Id="10286:[26281..26812).8" Label="switch (diagnosticKind)
            {
                case ObsoleteDiagnosticKind.NotObsolete:
                case ObsoleteDiagnosticKind.Lazy:
                    if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    }
                    break;
            } 726373" />
<Node Id="10286:[26450..26769).8" Label="if (checkOverridingSymbol)
                    {
                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');
                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);
                    } 726374" />
<Node Id="10287:[1680..1716).8" Label="=$ _symbol?.Kind == SymbolKind.Alias 726375" />
<Node Id="10287:[1683..1690).8" Label="_symbol 726376" />
<Node Id="10287:[1683..1716).15" Label="_symbol?.Kind == SymbolKind.Alias 726377" />
<Node Id="10319:[51935..52244).15" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 726378" />
<Node Id="10843:[734..744).5" Label="corLibrary 726379" />
<Node Id="10843:[778..799).5" Label="currentRecursionDepth 726380" />
<Node Id="10843:[835..853).5" Label="IncludeNullability 726381" />
<Node Id="10843:[1113..1134).5" Label="_lazyOtherNullability 726382" />
<Node Id="10843:[1313..1354).18" Label="Debug.Assert((object)corLibrary != null); 726383" />
<Node Id="25002:[4446..4475).1" Label="diagnostics.Verify(expected); 726384" />
<Node Id="25002:[4446..4475).2" Label="diagnostics.Verify(expected); 726385" />
<Node Id="25002:[4446..4474).1" Label="diagnostics.Verify(expected) 726386" />
<Node Id="25002:[2296..2334).1" Label="param Verify(this ImmutableArray$Diagnostic$ actual) 726387" />
<Node Id="25002:[2336..2375).1" Label="param Verify(params DiagnosticDescription[] expected) 726388" />
<Node Id="25002:[2401..2451).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 726389" />
<Node Id="25002:[2401..2451).2" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 726390" />
<Node Id="25002:[2401..2450).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected) 726391" />
<Node Id="25002:[1554..1589).1" Label="param Verify(this IEnumerable$Diagnostic$ actual) 726392" />
<Node Id="25002:[1591..1630).1" Label="param Verify(params DiagnosticDescription[] expected) 726393" />
<Node Id="25002:[1656..1703).1" Label="Verify(actual, expected, errorCodeOnly: false); 726394" />
<Node Id="25002:[1656..1703).2" Label="Verify(actual, expected, errorCodeOnly: false); 726395" />
<Node Id="25002:[1656..1703).3" Label="Verify(actual, expected, errorCodeOnly: false); 726396" />
<Node Id="25002:[1656..1702).1" Label="Verify(actual, expected, errorCodeOnly: false) 726397" />
<Node Id="25002:[2501..2531).1" Label="param Verify(IEnumerable$Diagnostic$ actual) 726398" />
<Node Id="25002:[2533..2565).1" Label="param Verify(DiagnosticDescription[] expected) 726399" />
<Node Id="25002:[2567..2585).1" Label="param Verify(bool errorCodeOnly) 726400" />
<Node Id="25002:[2611..2759).1" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 726401" />
<Node Id="25002:[2611..2759).2" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 726402" />
<Node Id="25002:[2775..2867).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 726403" />
<Node Id="25002:[2775..2867).2" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 726404" />
<Node Id="25002:[2775..2867).4" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 726405" />
<Node Id="25002:[2775..2867).6" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 726406" />
<Node Id="25003:[10448..10470).1" Label="=$ _defaultSeverityOpt 726407" />
<Node Id="25003:[10451..10470).1" Label="_defaultSeverityOpt 726408" />
<Node Id="25002:[2881..2977).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 726409" />
<Node Id="25002:[2881..2977).2" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 726410" />
<Node Id="25002:[2881..2977).4" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 726411" />
<Node Id="25002:[2881..2977).6" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 726412" />
<Node Id="25003:[10526..10550).1" Label="=$ _effectiveSeverityOpt 726413" />
<Node Id="25003:[10529..10550).1" Label="_effectiveSeverityOpt 726414" />
<Node Id="25002:[2991..3166).1" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 726415" />
<Node Id="25002:[2991..3166).2" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 726416" />
<Node Id="25002:[2991..3166).4" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 726417" />
<Node Id="25002:[2991..3166).8" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 726418" />
<Node Id="25003:[4933..4945).1" Label="param DiagnosticDescription(Diagnostic d) 726419" />
<Node Id="25003:[4947..4965).1" Label="param DiagnosticDescription(bool errorCodeOnly) 726420" />
<Node Id="25003:[4967..5002).1" Label="param DiagnosticDescription(bool includeDefaultSeverity = false) 726421" />
<Node Id="25003:[5004..5041).1" Label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 726422" />
<Node Id="25003:[4904..7352).1" Label="param DiagnosticDescription(this) 726423" />
<Node Id="25003:[912..917).4" Label="_code 726424" />
<Node Id="25003:[950..967).4" Label="_isWarningAsError 726425" />
<Node Id="25003:[1000..1013).4" Label="_isSuppressed 726426" />
<Node Id="25003:[1048..1062).4" Label="_squiggledText 726427" />
<Node Id="25003:[1099..1109).4" Label="_arguments 726428" />
<Node Id="25003:[1151..1165).10" Label="_startPosition 726429" />
<Node Id="25003:[1276..1303).4" Label="_argumentOrderDoesNotMatter 726430" />
<Node Id="25003:[1336..1350).4" Label="_errorCodeType 726431" />
<Node Id="25003:[1460..1479).4" Label="_defaultSeverityOpt 726432" />
<Node Id="25003:[1527..1548).4" Label="_effectiveSeverityOpt 726433" />
<Node Id="25003:[1673..1689).4" Label="_syntaxPredicate 726434" />
<Node Id="25003:[5067..5072).1" Label="_code 726435" />
<Node Id="25003:[5096..5113).1" Label="_isWarningAsError 726436" />
<Node Id="25003:[5149..5162).1" Label="_isSuppressed 726437" />
<Node Id="25003:[5194..5203).1" Label="_location 726438" />
<Node Id="25003:[5253..5275).1" Label="includeDefaultSeverity 726439" />
<Node Id="25003:[5231..5324).1" Label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 726440" />
<Node Id="25003:[5231..5250).1" Label="_defaultSeverityOpt 726441" />
<Node Id="25003:[5362..5386).1" Label="includeEffectiveSeverity 726442" />
<Node Id="25003:[5338..5428).1" Label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 726443" />
<Node Id="25003:[5338..5359).1" Label="_effectiveSeverityOpt 726444" />
<Node Id="25003:[5444..5476).1" Label="DiagnosticWithInfo dinfo = null; 726445" />
<Node Id="25003:[5490..6130).1" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 726446" />
<Node Id="25003:[5490..6130).2" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 726447" />
<Node Id="25003:[5490..6130).3" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 726448" />
<Node Id="25003:[5490..6130).4" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 726449" />
<Node Id="25003:[5744..5776).1" Label="dinfo = d as DiagnosticWithInfo; 726450" />
<Node Id="25003:[5794..6115).1" Label="if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                } 726451" />
<Node Id="25003:[5794..6115).2" Label="if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                } 726452" />
<Node Id="25003:[6001..6015).1" Label="_errorCodeType 726453" />
<Node Id="25003:[6081..6086).1" Label="_code 726454" />
<Node Id="25003:[6146..6175).1" Label="_ignoreArgumentsWhenComparing 726455" />
<Node Id="25003:[6208..7260).1" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_location.IsInSource)
                {
                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API
                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);
                }

                if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                }

                if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                }
            } 726456" />
<Node Id="25003:[6276..6580).1" Label="if (_location.IsInSource)
                {
                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API
                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);
                } 726457" />
<Node Id="25003:[6482..6561).1" Label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 726458" />
<Node Id="25003:[6482..6496).1" Label="_squiggledText 726459" />
<Node Id="25003:[6600..7098).1" Label="if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                } 726460" />
<Node Id="25003:[6600..7098).2" Label="if (dinfo != null)
                {
                    _arguments = dinfo.Info.Arguments;
                }
                else
                {
                    var args = d.Arguments;
                    if (args == null || args.Count == 0)
                    {
                        _arguments = null;
                    }
                    else
                    {
                        _arguments = d.Arguments.ToArray();
                    }
                } 726461" />
<Node Id="25003:[6659..6669).1" Label="_arguments 726462" />
<Node Id="25003:[7118..7245).1" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 726463" />
<Node Id="25003:[7118..7245).2" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 726464" />
<Node Id="25003:[7118..7245).4" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 726465" />
<Node Id="25003:[7276..7341).1" Label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 726466" />
<Node Id="25003:[7276..7290).1" Label="_startPosition 726467" />
<Node Id="25002:[2991..3166).9" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 726468" />
<Node Id="25002:[3341..3730).1" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 726469" />
<Node Id="25002:[3341..3730).2" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 726470" />
<Node Id="25002:[3401..3434).1" Label="int index = unmatched.IndexOf(d); 726471" />
<Node Id="25002:[3401..3434).2" Label="int index = unmatched.IndexOf(d); 726472" />
<Node Id="25003:[10591..10601).1" Label="param Equals(object obj) 726473" />
<Node Id="25003:[10563..13732).1" Label="param Equals(this) 726474" />
<Node Id="25003:[10627..10664).1" Label="var d = obj as DiagnosticDescription; 726475" />
<Node Id="25003:[10680..10725).1" Label="if (d == null)
                return false; 726476" />
<Node Id="25003:[10680..10725).2" Label="if (d == null)
                return false; 726477" />
<Node Id="25003:[10741..10799).1" Label="if (!_code.Equals(d._code))
                return false; 726478" />
<Node Id="25003:[10741..10799).2" Label="if (!_code.Equals(d._code))
                return false; 726479" />
<Node Id="25003:[10815..10891).1" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 726480" />
<Node Id="25003:[10907..10975).1" Label="if (_isSuppressed != d._isSuppressed)
                return false; 726481" />
<Node Id="25003:[10991..11148).1" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 726482" />
<Node Id="25003:[11059..11133).1" Label="if (_squiggledText != d._squiggledText)
                    return false; 726483" />
<Node Id="25003:[11164..11464).1" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 726484" />
<Node Id="25003:[11164..11464).2" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 726485" />
<Node Id="25003:[11224..11449).1" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 726486" />
<Node Id="25003:[11294..11430).1" Label="if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    } 726487" />
<Node Id="25003:[11480..11903).1" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 726488" />
<Node Id="25003:[11480..11903).2" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 726489" />
<Node Id="25003:[11917..12344).1" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 726490" />
<Node Id="25003:[11917..12344).2" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 726491" />
<Node Id="25003:[12436..12535).1" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 726492" />
<Node Id="25003:[12651..13498).1" Label="if (_arguments == null)
            {
                if (d._arguments != null)
                    return false;
            }
            else // _arguments != null
            {
                if (d._arguments == null)
                    return false;

                // we'll compare the arguments as strings
                var args1 = GetArgumentsAsStrings();
                var args2 = d.GetArgumentsAsStrings();
                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                }
            } 726493" />
<Node Id="25003:[12651..13498).2" Label="if (_arguments == null)
            {
                if (d._arguments != null)
                    return false;
            }
            else // _arguments != null
            {
                if (d._arguments == null)
                    return false;

                // we'll compare the arguments as strings
                var args1 = GetArgumentsAsStrings();
                var args2 = d.GetArgumentsAsStrings();
                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                }
            } 726494" />
<Node Id="25003:[12855..12915).1" Label="if (d._arguments == null)
                    return false; 726495" />
<Node Id="25003:[13006..13029).1" Label="GetArgumentsAsStrings() 726496" />
<Node Id="25003:[1971..2761).1" Label="param GetArgumentsAsStrings(this) 726497" />
<Node Id="25003:[2047..2709).1" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 726498" />
<Node Id="25003:[2047..2709).2" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 726499" />
<Node Id="25003:[2321..2694).1" Label="_argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                }); 726500" />
<Node Id="25003:[2321..2694).2" Label="_argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                }); 726501" />
<Node Id="25003:[2321..2340).1" Label="_argumentsAsStrings 726502" />
<Node Id="25003:[2723..2750).1" Label="return _argumentsAsStrings; 726503" />
<Node Id="25003:[12994..13030).1" Label="var args1 = GetArgumentsAsStrings(); 726504" />
<Node Id="25003:[13060..13085).1" Label="d.GetArgumentsAsStrings() 726505" />
<Node Id="25003:[1971..2761).2" Label="param GetArgumentsAsStrings(this) 726506" />
<Node Id="25003:[2047..2709).4" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 726507" />
<Node Id="25003:[2047..2709).5" Label="if (_argumentsAsStrings == null)
            {
                // We'll use IFormattable here, because it is more explicit than just calling .ToString()
                // (and is closer to what the compiler actually does when displaying error messages)
                _argumentsAsStrings = _arguments.Select(o =$
                {
                    if (o is DiagnosticInfo embedded)
                    {
                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);
                    }

                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);
                });
            } 726508" />
<Node Id="25003:[2723..2750).2" Label="return _argumentsAsStrings; 726509" />
<Node Id="25003:[13048..13086).1" Label="var args2 = d.GetArgumentsAsStrings(); 726510" />
<Node Id="25003:[13104..13483).1" Label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)
                {
                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))
                        return false;
                }
                else
                {
                    if (!args1.SequenceEqual(args2))
                        return false;
                } 726511" />
<Node Id="25003:[13393..13464).1" Label="if (!args1.SequenceEqual(args2))
                        return false; 726512" />
<Node Id="25003:[13393..13464).2" Label="if (!args1.SequenceEqual(args2))
                        return false; 726513" />
<Node Id="25003:[13393..13464).3" Label="if (!args1.SequenceEqual(args2))
                        return false; 726514" />
<Node Id="25003:[13514..13693).1" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 726515" />
<Node Id="25003:[13709..13721).1" Label="return true; 726516" />
<Node Id="25002:[3401..3434).5" Label="int index = unmatched.IndexOf(d); 726517" />
<Node Id="25002:[3452..3715).1" Label="if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                } 726518" />
<Node Id="25002:[3452..3715).2" Label="if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                } 726519" />
<Node Id="25002:[3508..3534).1" Label="unmatched.RemoveAt(index); 726520" />
<Node Id="25002:[3840..3992).1" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 726521" />
<Node Id="25002:[3840..3992).2" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 726522" />
<Node Id="25002:[4102..4181).1" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 726523" />
<Node Id="25002:[4102..4181).3" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 726524" />
<Node Id="25002:[4102..4181).4" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 726525" />
<Node Id="25002:[4126..4179).1" Label="DiagnosticDescription.GetAssertText(expected, actual) 726526" />
<Node Id="25003:[17577..17609).1" Label="param GetAssertText(DiagnosticDescription[] expected) 726527" />
<Node Id="25003:[17611..17641).1" Label="param GetAssertText(IEnumerable$Diagnostic$ actual) 726528" />
<Node Id="25003:[17667..17688).1" Label="const int CSharp = 1; 726529" />
<Node Id="25003:[17702..17728).1" Label="const int VisualBasic = 2; 726530" />
<Node Id="25003:[17742..17827).1" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 726531" />
<Node Id="25003:[17742..17827).2" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 726532" />
<Node Id="25003:[17742..17827).4" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 726533" />
<Node Id="25003:[17757..17803).1" Label="actual.Any() && actual.First() is CSDiagnostic 726534" />
<Node Id="25003:[17742..17827).6" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 726535" />
<Node Id="25003:[17841..17904).1" Label="var includeDiagnosticMessagesAsComments = (language == CSharp); 726536" />
<Node Id="25003:[17918..17965).1" Label="int indentDepth = (language == CSharp) ? 4 : 1; 726537" />
<Node Id="25003:[17936..17956).1" Label="(language == CSharp) 726538" />
<Node Id="25003:[17979..18071).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 726539" />
<Node Id="25003:[17979..18071).2" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 726540" />
<Node Id="25003:[17979..18071).4" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 726541" />
<Node Id="25003:[17979..18071).6" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 726542" />
<Node Id="25003:[18085..18181).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 726543" />
<Node Id="25003:[18085..18181).2" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 726544" />
<Node Id="25003:[18085..18181).4" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 726545" />
<Node Id="25003:[18085..18181).6" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 726546" />
<Node Id="25003:[18197..18490).1" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 726547" />
<Node Id="25003:[18201..18226).1" Label="IsSortedOrEmpty(expected) 726548" />
<Node Id="25003:[21605..21640).1" Label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 726549" />
<Node Id="25003:[23096..23122).1" Label="new LinePositionComparer() 726550" />
<Node Id="25003:[22962..23812).1" Label="param LinePositionComparer(this) 726551" />
<Node Id="25003:[23085..23122).1" Label="Instance = new LinePositionComparer() 726552" />
<Node Id="25003:[21666..21711).1" Label="var comparer = LinePositionComparer.Instance; 726553" />
<Node Id="25003:[21725..21759).1" Label="DiagnosticDescription last = null; 726554" />
<Node Id="25003:[21773..22187).1" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 726555" />
<Node Id="25003:[21773..22187).2" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 726556" />
<Node Id="25003:[21845..21956).1" Label="if (diagnostic._startPosition == null)
                {
                    return false;
                } 726557" />
<Node Id="25003:[21974..22136).1" Label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                } 726558" />
<Node Id="25003:[21974..22136).2" Label="if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                } 726559" />
<Node Id="25003:[22154..22172).1" Label="last = diagnostic; 726560" />
<Node Id="25003:[22201..22213).1" Label="return true; 726561" />
<Node Id="25003:[18197..18490).2" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 726562" />
<Node Id="25003:[18453..18475).1" Label="actual = Sort(actual); 726563" />
<Node Id="25003:[18462..18474).1" Label="Sort(actual) 726564" />
<Node Id="25003:[21372..21407).1" Label="param Sort(IEnumerable$Diagnostic$ diagnostics) 726565" />
<Node Id="25003:[21433..21546).1" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 726566" />
<Node Id="25003:[21433..21546).2" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 726567" />
<Node Id="25003:[21433..21546).4" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 726568" />
<Node Id="25003:[21433..21546).5" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 726569" />
<Node Id="25003:[18506..18543).1" Label="var assertText = new StringBuilder(); 726570" />
<Node Id="25003:[18557..18581).1" Label="assertText.AppendLine(); 726571" />
<Node Id="25003:[18658..18664).1" Label="int i; 726572" />
<Node Id="25003:[18678..18713).1" Label="assertText.AppendLine('Expected:'); 726573" />
<Node Id="25003:[18678..18713).3" Label="assertText.AppendLine('Expected:'); 726574" />
<Node Id="25003:[18727..18781).1" Label="var expectedText = ArrayBuilder$string$.GetInstance(); 726575" />
<Node Id="25003:[18795..18929).1" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 726576" />
<Node Id="25003:[18795..18929).2" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 726577" />
<Node Id="25003:[18855..18914).1" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 726578" />
<Node Id="25003:[18855..18914).2" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 726579" />
<Node Id="25003:[18872..18912).1" Label="GetDiagnosticDescription(d, indentDepth) 726580" />
<Node Id="25003:[22283..22306).1" Label="param GetDiagnosticDescription(DiagnosticDescription d) 726581" />
<Node Id="25003:[22308..22323).1" Label="param GetDiagnosticDescription(int indentDepth) 726582" />
<Node Id="25003:[22349..22404).1" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726583" />
<Node Id="25003:[22349..22404).4" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726584" />
<Node Id="25003:[22391..22403).1" Label="d.ToString() 726585" />
<Node Id="25003:[14779..17530).1" Label="param ToString(this) 726586" />
<Node Id="25003:[14837..14866).1" Label="var sb = new StringBuilder(); 726587" />
<Node Id="25003:[14882..14907).1" Label="sb.Append('Diagnostic('); 726588" />
<Node Id="25003:[14882..14907).3" Label="sb.Append('Diagnostic('); 726589" />
<Node Id="25003:[14921..15244).1" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 726590" />
<Node Id="25003:[14921..15244).2" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 726591" />
<Node Id="25003:[15100..15131).1" Label="sb.Append(_errorCodeType.Name); 726592" />
<Node Id="25003:[15100..15131).2" Label="sb.Append(_errorCodeType.Name); 726593" />
<Node Id="25003:[15149..15164).1" Label="sb.Append('.'); 726594" />
<Node Id="25003:[15149..15164).3" Label="sb.Append('.'); 726595" />
<Node Id="25003:[15182..15229).1" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726596" />
<Node Id="25003:[15182..15229).5" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726597" />
<Node Id="25003:[15260..15767).1" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 726598" />
<Node Id="25003:[15260..15767).2" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 726599" />
<Node Id="25003:[15320..15717).1" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 726600" />
<Node Id="25003:[15632..15650).1" Label="sb.Append(', \''); 726601" />
<Node Id="25003:[15632..15650).3" Label="sb.Append(', \''); 726602" />
<Node Id="25003:[15672..15698).1" Label="sb.Append(_squiggledText); 726603" />
<Node Id="25003:[15672..15698).2" Label="sb.Append(_squiggledText); 726604" />
<Node Id="25003:[15737..15752).1" Label="sb.Append('''); 726605" />
<Node Id="25003:[15737..15752).3" Label="sb.Append('''); 726606" />
<Node Id="25003:[15783..15883).1" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 726607" />
<Node Id="25003:[15899..15914).1" Label="sb.Append(')'); 726608" />
<Node Id="25003:[15899..15914).3" Label="sb.Append(')'); 726609" />
<Node Id="25003:[15930..16520).1" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 726610" />
<Node Id="25003:[15930..16520).2" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 726611" />
<Node Id="25003:[15986..16015).1" Label="sb.Append('.WithArguments('); 726612" />
<Node Id="25003:[15986..16015).3" Label="sb.Append('.WithArguments('); 726613" />
<Node Id="25003:[16055..16078).1" Label="GetArgumentsAsStrings() 726614" />
<Node Id="25003:[16033..16095).1" Label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 726615" />
<Node Id="25003:[16113..16472).1" Label="for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                } 726616" />
<Node Id="25003:[16113..16472).3" Label="for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                } 726617" />
<Node Id="25003:[16202..16218).1" Label="sb.Append('\''); 726618" />
<Node Id="25003:[16202..16218).3" Label="sb.Append('\''); 726619" />
<Node Id="25003:[16240..16275).1" Label="sb.Append(argumentStrings.Current); 726620" />
<Node Id="25003:[16240..16275).2" Label="sb.Append(argumentStrings.Current); 726621" />
<Node Id="25003:[16297..16313).1" Label="sb.Append('\''); 726622" />
<Node Id="25003:[16297..16313).3" Label="sb.Append('\''); 726623" />
<Node Id="25003:[16335..16453).1" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 726624" />
<Node Id="25003:[16414..16430).1" Label="sb.Append(', '); 726625" />
<Node Id="25003:[16414..16430).3" Label="sb.Append(', '); 726626" />
<Node Id="25003:[16490..16505).1" Label="sb.Append(')'); 726627" />
<Node Id="25003:[16490..16505).3" Label="sb.Append(')'); 726628" />
<Node Id="25003:[16536..16829).1" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 726629" />
<Node Id="25003:[16536..16829).2" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 726630" />
<Node Id="25003:[16596..16624).1" Label="sb.Append('.WithLocation('); 726631" />
<Node Id="25003:[16596..16624).3" Label="sb.Append('.WithLocation('); 726632" />
<Node Id="25003:[16642..16683).1" Label="sb.Append(_startPosition.Value.Line + 1); 726633" />
<Node Id="25003:[16642..16683).4" Label="sb.Append(_startPosition.Value.Line + 1); 726634" />
<Node Id="25003:[16701..16717).1" Label="sb.Append(', '); 726635" />
<Node Id="25003:[16701..16717).3" Label="sb.Append(', '); 726636" />
<Node Id="25003:[16735..16781).1" Label="sb.Append(_startPosition.Value.Character + 1); 726637" />
<Node Id="25003:[16735..16781).4" Label="sb.Append(_startPosition.Value.Character + 1); 726638" />
<Node Id="25003:[16799..16814).1" Label="sb.Append(')'); 726639" />
<Node Id="25003:[16799..16814).3" Label="sb.Append(')'); 726640" />
<Node Id="25003:[16845..16954).1" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 726641" />
<Node Id="25003:[16970..17144).1" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 726642" />
<Node Id="25003:[16970..17144).2" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 726643" />
<Node Id="25003:[17160..17340).1" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 726644" />
<Node Id="25003:[17160..17340).2" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 726645" />
<Node Id="25003:[17356..17482).1" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 726646" />
<Node Id="25003:[17356..17482).2" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 726647" />
<Node Id="25003:[17498..17519).1" Label="return sb.ToString(); 726648" />
<Node Id="25003:[22349..22404).7" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726649" />
<Node Id="25003:[22349..22404).8" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726650" />
<Node Id="25003:[18855..18914).5" Label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 726651" />
<Node Id="25003:[18943..18992).1" Label="GetCommaSeparatedLines(assertText, expectedText); 726652" />
<Node Id="25003:[18943..18992).2" Label="GetCommaSeparatedLines(assertText, expectedText); 726653" />
<Node Id="25003:[18943..18991).1" Label="GetCommaSeparatedLines(assertText, expectedText) 726654" />
<Node Id="25003:[22599..22615).1" Label="param GetCommaSeparatedLines(StringBuilder sb) 726655" />
<Node Id="25003:[22617..22643).1" Label="param GetCommaSeparatedLines(ArrayBuilder$string$ lines) 726656" />
<Node Id="25003:[22669..22689).1" Label="int n = lines.Count; 726657" />
<Node Id="25003:[22703..22939).1" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 726658" />
<Node Id="25003:[22703..22939).3" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 726659" />
<Node Id="25003:[22763..22783).1" Label="sb.Append(lines[i]); 726660" />
<Node Id="25003:[22763..22783).3" Label="sb.Append(lines[i]); 726661" />
<Node Id="25003:[22801..22890).1" Label="if (i $ n - 1)
                {
                    sb.Append(',');
                } 726662" />
<Node Id="25003:[22908..22924).1" Label="sb.AppendLine(); 726663" />
<Node Id="25003:[18943..18992).3" Label="GetCommaSeparatedLines(assertText, expectedText); 726664" />
<Node Id="25003:[19106..19139).1" Label="assertText.AppendLine('Actual:'); 726665" />
<Node Id="25003:[19106..19139).3" Label="assertText.AppendLine('Actual:'); 726666" />
<Node Id="25003:[19153..19205).1" Label="var actualText = ArrayBuilder$string$.GetInstance(); 726667" />
<Node Id="25003:[19219..19250).1" Label="var e = actual.GetEnumerator(); 726668" />
<Node Id="25003:[19264..20938).1" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 726669" />
<Node Id="25003:[19264..20938).3" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 726670" />
<Node Id="25003:[23158..23173).1" Label="param Compare(LinePosition? x) 726671" />
<Node Id="25003:[23175..23190).1" Label="param Compare(LinePosition? y) 726672" />
<Node Id="25003:[23139..23801).1" Label="param Compare(this) 726673" />
<Node Id="25003:[23224..23425).1" Label="if (x == null)
                {
                    if (y == null)
                    {
                        return 0;
                    }
                    return -1;
                } 726674" />
<Node Id="25003:[23224..23425).2" Label="if (x == null)
                {
                    if (y == null)
                    {
                        return 0;
                    }
                    return -1;
                } 726675" />
<Node Id="25003:[23445..23528).1" Label="if (y == null)
                {
                    return 1;
                } 726676" />
<Node Id="25003:[23445..23528).2" Label="if (y == null)
                {
                    return 1;
                } 726677" />
<Node Id="25003:[23548..23600).1" Label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 726678" />
<Node Id="25003:[23548..23600).2" Label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 726679" />
<Node Id="25003:[23618..23712).1" Label="if (lineDiff != 0)
                {
                    return lineDiff;
                } 726680" />
<Node Id="25003:[23618..23712).2" Label="if (lineDiff != 0)
                {
                    return lineDiff;
                } 726681" />
<Node Id="25003:[23732..23786).1" Label="return x.Value.Character.CompareTo(y.Value.Character); 726682" />
<Node Id="25003:[23732..23786).2" Label="return x.Value.Character.CompareTo(y.Value.Character); 726683" />
<Node Id="25003:[23548..23600).4" Label="int lineDiff = x.Value.Line.CompareTo(y.Value.Line); 726684" />
<Node Id="25003:[23618..23712).5" Label="if (lineDiff != 0)
                {
                    return lineDiff;
                } 726685" />
<Node Id="25003:[19327..19352).1" Label="Diagnostic d = e.Current; 726686" />
<Node Id="25003:[19370..19400).1" Label="string message = d.ToString(); 726687" />
<Node Id="25003:[19418..19628).1" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 726688" />
<Node Id="25003:[19418..19628).2" Label="if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                } 726689" />
<Node Id="25003:[19648..19745).1" Label="if (i $ 0)
                {
                    assertText.AppendLine(',');
                } 726690" />
<Node Id="25003:[19765..20366).1" Label="if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                } 726691" />
<Node Id="25003:[19846..19878).1" Label="Indent(assertText, indentDepth); 726692" />
<Node Id="25003:[19846..19878).2" Label="Indent(assertText, indentDepth); 726693" />
<Node Id="25003:[19846..19877).1" Label="Indent(assertText, indentDepth) 726694" />
<Node Id="25003:[22454..22470).1" Label="param Indent(StringBuilder sb) 726695" />
<Node Id="25003:[22472..22481).1" Label="param Indent(int count) 726696" />
<Node Id="25003:[22507..22533).1" Label="sb.Append(' ', 4 * count); 726697" />
<Node Id="25003:[22507..22533).4" Label="sb.Append(' ', 4 * count); 726698" />
<Node Id="25003:[22507..22533).6" Label="sb.Append(' ', 4 * count); 726699" />
<Node Id="25003:[19846..19878).3" Label="Indent(assertText, indentDepth); 726700" />
<Node Id="25003:[19900..19925).1" Label="assertText.Append('// '); 726701" />
<Node Id="25003:[19900..19925).3" Label="assertText.Append('// '); 726702" />
<Node Id="25003:[19947..19983).1" Label="assertText.AppendLine(d.ToString()); 726703" />
<Node Id="25003:[19947..19983).3" Label="assertText.AppendLine(d.ToString()); 726704" />
<Node Id="25003:[20005..20024).1" Label="var l = d.Location; 726705" />
<Node Id="25003:[20046..20347).1" Label="if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    } 726706" />
<Node Id="25003:[20112..20144).1" Label="Indent(assertText, indentDepth); 726707" />
<Node Id="25003:[20112..20144).2" Label="Indent(assertText, indentDepth); 726708" />
<Node Id="25003:[20112..20143).1" Label="Indent(assertText, indentDepth) 726709" />
<Node Id="25003:[22454..22470).2" Label="param Indent(StringBuilder sb) 726710" />
<Node Id="25003:[22472..22481).2" Label="param Indent(int count) 726711" />
<Node Id="25003:[22507..22533).7" Label="sb.Append(' ', 4 * count); 726712" />
<Node Id="25003:[22507..22533).10" Label="sb.Append(' ', 4 * count); 726713" />
<Node Id="25003:[22507..22533).12" Label="sb.Append(' ', 4 * count); 726714" />
<Node Id="25003:[20112..20144).3" Label="Indent(assertText, indentDepth); 726715" />
<Node Id="25003:[20170..20195).1" Label="assertText.Append('// '); 726716" />
<Node Id="25003:[20170..20195).3" Label="assertText.Append('// '); 726717" />
<Node Id="25003:[20221..20324).1" Label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 726718" />
<Node Id="25003:[20221..20324).8" Label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 726719" />
<Node Id="25003:[20386..20505).1" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 726720" />
<Node Id="25003:[20386..20505).2" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 726721" />
<Node Id="25003:[20386..20505).4" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 726722" />
<Node Id="25003:[20386..20505).5" Label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 726723" />
<Node Id="25003:[20404..20504).1" Label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 726724" />
<Node Id="25003:[4933..4945).2" Label="param DiagnosticDescription(Diagnostic d) 726725" />
<Node Id="25003:[4947..4965).2" Label="param DiagnosticDescription(bool errorCodeOnly) 726726" />
<Node Id="25003:[4967..5002).2" Label="param DiagnosticDescription(bool includeDefaultSeverity = false) 726727" />
<Node Id="25003:[5004..5041).2" Label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 726728" />
<Node Id="25003:[4904..7352).2" Label="param DiagnosticDescription(this) 726729" />
<Node Id="25003:[912..917).5" Label="_code 726730" />
<Node Id="25003:[950..967).5" Label="_isWarningAsError 726731" />
<Node Id="25003:[1000..1013).5" Label="_isSuppressed 726732" />
<Node Id="25003:[1048..1062).5" Label="_squiggledText 726733" />
<Node Id="25003:[1099..1109).5" Label="_arguments 726734" />
<Node Id="25003:[1151..1165).13" Label="_startPosition 726735" />
<Node Id="25003:[1336..1350).5" Label="_errorCodeType 726736" />
<Node Id="25003:[1460..1479).5" Label="_defaultSeverityOpt 726737" />
<Node Id="25003:[1527..1548).5" Label="_effectiveSeverityOpt 726738" />
<Node Id="25003:[5067..5072).2" Label="_code 726739" />
<Node Id="25003:[5096..5113).2" Label="_isWarningAsError 726740" />
<Node Id="25003:[5149..5162).2" Label="_isSuppressed 726741" />
<Node Id="25003:[5194..5203).2" Label="_location 726742" />
<Node Id="25003:[5444..5476).3" Label="DiagnosticWithInfo dinfo = null; 726743" />
<Node Id="25003:[5490..6130).9" Label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))
            {
                _code = d.Id;
                _errorCodeType = typeof(string);
            }
            else
            {
                dinfo = d as DiagnosticWithInfo;
                if (dinfo == null)
                {
                    _code = d.Code;
                    _errorCodeType = typeof(int);
                }
                else
                {
                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;
                    _code = d.Code;
                }
            } 726744" />
<Node Id="25003:[7118..7245).7" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 726745" />
<Node Id="25003:[7118..7245).8" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 726746" />
<Node Id="25003:[7118..7245).10" Label="if (_arguments != null && _arguments.Length == 0)
                {
                    _arguments = null;
                } 726747" />
<Node Id="25003:[20523..20557).1" Label="var diffDescription = description; 726748" />
<Node Id="25003:[20575..20622).1" Label="var idx = Array.IndexOf(expected, description); 726749" />
<Node Id="25003:[20575..20622).2" Label="var idx = Array.IndexOf(expected, description); 726750" />
<Node Id="25003:[20575..20622).3" Label="var idx = Array.IndexOf(expected, description); 726751" />
<Node Id="25003:[20575..20622).4" Label="var idx = Array.IndexOf(expected, description); 726752" />
<Node Id="25003:[10680..10725).4" Label="if (d == null)
                return false; 726753" />
<Node Id="25003:[10680..10725).5" Label="if (d == null)
                return false; 726754" />
<Node Id="25003:[10815..10891).3" Label="if (_isWarningAsError != d._isWarningAsError)
                return false; 726755" />
<Node Id="25003:[10907..10975).3" Label="if (_isSuppressed != d._isSuppressed)
                return false; 726756" />
<Node Id="25003:[10991..11148).2" Label="if (!_ignoreArgumentsWhenComparing)
            {
                if (_squiggledText != d._squiggledText)
                    return false;
            } 726757" />
<Node Id="25003:[11059..11133).3" Label="if (_squiggledText != d._squiggledText)
                    return false; 726758" />
<Node Id="25003:[11164..11464).4" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 726759" />
<Node Id="25003:[11164..11464).5" Label="if (_startPosition != null)
            {
                if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                }
            } 726760" />
<Node Id="25003:[11224..11449).4" Label="if (d._startPosition != null)
                {
                    if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    }
                } 726761" />
<Node Id="25003:[11294..11430).3" Label="if (_startPosition.Value != d._startPosition.Value)
                    {
                        return false;
                    } 726762" />
<Node Id="25003:[11480..11903).4" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 726763" />
<Node Id="25003:[11480..11903).5" Label="if (_syntaxPredicate != null)
            {
                if (d._location == null)
                    return false;

                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    _showPredicate = true;
                    return false;
                }

                _showPredicate = false;
            } 726764" />
<Node Id="25003:[11917..12344).4" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 726765" />
<Node Id="25003:[11917..12344).5" Label="if (d._syntaxPredicate != null)
            {
                if (_location == null)
                    return false;

                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))
                {
                    d._showPredicate = true;
                    return false;
                }

                d._showPredicate = false;
            } 726766" />
<Node Id="25003:[12436..12535).3" Label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)
                return true; 726767" />
<Node Id="25003:[12855..12915).4" Label="if (d._arguments == null)
                    return false; 726768" />
<Node Id="25003:[13514..13693).5" Label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||
                _effectiveSeverityOpt != d._effectiveSeverityOpt)
            {
                return false;
            } 726769" />
<Node Id="25003:[20640..20746).1" Label="if (idx != -1)
                {
                    diffDescription = expected[idx];
                } 726770" />
<Node Id="25003:[20640..20746).2" Label="if (idx != -1)
                {
                    diffDescription = expected[idx];
                } 726771" />
<Node Id="25003:[20695..20727).1" Label="diffDescription = expected[idx]; 726772" />
<Node Id="25003:[20764..20834).1" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 726773" />
<Node Id="25003:[20764..20834).2" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 726774" />
<Node Id="25003:[20782..20832).1" Label="GetDiagnosticDescription(description, indentDepth) 726775" />
<Node Id="25003:[22283..22306).2" Label="param GetDiagnosticDescription(DiagnosticDescription d) 726776" />
<Node Id="25003:[22308..22323).2" Label="param GetDiagnosticDescription(int indentDepth) 726777" />
<Node Id="25003:[22349..22404).10" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726778" />
<Node Id="25003:[22349..22404).13" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726779" />
<Node Id="25003:[14837..14866).3" Label="var sb = new StringBuilder(); 726780" />
<Node Id="25003:[14882..14907).4" Label="sb.Append('Diagnostic('); 726781" />
<Node Id="25003:[14882..14907).6" Label="sb.Append('Diagnostic('); 726782" />
<Node Id="25003:[14921..15244).4" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 726783" />
<Node Id="25003:[14921..15244).5" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 726784" />
<Node Id="25003:[15100..15131).3" Label="sb.Append(_errorCodeType.Name); 726785" />
<Node Id="25003:[15100..15131).4" Label="sb.Append(_errorCodeType.Name); 726786" />
<Node Id="25003:[15149..15164).4" Label="sb.Append('.'); 726787" />
<Node Id="25003:[15149..15164).6" Label="sb.Append('.'); 726788" />
<Node Id="25003:[15182..15229).6" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726789" />
<Node Id="25003:[15182..15229).10" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726790" />
<Node Id="25003:[15260..15767).4" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 726791" />
<Node Id="25003:[15260..15767).5" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 726792" />
<Node Id="25003:[15320..15717).13" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 726793" />
<Node Id="25003:[15632..15650).4" Label="sb.Append(', \''); 726794" />
<Node Id="25003:[15632..15650).6" Label="sb.Append(', \''); 726795" />
<Node Id="25003:[15672..15698).3" Label="sb.Append(_squiggledText); 726796" />
<Node Id="25003:[15672..15698).4" Label="sb.Append(_squiggledText); 726797" />
<Node Id="25003:[15737..15752).4" Label="sb.Append('''); 726798" />
<Node Id="25003:[15737..15752).6" Label="sb.Append('''); 726799" />
<Node Id="25003:[15783..15883).2" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 726800" />
<Node Id="25003:[15899..15914).4" Label="sb.Append(')'); 726801" />
<Node Id="25003:[15899..15914).6" Label="sb.Append(')'); 726802" />
<Node Id="25003:[15930..16520).5" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 726803" />
<Node Id="25003:[15986..16015).4" Label="sb.Append('.WithArguments('); 726804" />
<Node Id="25003:[15986..16015).6" Label="sb.Append('.WithArguments('); 726805" />
<Node Id="25003:[16202..16218).7" Label="sb.Append('\''); 726806" />
<Node Id="25003:[16202..16218).9" Label="sb.Append('\''); 726807" />
<Node Id="25003:[16240..16275).5" Label="sb.Append(argumentStrings.Current); 726808" />
<Node Id="25003:[16240..16275).6" Label="sb.Append(argumentStrings.Current); 726809" />
<Node Id="25003:[16297..16313).7" Label="sb.Append('\''); 726810" />
<Node Id="25003:[16297..16313).9" Label="sb.Append('\''); 726811" />
<Node Id="25003:[16335..16453).9" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 726812" />
<Node Id="25003:[16414..16430).4" Label="sb.Append(', '); 726813" />
<Node Id="25003:[16414..16430).6" Label="sb.Append(', '); 726814" />
<Node Id="25003:[16490..16505).4" Label="sb.Append(')'); 726815" />
<Node Id="25003:[16490..16505).6" Label="sb.Append(')'); 726816" />
<Node Id="25003:[16536..16829).4" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 726817" />
<Node Id="25003:[16536..16829).5" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 726818" />
<Node Id="25003:[16596..16624).4" Label="sb.Append('.WithLocation('); 726819" />
<Node Id="25003:[16596..16624).6" Label="sb.Append('.WithLocation('); 726820" />
<Node Id="25003:[16642..16683).5" Label="sb.Append(_startPosition.Value.Line + 1); 726821" />
<Node Id="25003:[16642..16683).8" Label="sb.Append(_startPosition.Value.Line + 1); 726822" />
<Node Id="25003:[16701..16717).4" Label="sb.Append(', '); 726823" />
<Node Id="25003:[16701..16717).6" Label="sb.Append(', '); 726824" />
<Node Id="25003:[16735..16781).5" Label="sb.Append(_startPosition.Value.Character + 1); 726825" />
<Node Id="25003:[16735..16781).8" Label="sb.Append(_startPosition.Value.Character + 1); 726826" />
<Node Id="25003:[16799..16814).4" Label="sb.Append(')'); 726827" />
<Node Id="25003:[16799..16814).6" Label="sb.Append(')'); 726828" />
<Node Id="25003:[16845..16954).2" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 726829" />
<Node Id="25003:[16970..17144).4" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 726830" />
<Node Id="25003:[16970..17144).5" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 726831" />
<Node Id="25003:[17160..17340).4" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 726832" />
<Node Id="25003:[17160..17340).5" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 726833" />
<Node Id="25003:[17356..17482).5" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 726834" />
<Node Id="25003:[17356..17482).6" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 726835" />
<Node Id="25003:[17498..17519).3" Label="return sb.ToString(); 726836" />
<Node Id="25003:[22349..22404).16" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726837" />
<Node Id="25003:[22349..22404).17" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726838" />
<Node Id="25003:[20764..20834).5" Label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 726839" />
<Node Id="25003:[20852..20923).1" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 726840" />
<Node Id="25003:[20852..20923).2" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 726841" />
<Node Id="25003:[20867..20921).1" Label="GetDiagnosticDescription(diffDescription, indentDepth) 726842" />
<Node Id="25003:[22283..22306).3" Label="param GetDiagnosticDescription(DiagnosticDescription d) 726843" />
<Node Id="25003:[22308..22323).3" Label="param GetDiagnosticDescription(int indentDepth) 726844" />
<Node Id="25003:[22349..22404).19" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726845" />
<Node Id="25003:[22349..22404).22" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726846" />
<Node Id="25003:[14837..14866).5" Label="var sb = new StringBuilder(); 726847" />
<Node Id="25003:[14882..14907).7" Label="sb.Append('Diagnostic('); 726848" />
<Node Id="25003:[14882..14907).9" Label="sb.Append('Diagnostic('); 726849" />
<Node Id="25003:[14921..15244).7" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 726850" />
<Node Id="25003:[14921..15244).8" Label="if (_errorCodeType == typeof(string))
            {
                sb.Append('\'').Append(_code).Append('\'');
            }
            else
            {
                sb.Append(_errorCodeType.Name);
                sb.Append('.');
                sb.Append(Enum.GetName(_errorCodeType, _code));
            } 726851" />
<Node Id="25003:[15100..15131).5" Label="sb.Append(_errorCodeType.Name); 726852" />
<Node Id="25003:[15100..15131).6" Label="sb.Append(_errorCodeType.Name); 726853" />
<Node Id="25003:[15149..15164).7" Label="sb.Append('.'); 726854" />
<Node Id="25003:[15149..15164).9" Label="sb.Append('.'); 726855" />
<Node Id="25003:[15182..15229).11" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726856" />
<Node Id="25003:[15182..15229).15" Label="sb.Append(Enum.GetName(_errorCodeType, _code)); 726857" />
<Node Id="25003:[15260..15767).7" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 726858" />
<Node Id="25003:[15260..15767).8" Label="if (_squiggledText != null)
            {
                if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                }

                sb.Append(''');
            } 726859" />
<Node Id="25003:[15320..15717).25" Label="if (_squiggledText.Contains('\n') || _squiggledText.Contains('\\') || _squiggledText.Contains('\''))
                {
                    sb.Append(', @\'');
                    sb.Append(_squiggledText.Replace('\'', '\'\''));
                }
                else
                {
                    sb.Append(', \'');
                    sb.Append(_squiggledText);
                } 726860" />
<Node Id="25003:[15632..15650).7" Label="sb.Append(', \''); 726861" />
<Node Id="25003:[15632..15650).9" Label="sb.Append(', \''); 726862" />
<Node Id="25003:[15672..15698).5" Label="sb.Append(_squiggledText); 726863" />
<Node Id="25003:[15672..15698).6" Label="sb.Append(_squiggledText); 726864" />
<Node Id="25003:[15737..15752).7" Label="sb.Append('''); 726865" />
<Node Id="25003:[15737..15752).9" Label="sb.Append('''); 726866" />
<Node Id="25003:[15783..15883).3" Label="if (_isSuppressed)
            {
                sb.Append(', isSuppressed: true');
            } 726867" />
<Node Id="25003:[15899..15914).7" Label="sb.Append(')'); 726868" />
<Node Id="25003:[15899..15914).9" Label="sb.Append(')'); 726869" />
<Node Id="25003:[15930..16520).8" Label="if (_arguments != null)
            {
                sb.Append('.WithArguments(');
                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();
                for (int i = 0; argumentStrings.MoveNext(); i++)
                {
                    sb.Append('\'');
                    sb.Append(argumentStrings.Current);
                    sb.Append('\'');
                    if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    }
                }
                sb.Append(')');
            } 726870" />
<Node Id="25003:[15986..16015).7" Label="sb.Append('.WithArguments('); 726871" />
<Node Id="25003:[15986..16015).9" Label="sb.Append('.WithArguments('); 726872" />
<Node Id="25003:[16202..16218).13" Label="sb.Append('\''); 726873" />
<Node Id="25003:[16202..16218).15" Label="sb.Append('\''); 726874" />
<Node Id="25003:[16240..16275).9" Label="sb.Append(argumentStrings.Current); 726875" />
<Node Id="25003:[16240..16275).10" Label="sb.Append(argumentStrings.Current); 726876" />
<Node Id="25003:[16297..16313).13" Label="sb.Append('\''); 726877" />
<Node Id="25003:[16297..16313).15" Label="sb.Append('\''); 726878" />
<Node Id="25003:[16335..16453).17" Label="if (i $ _arguments.Length - 1)
                    {
                        sb.Append(', ');
                    } 726879" />
<Node Id="25003:[16414..16430).7" Label="sb.Append(', '); 726880" />
<Node Id="25003:[16414..16430).9" Label="sb.Append(', '); 726881" />
<Node Id="25003:[16490..16505).7" Label="sb.Append(')'); 726882" />
<Node Id="25003:[16490..16505).9" Label="sb.Append(')'); 726883" />
<Node Id="25003:[16536..16829).7" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 726884" />
<Node Id="25003:[16536..16829).8" Label="if (_startPosition != null)
            {
                sb.Append('.WithLocation(');
                sb.Append(_startPosition.Value.Line + 1);
                sb.Append(', ');
                sb.Append(_startPosition.Value.Character + 1);
                sb.Append(')');
            } 726885" />
<Node Id="25003:[16596..16624).7" Label="sb.Append('.WithLocation('); 726886" />
<Node Id="25003:[16596..16624).9" Label="sb.Append('.WithLocation('); 726887" />
<Node Id="25003:[16642..16683).9" Label="sb.Append(_startPosition.Value.Line + 1); 726888" />
<Node Id="25003:[16642..16683).12" Label="sb.Append(_startPosition.Value.Line + 1); 726889" />
<Node Id="25003:[16701..16717).7" Label="sb.Append(', '); 726890" />
<Node Id="25003:[16701..16717).9" Label="sb.Append(', '); 726891" />
<Node Id="25003:[16735..16781).9" Label="sb.Append(_startPosition.Value.Character + 1); 726892" />
<Node Id="25003:[16735..16781).12" Label="sb.Append(_startPosition.Value.Character + 1); 726893" />
<Node Id="25003:[16799..16814).7" Label="sb.Append(')'); 726894" />
<Node Id="25003:[16799..16814).9" Label="sb.Append(')'); 726895" />
<Node Id="25003:[16845..16954).3" Label="if (_isWarningAsError)
            {
                sb.Append('.WithWarningAsError(true)');
            } 726896" />
<Node Id="25003:[16970..17144).7" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 726897" />
<Node Id="25003:[16970..17144).8" Label="if (_defaultSeverityOpt != null)
            {
                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');
            } 726898" />
<Node Id="25003:[17160..17340).7" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 726899" />
<Node Id="25003:[17160..17340).8" Label="if (_effectiveSeverityOpt != null)
            {
                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');
            } 726900" />
<Node Id="25003:[17356..17482).9" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 726901" />
<Node Id="25003:[17356..17482).10" Label="if (_syntaxPredicate != null && _showPredicate)
            {
                sb.Append('.WhereSyntax(...)');
            } 726902" />
<Node Id="25003:[17498..17519).5" Label="return sb.ToString(); 726903" />
<Node Id="25003:[22349..22404).25" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726904" />
<Node Id="25003:[22349..22404).26" Label="return new string(' ', 4 * indentDepth) + d.ToString(); 726905" />
<Node Id="25003:[20852..20923).5" Label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 726906" />
<Node Id="25003:[20952..21034).1" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 726907" />
<Node Id="25003:[20952..21034).2" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 726908" />
<Node Id="25003:[20995..21019).1" Label="assertText.AppendLine(); 726909" />
<Node Id="25003:[21050..21081).1" Label="assertText.AppendLine('Diff:'); 726910" />
<Node Id="25003:[21050..21081).3" Label="assertText.AppendLine('Diff:'); 726911" />
<Node Id="25003:[21095..21192).1" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 726912" />
<Node Id="25003:[21095..21192).2" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 726913" />
<Node Id="25012:[3121..3141).1" Label="new[] { '\r', '\n' } 726914" />
<Node Id="25012:[3129..3133).1" Label="'\r' 726915" />
<Node Id="25012:[3135..3139).1" Label="'\n' 726916" />
<Node Id="25012:[3121..3141).4" Label="new[] { '\r', '\n' } 726917" />
<Node Id="25012:[3121..3141).5" Label="new[] { '\r', '\n' } 726918" />
<Node Id="25012:[3102..3141).1" Label="s_lineSplitChars = new[] { '\r', '\n' } 726919" />
<Node Id="25003:[21095..21192).3" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 726920" />
<Node Id="25003:[21095..21192).4" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 726921" />
<Node Id="25003:[21113..21190).1" Label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 726922" />
<Node Id="25012:[2473..2496).1" Label="param DiffReport(IEnumerable$T$ expected) 726923" />
<Node Id="25012:[2498..2519).1" Label="param DiffReport(IEnumerable$T$ actual) 726924" />
<Node Id="25012:[2521..2537).1" Label="param DiffReport(string separator) 726925" />
<Node Id="25012:[2539..2575).1" Label="param DiffReport(IEqualityComparer$T$ comparer = null) 726926" />
<Node Id="25012:[2577..2608).1" Label="param DiffReport(Func$T, string$ toString = null) 726927" />
<Node Id="25012:[2634..2703).1" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 726928" />
<Node Id="25012:[2634..2703).2" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 726929" />
<Node Id="25012:[2644..2662).1" Label="(comparer != null) 726930" />
<Node Id="25012:[1074..1101).1" Label="EqualityComparer$T$.Default 726931" />
<Node Id="25012:[1063..1102).1" Label="new LCS$T$(EqualityComparer$T$.Default) 726932" />
<Node Id="25012:[1194..1223).1" Label="param LCS(IEqualityComparer$T$ comparer) 726933" />
<Node Id="25012:[1183..1293).1" Label="param LCS(this) 726934" />
<Node Id="25012:[4230..4231).1" Label="1 726935" />
<Node Id="25012:[4217..4231).1" Label="DeleteCost = 1 726936" />
<Node Id="25012:[4277..4278).1" Label="1 726937" />
<Node Id="25012:[4264..4278).1" Label="InsertCost = 1 726938" />
<Node Id="25012:[4324..4325).1" Label="2 726939" />
<Node Id="25012:[4311..4325).1" Label="UpdateCost = 2 726940" />
<Node Id="25012:[3676..10647).1" Label="param LongestCommonSubsequence(this) 726941" />
<Node Id="25012:[1157..1166).1" Label="_comparer 726942" />
<Node Id="25012:[1257..1266).1" Label="_comparer 726943" />
<Node Id="25012:[1053..1102).1" Label="Default = new LCS$T$(EqualityComparer$T$.Default) 726944" />
<Node Id="25012:[2717..2783).1" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 726945" />
<Node Id="25012:[2717..2783).3" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 726946" />
<Node Id="25012:[2799..2869).1" Label="IList$T$ expectedList = expected as IList$T$ ?? new List$T$(expected); 726947" />
<Node Id="25012:[2883..2947).1" Label="IList$T$ actualList = actual as IList$T$ ?? new List$T$(actual); 726948" />
<Node Id="25012:[2963..3048).1" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 726949" />
<Node Id="25012:[2963..3048).2" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 726950" />
<Node Id="25012:[2963..3048).3" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 726951" />
<Node Id="25012:[2963..3048).4" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 726952" />
<Node Id="25012:[2993..3046).1" Label="lcs.CalculateDiff(expectedList, actualList, toString) 726953" />
<Node Id="25012:[1574..1592).1" Label="param CalculateDiff(IList$T$ sequenceA) 726954" />
<Node Id="25012:[1594..1612).1" Label="param CalculateDiff(IList$T$ sequenceB) 726955" />
<Node Id="25012:[1614..1638).1" Label="param CalculateDiff(Func$T, string$ toString) 726956" />
<Node Id="25012:[1533..2415).1" Label="param CalculateDiff(this) 726957" />
<Node Id="25012:[1672..2400).1" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 726958" />
<Node Id="25012:[1672..2400).2" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 726959" />
<Node Id="25012:[1672..2400).3" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 726960" />
<Node Id="25012:[1672..2400).4" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 726961" />
<Node Id="25012:[1693..1757).1" Label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 726962" />
<Node Id="25012:[5394..5413).1" Label="param GetEdits(TSequence sequenceA) 726963" />
<Node Id="25012:[5415..5426).1" Label="param GetEdits(int lengthA) 726964" />
<Node Id="25012:[5428..5447).1" Label="param GetEdits(TSequence sequenceB) 726965" />
<Node Id="25012:[5449..5460).1" Label="param GetEdits(int lengthB) 726966" />
<Node Id="25012:[5357..6686).1" Label="param GetEdits(this) 726967" />
<Node Id="25012:[5494..5563).1" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 726968" />
<Node Id="25012:[5494..5563).2" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 726969" />
<Node Id="25012:[5494..5563).3" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 726970" />
<Node Id="25012:[5494..5563).4" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 726971" />
<Node Id="25012:[5505..5562).1" Label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 726972" />
<Node Id="25012:[9402..9421).1" Label="param ComputeCostMatrix(TSequence sequenceA) 726973" />
<Node Id="25012:[9423..9434).1" Label="param ComputeCostMatrix(int lengthA) 726974" />
<Node Id="25012:[9436..9455).1" Label="param ComputeCostMatrix(TSequence sequenceB) 726975" />
<Node Id="25012:[9457..9468).1" Label="param ComputeCostMatrix(int lengthB) 726976" />
<Node Id="25012:[9369..10636).1" Label="param ComputeCostMatrix(this) 726977" />
<Node Id="25012:[9502..9523).1" Label="var la = lengthA + 1; 726978" />
<Node Id="25012:[9502..9523).2" Label="var la = lengthA + 1; 726979" />
<Node Id="25012:[9541..9562).1" Label="var lb = lengthB + 1; 726980" />
<Node Id="25012:[9541..9562).2" Label="var lb = lengthB + 1; 726981" />
<Node Id="25012:[9740..9764).1" Label="var d = new int[la, lb]; 726982" />
<Node Id="25012:[9784..9796).1" Label="d[0, 0] = 0; 726983" />
<Node Id="25012:[9784..9791).1" Label="d[0, 0] 726984" />
<Node Id="25012:[9814..9943).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 726985" />
<Node Id="25012:[9814..9943).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 726986" />
<Node Id="25012:[9889..9924).1" Label="d[i, 0] = d[i - 1, 0] + DeleteCost; 726987" />
<Node Id="25012:[9889..9924).5" Label="d[i, 0] = d[i - 1, 0] + DeleteCost; 726988" />
<Node Id="25012:[9889..9896).1" Label="d[i, 0] 726989" />
<Node Id="25012:[9963..10092).1" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 726990" />
<Node Id="25012:[9963..10092).3" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 726991" />
<Node Id="25012:[10038..10073).1" Label="d[0, j] = d[0, j - 1] + InsertCost; 726992" />
<Node Id="25012:[10038..10073).5" Label="d[0, j] = d[0, j - 1] + InsertCost; 726993" />
<Node Id="25012:[10038..10045).1" Label="d[0, j] 726994" />
<Node Id="25012:[10112..10592).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 726995" />
<Node Id="25012:[10112..10592).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 726996" />
<Node Id="25012:[10187..10573).1" Label="for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    } 726997" />
<Node Id="25012:[10187..10573).3" Label="for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    } 726998" />
<Node Id="25012:[10270..10363).1" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 726999" />
<Node Id="25012:[10270..10363).5" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 727000" />
<Node Id="25012:[10270..10363).6" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 727001" />
<Node Id="25012:[10270..10363).10" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 727002" />
<Node Id="25012:[10298..10344).1" Label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 727003" />
<Node Id="25012:[1344..1362).1" Label="param ItemsEqual(IList$T$ sequenceA) 727004" />
<Node Id="25012:[1364..1374).1" Label="param ItemsEqual(int indexA) 727005" />
<Node Id="25012:[1376..1394).1" Label="param ItemsEqual(IList$T$ sequenceB) 727006" />
<Node Id="25012:[1396..1406).1" Label="param ItemsEqual(int indexB) 727007" />
<Node Id="25012:[1309..1517).1" Label="param ItemsEqual(this) 727008" />
<Node Id="25012:[1440..1502).1" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 727009" />
<Node Id="25012:[1440..1502).3" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 727010" />
<Node Id="25012:[1440..1502).5" Label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 727011" />
<Node Id="25012:[10270..10363).17" Label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 727012" />
<Node Id="25012:[10389..10423).1" Label="int m2 = d[i - 1, j] + DeleteCost; 727013" />
<Node Id="25012:[10389..10423).3" Label="int m2 = d[i - 1, j] + DeleteCost; 727014" />
<Node Id="25012:[10449..10483).1" Label="int m3 = d[i, j - 1] + InsertCost; 727015" />
<Node Id="25012:[10449..10483).3" Label="int m3 = d[i, j - 1] + InsertCost; 727016" />
<Node Id="25012:[10509..10550).1" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 727017" />
<Node Id="25012:[10509..10550).2" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 727018" />
<Node Id="25012:[10509..10550).3" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 727019" />
<Node Id="25012:[10509..10550).5" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 727020" />
<Node Id="25012:[10509..10550).6" Label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 727021" />
<Node Id="25012:[10509..10516).1" Label="d[i, j] 727022" />
<Node Id="25012:[10612..10621).1" Label="return d; 727023" />
<Node Id="25012:[5581..5597).1" Label="int i = lengthA; 727024" />
<Node Id="25012:[5615..5631).1" Label="int j = lengthB; 727025" />
<Node Id="25012:[5651..6341).1" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 727026" />
<Node Id="25012:[5651..6341).2" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 727027" />
<Node Id="25012:[5651..6341).4" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 727028" />
<Node Id="25012:[5651..6341).5" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 727029" />
<Node Id="25012:[5716..6322).1" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 727030" />
<Node Id="25012:[5716..6322).2" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 727031" />
<Node Id="25012:[5716..6322).4" Label="if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 727032" />
<Node Id="25012:[5931..6322).1" Label="if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 727033" />
<Node Id="25012:[5931..6322).2" Label="if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    } 727034" />
<Node Id="25012:[6194..6198).1" Label="i--; 727035" />
<Node Id="25012:[6224..6228).1" Label="j--; 727036" />
<Node Id="25012:[6254..6299).1" Label="yield return new Edit(EditKind.Update, i, j); 727037" />
<Node Id="25012:[6254..6299).2" Label="yield return new Edit(EditKind.Update, i, j); 727038" />
<Node Id="25012:[6254..6299).3" Label="yield return new Edit(EditKind.Update, i, j); 727039" />
<Node Id="25012:[6254..6299).4" Label="yield return new Edit(EditKind.Update, i, j); 727040" />
<Node Id="25012:[6267..6298).1" Label="new Edit(EditKind.Update, i, j) 727041" />
<Node Id="25012:[3967..3980).1" Label="param Edit(EditKind kind) 727042" />
<Node Id="25012:[3982..3992).1" Label="param Edit(int indexA) 727043" />
<Node Id="25012:[3994..4004).1" Label="param Edit(int indexB) 727044" />
<Node Id="25012:[3953..4168).1" Label="param Edit(this) 727045" />
<Node Id="25012:[4046..4055).1" Label="this.Kind 727046" />
<Node Id="25012:[4085..4096).1" Label="this.IndexA 727047" />
<Node Id="25012:[4128..4139).1" Label="this.IndexB 727048" />
<Node Id="25012:[6361..6506).1" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 727049" />
<Node Id="25012:[6361..6506).2" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 727050" />
<Node Id="25012:[6526..6671).1" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 727051" />
<Node Id="25012:[6526..6671).2" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 727052" />
<Node Id="25012:[1672..2400).7" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 727053" />
<Node Id="25012:[1809..2381).1" Label="switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    } 727054" />
<Node Id="25012:[2267..2322).1" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 727055" />
<Node Id="25012:[2267..2322).3" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 727056" />
<Node Id="25012:[2267..2322).5" Label="yield return '    ' + toString(sequenceB[edit.IndexB]); 727057" />
<Node Id="25012:[2963..3048).7" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 727058" />
<Node Id="25003:[21095..21192).10" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 727059" />
<Node Id="25003:[21208..21226).1" Label="actualText.Free(); 727060" />
<Node Id="25003:[21240..21260).1" Label="expectedText.Free(); 727061" />
<Node Id="25003:[21276..21305).1" Label="return assertText.ToString(); 727062" />
<Node Id="25002:[2401..2451).3" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 727063" />
<Node Id="25002:[4446..4475).3" Label="diagnostics.Verify(expected); 727064" />
<Node Id="25002:[4489..4523).1" Label="VerifyAssemblyIds(c, diagnostics); 727065" />
<Node Id="25002:[4489..4523).2" Label="VerifyAssemblyIds(c, diagnostics); 727066" />
<Node Id="25002:[4489..4522).1" Label="VerifyAssemblyIds(c, diagnostics) 727067" />
<Node Id="25002:[4637..4651).1" Label="param VerifyAssemblyIds(TCompilation c) 727068" />
<Node Id="25002:[4653..4691).1" Label="param VerifyAssemblyIds(ImmutableArray$Diagnostic$ diagnostics) 727069" />
<Node Id="25002:[4750..5836).1" Label="foreach (var diagnostic in diagnostics)
            {
                // If this is a diagnostic about a missing assembly, make sure that we can get back
                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about
                // a missing assembly, make sure we get no results back.
                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                }
            } 727070" />
<Node Id="25002:[5097..5821).1" Label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                } 727071" />
<Node Id="25002:[5097..5821).2" Label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                } 727072" />
<Node Id="25002:[5675..5741).1" Label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 727073" />
<Node Id="25002:[5763..5802).1" Label="CustomAssert.True(assemblyIds.IsEmpty); 727074" />
<Node Id="25002:[4489..4523).3" Label="VerifyAssemblyIds(c, diagnostics); 727075" />
<Node Id="25002:[4539..4548).1" Label="return c; 727076" />
</Nodes>
<Links>
<Link Source="25014:[390..448).1" Target="EXTERNAL" />
<Link Source="25014:[390..448).1" Target="25014:[387..448).1" />
<Link Source="28001:[588..156578).1" Target="25014:[387..448).1" />
<Link Source="21002:[772..793).1" Target="21002:[790..793).1" />
<Link Source="21002:[825..848).1" Target="21002:[845..848).1" />
<Link Source="21002:[3098..25375).1" Target="21002:[3243..25375).1" />
<Link Source="21002:[678..25421).1" Target="28001:[588..156578).1" />
<Link Source="21003:[1308..2835).1" Target="21003:[1338..2835).1" />
<Link Source="21003:[2871..3440).1" Target="21003:[2908..3440).1" />
<Link Source="21003:[3476..3915).1" Target="21003:[3516..3915).1" />
<Link Source="21003:[4192..4448).1" Target="21003:[4223..4448).1" />
<Link Source="21003:[4484..4746).1" Target="21003:[4518..4746).1" />
<Link Source="21003:[4782..5071).1" Target="21003:[4813..5071).1" />
<Link Source="21003:[5107..5397).1" Target="21003:[5142..5397).1" />
<Link Source="21003:[5433..5718).1" Target="21003:[5462..5718).1" />
<Link Source="21003:[5754..6038).1" Target="21003:[5787..6038).1" />
<Link Source="21003:[6074..6460).1" Target="21003:[6109..6460).1" />
<Link Source="21003:[6496..6920).1" Target="21003:[6535..6920).1" />
<Link Source="21003:[6956..7250).1" Target="21003:[6993..7250).1" />
<Link Source="21003:[7286..7557).1" Target="21003:[7321..7557).1" />
<Link Source="21003:[7593..7980).1" Target="21003:[7631..7980).1" />
<Link Source="21003:[8016..8155).1" Target="21003:[8047..8155).1" />
<Link Source="21003:[8191..8359).1" Target="21003:[8220..8359).1" />
<Link Source="21003:[8395..20279).1" Target="21003:[8415..20279).1" />
<Link Source="21003:[20315..20617).1" Target="21003:[20353..20617).1" />
<Link Source="21003:[20653..21473).1" Target="21003:[20689..21473).1" />
<Link Source="25004:[2227..2317).1" Target="EXTERNAL" />
<Link Source="25004:[2332..2368).1" Target="EXTERNAL" />
<Link Source="25004:[2183..2369).1" Target="25004:[2227..2317).1" />
<Link Source="25004:[2183..2369).1" Target="25004:[2332..2368).1" />
<Link Source="25004:[2183..2369).1" Target="EXTERNAL" />
<Link Source="25004:[2155..2369).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2602..2696).1" Target="EXTERNAL" />
<Link Source="25004:[2711..2747).1" Target="EXTERNAL" />
<Link Source="25004:[2558..2748).1" Target="25004:[2602..2696).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2711..2747).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2531..2748).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[2914..2947).1" Target="EXTERNAL" />
<Link Source="25004:[3094..3171).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[3094..3171).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[2894..3172).1" Target="25004:[3077..3172).1" />
<Link Source="25004:[5182..5218).1" Target="EXTERNAL" />
<Link Source="25004:[3446..5219).1" Target="25004:[3490..5167).1" />
<Link Source="25004:[3446..5219).1" Target="25004:[5182..5218).1" />
<Link Source="25004:[3432..5219).1" Target="25004:[3446..5219).1" />
<Link Source="25004:[5576..5645).1" Target="EXTERNAL" />
<Link Source="25004:[5660..5696).1" Target="EXTERNAL" />
<Link Source="25004:[5532..5697).1" Target="25004:[5576..5645).1" />
<Link Source="25004:[5532..5697).1" Target="25004:[5660..5696).1" />
<Link Source="25004:[5532..5697).1" Target="EXTERNAL" />
<Link Source="25004:[5508..5697).1" Target="25004:[5532..5697).1" />
<Link Source="25004:[6321..6439).1" Target="EXTERNAL" />
<Link Source="25004:[6458..6494).1" Target="EXTERNAL" />
<Link Source="25004:[6275..6495).1" Target="25004:[6321..6439).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[6458..6494).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[6244..6495).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6714..6838).1" Target="EXTERNAL" />
<Link Source="25004:[6853..6889).1" Target="EXTERNAL" />
<Link Source="25004:[6672..6890).1" Target="25004:[6714..6838).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6853..6889).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6637..6890).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7130..7249).1" Target="EXTERNAL" />
<Link Source="25004:[7264..7300).1" Target="EXTERNAL" />
<Link Source="25004:[7088..7301).1" Target="25004:[7130..7249).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[7264..7300).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7066..7301).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[7532..7667).1" Target="EXTERNAL" />
<Link Source="25004:[7682..7718).1" Target="EXTERNAL" />
<Link Source="25004:[7490..7719).1" Target="25004:[7532..7667).1" />
<Link Source="25004:[7490..7719).1" Target="25004:[7682..7718).1" />
<Link Source="25004:[7490..7719).1" Target="EXTERNAL" />
<Link Source="25004:[7464..7719).1" Target="25004:[7490..7719).1" />
<Link Source="25004:[7940..8064).1" Target="EXTERNAL" />
<Link Source="25004:[8079..8115).1" Target="EXTERNAL" />
<Link Source="25004:[7898..8116).1" Target="25004:[7940..8064).1" />
<Link Source="25004:[7898..8116).1" Target="25004:[8079..8115).1" />
<Link Source="25004:[7898..8116).1" Target="EXTERNAL" />
<Link Source="25004:[7877..8116).1" Target="25004:[7898..8116).1" />
<Link Source="25004:[8324..8442).1" Target="EXTERNAL" />
<Link Source="25004:[8457..8493).1" Target="EXTERNAL" />
<Link Source="25004:[8282..8494).1" Target="25004:[8324..8442).1" />
<Link Source="25004:[8282..8494).1" Target="25004:[8457..8493).1" />
<Link Source="25004:[8282..8494).1" Target="EXTERNAL" />
<Link Source="25004:[8264..8494).1" Target="25004:[8282..8494).1" />
<Link Source="25004:[8694..8807).1" Target="EXTERNAL" />
<Link Source="25004:[8822..8858).1" Target="EXTERNAL" />
<Link Source="25004:[8652..8859).1" Target="25004:[8694..8807).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[8822..8858).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[8636..8859).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[9063..9214).1" Target="EXTERNAL" />
<Link Source="25004:[9229..9265).1" Target="EXTERNAL" />
<Link Source="25004:[9021..9266).1" Target="25004:[9063..9214).1" />
<Link Source="25004:[9021..9266).1" Target="25004:[9229..9265).1" />
<Link Source="25004:[9021..9266).1" Target="EXTERNAL" />
<Link Source="25004:[8997..9266).1" Target="25004:[9021..9266).1" />
<Link Source="25004:[10404..10440).1" Target="EXTERNAL" />
<Link Source="25004:[9436..10441).1" Target="25004:[9478..10389).1" />
<Link Source="25004:[9436..10441).1" Target="25004:[10404..10440).1" />
<Link Source="25004:[9420..10441).1" Target="25004:[9436..10441).1" />
<Link Source="25004:[10811..10967).1" Target="EXTERNAL" />
<Link Source="25004:[10982..11018).1" Target="EXTERNAL" />
<Link Source="25004:[10769..11019).1" Target="25004:[10811..10967).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[10982..11018).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[10749..11019).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[11415..11589).1" Target="EXTERNAL" />
<Link Source="25004:[11604..11640).1" Target="EXTERNAL" />
<Link Source="25004:[11373..11641).1" Target="25004:[11415..11589).1" />
<Link Source="25004:[11373..11641).1" Target="25004:[11604..11640).1" />
<Link Source="25004:[11373..11641).1" Target="EXTERNAL" />
<Link Source="25004:[11345..11641).1" Target="25004:[11373..11641).1" />
<Link Source="25004:[12432..12560).1" Target="EXTERNAL" />
<Link Source="25004:[12575..12611).1" Target="EXTERNAL" />
<Link Source="25004:[12390..12612).1" Target="25004:[12432..12560).1" />
<Link Source="25004:[12390..12612).1" Target="25004:[12575..12611).1" />
<Link Source="25004:[12390..12612).1" Target="EXTERNAL" />
<Link Source="25004:[12369..12612).1" Target="25004:[12390..12612).1" />
<Link Source="25004:[12815..12944).1" Target="EXTERNAL" />
<Link Source="25004:[12959..12995).1" Target="EXTERNAL" />
<Link Source="25004:[12773..12996).1" Target="25004:[12815..12944).1" />
<Link Source="25004:[12773..12996).1" Target="25004:[12959..12995).1" />
<Link Source="25004:[12773..12996).1" Target="EXTERNAL" />
<Link Source="25004:[12760..12996).1" Target="25004:[12773..12996).1" />
<Link Source="25004:[13204..13343).1" Target="EXTERNAL" />
<Link Source="25004:[13358..13394).1" Target="EXTERNAL" />
<Link Source="25004:[13162..13395).1" Target="25004:[13204..13343).1" />
<Link Source="25004:[13162..13395).1" Target="25004:[13358..13394).1" />
<Link Source="25004:[13162..13395).1" Target="EXTERNAL" />
<Link Source="25004:[13138..13395).1" Target="25004:[13162..13395).1" />
<Link Source="25004:[13621..13796).1" Target="EXTERNAL" />
<Link Source="25004:[13811..13847).1" Target="EXTERNAL" />
<Link Source="25004:[13579..13848).1" Target="25004:[13621..13796).1" />
<Link Source="25004:[13579..13848).1" Target="25004:[13811..13847).1" />
<Link Source="25004:[13579..13848).1" Target="EXTERNAL" />
<Link Source="25004:[13551..13848).1" Target="25004:[13579..13848).1" />
<Link Source="25004:[14066..14175).1" Target="EXTERNAL" />
<Link Source="25004:[14190..14226).1" Target="EXTERNAL" />
<Link Source="25004:[14024..14227).1" Target="25004:[14066..14175).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[14190..14226).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[14010..14227).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14421..14531).1" Target="EXTERNAL" />
<Link Source="25004:[14546..14582).1" Target="EXTERNAL" />
<Link Source="25004:[14379..14583).1" Target="25004:[14421..14531).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14546..14582).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14361..14583).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14798..14913).1" Target="EXTERNAL" />
<Link Source="25004:[14928..14964).1" Target="EXTERNAL" />
<Link Source="25004:[14756..14965).1" Target="25004:[14798..14913).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14928..14964).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14725..14965).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15193..15301).1" Target="EXTERNAL" />
<Link Source="25004:[15316..15352).1" Target="EXTERNAL" />
<Link Source="25004:[15151..15353).1" Target="25004:[15193..15301).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[15316..15352).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15133..15353).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[15554..15670).1" Target="EXTERNAL" />
<Link Source="25004:[15685..15721).1" Target="EXTERNAL" />
<Link Source="25004:[15512..15722).1" Target="25004:[15554..15670).1" />
<Link Source="25004:[15512..15722).1" Target="25004:[15685..15721).1" />
<Link Source="25004:[15512..15722).1" Target="EXTERNAL" />
<Link Source="25004:[15495..15722).1" Target="25004:[15512..15722).1" />
<Link Source="25004:[15925..16050).1" Target="EXTERNAL" />
<Link Source="25004:[16065..16101).1" Target="EXTERNAL" />
<Link Source="25004:[15883..16102).1" Target="25004:[15925..16050).1" />
<Link Source="25004:[15883..16102).1" Target="25004:[16065..16101).1" />
<Link Source="25004:[15883..16102).1" Target="EXTERNAL" />
<Link Source="25004:[15862..16102).1" Target="25004:[15883..16102).1" />
<Link Source="25004:[16314..16416).1" Target="EXTERNAL" />
<Link Source="25004:[16431..16467).1" Target="EXTERNAL" />
<Link Source="25004:[16272..16468).1" Target="25004:[16314..16416).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[16431..16467).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[16250..16468).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[16687..16800).1" Target="EXTERNAL" />
<Link Source="25004:[16815..16851).1" Target="EXTERNAL" />
<Link Source="25004:[16645..16852).1" Target="25004:[16687..16800).1" />
<Link Source="25004:[16645..16852).1" Target="25004:[16815..16851).1" />
<Link Source="25004:[16645..16852).1" Target="EXTERNAL" />
<Link Source="25004:[16618..16852).1" Target="25004:[16645..16852).1" />
<Link Source="25004:[17083..17200).1" Target="EXTERNAL" />
<Link Source="25004:[17215..17251).1" Target="EXTERNAL" />
<Link Source="25004:[17041..17252).1" Target="25004:[17083..17200).1" />
<Link Source="25004:[17041..17252).1" Target="25004:[17215..17251).1" />
<Link Source="25004:[17041..17252).1" Target="EXTERNAL" />
<Link Source="25004:[17012..17252).1" Target="25004:[17041..17252).1" />
<Link Source="25004:[17497..17625).1" Target="EXTERNAL" />
<Link Source="25004:[17640..17676).1" Target="EXTERNAL" />
<Link Source="25004:[17455..17677).1" Target="25004:[17497..17625).1" />
<Link Source="25004:[17455..17677).1" Target="25004:[17640..17676).1" />
<Link Source="25004:[17455..17677).1" Target="EXTERNAL" />
<Link Source="25004:[17421..17677).1" Target="25004:[17455..17677).1" />
<Link Source="25004:[17911..18059).1" Target="EXTERNAL" />
<Link Source="25004:[18074..18110).1" Target="EXTERNAL" />
<Link Source="25004:[17869..18111).1" Target="25004:[17911..18059).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[18074..18110).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[17850..18111).1" Target="25004:[17869..18111).1" />
<Link Source="25004:[18321..18481).1" Target="EXTERNAL" />
<Link Source="25004:[18496..18532).1" Target="EXTERNAL" />
<Link Source="25004:[18279..18533).1" Target="25004:[18321..18481).1" />
<Link Source="25004:[18279..18533).1" Target="25004:[18496..18532).1" />
<Link Source="25004:[18279..18533).1" Target="EXTERNAL" />
<Link Source="25004:[18255..18533).1" Target="25004:[18279..18533).1" />
<Link Source="25004:[18754..18880).1" Target="EXTERNAL" />
<Link Source="25004:[18895..18931).1" Target="EXTERNAL" />
<Link Source="25004:[18712..18932).1" Target="25004:[18754..18880).1" />
<Link Source="25004:[18712..18932).1" Target="25004:[18895..18931).1" />
<Link Source="25004:[18712..18932).1" Target="EXTERNAL" />
<Link Source="25004:[18687..18932).1" Target="25004:[18712..18932).1" />
<Link Source="25004:[19120..19147).1" Target="25004:[19130..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19120..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19094..19148).1" />
<Link Source="25004:[19081..19148).1" Target="25004:[19094..19148).5" />
<Link Source="25004:[10673..10688).1" Target="EXTERNAL" />
<Link Source="25004:[10673..10688).1" Target="21003:[51329..51357).1" />
<Link Source="21003:[51307..51358).1" Target="25004:[10673..10688).1" />
<Link Source="21003:[51307..51358).1" Target="EXTERNAL" />
<Link Source="21003:[51292..51358).1" Target="21003:[51307..51358).1" />
<Link Source="21003:[56524..56550).1" Target="21003:[56538..56550).1" />
<Link Source="21003:[56584..56609).1" Target="21003:[56596..56609).1" />
<Link Source="21003:[92381..99056).1" Target="21003:[92394..99056).1" />
<Link Source="21003:[101743..102290).1" Target="21003:[101764..102290).1" />
<Link Source="21003:[1215..102298).1" Target="21002:[678..25421).1" />
<Link Source="25015:[917..26825).1" Target="21003:[1215..102298).1" />
<Link Source="25004:[926..968).1" Target="25015:[917..26825).1" />
<Link Source="25004:[908..913).1" Target="25004:[926..968).1" />
<Link Source="25004:[908..913).1" Target="25015:[917..26825).1" />
<Link Source="25014:[387..448).372" Target="25014:[387..448).1" />
<Link Source="25014:[387..448).372" Target="25014:[390..448).1" />
<Link Source="25014:[387..448).372" Target="25004:[908..913).1" />
<Link Source="28001:[46124..47168).1" Target="25014:[387..448).1" />
<Link Source="28001:[46437..46751).1" Target="25014:[387..448).1" />
<Link Source="28001:[46765..46816).1" Target="28001:[46437..46751).1" />
<Link Source="28001:[46765..46816).1" Target="25014:[387..448).1" />
<Link Source="28001:[46802..46814).1" Target="25014:[387..448).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[46765..46816).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[46802..46814).1" />
<Link Source="21004:[2290..2296).1" Target="21004:[2251..2264).1" />
<Link Source="21004:[2290..2296).1" Target="28001:[46802..46814).1" />
<Link Source="21004:[2269..2297).1" Target="28001:[46802..46814).1" />
<Link Source="21004:[839..851).1" Target="21004:[2290..2296).1" />
<Link Source="21004:[839..851).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[814..902).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[877..882).1" Target="21004:[839..851).1" />
<Link Source="21004:[877..882).1" Target="21004:[814..902).1" />
<Link Source="21004:[877..882).1" Target="21004:[2269..2297).1" />
<Link Source="28001:[46765..46816).2" Target="21004:[2269..2297).1" />
<Link Source="28001:[46765..46816).2" Target="25014:[387..448).1" />
<Link Source="28001:[46765..46816).4" Target="25014:[387..448).1" />
<Link Source="28001:[46784..46815).1" Target="25014:[387..448).1" />
<Link Source="21003:[44736..44759).1" Target="28001:[46765..46816).2" />
<Link Source="21003:[44736..44759).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[44774..44822).1" Target="28001:[46765..46816).4" />
<Link Source="21003:[44774..44822).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[44837..44876).1" Target="28001:[46765..46816).4" />
<Link Source="21003:[44837..44876).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[44891..44929).1" Target="28001:[46765..46816).4" />
<Link Source="21003:[44891..44929).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[44944..45002).1" Target="28001:[46765..46816).4" />
<Link Source="21003:[44944..45002).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45017..45041).1" Target="28001:[46765..46816).4" />
<Link Source="21003:[45017..45041).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45056..45082).1" Target="28001:[46765..46816).4" />
<Link Source="21003:[45056..45082).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45097..45128).1" Target="28001:[46765..46816).4" />
<Link Source="21003:[45097..45128).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45156..45162).1" Target="21003:[44736..44759).1" />
<Link Source="21003:[45156..45162).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45198..45213).1" Target="21003:[44944..45002).1" />
<Link Source="21003:[45198..45213).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45215..45225).1" Target="21003:[44774..44822).1" />
<Link Source="21003:[45215..45225).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45164..45226).1" Target="28001:[46784..46815).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45198..45213).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45215..45225).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9697..9732).1" Target="25005:[9600..9618).1" />
<Link Source="25005:[9697..9732).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9714..9731).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9697..9732).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[7569..7600).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[8889..8907).1" Target="25005:[7605..9525).1" />
<Link Source="25005:[6208..6241).1" Target="EXTERNAL" />
<Link Source="25005:[6208..6241).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[6270..6298).1" Target="25005:[6208..6241).1" />
<Link Source="25005:[4543..4693).1" Target="25005:[6270..6298).1" />
<Link Source="25005:[4648..4670).1" Target="25005:[6270..6298).1" />
<Link Source="25004:[12011..12051).1" Target="EXTERNAL" />
<Link Source="25004:[12011..12051).1" Target="25005:[4648..4670).1" />
<Link Source="25005:[4543..4693).7" Target="25004:[12011..12051).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[4543..4693).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[6270..6298).1" />
<Link Source="25005:[6208..6298).1" Target="25005:[4543..4693).7" />
<Link Source="25005:[6208..6298).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[9746..9845).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9620..9671).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9746..9845).1" />
<Link Source="25005:[9746..9845).2" Target="21003:[45164..45226).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[6208..6298).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[9746..9845).2" />
<Link Source="21003:[45228..45235).1" Target="21003:[44837..44876).1" />
<Link Source="21003:[45228..45235).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45237..45249).1" Target="21003:[44891..44929).1" />
<Link Source="21003:[45237..45249).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45251..45263).1" Target="21003:[45017..45041).1" />
<Link Source="21003:[45251..45263).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45265..45279).1" Target="21003:[45056..45082).1" />
<Link Source="21003:[45265..45279).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45281..45299).1" Target="21003:[45097..45128).1" />
<Link Source="21003:[45281..45299).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45133..45300).1" Target="28001:[46784..46815).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45156..45162).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45420..45468).1" Target="25005:[9812..9830).1" />
<Link Source="21003:[45420..45468).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45228..45235).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45237..45249).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45251..45263).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45265..45279).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45281..45299).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45382..45405).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45420..45468).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45483..45522).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45537..45575).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45590..45614).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45629..45655).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45670..45701).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45842..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45842..45846).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45706..45847).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45728..45734).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45736..45746).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45748..45755).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45757..45769).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45771..45783).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45785..45799).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45801..45819).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45821..45846).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[46070..46101).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[46150..46171).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46298..46349).1" Target="21003:[45706..45847).1" />
<Link Source="21004:[949..980).1" Target="21003:[46280..46350).1" />
<Link Source="21004:[949..980).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[982..1008).1" Target="21003:[46280..46350).2" />
<Link Source="21004:[982..1008).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[914..2190).1" Target="21003:[45929..45952).1" />
<Link Source="21004:[914..2190).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[914..2190).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[877..882).1" />
<Link Source="21004:[1034..2179).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1122..1208).1" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[982..1008).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[949..980).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[1034..2179).1" />
<Link Source="21004:[1137..1205).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34091..34111).1" Target="21004:[1122..1208).3" />
<Link Source="21003:[34091..34111).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34113..34146).1" Target="21004:[1122..1208).4" />
<Link Source="21003:[34113..34146).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34113..34146).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34198..34304).1" />
<Link Source="21003:[34198..34304).2" Target="21004:[1137..1205).1" />
<Link Source="21010:[590..618).1" Target="EXTERNAL" />
<Link Source="21010:[620..662).1" Target="EXTERNAL" />
<Link Source="21010:[567..663).5" Target="21010:[590..618).1" />
<Link Source="21010:[567..663).5" Target="21010:[620..662).1" />
<Link Source="21010:[567..663).5" Target="21010:[567..663).1" />
<Link Source="21010:[557..663).1" Target="21010:[567..663).5" />
<Link Source="21010:[742..763).1" Target="EXTERNAL" />
<Link Source="21010:[725..764).1" Target="21010:[557..663).1" />
<Link Source="21010:[725..764).1" Target="21010:[567..663).5" />
<Link Source="21010:[725..764).1" Target="21010:[742..763).1" />
<Link Source="21010:[716..764).1" Target="21010:[725..764).1" />
<Link Source="21010:[856..879).1" Target="EXTERNAL" />
<Link Source="21010:[828..880).1" Target="21010:[557..663).1" />
<Link Source="21010:[828..880).1" Target="21010:[567..663).5" />
<Link Source="21010:[828..880).1" Target="21010:[856..879).1" />
<Link Source="21010:[817..880).1" Target="21010:[828..880).1" />
<Link Source="21010:[972..995).1" Target="EXTERNAL" />
<Link Source="21010:[944..996).1" Target="21010:[557..663).1" />
<Link Source="21010:[944..996).1" Target="21010:[567..663).5" />
<Link Source="21010:[944..996).1" Target="21010:[972..995).1" />
<Link Source="21010:[933..996).1" Target="21010:[944..996).1" />
<Link Source="21010:[1090..1115).1" Target="EXTERNAL" />
<Link Source="21010:[1062..1116).1" Target="21010:[557..663).1" />
<Link Source="21010:[1062..1116).1" Target="21010:[567..663).5" />
<Link Source="21010:[1062..1116).1" Target="21010:[1090..1115).1" />
<Link Source="21010:[1049..1116).1" Target="21010:[1062..1116).1" />
<Link Source="21010:[1210..1235).1" Target="EXTERNAL" />
<Link Source="21010:[1182..1236).1" Target="21010:[557..663).1" />
<Link Source="21010:[1182..1236).1" Target="21010:[567..663).5" />
<Link Source="21010:[1182..1236).1" Target="21010:[1210..1235).1" />
<Link Source="21010:[1169..1236).1" Target="21010:[1182..1236).1" />
<Link Source="21010:[1330..1355).1" Target="EXTERNAL" />
<Link Source="21010:[1302..1356).1" Target="21010:[557..663).1" />
<Link Source="21010:[1302..1356).1" Target="21010:[567..663).5" />
<Link Source="21010:[1302..1356).1" Target="21010:[1330..1355).1" />
<Link Source="21010:[1289..1356).1" Target="21010:[1302..1356).1" />
<Link Source="21010:[1454..1477).1" Target="EXTERNAL" />
<Link Source="21010:[1426..1478).1" Target="21010:[557..663).1" />
<Link Source="21010:[1426..1478).1" Target="21010:[567..663).5" />
<Link Source="21010:[1426..1478).1" Target="21010:[1454..1477).1" />
<Link Source="21010:[1409..1478).1" Target="21010:[1426..1478).1" />
<Link Source="21010:[1576..1599).1" Target="EXTERNAL" />
<Link Source="21010:[1548..1600).1" Target="21010:[557..663).1" />
<Link Source="21010:[1548..1600).1" Target="21010:[567..663).5" />
<Link Source="21010:[1548..1600).1" Target="21010:[1576..1599).1" />
<Link Source="21010:[1531..1600).1" Target="21010:[1548..1600).1" />
<Link Source="21010:[1692..1715).1" Target="EXTERNAL" />
<Link Source="21010:[1664..1716).1" Target="21010:[557..663).1" />
<Link Source="21010:[1664..1716).1" Target="21010:[567..663).5" />
<Link Source="21010:[1664..1716).1" Target="21010:[1692..1715).1" />
<Link Source="21010:[1653..1716).1" Target="21010:[1664..1716).1" />
<Link Source="21010:[1808..1831).1" Target="EXTERNAL" />
<Link Source="21010:[1780..1832).1" Target="21010:[557..663).1" />
<Link Source="21010:[1780..1832).1" Target="21010:[567..663).5" />
<Link Source="21010:[1780..1832).1" Target="21010:[1808..1831).1" />
<Link Source="21010:[1769..1832).1" Target="21010:[1780..1832).1" />
<Link Source="21010:[1950..1976).1" Target="EXTERNAL" />
<Link Source="21010:[1920..1977).1" Target="21010:[557..663).1" />
<Link Source="21010:[1920..1977).1" Target="21010:[567..663).5" />
<Link Source="21010:[1920..1977).1" Target="21010:[1950..1976).1" />
<Link Source="21010:[1885..1977).1" Target="21010:[1920..1977).1" />
<Link Source="21010:[2060..2067).1" Target="21010:[557..663).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2067).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2080..2109).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7832..7853).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[7783..7814).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).2" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[7816..7830).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[7832..7853).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).3" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).4" />
<Link Source="21010:[7879..7992).5" Target="21010:[2060..2110).1" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).5" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).2" />
<Link Source="21010:[7931..7989).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).2" />
<Link Source="21010:[7879..7992).9" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[7931..7989).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[2060..2110).1" />
<Link Source="21010:[2030..2110).1" Target="21010:[7879..7992).9" />
<Link Source="21010:[2227..2274).1" Target="EXTERNAL" />
<Link Source="21010:[2227..2292).1" Target="21010:[2227..2274).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2227..2292).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2295..2296).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[557..663).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[567..663).5" />
<Link Source="21010:[2199..2297).1" Target="21010:[2227..2296).1" />
<Link Source="21010:[2163..2297).1" Target="21010:[2199..2297).1" />
<Link Source="21010:[2401..2450).1" Target="EXTERNAL" />
<Link Source="21010:[2401..2468).1" Target="21010:[2401..2450).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[557..663).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[567..663).5" />
<Link Source="21010:[2373..2469).1" Target="21010:[2401..2468).1" />
<Link Source="21010:[2350..2469).1" Target="21010:[2373..2469).1" />
<Link Source="21010:[2576..2599).1" Target="EXTERNAL" />
<Link Source="21010:[2548..2600).1" Target="21010:[557..663).1" />
<Link Source="21010:[2548..2600).1" Target="21010:[567..663).5" />
<Link Source="21010:[2548..2600).1" Target="21010:[2576..2599).1" />
<Link Source="21010:[2522..2600).1" Target="21010:[2548..2600).1" />
<Link Source="21010:[2655..2705).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[2774..2838).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2954..2982).1" Target="EXTERNAL" />
<Link Source="21010:[2984..3025).1" Target="EXTERNAL" />
<Link Source="21010:[3027..3067).1" Target="EXTERNAL" />
<Link Source="21010:[2931..3068).3" Target="21010:[2954..2982).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2984..3025).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[3027..3067).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2931..3068).1" />
<Link Source="21010:[3082..3104).1" Target="21010:[2774..2838).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2931..3068).3" />
<Link Source="21010:[2931..3105).1" Target="21010:[3082..3104).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2891..3105).1" Target="21010:[2931..3105).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3487..3556).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3524..3544).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3546..3552).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[817..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[567..663).5" />
<Link Source="21010:[3465..3557).1" Target="21010:[828..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).2" />
<Link Source="21010:[3436..3557).1" Target="21010:[3465..3557).1" />
<Link Source="21010:[3612..3656).1" Target="21010:[1289..1356).1" />
<Link Source="21010:[3709..3748).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3801..3844).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3897..3943).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[4035..4070).1" Target="EXTERNAL" />
<Link Source="21010:[4072..4097).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).1" Target="21010:[4035..4070).1" />
<Link Source="21010:[10204..10225).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4072..4097).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10264..10288).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[10204..10225).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[10227..10262).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10385..10425).1" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[10264..10288).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10335..10345).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10347..10383).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10385..10425).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10427..10451).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10306..10452).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[4017..4098).1" />
<Link Source="21010:[4004..4098).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4188..4217).1" Target="EXTERNAL" />
<Link Source="21010:[4219..4244).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).2" Target="21010:[4188..4217).1" />
<Link Source="21010:[10204..10225).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4219..4244).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10264..10288).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10335..10345).2" Target="21010:[10204..10225).2" />
<Link Source="21010:[10335..10345).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10347..10383).2" Target="21010:[10227..10262).2" />
<Link Source="21010:[10347..10383).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10385..10425).2" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10427..10451).2" Target="21010:[10264..10288).2" />
<Link Source="21010:[10427..10451).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).49" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).95" Target="21010:[10335..10345).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10347..10383).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10385..10425).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10427..10451).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10306..10452).49" />
<Link Source="21010:[10306..10452).95" Target="21010:[4170..4245).1" />
<Link Source="21010:[4157..4245).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4324..4358).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[4324..4358).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4324..4358).1" Target="21010:[4353..4357).1" />
<Link Source="21010:[4306..4358).1" Target="21010:[4324..4358).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4437..4471).1" Target="21010:[4466..4470).1" />
<Link Source="21010:[4419..4471).1" Target="21010:[4437..4471).1" />
<Link Source="21010:[4561..4596).1" Target="EXTERNAL" />
<Link Source="21010:[4598..4621).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).3" Target="21010:[4561..4596).1" />
<Link Source="21010:[10204..10225).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4598..4621).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10264..10288).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10335..10345).3" Target="21010:[10204..10225).3" />
<Link Source="21010:[10335..10345).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10347..10383).3" Target="21010:[10227..10262).3" />
<Link Source="21010:[10347..10383).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10385..10425).3" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10427..10451).3" Target="21010:[10264..10288).3" />
<Link Source="21010:[10427..10451).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).97" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).143" Target="21010:[10335..10345).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10347..10383).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10385..10425).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10427..10451).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10306..10452).97" />
<Link Source="21010:[10306..10452).143" Target="21010:[4543..4622).1" />
<Link Source="21010:[4532..4622).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[4710..4739).1" Target="EXTERNAL" />
<Link Source="21010:[4741..4764).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).4" Target="21010:[4710..4739).1" />
<Link Source="21010:[10204..10225).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4741..4764).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10264..10288).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10335..10345).4" Target="21010:[10204..10225).4" />
<Link Source="21010:[10335..10345).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10347..10383).4" Target="21010:[10227..10262).4" />
<Link Source="21010:[10347..10383).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10385..10425).4" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10427..10451).4" Target="21010:[10264..10288).4" />
<Link Source="21010:[10427..10451).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).145" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).191" Target="21010:[10335..10345).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10347..10383).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10385..10425).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10427..10451).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10306..10452).145" />
<Link Source="21010:[10306..10452).191" Target="21010:[4692..4765).1" />
<Link Source="21010:[4681..4765).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[4859..4892).1" Target="EXTERNAL" />
<Link Source="21010:[4894..4919).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).5" Target="21010:[4859..4892).1" />
<Link Source="21010:[10204..10225).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4894..4919).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10264..10288).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10335..10345).5" Target="21010:[10204..10225).5" />
<Link Source="21010:[10335..10345).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10347..10383).5" Target="21010:[10227..10262).5" />
<Link Source="21010:[10347..10383).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10385..10425).5" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10427..10451).5" Target="21010:[10264..10288).5" />
<Link Source="21010:[10427..10451).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).193" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).239" Target="21010:[10335..10345).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10347..10383).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10385..10425).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10427..10451).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10306..10452).193" />
<Link Source="21010:[10306..10452).239" Target="21010:[4841..4920).1" />
<Link Source="21010:[4826..4920).1" Target="21010:[10306..10452).239" />
<Link Source="21010:[5010..5043).1" Target="EXTERNAL" />
<Link Source="21010:[5045..5068).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).6" Target="21010:[5010..5043).1" />
<Link Source="21010:[10204..10225).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[5045..5068).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10264..10288).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10335..10345).6" Target="21010:[10204..10225).6" />
<Link Source="21010:[10335..10345).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10347..10383).6" Target="21010:[10227..10262).6" />
<Link Source="21010:[10347..10383).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10385..10425).6" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10427..10451).6" Target="21010:[10264..10288).6" />
<Link Source="21010:[10427..10451).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).241" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).287" Target="21010:[10335..10345).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10347..10383).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10385..10425).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10427..10451).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10306..10452).241" />
<Link Source="21010:[10306..10452).287" Target="21010:[4992..5069).1" />
<Link Source="21010:[4979..5069).1" Target="21010:[10306..10452).287" />
<Link Source="21010:[5164..5184).1" Target="EXTERNAL" />
<Link Source="21010:[5186..5211).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).7" Target="21010:[5164..5184).1" />
<Link Source="21010:[10204..10225).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5186..5211).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10264..10288).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10335..10345).7" Target="21010:[10204..10225).7" />
<Link Source="21010:[10335..10345).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10347..10383).7" Target="21010:[10227..10262).7" />
<Link Source="21010:[10347..10383).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10385..10425).7" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10427..10451).7" Target="21010:[10264..10288).7" />
<Link Source="21010:[10427..10451).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).289" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).335" Target="21010:[10335..10345).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10347..10383).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10385..10425).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10427..10451).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10306..10452).289" />
<Link Source="21010:[10306..10452).335" Target="21010:[5146..5212).1" />
<Link Source="21010:[5130..5212).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[5303..5323).1" Target="EXTERNAL" />
<Link Source="21010:[5325..5348).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).8" Target="21010:[5303..5323).1" />
<Link Source="21010:[10204..10225).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5325..5348).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10264..10288).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10335..10345).8" Target="21010:[10204..10225).8" />
<Link Source="21010:[10335..10345).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10347..10383).8" Target="21010:[10227..10262).8" />
<Link Source="21010:[10347..10383).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10385..10425).8" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10427..10451).8" Target="21010:[10264..10288).8" />
<Link Source="21010:[10427..10451).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).337" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).383" Target="21010:[10335..10345).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10347..10383).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10385..10425).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10427..10451).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10306..10452).337" />
<Link Source="21010:[10306..10452).383" Target="21010:[5285..5349).1" />
<Link Source="21010:[5271..5349).1" Target="21010:[10306..10452).383" />
<Link Source="21010:[5429..5461).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5429..5461).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5429..5461).1" Target="21010:[5456..5460).1" />
<Link Source="21010:[5410..5461).1" Target="21010:[5429..5461).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[5539..5571).1" Target="21010:[5566..5570).1" />
<Link Source="21010:[5520..5571).1" Target="21010:[5539..5571).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[5649..5679).1" Target="21010:[5674..5678).1" />
<Link Source="21010:[5632..5679).1" Target="21010:[5649..5679).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[4681..4765).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[5755..5785).1" Target="21010:[5780..5784).1" />
<Link Source="21010:[5738..5785).1" Target="21010:[5755..5785).1" />
<Link Source="21010:[5900..5951).1" Target="EXTERNAL" />
<Link Source="21010:[5866..5952).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5866..5952).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5866..5952).1" Target="21010:[5900..5951).1" />
<Link Source="21010:[5866..5952).1" Target="EXTERNAL" />
<Link Source="21010:[5846..5952).1" Target="21010:[5866..5952).1" />
<Link Source="21010:[6065..6116).1" Target="EXTERNAL" />
<Link Source="21010:[6031..6117).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[6031..6117).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[6031..6117).1" Target="21010:[6065..6116).1" />
<Link Source="21010:[6031..6117).1" Target="EXTERNAL" />
<Link Source="21010:[6011..6117).1" Target="21010:[6031..6117).1" />
<Link Source="21010:[6236..6287).1" Target="EXTERNAL" />
<Link Source="21010:[6199..6288).1" Target="21010:[5130..5212).1" />
<Link Source="21010:[6199..6288).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[6199..6288).1" Target="21010:[6236..6287).1" />
<Link Source="21010:[6199..6288).1" Target="EXTERNAL" />
<Link Source="21010:[6176..6288).1" Target="21010:[6199..6288).1" />
<Link Source="21010:[6397..6448).1" Target="EXTERNAL" />
<Link Source="21010:[6365..6449).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[6365..6449).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[6365..6449).1" Target="21010:[6397..6448).1" />
<Link Source="21010:[6365..6449).1" Target="EXTERNAL" />
<Link Source="21010:[6347..6449).1" Target="21010:[6365..6449).1" />
<Link Source="21010:[6560..6586).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="21010:[6560..6586).1" />
<Link Source="21010:[6497..6587).1" Target="21010:[6513..6587).1" />
<Link Source="21003:[34259..34289).1" Target="21010:[557..663).1" />
<Link Source="21003:[34259..34289).1" Target="21003:[34198..34304).2" />
<Link Source="21003:[34320..34386).1" Target="21003:[34078..34089).1" />
<Link Source="21003:[34320..34386).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).2" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).3" Target="21003:[34320..34386).2" />
<Link Source="21003:[34320..34386).3" Target="21003:[34148..34172).1" />
<Link Source="21003:[34320..34386).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).5" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).3" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).5" />
<Link Source="21003:[34320..34386).7" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).7" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).1" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).2" Target="21003:[34259..34289).1" />
<Link Source="21003:[34400..34487).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).3" Target="21003:[34091..34111).1" />
<Link Source="21003:[34400..34487).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).4" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).2" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).3" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).4" />
<Link Source="21003:[34400..34487).6" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).6" Target="21010:[567..663).5" />
<Link Source="21003:[34400..34487).6" Target="21004:[1137..1205).1" />
<Link Source="21003:[34407..34486).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34554..34569).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[34554..34569).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34595..34627).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34554..34569).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34400..34487).6" />
<Link Source="21003:[34641..34667).3" Target="21003:[34641..34667).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).3" />
<Link Source="21003:[34681..34706).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).2" />
<Link Source="21003:[34681..34706).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34740).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34720..34740).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).2" />
<Link Source="21003:[34754..34818).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34720..34735).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34554..34569).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34407..34486).1" />
<Link Source="21004:[1129..1207).1" Target="21003:[34832..34844).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1122..1208).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[46280..46350).3" Target="21004:[1122..1208).1" />
<Link Source="21003:[46280..46350).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46023..46055).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46366..46650).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46419..46533).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[46419..46533).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).2" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).2" />
<Link Source="21003:[46419..46533).4" Target="21004:[1122..1208).1" />
<Link Source="21003:[46419..46533).4" Target="21004:[1129..1207).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[46419..46533).4" Target="21003:[46366..46650).2" />
<Link Source="21003:[46563..46584).1" Target="21003:[46419..46533).4" />
<Link Source="21003:[46563..46584).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46553..46635).1" Target="21010:[4004..4098).1" />
<Link Source="21003:[46553..46635).1" Target="21003:[46563..46584).1" />
<Link Source="21003:[46755..46872).1" Target="EXTERNAL" />
<Link Source="21003:[46755..46872).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[46224..46254).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46116..46135).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[47082..47319).1" Target="21003:[45967..46008).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46553..46635).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47399).1" Target="21003:[45706..45847).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47400).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11613..11696).1" Target="EXTERNAL" />
<Link Source="25006:[11613..11696).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11674..11681).1" Target="25006:[11613..11696).1" />
<Link Source="21003:[47333..47400).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1129..1207).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).7" />
<Link Source="21003:[47414..47458).1" Target="EXTERNAL" />
<Link Source="21003:[47414..47458).1" Target="21010:[10306..10452).47" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).2" Target="21003:[45706..45847).1" />
<Link Source="25004:[1041..1077).1" Target="21003:[47414..47458).2" />
<Link Source="21003:[47414..47458).4" Target="21003:[47414..47458).1" />
<Link Source="21003:[47414..47458).4" Target="25004:[1041..1077).1" />
<Link Source="21003:[47414..47458).4" Target="21003:[45706..45847).1" />
<Link Source="21003:[47689..47930).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47689..47930).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47717..47747).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47689..47930).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[48025..48054).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48175..48211).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[48175..48211).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48225..48313).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48175..48211).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48327..48378).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[47414..47458).4" />
<Link Source="21003:[48327..48378).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).1" Target="EXTERNAL" />
<Link Source="21003:[48392..48469).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[48327..48378).2" />
<Link Source="21003:[48392..48469).2" Target="21003:[48392..48469).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[46186..46209).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[48392..48469).2" />
<Link Source="21003:[47689..47930).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[47944..47963).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47944..47963).1" Target="21003:[45706..45847).1" />
<Link Source="28001:[46830..47157).1" Target="21003:[47944..47963).1" />
<Link Source="28001:[46830..47157).1" Target="25014:[387..448).1" />
<Link Source="28001:[46830..47157).2" Target="25014:[387..448).1" />
<Link Source="28001:[46830..47157).3" Target="EXTERNAL" />
<Link Source="28001:[46830..47157).3" Target="25014:[387..448).1" />
<Link Source="28001:[47029..47095).1" Target="25014:[387..448).1" />
<Link Source="25004:[19277..19288).1" Target="28001:[46830..47157).3" />
<Link Source="25004:[19277..19288).1" Target="28001:[47029..47095).1" />
<Link Source="25004:[19303..19330).1" Target="28001:[46830..47157).2" />
<Link Source="25004:[19303..19330).1" Target="28001:[47029..47095).1" />
<Link Source="25004:[19345..19370).1" Target="28001:[46830..47157).2" />
<Link Source="25004:[19345..19370).1" Target="28001:[47029..47095).1" />
<Link Source="25004:[19385..19419).1" Target="28001:[46830..47157).2" />
<Link Source="25004:[19385..19419).1" Target="28001:[47029..47095).1" />
<Link Source="25004:[19434..19483).1" Target="28001:[46830..47157).2" />
<Link Source="25004:[19434..19483).1" Target="28001:[47029..47095).1" />
<Link Source="25004:[19498..19537).1" Target="28001:[46830..47157).2" />
<Link Source="25004:[19498..19537).1" Target="28001:[47029..47095).1" />
<Link Source="25004:[19552..19577).1" Target="28001:[46830..47157).2" />
<Link Source="25004:[19552..19577).1" Target="28001:[47029..47095).1" />
<Link Source="25004:[19603..19877).1" Target="25004:[19277..19288).1" />
<Link Source="25004:[19603..19877).1" Target="28001:[47029..47095).1" />
<Link Source="25004:[19603..19877).2" Target="25004:[19303..19330).1" />
<Link Source="25004:[19603..19877).2" Target="28001:[47029..47095).1" />
<Link Source="25004:[19603..19877).3" Target="25004:[19345..19370).1" />
<Link Source="25004:[19603..19877).3" Target="28001:[47029..47095).1" />
<Link Source="25004:[19603..19877).4" Target="25004:[19385..19419).1" />
<Link Source="25004:[19603..19877).4" Target="28001:[47029..47095).1" />
<Link Source="25004:[19603..19877).5" Target="25004:[19434..19483).1" />
<Link Source="25004:[19603..19877).5" Target="28001:[47029..47095).1" />
<Link Source="25004:[19603..19877).6" Target="25004:[19498..19537).1" />
<Link Source="25004:[19603..19877).6" Target="28001:[47029..47095).1" />
<Link Source="25004:[19603..19877).7" Target="25004:[19552..19577).1" />
<Link Source="25004:[19603..19877).7" Target="28001:[47029..47095).1" />
<Link Source="25004:[19610..19876).1" Target="28001:[47029..47095).1" />
<Link Source="25007:[3334..3345).1" Target="25004:[19603..19877).1" />
<Link Source="25007:[3334..3345).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3360..3387).1" Target="25004:[19603..19877).2" />
<Link Source="25007:[3360..3387).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3402..3427).1" Target="25004:[19603..19877).3" />
<Link Source="25007:[3402..3427).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3442..3476).1" Target="25004:[19603..19877).4" />
<Link Source="25007:[3442..3476).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3491..3540).1" Target="25004:[19603..19877).5" />
<Link Source="25007:[3491..3540).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3555..3594).1" Target="25004:[19603..19877).6" />
<Link Source="25007:[3555..3594).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3609..3634).1" Target="25004:[19603..19877).7" />
<Link Source="25007:[3609..3634).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3660..3885).1" Target="25007:[3334..3345).1" />
<Link Source="25007:[3660..3885).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).1" Target="25007:[3334..3345).1" />
<Link Source="25007:[3901..4266).1" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).4" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).6" Target="25007:[3360..3387).1" />
<Link Source="25007:[3901..4266).6" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).7" Target="25007:[3402..3427).1" />
<Link Source="25007:[3901..4266).7" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).8" Target="25007:[3442..3476).1" />
<Link Source="25007:[3901..4266).8" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).9" Target="25007:[3491..3540).1" />
<Link Source="25007:[3901..4266).9" Target="25004:[19610..19876).1" />
<Link Source="25007:[3901..4266).10" Target="25007:[3555..3594).1" />
<Link Source="25007:[3901..4266).10" Target="25004:[19610..19876).1" />
<Link Source="25003:[740..750).1" Target="25003:[747..750).1" />
<Link Source="25003:[808..818).1" Target="25003:[814..818).1" />
<Link Source="25007:[3901..4266).13" Target="25007:[3609..3634).1" />
<Link Source="25007:[3901..4266).13" Target="25004:[19610..19876).1" />
<Link Source="25007:[3908..4265).1" Target="25004:[19610..19876).1" />
<Link Source="25003:[2816..2827).1" Target="25007:[3901..4266).1" />
<Link Source="25003:[2816..2827).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2842..2863).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[2842..2863).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2878..2898).1" Target="25007:[3901..4266).6" />
<Link Source="25003:[2878..2898).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2913..2931).1" Target="25007:[3901..4266).7" />
<Link Source="25003:[2913..2931).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2946..2973).1" Target="25007:[3901..4266).8" />
<Link Source="25003:[2946..2973).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2988..3030).1" Target="25007:[3901..4266).9" />
<Link Source="25003:[2988..3030).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3045..3076).1" Target="25007:[3901..4266).10" />
<Link Source="25003:[3045..3076).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3091..3116).1" Target="25007:[3901..4266).1" />
<Link Source="25003:[3091..3116).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3131..3176).1" Target="25007:[3901..4266).13" />
<Link Source="25003:[3131..3176).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3191..3238).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[3191..3238).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3253..3278).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[3253..3278).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[2773..3850).1" Target="25007:[3901..4266).4" />
<Link Source="25003:[2773..3850).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[912..917).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[912..917).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[950..967).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[950..967).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1000..1013).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1000..1013).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1048..1062).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1048..1062).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1099..1109).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1099..1109).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1151..1165).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1151..1165).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1276..1303).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1276..1303).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1336..1350).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1336..1350).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1383..1412).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1383..1412).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1460..1479).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1460..1479).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1527..1548).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1527..1548).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1673..1689).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1673..1689).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1713..1727).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1713..1727).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1891..1900).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1891..1900).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[1941..1960).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[1941..1960).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3304..3309).1" Target="25003:[2816..2827).1" />
<Link Source="25003:[3304..3309).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3304..3309).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3331..3348).1" Target="25003:[2842..2863).1" />
<Link Source="25003:[3331..3348).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3331..3348).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3382..3396).1" Target="25003:[2878..2898).1" />
<Link Source="25003:[3382..3396).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3382..3396).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3427..3437).1" Target="25003:[2913..2931).1" />
<Link Source="25003:[3427..3437).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3427..3437).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3464..3478).1" Target="25003:[2946..2973).1" />
<Link Source="25003:[3464..3478).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3464..3478).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3509..3525).1" Target="25003:[2988..3030).1" />
<Link Source="25003:[3509..3525).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3509..3525).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3562..3589).1" Target="25003:[3045..3076).1" />
<Link Source="25003:[3562..3589).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3562..3589).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3633..3682).1" Target="25003:[3091..3116).1" />
<Link Source="25003:[3633..3682).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3633..3647).1" Target="25003:[3633..3682).1" />
<Link Source="25003:[3633..3647).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3633..3647).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3696..3715).1" Target="25003:[3131..3176).1" />
<Link Source="25003:[3696..3715).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3696..3715).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3751..3772).1" Target="25003:[3191..3238).1" />
<Link Source="25003:[3751..3772).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3751..3772).1" Target="25007:[3908..4265).1" />
<Link Source="25003:[3810..3823).1" Target="25003:[3253..3278).1" />
<Link Source="25003:[3810..3823).1" Target="25003:[2773..3850).1" />
<Link Source="25003:[3810..3823).1" Target="25007:[3908..4265).1" />
<Link Source="25004:[19603..19877).8" Target="25007:[3901..4266).4" />
<Link Source="25004:[19603..19877).8" Target="28001:[47029..47095).1" />
<Link Source="28001:[46830..47157).16" Target="25004:[19603..19877).8" />
<Link Source="28001:[46830..47157).16" Target="25014:[387..448).1" />
<Link Source="28001:[47029..47135).1" Target="28001:[46830..47157).2" />
<Link Source="28001:[47029..47135).1" Target="25014:[387..448).1" />
<Link Source="28001:[47029..47135).3" Target="25014:[387..448).1" />
<Link Source="25003:[7407..7432).1" Target="28001:[46830..47157).2" />
<Link Source="25003:[7407..7432).1" Target="28001:[47029..47135).3" />
<Link Source="25003:[7364..7671).1" Target="28001:[46830..47157).16" />
<Link Source="25003:[7364..7671).1" Target="28001:[47029..47135).3" />
<Link Source="25003:[7458..7660).1" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).1" Target="25003:[3304..3309).1" />
<Link Source="25003:[7458..7660).1" Target="28001:[47029..47135).3" />
<Link Source="25003:[7458..7660).2" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).2" Target="25003:[3331..3348).1" />
<Link Source="25003:[7458..7660).2" Target="28001:[47029..47135).3" />
<Link Source="25003:[7458..7660).3" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).3" Target="25003:[3382..3396).1" />
<Link Source="25003:[7458..7660).3" Target="28001:[47029..47135).3" />
<Link Source="25003:[7458..7660).4" Target="25003:[7407..7432).1" />
<Link Source="25003:[7458..7660).4" Target="28001:[47029..47135).3" />
<Link Source="25003:[7458..7660).5" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).5" Target="25003:[3464..3478).1" />
<Link Source="25003:[7458..7660).5" Target="28001:[47029..47135).3" />
<Link Source="25003:[7458..7660).6" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).6" Target="25003:[3509..3525).1" />
<Link Source="25003:[7458..7660).6" Target="28001:[47029..47135).3" />
<Link Source="25003:[7458..7660).7" Target="28001:[47029..47135).3" />
<Link Source="25003:[7458..7660).9" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).9" Target="25003:[3633..3647).1" />
<Link Source="25003:[7458..7660).9" Target="28001:[47029..47135).3" />
<Link Source="25003:[7458..7660).10" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).10" Target="25003:[3696..3715).1" />
<Link Source="25003:[7458..7660).10" Target="28001:[47029..47135).3" />
<Link Source="25003:[7458..7660).11" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).11" Target="25003:[3751..3772).1" />
<Link Source="25003:[7458..7660).11" Target="28001:[47029..47135).3" />
<Link Source="25003:[7458..7660).12" Target="25003:[7364..7671).1" />
<Link Source="25003:[7458..7660).12" Target="25003:[3810..3823).1" />
<Link Source="25003:[7458..7660).12" Target="28001:[47029..47135).3" />
<Link Source="25003:[7465..7659).1" Target="28001:[47029..47135).3" />
<Link Source="25003:[2816..2827).2" Target="25003:[7458..7660).1" />
<Link Source="25003:[2816..2827).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2842..2863).2" Target="25003:[7458..7660).2" />
<Link Source="25003:[2842..2863).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2878..2898).2" Target="25003:[7458..7660).3" />
<Link Source="25003:[2878..2898).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2913..2931).2" Target="25003:[7458..7660).4" />
<Link Source="25003:[2913..2931).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2946..2973).2" Target="25003:[7458..7660).5" />
<Link Source="25003:[2946..2973).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2988..3030).2" Target="25003:[7458..7660).6" />
<Link Source="25003:[2988..3030).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3045..3076).2" Target="25003:[7458..7660).7" />
<Link Source="25003:[3045..3076).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3091..3116).2" Target="25003:[7458..7660).9" />
<Link Source="25003:[3091..3116).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3131..3176).2" Target="25003:[7458..7660).10" />
<Link Source="25003:[3131..3176).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3191..3238).2" Target="25003:[7458..7660).11" />
<Link Source="25003:[3191..3238).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3253..3278).2" Target="25003:[7458..7660).12" />
<Link Source="25003:[3253..3278).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[2773..3850).2" Target="25003:[7458..7660).7" />
<Link Source="25003:[2773..3850).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[912..917).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[912..917).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[950..967).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[950..967).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1000..1013).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1000..1013).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1048..1062).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1048..1062).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1099..1109).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1099..1109).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1151..1165).4" Target="25003:[2773..3850).2" />
<Link Source="25003:[1151..1165).4" Target="25003:[7465..7659).1" />
<Link Source="25003:[1276..1303).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1276..1303).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1336..1350).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1336..1350).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1383..1412).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1383..1412).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1460..1479).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1460..1479).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1527..1548).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1527..1548).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1673..1689).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1673..1689).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1713..1727).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1713..1727).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1891..1900).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1891..1900).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[1941..1960).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[1941..1960).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3427..3437).2" Target="25003:[2913..2931).2" />
<Link Source="25003:[3427..3437).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[3427..3437).2" Target="25003:[7465..7659).1" />
<Link Source="25003:[3562..3589).2" Target="25003:[3045..3076).2" />
<Link Source="25003:[3562..3589).2" Target="25003:[2773..3850).2" />
<Link Source="25003:[3562..3589).2" Target="25003:[7465..7659).1" />
<Link Source="28001:[46830..47157).23" Target="25003:[7458..7660).7" />
<Link Source="28001:[46830..47157).23" Target="25014:[387..448).1" />
<Link Source="28001:[47029..47155).1" Target="25014:[387..448).1" />
<Link Source="25003:[9181..9189).1" Target="28001:[46830..47157).2" />
<Link Source="25003:[9181..9189).1" Target="28001:[47029..47155).1" />
<Link Source="25003:[9191..9201).1" Target="28001:[46830..47157).2" />
<Link Source="25003:[9191..9201).1" Target="28001:[47029..47155).1" />
<Link Source="25003:[9139..9487).1" Target="28001:[46830..47157).23" />
<Link Source="25003:[9139..9487).1" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).1" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).1" Target="25003:[2816..2827).2" />
<Link Source="25003:[9227..9476).1" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).2" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).2" Target="25003:[2842..2863).2" />
<Link Source="25003:[9227..9476).2" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).3" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).3" Target="25003:[2878..2898).2" />
<Link Source="25003:[9227..9476).3" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).4" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).4" Target="25003:[3427..3437).2" />
<Link Source="25003:[9227..9476).4" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).5" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).6" Target="25003:[9181..9189).1" />
<Link Source="25003:[9227..9476).6" Target="25003:[9227..9476).5" />
<Link Source="25003:[9227..9476).6" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).9" Target="25003:[9191..9201).1" />
<Link Source="25003:[9227..9476).9" Target="25003:[9227..9476).5" />
<Link Source="25003:[9227..9476).9" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).11" Target="25003:[9227..9476).6" />
<Link Source="25003:[9227..9476).11" Target="25003:[9227..9476).9" />
<Link Source="25003:[9227..9476).11" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).13" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).13" Target="25003:[2988..3030).2" />
<Link Source="25003:[9227..9476).13" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).14" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).14" Target="25003:[3562..3589).2" />
<Link Source="25003:[9227..9476).14" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).15" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).15" Target="25003:[3091..3116).2" />
<Link Source="25003:[9227..9476).15" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).16" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).16" Target="25003:[3131..3176).2" />
<Link Source="25003:[9227..9476).16" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).17" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).17" Target="25003:[3191..3238).2" />
<Link Source="25003:[9227..9476).17" Target="28001:[47029..47155).1" />
<Link Source="25003:[9227..9476).18" Target="25003:[9139..9487).1" />
<Link Source="25003:[9227..9476).18" Target="25003:[3253..3278).2" />
<Link Source="25003:[9227..9476).18" Target="28001:[47029..47155).1" />
<Link Source="25003:[9234..9475).1" Target="28001:[47029..47155).1" />
<Link Source="25003:[2816..2827).3" Target="25003:[9227..9476).1" />
<Link Source="25003:[2816..2827).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2842..2863).3" Target="25003:[9227..9476).2" />
<Link Source="25003:[2842..2863).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2878..2898).3" Target="25003:[9227..9476).3" />
<Link Source="25003:[2878..2898).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2913..2931).3" Target="25003:[9227..9476).4" />
<Link Source="25003:[2913..2931).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2946..2973).3" Target="25003:[9227..9476).11" />
<Link Source="25003:[2946..2973).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2988..3030).3" Target="25003:[9227..9476).13" />
<Link Source="25003:[2988..3030).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3045..3076).3" Target="25003:[9227..9476).14" />
<Link Source="25003:[3045..3076).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3091..3116).3" Target="25003:[9227..9476).15" />
<Link Source="25003:[3091..3116).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3131..3176).3" Target="25003:[9227..9476).16" />
<Link Source="25003:[3131..3176).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3191..3238).3" Target="25003:[9227..9476).17" />
<Link Source="25003:[3191..3238).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3253..3278).3" Target="25003:[9227..9476).18" />
<Link Source="25003:[3253..3278).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[2773..3850).3" Target="25003:[9227..9476).5" />
<Link Source="25003:[2773..3850).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[912..917).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[912..917).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[950..967).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[950..967).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1000..1013).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1000..1013).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1048..1062).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1048..1062).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1099..1109).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1099..1109).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1151..1165).7" Target="25003:[2773..3850).3" />
<Link Source="25003:[1151..1165).7" Target="25003:[9234..9475).1" />
<Link Source="25003:[1276..1303).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1276..1303).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1336..1350).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1336..1350).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1383..1412).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1383..1412).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1460..1479).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1460..1479).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1527..1548).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1527..1548).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1673..1689).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1673..1689).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1713..1727).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1713..1727).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1891..1900).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1891..1900).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[1941..1960).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[1941..1960).3" Target="25003:[9234..9475).1" />
<Link Source="25003:[3464..3478).3" Target="25003:[2946..2973).3" />
<Link Source="25003:[3464..3478).3" Target="25003:[2773..3850).3" />
<Link Source="25003:[3464..3478).3" Target="25003:[9234..9475).1" />
<Link Source="28001:[46830..47157).28" Target="25003:[9227..9476).5" />
<Link Source="28001:[46830..47157).28" Target="25014:[387..448).1" />
<Link Source="28001:[46830..47156).1" Target="28001:[46830..47157).28" />
<Link Source="28001:[46830..47156).1" Target="28001:[46830..47157).2" />
<Link Source="28001:[46830..47156).1" Target="25014:[387..448).1" />
<Link Source="28001:[46830..47156).2" Target="25014:[387..448).1" />
<Link Source="25002:[4263..4282).1" Target="28001:[46830..47157).1" />
<Link Source="25002:[4263..4282).1" Target="28001:[46830..47156).2" />
<Link Source="25002:[4284..4323).1" Target="28001:[46830..47157).2" />
<Link Source="25002:[4284..4323).1" Target="28001:[46830..47156).2" />
<Link Source="25002:[4395..4432).1" Target="28001:[46830..47156).2" />
<Link Source="10345:[975..1032).1" Target="EXTERNAL" />
<Link Source="10345:[1047..1101).1" Target="EXTERNAL" />
<Link Source="10345:[1116..1166).1" Target="EXTERNAL" />
<Link Source="10345:[1753..1782).1" Target="10345:[956..960).1" />
<Link Source="10345:[1753..1782).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[975..1032).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[1047..1101).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[1116..1166).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[1181..1185).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1723..2412).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[1797..1861).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[2064..2099).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[930..1186).1" />
<Link Source="10345:[2113..2145).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2113..2145).1" Target="EXTERNAL" />
<Link Source="10345:[2113..2145).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2159..2192).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2159..2192).1" Target="EXTERNAL" />
<Link Source="10345:[2159..2192).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1753..1782).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1797..1861).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[2013..2038).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[930..1186).1" />
<Link Source="10345:[922..1186).1" Target="10345:[930..1186).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4263..4282).1" />
<Link Source="25002:[4395..4432).3" Target="21003:[48392..48469).2" />
<Link Source="25002:[4395..4432).3" Target="28001:[46830..47156).2" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13144..13184).1" Target="10345:[13089..13118).1" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).2" Target="10345:[13144..13184).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).2" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).4" Target="10345:[13089..13118).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).4" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[922..1186).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[13200..13326).2" />
<Link Source="25002:[4395..4432).6" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).6" Target="10345:[13298..13311).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2208..2220).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2331..2343).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2249..2266).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2296..2307).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2372..2390).1" />
<Link Source="25002:[4395..4432).6" Target="EXTERNAL" />
<Link Source="25002:[4395..4432).6" Target="28001:[46830..47156).2" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24591..26243).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24636..24685).1" Target="10345:[24530..24565).1" />
<Link Source="10345:[24636..24685).1" Target="25002:[4395..4432).6" />
<Link Source="10345:[24636..24685).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24636..24685).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26025..26098).1" Target="EXTERNAL" />
<Link Source="10345:[26025..26098).1" Target="10345:[24768..26149).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24530..24565).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[24507..26254).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26025..26098).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).2" />
<Link Source="10345:[26169..26228).3" Target="10345:[24591..26243).1" />
<Link Source="10345:[24932..25204).1" Target="EXTERNAL" />
<Link Source="10345:[24932..25204).1" Target="10345:[26169..26228).3" />
<Link Source="10345:[25064..25074).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[26266..28173).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[922..1186).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26365..26372).1" Target="10345:[26314..26387).1" />
<Link Source="10345:[25064..25075).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25109..25173).1" Target="EXTERNAL" />
<Link Source="10345:[25109..25173).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25858..25865).1" Target="10345:[25109..25173).1" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[537..568).1" Target="10298:[471..492).1" />
<Link Source="10298:[537..568).1" Target="10298:[494..511).1" />
<Link Source="10298:[537..568).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).10" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).10" Target="10298:[537..568).1" />
<Link Source="25002:[4395..4432).10" Target="10345:[25109..25173).1" />
<Link Source="25002:[4395..4432).10" Target="28001:[46830..47156).2" />
<Link Source="10292:[1704..1721).1" Target="10292:[1720..1721).1" />
<Link Source="10292:[1752..1769).1" Target="10292:[1768..1769).1" />
<Link Source="10292:[1963..1993).1" Target="10292:[1992..1993).1" />
<Link Source="10306:[388923..389344).1" Target="10306:[388969..389344).1" />
<Link Source="10306:[389480..389543).1" Target="EXTERNAL" />
<Link Source="10306:[389562..389646).1" Target="EXTERNAL" />
<Link Source="10306:[389708..389839).1" Target="EXTERNAL" />
<Link Source="10306:[389665..389839).1" Target="10306:[389708..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389480..389543).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389562..389646).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389665..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389438..389840).1" />
<Link Source="10306:[389401..389840).1" Target="10306:[389438..389840).17" />
<Link Source="10310:[84458..84496).1" Target="10310:[84494..84496).1" />
<Link Source="10316:[772..830).1" Target="10316:[802..830).1" />
<Link Source="10319:[69620..69663).1" Target="10319:[69643..69663).1" />
<Link Source="10319:[69727..69774).1" Target="10319:[69752..69774).1" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31055..31080).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31095..31126).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).2" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).4" />
<Link Source="10286:[31152..31210).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31515..31598).1" Target="10286:[30969..31000).1" />
<Link Source="10286:[31515..31598).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).1" Target="10286:[30925..30954).1" />
<Link Source="10286:[31614..31710).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).2" Target="10286:[30969..31000).1" />
<Link Source="10286:[31614..31710).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).3" Target="10286:[31015..31040).1" />
<Link Source="10286:[31614..31710).3" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).4" Target="10286:[31055..31080).1" />
<Link Source="10286:[31614..31710).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).5" Target="10286:[31095..31126).1" />
<Link Source="10286:[31614..31710).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).6" Target="10286:[31515..31598).1" />
<Link Source="10286:[31614..31710).6" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31709).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31710).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31710).2" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31710).3" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31710).4" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31710).5" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31710).6" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80188..80212).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80162..80186).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).2" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).4" />
<Link Source="10319:[80263..80315).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80331..80364).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).1" Target="10319:[80080..80109).1" />
<Link Source="10319:[80378..80479).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).2" Target="10319:[80111..80133).1" />
<Link Source="10319:[80378..80479).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).3" Target="10319:[80331..80364).1" />
<Link Source="10319:[80378..80479).3" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).4" Target="10319:[80214..80237).1" />
<Link Source="10319:[80378..80479).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80400..80478).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80378..80479).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80874..80896).1" Target="10319:[80378..80479).2" />
<Link Source="10319:[80874..80896).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80898..80931).1" Target="10319:[80378..80479).3" />
<Link Source="10319:[80898..80931).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80933..80956).1" Target="10319:[80378..80479).4" />
<Link Source="10319:[80933..80956).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80874..80896).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).2" Target="25002:[4395..4432).10" />
<Link Source="10319:[80982..81047).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).3" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2901..2932).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3483..3502).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).1" Target="10060:[4243..4274).1" />
<Link Source="10060:[3518..4328).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4344..4356).1" Target="10319:[80982..81047).3" />
<Link Source="10319:[80982..81047).8" Target="10060:[3483..3502).1" />
<Link Source="10319:[80982..81047).8" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).8" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2841..2854).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2856..2875).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).3" Target="10060:[2841..2854).2" />
<Link Source="10060:[2901..2932).3" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[2948..3467).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[3553..4223).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[4243..4274).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).2" Target="10060:[4243..4274).2" />
<Link Source="10060:[3518..4328).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).3" Target="10060:[4243..4274).2" />
<Link Source="10060:[3553..4223).3" Target="10060:[3518..4328).2" />
<Link Source="10319:[80982..81047).15" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).2" />
<Link Source="10319:[80982..81047).15" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80982..81047).15" />
<Link Source="10319:[81063..82500).2" Target="10319:[81063..82500).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[81129..81207).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[81129..81207).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81129..81207).2" Target="10319:[81063..82500).2" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).7" Target="10060:[2841..2854).4" />
<Link Source="10060:[2901..2932).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).4" Target="10060:[2841..2854).4" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[3483..3502).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).6" Target="10060:[4243..4274).6" />
<Link Source="10060:[3518..4328).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2841..2854).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).9" Target="10060:[2841..2854).5" />
<Link Source="10060:[2901..2932).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).5" Target="10060:[2841..2854).5" />
<Link Source="10060:[2948..3467).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[3553..4223).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[4243..4274).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).7" Target="10060:[4243..4274).7" />
<Link Source="10060:[3518..4328).7" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81225..82039).1" />
<Link Source="10319:[81225..82039).2" Target="10319:[81063..82500).2" />
<Link Source="10319:[82516..82536).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[82516..82536).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80495..80738).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[80495..80738).2" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).1" Target="10319:[82516..82536).1" />
<Link Source="10319:[80754..80774).1" Target="10286:[31614..31709).1" />
<Link Source="10060:[2841..2854).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).17" Target="10060:[2841..2854).9" />
<Link Source="10060:[2901..2932).17" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).9" Target="10060:[2841..2854).9" />
<Link Source="10060:[2948..3467).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[3553..4223).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[4243..4274).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).11" Target="10060:[4243..4274).11" />
<Link Source="10060:[3518..4328).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[2841..2854).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2901..2932).19" Target="10060:[2841..2854).10" />
<Link Source="10060:[2901..2932).19" Target="10060:[3483..3502).7" />
<Link Source="10060:[2948..3467).10" Target="10060:[2841..2854).10" />
<Link Source="10060:[2948..3467).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[3553..4223).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[3553..4223).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[4243..4274).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[4243..4274).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[3518..4328).12" Target="10060:[4243..4274).12" />
<Link Source="10060:[3518..4328).12" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).4" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).5" Target="10319:[81225..82039).4" />
<Link Source="10319:[81225..82039).5" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[80495..80738).5" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).2" Target="10319:[82516..82536).2" />
<Link Source="10319:[80754..80774).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[81225..82039).7" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10319:[80400..80478).1" />
<Link Source="10319:[80754..80774).3" Target="10319:[82516..82536).3" />
<Link Source="10319:[80754..80774).3" Target="10286:[31614..31709).1" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2308..2337).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2339..2360).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2362..2386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[2285..3386).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1715..1727).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1715..1727).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1773..1785).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1773..1785).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1824..1835).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1824..1835).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1883..1903).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1883..1903).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[1936..1956).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[1936..1956).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2247..2272).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2247..2272).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[2412..2424).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2412..2424).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2339..2360).1" />
<Link Source="10076:[2453..2464).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2453..2464).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2362..2386).1" />
<Link Source="10076:[2492..2512).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2492..2512).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2658).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2551..2658).3" />
<Link Source="10076:[2551..2658).5" Target="10076:[1715..1727).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2412..2424).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2453..2464).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[1883..1903).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2492..2512).1" />
<Link Source="10076:[2551..2658).5" Target="10076:[2247..2272).1" />
<Link Source="10076:[2551..2658).5" Target="10060:[3483..3502).7" />
<Link Source="10076:[2551..2658).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[2551..2576).1" Target="10076:[2551..2658).5" />
<Link Source="10076:[2551..2576).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[2551..2576).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3299).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[3236..3299).1" />
<Link Source="10076:[3236..3248).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3236..3248).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).1" Target="10076:[2308..2337).1" />
<Link Source="10076:[3315..3375).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3315..3375).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[3338..3374).1" Target="25002:[4395..4432).1" />
<Link Source="10325:[645..674).1" Target="10076:[3315..3375).1" />
<Link Source="10325:[645..674).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).1" Target="10076:[3315..3375).2" />
<Link Source="10325:[616..730).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[696..707).1" Target="10325:[645..674).1" />
<Link Source="10325:[696..707).1" Target="10076:[3338..3374).1" />
<Link Source="10325:[616..730).2" Target="10076:[3338..3374).1" />
<Link Source="10286:[939..968).1" Target="10325:[696..707).1" />
<Link Source="10286:[939..968).1" Target="10325:[616..730).2" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).1" />
<Link Source="10286:[923..1219).1" Target="10325:[616..730).2" />
<Link Source="10286:[726..773).1" Target="10286:[923..1219).1" />
<Link Source="10286:[726..773).1" Target="10325:[616..730).2" />
<Link Source="10286:[815..820).1" Target="10286:[923..1219).1" />
<Link Source="10286:[815..820).1" Target="10325:[616..730).2" />
<Link Source="10286:[2975..3015).1" Target="10286:[923..1219).1" />
<Link Source="10286:[2975..3015).1" Target="10325:[616..730).2" />
<Link Source="10286:[17802..17818).1" Target="10286:[923..1219).1" />
<Link Source="10286:[17802..17818).1" Target="10325:[616..730).2" />
<Link Source="10286:[18200..18223).1" Target="10286:[923..1219).1" />
<Link Source="10286:[18200..18223).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).1" Target="10325:[616..730).2" />
<Link Source="10286:[994..1034).2" Target="10286:[939..968).1" />
<Link Source="10286:[994..1034).2" Target="10286:[994..1034).1" />
<Link Source="10286:[994..1034).2" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1048..1096).1" Target="10325:[616..730).2" />
<Link Source="10286:[1048..1096).2" Target="10286:[1048..1096).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[726..773).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[815..820).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[2975..3015).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[17802..17818).1" />
<Link Source="10286:[1048..1096).2" Target="10286:[18200..18223).1" />
<Link Source="10286:[1048..1096).2" Target="10325:[616..730).2" />
<Link Source="10286:[1110..1120).1" Target="10286:[939..968).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2658).5" />
<Link Source="10286:[1110..1120).1" Target="10076:[2551..2576).1" />
<Link Source="10286:[1110..1120).1" Target="10076:[3236..3248).1" />
<Link Source="10286:[1110..1120).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1110..1120).1" Target="10325:[616..730).2" />
<Link Source="10286:[1177..1193).1" Target="10286:[939..968).1" />
<Link Source="10286:[1177..1193).1" Target="10286:[923..1219).1" />
<Link Source="10286:[1177..1193).1" Target="10325:[616..730).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[3315..3375).2" />
<Link Source="10076:[3315..3335).1" Target="10076:[2285..3386).1" />
<Link Source="10076:[3315..3335).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).19" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2658).5" />
<Link Source="25002:[4395..4432).19" Target="10076:[2551..2576).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3248).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3315..3335).1" />
<Link Source="25002:[4395..4432).19" Target="10076:[3236..3299).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1048..1096).2" />
<Link Source="25002:[4395..4432).19" Target="10286:[1110..1120).1" />
<Link Source="25002:[4395..4432).19" Target="10286:[1177..1193).1" />
<Link Source="25002:[4395..4432).19" Target="28001:[46830..47156).2" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4549..4579).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4821..4829).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[3628..3685).1" Target="10076:[3592..3700).1" />
<Link Source="10076:[3628..3685).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[3628..3685).1" Target="EXTERNAL" />
<Link Source="10076:[3628..3685).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[4815..4966).1" Target="10076:[3628..3685).1" />
<Link Source="10076:[4815..4966).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).4" Target="10076:[4437..4452).1" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).19" />
<Link Source="10076:[4815..4966).4" Target="10076:[4815..4966).3" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).4" />
<Link Source="10076:[4815..4966).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[4932..4951).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4932..4951).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[4932..4951).1" Target="10076:[4815..4966).5" />
<Link Source="10076:[4982..5048).1" Target="10076:[4932..4951).1" />
<Link Source="10076:[4982..5048).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).2" Target="10076:[4549..4579).1" />
<Link Source="10076:[4982..5048).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).3" Target="10076:[4454..4498).1" />
<Link Source="10076:[4982..5048).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).4" Target="10076:[4500..4523).1" />
<Link Source="10076:[4982..5048).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4989..5047).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4982..5048).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5114..5126).1" Target="10076:[4982..5048).2" />
<Link Source="10076:[5114..5126).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5128..5172).1" Target="10076:[4982..5048).3" />
<Link Source="10076:[5128..5172).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5174..5197).1" Target="10076:[4982..5048).4" />
<Link Source="10076:[5174..5197).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5097..5112).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).2" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).2" Target="25002:[4395..4432).19" />
<Link Source="10076:[5277..5448).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).1" Target="10076:[5071..5759).1" />
<Link Source="10076:[5470..5538).1" Target="25002:[4395..4432).19" />
<Link Source="10076:[5470..5538).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).3" Target="10076:[4989..5047).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).2" Target="10076:[5470..5538).3" />
<Link Source="10077:[698..707).1" Target="10077:[879..998).2" />
<Link Source="10077:[698..707).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[747..768).1" Target="10077:[879..998).2" />
<Link Source="10077:[747..768).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[798..808).1" Target="10077:[879..998).2" />
<Link Source="10077:[798..808).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[854..862).1" Target="10077:[879..998).2" />
<Link Source="10077:[854..862).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[964..972).1" Target="10077:[909..930).1" />
<Link Source="10077:[964..972).1" Target="10077:[879..998).2" />
<Link Source="10077:[964..972).1" Target="10076:[5470..5538).3" />
<Link Source="10076:[5470..5538).4" Target="10076:[5470..5538).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[879..998).2" />
<Link Source="10076:[5470..5538).4" Target="10077:[698..707).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[747..768).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[798..808).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[854..862).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[964..972).1" />
<Link Source="10076:[5470..5538).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[5114..5126).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[5128..5172).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[5174..5197).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5613).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5614).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5614).2" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5614).3" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1014..1370).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[1014..1370).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1053..1090).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1092..1108).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).4" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).2" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).4" />
<Link Source="10077:[1142..1210).5" Target="10076:[5552..5613).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1039..1051).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1230..1239).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1053..1090).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1269..1290).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1092..1108).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1332..1342).1" Target="10076:[5552..5613).1" />
<Link Source="10076:[5552..5614).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[5097..5112).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5644..5663).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5628..5664).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2664..2780).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[2664..2780).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2742..2765).1" Target="10077:[2693..2708).1" />
<Link Source="10077:[2742..2765).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2749..2764).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2742..2765).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2664..2780).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2852..2986).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2926..2971).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2877..2892).1" />
<Link Source="10077:[2926..2971).2" Target="10076:[5470..5538).4" />
<Link Source="10077:[2926..2971).2" Target="10077:[1230..1239).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1269..1290).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1332..1342).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).3" Target="10077:[2749..2764).1" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34678..34716).1" Target="10077:[34617..34644).1" />
<Link Source="10077:[34678..34716).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[34685..34715).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[31025..31053).1" Target="10077:[34678..34716).1" />
<Link Source="10077:[31025..31053).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34572..34731).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[2926..2971).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[34685..34715).1" />
<Link Source="10077:[31258..31297).1" Target="EXTERNAL" />
<Link Source="10077:[31258..31297).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).2" Target="10077:[31490..32331).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[30985..32417).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).6" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).7" Target="10077:[34685..34715).1" />
<Link Source="10077:[31936..32331).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31936..32331).1" Target="10077:[31490..32331).6" />
<Link Source="10077:[31936..32331).1" Target="10077:[31490..32331).2" />
<Link Source="10077:[31936..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31936..32331).2" Target="10077:[31490..32331).2" />
<Link Source="10077:[32131..32331).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[32131..32331).1" Target="10077:[31936..32331).1" />
<Link Source="10077:[32131..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[32131..32331).2" Target="10077:[31936..32331).1" />
<Link Source="10077:[32257..32312).1" Target="EXTERNAL" />
<Link Source="10077:[32257..32312).1" Target="10077:[32131..32331).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[31025..31053).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[32257..32312).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[32358..32401).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32351..32402).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32504..32523).1" Target="10077:[32351..32402).2" />
<Link Source="10077:[32504..32523).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32504..32523).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32567..32606).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32557..32607).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44182..44197).1" Target="10077:[32557..32607).2" />
<Link Source="10077:[44182..44197).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[44182..44197).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[44159..44180).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[44182..44197).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44342..44373).1" Target="10077:[32567..32606).1" />
<Link Source="10076:[875..902).1" Target="10077:[44335..44374).1" />
<Link Source="10076:[875..902).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[904..919).1" Target="10077:[44335..44374).2" />
<Link Source="10076:[904..919).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[853..1034).1" Target="10077:[44335..44374).3" />
<Link Source="10076:[853..1034).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[953..968).1" Target="10076:[875..902).1" />
<Link Source="10076:[953..968).1" Target="10076:[853..1034).1" />
<Link Source="10076:[953..968).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[904..919).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[853..1034).1" />
<Link Source="10076:[1000..1010).1" Target="10077:[44342..44373).1" />
<Link Source="10077:[32557..32607).3" Target="10077:[44335..44374).3" />
<Link Source="10077:[32557..32607).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32627..32647).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32670..32681).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32433..34556).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[2066..2158).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[32131..32331).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[2110..2139).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[32665..34501).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32627..32647).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).3" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[953..968).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32131..32331).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).5" Target="10077:[32358..32401).1" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).5" />
<Link Source="10076:[1307..1365).1" Target="10076:[1241..1380).1" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).5" />
<Link Source="10077:[33226..33266).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[33226..33266).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33241..33265).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[33226..33266).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[39020..39048).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[39020..39048).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[38976..39245).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[38976..39245).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[39020..39048).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39170..39187).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44888..44934).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44954..44972).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[44954..44972).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[44990..45616).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44888..44934).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[2877..2892).2" />
<Link Source="10077:[45553..45597).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[45331..45616).1" />
<Link Source="10077:[45553..45597).2" Target="10077:[45331..45616).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[45553..45597).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45678..46310).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[44823..44854).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[39170..39187).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46088..46248).2" Target="EXTERNAL" />
<Link Source="10077:[46088..46248).2" Target="10077:[45678..46310).2" />
<Link Source="10077:[46272..46291).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[46088..46248).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46328..46341).1" Target="10077:[39170..39187).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[46328..46341).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[39220..39228).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[2294..2311).1" Target="10077:[39220..39228).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[2243..2331).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[46272..46291).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[2294..2311).1" />
<Link Source="10077:[2287..2312).1" Target="10076:[3592..3700).2" />
<Link Source="10077:[2287..2312).1" Target="10077:[39220..39228).1" />
<Link Source="10077:[39089..39229).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39337..39349).1" Target="10077:[39082..39230).3" />
<Link Source="10077:[39337..39349).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39351..39364).1" Target="10077:[2287..2312).1" />
<Link Source="10077:[39351..39364).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39421..39431).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1641..1732).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[46272..46291).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[1685..1713).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39298..39335).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39398..39590).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39337..39349).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39626..39633).1" />
<Link Source="10077:[39610..39829).1" Target="EXTERNAL" />
<Link Source="10077:[39610..39829).1" Target="10077:[39766..39774).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39298..39335).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39887..39935).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[39877..39936).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[39887..39935).1" />
<Link Source="10077:[44182..44197).2" Target="10077:[39877..39936).2" />
<Link Source="10077:[44182..44197).2" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).9" Target="10077:[44182..44197).2" />
<Link Source="10077:[44231..44317).9" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).11" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39956..39970).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39993..40004).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[39993..40004).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[2066..2158).2" />
<Link Source="10077:[2110..2139).2" Target="10077:[46272..46291).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[39993..40004).1" />
<Link Source="10077:[39988..44042).1" Target="10077:[2110..2139).2" />
<Link Source="10077:[39988..44042).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[39988..44042).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39956..39970).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[46272..46291).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[40084..40108).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1843..1943).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1843..1943).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[1843..1943).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1887..1924).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[1887..1924).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[40133..43967).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[40133..43967).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43302..43313).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[1456..1548).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1500..1529).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[1500..1529).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40075..40109).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[39298..39335).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[39337..39349).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).6" Target="10077:[40133..43967).1" />
<Link Source="10077:[43280..43373).1" Target="10077:[40133..43967).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43271..43374).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1459..1470).1" Target="10077:[43271..43374).3" />
<Link Source="10346:[1459..1470).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1472..1506).1" Target="10077:[43271..43374).4" />
<Link Source="10346:[1472..1506).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1508..1520).1" Target="10077:[43271..43374).5" />
<Link Source="10346:[1508..1520).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).1" Target="10077:[43271..43374).6" />
<Link Source="10346:[1399..2435).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1542..1546).1" Target="10346:[1459..1470).1" />
<Link Source="10346:[1542..1546).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).2" Target="10077:[43280..43373).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1542..1546).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).1" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1260..1291).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).2" Target="10286:[1247..1258).1" />
<Link Source="10286:[1317..1350).2" Target="10286:[1317..1350).1" />
<Link Source="10286:[1317..1350).2" Target="10346:[1399..2435).2" />
<Link Source="10286:[1364..1368).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1364..1368).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1364..1368).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1390..1400).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1390..1400).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1390..1400).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1390..1400).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1428..1444).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1428..1444).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1428..1444).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1428..1444).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1478..1494).1" Target="10286:[1260..1291).1" />
<Link Source="10286:[1478..1494).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1478..1494).1" Target="10346:[1399..2435).2" />
<Link Source="10346:[858..868).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[858..868).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[932..947).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[932..947).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[974..986).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[974..986).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1017..1033).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1017..1033).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1074..1100).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1074..1100).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1426..1457).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1572..1612).1" />
<Link Source="10346:[1572..1612).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1472..1506).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1626..1666).1" />
<Link Source="10346:[1626..1666).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1426..1457).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1682..1692).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1719..1832).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1719..1832).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1734).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1848..2424).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1848..2424).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1894..2409).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1894..2409).1" Target="10077:[39988..44042).4" />
<Link Source="10346:[1894..2409).1" Target="10346:[1848..2424).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1994..2057).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1399..2435).1" />
<Link Source="10077:[43503..43514).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[1456..1548).2" />
<Link Source="10077:[1500..1529).2" Target="10346:[1894..2409).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[43402..43944).1" Target="10077:[1500..1529).2" />
<Link Source="10077:[43402..43944).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[39298..39335).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43991..44002).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[2110..2139).3" Target="10077:[43991..44002).1" />
<Link Source="10077:[2110..2139).3" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).1" Target="10077:[2110..2139).3" />
<Link Source="10077:[43991..44023).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[43991..44023).2" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).3" Target="10077:[43271..43374).6" />
<Link Source="10077:[43991..44023).3" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).3" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[43991..44023).4" Target="10286:[1428..1444).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1390..1400).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1364..1368).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1478..1494).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1231..1520).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1682..1692).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1734).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[974..986).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1017..1033).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1074..1100).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[2079..2092).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1832).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1894..2409).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).5" Target="10077:[39988..44042).4" />
<Link Source="10076:[1089..1109).1" Target="10077:[43991..44023).4" />
<Link Source="10076:[1089..1109).1" Target="10077:[43991..44023).5" />
<Link Source="10076:[1050..1225).1" Target="10077:[43991..44023).4" />
<Link Source="10076:[1050..1225).1" Target="10077:[43991..44023).5" />
<Link Source="10076:[1143..1210).1" Target="10076:[1050..1225).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[43991..44023).4" />
<Link Source="10076:[1143..1210).1" Target="10076:[1089..1109).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[43991..44023).5" />
<Link Source="10077:[44062..44076).1" Target="10077:[43271..43374).6" />
<Link Source="10077:[44062..44076).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2926..2971).8" Target="10077:[2877..2892).2" />
<Link Source="10077:[2926..2971).8" Target="10077:[44062..44076).1" />
<Link Source="10077:[2926..2971).8" Target="10076:[1143..1210).1" />
<Link Source="10077:[2926..2971).8" Target="10077:[33241..33265).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[39610..39829).1" />
<Link Source="10077:[33290..34322).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33414..33451).1" Target="10077:[33290..34322).1" />
<Link Source="10346:[7369..7588).1" Target="10077:[2926..2971).8" />
<Link Source="10346:[7369..7588).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7405..7454).1" Target="10346:[7369..7588).1" />
<Link Source="10346:[7405..7454).1" Target="10077:[2926..2971).8" />
<Link Source="10346:[7405..7454).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7405..7454).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7472..7573).1" />
<Link Source="10346:[7472..7573).2" Target="10077:[33414..33451).1" />
<Link Source="10346:[7479..7503).1" Target="10346:[7472..7573).2" />
<Link Source="10346:[7479..7503).1" Target="10077:[33414..33451).1" />
<Link Source="10077:[33373..33481).1" Target="10346:[7479..7503).1" />
<Link Source="10077:[33373..33481).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[33290..34322).1" />
<Link Source="10077:[33509..34299).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33509..34299).1" Target="EXTERNAL" />
<Link Source="10077:[33509..34299).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33780..33855).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[33780..33855).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[33780..33855).2" Target="10077:[2926..2971).8" />
<Link Source="10077:[33780..33855).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[33780..33855).3" Target="10077:[33509..34299).1" />
<Link Source="10077:[33795..33854).1" Target="10077:[33509..34299).1" />
<Link Source="10376:[838..863).1" Target="10077:[33780..33855).1" />
<Link Source="10376:[838..863).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[865..876).1" Target="10077:[33780..33855).2" />
<Link Source="10376:[865..876).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[799..1016).1" Target="10077:[33780..33855).3" />
<Link Source="10376:[799..1016).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[898..902).1" Target="10376:[865..876).1" />
<Link Source="10376:[898..902).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[799..1016).2" Target="10077:[33795..33854).1" />
<Link Source="10382:[520..531).1" Target="10376:[898..902).1" />
<Link Source="10382:[520..531).1" Target="10376:[799..1016).2" />
<Link Source="10382:[486..580).1" Target="10376:[799..1016).1" />
<Link Source="10382:[486..580).1" Target="10376:[799..1016).2" />
<Link Source="10382:[553..557).1" Target="10382:[520..531).1" />
<Link Source="10382:[553..557).1" Target="10376:[799..1016).2" />
<Link Source="10382:[486..580).2" Target="10376:[799..1016).2" />
<Link Source="10286:[1247..1258).2" Target="10382:[553..557).1" />
<Link Source="10286:[1247..1258).2" Target="10382:[486..580).2" />
<Link Source="10286:[1231..1520).2" Target="10382:[486..580).1" />
<Link Source="10286:[1231..1520).2" Target="10382:[486..580).2" />
<Link Source="10286:[1260..1291).2" Target="10382:[486..580).2" />
<Link Source="10286:[1317..1350).5" Target="10382:[486..580).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1247..1258).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1317..1350).5" />
<Link Source="10286:[1317..1350).6" Target="10382:[486..580).2" />
<Link Source="10286:[1390..1400).2" Target="10286:[1247..1258).2" />
<Link Source="10286:[1390..1400).2" Target="10077:[33373..33481).1" />
<Link Source="10286:[1390..1400).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1390..1400).2" Target="10382:[486..580).2" />
<Link Source="10286:[1428..1444).2" Target="10286:[1247..1258).2" />
<Link Source="10286:[1428..1444).2" Target="10077:[33373..33481).1" />
<Link Source="10286:[1428..1444).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1428..1444).2" Target="10382:[486..580).2" />
<Link Source="10286:[1478..1494).2" Target="10286:[1260..1291).2" />
<Link Source="10286:[1478..1494).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1478..1494).2" Target="10382:[486..580).2" />
<Link Source="10376:[691..701).1" Target="10376:[799..1016).1" />
<Link Source="10376:[691..701).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[765..786).1" Target="10376:[799..1016).1" />
<Link Source="10376:[765..786).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[928..968).1" Target="10077:[33795..33854).1" />
<Link Source="10376:[928..968).2" Target="10376:[838..863).1" />
<Link Source="10376:[928..968).2" Target="10376:[928..968).1" />
<Link Source="10376:[928..968).2" Target="10077:[33795..33854).1" />
<Link Source="10376:[982..992).1" Target="10376:[838..863).1" />
<Link Source="10376:[982..992).1" Target="10376:[799..1016).1" />
<Link Source="10376:[982..992).1" Target="10077:[33795..33854).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[34346..34420).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34361..34419).1" Target="10076:[1307..1365).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34346..34420).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3452..3756).1" Target="10077:[33780..33855).3" />
<Link Source="10307:[3452..3756).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).1" Target="10307:[3452..3756).1" />
<Link Source="10307:[3547..3745).1" Target="10286:[1390..1400).2" />
<Link Source="10307:[3547..3745).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).2" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).2" Target="10077:[34361..34419).1" />
<Link Source="10307:[3555..3600).1" Target="10077:[34361..34419).1" />
<Link Source="10298:[471..492).6" Target="10307:[3547..3745).1" />
<Link Source="10298:[471..492).6" Target="10307:[3555..3600).1" />
<Link Source="10298:[494..511).6" Target="10307:[3547..3745).2" />
<Link Source="10298:[494..511).6" Target="10307:[3555..3600).1" />
<Link Source="10307:[3547..3745).4" Target="10307:[3496..3521).1" />
<Link Source="10307:[3547..3745).4" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).7" Target="10298:[471..492).6" />
<Link Source="10307:[3547..3745).7" Target="10307:[3547..3745).4" />
<Link Source="10307:[3547..3745).7" Target="10077:[34361..34419).1" />
<Link Source="10307:[3554..3645).1" Target="10307:[3547..3745).7" />
<Link Source="10307:[3554..3645).1" Target="10077:[34361..34419).1" />
<Link Source="10077:[34444..34455).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2110..2139).4" Target="10077:[34444..34455).1" />
<Link Source="10077:[2110..2139).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).1" Target="10077:[2110..2139).4" />
<Link Source="10077:[34444..34482).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[34444..34482).2" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).3" Target="10307:[3554..3645).1" />
<Link Source="10077:[34444..34482).3" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).2" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).3" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[953..968).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[34444..34482).4" Target="10286:[1428..1444).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1390..1400).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1247..1258).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1478..1494).2" />
<Link Source="10077:[34444..34482).4" Target="10286:[1231..1520).2" />
<Link Source="10077:[34444..34482).4" Target="10376:[982..992).1" />
<Link Source="10077:[34444..34482).4" Target="10376:[765..786).1" />
<Link Source="10077:[34444..34482).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).4" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).5" Target="10076:[1307..1365).1" />
<Link Source="10077:[34521..34541).1" Target="10307:[3554..3645).1" />
<Link Source="10077:[34521..34541).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[2926..2971).2" />
<Link Source="10077:[2926..2971).12" Target="10077:[34521..34541).1" />
<Link Source="10077:[2926..2971).12" Target="10077:[34444..34482).4" />
<Link Source="10077:[2926..2971).12" Target="10077:[2749..2764).1" />
<Link Source="10076:[5678..5718).1" Target="10076:[5470..5538).4" />
<Link Source="10076:[5678..5718).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[5071..5759).1" />
<Link Source="10076:[5678..5718).2" Target="10077:[2926..2971).12" />
<Link Source="10076:[5678..5718).2" Target="10076:[5678..5718).1" />
<Link Source="10076:[5678..5718).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5734..5748).1" Target="10077:[2926..2971).12" />
<Link Source="10076:[5734..5748).1" Target="10076:[4989..5047).1" />
<Link Source="25002:[4395..4432).22" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).22" Target="10076:[5734..5748).1" />
<Link Source="25002:[4395..4432).22" Target="10076:[5678..5718).2" />
<Link Source="25002:[4395..4432).22" Target="28001:[46830..47156).2" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3247..3264).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3290..3331).1" />
<Link Source="10307:[3290..3331).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).1" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).2" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).2" Target="25002:[4395..4432).22" />
<Link Source="10307:[3345..3429).2" Target="10307:[3228..3245).1" />
<Link Source="10307:[3345..3429).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).4" Target="10307:[3247..3264).1" />
<Link Source="10307:[3345..3429).4" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).5" Target="25002:[4395..4432).1" />
<Link Source="10307:[3352..3428).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3345..3429).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1085..1102).1" Target="10307:[3345..3429).2" />
<Link Source="10307:[1085..1102).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1104..1135).1" Target="10307:[3345..3429).4" />
<Link Source="10307:[1104..1135).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).1" Target="10307:[3345..3429).5" />
<Link Source="10307:[1028..1341).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[1072..1083).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[1085..1102).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).2" Target="10307:[3352..3428).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1161..1165).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1562..1579).1" Target="10307:[1167..1172).1" />
<Link Source="10286:[1562..1579).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).1" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[726..773).4" Target="10286:[1532..2083).1" />
<Link Source="10286:[726..773).4" Target="10307:[1028..1341).2" />
<Link Source="10286:[815..820).4" Target="10286:[1532..2083).1" />
<Link Source="10286:[815..820).4" Target="10307:[1028..1341).2" />
<Link Source="10286:[2975..3015).4" Target="10286:[1532..2083).1" />
<Link Source="10286:[2975..3015).4" Target="10307:[1028..1341).2" />
<Link Source="10286:[17802..17818).4" Target="10286:[1532..2083).1" />
<Link Source="10286:[17802..17818).4" Target="10307:[1028..1341).2" />
<Link Source="10286:[18200..18223).4" Target="10286:[1532..2083).1" />
<Link Source="10286:[18200..18223).4" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).2" Target="10286:[1549..1560).1" />
<Link Source="10286:[1605..1638).2" Target="10286:[1605..1638).1" />
<Link Source="10286:[1605..1638).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1688..1781).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).2" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1708..1779).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).7" Target="10286:[1688..1781).1" />
<Link Source="10298:[471..492).7" Target="10286:[1708..1779).1" />
<Link Source="10298:[494..511).7" Target="10286:[1688..1781).2" />
<Link Source="10298:[494..511).7" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1820..1963).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1820..1963).2" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1840..1888).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).8" Target="10286:[1820..1963).1" />
<Link Source="10298:[471..492).8" Target="10286:[1840..1888).1" />
<Link Source="10298:[494..511).8" Target="10286:[1820..1963).2" />
<Link Source="10298:[494..511).8" Target="10286:[1840..1888).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[1977..1981).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2003..2013).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[2003..2013).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2003..2013).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2036..2052).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[2036..2052).1" Target="25002:[4395..4432).22" />
<Link Source="10286:[2036..2052).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2036..2052).1" Target="10307:[1028..1341).2" />
<Link Source="10307:[683..708).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[683..708).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1104..1135).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1206..1253).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[3352..3428).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1104..1135).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[3352..3428).1" />
<Link Source="25002:[4395..4432).25" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).25" Target="10307:[3345..3429).5" />
<Link Source="25002:[4395..4432).25" Target="25002:[4395..4432).22" />
<Link Source="25002:[4395..4432).25" Target="10286:[2036..2052).1" />
<Link Source="25002:[4395..4432).25" Target="10286:[2003..2013).1" />
<Link Source="25002:[4395..4432).25" Target="10286:[1977..1981).1" />
<Link Source="25002:[4395..4432).25" Target="10286:[17802..17818).4" />
<Link Source="25002:[4395..4432).25" Target="10286:[18200..18223).4" />
<Link Source="25002:[4395..4432).25" Target="10307:[1273..1298).1" />
<Link Source="25002:[4395..4432).25" Target="28001:[46830..47156).2" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).1" Target="10319:[13685..13708).1" />
<Link Source="10319:[13850..13948).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13850..13948).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).3" Target="10319:[13737..13783).1" />
<Link Source="10319:[13850..13948).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).4" Target="10319:[13785..13824).1" />
<Link Source="10319:[13850..13948).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13863..13947).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13850..13948).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14956..14981).1" Target="10319:[13850..13948).2" />
<Link Source="10319:[14956..14981).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14983..15029).1" Target="10319:[13850..13948).3" />
<Link Source="10319:[14983..15029).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15031..15070).1" Target="10319:[13850..13948).4" />
<Link Source="10319:[15031..15070).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[15096..15130).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[14931..14954).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).4" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[15146..15291).4" />
<Link Source="10319:[15146..15291).5" Target="10319:[13863..13947).1" />
<Link Source="10319:[15159..15290).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15146..15291).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20027..20052).1" Target="10319:[15146..15291).2" />
<Link Source="10319:[20027..20052).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20054..20093).1" Target="10319:[15146..15291).3" />
<Link Source="10319:[20054..20093).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20095..20126).1" Target="10319:[15146..15291).5" />
<Link Source="10319:[20095..20126).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[14862..16302).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20152..24647).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20152..24647).1" Target="25002:[4395..4432).25" />
<Link Source="10319:[20152..24647).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20027..20052).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20054..20093).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20095..20126).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).5" Target="10319:[20152..24647).1" />
<Link Source="10319:[20515..20674).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20508..20675).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41889..41914).1" Target="10319:[20508..20675).2" />
<Link Source="10319:[41889..41914).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41929..41968).1" Target="10319:[20508..20675).3" />
<Link Source="10319:[41929..41968).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41983..42014).1" Target="10319:[20508..20675).4" />
<Link Source="10319:[41983..42014).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42029..42063).1" Target="10319:[20508..20675).5" />
<Link Source="10319:[42029..42063).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[19916..30085).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[42089..42141).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[42839..42937).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42821..42938).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63885..63919).1" Target="10319:[42821..42938).2" />
<Link Source="10319:[63885..63919).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63934..63945).1" Target="10319:[42821..42938).3" />
<Link Source="10319:[63934..63945).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63960..63969).1" Target="10319:[42821..42938).4" />
<Link Source="10319:[63960..63969).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63984..64009).1" Target="10319:[42821..42938).6" />
<Link Source="10319:[63984..64009).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[63885..63919).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[64035..64445).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[42839..42937).1" />
<Link Source="10319:[64461..64473).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[64461..64473).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[42821..42938).7" />
<Link Source="10319:[42952..43079).2" Target="10319:[42952..43079).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[20515..20674).1" />
<Link Source="10354:[10975..11012).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10975..11012).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).3" Target="10354:[10826..10838).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[11026..11097).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[10809..10838).1" Target="10354:[11142..11154).1" />
<Link Source="10319:[43108..43134).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11244..11285).1" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[11026..11097).1" />
<Link Source="10354:[11244..11285).2" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).3" Target="10319:[43108..43134).1" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).2" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).1" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3068..3073).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3068..3073).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3200..3211).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3200..3211).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3319..3325).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3319..3325).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3380..3385).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3380..3385).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3474..3479).1" Target="10354:[3419..3448).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3501..3506).1" Target="EXTERNAL" />
<Link Source="10354:[3501..3506).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3501..3506).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3587).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3557).1" Target="10354:[3546..3587).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3615).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3607).1" Target="10354:[3601..3615).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).2" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3501..3506).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3557).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3601..3607).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3474..3479).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3587).1" />
<Link Source="10354:[11244..11285).4" Target="10319:[43108..43134).1" />
<Link Source="10354:[11312..11328).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[3684..3818).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3684..3818).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).1" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).2" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).3" Target="10354:[3720..3803).2" />
<Link Source="10354:[3720..3803).3" Target="10354:[11312..11328).1" />
<Link Source="10354:[11299..11330).1" Target="10354:[3720..3803).1" />
<Link Source="10354:[11299..11330).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11344..11360).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[11344..11360).1" Target="10319:[43108..43134).1" />
<Link Source="10319:[43095..43135).1" Target="10354:[11344..11360).1" />
<Link Source="10319:[43095..43135).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43173..43245).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43149..43246).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50330..50355).1" Target="10319:[43149..43246).2" />
<Link Source="10319:[50330..50355).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[50313..50328).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[51282..51325).1" Target="EXTERNAL" />
<Link Source="10319:[51282..51325).1" Target="10319:[50381..51340).1" />
<Link Source="10319:[43262..43312).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[41929..41968).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[51282..51325).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[43262..43312).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43489).1" Target="10319:[20515..20674).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43490).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43490).2" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43490).3" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43490).6" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43490).7" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43490).10" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[942..1750).1" Target="10319:[41732..45579).1" />
<Link Source="10312:[942..1750).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1322..1739).1" Target="10312:[1186..1207).1" />
<Link Source="10312:[1322..1739).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1326..1357).1" Target="10319:[43326..43489).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1322..1739).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1326..1357).1" />
<Link Source="10353:[7556..7642).1" Target="10353:[7504..7530).1" />
<Link Source="10353:[7556..7642).1" Target="EXTERNAL" />
<Link Source="10353:[7556..7642).1" Target="10312:[1326..1357).1" />
<Link Source="10312:[1585..1724).1" Target="10312:[994..1013).1" />
<Link Source="10312:[1585..1724).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).2" Target="10312:[1028..1062).1" />
<Link Source="10312:[1585..1724).2" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).3" Target="10312:[1077..1093).1" />
<Link Source="10312:[1585..1724).3" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).4" Target="10312:[1108..1117).1" />
<Link Source="10312:[1585..1724).4" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).5" Target="10312:[1132..1171).1" />
<Link Source="10312:[1585..1724).5" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).6" Target="10312:[1186..1207).1" />
<Link Source="10312:[1585..1724).6" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).7" Target="10312:[1222..1235).1" />
<Link Source="10312:[1585..1724).7" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).8" Target="10312:[1250..1296).1" />
<Link Source="10312:[1585..1724).8" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1723).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1724).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1724).2" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1724).3" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1724).4" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1724).5" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1724).6" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1724).7" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1724).8" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[942..1750).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[5755..5789).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[6044..6433).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[1585..1723).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[5721..5740).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).2" Target="10312:[5804..5815).1" />
<Link Source="10312:[6110..6221).2" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).3" Target="10312:[5830..5839).1" />
<Link Source="10312:[6110..6221).3" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).4" Target="10312:[5854..5893).1" />
<Link Source="10312:[6110..6221).4" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).5" Target="10312:[5908..5929).1" />
<Link Source="10312:[6110..6221).5" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).6" Target="10312:[5944..5957).1" />
<Link Source="10312:[6110..6221).6" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).7" Target="10312:[5972..6018).1" />
<Link Source="10312:[6110..6221).7" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6220).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6221).1" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6221).2" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6221).3" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6221).4" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6221).5" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6221).6" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6221).7" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[5663..6444).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3905..3919).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).9" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).9" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).9" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).9" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).10" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).11" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).11" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).11" Target="10354:[3720..3803).10" />
<Link Source="10354:[3720..3803).11" Target="10312:[3905..3919).1" />
<Link Source="10312:[3892..3921).1" Target="10354:[3720..3803).9" />
<Link Source="10312:[3892..3921).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3948..3966).1" Target="10312:[6110..6220).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3935..3968).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4750..4847).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4750..4847).1" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4863..5000).1" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5079..5183).1" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[5079..5183).1" />
<Link Source="10353:[5197..5323).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).1" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[4698..4724).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[5485..5759).1" />
<Link Source="10353:[5485..5759).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).1" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[4698..4724).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[5775..5979).1" />
<Link Source="10353:[5775..5979).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5995..6029).1" Target="10353:[5775..5979).3" />
<Link Source="10353:[5995..6029).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6002..6028).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[5995..6029).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6343..6358).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6384..6410).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6002..6028).1" />
<Link Source="10312:[3984..4005).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[3645..5112).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).2" Target="10312:[6110..6220).1" />
<Link Source="10312:[4060..4080).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[3696..3715).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4962..4966).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4919..5009).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[4058..4122).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[4094..4107).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4955..4994).1" Target="10354:[4094..4107).1" />
<Link Source="10354:[4955..4994).1" Target="10312:[4060..4080).1" />
<Link Source="10312:[4019..5073).4" Target="10354:[4955..4994).1" />
<Link Source="10312:[4019..5073).4" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).4" />
<Link Source="10312:[4019..5073).5" Target="10312:[6110..6220).1" />
<Link Source="10312:[4134..4806).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4134..4806).2" Target="10312:[3984..4005).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4134..4806).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4019..5073).5" />
<Link Source="10312:[4534..4658).1" Target="10312:[3696..3715).1" />
<Link Source="10312:[4534..4658).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).2" Target="10312:[3717..3728).1" />
<Link Source="10312:[4534..4658).2" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).3" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).4" Target="10312:[3741..3780).1" />
<Link Source="10312:[4534..4658).4" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).5" Target="10312:[3782..3803).1" />
<Link Source="10312:[4534..4658).5" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).6" Target="10312:[3645..5112).1" />
<Link Source="10312:[4534..4658).6" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).7" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).7" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).8" Target="10312:[3820..3866).1" />
<Link Source="10312:[4534..4658).8" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4657).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4658).1" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4658).2" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4658).3" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4658).4" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4658).5" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4658).6" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4658).7" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4658).8" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4019..5073).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[4534..4658).9" Target="10312:[4134..4806).2" />
<Link Source="10312:[4685..4699).1" Target="10312:[4134..4806).2" />
<Link Source="10354:[3684..3818).3" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).3" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).17" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).17" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).17" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).17" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).18" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).19" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).19" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).19" Target="10354:[3720..3803).18" />
<Link Source="10354:[3720..3803).19" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).1" Target="10354:[3720..3803).17" />
<Link Source="10312:[4680..4787).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4826..5058).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).1" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4826..5058).2" Target="10312:[4019..5073).5" />
<Link Source="10382:[1340..1359).1" Target="10312:[4534..4658).1" />
<Link Source="10382:[1340..1359).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1361..1372).1" Target="10312:[4534..4658).2" />
<Link Source="10382:[1361..1372).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1374..1383).1" Target="10312:[4534..4658).3" />
<Link Source="10382:[1374..1383).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1385..1424).1" Target="10312:[4534..4658).4" />
<Link Source="10382:[1385..1424).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1426..1447).1" Target="10312:[4534..4658).5" />
<Link Source="10382:[1426..1447).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1449..1470).1" Target="10312:[4534..4658).6" />
<Link Source="10382:[1449..1470).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1472..1485).1" Target="10312:[4534..4658).7" />
<Link Source="10382:[1472..1485).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1487..1533).1" Target="10312:[5335..5381).1" />
<Link Source="10382:[1487..1533).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1275..1939).1" Target="10312:[4019..5073).5" />
<Link Source="10382:[1275..1939).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1572..1586).1" Target="10312:[4534..4657).1" />
<Link Source="10354:[3684..3818).4" Target="10382:[1340..1359).1" />
<Link Source="10354:[3684..3818).4" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).25" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).25" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).25" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).25" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).26" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).27" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[3720..3803).26" />
<Link Source="10354:[3720..3803).27" Target="10382:[1572..1586).1" />
<Link Source="10382:[1559..1588).1" Target="10354:[3720..3803).25" />
<Link Source="10382:[1559..1588).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1619..1629).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[913..1046).1" Target="10382:[1275..1939).1" />
<Link Source="10382:[913..1046).1" Target="10382:[1619..1629).1" />
<Link Source="10382:[949..1031).1" Target="EXTERNAL" />
<Link Source="10382:[949..1031).1" Target="10382:[1619..1629).1" />
<Link Source="10382:[1604..1691).1" Target="10382:[949..1031).1" />
<Link Source="10382:[1604..1691).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1604..1691).2" Target="10382:[1426..1447).1" />
<Link Source="10382:[1604..1691).2" Target="10382:[1604..1691).1" />
<Link Source="10382:[1604..1691).2" Target="10312:[4534..4657).1" />
<Link Source="10382:[1604..1691).3" Target="10312:[4534..4657).1" />
<Link Source="10382:[1737..1753).1" Target="10312:[4534..4657).1" />
<Link Source="10376:[1542..2071).1" Target="10382:[1275..1939).1" />
<Link Source="10376:[1542..2071).1" Target="10382:[1737..1753).1" />
<Link Source="10376:[1578..2009).1" Target="10382:[1737..1753).1" />
<Link Source="10376:[1578..2009).2" Target="10376:[1542..2071).1" />
<Link Source="10376:[1578..2009).2" Target="10319:[50381..51340).1" />
<Link Source="10376:[1578..2009).2" Target="10376:[1578..2009).1" />
<Link Source="10376:[1578..2009).2" Target="10382:[1737..1753).1" />
<Link Source="10376:[1653..1717).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1739..1899).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[1739..1899).1" Target="10319:[50381..51340).1" />
<Link Source="10376:[1739..1899).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1921..1990).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[1921..1990).1" Target="10319:[50381..51340).1" />
<Link Source="10376:[1921..1990).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1921..1990).2" Target="10376:[1653..1717).1" />
<Link Source="10376:[1921..1990).2" Target="10376:[1578..2009).2" />
<Link Source="10376:[1921..1990).3" Target="10376:[1578..2009).2" />
<Link Source="10376:[2027..2056).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[2027..2056).1" Target="10376:[1921..1990).2" />
<Link Source="10376:[2027..2056).1" Target="10382:[1737..1753).1" />
<Link Source="10382:[1707..1928).1" Target="10376:[2027..2056).1" />
<Link Source="10382:[1707..1928).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1707..1928).2" Target="10382:[1707..1928).1" />
<Link Source="10382:[1707..1928).2" Target="10382:[1361..1372).1" />
<Link Source="10382:[1707..1928).2" Target="10376:[1921..1990).2" />
<Link Source="10382:[1707..1928).2" Target="10312:[4534..4657).1" />
<Link Source="10312:[4534..4658).21" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).21" Target="10382:[1707..1928).2" />
<Link Source="10312:[4534..4658).22" Target="10312:[3741..3780).1" />
<Link Source="10312:[4534..4658).22" Target="10382:[1707..1928).2" />
<Link Source="10312:[4534..4658).23" Target="10312:[3782..3803).1" />
<Link Source="10312:[4534..4658).23" Target="10382:[1707..1928).2" />
<Link Source="10312:[4534..4658).25" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).25" Target="10382:[1707..1928).2" />
<Link Source="10312:[4534..4658).26" Target="10382:[1487..1533).1" />
<Link Source="10312:[4534..4658).26" Target="10382:[1707..1928).2" />
<Link Source="10346:[10629..10648).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10650..10661).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10663..10672).1" Target="10312:[4534..4658).21" />
<Link Source="10346:[10663..10672).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10674..10713).1" Target="10312:[4534..4658).22" />
<Link Source="10346:[10674..10713).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10715..10736).1" Target="10312:[4534..4658).23" />
<Link Source="10346:[10715..10736).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10738..10759).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10761..10774).1" Target="10312:[4534..4658).25" />
<Link Source="10346:[10761..10774).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10776..10822).1" Target="10312:[4534..4658).26" />
<Link Source="10346:[10776..10822).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10564..12467).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10861..10875).1" Target="10382:[1707..1928).2" />
<Link Source="10354:[3684..3818).6" Target="10346:[10629..10648).1" />
<Link Source="10354:[3684..3818).6" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).41" Target="10354:[3684..3818).6" />
<Link Source="10354:[3720..3803).41" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).41" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).41" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).42" Target="10346:[10861..10875).1" />
<Link Source="10354:[3720..3803).43" Target="10354:[3684..3818).6" />
<Link Source="10354:[3720..3803).43" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).43" Target="10354:[3720..3803).42" />
<Link Source="10354:[3720..3803).43" Target="10346:[10861..10875).1" />
<Link Source="10346:[10848..10877).1" Target="10354:[3720..3803).41" />
<Link Source="10346:[10848..10877).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[10897..10914).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[7666..7775).1" Target="10346:[10564..12467).1" />
<Link Source="10346:[7666..7775).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[7672..7773).1" Target="10346:[7666..7775).1" />
<Link Source="10346:[7672..7773).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[7672..7773).1" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).1" Target="10346:[10897..10914).1" />
<Link Source="10346:[10893..11127).1" Target="10346:[7672..7773).1" />
<Link Source="10346:[10893..11127).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[11143..11188).1" Target="10346:[10674..10713).1" />
<Link Source="10346:[11143..11188).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[11157..11187).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[3460..3499).1" Target="10346:[11143..11188).1" />
<Link Source="10346:[3460..3499).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3423..3863).1" Target="10346:[10564..12467).1" />
<Link Source="10346:[3423..3863).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3525..3638).2" Target="10382:[1707..1928).2" />
<Link Source="10346:[3525..3638).2" Target="10346:[3525..3638).1" />
<Link Source="10346:[3525..3638).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3654..3816).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[3423..3863).1" />
<Link Source="10346:[3654..3816).2" Target="10382:[1707..1928).2" />
<Link Source="10346:[3654..3816).2" Target="10346:[3654..3816).1" />
<Link Source="10346:[3654..3816).2" Target="10346:[11157..11187).1" />
<Link Source="10346:[3712..3801).1" Target="10346:[3423..3863).1" />
<Link Source="10346:[3712..3801).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[3712..3801).1" Target="10346:[3654..3816).2" />
<Link Source="10346:[3712..3801).2" Target="10346:[3460..3499).1" />
<Link Source="10346:[3712..3801).2" Target="10346:[3654..3816).2" />
<Link Source="10346:[3712..3801).4" Target="10346:[3654..3816).2" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2889..2923).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2938..2962).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[2977..3016).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3031..3043).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3069..3118).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3102..3117).1" Target="10345:[3069..3118).1" />
<Link Source="10345:[3102..3117).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3132..3193).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3171..3192).1" Target="10345:[3132..3193).1" />
<Link Source="10345:[3171..3192).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3207..4163).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).2" />
<Link Source="10345:[3207..4163).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[3299..3362).1" Target="10345:[2889..2923).1" />
<Link Source="10345:[3299..3362).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3031..3043).1" />
<Link Source="10345:[3476..3483).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3530..3552).1" Target="10345:[3476..3483).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[3458..3553).1" Target="10345:[3530..3552).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3299..3362).1" />
<Link Source="10345:[3571..3619).1" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).1" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).2" Target="10345:[3458..3553).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).2" Target="10345:[4179..4307).1" />
<Link Source="10345:[4179..4307).2" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).4" Target="10345:[3571..3619).1" />
<Link Source="10345:[4179..4307).4" Target="10345:[3207..4163).1" />
<Link Source="10345:[4179..4307).4" Target="10345:[4179..4307).1" />
<Link Source="10345:[4179..4307).4" Target="10346:[3712..3801).4" />
<Link Source="10345:[4179..4307).5" Target="10345:[4179..4307).2" />
<Link Source="10345:[4179..4307).5" Target="10345:[4179..4307).4" />
<Link Source="10345:[4179..4307).5" Target="10346:[3712..3801).4" />
<Link Source="10345:[4279..4292).1" Target="10345:[922..1186).1" />
<Link Source="10345:[4279..4292).1" Target="10345:[4179..4307).5" />
<Link Source="10346:[3832..3852).1" Target="10346:[3423..3863).1" />
<Link Source="10346:[3832..3852).1" Target="10345:[4279..4292).1" />
<Link Source="10346:[3832..3852).1" Target="10346:[11157..11187).1" />
<Link Source="10346:[11258..12246).1" Target="10346:[10715..10736).1" />
<Link Source="10346:[11258..12246).1" Target="EXTERNAL" />
<Link Source="10346:[11258..12246).1" Target="10382:[1707..1928).2" />
<Link Source="10346:[11258..12246).2" Target="10382:[1707..1928).2" />
<Link Source="10346:[11258..12246).5" Target="10346:[10564..12467).1" />
<Link Source="10346:[11258..12246).5" Target="10345:[4279..4292).1" />
<Link Source="10346:[11258..12246).5" Target="10346:[11258..12246).2" />
<Link Source="10346:[11258..12246).5" Target="10382:[1707..1928).2" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).1" />
<Link Source="10346:[11258..12246).6" Target="10346:[11258..12246).5" />
<Link Source="10346:[11258..12246).6" Target="10382:[1707..1928).2" />
<Link Source="10346:[11369..11508).1" Target="10346:[10629..10648).1" />
<Link Source="10346:[11369..11508).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).2" Target="10346:[10564..12467).1" />
<Link Source="10346:[11369..11508).2" Target="10345:[4279..4292).1" />
<Link Source="10346:[11369..11508).2" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[11369..11508).3" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).4" Target="10346:[10663..10672).1" />
<Link Source="10346:[11369..11508).4" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).5" Target="10346:[10674..10713).1" />
<Link Source="10346:[11369..11508).5" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).6" Target="10346:[10715..10736).1" />
<Link Source="10346:[11369..11508).6" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).7" Target="10346:[10738..10759).1" />
<Link Source="10346:[11369..11508).7" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).8" Target="10346:[10761..10774).1" />
<Link Source="10346:[11369..11508).8" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11508).9" Target="10346:[10776..10822).1" />
<Link Source="10346:[11369..11508).9" Target="10346:[11258..12246).6" />
<Link Source="10346:[11369..11507).1" Target="10346:[11258..12246).6" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11508).1" />
<Link Source="10312:[7652..7671).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11508).2" />
<Link Source="10312:[7673..7703).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11508).3" />
<Link Source="10312:[7705..7716).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11508).4" />
<Link Source="10312:[7718..7727).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11508).5" />
<Link Source="10312:[7729..7768).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11508).6" />
<Link Source="10312:[7770..7791).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11508).7" />
<Link Source="10312:[7793..7814).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11508).8" />
<Link Source="10312:[7816..7829).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11508).9" />
<Link Source="10312:[7831..7877).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[10564..12467).1" />
<Link Source="10312:[7615..8420).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7903..7936).1" Target="10312:[7770..7791).1" />
<Link Source="10312:[7903..7936).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7916..7934).1" Target="10346:[11369..11507).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7903..7936).1" />
<Link Source="10353:[4698..4724).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[4750..4847).3" Target="10353:[4698..4724).2" />
<Link Source="10353:[4750..4847).3" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).5" Target="10353:[4698..4724).2" />
<Link Source="10353:[4863..5000).5" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[4863..5000).6" Target="10312:[7916..7934).1" />
<Link Source="10353:[5079..5183).3" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).3" Target="10312:[7916..7934).1" />
<Link Source="10353:[5197..5323).4" Target="10353:[4698..4724).2" />
<Link Source="10353:[5197..5323).4" Target="10353:[5079..5183).3" />
<Link Source="10353:[5197..5323).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).7" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).8" Target="10353:[4698..4724).2" />
<Link Source="10353:[5485..5759).8" Target="10353:[5485..5759).7" />
<Link Source="10353:[5485..5759).8" Target="10312:[7916..7934).1" />
<Link Source="10353:[5485..5759).9" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).5" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).5" Target="10312:[7916..7934).1" />
<Link Source="10353:[5775..5979).7" Target="10353:[4698..4724).2" />
<Link Source="10353:[5775..5979).7" Target="10353:[5775..5979).5" />
<Link Source="10353:[5775..5979).7" Target="10312:[7916..7934).1" />
<Link Source="10353:[5995..6029).4" Target="10353:[5775..5979).7" />
<Link Source="10353:[5995..6029).4" Target="10312:[7916..7934).1" />
<Link Source="10353:[6002..6028).2" Target="10312:[7916..7934).1" />
<Link Source="10353:[6343..6358).2" Target="10353:[5995..6029).4" />
<Link Source="10353:[6343..6358).2" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).7" Target="10353:[6002..6028).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6343..6358).2" />
<Link Source="10353:[6384..6410).8" Target="10353:[6384..6410).7" />
<Link Source="10353:[6384..6410).8" Target="10353:[6002..6028).2" />
<Link Source="10312:[7952..7977).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7718..7727).1" />
<Link Source="10312:[7952..7977).2" Target="10312:[7952..7977).1" />
<Link Source="10312:[7952..7977).2" Target="10346:[11369..11507).1" />
<Link Source="10312:[7991..8409).1" Target="10312:[7673..7703).1" />
<Link Source="10312:[7991..8409).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[7991..8409).1" Target="10346:[11369..11507).1" />
<Link Source="10312:[8049..8181).1" Target="10312:[7652..7671).1" />
<Link Source="10312:[8049..8181).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).2" Target="10312:[7673..7703).1" />
<Link Source="10312:[8049..8181).2" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).3" Target="10312:[7705..7716).1" />
<Link Source="10312:[8049..8181).3" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).4" Target="10312:[7718..7727).1" />
<Link Source="10312:[8049..8181).4" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).5" Target="10312:[7770..7791).1" />
<Link Source="10312:[8049..8181).5" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).6" Target="10312:[7793..7814).1" />
<Link Source="10312:[8049..8181).6" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).7" Target="10312:[7816..7829).1" />
<Link Source="10312:[8049..8181).7" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8181).8" Target="10312:[7831..7877).1" />
<Link Source="10312:[8049..8181).8" Target="10312:[7991..8409).1" />
<Link Source="10312:[8049..8180).1" Target="10312:[7991..8409).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8181).1" />
<Link Source="10312:[18976..18995).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8181).2" />
<Link Source="10312:[18997..19015).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8181).3" />
<Link Source="10312:[19017..19028).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8181).4" />
<Link Source="10312:[19030..19039).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8181).5" />
<Link Source="10312:[19041..19062).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8181).6" />
<Link Source="10312:[19064..19085).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8181).7" />
<Link Source="10312:[19087..19100).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8181).8" />
<Link Source="10312:[19102..19148).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[18997..19015).1" />
<Link Source="10312:[19174..19243).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[19017..19028).1" />
<Link Source="10312:[19174..19243).2" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19174..19243).3" Target="10312:[8049..8180).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[19064..19085).1" />
<Link Source="10312:[19174..19243).4" Target="10312:[8049..8180).1" />
<Link Source="10312:[19188..19242).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[19174..19243).1" />
<Link Source="10312:[61540..61570).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61572..61583).1" Target="10312:[19174..19243).2" />
<Link Source="10312:[61572..61583).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61585..61606).1" Target="10312:[19174..19243).3" />
<Link Source="10312:[61585..61606).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61608..61629).1" Target="10312:[19174..19243).4" />
<Link Source="10312:[61608..61629).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).1" Target="10312:[61585..61606).1" />
<Link Source="10312:[61655..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61655..62327).1" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).2" Target="10312:[19188..19242).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61655..62327).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[61540..61570).1" />
<Link Source="10312:[61655..62327).4" Target="10312:[19188..19242).1" />
<Link Source="10312:[61874..62327).1" Target="10312:[61540..61570).1" />
<Link Source="10312:[61874..62327).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[61874..62327).1" Target="EXTERNAL" />
<Link Source="10312:[61874..62327).1" Target="10312:[61655..62327).4" />
<Link Source="10312:[62098..62327).1" Target="10312:[61585..61606).1" />
<Link Source="10312:[62098..62327).1" Target="EXTERNAL" />
<Link Source="10312:[62098..62327).1" Target="10312:[61874..62327).1" />
<Link Source="10312:[62098..62327).2" Target="10312:[61874..62327).1" />
<Link Source="10312:[62279..62312).1" Target="10312:[61572..61583).1" />
<Link Source="10312:[62279..62312).1" Target="10312:[62098..62327).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[19259..19531).1" Target="10312:[8049..8180).1" />
<Link Source="10312:[19326..19460).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19030..19039).1" />
<Link Source="10312:[19326..19460).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19041..19062).1" />
<Link Source="10312:[19326..19460).3" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19087..19100).1" />
<Link Source="10312:[19326..19460).6" Target="10312:[19259..19531).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19102..19148).1" />
<Link Source="10312:[19326..19460).7" Target="10312:[19259..19531).1" />
<Link Source="10312:[19366..19459).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63424..63437).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63439..63448).1" Target="10312:[19326..19460).2" />
<Link Source="10312:[63439..63448).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63450..63471).1" Target="10312:[19326..19460).3" />
<Link Source="10312:[63450..63471).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63473..63501).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63503..63516).1" Target="10312:[19326..19460).6" />
<Link Source="10312:[63503..63516).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63518..63564).1" Target="10312:[19326..19460).7" />
<Link Source="10312:[63518..63564).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19326..19460).1" />
<Link Source="10312:[63566..63612).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19064..19085).1" />
<Link Source="10312:[63381..70761).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63638..63668).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63682..63706).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[63424..63437).1" />
<Link Source="10312:[63859..64015).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[63859..64015).1" Target="EXTERNAL" />
<Link Source="10312:[63859..64015).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[63859..64015).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[19366..19459).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[63381..70761).1" />
<Link Source="10312:[64121..69285).2" Target="10345:[4279..4292).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[64121..69285).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[62279..62312).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[19366..19459).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).2" Target="10312:[63439..63448).1" />
<Link Source="10312:[64353..69285).2" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).3" Target="10312:[63503..63516).1" />
<Link Source="10312:[64353..69285).3" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).4" Target="10312:[63450..63471).1" />
<Link Source="10312:[64353..69285).4" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).5" Target="10312:[63682..63706).1" />
<Link Source="10312:[64353..69285).5" Target="10312:[64121..69285).2" />
<Link Source="10312:[64357..64415).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[80978..80991).1" Target="10312:[64353..69285).1" />
<Link Source="10312:[80978..80991).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[80993..81002).1" Target="10312:[64353..69285).2" />
<Link Source="10312:[80993..81002).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81004..81017).1" Target="10312:[64353..69285).3" />
<Link Source="10312:[81004..81017).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81019..81040).1" Target="10312:[64353..69285).4" />
<Link Source="10312:[81019..81040).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81042..81069).1" Target="10312:[64353..69285).5" />
<Link Source="10312:[81042..81069).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[80978..80991).1" />
<Link Source="10312:[81095..84034).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81095..84034).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81196..82523).1" Target="10312:[81095..84034).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[80993..81002).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[81196..82523).1" />
<Link Source="10312:[81196..82523).2" Target="10312:[81095..84034).1" />
<Link Source="10312:[81196..82523).3" Target="10312:[81019..81040).1" />
<Link Source="10312:[81196..82523).3" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).3" Target="10312:[81095..84034).1" />
<Link Source="10312:[81196..82523).6" Target="10312:[81196..82523).2" />
<Link Source="10312:[81196..82523).6" Target="10312:[81196..82523).3" />
<Link Source="10312:[81196..82523).6" Target="10312:[81095..84034).1" />
<Link Source="10312:[81319..81371).1" Target="10312:[80978..80991).1" />
<Link Source="10312:[81319..81371).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[81495..81570).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81495..81570).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[81495..81570).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81495..81570).2" Target="10312:[81319..81371).1" />
<Link Source="10312:[81495..81570).2" Target="10312:[81196..82523).6" />
<Link Source="10312:[81596..82500).1" Target="10312:[81319..81371).1" />
<Link Source="10312:[81596..82500).1" Target="10345:[4279..4292).1" />
<Link Source="10312:[81596..82500).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81596..82500).1" Target="10312:[62279..62312).1" />
<Link Source="10312:[81596..82500).1" Target="10312:[80993..81002).1" />
<Link Source="10312:[81596..82500).1" Target="10312:[81196..82523).6" />
<Link Source="10312:[81596..82500).2" Target="10312:[81019..81040).1" />
<Link Source="10312:[81596..82500).2" Target="10312:[81196..82523).6" />
<Link Source="10312:[81628..81659).1" Target="10312:[81196..82523).6" />
<Link Source="10353:[7504..7530).2" Target="10312:[81596..82500).2" />
<Link Source="10353:[7504..7530).2" Target="10312:[81628..81659).1" />
<Link Source="10312:[81596..82500).5" Target="10312:[81596..82500).1" />
<Link Source="10312:[81596..82500).5" Target="10353:[7504..7530).2" />
<Link Source="10312:[81596..82500).5" Target="10312:[81196..82523).6" />
<Link Source="10312:[84050..84066).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[84080..84093).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[84080..84093).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[64121..69285).2" />
<Link Source="10312:[64537..64543).1" Target="10312:[64353..69285).6" />
<Link Source="10306:[3196..3249).1" Target="10312:[63381..70761).1" />
<Link Source="10306:[3196..3249).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).1" Target="10306:[3196..3249).1" />
<Link Source="10306:[3202..3247).1" Target="10312:[64121..69285).2" />
<Link Source="10306:[3202..3247).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).2" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).2" Target="10312:[64537..64543).1" />
<Link Source="10306:[3209..3246).1" Target="10312:[64537..64543).1" />
<Link Source="10298:[471..492).9" Target="10306:[3202..3247).1" />
<Link Source="10298:[471..492).9" Target="10306:[3209..3246).1" />
<Link Source="10298:[494..511).9" Target="10306:[3202..3247).2" />
<Link Source="10298:[494..511).9" Target="10306:[3209..3246).1" />
<Link Source="10312:[64532..69285).1" Target="10298:[471..492).9" />
<Link Source="10312:[64532..69285).1" Target="10312:[64353..69285).6" />
<Link Source="10312:[65229..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65229..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65229..69285).1" Target="10312:[64532..69285).1" />
<Link Source="10312:[65229..69285).2" Target="10312:[64532..69285).1" />
<Link Source="10312:[65474..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65474..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65474..69285).1" Target="10312:[65229..69285).1" />
<Link Source="10312:[65474..69285).2" Target="10312:[65229..69285).1" />
<Link Source="10312:[65730..65736).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65730..65736).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[66182..66188).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[66182..66188).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[63450..63471).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[63473..63501).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[65726..69285).1" />
<Link Source="10312:[66291..66342).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[75301..75322).1" Target="10312:[66177..69285).3" />
<Link Source="10312:[75301..75322).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75324..75352).1" Target="10312:[66177..69285).4" />
<Link Source="10312:[75324..75352).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).1" Target="10312:[75301..75322).1" />
<Link Source="10312:[75735..75866).1" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).2" Target="10312:[66291..66342).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[75735..75866).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75324..75352).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75742..75804).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[63638..63668).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[63518..63564).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[63566..63612).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[65726..69285).1" />
<Link Source="10312:[66215..66540).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[77528..77541).1" Target="10312:[66177..69285).2" />
<Link Source="10312:[77528..77541).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77543..77571).1" Target="10312:[75735..75866).4" />
<Link Source="10312:[77543..77571).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77573..77604).1" Target="10312:[66177..69285).7" />
<Link Source="10312:[77573..77604).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77606..77652).1" Target="10312:[66177..69285).8" />
<Link Source="10312:[77606..77652).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77654..77700).1" Target="10312:[66177..69285).9" />
<Link Source="10312:[77654..77700).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[63381..70761).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[77726..77892).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).2" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77730..77782).1" Target="10312:[66215..66540).1" />
<Link Source="10298:[471..492).12" Target="10312:[77726..77892).1" />
<Link Source="10298:[471..492).12" Target="10312:[77730..77782).1" />
<Link Source="10298:[494..511).12" Target="10312:[77726..77892).2" />
<Link Source="10298:[494..511).12" Target="10312:[77730..77782).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[77528..77541).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[77543..77571).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[77573..77604).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[77606..77652).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[77654..77700).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[66215..66540).1" />
<Link Source="10312:[77915..78032).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77908..78033).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78402..78430).1" Target="10312:[77908..78033).2" />
<Link Source="10312:[78402..78430).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78432..78463).1" Target="10312:[77908..78033).3" />
<Link Source="10312:[78432..78463).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78465..78511).1" Target="10312:[77908..78033).4" />
<Link Source="10312:[78465..78511).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78513..78552).1" Target="10312:[77908..78033).5" />
<Link Source="10312:[78513..78552).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[78387..78400).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[78402..78430).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[78432..78463).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[78465..78511).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[78513..78552).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[77915..78032).1" />
<Link Source="10312:[78649..78771).1" Target="10312:[77915..78032).1" />
<Link Source="10376:[1070..1083).1" Target="10312:[78642..78772).1" />
<Link Source="10376:[1070..1083).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1085..1113).1" Target="10312:[78642..78772).2" />
<Link Source="10376:[1085..1113).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1115..1146).1" Target="10312:[78642..78772).3" />
<Link Source="10376:[1115..1146).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1148..1194).1" Target="10312:[78642..78772).4" />
<Link Source="10376:[1148..1194).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1196..1235).1" Target="10312:[78642..78772).5" />
<Link Source="10376:[1196..1235).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1028..1425).1" Target="10312:[78346..78783).1" />
<Link Source="10376:[1028..1425).1" Target="10312:[64121..69285).2" />
<Link Source="10376:[1028..1425).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).1" Target="10376:[1070..1083).1" />
<Link Source="10376:[1261..1414).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).2" Target="10376:[1028..1425).1" />
<Link Source="10376:[1261..1414).2" Target="10312:[64121..69285).2" />
<Link Source="10376:[1261..1414).2" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).3" Target="10376:[1085..1113).1" />
<Link Source="10376:[1261..1414).3" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).4" Target="10376:[1115..1146).1" />
<Link Source="10376:[1261..1414).4" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).5" Target="10376:[1148..1194).1" />
<Link Source="10376:[1261..1414).5" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).6" Target="10376:[1196..1235).1" />
<Link Source="10376:[1261..1414).6" Target="10312:[78649..78771).1" />
<Link Source="10376:[1268..1413).1" Target="10312:[78649..78771).1" />
<Link Source="10286:[30070..30083).1" Target="10376:[1261..1414).1" />
<Link Source="10286:[30070..30083).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30098..30120).1" Target="10376:[1261..1414).2" />
<Link Source="10286:[30098..30120).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30135..30160).1" Target="10376:[1261..1414).3" />
<Link Source="10286:[30135..30160).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30175..30206).1" Target="10376:[1261..1414).4" />
<Link Source="10286:[30175..30206).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30221..30268).1" Target="10376:[1261..1414).5" />
<Link Source="10286:[30221..30268).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30283..30330).1" Target="10376:[1261..1414).6" />
<Link Source="10286:[30283..30330).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30012..30691).1" Target="10376:[1028..1425).1" />
<Link Source="10286:[30012..30691).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30356..30522).1" Target="10286:[30012..30691).1" />
<Link Source="10286:[30356..30522).1" Target="10312:[64121..69285).2" />
<Link Source="10286:[30356..30522).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30356..30522).2" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).2" Target="10376:[1268..1413).1" />
<Link Source="10286:[30360..30412).1" Target="10376:[1268..1413).1" />
<Link Source="10298:[471..492).13" Target="10286:[30356..30522).1" />
<Link Source="10298:[471..492).13" Target="10286:[30360..30412).1" />
<Link Source="10298:[494..511).13" Target="10286:[30356..30522).2" />
<Link Source="10298:[494..511).13" Target="10286:[30360..30412).1" />
<Link Source="10286:[30538..30680).1" Target="10286:[30070..30083).1" />
<Link Source="10286:[30538..30680).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).2" Target="10286:[30098..30120).1" />
<Link Source="10286:[30538..30680).2" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).3" Target="10286:[30135..30160).1" />
<Link Source="10286:[30538..30680).3" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).4" Target="10286:[30175..30206).1" />
<Link Source="10286:[30538..30680).4" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).5" Target="10286:[30221..30268).1" />
<Link Source="10286:[30538..30680).5" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).6" Target="10286:[30283..30330).1" />
<Link Source="10286:[30538..30680).6" Target="10376:[1268..1413).1" />
<Link Source="10286:[30545..30679).1" Target="10376:[1268..1413).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30538..30680).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2136..2158).1" Target="10286:[30538..30680).2" />
<Link Source="10060:[2136..2158).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2173..2198).1" Target="10286:[30538..30680).3" />
<Link Source="10060:[2173..2198).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2213..2244).1" Target="10286:[30538..30680).4" />
<Link Source="10060:[2213..2244).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2259..2305).1" Target="10286:[30538..30680).5" />
<Link Source="10060:[2259..2305).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2320..2366).1" Target="10286:[30538..30680).6" />
<Link Source="10060:[2320..2366).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).1" Target="10060:[2108..2121).1" />
<Link Source="10060:[2392..2555).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).2" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).2" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).3" Target="10060:[2173..2198).1" />
<Link Source="10060:[2392..2555).3" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).4" Target="10060:[2213..2244).1" />
<Link Source="10060:[2392..2555).4" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).5" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).5" Target="10312:[64121..69285).2" />
<Link Source="10060:[2392..2555).5" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).6" Target="10060:[2259..2305).1" />
<Link Source="10060:[2392..2555).6" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).7" Target="10060:[2320..2366).1" />
<Link Source="10060:[2392..2555).7" Target="10286:[30545..30679).1" />
<Link Source="10060:[2399..2554).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2392..2555).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5621..5634).1" Target="10060:[2392..2555).2" />
<Link Source="10060:[5621..5634).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5691..5716).1" Target="10060:[2392..2555).3" />
<Link Source="10060:[5691..5716).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5731..5762).1" Target="10060:[2392..2555).4" />
<Link Source="10060:[5731..5762).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5777..5806).1" Target="10060:[2392..2555).5" />
<Link Source="10060:[5777..5806).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5821..5867).1" Target="10060:[2392..2555).6" />
<Link Source="10060:[5821..5867).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5882..5928).1" Target="10060:[2392..2555).7" />
<Link Source="10060:[5882..5928).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5593..5606).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5954..5991).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[5621..5634).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[6005..6042).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6056..6090).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6056..6090).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6056..6090).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6188..6219).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6235..9907).1" Target="10060:[5593..5606).1" />
<Link Source="10060:[6235..9907).1" Target="10345:[4279..4292).1" />
<Link Source="10060:[6235..9907).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6235..9907).1" Target="10312:[62279..62312).1" />
<Link Source="10060:[6235..9907).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6814..6920).1" Target="10060:[5593..5606).1" />
<Link Source="10060:[6814..6920).1" Target="10060:[6235..9907).1" />
<Link Source="10060:[6814..6920).2" Target="10060:[5621..5634).1" />
<Link Source="10060:[6814..6920).2" Target="10060:[6235..9907).1" />
<Link Source="10060:[6814..6920).3" Target="10060:[5821..5867).1" />
<Link Source="10060:[6814..6920).3" Target="10060:[6235..9907).1" />
<Link Source="10060:[6814..6920).4" Target="10060:[5882..5928).1" />
<Link Source="10060:[6814..6920).4" Target="10060:[6235..9907).1" />
<Link Source="10060:[6821..6919).1" Target="10060:[6235..9907).1" />
<Link Source="10060:[10180..10200).1" Target="10060:[6814..6920).1" />
<Link Source="10060:[10180..10200).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10202..10215).1" Target="10060:[6814..6920).2" />
<Link Source="10060:[10202..10215).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10217..10263).1" Target="10060:[6814..6920).3" />
<Link Source="10060:[10217..10263).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10265..10311).1" Target="10060:[6814..6920).4" />
<Link Source="10060:[10265..10311).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10337..10405).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10180..10200).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[10419..10454).1" />
<Link Source="10060:[10419..10454).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[10470..10516).1" Target="10060:[10202..10215).1" />
<Link Source="10060:[10470..10516).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[10470..10516).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10532..10544).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[10558..11295).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[10558..11295).1" Target="10345:[4279..4292).1" />
<Link Source="10060:[10558..11295).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[10558..11295).1" Target="10312:[62279..62312).1" />
<Link Source="10060:[10558..11295).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11311..11352).1" Target="10060:[10180..10200).1" />
<Link Source="10060:[11311..11352).1" Target="10345:[4279..4292).1" />
<Link Source="10060:[11311..11352).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[11311..11352).1" Target="10312:[62279..62312).1" />
<Link Source="10060:[11311..11352).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11311..11352).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[11366..11675).1" />
<Link Source="10060:[11366..11675).2" Target="10060:[6821..6919).1" />
<Link Source="10060:[11373..11403).1" Target="10060:[11366..11675).2" />
<Link Source="10060:[11373..11403).1" Target="10060:[6821..6919).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[10202..10215).1" />
<Link Source="10060:[11366..11675).5" Target="10060:[11373..11403).1" />
<Link Source="10060:[11423..11509).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[11990..12013).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11373..11403).1" />
<Link Source="10060:[12028..12063).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12078..12091).1" Target="10060:[11366..11675).5" />
<Link Source="10060:[12078..12091).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[12078..12091).1" />
<Link Source="10060:[12117..12185).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11990..12013).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[12199..12238).1" />
<Link Source="10060:[12199..12238).2" Target="10060:[11423..11509).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[12028..12063).1" />
<Link Source="10060:[12254..13527).1" Target="10060:[11423..11509).1" />
<Link Source="10060:[12494..12506).1" Target="10060:[12254..13527).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[66177..69285).1" />
<Link Source="10312:[66177..69285).11" Target="10060:[12494..12506).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[65726..69285).1" />
<Link Source="10312:[67587..67593).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).1" Target="10312:[67587..67593).1" />
<Link Source="10312:[67582..69285).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[67582..69285).2" Target="10312:[66177..69285).11" />
<Link Source="10312:[67858..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[67858..69285).1" Target="EXTERNAL" />
<Link Source="10312:[67858..69285).1" Target="10312:[67582..69285).1" />
<Link Source="10312:[67858..69285).2" Target="10312:[67582..69285).1" />
<Link Source="10312:[68183..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68183..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68183..69285).1" Target="10312:[67858..69285).1" />
<Link Source="10312:[68183..69285).2" Target="10312:[67858..69285).1" />
<Link Source="10312:[68512..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68512..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68512..69285).1" Target="10312:[68183..69285).1" />
<Link Source="10312:[68512..69285).2" Target="10312:[68183..69285).1" />
<Link Source="10312:[68882..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68882..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68882..69285).1" Target="10312:[68512..69285).1" />
<Link Source="10312:[68882..69285).2" Target="10312:[68512..69285).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[68882..69285).1" />
<Link Source="10312:[69244..69269).1" Target="10312:[68882..69285).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69237..69270).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).1" Target="EXTERNAL" />
<Link Source="10354:[5439..5508).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).2" Target="10354:[5400..5413).1" />
<Link Source="10354:[5439..5508).2" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).3" Target="10312:[69244..69269).1" />
<Link Source="10354:[5446..5507).1" Target="10312:[69244..69269).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5439..5508).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1099..1112).1" Target="10354:[5439..5508).2" />
<Link Source="10368:[1099..1112).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1114..1134).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1114..1134).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1048..1256).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1048..1256).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1076..1097).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1160..1169).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1099..1112).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1191..1202).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1114..1134).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1226..1236).1" Target="10354:[5446..5507).1" />
<Link Source="10312:[69237..69270).2" Target="10354:[5439..5508).3" />
<Link Source="10312:[69237..69270).2" Target="10312:[68882..69285).1" />
<Link Source="10312:[19478..19516).1" Target="10312:[69237..69270).2" />
<Link Source="10312:[19478..19516).1" Target="10312:[19259..19531).1" />
<Link Source="10312:[19478..19515).1" Target="10312:[19259..19531).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19516).1" />
<Link Source="10354:[10217..10242).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[18976..18995).1" />
<Link Source="10354:[10192..10676).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10272..10276).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[4058..4122).4" Target="10354:[10192..10676).1" />
<Link Source="10354:[4058..4122).4" Target="10354:[10272..10276).1" />
<Link Source="10354:[10268..10665).1" Target="10354:[4058..4122).4" />
<Link Source="10354:[10268..10665).1" Target="10312:[19478..19515).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10268..10665).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10217..10242).1" />
<Link Source="10354:[10268..10665).2" Target="10368:[1160..1169).1" />
<Link Source="10354:[10268..10665).2" Target="10312:[19478..19515).1" />
<Link Source="10354:[10404..10408).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10386..10665).1" Target="10354:[10404..10408).1" />
<Link Source="10354:[10386..10665).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10442..10463).1" Target="10354:[10217..10242).1" />
<Link Source="10354:[10442..10463).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[10442..10462).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10463).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10192..10676).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8181..8186).1" Target="10368:[1160..1169).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[8214..8234).1" Target="10354:[8181..8186).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8248..8278).1" Target="10368:[1191..1202).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8109..8324).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8214..8234).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8248..8278).1" />
<Link Source="10354:[8248..8278).2" Target="10312:[67582..69285).2" />
<Link Source="10354:[8248..8278).2" Target="10354:[10442..10462).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8292..8298).1" Target="10368:[1226..1236).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[10442..10463).2" Target="10354:[10386..10665).1" />
<Link Source="10312:[19478..19516).2" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[19259..19531).1" />
<Link Source="10312:[19259..19531).4" Target="10354:[8248..8278).2" />
<Link Source="10312:[19259..19531).4" Target="10354:[8292..8298).1" />
<Link Source="10312:[19259..19531).4" Target="10312:[8049..8180).1" />
<Link Source="10312:[8049..8181).9" Target="10312:[7991..8409).1" />
<Link Source="10346:[11369..11508).10" Target="10346:[11258..12246).6" />
<Link Source="10346:[11532..11552).1" Target="10346:[11258..12246).6" />
<Link Source="10354:[4919..5009).4" Target="10346:[10629..10648).1" />
<Link Source="10354:[4919..5009).4" Target="10346:[11532..11552).1" />
<Link Source="10354:[4094..4107).6" Target="10354:[4919..5009).4" />
<Link Source="10354:[4094..4107).6" Target="10354:[8248..8278).2" />
<Link Source="10354:[4094..4107).6" Target="10346:[11532..11552).1" />
<Link Source="10346:[11528..12231).1" Target="10354:[4094..4107).6" />
<Link Source="10346:[11528..12231).1" Target="10346:[11258..12246).6" />
<Link Source="10346:[11665..12181).1" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[10663..10672).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[11665..12181).1" />
<Link Source="10346:[11665..12181).2" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).3" Target="10346:[10650..10661).1" />
<Link Source="10346:[11665..12181).3" Target="10346:[11528..12231).1" />
<Link Source="10346:[11710..11746).1" Target="10346:[11528..12231).1" />
<Link Source="10286:[2155..2260).1" Target="10346:[10738..10759).1" />
<Link Source="10286:[2155..2260).1" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).1" Target="10286:[2155..2260).1" />
<Link Source="10286:[2191..2245).1" Target="10354:[8248..8278).2" />
<Link Source="10286:[2191..2245).1" Target="10346:[11710..11746).1" />
<Link Source="10286:[2191..2245).2" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).2" Target="10346:[11710..11746).1" />
<Link Source="10286:[2198..2244).1" Target="10346:[11710..11746).1" />
<Link Source="10298:[471..492).15" Target="10286:[2191..2245).1" />
<Link Source="10298:[471..492).15" Target="10286:[2198..2244).1" />
<Link Source="10298:[494..511).15" Target="10286:[2191..2245).2" />
<Link Source="10298:[494..511).15" Target="10286:[2198..2244).1" />
<Link Source="10346:[11665..12181).4" Target="10298:[471..492).15" />
<Link Source="10346:[11665..12181).4" Target="10346:[11528..12231).1" />
<Link Source="10346:[11683..11747).1" Target="10346:[11528..12231).1" />
<Link Source="10345:[28212..28223).1" Target="10346:[11665..12181).3" />
<Link Source="10345:[28212..28223).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28225..28251).1" Target="10346:[11665..12181).4" />
<Link Source="10345:[28225..28251).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28185..28951).1" Target="10346:[3832..3852).1" />
<Link Source="10345:[28185..28951).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28277..28305).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28300..28304).1" Target="10345:[28277..28305).1" />
<Link Source="10345:[28300..28304).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).1" Target="10345:[28212..28223).1" />
<Link Source="10345:[28319..28911).1" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).2" Target="10345:[28277..28305).1" />
<Link Source="10345:[28319..28911).2" Target="10346:[11683..11747).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28185..28951).1" />
<Link Source="10345:[28319..28911).3" Target="10354:[8248..8278).2" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28319..28911).2" />
<Link Source="10345:[28319..28911).3" Target="10354:[8292..8298).1" />
<Link Source="10345:[28319..28911).3" Target="10345:[28300..28304).1" />
<Link Source="10345:[28319..28911).3" Target="10346:[11683..11747).1" />
<Link Source="10345:[28927..28940).1" Target="10346:[11683..11747).1" />
<Link Source="10346:[11665..12181).6" Target="10345:[28927..28940).1" />
<Link Source="10346:[11665..12181).6" Target="10346:[11528..12231).1" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).2" />
<Link Source="10346:[11665..12181).7" Target="10346:[11665..12181).6" />
<Link Source="10346:[11665..12181).7" Target="10346:[11528..12231).1" />
<Link Source="10346:[12205..12212).1" Target="10346:[11528..12231).1" />
<Link Source="10312:[4685..4699).3" Target="10382:[1707..1928).2" />
<Link Source="10354:[3684..3818).7" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).7" Target="10312:[4685..4699).3" />
<Link Source="10354:[3720..3803).49" Target="10354:[3684..3818).7" />
<Link Source="10354:[3720..3803).49" Target="10345:[28319..28911).3" />
<Link Source="10354:[3720..3803).49" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).49" Target="10312:[4685..4699).3" />
<Link Source="10312:[4680..4787).5" Target="10354:[3720..3803).49" />
<Link Source="10312:[4680..4787).5" Target="10382:[1707..1928).2" />
<Link Source="10312:[4749..4764).1" Target="10382:[1707..1928).2" />
<Link Source="10312:[4749..4764).1" Target="10312:[4680..4787).5" />
<Link Source="10312:[4826..5058).11" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).11" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).11" Target="10382:[1707..1928).2" />
<Link Source="10312:[4826..5058).12" Target="10382:[1707..1928).2" />
<Link Source="10312:[5087..5101).1" Target="10312:[4749..4764).1" />
<Link Source="10312:[5087..5101).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[1585..1724).9" Target="10353:[7556..7642).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[41889..41914).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).3" Target="10060:[10217..10263).1" />
<Link Source="10319:[43504..43546).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).2" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).3" />
<Link Source="10319:[43504..43546).4" Target="10345:[28319..28911).3" />
<Link Source="10319:[43504..43546).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43562..43590).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[43799..44676).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[43095..43135).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43853..43873).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41088..41107).1" Target="10319:[43799..44676).3" />
<Link Source="10319:[41088..41107).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41138..41158).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4919..5009).6" Target="10319:[41088..41107).1" />
<Link Source="10354:[4919..5009).6" Target="10319:[41138..41158).1" />
<Link Source="10354:[4962..4966).6" Target="10319:[41138..41158).1" />
<Link Source="10354:[4058..4122).8" Target="10354:[4919..5009).6" />
<Link Source="10354:[4058..4122).8" Target="10354:[4962..4966).6" />
<Link Source="10354:[4094..4107).8" Target="10354:[4058..4122).8" />
<Link Source="10354:[4094..4107).8" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).8" Target="10354:[4962..4966).6" />
<Link Source="10319:[41133..41220).1" Target="10354:[4094..4107).8" />
<Link Source="10319:[41133..41220).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41254..41268).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41088..41107).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41254..41268).1" />
<Link Source="10354:[4561..4580).1" Target="10354:[4525..4595).1" />
<Link Source="10354:[4561..4580).1" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).1" Target="10319:[41254..41268).1" />
<Link Source="10319:[41236..41680).1" Target="10354:[4561..4580).1" />
<Link Source="10319:[41236..41680).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[41236..41680).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[43504..43546).4" />
<Link Source="10319:[41634..41646).1" Target="10319:[41302..41665).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[43562..43590).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[44751..44765).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[42089..42141).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).3" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[41849..41874).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[41983..42014).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44751..44765).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[42029..42063).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[51282..51325).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[44692..45392).1" />
<Link Source="10319:[44801..44929).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44785..44930).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84201..84218).1" Target="10319:[44785..44930).2" />
<Link Source="10319:[84201..84218).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84233..84242).1" Target="10319:[44785..44930).3" />
<Link Source="10319:[84233..84242).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84257..84273).1" Target="10319:[44785..44930).5" />
<Link Source="10319:[84257..84273).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84288..84313).1" Target="10319:[44785..44930).6" />
<Link Source="10319:[84288..84313).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84328..84359).1" Target="10319:[44785..44930).7" />
<Link Source="10319:[84328..84359).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84374..84391).1" Target="10319:[44785..44930).8" />
<Link Source="10319:[84374..84391).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84406..84447).1" Target="10319:[44785..44930).9" />
<Link Source="10319:[84406..84447).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84462..84508).1" Target="10319:[44785..44930).10" />
<Link Source="10319:[84462..84508).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[84167..84186).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[84201..84218).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[84233..84242).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[84257..84273).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[84288..84313).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[84328..84359).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[84374..84391).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[84406..84447).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[84462..84508).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[44801..44929).1" />
<Link Source="10319:[84550..84674).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84534..84675).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).2" Target="10319:[84534..84675).2" />
<Link Source="10319:[84907..109876).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).3" Target="10319:[84534..84675).3" />
<Link Source="10319:[84907..109876).3" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).4" Target="10319:[84534..84675).4" />
<Link Source="10319:[84907..109876).4" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).5" Target="10319:[84534..84675).5" />
<Link Source="10319:[84907..109876).5" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).6" Target="10319:[84534..84675).6" />
<Link Source="10319:[84907..109876).6" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).7" Target="10319:[84534..84675).7" />
<Link Source="10319:[84907..109876).7" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).8" Target="10319:[84534..84675).8" />
<Link Source="10319:[84907..109876).8" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).9" Target="10319:[84534..84675).9" />
<Link Source="10319:[84907..109876).9" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84124..109887).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84907..109876).4" />
<Link Source="10319:[85320..85348).2" Target="10319:[85320..85348).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[85366..85400).2" Target="10319:[85366..85400).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85434..85448).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[84907..109876).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[85434..85448).1" />
<Link Source="10354:[4561..4580).2" Target="10354:[4525..4595).2" />
<Link Source="10354:[4561..4580).2" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).2" Target="10319:[85434..85448).1" />
<Link Source="10319:[85420..85449).1" Target="10354:[4561..4580).2" />
<Link Source="10319:[85420..85449).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85467..85484).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85508..85528).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4919..5009).7" Target="10319:[84907..109876).1" />
<Link Source="10354:[4919..5009).7" Target="10319:[85508..85528).1" />
<Link Source="10354:[4962..4966).7" Target="10319:[85508..85528).1" />
<Link Source="10354:[4058..4122).9" Target="10354:[4919..5009).7" />
<Link Source="10354:[4058..4122).9" Target="10354:[4962..4966).7" />
<Link Source="10354:[4094..4107).9" Target="10354:[4058..4122).9" />
<Link Source="10354:[4094..4107).9" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).9" Target="10354:[4962..4966).7" />
<Link Source="10319:[85504..106825).1" Target="10354:[4094..4107).9" />
<Link Source="10319:[85504..106825).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85570..106806).1" Target="10319:[85504..106825).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85420..85449).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[43504..43546).4" />
<Link Source="10319:[85570..106806).2" Target="10319:[85570..106806).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85504..106825).1" />
<Link Source="10319:[103953..103983).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104078..104122).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104078..104122).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).2" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[104148..106735).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).3" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).3" Target="10319:[103953..103983).1" />
<Link Source="10319:[104148..106735).3" Target="EXTERNAL" />
<Link Source="10319:[104148..106735).3" Target="10319:[85570..106806).2" />
<Link Source="10319:[104874..105336).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104874..105336).1" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[104874..105336).2" Target="10319:[104874..105336).1" />
<Link Source="10319:[104874..105336).2" Target="10319:[84907..109876).10" />
<Link Source="10319:[104874..105336).2" Target="10319:[103953..103983).1" />
<Link Source="10319:[104874..105336).2" Target="10319:[104148..106735).2" />
<Link Source="10319:[105368..106708).1" Target="10319:[84907..109876).6" />
<Link Source="10319:[105368..106708).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105601..106708).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[105601..106708).1" Target="EXTERNAL" />
<Link Source="10319:[105601..106708).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[84691..84861).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84691..84861).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[84691..84861).1" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84764..84846).1" Target="10319:[84257..84273).1" />
<Link Source="10319:[84764..84846).1" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84846).2" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84846).4" Target="10319:[106763..106783).1" />
<Link Source="10319:[84764..84846).4" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84846).5" Target="10319:[84288..84313).1" />
<Link Source="10319:[84764..84846).5" Target="10319:[84691..84861).1" />
<Link Source="10319:[84764..84845).1" Target="10319:[84691..84861).1" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84846).1" />
<Link Source="10306:[358886..358901).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84846).2" />
<Link Source="10306:[358903..358930).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84846).4" />
<Link Source="10306:[358932..358945).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84846).5" />
<Link Source="10306:[358947..358972).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358838..360009).1" Target="10319:[84124..109887).1" />
<Link Source="10306:[358838..360009).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).1" Target="10306:[358932..358945).1" />
<Link Source="10306:[358998..359998).1" Target="10319:[103953..103983).1" />
<Link Source="10306:[358998..359998).1" Target="10319:[84764..84845).1" />
<Link Source="10306:[358998..359998).2" Target="10319:[84764..84845).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[84877..84891).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[44948..45377).1" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[45408..45421).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[43095..43135).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11428..11440).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3887..3892).1" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3887..3892).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3932..3952).1" Target="10319:[103953..103983).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3887..3892).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3980).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3966..3980).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[11428..11441).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11455..11538).1" />
<Link Source="10354:[11455..11538).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11455..11538).2" />
<Link Source="10354:[11506..11523).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11506..11523).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3966..3972).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11455..11538).2" />
<Link Source="10319:[45408..45422).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45436..45568).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[45436..45568).1" Target="10354:[11506..11523).2" />
<Link Source="10319:[45436..45568).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45505..45551).1" Target="10319:[20515..20674).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[45436..45568).1" />
<Link Source="10286:[10010..10027).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[9966..10197).1" Target="10319:[41732..45579).1" />
<Link Source="10286:[9966..10197).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10053..10100).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10053..10100).1" Target="10354:[11506..11523).2" />
<Link Source="10286:[10053..10100).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10114..10186).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10114..10186).1" Target="10354:[11506..11523).2" />
<Link Source="10286:[10114..10186).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[10121..10185).1" Target="10319:[45505..45551).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[9966..10197).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[9073..9094).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[9096..9108).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9134..9189).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9203..9282).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10053..10100).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10121..10185).1" />
<Link Source="10286:[9305..9942).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9305..9942).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9298..9943).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[9298..9943).2" Target="EXTERNAL" />
<Link Source="10286:[9298..9943).2" Target="10286:[9305..9942).1" />
<Link Source="10286:[9798..9837).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[10465..10663).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9298..9943).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10607..10651).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10465..10663).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10551..10586).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10607..10651).1" />
<Link Source="10325:[4462..4594).1" Target="10286:[10465..10663).2" />
<Link Source="10325:[4462..4594).1" Target="10286:[10607..10651).1" />
<Link Source="10325:[4556..4582).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4462..4594).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10675..11259).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10465..10663).2" />
<Link Source="10286:[10741..11248).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[11085..11098).1" Target="10286:[10741..11248).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[11085..11098).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10600..10652).1" Target="10325:[4549..4583).1" />
<Link Source="10286:[10600..10652).1" Target="10286:[10607..10651).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[84877..84891).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[45443..45567).1" Target="10319:[20515..20674).1" />
<Link Source="10287:[2306..2328).1" Target="10286:[10600..10652).1" />
<Link Source="10287:[2306..2328).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2330..2343).1" Target="10319:[45436..45568).4" />
<Link Source="10287:[2330..2343).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2377..2471).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2377..2471).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2489..2521).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2489..2521).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).1" Target="10287:[2489..2521).1" />
<Link Source="10287:[2539..2781).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2546..2558).1" Target="10287:[2539..2781).1" />
<Link Source="10287:[2546..2558).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).2" Target="10287:[2306..2328).1" />
<Link Source="10287:[2539..2781).2" Target="10287:[2546..2558).1" />
<Link Source="10287:[2680..2780).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[718..757).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[718..757).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[666..1076).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[666..1076).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[791..833).1" Target="10287:[718..757).1" />
<Link Source="10287:[791..833).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[791..833).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[851..871).1" Target="10287:[718..757).1" />
<Link Source="10287:[851..871).1" Target="10287:[666..1076).1" />
<Link Source="10287:[851..871).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..927).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..919).1" Target="10287:[912..927).1" />
<Link Source="10287:[912..919).1" Target="10287:[666..1076).1" />
<Link Source="10287:[912..919).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..972).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..963).1" Target="10287:[945..972).1" />
<Link Source="10287:[945..963).1" Target="10287:[666..1076).1" />
<Link Source="10287:[945..963).1" Target="10287:[2680..2780).1" />
<Link Source="10319:[15383..15396).1" Target="10319:[13863..13947).1" />
<Link Source="10287:[1609..1643).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1609..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[1609..1643).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[851..871).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[1612..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10319:[15379..15933).1" Target="10287:[1612..1643).1" />
<Link Source="10319:[15379..15933).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15548..15561).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15548..15561).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15783..15809).1" Target="10319:[15544..15884).1" />
<Link Source="10287:[1474..1497).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1474..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[1474..1497).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10319:[15783..15865).1" Target="10287:[1477..1497).1" />
<Link Source="10319:[15783..15865).1" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[14862..16302).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[14931..14954).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[14956..14981).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).6" Target="10319:[15544..15884).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).1" Target="10286:[21504..21529).1" />
<Link Source="10286:[21609..21700).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).2" Target="10286:[21531..21544).1" />
<Link Source="10286:[21609..21700).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).3" Target="10286:[21546..21561).1" />
<Link Source="10286:[21609..21700).3" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).4" Target="10286:[21563..21583).1" />
<Link Source="10286:[21609..21700).4" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21699).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21700).1" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21700).2" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21700).3" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21700).4" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21462..21711).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[22071..22084).1" />
<Link Source="10286:[22156..22600).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22421..22557).1" Target="10286:[22044..22069).1" />
<Link Source="10286:[22421..22557).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).2" Target="10286:[22071..22084).1" />
<Link Source="10286:[22421..22557).2" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).3" Target="10286:[22086..22108).1" />
<Link Source="10286:[22421..22557).3" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).4" Target="10286:[22110..22130).1" />
<Link Source="10286:[22421..22557).4" Target="10286:[22156..22600).1" />
<Link Source="10286:[22493..22522).1" Target="10286:[22156..22600).1" />
<Link Source="10307:[1439..1480).1" Target="10286:[22002..22611).1" />
<Link Source="10307:[1439..1480).1" Target="10286:[22493..22522).1" />
<Link Source="10307:[1445..1478).1" Target="10307:[1439..1480).1" />
<Link Source="10307:[1445..1478).1" Target="10319:[15783..15865).1" />
<Link Source="10307:[1445..1478).1" Target="10286:[22493..22522).1" />
<Link Source="10286:[22421..22557).5" Target="10307:[1445..1478).1" />
<Link Source="10286:[22421..22557).5" Target="10286:[22156..22600).1" />
<Link Source="10286:[22524..22543).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[15519..15926).1" Target="10286:[22002..22611).1" />
<Link Source="10286:[15519..15926).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15568..15597).1" Target="10286:[22524..22543).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15519..15926).1" />
<Link Source="10307:[1439..1480).2" Target="10286:[15568..15597).1" />
<Link Source="10307:[1445..1478).2" Target="10307:[1439..1480).2" />
<Link Source="10307:[1445..1478).2" Target="10319:[15783..15865).1" />
<Link Source="10307:[1445..1478).2" Target="10286:[15568..15597).1" />
<Link Source="10286:[15555..15598).1" Target="10307:[1445..1478).2" />
<Link Source="10286:[15555..15598).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15616..15690).2" Target="10286:[15555..15598).1" />
<Link Source="10286:[15616..15690).2" Target="10319:[15783..15865).1" />
<Link Source="10286:[15616..15690).2" Target="EXTERNAL" />
<Link Source="10286:[15616..15690).2" Target="10286:[22524..22543).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15715..15910).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[15708..15911).1" Target="10286:[15555..15598).1" />
<Link Source="10286:[15708..15911).1" Target="10286:[22524..22543).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[15708..15911).1" />
<Link Source="10286:[22421..22557).7" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22557).9" Target="10286:[22002..22611).1" />
<Link Source="10286:[22421..22557).9" Target="10319:[15783..15865).1" />
<Link Source="10286:[22421..22557).9" Target="10286:[22156..22600).1" />
<Link Source="10286:[22421..22556).1" Target="10286:[22156..22600).1" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22557).1" />
<Link Source="10286:[23056..23081).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22557).2" />
<Link Source="10286:[23096..23109).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22557).3" />
<Link Source="10286:[23124..23146).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22557).4" />
<Link Source="10286:[23161..23181).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22557).5" />
<Link Source="10286:[23196..23220).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22557).7" />
<Link Source="10286:[23235..23266).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22557).9" />
<Link Source="10286:[23281..23301).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23327..23364).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23380..23684).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23380..23684).1" Target="EXTERNAL" />
<Link Source="10286:[23380..23684).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[23893..24026).1" Target="10286:[23327..23364).1" />
<Link Source="10286:[23893..24026).1" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[23096..23109).1" />
<Link Source="10286:[24450..24529).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[23235..23266).1" />
<Link Source="10286:[24450..24529).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[24450..24529).2" />
<Link Source="10286:[24450..24529).3" Target="10286:[23327..23364).1" />
<Link Source="10286:[24450..24529).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[23161..23181).1" />
<Link Source="10286:[24545..24641).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[24655..25349).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[23056..23081).1" />
<Link Source="10286:[25365..25492).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).2" Target="10286:[24450..24529).3" />
<Link Source="10286:[25365..25492).2" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[23124..23146).1" />
<Link Source="10286:[25365..25492).3" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[23196..23220).1" />
<Link Source="10286:[25365..25492).4" Target="10286:[22421..22556).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[23281..23301).1" />
<Link Source="10286:[25365..25492).5" Target="10286:[22421..22556).1" />
<Link Source="10286:[25386..25491).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25365..25492).1" />
<Link Source="10286:[26910..26935).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26937..26950).1" Target="10286:[25365..25492).2" />
<Link Source="10286:[26937..26950).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26952..26974).1" Target="10286:[25365..25492).3" />
<Link Source="10286:[26952..26974).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26976..27000).1" Target="10286:[25365..25492).4" />
<Link Source="10286:[26976..27000).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27002..27022).1" Target="10286:[25365..25492).5" />
<Link Source="10286:[27002..27022).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[26910..26935).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[27048..27088).1" />
<Link Source="10286:[27048..27088).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[26937..26950).1" />
<Link Source="10286:[27104..27192).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[26976..27000).1" />
<Link Source="10286:[27104..27192).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).3" Target="10286:[25386..25491).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).1" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).2" />
<Link Source="10286:[27104..27192).5" Target="10286:[27104..27192).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[24450..24529).3" />
<Link Source="10286:[27104..27192).5" Target="10286:[25386..25491).1" />
<Link Source="10286:[27208..27236).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27250..27722).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27250..27722).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27208..27236).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[27738..27845).1" />
<Link Source="10286:[27738..27845).2" Target="10286:[25386..25491).1" />
<Link Source="10286:[27861..27873).1" Target="10286:[27104..27192).5" />
<Link Source="10286:[27861..27873).1" Target="10286:[25386..25491).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[27861..27873).1" />
<Link Source="10286:[26281..26812).1" Target="10286:[22421..22556).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[24545..24641).1" />
<Link Source="10286:[26450..26769).1" Target="10286:[26281..26812).1" />
<Link Source="10286:[22421..22557).10" Target="10286:[22156..22600).1" />
<Link Source="10286:[21609..21700).5" Target="10319:[15783..15865).6" />
<Link Source="10319:[15904..15918).1" Target="10287:[2546..2558).1" />
<Link Source="10319:[15904..15918).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[13962..14050).1" Target="10319:[15904..15918).1" />
<Link Source="10319:[13962..14050).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13962..14050).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).3" Target="10319:[13685..13708).1" />
<Link Source="10319:[13962..14050).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).4" Target="10319:[13737..13783).1" />
<Link Source="10319:[13962..14050).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13969..14029).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[13962..14050).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51817..51842).1" Target="10319:[13962..14050).2" />
<Link Source="10319:[51817..51842).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51844..51861).1" Target="10319:[13962..14050).3" />
<Link Source="10319:[51844..51861).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51863..51909).1" Target="10319:[13962..14050).4" />
<Link Source="10319:[51863..51909).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51939..51953).1" Target="10319:[13969..14029).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51762..51815).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).1" Target="10287:[1680..1716).1" />
<Link Source="10287:[1683..1690).1" Target="10287:[912..919).1" />
<Link Source="10287:[1683..1690).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).1" Target="10287:[1683..1690).1" />
<Link Source="10287:[1683..1716).1" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).1" Target="10287:[1683..1716).1" />
<Link Source="10319:[51935..52244).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[51762..51815).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[13969..14049).1" Target="25002:[4395..4432).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[52260..52274).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[13969..14049).1" />
<Link Source="10287:[1477..1497).2" Target="10287:[1474..1497).2" />
<Link Source="10287:[1477..1497).2" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).2" Target="10319:[13969..14049).1" />
<Link Source="25002:[4395..4432).28" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).28" Target="10287:[1477..1497).2" />
<Link Source="25002:[4395..4432).28" Target="10286:[27104..27192).5" />
<Link Source="25002:[4395..4432).28" Target="10287:[2539..2781).2" />
<Link Source="25002:[4395..4432).28" Target="28001:[46830..47156).2" />
<Link Source="10076:[5223..5250).6" Target="25002:[4395..4432).28" />
<Link Source="10076:[5223..5250).6" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).6" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).6" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).6" Target="25002:[4395..4432).28" />
<Link Source="10076:[5277..5448).6" Target="10076:[4989..5047).1" />
<Link Source="10077:[31258..31297).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[31258..31297).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[44231..44317).17" Target="25002:[4395..4432).28" />
<Link Source="10077:[44231..44317).17" Target="10077:[32567..32606).1" />
<Link Source="10077:[44954..44972).2" Target="25002:[4395..4432).28" />
<Link Source="10077:[44966..44971).34" Target="10077:[44954..44972).2" />
<Link Source="10077:[44966..44971).34" Target="25002:[4395..4432).28" />
<Link Source="10077:[39421..39431).2" Target="25002:[4395..4432).28" />
<Link Source="10077:[1641..1732).2" Target="25002:[4395..4432).28" />
<Link Source="10077:[1641..1732).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[1685..1713).2" Target="10077:[1641..1732).2" />
<Link Source="10077:[1685..1713).2" Target="25002:[4395..4432).28" />
<Link Source="10077:[1685..1713).2" Target="10077:[39421..39431).2" />
<Link Source="10077:[39398..39590).7" Target="10077:[1685..1713).2" />
<Link Source="10077:[39398..39590).7" Target="25002:[4395..4432).28" />
<Link Source="10077:[39398..39590).8" Target="25002:[4395..4432).28" />
<Link Source="10077:[44231..44317).25" Target="25002:[4395..4432).28" />
<Link Source="10286:[1317..1350).9" Target="25002:[4395..4432).28" />
<Link Source="10376:[691..701).2" Target="25002:[4395..4432).28" />
<Link Source="10376:[928..968).5" Target="25002:[4395..4432).28" />
<Link Source="10286:[1688..1781).7" Target="25002:[4395..4432).28" />
<Link Source="10286:[1688..1781).7" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).17" Target="10286:[1688..1781).7" />
<Link Source="10298:[471..492).17" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).7" Target="25002:[4395..4432).28" />
<Link Source="10286:[1820..1963).7" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).18" Target="10286:[1820..1963).7" />
<Link Source="10298:[471..492).18" Target="10286:[1840..1888).1" />
<Link Source="10319:[15146..15291).15" Target="10319:[15146..15291).5" />
<Link Source="10319:[15146..15291).15" Target="10319:[15031..15070).1" />
<Link Source="10319:[15146..15291).15" Target="10319:[13863..13947).1" />
<Link Source="10319:[20095..20126).2" Target="10319:[15146..15291).15" />
<Link Source="10319:[20095..20126).2" Target="10319:[15159..15290).1" />
<Link Source="10319:[20508..20675).12" Target="10319:[20095..20126).2" />
<Link Source="10319:[20508..20675).12" Target="25002:[4395..4432).28" />
<Link Source="10319:[41983..42014).2" Target="10319:[20508..20675).12" />
<Link Source="10319:[41983..42014).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[42478..42805).4" Target="25002:[4395..4432).28" />
<Link Source="10319:[42821..42938).9" Target="25002:[4395..4432).28" />
<Link Source="10319:[42839..42937).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[63849..63870).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63849..63870).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63885..63919).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63885..63919).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63934..63945).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63934..63945).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63960..63969).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63960..63969).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63984..64009).2" Target="10319:[42821..42938).9" />
<Link Source="10319:[63984..64009).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[63768..64484).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[63768..64484).2" Target="10319:[42839..42937).2" />
<Link Source="10319:[64035..64445).5" Target="10319:[42839..42937).2" />
<Link Source="10319:[64035..64445).6" Target="10319:[63885..63919).2" />
<Link Source="10319:[64035..64445).6" Target="10319:[64035..64445).5" />
<Link Source="10319:[64035..64445).6" Target="10319:[42839..42937).2" />
<Link Source="10319:[64461..64473).3" Target="10319:[42839..42937).2" />
<Link Source="10319:[42821..42938).15" Target="10319:[64461..64473).3" />
<Link Source="10319:[42821..42938).15" Target="25002:[4395..4432).28" />
<Link Source="10319:[42952..43079).4" Target="25002:[4395..4432).28" />
<Link Source="10319:[42952..43079).5" Target="10319:[42821..42938).15" />
<Link Source="10319:[42952..43079).5" Target="10319:[42952..43079).4" />
<Link Source="10319:[42952..43079).5" Target="25002:[4395..4432).28" />
<Link Source="10354:[11312..11328).2" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).8" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).8" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).53" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).53" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).53" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).53" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).54" Target="10354:[11312..11328).2" />
<Link Source="10354:[3720..3803).55" Target="10354:[3684..3818).8" />
<Link Source="10354:[3720..3803).55" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).55" Target="10354:[3720..3803).54" />
<Link Source="10354:[3720..3803).55" Target="10354:[11312..11328).2" />
<Link Source="10354:[11299..11330).4" Target="10354:[3720..3803).53" />
<Link Source="10354:[11299..11330).4" Target="25002:[4395..4432).28" />
<Link Source="10319:[50330..50355).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[1108..1117).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[1222..1235).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5830..5839).2" Target="10312:[1108..1117).2" />
<Link Source="10312:[5830..5839).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5944..5957).2" Target="10312:[1222..1235).2" />
<Link Source="10312:[5944..5957).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[3730..3739).2" Target="10312:[5830..5839).2" />
<Link Source="10312:[3730..3739).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[3805..3818).2" Target="10312:[5944..5957).2" />
<Link Source="10312:[3805..3818).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[3905..3919).2" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).9" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).9" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).61" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).61" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).61" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).61" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).62" Target="10312:[3905..3919).2" />
<Link Source="10354:[3720..3803).63" Target="10354:[3684..3818).9" />
<Link Source="10354:[3720..3803).63" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).63" Target="10354:[3720..3803).62" />
<Link Source="10354:[3720..3803).63" Target="10312:[3905..3919).2" />
<Link Source="10312:[3892..3921).4" Target="10354:[3720..3803).61" />
<Link Source="10312:[3892..3921).4" Target="25002:[4395..4432).28" />
<Link Source="10312:[3935..3968).5" Target="10312:[5830..5839).2" />
<Link Source="10312:[3935..3968).5" Target="25002:[4395..4432).28" />
<Link Source="10312:[3948..3966).2" Target="25002:[4395..4432).28" />
<Link Source="10353:[4698..4724).3" Target="10312:[3935..3968).5" />
<Link Source="10353:[4698..4724).3" Target="10312:[3948..3966).2" />
<Link Source="10353:[4750..4847).5" Target="10353:[4698..4724).3" />
<Link Source="10353:[4750..4847).5" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).5" Target="10312:[3948..3966).2" />
<Link Source="10353:[4863..5000).9" Target="10353:[4698..4724).3" />
<Link Source="10353:[4863..5000).9" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).9" Target="10312:[3948..3966).2" />
<Link Source="10353:[4863..5000).10" Target="10312:[3948..3966).2" />
<Link Source="10353:[5079..5183).5" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).5" Target="10312:[3948..3966).2" />
<Link Source="10353:[5197..5323).7" Target="10353:[4698..4724).3" />
<Link Source="10353:[5197..5323).7" Target="10353:[5079..5183).5" />
<Link Source="10353:[5197..5323).7" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).13" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).13" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).14" Target="10353:[4698..4724).3" />
<Link Source="10353:[5485..5759).14" Target="10353:[5485..5759).13" />
<Link Source="10353:[5485..5759).14" Target="10312:[3948..3966).2" />
<Link Source="10353:[5485..5759).15" Target="10312:[3948..3966).2" />
<Link Source="10353:[5775..5979).9" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).9" Target="10312:[3948..3966).2" />
<Link Source="10353:[5775..5979).11" Target="10353:[4698..4724).3" />
<Link Source="10353:[5775..5979).11" Target="10353:[5775..5979).9" />
<Link Source="10353:[5775..5979).11" Target="10312:[3948..3966).2" />
<Link Source="10353:[5995..6029).7" Target="10353:[5775..5979).11" />
<Link Source="10353:[5995..6029).7" Target="10312:[3948..3966).2" />
<Link Source="10353:[6002..6028).3" Target="10312:[3948..3966).2" />
<Link Source="10353:[6343..6358).3" Target="10353:[5995..6029).7" />
<Link Source="10353:[6343..6358).3" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).13" Target="10353:[6002..6028).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6343..6358).3" />
<Link Source="10353:[6384..6410).14" Target="10353:[6384..6410).13" />
<Link Source="10353:[6384..6410).14" Target="10353:[6002..6028).3" />
<Link Source="10312:[5188..5207).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5209..5220).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5222..5231).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[5222..5231).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5233..5272).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[5233..5272).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5274..5295).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[5274..5295).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5297..5318).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5320..5333).2" Target="10312:[3805..3818).2" />
<Link Source="10312:[5320..5333).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[5124..5404).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[4685..4699).4" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).10" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).10" Target="10312:[4685..4699).4" />
<Link Source="10354:[3720..3803).69" Target="10354:[3684..3818).10" />
<Link Source="10354:[3720..3803).69" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).69" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).69" Target="10312:[4685..4699).4" />
<Link Source="10354:[3720..3803).70" Target="10312:[4685..4699).4" />
<Link Source="10354:[3720..3803).71" Target="10354:[3684..3818).10" />
<Link Source="10354:[3720..3803).71" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).71" Target="10354:[3720..3803).70" />
<Link Source="10354:[3720..3803).71" Target="10312:[4685..4699).4" />
<Link Source="10312:[4680..4787).7" Target="10354:[3720..3803).69" />
<Link Source="10312:[4680..4787).7" Target="25002:[4395..4432).28" />
<Link Source="10312:[4826..5058).16" Target="10312:[5830..5839).2" />
<Link Source="10312:[4826..5058).16" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).16" Target="25002:[4395..4432).28" />
<Link Source="10312:[4826..5058).17" Target="25002:[4395..4432).28" />
<Link Source="10382:[1340..1359).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1374..1383).2" Target="10312:[3730..3739).2" />
<Link Source="10382:[1374..1383).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1385..1424).2" Target="10312:[3730..3739).2" />
<Link Source="10382:[1385..1424).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1426..1447).2" Target="10312:[3730..3739).2" />
<Link Source="10382:[1426..1447).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1449..1470).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1472..1485).2" Target="10312:[3805..3818).2" />
<Link Source="10382:[1472..1485).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[1572..1586).2" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).11" Target="10382:[1340..1359).2" />
<Link Source="10354:[3684..3818).11" Target="10382:[1572..1586).2" />
<Link Source="10354:[3720..3803).77" Target="10354:[3684..3818).11" />
<Link Source="10354:[3720..3803).77" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).77" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).77" Target="10382:[1572..1586).2" />
<Link Source="10354:[3720..3803).78" Target="10382:[1572..1586).2" />
<Link Source="10354:[3720..3803).79" Target="10354:[3684..3818).11" />
<Link Source="10354:[3720..3803).79" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).79" Target="10354:[3720..3803).78" />
<Link Source="10354:[3720..3803).79" Target="10382:[1572..1586).2" />
<Link Source="10382:[1559..1588).4" Target="10354:[3720..3803).77" />
<Link Source="10382:[1559..1588).4" Target="25002:[4395..4432).28" />
<Link Source="10382:[1619..1629).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[913..1046).2" Target="25002:[4395..4432).28" />
<Link Source="10382:[913..1046).2" Target="10382:[1619..1629).2" />
<Link Source="10382:[949..1031).3" Target="EXTERNAL" />
<Link Source="10382:[949..1031).3" Target="10382:[1619..1629).2" />
<Link Source="10382:[1604..1691).6" Target="10382:[949..1031).3" />
<Link Source="10382:[1604..1691).6" Target="25002:[4395..4432).28" />
<Link Source="10382:[1604..1691).7" Target="10382:[1426..1447).2" />
<Link Source="10382:[1604..1691).7" Target="10382:[1604..1691).6" />
<Link Source="10382:[1604..1691).7" Target="25002:[4395..4432).28" />
<Link Source="10382:[1604..1691).8" Target="25002:[4395..4432).28" />
<Link Source="10376:[1739..1899).4" Target="25002:[4395..4432).28" />
<Link Source="10346:[10663..10672).2" Target="10312:[3730..3739).2" />
<Link Source="10346:[10663..10672).2" Target="25002:[4395..4432).28" />
<Link Source="10346:[10761..10774).2" Target="10312:[3805..3818).2" />
<Link Source="10346:[10761..10774).2" Target="25002:[4395..4432).28" />
<Link Source="10346:[10861..10875).2" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).13" Target="25002:[4395..4432).28" />
<Link Source="10354:[3684..3818).13" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).93" Target="10354:[3684..3818).13" />
<Link Source="10354:[3720..3803).93" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).93" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).93" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).94" Target="10346:[10861..10875).2" />
<Link Source="10354:[3720..3803).95" Target="10354:[3684..3818).13" />
<Link Source="10354:[3720..3803).95" Target="25002:[4395..4432).28" />
<Link Source="10354:[3720..3803).95" Target="10354:[3720..3803).94" />
<Link Source="10354:[3720..3803).95" Target="10346:[10861..10875).2" />
<Link Source="10346:[10848..10877).4" Target="10354:[3720..3803).93" />
<Link Source="10346:[10848..10877).4" Target="25002:[4395..4432).28" />
<Link Source="10346:[10897..10914).2" Target="25002:[4395..4432).28" />
<Link Source="10346:[7666..7775).2" Target="25002:[4395..4432).28" />
<Link Source="10346:[7666..7775).2" Target="10346:[10897..10914).2" />
<Link Source="10346:[7672..7773).4" Target="10346:[7666..7775).2" />
<Link Source="10346:[7672..7773).4" Target="25002:[4395..4432).28" />
<Link Source="10346:[7672..7773).4" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).4" Target="10346:[10897..10914).2" />
<Link Source="10346:[10893..11127).3" Target="10346:[7672..7773).4" />
<Link Source="10346:[10893..11127).3" Target="25002:[4395..4432).28" />
<Link Source="10346:[3525..3638).10" Target="25002:[4395..4432).28" />
<Link Source="10345:[2938..2962).2" Target="10312:[3730..3739).2" />
<Link Source="10345:[2938..2962).2" Target="25002:[4395..4432).28" />
<Link Source="10345:[2977..3016).2" Target="10312:[3730..3739).2" />
<Link Source="10345:[2977..3016).2" Target="25002:[4395..4432).28" />
<Link Source="10345:[3069..3118).2" Target="25002:[4395..4432).28" />
<Link Source="10345:[3102..3117).8" Target="10345:[3069..3118).2" />
<Link Source="10345:[3102..3117).8" Target="25002:[4395..4432).28" />
<Link Source="10345:[3132..3193).2" Target="25002:[4395..4432).28" />
<Link Source="10345:[3171..3192).8" Target="10345:[3132..3193).2" />
<Link Source="10345:[3171..3192).8" Target="25002:[4395..4432).28" />
<Link Source="10346:[11369..11508).18" Target="10346:[10761..10774).2" />
<Link Source="10346:[11369..11508).18" Target="10312:[3730..3739).2" />
<Link Source="10312:[7718..7727).2" Target="10346:[10663..10672).2" />
<Link Source="10312:[7718..7727).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[7729..7768).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[7816..7829).2" Target="10346:[11369..11508).18" />
<Link Source="10312:[7816..7829).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[7615..8420).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[7615..8420).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[7903..7936).5" Target="10312:[3730..3739).2" />
<Link Source="10312:[7916..7934).2" Target="10312:[3730..3739).2" />
<Link Source="10353:[4698..4724).4" Target="10312:[7903..7936).5" />
<Link Source="10353:[4698..4724).4" Target="10312:[7916..7934).2" />
<Link Source="10353:[4750..4847).7" Target="10353:[4698..4724).4" />
<Link Source="10353:[4750..4847).7" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).13" Target="10353:[4698..4724).4" />
<Link Source="10353:[4863..5000).13" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).13" Target="10312:[7916..7934).2" />
<Link Source="10353:[4863..5000).14" Target="10312:[7916..7934).2" />
<Link Source="10353:[5079..5183).7" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).7" Target="10312:[7916..7934).2" />
<Link Source="10353:[5197..5323).10" Target="10353:[4698..4724).4" />
<Link Source="10353:[5197..5323).10" Target="10353:[5079..5183).7" />
<Link Source="10353:[5197..5323).10" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).19" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).19" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).20" Target="10353:[4698..4724).4" />
<Link Source="10353:[5485..5759).20" Target="10353:[5485..5759).19" />
<Link Source="10353:[5485..5759).20" Target="10312:[7916..7934).2" />
<Link Source="10353:[5485..5759).21" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).13" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).13" Target="10312:[7916..7934).2" />
<Link Source="10353:[5775..5979).15" Target="10353:[4698..4724).4" />
<Link Source="10353:[5775..5979).15" Target="10353:[5775..5979).13" />
<Link Source="10353:[5775..5979).15" Target="10312:[7916..7934).2" />
<Link Source="10353:[5995..6029).10" Target="10353:[5775..5979).15" />
<Link Source="10353:[5995..6029).10" Target="10312:[7916..7934).2" />
<Link Source="10353:[6002..6028).4" Target="10312:[7916..7934).2" />
<Link Source="10353:[6343..6358).4" Target="10353:[5995..6029).10" />
<Link Source="10353:[6343..6358).4" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).19" Target="10353:[6002..6028).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6343..6358).4" />
<Link Source="10353:[6384..6410).20" Target="10353:[6384..6410).19" />
<Link Source="10353:[6384..6410).20" Target="10353:[6002..6028).4" />
<Link Source="10312:[7952..7977).5" Target="10312:[3730..3739).2" />
<Link Source="10312:[7952..7977).6" Target="10312:[7718..7727).2" />
<Link Source="10312:[7952..7977).6" Target="10312:[7952..7977).5" />
<Link Source="10312:[7952..7977).6" Target="10312:[3730..3739).2" />
<Link Source="10312:[19030..19039).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[19030..19039).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[19087..19100).2" Target="10312:[7816..7829).2" />
<Link Source="10312:[19087..19100).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[61608..61629).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[61608..61629).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63439..63448).2" Target="10312:[19030..19039).2" />
<Link Source="10312:[63439..63448).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63473..63501).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63503..63516).2" Target="10312:[19087..19100).2" />
<Link Source="10312:[63503..63516).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63566..63612).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63638..63668).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[63682..63706).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[64353..69285).10" Target="10312:[63503..63516).2" />
<Link Source="10312:[64353..69285).10" Target="10312:[7718..7727).2" />
<Link Source="10312:[64353..69285).12" Target="10312:[63682..63706).2" />
<Link Source="10312:[64353..69285).12" Target="10312:[7718..7727).2" />
<Link Source="10312:[80978..80991).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[80993..81002).2" Target="10312:[63439..63448).2" />
<Link Source="10312:[80993..81002).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[81004..81017).2" Target="10312:[64353..69285).10" />
<Link Source="10312:[81004..81017).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[81019..81040).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[81042..81069).2" Target="10312:[64353..69285).12" />
<Link Source="10312:[81042..81069).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[81095..84034).2" Target="10312:[80978..80991).2" />
<Link Source="10312:[81095..84034).2" Target="10312:[3730..3739).2" />
<Link Source="10312:[81095..84034).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[81196..82523).8" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).9" Target="10312:[80993..81002).2" />
<Link Source="10312:[81196..82523).9" Target="10312:[81196..82523).8" />
<Link Source="10312:[81196..82523).9" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).10" Target="10312:[81019..81040).2" />
<Link Source="10312:[81196..82523).10" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).10" Target="10312:[81095..84034).2" />
<Link Source="10312:[81196..82523).13" Target="10312:[81196..82523).9" />
<Link Source="10312:[81196..82523).13" Target="10312:[81196..82523).10" />
<Link Source="10312:[81196..82523).13" Target="10312:[81095..84034).2" />
<Link Source="10312:[81319..81371).2" Target="10312:[80978..80991).2" />
<Link Source="10312:[81319..81371).2" Target="10312:[81196..82523).13" />
<Link Source="10312:[81495..81570).6" Target="10312:[81319..81371).2" />
<Link Source="10312:[81495..81570).6" Target="10312:[3730..3739).2" />
<Link Source="10312:[81495..81570).6" Target="10312:[7718..7727).2" />
<Link Source="10312:[81495..81570).6" Target="10312:[81196..82523).13" />
<Link Source="10312:[81495..81570).7" Target="10312:[81319..81371).2" />
<Link Source="10312:[81495..81570).7" Target="10312:[81196..82523).13" />
<Link Source="10312:[81596..82500).7" Target="10312:[81319..81371).2" />
<Link Source="10312:[81596..82500).7" Target="10312:[3730..3739).2" />
<Link Source="10312:[81596..82500).7" Target="10312:[7718..7727).2" />
<Link Source="10312:[81596..82500).7" Target="10312:[80993..81002).2" />
<Link Source="10312:[81596..82500).7" Target="10312:[81196..82523).13" />
<Link Source="10312:[81596..82500).8" Target="10312:[81019..81040).2" />
<Link Source="10312:[81596..82500).8" Target="10312:[81196..82523).13" />
<Link Source="10312:[81628..81659).2" Target="10312:[81196..82523).13" />
<Link Source="10353:[7504..7530).4" Target="10312:[81596..82500).8" />
<Link Source="10353:[7504..7530).4" Target="10312:[81628..81659).2" />
<Link Source="10312:[81596..82500).11" Target="10312:[81596..82500).7" />
<Link Source="10312:[81596..82500).11" Target="10353:[7504..7530).4" />
<Link Source="10312:[81596..82500).11" Target="10312:[81196..82523).13" />
<Link Source="10312:[84050..84066).3" Target="10312:[7718..7727).2" />
<Link Source="10312:[66177..69285).16" Target="10312:[63473..63501).2" />
<Link Source="10312:[66177..69285).16" Target="10312:[7718..7727).2" />
<Link Source="10312:[66291..66342).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[75301..75322).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[75301..75322).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75324..75352).2" Target="10312:[66177..69285).16" />
<Link Source="10312:[75324..75352).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).6" Target="10312:[75301..75322).2" />
<Link Source="10312:[75735..75866).6" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).6" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).7" Target="10312:[66291..66342).2" />
<Link Source="10312:[75742..75804).2" Target="10312:[75735..75866).6" />
<Link Source="10312:[75742..75804).2" Target="10312:[66291..66342).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75324..75352).2" />
<Link Source="10312:[75735..75866).9" Target="10312:[75742..75804).2" />
<Link Source="10312:[66177..69285).19" Target="10312:[63638..63668).2" />
<Link Source="10312:[66177..69285).19" Target="10312:[7718..7727).2" />
<Link Source="10312:[66177..69285).21" Target="10312:[63566..63612).2" />
<Link Source="10312:[66177..69285).21" Target="10312:[7718..7727).2" />
<Link Source="10312:[77543..77571).2" Target="10312:[75735..75866).9" />
<Link Source="10312:[77543..77571).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[77573..77604).2" Target="10312:[66177..69285).19" />
<Link Source="10312:[77573..77604).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[77654..77700).2" Target="10312:[66177..69285).21" />
<Link Source="10312:[77654..77700).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[77501..78044).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[77726..77892).5" Target="10312:[77501..78044).2" />
<Link Source="10312:[77726..77892).5" Target="10312:[7718..7727).2" />
<Link Source="10312:[77726..77892).6" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).6" Target="10312:[7718..7727).2" />
<Link Source="10312:[77730..77782).2" Target="10312:[7718..7727).2" />
<Link Source="10298:[471..492).22" Target="10312:[77726..77892).5" />
<Link Source="10298:[471..492).22" Target="10312:[77730..77782).2" />
<Link Source="10298:[494..511).22" Target="10312:[77726..77892).6" />
<Link Source="10298:[494..511).22" Target="10312:[77730..77782).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[77543..77571).2" />
<Link Source="10312:[78402..78430).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[78432..78463).2" Target="10312:[77573..77604).2" />
<Link Source="10312:[78432..78463).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[78513..78552).2" Target="10312:[77654..77700).2" />
<Link Source="10312:[78513..78552).2" Target="10312:[7718..7727).2" />
<Link Source="10312:[78346..78783).2" Target="10312:[77501..78044).2" />
<Link Source="10312:[78346..78783).2" Target="10312:[7718..7727).2" />
<Link Source="10376:[1085..1113).2" Target="10312:[78402..78430).2" />
<Link Source="10376:[1085..1113).2" Target="10312:[7718..7727).2" />
<Link Source="10376:[1115..1146).2" Target="10312:[78432..78463).2" />
<Link Source="10376:[1115..1146).2" Target="10312:[7718..7727).2" />
<Link Source="10376:[1196..1235).2" Target="10312:[78513..78552).2" />
<Link Source="10376:[1196..1235).2" Target="10312:[7718..7727).2" />
<Link Source="10376:[1028..1425).2" Target="10312:[78346..78783).2" />
<Link Source="10376:[1028..1425).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30098..30120).2" Target="10376:[1028..1425).2" />
<Link Source="10286:[30098..30120).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30135..30160).2" Target="10376:[1085..1113).2" />
<Link Source="10286:[30135..30160).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30175..30206).2" Target="10376:[1115..1146).2" />
<Link Source="10286:[30175..30206).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30283..30330).2" Target="10376:[1196..1235).2" />
<Link Source="10286:[30283..30330).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30012..30691).2" Target="10376:[1028..1425).2" />
<Link Source="10286:[30012..30691).2" Target="10312:[7718..7727).2" />
<Link Source="10286:[30356..30522).5" Target="10286:[30012..30691).2" />
<Link Source="10286:[30356..30522).5" Target="10312:[7718..7727).2" />
<Link Source="10286:[30356..30522).6" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).6" Target="10312:[7718..7727).2" />
<Link Source="10286:[30360..30412).2" Target="10312:[7718..7727).2" />
<Link Source="10298:[471..492).23" Target="10286:[30356..30522).5" />
<Link Source="10298:[471..492).23" Target="10286:[30360..30412).2" />
<Link Source="10298:[494..511).23" Target="10286:[30356..30522).6" />
<Link Source="10298:[494..511).23" Target="10286:[30360..30412).2" />
<Link Source="10060:[2136..2158).2" Target="10286:[30098..30120).2" />
<Link Source="10060:[2136..2158).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[2173..2198).2" Target="10286:[30135..30160).2" />
<Link Source="10060:[2173..2198).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[2213..2244).2" Target="10286:[30175..30206).2" />
<Link Source="10060:[2213..2244).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[2320..2366).2" Target="10286:[30283..30330).2" />
<Link Source="10060:[2320..2366).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5621..5634).2" Target="10060:[2136..2158).2" />
<Link Source="10060:[5621..5634).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5691..5716).2" Target="10060:[2173..2198).2" />
<Link Source="10060:[5691..5716).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5731..5762).2" Target="10060:[2213..2244).2" />
<Link Source="10060:[5731..5762).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5777..5806).2" Target="10060:[2136..2158).2" />
<Link Source="10060:[5777..5806).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5882..5928).2" Target="10060:[2320..2366).2" />
<Link Source="10060:[5882..5928).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[5954..5991).5" Target="10312:[7718..7727).2" />
<Link Source="10060:[6005..6042).5" Target="10312:[7718..7727).2" />
<Link Source="10060:[6005..6042).6" Target="10060:[5621..5634).2" />
<Link Source="10060:[6005..6042).6" Target="10060:[6005..6042).5" />
<Link Source="10060:[6005..6042).6" Target="10312:[7718..7727).2" />
<Link Source="10060:[6056..6090).3" Target="10060:[5621..5634).2" />
<Link Source="10060:[6056..6090).3" Target="10312:[7718..7727).2" />
<Link Source="10060:[6104..6172).4" Target="10060:[5621..5634).2" />
<Link Source="10060:[6104..6172).4" Target="10312:[7718..7727).2" />
<Link Source="10060:[6188..6219).3" Target="10312:[7718..7727).2" />
<Link Source="10060:[10202..10215).2" Target="10060:[5621..5634).2" />
<Link Source="10060:[10202..10215).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[10265..10311).2" Target="10060:[5882..5928).2" />
<Link Source="10060:[10265..10311).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[10337..10405).4" Target="10060:[10202..10215).2" />
<Link Source="10060:[10337..10405).4" Target="10312:[7718..7727).2" />
<Link Source="10060:[10419..10454).5" Target="10312:[7718..7727).2" />
<Link Source="10060:[10470..10516).2" Target="10060:[10202..10215).2" />
<Link Source="10060:[10470..10516).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[10532..10544).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[10558..11295).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[10558..11295).2" Target="10312:[3730..3739).2" />
<Link Source="10060:[11990..12013).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[12078..12091).2" Target="10060:[10202..10215).2" />
<Link Source="10060:[12078..12091).2" Target="10312:[7718..7727).2" />
<Link Source="10060:[12117..12185).4" Target="10060:[12078..12091).2" />
<Link Source="10060:[12117..12185).4" Target="10312:[7718..7727).2" />
<Link Source="10060:[12199..12238).5" Target="10312:[7718..7727).2" />
<Link Source="10060:[12199..12238).6" Target="10060:[11990..12013).2" />
<Link Source="10060:[12199..12238).6" Target="10060:[12199..12238).5" />
<Link Source="10060:[12199..12238).6" Target="10312:[7718..7727).2" />
<Link Source="10346:[11710..11746).2" Target="10312:[19030..19039).2" />
<Link Source="10286:[2155..2260).2" Target="25002:[4395..4432).28" />
<Link Source="10286:[2155..2260).2" Target="10346:[11710..11746).2" />
<Link Source="10286:[2191..2245).5" Target="10286:[2155..2260).2" />
<Link Source="10286:[2191..2245).5" Target="10312:[19030..19039).2" />
<Link Source="10286:[2191..2245).5" Target="10346:[11710..11746).2" />
<Link Source="10286:[2191..2245).6" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).6" Target="10346:[11710..11746).2" />
<Link Source="10286:[2198..2244).2" Target="10346:[11710..11746).2" />
<Link Source="10298:[471..492).25" Target="10286:[2191..2245).5" />
<Link Source="10298:[471..492).25" Target="10286:[2198..2244).2" />
<Link Source="10298:[494..511).25" Target="10286:[2191..2245).6" />
<Link Source="10298:[494..511).25" Target="10286:[2198..2244).2" />
<Link Source="10345:[28225..28251).2" Target="10298:[471..492).25" />
<Link Source="10345:[28225..28251).2" Target="10312:[19030..19039).2" />
<Link Source="10345:[28927..28940).3" Target="10312:[19030..19039).2" />
<Link Source="10346:[12205..12212).2" Target="10312:[19030..19039).2" />
<Link Source="10354:[3720..3803).101" Target="10354:[3684..3818).10" />
<Link Source="10354:[3720..3803).101" Target="10312:[19030..19039).2" />
<Link Source="10354:[3720..3803).101" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).101" Target="10312:[4685..4699).4" />
<Link Source="10312:[4680..4787).11" Target="10354:[3720..3803).101" />
<Link Source="10312:[4680..4787).11" Target="25002:[4395..4432).28" />
<Link Source="10312:[4749..4764).2" Target="25002:[4395..4432).28" />
<Link Source="10312:[4749..4764).2" Target="10312:[4680..4787).11" />
<Link Source="10312:[5087..5101).2" Target="10312:[4749..4764).2" />
<Link Source="10312:[5087..5101).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[43799..44676).7" Target="25002:[4395..4432).28" />
<Link Source="10319:[43853..43873).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[41088..41107).2" Target="10319:[43799..44676).7" />
<Link Source="10319:[41088..41107).2" Target="10319:[43853..43873).2" />
<Link Source="10319:[41138..41158).2" Target="10319:[43853..43873).2" />
<Link Source="10354:[4919..5009).13" Target="10319:[41088..41107).2" />
<Link Source="10354:[4919..5009).13" Target="10319:[41138..41158).2" />
<Link Source="10354:[4094..4107).17" Target="10354:[4919..5009).13" />
<Link Source="10354:[4094..4107).17" Target="10312:[19030..19039).2" />
<Link Source="10354:[4094..4107).17" Target="10319:[41138..41158).2" />
<Link Source="10319:[41133..41220).3" Target="10354:[4094..4107).17" />
<Link Source="10319:[41133..41220).3" Target="10319:[43853..43873).2" />
<Link Source="10319:[41254..41268).2" Target="10319:[43853..43873).2" />
<Link Source="10354:[4525..4595).3" Target="10319:[41088..41107).2" />
<Link Source="10354:[4525..4595).3" Target="10319:[41254..41268).2" />
<Link Source="10354:[4561..4580).3" Target="10354:[4525..4595).3" />
<Link Source="10354:[4561..4580).3" Target="10312:[19030..19039).2" />
<Link Source="10354:[4561..4580).3" Target="10319:[41254..41268).2" />
<Link Source="10319:[41236..41680).5" Target="10354:[4561..4580).3" />
<Link Source="10319:[41236..41680).5" Target="10319:[43853..43873).2" />
<Link Source="10319:[41302..41665).2" Target="10319:[41236..41680).5" />
<Link Source="10319:[41302..41665).2" Target="10312:[19030..19039).2" />
<Link Source="10319:[41634..41646).3" Target="10319:[41302..41665).2" />
<Link Source="10319:[44751..44765).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84201..84218).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84233..84242).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84257..84273).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84288..84313).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84328..84359).2" Target="10319:[41983..42014).2" />
<Link Source="10319:[84328..84359).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84374..84391).2" Target="10319:[44751..44765).2" />
<Link Source="10319:[84374..84391).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84406..84447).2" Target="10319:[44751..44765).2" />
<Link Source="10319:[84406..84447).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84462..84508).2" Target="10319:[44751..44765).2" />
<Link Source="10319:[84462..84508).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[84124..109887).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[85320..85348).5" Target="25002:[4395..4432).28" />
<Link Source="10319:[85320..85348).6" Target="10319:[84257..84273).2" />
<Link Source="10319:[85320..85348).6" Target="10319:[85320..85348).5" />
<Link Source="10319:[85320..85348).6" Target="25002:[4395..4432).28" />
<Link Source="10319:[85366..85400).5" Target="25002:[4395..4432).28" />
<Link Source="10319:[85366..85400).6" Target="10319:[84288..84313).2" />
<Link Source="10319:[85366..85400).6" Target="10319:[85366..85400).5" />
<Link Source="10319:[85366..85400).6" Target="25002:[4395..4432).28" />
<Link Source="10319:[85467..85484).3" Target="25002:[4395..4432).28" />
<Link Source="10319:[104078..104122).2" Target="10312:[19030..19039).2" />
<Link Source="10319:[104148..106735).7" Target="10312:[19030..19039).2" />
<Link Source="10319:[104148..106735).8" Target="10319:[104078..104122).2" />
<Link Source="10319:[104148..106735).8" Target="10319:[104148..106735).7" />
<Link Source="10319:[104148..106735).8" Target="10312:[19030..19039).2" />
<Link Source="10319:[104148..106735).9" Target="10319:[104078..104122).2" />
<Link Source="10319:[104148..106735).9" Target="10312:[19030..19039).2" />
<Link Source="10319:[104148..106735).9" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).4" Target="10312:[19030..19039).2" />
<Link Source="10319:[104874..105336).4" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).4" Target="10319:[104148..106735).8" />
<Link Source="10319:[104874..105336).5" Target="10319:[104874..105336).4" />
<Link Source="10319:[104874..105336).5" Target="10319:[84124..109887).2" />
<Link Source="10319:[104874..105336).5" Target="10312:[19030..19039).2" />
<Link Source="10319:[104874..105336).5" Target="10319:[104148..106735).8" />
<Link Source="10319:[105368..106708).2" Target="10319:[84328..84359).2" />
<Link Source="10319:[105368..106708).2" Target="10319:[104148..106735).8" />
<Link Source="10319:[105465..105535).1" Target="10312:[19030..19039).2" />
<Link Source="10319:[105465..105535).1" Target="10319:[105368..106708).2" />
<Link Source="10319:[105465..105535).2" Target="10319:[84288..84313).2" />
<Link Source="10319:[105465..105535).2" Target="10319:[105368..106708).2" />
<Link Source="10319:[105465..105535).3" Target="10319:[84257..84273).2" />
<Link Source="10319:[105465..105535).3" Target="10319:[105368..106708).2" />
<Link Source="10319:[105476..105534).1" Target="10319:[105368..106708).2" />
<Link Source="10319:[76345..76358).1" Target="10319:[105465..105535).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76360..76385).1" Target="10319:[105465..105535).2" />
<Link Source="10319:[76360..76385).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76387..76402).1" Target="10319:[105465..105535).3" />
<Link Source="10319:[76387..76402).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[76345..76358).1" />
<Link Source="10319:[76428..76480).1" Target="10312:[19030..19039).2" />
<Link Source="10319:[76428..76480).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76428..76480).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76494..76582).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[105476..105534).1" />
<Link Source="10319:[84691..84861).3" Target="10312:[19030..19039).2" />
<Link Source="10319:[84691..84861).3" Target="10319:[76428..76480).1" />
<Link Source="10319:[84691..84861).3" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).3" Target="25002:[4395..4432).28" />
<Link Source="10319:[84764..84846).7" Target="10319:[84257..84273).2" />
<Link Source="10319:[84764..84846).7" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).8" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).10" Target="10312:[19030..19039).2" />
<Link Source="10319:[84764..84846).10" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84846).11" Target="10319:[84288..84313).2" />
<Link Source="10319:[84764..84846).11" Target="10319:[84691..84861).3" />
<Link Source="10319:[84764..84845).2" Target="10319:[84691..84861).3" />
<Link Source="10306:[358886..358901).2" Target="10319:[84764..84846).7" />
<Link Source="10306:[358886..358901).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358903..358930).2" Target="10319:[84764..84846).8" />
<Link Source="10306:[358903..358930).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358932..358945).2" Target="10319:[84764..84846).10" />
<Link Source="10306:[358932..358945).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358947..358972).2" Target="10319:[84764..84846).11" />
<Link Source="10306:[358947..358972).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358838..360009).2" Target="10319:[84124..109887).2" />
<Link Source="10306:[358838..360009).2" Target="10319:[84764..84845).2" />
<Link Source="10306:[358998..359998).7" Target="10306:[358932..358945).2" />
<Link Source="10306:[358998..359998).7" Target="10319:[76428..76480).1" />
<Link Source="10306:[358998..359998).7" Target="10319:[84764..84845).2" />
<Link Source="10306:[358998..359998).8" Target="10319:[84764..84845).2" />
<Link Source="10319:[44948..45377).3" Target="10312:[19030..19039).2" />
<Link Source="10319:[44948..45377).3" Target="10319:[76428..76480).1" />
<Link Source="10319:[44948..45377).3" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).3" Target="25002:[4395..4432).28" />
<Link Source="10354:[11428..11441).2" Target="25002:[4395..4432).28" />
<Link Source="10319:[45408..45422).2" Target="25002:[4395..4432).28" />
<Link Source="10287:[2377..2471).3" Target="10312:[19030..19039).2" />
<Link Source="10287:[2377..2471).3" Target="25002:[4395..4432).28" />
<Link Source="10287:[791..833).3" Target="10319:[76428..76480).1" />
<Link Source="10287:[791..833).3" Target="10312:[19030..19039).2" />
<Link Source="10287:[912..927).2" Target="10312:[19030..19039).2" />
<Link Source="10287:[912..919).2" Target="10287:[912..927).2" />
<Link Source="10287:[912..919).2" Target="10312:[19030..19039).2" />
<Link Source="10287:[945..972).2" Target="10312:[19030..19039).2" />
<Link Source="10287:[945..963).2" Target="10287:[945..972).2" />
<Link Source="10287:[945..963).2" Target="10312:[19030..19039).2" />
<Link Source="10286:[21504..21529).2" Target="10319:[76428..76480).1" />
<Link Source="10286:[21546..21561).2" Target="10319:[76428..76480).1" />
<Link Source="10286:[21563..21583).2" Target="10319:[76428..76480).1" />
<Link Source="10286:[22044..22069).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[22044..22069).2" Target="10319:[76428..76480).1" />
<Link Source="10286:[22086..22108).2" Target="10286:[21546..21561).2" />
<Link Source="10286:[22086..22108).2" Target="10319:[76428..76480).1" />
<Link Source="10286:[22110..22130).2" Target="10286:[21563..21583).2" />
<Link Source="10286:[22110..22130).2" Target="10319:[76428..76480).1" />
<Link Source="10286:[22421..22557).13" Target="10286:[22086..22108).2" />
<Link Source="10286:[22421..22557).13" Target="10286:[21504..21529).2" />
<Link Source="10286:[22421..22557).14" Target="10286:[22110..22130).2" />
<Link Source="10286:[22421..22557).14" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).6" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).7" Target="10286:[21504..21529).2" />
<Link Source="10286:[15616..15690).7" Target="10319:[76428..76480).1" />
<Link Source="10286:[15616..15690).7" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23056..23081).2" Target="10286:[22044..22069).2" />
<Link Source="10286:[23056..23081).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23124..23146).2" Target="10286:[22421..22557).13" />
<Link Source="10286:[23124..23146).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23161..23181).2" Target="10286:[22421..22557).14" />
<Link Source="10286:[23161..23181).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23281..23301).2" Target="10286:[22044..22069).2" />
<Link Source="10286:[23281..23301).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[23380..23684).8" Target="10286:[21504..21529).2" />
<Link Source="10286:[23380..23684).8" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[23893..24026).3" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).3" Target="10286:[23161..23181).2" />
<Link Source="10286:[24545..24641).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[24655..25349).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[24655..25349).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26910..26935).2" Target="10286:[23056..23081).2" />
<Link Source="10286:[26910..26935).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26952..26974).2" Target="10286:[23124..23146).2" />
<Link Source="10286:[26952..26974).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27002..27022).2" Target="10286:[23281..23301).2" />
<Link Source="10286:[27002..27022).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27048..27088).5" Target="10286:[21504..21529).2" />
<Link Source="10286:[27048..27088).6" Target="10286:[26910..26935).2" />
<Link Source="10286:[27048..27088).6" Target="10286:[27048..27088).5" />
<Link Source="10286:[27048..27088).6" Target="10286:[21504..21529).2" />
<Link Source="10286:[27208..27236).3" Target="10286:[21504..21529).2" />
<Link Source="10286:[27250..27722).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[27738..27845).4" Target="10286:[21504..21529).2" />
<Link Source="10286:[27738..27845).5" Target="10286:[27208..27236).3" />
<Link Source="10286:[27738..27845).5" Target="10286:[27738..27845).4" />
<Link Source="10286:[27738..27845).5" Target="10286:[21504..21529).2" />
<Link Source="10286:[27861..27873).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26281..26812).2" Target="10286:[27861..27873).2" />
<Link Source="10286:[26281..26812).2" Target="10286:[21504..21529).2" />
<Link Source="10286:[26450..26769).2" Target="10286:[24545..24641).3" />
<Link Source="10286:[26450..26769).2" Target="10286:[26281..26812).2" />
<Link Source="10287:[1680..1716).2" Target="10319:[76428..76480).1" />
<Link Source="10287:[1680..1716).2" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).2" Target="10287:[1680..1716).2" />
<Link Source="10287:[1683..1690).2" Target="10287:[912..919).2" />
<Link Source="10287:[1683..1690).2" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).3" Target="10287:[1683..1690).2" />
<Link Source="10287:[1683..1716).3" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).3" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).3" Target="10287:[1683..1716).3" />
<Link Source="10319:[51935..52244).3" Target="10319:[13969..14029).1" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[602..612).1" Target="10845:[522..547).1" />
<Link Source="10845:[602..612).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[637..638).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[660..678).1" Target="10845:[549..580).1" />
<Link Source="10845:[660..678).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[701..705).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).2" Target="25002:[4395..4432).1" />
<Link Source="10845:[764..789).1" Target="10845:[602..612).1" />
<Link Source="10845:[764..789).1" Target="10845:[499..728).2" />
<Link Source="10845:[791..816).1" Target="10845:[637..638).1" />
<Link Source="10845:[791..816).1" Target="10845:[499..728).2" />
<Link Source="10845:[818..841).1" Target="10845:[660..678).1" />
<Link Source="10845:[818..841).1" Target="10845:[499..728).2" />
<Link Source="10845:[843..878).1" Target="10845:[701..705).1" />
<Link Source="10845:[843..878).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).1" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).2" />
<Link Source="10843:[661..687).1" Target="10843:[685..687).1" />
<Link Source="10843:[82071..82080).1" Target="10843:[82075..82080).1" />
<Link Source="10843:[82110..82118).1" Target="10843:[82114..82118).1" />
<Link Source="10843:[82447..82485).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82447..82485).2" Target="10843:[82447..82485).1" />
<Link Source="10843:[82447..82485).4" Target="10843:[82110..82118).1" />
<Link Source="10843:[82447..82485).4" Target="10843:[82447..82485).1" />
<Link Source="10843:[82519..82557).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82519..82557).2" Target="10843:[82519..82557).1" />
<Link Source="10843:[82519..82557).4" Target="10843:[82110..82118).1" />
<Link Source="10843:[82519..82557).4" Target="10843:[82519..82557).1" />
<Link Source="10843:[82591..82629).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82591..82629).2" Target="10843:[82591..82629).1" />
<Link Source="10843:[82591..82629).6" Target="10843:[82110..82118).1" />
<Link Source="10843:[82591..82629).6" Target="10843:[82591..82629).1" />
<Link Source="10843:[82663..82701).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82663..82701).2" Target="10843:[82663..82701).1" />
<Link Source="10843:[82663..82701).6" Target="10843:[82110..82118).1" />
<Link Source="10843:[82663..82701).6" Target="10843:[82663..82701).1" />
<Link Source="10843:[82735..82773).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82735..82773).2" Target="10843:[82735..82773).1" />
<Link Source="10843:[82735..82773).8" Target="10843:[82110..82118).1" />
<Link Source="10843:[82735..82773).8" Target="10843:[82735..82773).1" />
<Link Source="10843:[82807..82845).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82807..82845).2" Target="10843:[82807..82845).1" />
<Link Source="10843:[82807..82845).8" Target="10843:[82110..82118).1" />
<Link Source="10843:[82807..82845).8" Target="10843:[82807..82845).1" />
<Link Source="10843:[82879..82917).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82879..82917).2" Target="10843:[82879..82917).1" />
<Link Source="10843:[82879..82917).11" Target="10843:[82110..82118).1" />
<Link Source="10843:[82879..82917).11" Target="10843:[82879..82917).1" />
<Link Source="10843:[82951..82989).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[82951..82989).2" Target="10843:[82951..82989).1" />
<Link Source="10843:[82951..82989).11" Target="10843:[82110..82118).1" />
<Link Source="10843:[82951..82989).11" Target="10843:[82951..82989).1" />
<Link Source="10843:[83023..83061).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83023..83061).2" Target="10843:[83023..83061).1" />
<Link Source="10843:[83023..83061).5" Target="10843:[82110..82118).1" />
<Link Source="10843:[83023..83061).5" Target="10843:[83023..83061).1" />
<Link Source="10843:[83095..83133).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83095..83133).2" Target="10843:[83095..83133).1" />
<Link Source="10843:[83095..83133).12" Target="10843:[82110..82118).1" />
<Link Source="10843:[83095..83133).12" Target="10843:[83095..83133).1" />
<Link Source="10843:[83167..83205).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83167..83205).2" Target="10843:[83167..83205).1" />
<Link Source="10843:[83239..83277).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83239..83277).2" Target="10843:[83239..83277).1" />
<Link Source="10843:[82333..83288).2" Target="10843:[82447..82485).1" />
<Link Source="10843:[82333..83288).2" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).3" Target="10843:[82519..82557).1" />
<Link Source="10843:[82333..83288).3" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).4" Target="10843:[82591..82629).1" />
<Link Source="10843:[82333..83288).4" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).5" Target="10843:[82663..82701).1" />
<Link Source="10843:[82333..83288).5" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).6" Target="10843:[82735..82773).1" />
<Link Source="10843:[82333..83288).6" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).7" Target="10843:[82807..82845).1" />
<Link Source="10843:[82333..83288).7" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).8" Target="10843:[82879..82917).1" />
<Link Source="10843:[82333..83288).8" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).9" Target="10843:[82951..82989).1" />
<Link Source="10843:[82333..83288).9" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).10" Target="10843:[83023..83061).1" />
<Link Source="10843:[82333..83288).10" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).11" Target="10843:[83095..83133).1" />
<Link Source="10843:[82333..83288).11" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).12" Target="10843:[83167..83205).1" />
<Link Source="10843:[82333..83288).12" Target="10843:[82333..83288).1" />
<Link Source="10843:[82333..83288).13" Target="10843:[83239..83277).1" />
<Link Source="10843:[82333..83288).13" Target="10843:[82333..83288).1" />
<Link Source="10843:[82293..83288).1" Target="10843:[82333..83288).1" />
<Link Source="10843:[83487..83525).2" Target="10843:[82071..82080).1" />
<Link Source="10843:[83487..83525).2" Target="10843:[83487..83525).1" />
<Link Source="10843:[83487..83525).3" Target="10843:[82110..82118).1" />
<Link Source="10843:[83487..83525).3" Target="10843:[83487..83525).1" />
<Link Source="10843:[83559..83597).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83559..83597).2" Target="10843:[83559..83597).1" />
<Link Source="10843:[83559..83597).3" Target="10843:[82071..82080).1" />
<Link Source="10843:[83559..83597).3" Target="10843:[83559..83597).1" />
<Link Source="10843:[83631..83669).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83631..83669).2" Target="10843:[83631..83669).1" />
<Link Source="10843:[83631..83669).4" Target="10843:[82071..82080).1" />
<Link Source="10843:[83631..83669).4" Target="10843:[83631..83669).1" />
<Link Source="10843:[83703..83741).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83703..83741).2" Target="10843:[83703..83741).1" />
<Link Source="10843:[83703..83741).5" Target="10843:[82071..82080).1" />
<Link Source="10843:[83703..83741).5" Target="10843:[83703..83741).1" />
<Link Source="10843:[83775..83813).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83775..83813).2" Target="10843:[83775..83813).1" />
<Link Source="10843:[83775..83813).6" Target="10843:[82071..82080).1" />
<Link Source="10843:[83775..83813).6" Target="10843:[83775..83813).1" />
<Link Source="10843:[83847..83885).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83847..83885).2" Target="10843:[83847..83885).1" />
<Link Source="10843:[83847..83885).7" Target="10843:[82071..82080).1" />
<Link Source="10843:[83847..83885).7" Target="10843:[83847..83885).1" />
<Link Source="10843:[83919..83957).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83919..83957).2" Target="10843:[83919..83957).1" />
<Link Source="10843:[83919..83957).8" Target="10843:[82071..82080).1" />
<Link Source="10843:[83919..83957).8" Target="10843:[83919..83957).1" />
<Link Source="10843:[83991..84029).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[83991..84029).2" Target="10843:[83991..84029).1" />
<Link Source="10843:[83991..84029).9" Target="10843:[82071..82080).1" />
<Link Source="10843:[83991..84029).9" Target="10843:[83991..84029).1" />
<Link Source="10843:[84063..84101).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84063..84101).2" Target="10843:[84063..84101).1" />
<Link Source="10843:[84063..84101).5" Target="10843:[82071..82080).1" />
<Link Source="10843:[84063..84101).5" Target="10843:[84063..84101).1" />
<Link Source="10843:[84135..84173).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84135..84173).2" Target="10843:[84135..84173).1" />
<Link Source="10843:[84135..84173).11" Target="10843:[82071..82080).1" />
<Link Source="10843:[84135..84173).11" Target="10843:[84135..84173).1" />
<Link Source="10843:[84207..84245).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84207..84245).2" Target="10843:[84207..84245).1" />
<Link Source="10843:[84207..84245).12" Target="10843:[82071..82080).1" />
<Link Source="10843:[84207..84245).12" Target="10843:[84207..84245).1" />
<Link Source="10843:[84279..84317).2" Target="10843:[82110..82118).1" />
<Link Source="10843:[84279..84317).2" Target="10843:[84279..84317).1" />
<Link Source="10843:[84279..84317).13" Target="10843:[82071..82080).1" />
<Link Source="10843:[84279..84317).13" Target="10843:[84279..84317).1" />
<Link Source="10843:[83373..84328).2" Target="10843:[83487..83525).1" />
<Link Source="10843:[83373..84328).2" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).3" Target="10843:[83559..83597).1" />
<Link Source="10843:[83373..84328).3" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).4" Target="10843:[83631..83669).1" />
<Link Source="10843:[83373..84328).4" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).5" Target="10843:[83703..83741).1" />
<Link Source="10843:[83373..84328).5" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).6" Target="10843:[83775..83813).1" />
<Link Source="10843:[83373..84328).6" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).7" Target="10843:[83847..83885).1" />
<Link Source="10843:[83373..84328).7" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).8" Target="10843:[83919..83957).1" />
<Link Source="10843:[83373..84328).8" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).9" Target="10843:[83991..84029).1" />
<Link Source="10843:[83373..84328).9" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).10" Target="10843:[84063..84101).1" />
<Link Source="10843:[83373..84328).10" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).11" Target="10843:[84135..84173).1" />
<Link Source="10843:[83373..84328).11" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).12" Target="10843:[84207..84245).1" />
<Link Source="10843:[83373..84328).12" Target="10843:[83373..84328).1" />
<Link Source="10843:[83373..84328).13" Target="10843:[84279..84317).1" />
<Link Source="10843:[83373..84328).13" Target="10843:[83373..84328).1" />
<Link Source="10843:[83333..84328).1" Target="10843:[83373..84328).1" />
<Link Source="10845:[900..910).1" Target="10845:[764..789).1" />
<Link Source="10845:[900..910).1" Target="10845:[499..728).2" />
<Link Source="10845:[912..933).1" Target="10845:[791..816).1" />
<Link Source="10845:[912..933).1" Target="10845:[499..728).2" />
<Link Source="10845:[935..953).1" Target="10845:[818..841).1" />
<Link Source="10845:[935..953).1" Target="10845:[499..728).2" />
<Link Source="10845:[955..974).1" Target="10845:[843..878).1" />
<Link Source="10845:[955..974).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).2" Target="10845:[499..728).2" />
<Link Source="10843:[1173..1198).1" Target="10845:[900..910).1" />
<Link Source="10843:[1173..1198).1" Target="10845:[740..997).2" />
<Link Source="10843:[1200..1225).1" Target="10845:[912..933).1" />
<Link Source="10843:[1200..1225).1" Target="10845:[740..997).2" />
<Link Source="10843:[1227..1250).1" Target="10845:[935..953).1" />
<Link Source="10843:[1227..1250).1" Target="10845:[740..997).2" />
<Link Source="10843:[1252..1287).1" Target="10845:[955..974).1" />
<Link Source="10843:[1252..1287).1" Target="10845:[740..997).2" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).1" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).2" />
<Link Source="10843:[734..744).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[734..744).1" Target="10845:[740..997).2" />
<Link Source="10843:[778..799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[778..799).1" Target="10845:[740..997).2" />
<Link Source="10843:[835..853).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[835..853).1" Target="10845:[740..997).2" />
<Link Source="10843:[1113..1134).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1113..1134).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).2" Target="10843:[1173..1198).1" />
<Link Source="10843:[1313..1354).2" Target="10843:[1313..1354).1" />
<Link Source="10843:[1313..1354).2" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).1" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1368..1474).2" Target="10843:[1368..1474).1" />
<Link Source="10843:[1368..1474).2" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).1" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1488..1600).2" Target="10843:[1488..1600).1" />
<Link Source="10843:[1488..1600).2" Target="10845:[740..997).2" />
<Link Source="10843:[1616..1631).1" Target="10843:[1173..1198).1" />
<Link Source="10843:[1616..1631).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1616..1631).1" Target="10845:[740..997).2" />
<Link Source="10843:[1659..1685).1" Target="10843:[1200..1225).1" />
<Link Source="10843:[1659..1685).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1659..1685).1" Target="10845:[740..997).2" />
<Link Source="10843:[1724..1742).1" Target="10843:[1227..1250).1" />
<Link Source="10843:[1724..1742).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1724..1742).1" Target="10845:[740..997).2" />
<Link Source="10843:[1778..1799).1" Target="10843:[1252..1287).1" />
<Link Source="10843:[1778..1799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1778..1799).1" Target="10845:[740..997).2" />
<Link Source="25002:[4395..4432).40" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).40" Target="10286:[21504..21529).2" />
<Link Source="25002:[4395..4432).40" Target="10843:[1616..1631).1" />
<Link Source="25002:[4395..4432).40" Target="10843:[1659..1685).1" />
<Link Source="25002:[4395..4432).40" Target="10843:[1724..1742).1" />
<Link Source="25002:[4395..4432).40" Target="10843:[1778..1799).1" />
<Link Source="25002:[4395..4432).40" Target="28001:[46830..47156).2" />
<Link Source="10076:[5223..5250).10" Target="25002:[4395..4432).40" />
<Link Source="10076:[5223..5250).10" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).10" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).10" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).10" Target="25002:[4395..4432).40" />
<Link Source="10076:[5277..5448).10" Target="10076:[4989..5047).1" />
<Link Source="10077:[31258..31297).3" Target="25002:[4395..4432).28" />
<Link Source="10077:[31258..31297).3" Target="10077:[34685..34715).1" />
<Link Source="10077:[31842..31894).1" Target="EXTERNAL" />
<Link Source="10077:[31842..31894).1" Target="25002:[4395..4432).40" />
<Link Source="10077:[44231..44317).33" Target="10077:[31842..31894).1" />
<Link Source="10077:[44231..44317).33" Target="10077:[32567..32606).1" />
<Link Source="10077:[44954..44972).3" Target="10077:[31842..31894).1" />
<Link Source="10077:[44966..44971).67" Target="10077:[44954..44972).3" />
<Link Source="10077:[44966..44971).67" Target="10077:[31842..31894).1" />
<Link Source="10077:[39421..39431).3" Target="10077:[31842..31894).1" />
<Link Source="10077:[1641..1732).3" Target="10077:[31842..31894).1" />
<Link Source="10077:[1641..1732).3" Target="10077:[39421..39431).3" />
<Link Source="10077:[1685..1713).3" Target="10077:[1641..1732).3" />
<Link Source="10077:[1685..1713).3" Target="10077:[31842..31894).1" />
<Link Source="10077:[1685..1713).3" Target="10077:[39421..39431).3" />
<Link Source="10077:[39398..39590).13" Target="10077:[1685..1713).3" />
<Link Source="10077:[39398..39590).13" Target="10077:[31842..31894).1" />
<Link Source="10077:[39398..39590).14" Target="10077:[31842..31894).1" />
<Link Source="10077:[44231..44317).41" Target="10077:[31842..31894).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[31842..31894).1" />
<Link Source="10077:[33984..34031).1" Target="10077:[31842..31894).1" />
<Link Source="10346:[2571..2602).1" Target="10077:[33969..34032).1" />
<Link Source="10346:[2571..2602).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2604..2615).1" Target="10077:[33969..34032).1" />
<Link Source="10346:[2604..2615).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2617..2639).1" Target="10077:[33969..34032).1" />
<Link Source="10346:[2617..2639).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).1" Target="10077:[33969..34032).1" />
<Link Source="10346:[2544..2854).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2661..2665).1" Target="10346:[2604..2615).1" />
<Link Source="10346:[2661..2665).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).2" Target="10077:[33984..34031).1" />
<Link Source="10286:[1247..1258).4" Target="10346:[2661..2665).1" />
<Link Source="10286:[1247..1258).4" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).13" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).14" Target="10286:[1247..1258).4" />
<Link Source="10286:[1317..1350).14" Target="10286:[1317..1350).13" />
<Link Source="10286:[1317..1350).14" Target="10346:[2544..2854).2" />
<Link Source="10346:[858..868).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[858..868).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[932..947).2" Target="10346:[2544..2854).1" />
<Link Source="10346:[932..947).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2571..2602).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2691..2750).1" />
<Link Source="10346:[2691..2750).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2571..2602).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2766..2776).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2843).1" Target="10345:[922..1186).1" />
<Link Source="10346:[2803..2843).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2843).2" Target="10346:[2803..2843).1" />
<Link Source="10346:[2803..2843).2" Target="10346:[2617..2639).1" />
<Link Source="10346:[2803..2843).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2815).1" Target="10346:[2803..2843).2" />
<Link Source="10346:[2803..2815).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2803..2815).1" Target="10077:[33984..34031).1" />
<Link Source="10077:[34064..34272).1" Target="10077:[31842..31894).1" />
<Link Source="10077:[34444..34482).20" Target="10077:[31842..31894).1" />
<Link Source="10077:[34444..34482).20" Target="10286:[1247..1258).4" />
<Link Source="10077:[34444..34482).20" Target="25002:[4395..4432).40" />
<Link Source="10077:[34444..34482).20" Target="10346:[2544..2854).1" />
<Link Source="10077:[34444..34482).20" Target="10346:[2766..2776).1" />
<Link Source="10077:[34444..34482).20" Target="10346:[932..947).2" />
<Link Source="10077:[34444..34482).20" Target="10346:[2803..2815).1" />
<Link Source="10307:[2552..2569).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[2552..2569).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[2516..2720).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[2516..2720).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[2595..2709).1" Target="10307:[2516..2720).1" />
<Link Source="10307:[2595..2709).1" Target="10077:[34444..34482).20" />
<Link Source="10307:[2595..2709).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[2595..2709).2" Target="10307:[2552..2569).1" />
<Link Source="10307:[2595..2709).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[2602..2628).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[471..492).27" Target="10307:[2595..2709).1" />
<Link Source="10298:[471..492).27" Target="10307:[2602..2628).1" />
<Link Source="10298:[494..511).27" Target="10307:[2595..2709).2" />
<Link Source="10298:[494..511).27" Target="10307:[2602..2628).1" />
<Link Source="10298:[537..568).79" Target="10298:[471..492).27" />
<Link Source="10298:[537..568).79" Target="10298:[494..511).27" />
<Link Source="10298:[537..568).79" Target="10307:[2602..2628).1" />
<Link Source="10307:[2672..2708).1" Target="10298:[537..568).79" />
<Link Source="10286:[1605..1638).9" Target="10307:[2672..2708).1" />
<Link Source="10286:[1688..1781).13" Target="10307:[2672..2708).1" />
<Link Source="10286:[1688..1781).14" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).14" Target="10307:[2672..2708).1" />
<Link Source="10286:[1708..1779).3" Target="10307:[2672..2708).1" />
<Link Source="10298:[471..492).28" Target="10286:[1688..1781).13" />
<Link Source="10298:[471..492).28" Target="10286:[1708..1779).3" />
<Link Source="10298:[494..511).28" Target="10286:[1688..1781).14" />
<Link Source="10298:[494..511).28" Target="10286:[1708..1779).3" />
<Link Source="10286:[1820..1963).13" Target="10307:[2672..2708).1" />
<Link Source="10286:[1820..1963).14" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).14" Target="10307:[2672..2708).1" />
<Link Source="10286:[1840..1888).3" Target="10307:[2672..2708).1" />
<Link Source="10298:[471..492).29" Target="10286:[1820..1963).13" />
<Link Source="10298:[471..492).29" Target="10286:[1840..1888).3" />
<Link Source="10298:[494..511).29" Target="10286:[1820..1963).14" />
<Link Source="10298:[494..511).29" Target="10286:[1840..1888).3" />
<Link Source="10319:[42478..42805).7" Target="10307:[2672..2708).1" />
<Link Source="10319:[42821..42938).17" Target="10307:[2672..2708).1" />
<Link Source="10319:[42839..42937).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[63849..63870).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63849..63870).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63885..63919).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63885..63919).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63934..63945).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63934..63945).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63960..63969).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63960..63969).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63984..64009).3" Target="10319:[42821..42938).17" />
<Link Source="10319:[63984..64009).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[63768..64484).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[63768..64484).3" Target="10319:[42839..42937).3" />
<Link Source="10319:[64035..64445).9" Target="10319:[42839..42937).3" />
<Link Source="10319:[64035..64445).10" Target="10319:[63885..63919).3" />
<Link Source="10319:[64035..64445).10" Target="10319:[64035..64445).9" />
<Link Source="10319:[64035..64445).10" Target="10319:[42839..42937).3" />
<Link Source="10319:[64461..64473).5" Target="10319:[42839..42937).3" />
<Link Source="10319:[42821..42938).23" Target="10319:[64461..64473).5" />
<Link Source="10319:[42821..42938).23" Target="10307:[2672..2708).1" />
<Link Source="10319:[42952..43079).7" Target="10307:[2672..2708).1" />
<Link Source="10319:[42952..43079).8" Target="10319:[42821..42938).23" />
<Link Source="10319:[42952..43079).8" Target="10319:[42952..43079).7" />
<Link Source="10319:[42952..43079).8" Target="10307:[2672..2708).1" />
<Link Source="10354:[11312..11328).3" Target="10307:[2672..2708).1" />
<Link Source="10354:[3684..3818).15" Target="10307:[2672..2708).1" />
<Link Source="10354:[3684..3818).15" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).105" Target="10354:[3684..3818).15" />
<Link Source="10354:[3720..3803).105" Target="10307:[2672..2708).1" />
<Link Source="10354:[3720..3803).105" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).105" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).106" Target="10354:[11312..11328).3" />
<Link Source="10354:[3720..3803).107" Target="10354:[3684..3818).15" />
<Link Source="10354:[3720..3803).107" Target="10307:[2672..2708).1" />
<Link Source="10354:[3720..3803).107" Target="10354:[3720..3803).106" />
<Link Source="10354:[3720..3803).107" Target="10354:[11312..11328).3" />
<Link Source="10354:[11299..11330).7" Target="10354:[3720..3803).105" />
<Link Source="10354:[11299..11330).7" Target="10307:[2672..2708).1" />
<Link Source="10319:[50330..50355).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[1222..1235).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[5944..5957).3" Target="10312:[1222..1235).3" />
<Link Source="10312:[5944..5957).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[3805..3818).3" Target="10312:[5944..5957).3" />
<Link Source="10312:[3805..3818).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[3905..3919).3" Target="10307:[2672..2708).1" />
<Link Source="10354:[3684..3818).16" Target="10307:[2672..2708).1" />
<Link Source="10354:[3684..3818).16" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).113" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).113" Target="10307:[2672..2708).1" />
<Link Source="10354:[3720..3803).113" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).113" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).114" Target="10312:[3905..3919).3" />
<Link Source="10354:[3720..3803).115" Target="10354:[3684..3818).16" />
<Link Source="10354:[3720..3803).115" Target="10307:[2672..2708).1" />
<Link Source="10354:[3720..3803).115" Target="10354:[3720..3803).114" />
<Link Source="10354:[3720..3803).115" Target="10312:[3905..3919).3" />
<Link Source="10312:[3892..3921).7" Target="10354:[3720..3803).113" />
<Link Source="10312:[3892..3921).7" Target="10307:[2672..2708).1" />
<Link Source="10312:[3935..3968).9" Target="10307:[2672..2708).1" />
<Link Source="10312:[3948..3966).3" Target="10307:[2672..2708).1" />
<Link Source="10353:[4698..4724).5" Target="10312:[3935..3968).9" />
<Link Source="10353:[4698..4724).5" Target="10312:[3948..3966).3" />
<Link Source="10353:[4750..4847).9" Target="10353:[4698..4724).5" />
<Link Source="10353:[4750..4847).9" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).9" Target="10312:[3948..3966).3" />
<Link Source="10353:[4863..5000).17" Target="10353:[4698..4724).5" />
<Link Source="10353:[4863..5000).17" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).17" Target="10312:[3948..3966).3" />
<Link Source="10353:[4863..5000).18" Target="10312:[3948..3966).3" />
<Link Source="10353:[5079..5183).9" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).9" Target="10312:[3948..3966).3" />
<Link Source="10353:[5197..5323).13" Target="10353:[4698..4724).5" />
<Link Source="10353:[5197..5323).13" Target="10353:[5079..5183).9" />
<Link Source="10353:[5197..5323).13" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).25" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).25" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).26" Target="10353:[4698..4724).5" />
<Link Source="10353:[5485..5759).26" Target="10353:[5485..5759).25" />
<Link Source="10353:[5485..5759).26" Target="10312:[3948..3966).3" />
<Link Source="10353:[5485..5759).27" Target="10312:[3948..3966).3" />
<Link Source="10353:[5775..5979).17" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).17" Target="10312:[3948..3966).3" />
<Link Source="10353:[5775..5979).19" Target="10353:[4698..4724).5" />
<Link Source="10353:[5775..5979).19" Target="10353:[5775..5979).17" />
<Link Source="10353:[5775..5979).19" Target="10312:[3948..3966).3" />
<Link Source="10353:[5995..6029).13" Target="10353:[5775..5979).19" />
<Link Source="10353:[5995..6029).13" Target="10312:[3948..3966).3" />
<Link Source="10353:[6002..6028).5" Target="10312:[3948..3966).3" />
<Link Source="10353:[6343..6358).5" Target="10353:[5995..6029).13" />
<Link Source="10353:[6343..6358).5" Target="10353:[6002..6028).5" />
<Link Source="10353:[6384..6410).25" Target="10353:[6002..6028).5" />
<Link Source="10353:[6384..6410).26" Target="10353:[6343..6358).5" />
<Link Source="10353:[6384..6410).26" Target="10353:[6384..6410).25" />
<Link Source="10353:[6384..6410).26" Target="10353:[6002..6028).5" />
<Link Source="10312:[5188..5207).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[5209..5220).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[5222..5231).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[5233..5272).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[5274..5295).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[5297..5318).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[5320..5333).3" Target="10312:[3805..3818).3" />
<Link Source="10312:[5320..5333).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[5124..5404).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[4685..4699).7" Target="10307:[2672..2708).1" />
<Link Source="10354:[3684..3818).17" Target="10307:[2672..2708).1" />
<Link Source="10354:[3684..3818).17" Target="10312:[4685..4699).7" />
<Link Source="10354:[3720..3803).121" Target="10354:[3684..3818).17" />
<Link Source="10354:[3720..3803).121" Target="10307:[2672..2708).1" />
<Link Source="10354:[3720..3803).121" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).121" Target="10312:[4685..4699).7" />
<Link Source="10354:[3720..3803).122" Target="10312:[4685..4699).7" />
<Link Source="10354:[3720..3803).123" Target="10354:[3684..3818).17" />
<Link Source="10354:[3720..3803).123" Target="10307:[2672..2708).1" />
<Link Source="10354:[3720..3803).123" Target="10354:[3720..3803).122" />
<Link Source="10354:[3720..3803).123" Target="10312:[4685..4699).7" />
<Link Source="10312:[4680..4787).13" Target="10354:[3720..3803).121" />
<Link Source="10312:[4680..4787).13" Target="10307:[2672..2708).1" />
<Link Source="10312:[4826..5058).31" Target="10307:[2672..2708).1" />
<Link Source="10312:[4826..5058).31" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).32" Target="10307:[2672..2708).1" />
<Link Source="10346:[10761..10774).3" Target="10312:[3805..3818).3" />
<Link Source="10346:[10761..10774).3" Target="10307:[2672..2708).1" />
<Link Source="10346:[10861..10875).3" Target="10307:[2672..2708).1" />
<Link Source="10354:[3684..3818).18" Target="10307:[2672..2708).1" />
<Link Source="10354:[3684..3818).18" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).129" Target="10354:[3684..3818).18" />
<Link Source="10354:[3720..3803).129" Target="10307:[2672..2708).1" />
<Link Source="10354:[3720..3803).129" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).129" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).130" Target="10346:[10861..10875).3" />
<Link Source="10354:[3720..3803).131" Target="10354:[3684..3818).18" />
<Link Source="10354:[3720..3803).131" Target="10307:[2672..2708).1" />
<Link Source="10354:[3720..3803).131" Target="10354:[3720..3803).130" />
<Link Source="10354:[3720..3803).131" Target="10346:[10861..10875).3" />
<Link Source="10346:[10848..10877).7" Target="10354:[3720..3803).129" />
<Link Source="10346:[10848..10877).7" Target="10307:[2672..2708).1" />
<Link Source="10346:[10897..10914).3" Target="10307:[2672..2708).1" />
<Link Source="10346:[7666..7775).3" Target="10307:[2672..2708).1" />
<Link Source="10346:[7666..7775).3" Target="10346:[10897..10914).3" />
<Link Source="10346:[7672..7773).7" Target="10346:[7666..7775).3" />
<Link Source="10346:[7672..7773).7" Target="10307:[2672..2708).1" />
<Link Source="10346:[7672..7773).7" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).7" Target="10346:[10897..10914).3" />
<Link Source="10346:[10893..11127).5" Target="10346:[7672..7773).7" />
<Link Source="10346:[10893..11127).5" Target="10307:[2672..2708).1" />
<Link Source="10346:[3525..3638).19" Target="10307:[2672..2708).1" />
<Link Source="10312:[7729..7768).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[7816..7829).3" Target="10346:[10761..10774).3" />
<Link Source="10312:[7816..7829).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[7615..8420).3" Target="10307:[2672..2708).1" />
<Link Source="10312:[7903..7936).9" Target="10307:[2672..2708).1" />
<Link Source="10312:[7916..7934).3" Target="10307:[2672..2708).1" />
<Link Source="10353:[4698..4724).6" Target="10312:[7903..7936).9" />
<Link Source="10353:[4698..4724).6" Target="10312:[7916..7934).3" />
<Link Source="10353:[4750..4847).11" Target="10353:[4698..4724).6" />
<Link Source="10353:[4750..4847).11" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).11" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).21" Target="10353:[4698..4724).6" />
<Link Source="10353:[4863..5000).21" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).21" Target="10312:[7916..7934).3" />
<Link Source="10353:[4863..5000).22" Target="10312:[7916..7934).3" />
<Link Source="10353:[5079..5183).11" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).11" Target="10312:[7916..7934).3" />
<Link Source="10353:[5197..5323).16" Target="10353:[4698..4724).6" />
<Link Source="10353:[5197..5323).16" Target="10353:[5079..5183).11" />
<Link Source="10353:[5197..5323).16" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).31" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).31" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).32" Target="10353:[4698..4724).6" />
<Link Source="10353:[5485..5759).32" Target="10353:[5485..5759).31" />
<Link Source="10353:[5485..5759).32" Target="10312:[7916..7934).3" />
<Link Source="10353:[5485..5759).33" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).21" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).21" Target="10312:[7916..7934).3" />
<Link Source="10353:[5775..5979).23" Target="10353:[4698..4724).6" />
<Link Source="10353:[5775..5979).23" Target="10353:[5775..5979).21" />
<Link Source="10353:[5775..5979).23" Target="10312:[7916..7934).3" />
<Link Source="10353:[5995..6029).16" Target="10353:[5775..5979).23" />
<Link Source="10353:[5995..6029).16" Target="10312:[7916..7934).3" />
<Link Source="10353:[6002..6028).6" Target="10312:[7916..7934).3" />
<Link Source="10353:[6343..6358).6" Target="10353:[5995..6029).16" />
<Link Source="10353:[6343..6358).6" Target="10353:[6002..6028).6" />
<Link Source="10353:[6384..6410).31" Target="10353:[6002..6028).6" />
<Link Source="10353:[6384..6410).32" Target="10353:[6343..6358).6" />
<Link Source="10353:[6384..6410).32" Target="10353:[6384..6410).31" />
<Link Source="10353:[6384..6410).32" Target="10353:[6002..6028).6" />
<Link Source="10312:[7952..7977).9" Target="10307:[2672..2708).1" />
<Link Source="10312:[8247..8394).1" Target="10307:[2672..2708).1" />
<Link Source="10312:[8247..8394).5" Target="10312:[7729..7768).3" />
<Link Source="10312:[8247..8394).5" Target="10307:[2672..2708).1" />
<Link Source="10312:[8247..8394).8" Target="10312:[7816..7829).3" />
<Link Source="10312:[8247..8394).8" Target="10307:[2672..2708).1" />
<Link Source="10312:[8247..8394).9" Target="10346:[10761..10774).3" />
<Link Source="10312:[8247..8394).9" Target="10307:[2672..2708).1" />
<Link Source="10312:[8247..8393).1" Target="10307:[2672..2708).1" />
<Link Source="10312:[8543..8562).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8543..8562).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8564..8579).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8564..8579).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8581..8592).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8581..8592).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8594..8603).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8594..8603).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8605..8644).1" Target="10312:[8247..8394).5" />
<Link Source="10312:[8605..8644).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8646..8667).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8646..8667).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8669..8690).1" Target="10312:[8247..8394).1" />
<Link Source="10312:[8669..8690).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8692..8705).1" Target="10312:[8247..8394).8" />
<Link Source="10312:[8692..8705).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8707..8753).1" Target="10312:[8247..8394).9" />
<Link Source="10312:[8707..8753).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8508..10685).1" Target="10312:[7615..8420).3" />
<Link Source="10312:[8508..10685).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[8779..10524).1" Target="10312:[8564..8579).1" />
<Link Source="10312:[8779..10524).1" Target="10307:[2672..2708).1" />
<Link Source="10312:[8779..10524).1" Target="10312:[8247..8393).1" />
<Link Source="10312:[9577..9709).1" Target="10312:[8543..8562).1" />
<Link Source="10312:[9577..9709).1" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).2" Target="10312:[8564..8579).1" />
<Link Source="10312:[9577..9709).2" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).3" Target="10312:[8581..8592).1" />
<Link Source="10312:[9577..9709).3" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).4" Target="10312:[8594..8603).1" />
<Link Source="10312:[9577..9709).4" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).5" Target="10312:[8605..8644).1" />
<Link Source="10312:[9577..9709).5" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).6" Target="10312:[8646..8667).1" />
<Link Source="10312:[9577..9709).6" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).7" Target="10312:[8669..8690).1" />
<Link Source="10312:[9577..9709).7" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).8" Target="10312:[8692..8705).1" />
<Link Source="10312:[9577..9709).8" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9709).9" Target="10312:[8707..8753).1" />
<Link Source="10312:[9577..9709).9" Target="10312:[8779..10524).1" />
<Link Source="10312:[9577..9708).1" Target="10312:[8779..10524).1" />
<Link Source="10312:[34707..34726).1" Target="10312:[9577..9709).1" />
<Link Source="10312:[34707..34726).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34741..34756).1" Target="10312:[9577..9709).2" />
<Link Source="10312:[34741..34756).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34771..34782).1" Target="10312:[9577..9709).3" />
<Link Source="10312:[34771..34782).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34797..34806).1" Target="10312:[9577..9709).4" />
<Link Source="10312:[34797..34806).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34821..34860).1" Target="10312:[9577..9709).5" />
<Link Source="10312:[34821..34860).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34875..34896).1" Target="10312:[9577..9709).6" />
<Link Source="10312:[34875..34896).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34911..34932).1" Target="10312:[9577..9709).7" />
<Link Source="10312:[34911..34932).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34947..34960).1" Target="10312:[9577..9709).8" />
<Link Source="10312:[34947..34960).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34975..35021).1" Target="10312:[9577..9709).9" />
<Link Source="10312:[34975..35021).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[34659..35191).1" Target="10312:[8508..10685).1" />
<Link Source="10312:[34659..35191).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).1" Target="10312:[34707..34726).1" />
<Link Source="10312:[35047..35180).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).2" Target="10312:[34741..34756).1" />
<Link Source="10312:[35047..35180).2" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).3" Target="10312:[34771..34782).1" />
<Link Source="10312:[35047..35180).3" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).4" Target="10312:[34797..34806).1" />
<Link Source="10312:[35047..35180).4" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).5" Target="10312:[34821..34860).1" />
<Link Source="10312:[35047..35180).5" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).6" Target="10312:[34875..34896).1" />
<Link Source="10312:[35047..35180).6" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).7" Target="10312:[34911..34932).1" />
<Link Source="10312:[35047..35180).7" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).9" Target="10312:[34947..34960).1" />
<Link Source="10312:[35047..35180).9" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35180).10" Target="10312:[34975..35021).1" />
<Link Source="10312:[35047..35180).10" Target="10312:[9577..9708).1" />
<Link Source="10312:[35047..35179).1" Target="10312:[9577..9708).1" />
<Link Source="10312:[35313..35332).1" Target="10312:[35047..35180).1" />
<Link Source="10312:[35313..35332).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35347..35362).1" Target="10312:[35047..35180).2" />
<Link Source="10312:[35347..35362).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35377..35388).1" Target="10312:[35047..35180).3" />
<Link Source="10312:[35377..35388).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35403..35412).1" Target="10312:[35047..35180).4" />
<Link Source="10312:[35403..35412).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35427..35466).1" Target="10312:[35047..35180).5" />
<Link Source="10312:[35427..35466).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35481..35502).1" Target="10312:[35047..35180).6" />
<Link Source="10312:[35481..35502).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35517..35538).1" Target="10312:[35047..35180).7" />
<Link Source="10312:[35517..35538).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35553..35581).1" Target="10312:[35047..35180).2" />
<Link Source="10312:[35553..35581).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35596..35609).1" Target="10312:[35047..35180).9" />
<Link Source="10312:[35596..35609).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35624..35670).1" Target="10312:[35047..35180).10" />
<Link Source="10312:[35624..35670).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35265..38808).1" Target="10312:[34659..35191).1" />
<Link Source="10312:[35265..38808).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35696..35731).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35347..35362).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35696..35731).1" />
<Link Source="10312:[35696..35731).2" Target="10312:[35047..35179).1" />
<Link Source="10312:[35745..35826).1" Target="10312:[35347..35362).1" />
<Link Source="10312:[35745..35826).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35842..35872).1" Target="10312:[35347..35362).1" />
<Link Source="10312:[35842..35872).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35898..35924).1" Target="10312:[35047..35179).1" />
<Link Source="10354:[11244..11285).11" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).11" Target="10312:[35745..35826).1" />
<Link Source="10354:[11244..11285).11" Target="10312:[35898..35924).1" />
<Link Source="10354:[11312..11328).4" Target="10312:[35898..35924).1" />
<Link Source="10354:[3684..3818).19" Target="10354:[11244..11285).11" />
<Link Source="10354:[3684..3818).19" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).137" Target="10354:[3684..3818).19" />
<Link Source="10354:[3720..3803).137" Target="10354:[11244..11285).11" />
<Link Source="10354:[3720..3803).137" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).137" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).138" Target="10354:[11312..11328).4" />
<Link Source="10354:[3720..3803).139" Target="10354:[3684..3818).19" />
<Link Source="10354:[3720..3803).139" Target="10354:[11244..11285).11" />
<Link Source="10354:[3720..3803).139" Target="10354:[3720..3803).138" />
<Link Source="10354:[3720..3803).139" Target="10354:[11312..11328).4" />
<Link Source="10354:[11299..11330).10" Target="10354:[3720..3803).137" />
<Link Source="10354:[11299..11330).10" Target="10312:[35898..35924).1" />
<Link Source="10312:[35888..35925).1" Target="10354:[11244..11285).11" />
<Link Source="10312:[35888..35925).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35939..35985).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35999..38740).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35842..35872).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35999..38740).1" />
<Link Source="10312:[35999..38740).2" Target="10312:[35047..35179).1" />
<Link Source="10312:[36067..36078).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[3841..3991).3" Target="10312:[35888..35925).1" />
<Link Source="10354:[3841..3991).3" Target="10312:[36067..36078).1" />
<Link Source="10312:[36067..36079).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).1" Target="10312:[35888..35925).1" />
<Link Source="10312:[36097..36258).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).2" Target="10312:[35842..35872).1" />
<Link Source="10312:[36097..36258).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).3" Target="10312:[35377..35388).1" />
<Link Source="10312:[36097..36258).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).4" Target="10312:[35403..35412).1" />
<Link Source="10312:[36097..36258).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).5" Target="10312:[35481..35502).1" />
<Link Source="10312:[36097..36258).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).6" Target="10312:[35517..35538).1" />
<Link Source="10312:[36097..36258).6" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).7" Target="10312:[35553..35581).1" />
<Link Source="10312:[36097..36258).7" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).8" Target="10312:[35596..35609).1" />
<Link Source="10312:[36097..36258).8" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).9" Target="10312:[35624..35670).1" />
<Link Source="10312:[36097..36258).9" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36258).10" Target="10312:[35427..35466).1" />
<Link Source="10312:[36097..36258).10" Target="10312:[35999..38740).2" />
<Link Source="10312:[36097..36257).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[33656..33675).1" Target="10312:[36097..36258).1" />
<Link Source="10312:[33656..33675).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33677..33692).1" Target="10312:[36097..36258).2" />
<Link Source="10312:[33677..33692).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33694..33705).1" Target="10312:[36097..36258).3" />
<Link Source="10312:[33694..33705).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33707..33716).1" Target="10312:[36097..36258).4" />
<Link Source="10312:[33707..33716).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33731..33752).1" Target="10312:[36097..36258).5" />
<Link Source="10312:[33731..33752).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33754..33775).1" Target="10312:[36097..36258).6" />
<Link Source="10312:[33754..33775).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33777..33805).1" Target="10312:[36097..36258).7" />
<Link Source="10312:[33777..33805).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33807..33820).1" Target="10312:[36097..36258).8" />
<Link Source="10312:[33807..33820).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33822..33868).1" Target="10312:[36097..36258).9" />
<Link Source="10312:[33822..33868).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33870..33909).1" Target="10312:[36097..36258).10" />
<Link Source="10312:[33870..33909).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).1" Target="10312:[33677..33692).1" />
<Link Source="10312:[33935..34006).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).2" Target="10312:[33694..33705).1" />
<Link Source="10312:[33935..34006).2" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).3" Target="10312:[33731..33752).1" />
<Link Source="10312:[33935..34006).3" Target="10312:[36097..36257).1" />
<Link Source="10312:[33935..34006).4" Target="10312:[33754..33775).1" />
<Link Source="10312:[33935..34006).4" Target="10312:[36097..36257).1" />
<Link Source="10312:[33949..34005).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[61540..61570).3" Target="10312:[33935..34006).1" />
<Link Source="10312:[61540..61570).3" Target="10312:[33949..34005).1" />
<Link Source="10312:[61572..61583).3" Target="10312:[33935..34006).2" />
<Link Source="10312:[61572..61583).3" Target="10312:[33949..34005).1" />
<Link Source="10312:[61585..61606).3" Target="10312:[33935..34006).3" />
<Link Source="10312:[61585..61606).3" Target="10312:[33949..34005).1" />
<Link Source="10312:[61608..61629).3" Target="10312:[33935..34006).4" />
<Link Source="10312:[61608..61629).3" Target="10312:[33949..34005).1" />
<Link Source="10312:[61655..62327).14" Target="10312:[61585..61606).3" />
<Link Source="10312:[61655..62327).14" Target="10312:[61540..61570).3" />
<Link Source="10312:[61655..62327).14" Target="10312:[33949..34005).1" />
<Link Source="10312:[61771..61840).1" Target="10312:[61572..61583).3" />
<Link Source="10312:[61771..61840).1" Target="10312:[61655..62327).14" />
<Link Source="10312:[61771..61840).2" Target="10312:[61540..61570).3" />
<Link Source="10312:[61771..61840).2" Target="10312:[61771..61840).1" />
<Link Source="10312:[61771..61840).2" Target="10354:[3841..3991).3" />
<Link Source="10312:[61771..61840).2" Target="10312:[61655..62327).14" />
<Link Source="10312:[34022..34574).1" Target="10312:[61771..61840).2" />
<Link Source="10312:[34022..34574).1" Target="10312:[36097..36257).1" />
<Link Source="10312:[36097..36258).11" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).1" Target="10312:[35313..35332).1" />
<Link Source="10312:[36278..36360).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).2" Target="10312:[35888..35925).1" />
<Link Source="10312:[36278..36360).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).3" Target="10312:[35427..35466).1" />
<Link Source="10312:[36278..36360).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).4" Target="10312:[33822..33868).1" />
<Link Source="10312:[36278..36360).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).1" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).3" />
<Link Source="10312:[36278..36360).5" Target="10312:[36278..36360).4" />
<Link Source="10312:[36278..36360).5" Target="10312:[61771..61840).2" />
<Link Source="10312:[36278..36360).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[36278..36360).6" Target="10312:[35999..38740).2" />
<Link Source="10354:[9012..9030).1" Target="10312:[36278..36360).5" />
<Link Source="10354:[9012..9030).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[8981..9152).1" Target="10312:[36278..36360).5" />
<Link Source="10354:[8981..9152).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[9060..9070).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[4058..4122).22" Target="10354:[9012..9030).1" />
<Link Source="10354:[4058..4122).22" Target="10354:[9060..9070).1" />
<Link Source="10354:[9056..9141).1" Target="10354:[4058..4122).22" />
<Link Source="10354:[9056..9141).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[9073..9077).1" Target="10312:[36278..36360).6" />
<Link Source="10354:[4058..4122).23" Target="10354:[8981..9152).1" />
<Link Source="10354:[4058..4122).23" Target="10354:[9073..9077).1" />
<Link Source="10354:[9056..9141).2" Target="10354:[4058..4122).23" />
<Link Source="10354:[9056..9141).2" Target="10312:[36278..36360).6" />
<Link Source="10354:[9056..9141).3" Target="10354:[9056..9141).1" />
<Link Source="10354:[9056..9141).3" Target="10354:[9056..9141).2" />
<Link Source="10354:[9056..9141).3" Target="10312:[36278..36360).6" />
<Link Source="10312:[36566..36625).1" Target="10312:[35842..35872).1" />
<Link Source="10312:[36566..36625).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36643..36855).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[36643..36855).2" Target="10312:[36566..36625).1" />
<Link Source="10312:[36643..36855).2" Target="10312:[36278..36360).5" />
<Link Source="10312:[36643..36855).2" Target="10312:[36643..36855).1" />
<Link Source="10312:[36643..36855).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[37061..37078).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[4919..5009).18" Target="10312:[35888..35925).1" />
<Link Source="10354:[4919..5009).18" Target="10312:[37061..37078).1" />
<Link Source="10354:[4094..4107).24" Target="10354:[4919..5009).18" />
<Link Source="10354:[4094..4107).24" Target="10312:[36278..36360).5" />
<Link Source="10354:[4094..4107).24" Target="10312:[37061..37078).1" />
<Link Source="10312:[37029..37117).1" Target="10354:[4094..4107).24" />
<Link Source="10312:[37029..37117).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37258..37278).1" Target="10312:[35999..38740).2" />
<Link Source="10354:[4919..5009).19" Target="10312:[35313..35332).1" />
<Link Source="10354:[4919..5009).19" Target="10312:[37258..37278).1" />
<Link Source="10354:[4094..4107).25" Target="10354:[4919..5009).19" />
<Link Source="10354:[4094..4107).25" Target="10312:[36278..36360).5" />
<Link Source="10354:[4094..4107).25" Target="10312:[37258..37278).1" />
<Link Source="10312:[37254..37416).1" Target="10354:[4094..4107).25" />
<Link Source="10312:[37254..37416).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37436..37988).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[37436..37988).2" Target="10312:[35427..35466).1" />
<Link Source="10312:[37436..37988).2" Target="10312:[37436..37988).1" />
<Link Source="10312:[37436..37988).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38290..38338).1" Target="10312:[35999..38740).2" />
<Link Source="10306:[3345..3430).1" Target="10312:[35517..35538).1" />
<Link Source="10306:[3345..3430).1" Target="10312:[38290..38338).1" />
<Link Source="10306:[3358..3364).1" Target="10312:[38290..38338).1" />
<Link Source="10306:[3196..3249).9" Target="10306:[3345..3430).1" />
<Link Source="10306:[3196..3249).9" Target="10306:[3358..3364).1" />
<Link Source="10306:[3202..3247).33" Target="10306:[3196..3249).9" />
<Link Source="10306:[3202..3247).33" Target="10312:[36278..36360).5" />
<Link Source="10306:[3202..3247).33" Target="10306:[3358..3364).1" />
<Link Source="10306:[3351..3428).1" Target="10306:[3202..3247).33" />
<Link Source="10306:[3351..3428).1" Target="10312:[38290..38338).1" />
<Link Source="10312:[38286..38405).1" Target="10306:[3351..3428).1" />
<Link Source="10312:[38286..38405).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).1" Target="10312:[35842..35872).1" />
<Link Source="10312:[38425..38538).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).2" Target="10312:[35427..35466).1" />
<Link Source="10312:[38425..38538).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).3" Target="10312:[35265..38808).1" />
<Link Source="10312:[38425..38538).3" Target="10312:[36278..36360).5" />
<Link Source="10312:[38425..38538).3" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).4" Target="10312:[35939..35985).1" />
<Link Source="10312:[38425..38538).4" Target="10312:[35999..38740).2" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).1" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).2" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).3" />
<Link Source="10312:[38425..38538).5" Target="10312:[38425..38538).4" />
<Link Source="10312:[38425..38538).5" Target="10312:[36278..36360).5" />
<Link Source="10312:[38425..38538).5" Target="10312:[35999..38740).2" />
<Link Source="10312:[38556..38725).1" Target="10312:[35999..38740).2" />
<Link Source="10312:[38556..38725).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[38556..38725).2" Target="10312:[38556..38725).1" />
<Link Source="10312:[38556..38725).2" Target="10312:[35999..38740).2" />
<Link Source="10312:[38629..38706).1" Target="10312:[38425..38538).5" />
<Link Source="10312:[38629..38706).1" Target="10312:[38556..38725).2" />
<Link Source="10312:[38629..38706).2" Target="10312:[36278..36360).5" />
<Link Source="10312:[38629..38706).2" Target="10312:[38556..38725).2" />
<Link Source="10312:[36067..36079).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).15" Target="10312:[35403..35412).1" />
<Link Source="10312:[36097..36258).15" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).17" Target="10312:[35517..35538).1" />
<Link Source="10312:[36097..36258).17" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).18" Target="10312:[35553..35581).1" />
<Link Source="10312:[36097..36258).18" Target="10312:[38425..38538).5" />
<Link Source="10312:[36097..36258).19" Target="10312:[35596..35609).1" />
<Link Source="10312:[36097..36258).19" Target="10312:[38425..38538).5" />
<Link Source="10312:[33656..33675).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33707..33716).2" Target="10312:[36097..36258).15" />
<Link Source="10312:[33707..33716).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33754..33775).2" Target="10312:[36097..36258).17" />
<Link Source="10312:[33754..33775).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33777..33805).2" Target="10312:[36097..36258).18" />
<Link Source="10312:[33777..33805).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33807..33820).2" Target="10312:[36097..36258).19" />
<Link Source="10312:[33807..33820).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[33870..33909).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[61608..61629).4" Target="10312:[33754..33775).2" />
<Link Source="10312:[61608..61629).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[34022..34574).4" Target="10312:[38629..38706).1" />
<Link Source="10312:[34022..34574).4" Target="10312:[38425..38538).5" />
<Link Source="10354:[9012..9030).2" Target="10312:[38629..38706).1" />
<Link Source="10354:[9012..9030).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[8981..9152).2" Target="10312:[38629..38706).1" />
<Link Source="10354:[8981..9152).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[9060..9070).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4058..4122).27" Target="10354:[9012..9030).2" />
<Link Source="10354:[4058..4122).27" Target="10354:[9060..9070).2" />
<Link Source="10354:[9056..9141).5" Target="10354:[4058..4122).27" />
<Link Source="10354:[9056..9141).5" Target="10312:[38425..38538).5" />
<Link Source="10354:[9073..9077).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4058..4122).28" Target="10354:[8981..9152).2" />
<Link Source="10354:[4058..4122).28" Target="10354:[9073..9077).2" />
<Link Source="10354:[9056..9141).6" Target="10354:[4058..4122).28" />
<Link Source="10354:[9056..9141).6" Target="10312:[38425..38538).5" />
<Link Source="10354:[9056..9141).7" Target="10354:[9056..9141).5" />
<Link Source="10354:[9056..9141).7" Target="10354:[9056..9141).6" />
<Link Source="10354:[9056..9141).7" Target="10312:[38425..38538).5" />
<Link Source="10312:[36566..36625).2" Target="10312:[38425..38538).5" />
<Link Source="10312:[36643..36855).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[36643..36855).5" Target="10312:[36566..36625).2" />
<Link Source="10312:[36643..36855).5" Target="10312:[38629..38706).1" />
<Link Source="10312:[36643..36855).5" Target="10312:[36643..36855).4" />
<Link Source="10312:[36643..36855).5" Target="10312:[38425..38538).5" />
<Link Source="10312:[37061..37078).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4094..4107).29" Target="10312:[37061..37078).2" />
<Link Source="10354:[4094..4107).29" Target="10312:[38629..38706).1" />
<Link Source="10312:[37029..37117).4" Target="10354:[4094..4107).29" />
<Link Source="10312:[37029..37117).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[37258..37278).2" Target="10312:[38425..38538).5" />
<Link Source="10354:[4094..4107).30" Target="10312:[37258..37278).2" />
<Link Source="10354:[4094..4107).30" Target="10312:[38629..38706).1" />
<Link Source="10312:[37254..37416).4" Target="10354:[4094..4107).30" />
<Link Source="10312:[37254..37416).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[37436..37988).5" Target="10312:[38425..38538).5" />
<Link Source="10312:[38290..38338).2" Target="10312:[38425..38538).5" />
<Link Source="10306:[3345..3430).2" Target="10312:[35517..35538).1" />
<Link Source="10306:[3345..3430).2" Target="10312:[38290..38338).2" />
<Link Source="10306:[3358..3364).2" Target="10312:[38290..38338).2" />
<Link Source="10306:[3196..3249).10" Target="10306:[3345..3430).2" />
<Link Source="10306:[3196..3249).10" Target="10306:[3358..3364).2" />
<Link Source="10306:[3202..3247).37" Target="10306:[3196..3249).10" />
<Link Source="10306:[3202..3247).37" Target="10312:[38629..38706).1" />
<Link Source="10306:[3202..3247).37" Target="10306:[3358..3364).2" />
<Link Source="10306:[3351..3428).4" Target="10306:[3202..3247).37" />
<Link Source="10306:[3351..3428).4" Target="10312:[38290..38338).2" />
<Link Source="10312:[38286..38405).3" Target="10306:[3351..3428).4" />
<Link Source="10312:[38286..38405).3" Target="10312:[38425..38538).5" />
<Link Source="10312:[38556..38725).4" Target="10312:[38425..38538).5" />
<Link Source="10312:[38756..38772).1" Target="10312:[38629..38706).1" />
<Link Source="10312:[38756..38772).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[38786..38796).1" Target="10312:[35047..35179).1" />
<Link Source="10354:[11383..11549).3" Target="10312:[35888..35925).1" />
<Link Source="10354:[11383..11549).3" Target="10312:[38786..38796).1" />
<Link Source="10354:[3932..3952).5" Target="10354:[11383..11549).3" />
<Link Source="10354:[3932..3952).5" Target="10312:[38629..38706).1" />
<Link Source="10354:[3932..3952).5" Target="10312:[38786..38796).1" />
<Link Source="10354:[11428..11441).3" Target="10312:[38786..38796).1" />
<Link Source="10312:[38786..38797).1" Target="10312:[35047..35179).1" />
<Link Source="10312:[35047..35180).11" Target="10312:[9577..9708).1" />
<Link Source="10312:[9577..9709).10" Target="10312:[8779..10524).1" />
<Link Source="10346:[12335..12456).1" Target="10307:[2672..2708).1" />
<Link Source="10346:[12335..12456).7" Target="10346:[10761..10774).3" />
<Link Source="10346:[12335..12456).7" Target="10307:[2672..2708).1" />
<Link Source="10346:[12335..12456).8" Target="10312:[38629..38706).1" />
<Link Source="10346:[12335..12456).8" Target="10307:[2672..2708).1" />
<Link Source="10346:[12335..12455).1" Target="10307:[2672..2708).1" />
<Link Source="10345:[29004..29025).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29004..29025).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29040..29059).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29040..29059).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29074..29085).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29074..29085).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29100..29109).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29100..29109).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29124..29163).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29124..29163).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29178..29199).1" Target="10346:[12335..12456).1" />
<Link Source="10345:[29178..29199).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29214..29227).1" Target="10346:[12335..12456).7" />
<Link Source="10345:[29214..29227).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29242..29288).1" Target="10346:[12335..12456).8" />
<Link Source="10345:[29242..29288).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[28963..29726).1" Target="10307:[2672..2708).1" />
<Link Source="10345:[28963..29726).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).1" Target="10345:[29004..29025).1" />
<Link Source="10345:[29314..29436).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).2" Target="10345:[29040..29059).1" />
<Link Source="10345:[29314..29436).2" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).3" Target="10345:[29074..29085).1" />
<Link Source="10345:[29314..29436).3" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).4" Target="10345:[29100..29109).1" />
<Link Source="10345:[29314..29436).4" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).5" Target="10345:[29124..29163).1" />
<Link Source="10345:[29314..29436).5" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).6" Target="10345:[29178..29199).1" />
<Link Source="10345:[29314..29436).6" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).7" Target="10345:[29214..29227).1" />
<Link Source="10345:[29314..29436).7" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29436).8" Target="10345:[29242..29288).1" />
<Link Source="10345:[29314..29436).8" Target="10346:[12335..12455).1" />
<Link Source="10345:[29314..29435).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29788..29809).1" Target="10345:[29314..29436).1" />
<Link Source="10345:[29788..29809).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29824..29843).1" Target="10345:[29314..29436).2" />
<Link Source="10345:[29824..29843).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29858..29869).1" Target="10345:[29314..29436).3" />
<Link Source="10345:[29858..29869).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29884..29893).1" Target="10345:[29314..29436).4" />
<Link Source="10345:[29884..29893).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29908..29947).1" Target="10345:[29314..29436).5" />
<Link Source="10345:[29908..29947).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29962..29983).1" Target="10345:[29314..29436).6" />
<Link Source="10345:[29962..29983).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29998..30011).1" Target="10345:[29314..29436).7" />
<Link Source="10345:[29998..30011).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30026..30072).1" Target="10345:[29314..29436).8" />
<Link Source="10345:[30026..30072).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29738..31666).1" Target="10345:[28963..29726).1" />
<Link Source="10345:[29738..31666).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30127..30163).1" Target="10345:[29314..29435).1" />
<Link Source="10286:[2155..2260).3" Target="10345:[29788..29809).1" />
<Link Source="10286:[2155..2260).3" Target="10345:[30127..30163).1" />
<Link Source="10286:[2191..2245).9" Target="10286:[2155..2260).3" />
<Link Source="10286:[2191..2245).9" Target="10354:[3932..3952).5" />
<Link Source="10286:[2191..2245).9" Target="10345:[30127..30163).1" />
<Link Source="10286:[2191..2245).10" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).10" Target="10345:[30127..30163).1" />
<Link Source="10286:[2198..2244).3" Target="10345:[30127..30163).1" />
<Link Source="10298:[471..492).32" Target="10286:[2191..2245).9" />
<Link Source="10298:[471..492).32" Target="10286:[2198..2244).3" />
<Link Source="10298:[494..511).32" Target="10286:[2191..2245).10" />
<Link Source="10298:[494..511).32" Target="10286:[2198..2244).3" />
<Link Source="10345:[30098..30164).1" Target="10298:[471..492).32" />
<Link Source="10345:[30098..30164).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30180..30209).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30203..30208).1" Target="10345:[30180..30209).1" />
<Link Source="10345:[30203..30208).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).1" Target="10345:[29858..29869).1" />
<Link Source="10345:[30223..30867).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).2" Target="10345:[30180..30209).1" />
<Link Source="10345:[30223..30867).2" Target="10345:[29314..29435).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[29738..31666).1" />
<Link Source="10345:[30223..30867).3" Target="10354:[3932..3952).5" />
<Link Source="10345:[30223..30867).3" Target="10345:[30223..30867).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[30223..30867).2" />
<Link Source="10345:[30223..30867).3" Target="10345:[30203..30208).1" />
<Link Source="10345:[30223..30867).3" Target="10345:[29314..29435).1" />
<Link Source="10345:[30883..31655).1" Target="10345:[29738..31666).1" />
<Link Source="10345:[30883..31655).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[30883..31655).1" Target="10345:[29314..29435).1" />
<Link Source="10345:[29314..29436).9" Target="10346:[12335..12455).1" />
<Link Source="10345:[29457..29477).1" Target="10346:[12335..12455).1" />
<Link Source="10354:[4919..5009).24" Target="10345:[29040..29059).1" />
<Link Source="10354:[4919..5009).24" Target="10345:[29457..29477).1" />
<Link Source="10354:[4094..4107).32" Target="10354:[4919..5009).24" />
<Link Source="10354:[4094..4107).32" Target="10345:[30223..30867).3" />
<Link Source="10354:[4094..4107).32" Target="10345:[29457..29477).1" />
<Link Source="10345:[29452..29715).1" Target="10354:[4094..4107).32" />
<Link Source="10345:[29452..29715).1" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).2" Target="10345:[29178..29199).1" />
<Link Source="10345:[29452..29715).2" Target="EXTERNAL" />
<Link Source="10345:[29452..29715).2" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).3" Target="10346:[12335..12455).1" />
<Link Source="10345:[29452..29715).5" Target="10345:[29452..29715).1" />
<Link Source="10345:[29452..29715).5" Target="10345:[29452..29715).2" />
<Link Source="10345:[29452..29715).5" Target="10346:[12335..12455).1" />
<Link Source="10345:[29566..29700).1" Target="10345:[28963..29726).1" />
<Link Source="10345:[29566..29700).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[29566..29700).1" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).2" Target="10345:[29004..29025).1" />
<Link Source="10345:[29566..29700).2" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).3" Target="10345:[29040..29059).1" />
<Link Source="10345:[29566..29700).3" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).4" Target="10345:[29074..29085).1" />
<Link Source="10345:[29566..29700).4" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).5" Target="10345:[29100..29109).1" />
<Link Source="10345:[29566..29700).5" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).6" Target="10345:[29124..29163).1" />
<Link Source="10345:[29566..29700).6" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).7" Target="10345:[29178..29199).1" />
<Link Source="10345:[29566..29700).7" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).8" Target="10345:[29214..29227).1" />
<Link Source="10345:[29566..29700).8" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29700).9" Target="10345:[30026..30072).1" />
<Link Source="10345:[29566..29700).9" Target="10345:[29452..29715).5" />
<Link Source="10345:[29566..29699).1" Target="10345:[29452..29715).5" />
<Link Source="10345:[31734..31789).1" Target="10345:[29566..29700).1" />
<Link Source="10345:[31734..31789).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31804..31825).1" Target="10345:[29566..29700).2" />
<Link Source="10345:[31804..31825).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31840..31859).1" Target="10345:[29566..29700).3" />
<Link Source="10345:[31840..31859).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31874..31885).1" Target="10345:[29566..29700).4" />
<Link Source="10345:[31874..31885).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31900..31909).1" Target="10345:[29566..29700).5" />
<Link Source="10345:[31900..31909).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31924..31963).1" Target="10345:[29566..29700).6" />
<Link Source="10345:[31924..31963).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[31978..31999).1" Target="10345:[29566..29700).7" />
<Link Source="10345:[31978..31999).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32014..32027).1" Target="10345:[29566..29700).8" />
<Link Source="10345:[32014..32027).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32042..32088).1" Target="10345:[29566..29700).9" />
<Link Source="10345:[32042..32088).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32114..32230).1" Target="10345:[31804..31825).1" />
<Link Source="10345:[32114..32230).1" Target="10345:[30223..30867).3" />
<Link Source="10345:[32114..32230).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32114..32230).2" Target="EXTERNAL" />
<Link Source="10345:[32114..32230).2" Target="10345:[29566..29699).1" />
<Link Source="10345:[32118..32174).1" Target="10345:[29566..29699).1" />
<Link Source="10298:[471..492).33" Target="10345:[32114..32230).1" />
<Link Source="10298:[471..492).33" Target="10345:[32118..32174).1" />
<Link Source="10298:[494..511).33" Target="10345:[32114..32230).2" />
<Link Source="10298:[494..511).33" Target="10345:[32118..32174).1" />
<Link Source="10345:[32275..32311).1" Target="10345:[29566..29699).1" />
<Link Source="10286:[2155..2260).4" Target="10345:[31804..31825).1" />
<Link Source="10286:[2155..2260).4" Target="10345:[32275..32311).1" />
<Link Source="10286:[2191..2245).13" Target="10286:[2155..2260).4" />
<Link Source="10286:[2191..2245).13" Target="10345:[30223..30867).3" />
<Link Source="10286:[2191..2245).13" Target="10345:[32275..32311).1" />
<Link Source="10286:[2191..2245).14" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).14" Target="10345:[32275..32311).1" />
<Link Source="10286:[2198..2244).4" Target="10345:[32275..32311).1" />
<Link Source="10298:[471..492).34" Target="10286:[2191..2245).13" />
<Link Source="10298:[471..492).34" Target="10286:[2198..2244).4" />
<Link Source="10298:[494..511).34" Target="10286:[2191..2245).14" />
<Link Source="10298:[494..511).34" Target="10286:[2198..2244).4" />
<Link Source="10345:[32246..32312).1" Target="10298:[471..492).34" />
<Link Source="10345:[32246..32312).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[32328..33465).1" Target="10345:[31734..31789).1" />
<Link Source="10345:[32328..33465).1" Target="10345:[29566..29699).1" />
<Link Source="10345:[29566..29700).10" Target="10345:[29452..29715).5" />
<Link Source="10354:[3720..3803).145" Target="10354:[3684..3818).17" />
<Link Source="10354:[3720..3803).145" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).145" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).145" Target="10312:[4685..4699).7" />
<Link Source="10354:[3720..3803).147" Target="10354:[3684..3818).17" />
<Link Source="10354:[3720..3803).147" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).147" Target="10354:[3720..3803).122" />
<Link Source="10354:[3720..3803).147" Target="10312:[4685..4699).7" />
<Link Source="10312:[4680..4787).15" Target="10354:[3720..3803).145" />
<Link Source="10312:[4680..4787).15" Target="10307:[2672..2708).1" />
<Link Source="10346:[10861..10875).4" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).21" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).21" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).153" Target="10354:[3684..3818).21" />
<Link Source="10354:[3720..3803).153" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).153" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).153" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).154" Target="10346:[10861..10875).4" />
<Link Source="10354:[3720..3803).155" Target="10354:[3684..3818).21" />
<Link Source="10354:[3720..3803).155" Target="10345:[30223..30867).3" />
<Link Source="10354:[3720..3803).155" Target="10354:[3720..3803).154" />
<Link Source="10354:[3720..3803).155" Target="10346:[10861..10875).4" />
<Link Source="10346:[10848..10877).10" Target="10354:[3720..3803).153" />
<Link Source="10346:[10848..10877).10" Target="10345:[30223..30867).3" />
<Link Source="10346:[10897..10914).4" Target="10345:[30223..30867).3" />
<Link Source="10346:[7666..7775).4" Target="10345:[30223..30867).3" />
<Link Source="10346:[7666..7775).4" Target="10346:[10897..10914).4" />
<Link Source="10346:[7672..7773).10" Target="10346:[7666..7775).4" />
<Link Source="10346:[7672..7773).10" Target="10345:[30223..30867).3" />
<Link Source="10346:[7672..7773).10" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).10" Target="10346:[10897..10914).4" />
<Link Source="10346:[10893..11127).7" Target="10346:[7672..7773).10" />
<Link Source="10346:[10893..11127).7" Target="10345:[30223..30867).3" />
<Link Source="10346:[3525..3638).26" Target="10345:[30223..30867).3" />
<Link Source="10312:[7816..7829).4" Target="10345:[30223..30867).3" />
<Link Source="10312:[7903..7936).13" Target="10345:[30223..30867).3" />
<Link Source="10312:[7916..7934).4" Target="10345:[30223..30867).3" />
<Link Source="10353:[4698..4724).7" Target="10312:[7903..7936).13" />
<Link Source="10353:[4698..4724).7" Target="10312:[7916..7934).4" />
<Link Source="10353:[4750..4847).13" Target="10353:[4698..4724).7" />
<Link Source="10353:[4750..4847).13" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).13" Target="10312:[7916..7934).4" />
<Link Source="10353:[4863..5000).25" Target="10353:[4698..4724).7" />
<Link Source="10353:[4863..5000).25" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).25" Target="10312:[7916..7934).4" />
<Link Source="10353:[4863..5000).26" Target="10312:[7916..7934).4" />
<Link Source="10353:[5079..5183).13" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).13" Target="10312:[7916..7934).4" />
<Link Source="10353:[5197..5323).19" Target="10353:[4698..4724).7" />
<Link Source="10353:[5197..5323).19" Target="10353:[5079..5183).13" />
<Link Source="10353:[5197..5323).19" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).37" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).37" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).38" Target="10353:[4698..4724).7" />
<Link Source="10353:[5485..5759).38" Target="10353:[5485..5759).37" />
<Link Source="10353:[5485..5759).38" Target="10312:[7916..7934).4" />
<Link Source="10353:[5485..5759).39" Target="10312:[7916..7934).4" />
<Link Source="10353:[5775..5979).25" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).25" Target="10312:[7916..7934).4" />
<Link Source="10353:[5775..5979).27" Target="10353:[4698..4724).7" />
<Link Source="10353:[5775..5979).27" Target="10353:[5775..5979).25" />
<Link Source="10353:[5775..5979).27" Target="10312:[7916..7934).4" />
<Link Source="10353:[5995..6029).19" Target="10353:[5775..5979).27" />
<Link Source="10353:[5995..6029).19" Target="10312:[7916..7934).4" />
<Link Source="10353:[6002..6028).7" Target="10312:[7916..7934).4" />
<Link Source="10353:[6343..6358).7" Target="10353:[5995..6029).19" />
<Link Source="10353:[6343..6358).7" Target="10353:[6002..6028).7" />
<Link Source="10353:[6384..6410).37" Target="10353:[6002..6028).7" />
<Link Source="10353:[6384..6410).38" Target="10353:[6343..6358).7" />
<Link Source="10353:[6384..6410).38" Target="10353:[6384..6410).37" />
<Link Source="10353:[6384..6410).38" Target="10353:[6002..6028).7" />
<Link Source="10312:[7952..7977).13" Target="10345:[30223..30867).3" />
<Link Source="10312:[19087..19100).3" Target="10312:[7816..7829).4" />
<Link Source="10312:[19087..19100).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[61608..61629).5" Target="10345:[30223..30867).3" />
<Link Source="10312:[63439..63448).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[63473..63501).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[63503..63516).3" Target="10312:[19087..19100).3" />
<Link Source="10312:[63503..63516).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[63566..63612).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[63638..63668).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[63682..63706).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[80978..80991).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[80993..81002).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[80993..81002).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[81004..81017).3" Target="10312:[63503..63516).3" />
<Link Source="10312:[81004..81017).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[81019..81040).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[81019..81040).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[81042..81069).3" Target="10312:[63682..63706).3" />
<Link Source="10312:[81042..81069).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[81095..84034).3" Target="10312:[80978..80991).3" />
<Link Source="10312:[81095..84034).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[81196..82523).15" Target="10312:[81095..84034).3" />
<Link Source="10312:[81196..82523).16" Target="10312:[80993..81002).3" />
<Link Source="10312:[81196..82523).16" Target="10312:[81196..82523).15" />
<Link Source="10312:[81196..82523).16" Target="10312:[81095..84034).3" />
<Link Source="10312:[81196..82523).17" Target="10312:[81019..81040).3" />
<Link Source="10312:[81196..82523).17" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).17" Target="10312:[81095..84034).3" />
<Link Source="10312:[81196..82523).20" Target="10312:[81196..82523).16" />
<Link Source="10312:[81196..82523).20" Target="10312:[81196..82523).17" />
<Link Source="10312:[81196..82523).20" Target="10312:[81095..84034).3" />
<Link Source="10312:[81319..81371).3" Target="10312:[80978..80991).3" />
<Link Source="10312:[81319..81371).3" Target="10312:[81196..82523).20" />
<Link Source="10312:[81495..81570).11" Target="10312:[81319..81371).3" />
<Link Source="10312:[81495..81570).11" Target="10345:[30223..30867).3" />
<Link Source="10312:[81495..81570).11" Target="10312:[81196..82523).20" />
<Link Source="10312:[81495..81570).12" Target="10312:[81319..81371).3" />
<Link Source="10312:[81495..81570).12" Target="10312:[81196..82523).20" />
<Link Source="10312:[81596..82500).13" Target="10312:[81319..81371).3" />
<Link Source="10312:[81596..82500).13" Target="10345:[30223..30867).3" />
<Link Source="10312:[81596..82500).13" Target="10312:[80993..81002).3" />
<Link Source="10312:[81596..82500).13" Target="10312:[81196..82523).20" />
<Link Source="10312:[81596..82500).14" Target="10312:[81019..81040).3" />
<Link Source="10312:[81596..82500).14" Target="10312:[81196..82523).20" />
<Link Source="10312:[81628..81659).3" Target="10312:[81196..82523).20" />
<Link Source="10353:[7504..7530).6" Target="10312:[81596..82500).14" />
<Link Source="10353:[7504..7530).6" Target="10312:[81628..81659).3" />
<Link Source="10312:[81596..82500).17" Target="10312:[81596..82500).13" />
<Link Source="10312:[81596..82500).17" Target="10353:[7504..7530).6" />
<Link Source="10312:[81596..82500).17" Target="10312:[81196..82523).20" />
<Link Source="10312:[84050..84066).5" Target="10345:[30223..30867).3" />
<Link Source="10312:[66177..69285).28" Target="10312:[63473..63501).3" />
<Link Source="10312:[66177..69285).28" Target="10312:[63439..63448).3" />
<Link Source="10312:[66291..66342).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[75301..75322).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[75301..75322).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75324..75352).3" Target="10312:[66177..69285).28" />
<Link Source="10312:[75324..75352).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).11" Target="10312:[75301..75322).3" />
<Link Source="10312:[75735..75866).11" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).11" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).12" Target="10312:[66291..66342).3" />
<Link Source="10312:[75742..75804).3" Target="10312:[75735..75866).11" />
<Link Source="10312:[75742..75804).3" Target="10312:[66291..66342).3" />
<Link Source="10312:[75735..75866).14" Target="10312:[75324..75352).3" />
<Link Source="10312:[75735..75866).14" Target="10312:[75742..75804).3" />
<Link Source="10312:[66177..69285).31" Target="10312:[63638..63668).3" />
<Link Source="10312:[66177..69285).31" Target="10312:[63439..63448).3" />
<Link Source="10312:[66177..69285).32" Target="10345:[32042..32088).1" />
<Link Source="10312:[66177..69285).32" Target="10312:[63439..63448).3" />
<Link Source="10312:[66177..69285).33" Target="10312:[63566..63612).3" />
<Link Source="10312:[66177..69285).33" Target="10312:[63439..63448).3" />
<Link Source="10312:[77543..77571).3" Target="10312:[75735..75866).14" />
<Link Source="10312:[77543..77571).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[77573..77604).3" Target="10312:[66177..69285).31" />
<Link Source="10312:[77573..77604).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[77654..77700).3" Target="10312:[66177..69285).33" />
<Link Source="10312:[77654..77700).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[77501..78044).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[77501..78044).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[77726..77892).9" Target="10312:[77501..78044).3" />
<Link Source="10312:[77726..77892).9" Target="10345:[30223..30867).3" />
<Link Source="10312:[77726..77892).9" Target="10312:[63439..63448).3" />
<Link Source="10312:[77726..77892).10" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).10" Target="10312:[63439..63448).3" />
<Link Source="10312:[77730..77782).3" Target="10312:[63439..63448).3" />
<Link Source="10298:[471..492).38" Target="10312:[77726..77892).9" />
<Link Source="10298:[471..492).38" Target="10312:[77730..77782).3" />
<Link Source="10298:[494..511).38" Target="10312:[77726..77892).10" />
<Link Source="10298:[494..511).38" Target="10312:[77730..77782).3" />
<Link Source="10312:[78402..78430).3" Target="10312:[77543..77571).3" />
<Link Source="10312:[78402..78430).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[78432..78463).3" Target="10312:[77573..77604).3" />
<Link Source="10312:[78432..78463).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[78513..78552).3" Target="10312:[77654..77700).3" />
<Link Source="10312:[78513..78552).3" Target="10312:[63439..63448).3" />
<Link Source="10312:[78346..78783).3" Target="10312:[77501..78044).3" />
<Link Source="10312:[78346..78783).3" Target="10312:[63439..63448).3" />
<Link Source="10346:[8019..8032).1" Target="10312:[63439..63448).3" />
<Link Source="10346:[8034..8062).1" Target="10312:[78402..78430).3" />
<Link Source="10346:[8034..8062).1" Target="10312:[63439..63448).3" />
<Link Source="10346:[8064..8095).1" Target="10312:[78432..78463).3" />
<Link Source="10346:[8064..8095).1" Target="10312:[63439..63448).3" />
<Link Source="10346:[8097..8143).1" Target="10312:[66177..69285).32" />
<Link Source="10346:[8097..8143).1" Target="10312:[63439..63448).3" />
<Link Source="10346:[8145..8184).1" Target="10312:[78513..78552).3" />
<Link Source="10346:[8145..8184).1" Target="10312:[63439..63448).3" />
<Link Source="10346:[7977..8737).1" Target="10312:[78346..78783).3" />
<Link Source="10346:[7977..8737).1" Target="10345:[30223..30867).3" />
<Link Source="10346:[7977..8737).1" Target="10312:[63439..63448).3" />
<Link Source="10346:[8210..8251).1" Target="10346:[7977..8737).1" />
<Link Source="10346:[8210..8251).1" Target="10345:[30223..30867).3" />
<Link Source="10346:[8210..8251).1" Target="10312:[63439..63448).3" />
<Link Source="10346:[8265..8726).1" Target="10312:[63439..63448).3" />
<Link Source="10346:[8265..8726).2" Target="10346:[8210..8251).1" />
<Link Source="10346:[8265..8726).2" Target="10346:[8265..8726).1" />
<Link Source="10346:[8265..8726).2" Target="10312:[63439..63448).3" />
<Link Source="10346:[8323..8450).1" Target="10346:[8019..8032).1" />
<Link Source="10346:[8323..8450).1" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).2" Target="10346:[8210..8251).1" />
<Link Source="10346:[8323..8450).2" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).3" Target="10346:[8034..8062).1" />
<Link Source="10346:[8323..8450).3" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).4" Target="10346:[8064..8095).1" />
<Link Source="10346:[8323..8450).4" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).5" Target="10346:[8097..8143).1" />
<Link Source="10346:[8323..8450).5" Target="10346:[8265..8726).2" />
<Link Source="10346:[8323..8450).6" Target="10346:[8265..8726).2" />
<Link Source="10346:[8330..8449).1" Target="10346:[8265..8726).2" />
<Link Source="10286:[30070..30083).3" Target="10346:[8323..8450).1" />
<Link Source="10286:[30070..30083).3" Target="10346:[8330..8449).1" />
<Link Source="10286:[30098..30120).3" Target="10346:[8323..8450).2" />
<Link Source="10286:[30098..30120).3" Target="10346:[8330..8449).1" />
<Link Source="10286:[30135..30160).3" Target="10346:[8323..8450).3" />
<Link Source="10286:[30135..30160).3" Target="10346:[8330..8449).1" />
<Link Source="10286:[30175..30206).3" Target="10346:[8323..8450).4" />
<Link Source="10286:[30175..30206).3" Target="10346:[8330..8449).1" />
<Link Source="10286:[30221..30268).3" Target="10346:[8323..8450).5" />
<Link Source="10286:[30221..30268).3" Target="10346:[8330..8449).1" />
<Link Source="10286:[30283..30330).3" Target="10346:[8323..8450).6" />
<Link Source="10286:[30283..30330).3" Target="10346:[8330..8449).1" />
<Link Source="10286:[30012..30691).3" Target="10346:[7977..8737).1" />
<Link Source="10286:[30012..30691).3" Target="10346:[8330..8449).1" />
<Link Source="10286:[30356..30522).9" Target="10286:[30012..30691).3" />
<Link Source="10286:[30356..30522).9" Target="10345:[30223..30867).3" />
<Link Source="10286:[30356..30522).9" Target="10346:[8330..8449).1" />
<Link Source="10286:[30356..30522).10" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).10" Target="10346:[8330..8449).1" />
<Link Source="10286:[30360..30412).3" Target="10346:[8330..8449).1" />
<Link Source="10298:[471..492).39" Target="10286:[30356..30522).9" />
<Link Source="10298:[471..492).39" Target="10286:[30360..30412).3" />
<Link Source="10298:[494..511).39" Target="10286:[30356..30522).10" />
<Link Source="10298:[494..511).39" Target="10286:[30360..30412).3" />
<Link Source="10060:[2136..2158).3" Target="10286:[30098..30120).3" />
<Link Source="10060:[2136..2158).3" Target="10346:[8330..8449).1" />
<Link Source="10060:[2173..2198).3" Target="10286:[30135..30160).3" />
<Link Source="10060:[2173..2198).3" Target="10346:[8330..8449).1" />
<Link Source="10060:[2213..2244).3" Target="10286:[30175..30206).3" />
<Link Source="10060:[2213..2244).3" Target="10346:[8330..8449).1" />
<Link Source="10060:[2320..2366).3" Target="10286:[30283..30330).3" />
<Link Source="10060:[2320..2366).3" Target="10346:[8330..8449).1" />
<Link Source="10060:[5621..5634).3" Target="10060:[2136..2158).3" />
<Link Source="10060:[5621..5634).3" Target="10346:[8330..8449).1" />
<Link Source="10060:[5691..5716).3" Target="10060:[2173..2198).3" />
<Link Source="10060:[5691..5716).3" Target="10346:[8330..8449).1" />
<Link Source="10060:[5731..5762).3" Target="10060:[2213..2244).3" />
<Link Source="10060:[5731..5762).3" Target="10346:[8330..8449).1" />
<Link Source="10060:[5777..5806).3" Target="10060:[2136..2158).3" />
<Link Source="10060:[5777..5806).3" Target="10346:[8330..8449).1" />
<Link Source="10060:[5882..5928).3" Target="10060:[2320..2366).3" />
<Link Source="10060:[5882..5928).3" Target="10346:[8330..8449).1" />
<Link Source="10060:[5954..5991).9" Target="10346:[8330..8449).1" />
<Link Source="10060:[5954..5991).10" Target="10286:[30070..30083).3" />
<Link Source="10060:[5954..5991).10" Target="10060:[5954..5991).9" />
<Link Source="10060:[5954..5991).10" Target="10346:[8330..8449).1" />
<Link Source="10060:[6005..6042).9" Target="10346:[8330..8449).1" />
<Link Source="10060:[6005..6042).10" Target="10060:[5621..5634).3" />
<Link Source="10060:[6005..6042).10" Target="10060:[6005..6042).9" />
<Link Source="10060:[6005..6042).10" Target="10346:[8330..8449).1" />
<Link Source="10060:[6056..6090).5" Target="10060:[5621..5634).3" />
<Link Source="10060:[6056..6090).5" Target="10345:[30223..30867).3" />
<Link Source="10060:[6056..6090).5" Target="10346:[8330..8449).1" />
<Link Source="10060:[6104..6172).7" Target="10060:[5621..5634).3" />
<Link Source="10060:[6104..6172).7" Target="10346:[8330..8449).1" />
<Link Source="10060:[6188..6219).5" Target="10346:[8330..8449).1" />
<Link Source="10060:[6814..6920).14" Target="10060:[5621..5634).3" />
<Link Source="10060:[6814..6920).14" Target="10286:[30070..30083).3" />
<Link Source="10060:[6814..6920).15" Target="10286:[30221..30268).3" />
<Link Source="10060:[6814..6920).15" Target="10286:[30070..30083).3" />
<Link Source="10060:[6814..6920).16" Target="10060:[5882..5928).3" />
<Link Source="10060:[6814..6920).16" Target="10286:[30070..30083).3" />
<Link Source="10060:[10202..10215).3" Target="10060:[6814..6920).14" />
<Link Source="10060:[10202..10215).3" Target="10286:[30070..30083).3" />
<Link Source="10060:[10265..10311).3" Target="10060:[6814..6920).16" />
<Link Source="10060:[10265..10311).3" Target="10286:[30070..30083).3" />
<Link Source="10060:[10337..10405).7" Target="10060:[10202..10215).3" />
<Link Source="10060:[10337..10405).7" Target="10286:[30070..30083).3" />
<Link Source="10060:[10419..10454).9" Target="10286:[30070..30083).3" />
<Link Source="10060:[10470..10516).3" Target="10060:[10202..10215).3" />
<Link Source="10060:[10470..10516).3" Target="10345:[30223..30867).3" />
<Link Source="10060:[10470..10516).3" Target="10286:[30070..30083).3" />
<Link Source="10060:[10532..10544).3" Target="10286:[30070..30083).3" />
<Link Source="10060:[10558..11295).3" Target="10286:[30070..30083).3" />
<Link Source="10060:[10558..11295).3" Target="10345:[30223..30867).3" />
<Link Source="10060:[11990..12013).3" Target="10286:[30070..30083).3" />
<Link Source="10060:[12078..12091).3" Target="10060:[10202..10215).3" />
<Link Source="10060:[12078..12091).3" Target="10286:[30070..30083).3" />
<Link Source="10060:[12117..12185).7" Target="10060:[12078..12091).3" />
<Link Source="10060:[12117..12185).7" Target="10286:[30070..30083).3" />
<Link Source="10060:[12199..12238).9" Target="10286:[30070..30083).3" />
<Link Source="10060:[12199..12238).10" Target="10060:[11990..12013).3" />
<Link Source="10060:[12199..12238).10" Target="10060:[12199..12238).9" />
<Link Source="10060:[12199..12238).10" Target="10286:[30070..30083).3" />
<Link Source="10346:[11710..11746).3" Target="10286:[30070..30083).3" />
<Link Source="10286:[2155..2260).5" Target="10345:[30223..30867).3" />
<Link Source="10286:[2155..2260).5" Target="10346:[11710..11746).3" />
<Link Source="10286:[2191..2245).17" Target="10286:[2155..2260).5" />
<Link Source="10286:[2191..2245).17" Target="10286:[30070..30083).3" />
<Link Source="10286:[2191..2245).17" Target="10346:[11710..11746).3" />
<Link Source="10286:[2191..2245).18" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).18" Target="10346:[11710..11746).3" />
<Link Source="10286:[2198..2244).5" Target="10346:[11710..11746).3" />
<Link Source="10298:[471..492).41" Target="10286:[2191..2245).17" />
<Link Source="10298:[471..492).41" Target="10286:[2198..2244).5" />
<Link Source="10298:[494..511).41" Target="10286:[2191..2245).18" />
<Link Source="10298:[494..511).41" Target="10286:[2198..2244).5" />
<Link Source="10345:[28225..28251).3" Target="10298:[471..492).41" />
<Link Source="10345:[28225..28251).3" Target="10286:[30070..30083).3" />
<Link Source="10345:[28927..28940).5" Target="10286:[30070..30083).3" />
<Link Source="10346:[12205..12212).3" Target="10286:[30070..30083).3" />
<Link Source="10312:[4685..4699).9" Target="10345:[30223..30867).3" />
<Link Source="10354:[3684..3818).22" Target="10307:[2672..2708).1" />
<Link Source="10354:[3684..3818).22" Target="10312:[4685..4699).9" />
<Link Source="10354:[3720..3803).161" Target="10354:[3684..3818).22" />
<Link Source="10354:[3720..3803).161" Target="10286:[30070..30083).3" />
<Link Source="10354:[3720..3803).161" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).161" Target="10312:[4685..4699).9" />
<Link Source="10312:[4680..4787).17" Target="10354:[3720..3803).161" />
<Link Source="10312:[4680..4787).17" Target="10345:[30223..30867).3" />
<Link Source="10312:[4749..4764).3" Target="10345:[30223..30867).3" />
<Link Source="10312:[4749..4764).3" Target="10312:[4680..4787).17" />
<Link Source="10312:[4826..5058).41" Target="10307:[2672..2708).1" />
<Link Source="10312:[4826..5058).41" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).41" Target="10345:[30223..30867).3" />
<Link Source="10312:[4826..5058).42" Target="10345:[30223..30867).3" />
<Link Source="10312:[5087..5101).3" Target="10312:[4749..4764).3" />
<Link Source="10312:[5087..5101).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[43799..44676).13" Target="10307:[2672..2708).1" />
<Link Source="10319:[43853..43873).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[41088..41107).3" Target="10319:[43799..44676).13" />
<Link Source="10319:[41088..41107).3" Target="10319:[43853..43873).3" />
<Link Source="10319:[41138..41158).3" Target="10319:[43853..43873).3" />
<Link Source="10354:[4919..5009).28" Target="10319:[41088..41107).3" />
<Link Source="10354:[4919..5009).28" Target="10319:[41138..41158).3" />
<Link Source="10354:[4094..4107).38" Target="10354:[4919..5009).28" />
<Link Source="10354:[4094..4107).38" Target="10060:[6814..6920).15" />
<Link Source="10354:[4094..4107).38" Target="10319:[41138..41158).3" />
<Link Source="10319:[41133..41220).5" Target="10354:[4094..4107).38" />
<Link Source="10319:[41133..41220).5" Target="10319:[43853..43873).3" />
<Link Source="10319:[41254..41268).3" Target="10319:[43853..43873).3" />
<Link Source="10354:[4525..4595).5" Target="10319:[41088..41107).3" />
<Link Source="10354:[4525..4595).5" Target="10319:[41254..41268).3" />
<Link Source="10354:[4561..4580).5" Target="10354:[4525..4595).5" />
<Link Source="10354:[4561..4580).5" Target="10060:[6814..6920).15" />
<Link Source="10354:[4561..4580).5" Target="10319:[41254..41268).3" />
<Link Source="10319:[41236..41680).9" Target="10354:[4561..4580).5" />
<Link Source="10319:[41236..41680).9" Target="10319:[43853..43873).3" />
<Link Source="10319:[41302..41665).3" Target="10319:[41236..41680).9" />
<Link Source="10319:[41302..41665).3" Target="10060:[6814..6920).15" />
<Link Source="10319:[41634..41646).5" Target="10319:[41302..41665).3" />
<Link Source="10319:[44751..44765).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[84201..84218).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[84233..84242).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[84257..84273).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[84288..84313).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[84374..84391).3" Target="10319:[44751..44765).3" />
<Link Source="10319:[84374..84391).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[84406..84447).3" Target="10319:[44751..44765).3" />
<Link Source="10319:[84406..84447).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[84462..84508).3" Target="10319:[44751..44765).3" />
<Link Source="10319:[84462..84508).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[84124..109887).3" Target="10307:[2672..2708).1" />
<Link Source="10319:[85320..85348).9" Target="10307:[2672..2708).1" />
<Link Source="10319:[85320..85348).10" Target="10319:[84257..84273).3" />
<Link Source="10319:[85320..85348).10" Target="10319:[85320..85348).9" />
<Link Source="10319:[85320..85348).10" Target="10307:[2672..2708).1" />
<Link Source="10319:[85366..85400).9" Target="10307:[2672..2708).1" />
<Link Source="10319:[85366..85400).10" Target="10319:[84288..84313).3" />
<Link Source="10319:[85366..85400).10" Target="10319:[85366..85400).9" />
<Link Source="10319:[85366..85400).10" Target="10307:[2672..2708).1" />
<Link Source="10319:[85467..85484).5" Target="10307:[2672..2708).1" />
<Link Source="10319:[104874..105336).7" Target="10060:[6814..6920).15" />
<Link Source="10319:[104874..105336).7" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).8" Target="10319:[104874..105336).7" />
<Link Source="10319:[104874..105336).8" Target="10319:[84124..109887).3" />
<Link Source="10319:[104874..105336).8" Target="10060:[6814..6920).15" />
<Link Source="10319:[105368..106708).3" Target="10319:[84201..84218).3" />
<Link Source="10319:[105368..106708).3" Target="10060:[6814..6920).15" />
<Link Source="10319:[105465..105535).7" Target="10319:[84288..84313).3" />
<Link Source="10319:[105465..105535).7" Target="10319:[105368..106708).3" />
<Link Source="10319:[105465..105535).8" Target="10319:[84257..84273).3" />
<Link Source="10319:[105465..105535).8" Target="10319:[105368..106708).3" />
<Link Source="10319:[76360..76385).2" Target="10319:[105465..105535).7" />
<Link Source="10319:[76360..76385).2" Target="10319:[105368..106708).3" />
<Link Source="10319:[76387..76402).2" Target="10319:[105465..105535).8" />
<Link Source="10319:[76387..76402).2" Target="10319:[105368..106708).3" />
<Link Source="10319:[76494..76582).5" Target="10319:[105368..106708).3" />
<Link Source="10319:[84691..84861).5" Target="10060:[6814..6920).15" />
<Link Source="10319:[84691..84861).5" Target="10319:[105368..106708).3" />
<Link Source="10319:[84691..84861).5" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).5" Target="10307:[2672..2708).1" />
<Link Source="10319:[84764..84846).13" Target="10319:[84257..84273).3" />
<Link Source="10319:[84764..84846).13" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84846).14" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84846).16" Target="10060:[6814..6920).15" />
<Link Source="10319:[84764..84846).16" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84846).17" Target="10319:[84288..84313).3" />
<Link Source="10319:[84764..84846).17" Target="10319:[84691..84861).5" />
<Link Source="10319:[84764..84845).3" Target="10319:[84691..84861).5" />
<Link Source="10306:[358886..358901).3" Target="10319:[84764..84846).13" />
<Link Source="10306:[358886..358901).3" Target="10319:[84764..84845).3" />
<Link Source="10306:[358903..358930).3" Target="10319:[84764..84846).14" />
<Link Source="10306:[358903..358930).3" Target="10319:[84764..84845).3" />
<Link Source="10306:[358932..358945).3" Target="10319:[84764..84846).16" />
<Link Source="10306:[358932..358945).3" Target="10319:[84764..84845).3" />
<Link Source="10306:[358947..358972).3" Target="10319:[84764..84846).17" />
<Link Source="10306:[358947..358972).3" Target="10319:[84764..84845).3" />
<Link Source="10306:[358838..360009).3" Target="10319:[84124..109887).3" />
<Link Source="10306:[358838..360009).3" Target="10319:[84764..84845).3" />
<Link Source="10306:[358998..359998).13" Target="10306:[358932..358945).3" />
<Link Source="10306:[358998..359998).13" Target="10319:[105368..106708).3" />
<Link Source="10306:[358998..359998).13" Target="10319:[84764..84845).3" />
<Link Source="10306:[358998..359998).14" Target="10319:[84764..84845).3" />
<Link Source="10319:[44948..45377).5" Target="10060:[6814..6920).15" />
<Link Source="10319:[44948..45377).5" Target="10319:[105368..106708).3" />
<Link Source="10319:[44948..45377).5" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).5" Target="10307:[2672..2708).1" />
<Link Source="10354:[11428..11441).4" Target="10307:[2672..2708).1" />
<Link Source="10319:[45408..45422).3" Target="10307:[2672..2708).1" />
<Link Source="10287:[2377..2471).5" Target="10060:[6814..6920).15" />
<Link Source="10287:[2377..2471).5" Target="10307:[2672..2708).1" />
<Link Source="10287:[791..833).5" Target="10319:[105368..106708).3" />
<Link Source="10287:[791..833).5" Target="10060:[6814..6920).15" />
<Link Source="10287:[912..927).3" Target="10060:[6814..6920).15" />
<Link Source="10287:[912..919).3" Target="10287:[912..927).3" />
<Link Source="10287:[912..919).3" Target="10060:[6814..6920).15" />
<Link Source="10287:[945..972).3" Target="10060:[6814..6920).15" />
<Link Source="10287:[945..963).3" Target="10287:[945..972).3" />
<Link Source="10287:[945..963).3" Target="10060:[6814..6920).15" />
<Link Source="10286:[21546..21561).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[21563..21583).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[22044..22069).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[22086..22108).3" Target="10286:[21546..21561).3" />
<Link Source="10286:[22086..22108).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[22110..22130).3" Target="10286:[21563..21583).3" />
<Link Source="10286:[22110..22130).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[8725..8866).1" Target="10319:[105368..106708).3" />
<Link Source="10286:[8761..8796).1" Target="10286:[8725..8866).1" />
<Link Source="10286:[8761..8796).1" Target="10319:[105368..106708).3" />
<Link Source="10286:[8821..8850).1" Target="10319:[105368..106708).3" />
<Link Source="10346:[7369..7588).4" Target="10286:[8725..8866).1" />
<Link Source="10346:[7369..7588).4" Target="10286:[8761..8796).1" />
<Link Source="10346:[7369..7588).4" Target="10286:[8821..8850).1" />
<Link Source="10346:[7562..7572).1" Target="10346:[7369..7588).4" />
<Link Source="10346:[7562..7572).1" Target="10286:[8761..8796).1" />
<Link Source="10286:[8814..8851).1" Target="10346:[7562..7572).1" />
<Link Source="10286:[8814..8851).1" Target="10319:[105368..106708).3" />
<Link Source="10286:[15616..15690).11" Target="10286:[8814..8851).1" />
<Link Source="10286:[15616..15690).11" Target="10319:[105368..106708).3" />
<Link Source="10286:[15616..15690).12" Target="10286:[8814..8851).1" />
<Link Source="10286:[15616..15690).12" Target="10346:[7562..7572).1" />
<Link Source="10286:[15616..15690).12" Target="EXTERNAL" />
<Link Source="10286:[15616..15690).12" Target="10319:[105368..106708).3" />
<Link Source="10286:[15715..15910).3" Target="10286:[8814..8851).1" />
<Link Source="10286:[15715..15910).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[23056..23081).3" Target="10286:[22044..22069).3" />
<Link Source="10286:[23056..23081).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[23124..23146).3" Target="10286:[22086..22108).3" />
<Link Source="10286:[23124..23146).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[23161..23181).3" Target="10286:[22110..22130).3" />
<Link Source="10286:[23161..23181).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[23281..23301).3" Target="10286:[8814..8851).1" />
<Link Source="10286:[23281..23301).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[23327..23364).6" Target="10286:[22044..22069).3" />
<Link Source="10286:[23327..23364).6" Target="10346:[7562..7572).1" />
<Link Source="10286:[23327..23364).6" Target="10319:[105368..106708).3" />
<Link Source="10286:[23380..23684).15" Target="10286:[22044..22069).3" />
<Link Source="10286:[23380..23684).15" Target="10286:[23327..23364).6" />
<Link Source="10286:[23380..23684).15" Target="EXTERNAL" />
<Link Source="10286:[23380..23684).15" Target="10319:[105368..106708).3" />
<Link Source="10286:[23893..24026).5" Target="10286:[22044..22069).3" />
<Link Source="10286:[23893..24026).5" Target="10286:[23327..23364).6" />
<Link Source="10286:[23893..24026).5" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).5" Target="10319:[105368..106708).3" />
<Link Source="10286:[24450..24529).11" Target="10286:[22044..22069).3" />
<Link Source="10286:[24450..24529).11" Target="10286:[8814..8851).1" />
<Link Source="10286:[24450..24529).11" Target="10286:[23327..23364).6" />
<Link Source="10286:[24450..24529).11" Target="10319:[105368..106708).3" />
<Link Source="10286:[24545..24641).5" Target="10286:[23161..23181).3" />
<Link Source="10286:[24545..24641).5" Target="10319:[105368..106708).3" />
<Link Source="10286:[24655..25349).3" Target="10286:[24545..24641).5" />
<Link Source="10286:[24655..25349).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[26910..26935).3" Target="10286:[23056..23081).3" />
<Link Source="10286:[26910..26935).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[26952..26974).3" Target="10286:[23124..23146).3" />
<Link Source="10286:[26952..26974).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[27002..27022).3" Target="10286:[23281..23301).3" />
<Link Source="10286:[27002..27022).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[27048..27088).9" Target="10319:[105368..106708).3" />
<Link Source="10286:[27048..27088).10" Target="10286:[26910..26935).3" />
<Link Source="10286:[27048..27088).10" Target="10286:[27048..27088).9" />
<Link Source="10286:[27048..27088).10" Target="10319:[105368..106708).3" />
<Link Source="10286:[27208..27236).5" Target="10319:[105368..106708).3" />
<Link Source="10286:[27250..27722).3" Target="10286:[24450..24529).11" />
<Link Source="10286:[27250..27722).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[27738..27845).7" Target="10319:[105368..106708).3" />
<Link Source="10286:[27738..27845).8" Target="10286:[27208..27236).5" />
<Link Source="10286:[27738..27845).8" Target="10286:[27738..27845).7" />
<Link Source="10286:[27738..27845).8" Target="10319:[105368..106708).3" />
<Link Source="10286:[27861..27873).3" Target="10286:[24450..24529).11" />
<Link Source="10286:[27861..27873).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[26281..26812).3" Target="10286:[27861..27873).3" />
<Link Source="10286:[26281..26812).3" Target="10319:[105368..106708).3" />
<Link Source="10286:[26450..26769).3" Target="10286:[24545..24641).5" />
<Link Source="10286:[26450..26769).3" Target="10286:[26281..26812).3" />
<Link Source="10287:[1680..1716).3" Target="10319:[105368..106708).3" />
<Link Source="10287:[1680..1716).3" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).3" Target="10287:[1680..1716).3" />
<Link Source="10287:[1683..1690).3" Target="10287:[912..919).3" />
<Link Source="10287:[1683..1690).3" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).5" Target="10287:[1683..1690).3" />
<Link Source="10287:[1683..1716).5" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).5" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).5" Target="10287:[1683..1716).5" />
<Link Source="10319:[51935..52244).5" Target="10319:[13969..14029).1" />
<Link Source="10286:[1605..1638).13" Target="10286:[24450..24529).11" />
<Link Source="10286:[1688..1781).19" Target="10286:[24450..24529).11" />
<Link Source="10286:[1688..1781).20" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).20" Target="10286:[24450..24529).11" />
<Link Source="10286:[1708..1779).4" Target="10286:[24450..24529).11" />
<Link Source="10298:[471..492).43" Target="10286:[1688..1781).19" />
<Link Source="10298:[471..492).43" Target="10286:[1708..1779).4" />
<Link Source="10298:[494..511).43" Target="10286:[1688..1781).20" />
<Link Source="10298:[494..511).43" Target="10286:[1708..1779).4" />
<Link Source="10286:[1820..1963).19" Target="10286:[24450..24529).11" />
<Link Source="10286:[1820..1963).20" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).20" Target="10286:[24450..24529).11" />
<Link Source="10286:[1840..1888).4" Target="10286:[24450..24529).11" />
<Link Source="10298:[471..492).44" Target="10286:[1820..1963).19" />
<Link Source="10298:[471..492).44" Target="10286:[1840..1888).4" />
<Link Source="10298:[494..511).44" Target="10286:[1820..1963).20" />
<Link Source="10298:[494..511).44" Target="10286:[1840..1888).4" />
<Link Source="10319:[42478..42805).10" Target="10286:[24450..24529).11" />
<Link Source="10319:[42821..42938).25" Target="10286:[24450..24529).11" />
<Link Source="10319:[42839..42937).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[63849..63870).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63849..63870).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63885..63919).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63885..63919).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63934..63945).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63934..63945).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63960..63969).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63960..63969).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63984..64009).4" Target="10319:[42821..42938).25" />
<Link Source="10319:[63984..64009).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[63768..64484).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[63768..64484).4" Target="10319:[42839..42937).4" />
<Link Source="10319:[64035..64445).13" Target="10319:[42839..42937).4" />
<Link Source="10319:[64035..64445).14" Target="10319:[63885..63919).4" />
<Link Source="10319:[64035..64445).14" Target="10319:[64035..64445).13" />
<Link Source="10319:[64035..64445).14" Target="10319:[42839..42937).4" />
<Link Source="10319:[64461..64473).7" Target="10319:[42839..42937).4" />
<Link Source="10319:[42821..42938).31" Target="10319:[64461..64473).7" />
<Link Source="10319:[42821..42938).31" Target="10286:[24450..24529).11" />
<Link Source="10319:[42952..43079).10" Target="10286:[24450..24529).11" />
<Link Source="10319:[42952..43079).11" Target="10319:[42821..42938).31" />
<Link Source="10319:[42952..43079).11" Target="10319:[42952..43079).10" />
<Link Source="10319:[42952..43079).11" Target="10286:[24450..24529).11" />
<Link Source="10354:[11312..11328).5" Target="10286:[24450..24529).11" />
<Link Source="10354:[3684..3818).23" Target="10286:[24450..24529).11" />
<Link Source="10354:[3684..3818).23" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).165" Target="10354:[3684..3818).23" />
<Link Source="10354:[3720..3803).165" Target="10286:[24450..24529).11" />
<Link Source="10354:[3720..3803).165" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).165" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).166" Target="10354:[11312..11328).5" />
<Link Source="10354:[3720..3803).167" Target="10354:[3684..3818).23" />
<Link Source="10354:[3720..3803).167" Target="10286:[24450..24529).11" />
<Link Source="10354:[3720..3803).167" Target="10354:[3720..3803).166" />
<Link Source="10354:[3720..3803).167" Target="10354:[11312..11328).5" />
<Link Source="10354:[11299..11330).13" Target="10354:[3720..3803).165" />
<Link Source="10354:[11299..11330).13" Target="10286:[24450..24529).11" />
<Link Source="10319:[50330..50355).4" Target="10286:[24450..24529).11" />
<Link Source="10312:[3905..3919).4" Target="10286:[24450..24529).11" />
<Link Source="10354:[3684..3818).24" Target="10286:[24450..24529).11" />
<Link Source="10354:[3684..3818).24" Target="10312:[3905..3919).4" />
<Link Source="10354:[3720..3803).173" Target="10354:[3684..3818).24" />
<Link Source="10354:[3720..3803).173" Target="10286:[24450..24529).11" />
<Link Source="10354:[3720..3803).173" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).173" Target="10312:[3905..3919).4" />
<Link Source="10354:[3720..3803).174" Target="10312:[3905..3919).4" />
<Link Source="10354:[3720..3803).175" Target="10354:[3684..3818).24" />
<Link Source="10354:[3720..3803).175" Target="10286:[24450..24529).11" />
<Link Source="10354:[3720..3803).175" Target="10354:[3720..3803).174" />
<Link Source="10354:[3720..3803).175" Target="10312:[3905..3919).4" />
<Link Source="10312:[3892..3921).10" Target="10354:[3720..3803).173" />
<Link Source="10312:[3892..3921).10" Target="10286:[24450..24529).11" />
<Link Source="10312:[3935..3968).13" Target="10286:[24450..24529).11" />
<Link Source="10312:[3948..3966).4" Target="10286:[24450..24529).11" />
<Link Source="10353:[4698..4724).8" Target="10312:[3935..3968).13" />
<Link Source="10353:[4698..4724).8" Target="10312:[3948..3966).4" />
<Link Source="10353:[4750..4847).15" Target="10353:[4698..4724).8" />
<Link Source="10353:[4750..4847).15" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).15" Target="10312:[3948..3966).4" />
<Link Source="10353:[4863..5000).29" Target="10353:[4698..4724).8" />
<Link Source="10353:[4863..5000).29" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).29" Target="10312:[3948..3966).4" />
<Link Source="10353:[4863..5000).30" Target="10312:[3948..3966).4" />
<Link Source="10353:[5079..5183).15" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).15" Target="10312:[3948..3966).4" />
<Link Source="10353:[5197..5323).22" Target="10353:[4698..4724).8" />
<Link Source="10353:[5197..5323).22" Target="10353:[5079..5183).15" />
<Link Source="10353:[5197..5323).22" Target="10312:[3948..3966).4" />
<Link Source="10353:[5485..5759).43" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).43" Target="10312:[3948..3966).4" />
<Link Source="10353:[5485..5759).44" Target="10353:[4698..4724).8" />
<Link Source="10353:[5485..5759).44" Target="10353:[5485..5759).43" />
<Link Source="10353:[5485..5759).44" Target="10312:[3948..3966).4" />
<Link Source="10353:[5485..5759).45" Target="10312:[3948..3966).4" />
<Link Source="10353:[5775..5979).29" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).29" Target="10312:[3948..3966).4" />
<Link Source="10353:[5775..5979).31" Target="10353:[4698..4724).8" />
<Link Source="10353:[5775..5979).31" Target="10353:[5775..5979).29" />
<Link Source="10353:[5775..5979).31" Target="10312:[3948..3966).4" />
<Link Source="10353:[5995..6029).22" Target="10353:[5775..5979).31" />
<Link Source="10353:[5995..6029).22" Target="10312:[3948..3966).4" />
<Link Source="10353:[6002..6028).8" Target="10312:[3948..3966).4" />
<Link Source="10353:[6343..6358).8" Target="10353:[5995..6029).22" />
<Link Source="10353:[6343..6358).8" Target="10353:[6002..6028).8" />
<Link Source="10353:[6384..6410).43" Target="10353:[6002..6028).8" />
<Link Source="10353:[6384..6410).44" Target="10353:[6343..6358).8" />
<Link Source="10353:[6384..6410).44" Target="10353:[6384..6410).43" />
<Link Source="10353:[6384..6410).44" Target="10353:[6002..6028).8" />
<Link Source="10312:[5188..5207).4" Target="10286:[24450..24529).11" />
<Link Source="10312:[5209..5220).4" Target="10286:[24450..24529).11" />
<Link Source="10312:[5222..5231).4" Target="10286:[24450..24529).11" />
<Link Source="10312:[5233..5272).4" Target="10286:[24450..24529).11" />
<Link Source="10312:[5274..5295).4" Target="10286:[24450..24529).11" />
<Link Source="10312:[5297..5318).4" Target="10286:[24450..24529).11" />
<Link Source="10312:[5320..5333).4" Target="10286:[24450..24529).11" />
<Link Source="10312:[5124..5404).4" Target="10286:[24450..24529).11" />
<Link Source="10312:[4685..4699).10" Target="10286:[24450..24529).11" />
<Link Source="10354:[3684..3818).25" Target="10286:[24450..24529).11" />
<Link Source="10354:[3684..3818).25" Target="10312:[4685..4699).10" />
<Link Source="10354:[3720..3803).181" Target="10354:[3684..3818).25" />
<Link Source="10354:[3720..3803).181" Target="10286:[24450..24529).11" />
<Link Source="10354:[3720..3803).181" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).181" Target="10312:[4685..4699).10" />
<Link Source="10354:[3720..3803).182" Target="10312:[4685..4699).10" />
<Link Source="10354:[3720..3803).183" Target="10354:[3684..3818).25" />
<Link Source="10354:[3720..3803).183" Target="10286:[24450..24529).11" />
<Link Source="10354:[3720..3803).183" Target="10354:[3720..3803).182" />
<Link Source="10354:[3720..3803).183" Target="10312:[4685..4699).10" />
<Link Source="10312:[4680..4787).19" Target="10354:[3720..3803).181" />
<Link Source="10312:[4680..4787).19" Target="10286:[24450..24529).11" />
<Link Source="10312:[4826..5058).46" Target="10286:[24450..24529).11" />
<Link Source="10312:[4826..5058).46" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).47" Target="10286:[24450..24529).11" />
<Link Source="10346:[10861..10875).5" Target="10286:[24450..24529).11" />
<Link Source="10354:[3684..3818).26" Target="10286:[24450..24529).11" />
<Link Source="10354:[3684..3818).26" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).189" Target="10354:[3684..3818).26" />
<Link Source="10354:[3720..3803).189" Target="10286:[24450..24529).11" />
<Link Source="10354:[3720..3803).189" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).189" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).190" Target="10346:[10861..10875).5" />
<Link Source="10354:[3720..3803).191" Target="10354:[3684..3818).26" />
<Link Source="10354:[3720..3803).191" Target="10286:[24450..24529).11" />
<Link Source="10354:[3720..3803).191" Target="10354:[3720..3803).190" />
<Link Source="10354:[3720..3803).191" Target="10346:[10861..10875).5" />
<Link Source="10346:[10848..10877).13" Target="10354:[3720..3803).189" />
<Link Source="10346:[10848..10877).13" Target="10286:[24450..24529).11" />
<Link Source="10346:[10897..10914).5" Target="10286:[24450..24529).11" />
<Link Source="10346:[7666..7775).5" Target="10286:[24450..24529).11" />
<Link Source="10346:[7666..7775).5" Target="10346:[10897..10914).5" />
<Link Source="10346:[7672..7773).13" Target="10346:[7666..7775).5" />
<Link Source="10346:[7672..7773).13" Target="10286:[24450..24529).11" />
<Link Source="10346:[7672..7773).13" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).13" Target="10346:[10897..10914).5" />
<Link Source="10346:[10893..11127).9" Target="10346:[7672..7773).13" />
<Link Source="10346:[10893..11127).9" Target="10286:[24450..24529).11" />
<Link Source="10346:[3525..3638).33" Target="10286:[24450..24529).11" />
<Link Source="10312:[7816..7829).5" Target="10286:[24450..24529).11" />
<Link Source="10312:[7903..7936).17" Target="10286:[24450..24529).11" />
<Link Source="10312:[7916..7934).5" Target="10286:[24450..24529).11" />
<Link Source="10353:[4698..4724).9" Target="10312:[7903..7936).17" />
<Link Source="10353:[4698..4724).9" Target="10312:[7916..7934).5" />
<Link Source="10353:[4750..4847).17" Target="10353:[4698..4724).9" />
<Link Source="10353:[4750..4847).17" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).17" Target="10312:[7916..7934).5" />
<Link Source="10353:[4863..5000).33" Target="10353:[4698..4724).9" />
<Link Source="10353:[4863..5000).33" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).33" Target="10312:[7916..7934).5" />
<Link Source="10353:[4863..5000).34" Target="10312:[7916..7934).5" />
<Link Source="10353:[5079..5183).17" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).17" Target="10312:[7916..7934).5" />
<Link Source="10353:[5197..5323).25" Target="10353:[4698..4724).9" />
<Link Source="10353:[5197..5323).25" Target="10353:[5079..5183).17" />
<Link Source="10353:[5197..5323).25" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).49" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).49" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).50" Target="10353:[4698..4724).9" />
<Link Source="10353:[5485..5759).50" Target="10353:[5485..5759).49" />
<Link Source="10353:[5485..5759).50" Target="10312:[7916..7934).5" />
<Link Source="10353:[5485..5759).51" Target="10312:[7916..7934).5" />
<Link Source="10353:[5775..5979).33" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).33" Target="10312:[7916..7934).5" />
<Link Source="10353:[5775..5979).35" Target="10353:[4698..4724).9" />
<Link Source="10353:[5775..5979).35" Target="10353:[5775..5979).33" />
<Link Source="10353:[5775..5979).35" Target="10312:[7916..7934).5" />
<Link Source="10353:[5995..6029).25" Target="10353:[5775..5979).35" />
<Link Source="10353:[5995..6029).25" Target="10312:[7916..7934).5" />
<Link Source="10353:[6002..6028).9" Target="10312:[7916..7934).5" />
<Link Source="10353:[6343..6358).9" Target="10353:[5995..6029).25" />
<Link Source="10353:[6343..6358).9" Target="10353:[6002..6028).9" />
<Link Source="10353:[6384..6410).49" Target="10353:[6002..6028).9" />
<Link Source="10353:[6384..6410).50" Target="10353:[6343..6358).9" />
<Link Source="10353:[6384..6410).50" Target="10353:[6384..6410).49" />
<Link Source="10353:[6384..6410).50" Target="10353:[6002..6028).9" />
<Link Source="10312:[7952..7977).17" Target="10286:[24450..24529).11" />
<Link Source="10312:[8594..8603).2" Target="10286:[24450..24529).11" />
<Link Source="10312:[8669..8690).2" Target="10286:[24450..24529).11" />
<Link Source="10312:[8692..8705).2" Target="10312:[7816..7829).5" />
<Link Source="10312:[8692..8705).2" Target="10286:[24450..24529).11" />
<Link Source="10312:[34797..34806).2" Target="10312:[8594..8603).2" />
<Link Source="10312:[34797..34806).2" Target="10286:[24450..24529).11" />
<Link Source="10312:[34911..34932).2" Target="10312:[8669..8690).2" />
<Link Source="10312:[34911..34932).2" Target="10286:[24450..24529).11" />
<Link Source="10312:[34947..34960).2" Target="10312:[8692..8705).2" />
<Link Source="10312:[34947..34960).2" Target="10286:[24450..24529).11" />
<Link Source="10312:[35403..35412).2" Target="10312:[34797..34806).2" />
<Link Source="10312:[35403..35412).2" Target="10286:[24450..24529).11" />
<Link Source="10312:[35517..35538).2" Target="10312:[34911..34932).2" />
<Link Source="10312:[35517..35538).2" Target="10286:[24450..24529).11" />
<Link Source="10312:[35553..35581).2" Target="10286:[24450..24529).11" />
<Link Source="10312:[35596..35609).2" Target="10312:[34947..34960).2" />
<Link Source="10312:[35596..35609).2" Target="10286:[24450..24529).11" />
<Link Source="10312:[35696..35731).5" Target="10286:[24450..24529).11" />
<Link Source="10312:[36067..36079).3" Target="10286:[24450..24529).11" />
<Link Source="10312:[33656..33675).3" Target="10286:[24450..24529).11" />
<Link Source="10312:[33707..33716).3" Target="10312:[35403..35412).2" />
<Link Source="10312:[33707..33716).3" Target="10286:[24450..24529).11" />
<Link Source="10312:[33754..33775).3" Target="10312:[35517..35538).2" />
<Link Source="10312:[33754..33775).3" Target="10286:[24450..24529).11" />
<Link Source="10312:[33777..33805).3" Target="10312:[35553..35581).2" />
<Link Source="10312:[33777..33805).3" Target="10286:[24450..24529).11" />
<Link Source="10312:[33807..33820).3" Target="10312:[35596..35609).2" />
<Link Source="10312:[33807..33820).3" Target="10286:[24450..24529).11" />
<Link Source="10312:[33870..33909).3" Target="10312:[35403..35412).2" />
<Link Source="10312:[33870..33909).3" Target="10286:[24450..24529).11" />
<Link Source="10312:[61608..61629).6" Target="10312:[33754..33775).3" />
<Link Source="10312:[61608..61629).6" Target="10286:[24450..24529).11" />
<Link Source="10312:[34022..34574).7" Target="10312:[35403..35412).2" />
<Link Source="10312:[34022..34574).7" Target="10286:[24450..24529).11" />
<Link Source="10312:[36278..36360).25" Target="10286:[24450..24529).11" />
<Link Source="10312:[36278..36360).25" Target="10312:[34797..34806).2" />
<Link Source="10312:[36278..36360).25" Target="10312:[35596..35609).2" />
<Link Source="10312:[36278..36360).25" Target="10312:[35403..35412).2" />
<Link Source="10354:[9012..9030).3" Target="10312:[36278..36360).25" />
<Link Source="10354:[9012..9030).3" Target="10286:[24450..24529).11" />
<Link Source="10354:[8981..9152).3" Target="10312:[36278..36360).25" />
<Link Source="10354:[8981..9152).3" Target="10286:[24450..24529).11" />
<Link Source="10354:[9060..9070).3" Target="10286:[24450..24529).11" />
<Link Source="10354:[4058..4122).43" Target="10354:[9012..9030).3" />
<Link Source="10354:[4058..4122).43" Target="10354:[9060..9070).3" />
<Link Source="10354:[9056..9141).9" Target="10354:[4058..4122).43" />
<Link Source="10354:[9056..9141).9" Target="10286:[24450..24529).11" />
<Link Source="10354:[9073..9077).3" Target="10286:[24450..24529).11" />
<Link Source="10354:[4058..4122).44" Target="10354:[8981..9152).3" />
<Link Source="10354:[4058..4122).44" Target="10354:[9073..9077).3" />
<Link Source="10354:[9056..9141).10" Target="10354:[4058..4122).44" />
<Link Source="10354:[9056..9141).10" Target="10286:[24450..24529).11" />
<Link Source="10354:[9056..9141).11" Target="10354:[9056..9141).9" />
<Link Source="10354:[9056..9141).11" Target="10354:[9056..9141).10" />
<Link Source="10354:[9056..9141).11" Target="10286:[24450..24529).11" />
<Link Source="10312:[36566..36625).3" Target="10286:[24450..24529).11" />
<Link Source="10312:[36643..36855).7" Target="10286:[24450..24529).11" />
<Link Source="10312:[36643..36855).8" Target="10312:[36566..36625).3" />
<Link Source="10312:[36643..36855).8" Target="10312:[36278..36360).25" />
<Link Source="10312:[36643..36855).8" Target="10312:[36643..36855).7" />
<Link Source="10312:[36643..36855).8" Target="10286:[24450..24529).11" />
<Link Source="10312:[37061..37078).3" Target="10286:[24450..24529).11" />
<Link Source="10354:[4094..4107).45" Target="10312:[37061..37078).3" />
<Link Source="10354:[4094..4107).45" Target="10312:[36278..36360).25" />
<Link Source="10312:[37029..37117).7" Target="10354:[4094..4107).45" />
<Link Source="10312:[37029..37117).7" Target="10286:[24450..24529).11" />
<Link Source="10312:[37258..37278).3" Target="10286:[24450..24529).11" />
<Link Source="10354:[4094..4107).46" Target="10312:[37258..37278).3" />
<Link Source="10354:[4094..4107).46" Target="10312:[36278..36360).25" />
<Link Source="10312:[37254..37416).7" Target="10354:[4094..4107).46" />
<Link Source="10312:[37254..37416).7" Target="10286:[24450..24529).11" />
<Link Source="10312:[37436..37988).9" Target="10286:[24450..24529).11" />
<Link Source="10312:[37436..37988).10" Target="10312:[34797..34806).2" />
<Link Source="10312:[37436..37988).10" Target="10312:[37436..37988).9" />
<Link Source="10312:[37436..37988).10" Target="10286:[24450..24529).11" />
<Link Source="10312:[38290..38338).3" Target="10286:[24450..24529).11" />
<Link Source="10306:[3345..3430).3" Target="10312:[35517..35538).2" />
<Link Source="10306:[3345..3430).3" Target="10312:[38290..38338).3" />
<Link Source="10306:[3358..3364).3" Target="10312:[38290..38338).3" />
<Link Source="10306:[3196..3249).15" Target="10306:[3345..3430).3" />
<Link Source="10306:[3196..3249).15" Target="10306:[3358..3364).3" />
<Link Source="10306:[3202..3247).57" Target="10306:[3196..3249).15" />
<Link Source="10306:[3202..3247).57" Target="10312:[36278..36360).25" />
<Link Source="10306:[3202..3247).57" Target="10306:[3358..3364).3" />
<Link Source="10306:[3351..3428).7" Target="10306:[3202..3247).57" />
<Link Source="10306:[3351..3428).7" Target="10312:[38290..38338).3" />
<Link Source="10312:[38286..38405).5" Target="10306:[3351..3428).7" />
<Link Source="10312:[38286..38405).5" Target="10286:[24450..24529).11" />
<Link Source="10312:[36067..36079).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[36097..36258).39" Target="10312:[35517..35538).2" />
<Link Source="10312:[36097..36258).39" Target="10312:[36278..36360).25" />
<Link Source="10312:[36097..36258).40" Target="10312:[35553..35581).2" />
<Link Source="10312:[36097..36258).40" Target="10312:[36278..36360).25" />
<Link Source="10312:[33656..33675).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[33707..33716).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[33754..33775).4" Target="10312:[36097..36258).39" />
<Link Source="10312:[33754..33775).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[33777..33805).4" Target="10312:[36097..36258).40" />
<Link Source="10312:[33777..33805).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[33807..33820).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[33870..33909).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[61608..61629).7" Target="10312:[33754..33775).4" />
<Link Source="10312:[61608..61629).7" Target="10312:[36278..36360).25" />
<Link Source="10312:[34022..34574).10" Target="10312:[36278..36360).25" />
<Link Source="10354:[9012..9030).4" Target="10312:[36278..36360).25" />
<Link Source="10354:[8981..9152).4" Target="10312:[36278..36360).25" />
<Link Source="10354:[9060..9070).4" Target="10312:[36278..36360).25" />
<Link Source="10354:[4058..4122).48" Target="10354:[9012..9030).4" />
<Link Source="10354:[4058..4122).48" Target="10354:[9060..9070).4" />
<Link Source="10354:[9056..9141).13" Target="10354:[4058..4122).48" />
<Link Source="10354:[9056..9141).13" Target="10312:[36278..36360).25" />
<Link Source="10354:[9073..9077).4" Target="10312:[36278..36360).25" />
<Link Source="10354:[4058..4122).49" Target="10354:[8981..9152).4" />
<Link Source="10354:[4058..4122).49" Target="10354:[9073..9077).4" />
<Link Source="10354:[9056..9141).14" Target="10354:[4058..4122).49" />
<Link Source="10354:[9056..9141).14" Target="10312:[36278..36360).25" />
<Link Source="10354:[9056..9141).15" Target="10354:[9056..9141).13" />
<Link Source="10354:[9056..9141).15" Target="10354:[9056..9141).14" />
<Link Source="10354:[9056..9141).15" Target="10312:[36278..36360).25" />
<Link Source="10312:[36566..36625).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[36643..36855).10" Target="10312:[36278..36360).25" />
<Link Source="10312:[36643..36855).11" Target="10312:[36566..36625).4" />
<Link Source="10312:[36643..36855).11" Target="10312:[36278..36360).25" />
<Link Source="10312:[36643..36855).11" Target="10312:[36643..36855).10" />
<Link Source="10312:[37061..37078).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[37029..37117).10" Target="10312:[37061..37078).4" />
<Link Source="10312:[37029..37117).10" Target="10312:[36278..36360).25" />
<Link Source="10312:[37258..37278).4" Target="10312:[36278..36360).25" />
<Link Source="10312:[37254..37416).10" Target="10312:[37258..37278).4" />
<Link Source="10312:[37254..37416).10" Target="10312:[36278..36360).25" />
<Link Source="10312:[37436..37988).13" Target="10312:[36278..36360).25" />
<Link Source="10312:[38290..38338).4" Target="10312:[36278..36360).25" />
<Link Source="10306:[3345..3430).4" Target="10312:[35517..35538).2" />
<Link Source="10306:[3345..3430).4" Target="10312:[38290..38338).4" />
<Link Source="10306:[3358..3364).4" Target="10312:[38290..38338).4" />
<Link Source="10306:[3196..3249).16" Target="10306:[3345..3430).4" />
<Link Source="10306:[3196..3249).16" Target="10306:[3358..3364).4" />
<Link Source="10306:[3351..3428).10" Target="10306:[3196..3249).16" />
<Link Source="10306:[3351..3428).10" Target="10312:[38290..38338).4" />
<Link Source="10312:[38286..38405).7" Target="10306:[3351..3428).10" />
<Link Source="10312:[38286..38405).7" Target="10312:[36278..36360).25" />
<Link Source="10312:[38756..38772).2" Target="10312:[36278..36360).25" />
<Link Source="10312:[38756..38772).2" Target="10286:[24450..24529).11" />
<Link Source="10354:[11428..11441).5" Target="10286:[24450..24529).11" />
<Link Source="10312:[38786..38797).2" Target="10286:[24450..24529).11" />
<Link Source="10345:[29004..29025).2" Target="10286:[24450..24529).11" />
<Link Source="10345:[29100..29109).2" Target="10286:[24450..24529).11" />
<Link Source="10345:[29124..29163).2" Target="10286:[24450..24529).11" />
<Link Source="10345:[29214..29227).2" Target="10286:[24450..24529).11" />
<Link Source="10345:[29788..29809).2" Target="10345:[29004..29025).2" />
<Link Source="10345:[29788..29809).2" Target="10286:[24450..24529).11" />
<Link Source="10345:[29824..29843).2" Target="10345:[29004..29025).2" />
<Link Source="10345:[29824..29843).2" Target="10286:[24450..24529).11" />
<Link Source="10345:[29884..29893).2" Target="10345:[29100..29109).2" />
<Link Source="10345:[29884..29893).2" Target="10286:[24450..24529).11" />
<Link Source="10345:[29908..29947).2" Target="10345:[29124..29163).2" />
<Link Source="10345:[29908..29947).2" Target="10286:[24450..24529).11" />
<Link Source="10345:[29962..29983).2" Target="10345:[29004..29025).2" />
<Link Source="10345:[29962..29983).2" Target="10286:[24450..24529).11" />
<Link Source="10345:[29998..30011).2" Target="10345:[29214..29227).2" />
<Link Source="10345:[29998..30011).2" Target="10286:[24450..24529).11" />
<Link Source="10345:[30127..30163).2" Target="10286:[24450..24529).11" />
<Link Source="10286:[2155..2260).6" Target="10345:[29788..29809).2" />
<Link Source="10286:[2155..2260).6" Target="10345:[30127..30163).2" />
<Link Source="10286:[2191..2245).21" Target="10286:[2155..2260).6" />
<Link Source="10286:[2191..2245).21" Target="10312:[36278..36360).25" />
<Link Source="10286:[2191..2245).21" Target="10345:[30127..30163).2" />
<Link Source="10286:[2191..2245).22" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).22" Target="10345:[30127..30163).2" />
<Link Source="10286:[2198..2244).6" Target="10345:[30127..30163).2" />
<Link Source="10298:[471..492).47" Target="10286:[2191..2245).21" />
<Link Source="10298:[471..492).47" Target="10286:[2198..2244).6" />
<Link Source="10298:[494..511).47" Target="10286:[2191..2245).22" />
<Link Source="10298:[494..511).47" Target="10286:[2198..2244).6" />
<Link Source="10345:[30098..30164).3" Target="10298:[471..492).47" />
<Link Source="10345:[30098..30164).3" Target="10286:[24450..24529).11" />
<Link Source="10345:[30223..30867).7" Target="10286:[24450..24529).11" />
<Link Source="10345:[30223..30867).7" Target="10312:[36278..36360).25" />
<Link Source="10345:[30223..30867).7" Target="10345:[29004..29025).2" />
<Link Source="10345:[30883..31655).4" Target="10286:[24450..24529).11" />
<Link Source="10345:[30883..31655).4" Target="10345:[30223..30867).7" />
<Link Source="10354:[4094..4107).53" Target="10312:[37061..37078).3" />
<Link Source="10354:[4094..4107).53" Target="10345:[30223..30867).7" />
<Link Source="10345:[29566..29700).15" Target="10345:[29100..29109).2" />
<Link Source="10345:[29566..29700).15" Target="10354:[4094..4107).53" />
<Link Source="10345:[29566..29700).16" Target="10345:[29124..29163).2" />
<Link Source="10345:[29566..29700).16" Target="10354:[4094..4107).53" />
<Link Source="10345:[29566..29700).18" Target="10345:[29214..29227).2" />
<Link Source="10345:[29566..29700).18" Target="10354:[4094..4107).53" />
<Link Source="10345:[31734..31789).2" Target="10354:[4094..4107).53" />
<Link Source="10345:[31804..31825).2" Target="10354:[4094..4107).53" />
<Link Source="10345:[31840..31859).2" Target="10354:[4094..4107).53" />
<Link Source="10345:[31874..31885).2" Target="10354:[4094..4107).53" />
<Link Source="10345:[31900..31909).2" Target="10345:[29566..29700).15" />
<Link Source="10345:[31900..31909).2" Target="10354:[4094..4107).53" />
<Link Source="10345:[31924..31963).2" Target="10345:[29566..29700).16" />
<Link Source="10345:[31924..31963).2" Target="10354:[4094..4107).53" />
<Link Source="10345:[31978..31999).2" Target="10354:[4094..4107).53" />
<Link Source="10345:[32014..32027).2" Target="10345:[29566..29700).18" />
<Link Source="10345:[32014..32027).2" Target="10354:[4094..4107).53" />
<Link Source="10345:[32114..32230).5" Target="10345:[31804..31825).2" />
<Link Source="10345:[32114..32230).5" Target="10345:[30223..30867).7" />
<Link Source="10345:[32114..32230).5" Target="10354:[4094..4107).53" />
<Link Source="10345:[32114..32230).6" Target="EXTERNAL" />
<Link Source="10345:[32114..32230).6" Target="10354:[4094..4107).53" />
<Link Source="10345:[32118..32174).2" Target="10354:[4094..4107).53" />
<Link Source="10298:[471..492).48" Target="10345:[32114..32230).5" />
<Link Source="10298:[471..492).48" Target="10345:[32118..32174).2" />
<Link Source="10298:[494..511).48" Target="10345:[32114..32230).6" />
<Link Source="10298:[494..511).48" Target="10345:[32118..32174).2" />
<Link Source="10345:[32275..32311).2" Target="10354:[4094..4107).53" />
<Link Source="10286:[2155..2260).7" Target="10345:[31804..31825).2" />
<Link Source="10286:[2155..2260).7" Target="10345:[32275..32311).2" />
<Link Source="10286:[2191..2245).25" Target="10286:[2155..2260).7" />
<Link Source="10286:[2191..2245).25" Target="10345:[30223..30867).7" />
<Link Source="10286:[2191..2245).25" Target="10345:[32275..32311).2" />
<Link Source="10286:[2191..2245).26" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).26" Target="10345:[32275..32311).2" />
<Link Source="10286:[2198..2244).7" Target="10345:[32275..32311).2" />
<Link Source="10298:[471..492).49" Target="10286:[2191..2245).25" />
<Link Source="10298:[471..492).49" Target="10286:[2198..2244).7" />
<Link Source="10298:[494..511).49" Target="10286:[2191..2245).26" />
<Link Source="10298:[494..511).49" Target="10286:[2198..2244).7" />
<Link Source="10345:[32246..32312).3" Target="10298:[471..492).49" />
<Link Source="10345:[32246..32312).3" Target="10354:[4094..4107).53" />
<Link Source="10345:[32328..33465).4" Target="10345:[31734..31789).2" />
<Link Source="10345:[32328..33465).4" Target="10354:[4094..4107).53" />
<Link Source="10354:[3720..3803).205" Target="10354:[3684..3818).25" />
<Link Source="10354:[3720..3803).205" Target="10345:[30223..30867).7" />
<Link Source="10354:[3720..3803).205" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).205" Target="10312:[4685..4699).10" />
<Link Source="10354:[3720..3803).207" Target="10354:[3684..3818).25" />
<Link Source="10354:[3720..3803).207" Target="10345:[30223..30867).7" />
<Link Source="10354:[3720..3803).207" Target="10354:[3720..3803).182" />
<Link Source="10354:[3720..3803).207" Target="10312:[4685..4699).10" />
<Link Source="10312:[4680..4787).21" Target="10354:[3720..3803).205" />
<Link Source="10312:[4680..4787).21" Target="10286:[24450..24529).11" />
<Link Source="10346:[10861..10875).6" Target="10354:[4094..4107).53" />
<Link Source="10354:[3684..3818).29" Target="10354:[4094..4107).53" />
<Link Source="10354:[3684..3818).29" Target="10346:[10861..10875).6" />
<Link Source="10354:[3720..3803).213" Target="10354:[3684..3818).29" />
<Link Source="10354:[3720..3803).213" Target="10345:[30223..30867).7" />
<Link Source="10354:[3720..3803).213" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).213" Target="10346:[10861..10875).6" />
<Link Source="10354:[3720..3803).214" Target="10346:[10861..10875).6" />
<Link Source="10354:[3720..3803).215" Target="10354:[3684..3818).29" />
<Link Source="10354:[3720..3803).215" Target="10345:[30223..30867).7" />
<Link Source="10354:[3720..3803).215" Target="10354:[3720..3803).214" />
<Link Source="10354:[3720..3803).215" Target="10346:[10861..10875).6" />
<Link Source="10346:[10848..10877).16" Target="10354:[3720..3803).213" />
<Link Source="10346:[10848..10877).16" Target="10354:[4094..4107).53" />
<Link Source="10346:[10897..10914).6" Target="10354:[4094..4107).53" />
<Link Source="10346:[7666..7775).6" Target="10354:[4094..4107).53" />
<Link Source="10346:[7666..7775).6" Target="10346:[10897..10914).6" />
<Link Source="10346:[7672..7773).16" Target="10346:[7666..7775).6" />
<Link Source="10346:[7672..7773).16" Target="10345:[30223..30867).7" />
<Link Source="10346:[7672..7773).16" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).16" Target="10346:[10897..10914).6" />
<Link Source="10346:[10893..11127).11" Target="10346:[7672..7773).16" />
<Link Source="10346:[10893..11127).11" Target="10354:[4094..4107).53" />
<Link Source="10346:[3525..3638).40" Target="10354:[4094..4107).53" />
<Link Source="10312:[7903..7936).21" Target="10354:[4094..4107).53" />
<Link Source="10312:[7916..7934).6" Target="10354:[4094..4107).53" />
<Link Source="10353:[4698..4724).10" Target="10312:[7903..7936).21" />
<Link Source="10353:[4698..4724).10" Target="10312:[7916..7934).6" />
<Link Source="10353:[4750..4847).19" Target="10353:[4698..4724).10" />
<Link Source="10353:[4750..4847).19" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).19" Target="10312:[7916..7934).6" />
<Link Source="10353:[4863..5000).37" Target="10353:[4698..4724).10" />
<Link Source="10353:[4863..5000).37" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).37" Target="10312:[7916..7934).6" />
<Link Source="10353:[4863..5000).38" Target="10312:[7916..7934).6" />
<Link Source="10353:[5079..5183).19" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).19" Target="10312:[7916..7934).6" />
<Link Source="10353:[5197..5323).28" Target="10353:[4698..4724).10" />
<Link Source="10353:[5197..5323).28" Target="10353:[5079..5183).19" />
<Link Source="10353:[5197..5323).28" Target="10312:[7916..7934).6" />
<Link Source="10353:[5485..5759).55" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).55" Target="10312:[7916..7934).6" />
<Link Source="10353:[5485..5759).56" Target="10353:[4698..4724).10" />
<Link Source="10353:[5485..5759).56" Target="10353:[5485..5759).55" />
<Link Source="10353:[5485..5759).56" Target="10312:[7916..7934).6" />
<Link Source="10353:[5485..5759).57" Target="10312:[7916..7934).6" />
<Link Source="10353:[5775..5979).37" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).37" Target="10312:[7916..7934).6" />
<Link Source="10353:[5775..5979).39" Target="10353:[4698..4724).10" />
<Link Source="10353:[5775..5979).39" Target="10353:[5775..5979).37" />
<Link Source="10353:[5775..5979).39" Target="10312:[7916..7934).6" />
<Link Source="10353:[5995..6029).28" Target="10353:[5775..5979).39" />
<Link Source="10353:[5995..6029).28" Target="10312:[7916..7934).6" />
<Link Source="10353:[6002..6028).10" Target="10312:[7916..7934).6" />
<Link Source="10353:[6343..6358).10" Target="10353:[5995..6029).28" />
<Link Source="10353:[6343..6358).10" Target="10353:[6002..6028).10" />
<Link Source="10353:[6384..6410).55" Target="10353:[6002..6028).10" />
<Link Source="10353:[6384..6410).56" Target="10353:[6343..6358).10" />
<Link Source="10353:[6384..6410).56" Target="10353:[6384..6410).55" />
<Link Source="10353:[6384..6410).56" Target="10353:[6002..6028).10" />
<Link Source="10312:[7952..7977).21" Target="10354:[4094..4107).53" />
<Link Source="10312:[19087..19100).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[61608..61629).8" Target="10354:[4094..4107).53" />
<Link Source="10312:[63473..63501).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[63503..63516).4" Target="10312:[19087..19100).4" />
<Link Source="10312:[63503..63516).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[63566..63612).4" Target="10312:[19087..19100).4" />
<Link Source="10312:[63566..63612).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[63638..63668).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[63682..63706).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[80978..80991).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[80993..81002).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[81004..81017).4" Target="10312:[63503..63516).4" />
<Link Source="10312:[81004..81017).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[81019..81040).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[81042..81069).4" Target="10312:[63682..63706).4" />
<Link Source="10312:[81042..81069).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[81095..84034).4" Target="10312:[80978..80991).4" />
<Link Source="10312:[81095..84034).4" Target="10345:[30223..30867).7" />
<Link Source="10312:[81095..84034).4" Target="10354:[4094..4107).53" />
<Link Source="10312:[81196..82523).22" Target="10312:[81095..84034).4" />
<Link Source="10312:[81196..82523).23" Target="10312:[80993..81002).4" />
<Link Source="10312:[81196..82523).23" Target="10312:[81196..82523).22" />
<Link Source="10312:[81196..82523).23" Target="10312:[81095..84034).4" />
<Link Source="10312:[81196..82523).24" Target="10312:[81019..81040).4" />
<Link Source="10312:[81196..82523).24" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).24" Target="10312:[81095..84034).4" />
<Link Source="10312:[81196..82523).27" Target="10312:[81196..82523).23" />
<Link Source="10312:[81196..82523).27" Target="10312:[81196..82523).24" />
<Link Source="10312:[81196..82523).27" Target="10312:[81095..84034).4" />
<Link Source="10312:[81319..81371).4" Target="10312:[80978..80991).4" />
<Link Source="10312:[81319..81371).4" Target="10312:[81196..82523).27" />
<Link Source="10312:[81495..81570).16" Target="10312:[81319..81371).4" />
<Link Source="10312:[81495..81570).16" Target="10345:[30223..30867).7" />
<Link Source="10312:[81495..81570).16" Target="10354:[4094..4107).53" />
<Link Source="10312:[81495..81570).16" Target="10312:[81196..82523).27" />
<Link Source="10312:[81495..81570).17" Target="10312:[81319..81371).4" />
<Link Source="10312:[81495..81570).17" Target="10312:[81196..82523).27" />
<Link Source="10312:[81596..82500).19" Target="10312:[81319..81371).4" />
<Link Source="10312:[81596..82500).19" Target="10345:[30223..30867).7" />
<Link Source="10312:[81596..82500).19" Target="10354:[4094..4107).53" />
<Link Source="10312:[81596..82500).19" Target="10312:[80993..81002).4" />
<Link Source="10312:[81596..82500).19" Target="10312:[81196..82523).27" />
<Link Source="10312:[81596..82500).20" Target="10312:[81019..81040).4" />
<Link Source="10312:[81596..82500).20" Target="10312:[81196..82523).27" />
<Link Source="10312:[81628..81659).4" Target="10312:[81196..82523).27" />
<Link Source="10353:[7504..7530).8" Target="10312:[81596..82500).20" />
<Link Source="10353:[7504..7530).8" Target="10312:[81628..81659).4" />
<Link Source="10312:[81596..82500).23" Target="10312:[81596..82500).19" />
<Link Source="10312:[81596..82500).23" Target="10353:[7504..7530).8" />
<Link Source="10312:[81596..82500).23" Target="10312:[81196..82523).27" />
<Link Source="10312:[84050..84066).7" Target="10354:[4094..4107).53" />
<Link Source="10312:[66177..69285).40" Target="10312:[63473..63501).4" />
<Link Source="10312:[66177..69285).40" Target="10312:[63682..63706).4" />
<Link Source="10312:[66291..66342).4" Target="10312:[63682..63706).4" />
<Link Source="10312:[75301..75322).4" Target="10312:[63682..63706).4" />
<Link Source="10312:[75301..75322).4" Target="10312:[66291..66342).4" />
<Link Source="10312:[75324..75352).4" Target="10312:[66177..69285).40" />
<Link Source="10312:[75324..75352).4" Target="10312:[66291..66342).4" />
<Link Source="10312:[75735..75866).16" Target="10312:[75301..75322).4" />
<Link Source="10312:[75735..75866).16" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).16" Target="10312:[66291..66342).4" />
<Link Source="10312:[75735..75866).17" Target="10312:[66291..66342).4" />
<Link Source="10312:[75742..75804).4" Target="10312:[75735..75866).16" />
<Link Source="10312:[75742..75804).4" Target="10312:[66291..66342).4" />
<Link Source="10312:[75735..75866).19" Target="10312:[75324..75352).4" />
<Link Source="10312:[75735..75866).19" Target="10312:[75742..75804).4" />
<Link Source="10312:[66177..69285).43" Target="10312:[63638..63668).4" />
<Link Source="10312:[66177..69285).43" Target="10312:[63682..63706).4" />
<Link Source="10312:[66177..69285).44" Target="10312:[19087..19100).4" />
<Link Source="10312:[66177..69285).44" Target="10312:[63682..63706).4" />
<Link Source="10312:[66177..69285).45" Target="10312:[63566..63612).4" />
<Link Source="10312:[66177..69285).45" Target="10312:[63682..63706).4" />
<Link Source="10312:[77543..77571).4" Target="10312:[75735..75866).19" />
<Link Source="10312:[77543..77571).4" Target="10312:[63682..63706).4" />
<Link Source="10312:[77573..77604).4" Target="10312:[66177..69285).43" />
<Link Source="10312:[77573..77604).4" Target="10312:[63682..63706).4" />
<Link Source="10312:[77654..77700).4" Target="10312:[66177..69285).45" />
<Link Source="10312:[77654..77700).4" Target="10312:[63682..63706).4" />
<Link Source="10312:[77726..77892).13" Target="10312:[63682..63706).4" />
<Link Source="10312:[77726..77892).13" Target="10354:[4094..4107).53" />
<Link Source="10312:[77726..77892).14" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).14" Target="10312:[63682..63706).4" />
<Link Source="10312:[77730..77782).4" Target="10312:[63682..63706).4" />
<Link Source="10298:[471..492).53" Target="10312:[77726..77892).13" />
<Link Source="10298:[471..492).53" Target="10312:[77730..77782).4" />
<Link Source="10298:[494..511).53" Target="10312:[77726..77892).14" />
<Link Source="10298:[494..511).53" Target="10312:[77730..77782).4" />
<Link Source="10312:[78402..78430).4" Target="10312:[77543..77571).4" />
<Link Source="10312:[78402..78430).4" Target="10312:[63682..63706).4" />
<Link Source="10312:[78432..78463).4" Target="10312:[77573..77604).4" />
<Link Source="10312:[78432..78463).4" Target="10312:[63682..63706).4" />
<Link Source="10312:[78513..78552).4" Target="10312:[77654..77700).4" />
<Link Source="10312:[78513..78552).4" Target="10312:[63682..63706).4" />
<Link Source="10346:[8034..8062).2" Target="10312:[78402..78430).4" />
<Link Source="10346:[8034..8062).2" Target="10312:[63682..63706).4" />
<Link Source="10346:[8064..8095).2" Target="10312:[78432..78463).4" />
<Link Source="10346:[8064..8095).2" Target="10312:[63682..63706).4" />
<Link Source="10346:[8145..8184).2" Target="10312:[78513..78552).4" />
<Link Source="10346:[8145..8184).2" Target="10312:[63682..63706).4" />
<Link Source="10286:[30098..30120).4" Target="10312:[63682..63706).4" />
<Link Source="10286:[30135..30160).4" Target="10346:[8034..8062).2" />
<Link Source="10286:[30135..30160).4" Target="10312:[63682..63706).4" />
<Link Source="10286:[30175..30206).4" Target="10346:[8064..8095).2" />
<Link Source="10286:[30175..30206).4" Target="10312:[63682..63706).4" />
<Link Source="10286:[30283..30330).4" Target="10312:[63682..63706).4" />
<Link Source="10286:[30012..30691).4" Target="10312:[63682..63706).4" />
<Link Source="10286:[30356..30522).13" Target="10286:[30012..30691).4" />
<Link Source="10286:[30356..30522).13" Target="10354:[4094..4107).53" />
<Link Source="10286:[30356..30522).13" Target="10312:[63682..63706).4" />
<Link Source="10286:[30356..30522).14" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).14" Target="10312:[63682..63706).4" />
<Link Source="10286:[30360..30412).4" Target="10312:[63682..63706).4" />
<Link Source="10298:[471..492).54" Target="10286:[30356..30522).13" />
<Link Source="10298:[471..492).54" Target="10286:[30360..30412).4" />
<Link Source="10298:[494..511).54" Target="10286:[30356..30522).14" />
<Link Source="10298:[494..511).54" Target="10286:[30360..30412).4" />
<Link Source="10060:[2136..2158).4" Target="10286:[30098..30120).4" />
<Link Source="10060:[2136..2158).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[2173..2198).4" Target="10286:[30135..30160).4" />
<Link Source="10060:[2173..2198).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[2213..2244).4" Target="10286:[30175..30206).4" />
<Link Source="10060:[2213..2244).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[2320..2366).4" Target="10286:[30283..30330).4" />
<Link Source="10060:[2320..2366).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[5621..5634).4" Target="10060:[2136..2158).4" />
<Link Source="10060:[5621..5634).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[5691..5716).4" Target="10060:[2173..2198).4" />
<Link Source="10060:[5691..5716).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[5731..5762).4" Target="10060:[2213..2244).4" />
<Link Source="10060:[5731..5762).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[5777..5806).4" Target="10060:[2136..2158).4" />
<Link Source="10060:[5777..5806).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[5882..5928).4" Target="10060:[2320..2366).4" />
<Link Source="10060:[5882..5928).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[5954..5991).13" Target="10312:[63682..63706).4" />
<Link Source="10060:[6005..6042).13" Target="10312:[63682..63706).4" />
<Link Source="10060:[6005..6042).14" Target="10060:[5621..5634).4" />
<Link Source="10060:[6005..6042).14" Target="10060:[6005..6042).13" />
<Link Source="10060:[6005..6042).14" Target="10312:[63682..63706).4" />
<Link Source="10060:[6056..6090).7" Target="10060:[5621..5634).4" />
<Link Source="10060:[6056..6090).7" Target="10354:[4094..4107).53" />
<Link Source="10060:[6056..6090).7" Target="10312:[63682..63706).4" />
<Link Source="10060:[6104..6172).10" Target="10060:[5621..5634).4" />
<Link Source="10060:[6104..6172).10" Target="10312:[63682..63706).4" />
<Link Source="10060:[6188..6219).7" Target="10312:[63682..63706).4" />
<Link Source="10060:[10202..10215).4" Target="10060:[5621..5634).4" />
<Link Source="10060:[10202..10215).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[10265..10311).4" Target="10060:[5882..5928).4" />
<Link Source="10060:[10265..10311).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[10337..10405).10" Target="10060:[10202..10215).4" />
<Link Source="10060:[10337..10405).10" Target="10312:[63682..63706).4" />
<Link Source="10060:[10419..10454).13" Target="10312:[63682..63706).4" />
<Link Source="10060:[10470..10516).4" Target="10060:[10202..10215).4" />
<Link Source="10060:[10470..10516).4" Target="10354:[4094..4107).53" />
<Link Source="10060:[10470..10516).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[10532..10544).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[10558..11295).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[10558..11295).4" Target="10345:[30223..30867).7" />
<Link Source="10060:[10558..11295).4" Target="10354:[4094..4107).53" />
<Link Source="10060:[11990..12013).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[12078..12091).4" Target="10060:[10202..10215).4" />
<Link Source="10060:[12078..12091).4" Target="10312:[63682..63706).4" />
<Link Source="10060:[12117..12185).10" Target="10060:[12078..12091).4" />
<Link Source="10060:[12117..12185).10" Target="10312:[63682..63706).4" />
<Link Source="10060:[12199..12238).13" Target="10312:[63682..63706).4" />
<Link Source="10060:[12199..12238).14" Target="10060:[11990..12013).4" />
<Link Source="10060:[12199..12238).14" Target="10060:[12199..12238).13" />
<Link Source="10060:[12199..12238).14" Target="10312:[63682..63706).4" />
<Link Source="10346:[11710..11746).4" Target="10286:[30098..30120).4" />
<Link Source="10286:[2155..2260).8" Target="10354:[4094..4107).53" />
<Link Source="10286:[2155..2260).8" Target="10346:[11710..11746).4" />
<Link Source="10286:[2191..2245).29" Target="10286:[2155..2260).8" />
<Link Source="10286:[2191..2245).29" Target="10286:[30098..30120).4" />
<Link Source="10286:[2191..2245).29" Target="10346:[11710..11746).4" />
<Link Source="10286:[2191..2245).30" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).30" Target="10346:[11710..11746).4" />
<Link Source="10286:[2198..2244).8" Target="10346:[11710..11746).4" />
<Link Source="10298:[471..492).56" Target="10286:[2191..2245).29" />
<Link Source="10298:[471..492).56" Target="10286:[2198..2244).8" />
<Link Source="10298:[494..511).56" Target="10286:[2191..2245).30" />
<Link Source="10298:[494..511).56" Target="10286:[2198..2244).8" />
<Link Source="10345:[28225..28251).4" Target="10298:[471..492).56" />
<Link Source="10345:[28225..28251).4" Target="10286:[30098..30120).4" />
<Link Source="10345:[28927..28940).7" Target="10286:[30098..30120).4" />
<Link Source="10346:[12205..12212).4" Target="10286:[30098..30120).4" />
<Link Source="10312:[4685..4699).12" Target="10354:[4094..4107).53" />
<Link Source="10354:[3684..3818).30" Target="10286:[24450..24529).11" />
<Link Source="10354:[3684..3818).30" Target="10312:[4685..4699).12" />
<Link Source="10354:[3720..3803).221" Target="10354:[3684..3818).30" />
<Link Source="10354:[3720..3803).221" Target="10286:[30098..30120).4" />
<Link Source="10354:[3720..3803).221" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).221" Target="10312:[4685..4699).12" />
<Link Source="10312:[4680..4787).23" Target="10354:[3720..3803).221" />
<Link Source="10312:[4680..4787).23" Target="10354:[4094..4107).53" />
<Link Source="10312:[4749..4764).4" Target="10345:[30223..30867).7" />
<Link Source="10312:[4749..4764).4" Target="10312:[4680..4787).23" />
<Link Source="10312:[4826..5058).56" Target="10286:[24450..24529).11" />
<Link Source="10312:[4826..5058).56" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).56" Target="10354:[4094..4107).53" />
<Link Source="10312:[4826..5058).57" Target="10354:[4094..4107).53" />
<Link Source="10312:[5087..5101).4" Target="10312:[4749..4764).4" />
<Link Source="10312:[5087..5101).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[43504..43546).16" Target="10286:[24450..24529).11" />
<Link Source="10319:[43504..43546).16" Target="10312:[66177..69285).44" />
<Link Source="10319:[43504..43546).16" Target="10286:[30098..30120).4" />
<Link Source="10319:[43799..44676).19" Target="10286:[24450..24529).11" />
<Link Source="10319:[43853..43873).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[41088..41107).4" Target="10319:[43799..44676).19" />
<Link Source="10319:[41088..41107).4" Target="10319:[43853..43873).4" />
<Link Source="10319:[41138..41158).4" Target="10319:[43853..43873).4" />
<Link Source="10354:[4919..5009).43" Target="10319:[41088..41107).4" />
<Link Source="10354:[4919..5009).43" Target="10319:[41138..41158).4" />
<Link Source="10354:[4094..4107).59" Target="10354:[4919..5009).43" />
<Link Source="10354:[4094..4107).59" Target="10319:[43504..43546).16" />
<Link Source="10354:[4094..4107).59" Target="10319:[41138..41158).4" />
<Link Source="10319:[41133..41220).7" Target="10354:[4094..4107).59" />
<Link Source="10319:[41133..41220).7" Target="10319:[43853..43873).4" />
<Link Source="10319:[41254..41268).4" Target="10319:[43853..43873).4" />
<Link Source="10354:[4525..4595).7" Target="10319:[41088..41107).4" />
<Link Source="10354:[4525..4595).7" Target="10319:[41254..41268).4" />
<Link Source="10354:[4561..4580).7" Target="10354:[4525..4595).7" />
<Link Source="10354:[4561..4580).7" Target="10319:[43504..43546).16" />
<Link Source="10354:[4561..4580).7" Target="10319:[41254..41268).4" />
<Link Source="10319:[41236..41680).13" Target="10354:[4561..4580).7" />
<Link Source="10319:[41236..41680).13" Target="10319:[43853..43873).4" />
<Link Source="10319:[41302..41665).4" Target="10319:[41236..41680).13" />
<Link Source="10319:[41302..41665).4" Target="10319:[43504..43546).16" />
<Link Source="10319:[41634..41646).7" Target="10319:[41302..41665).4" />
<Link Source="10319:[44751..44765).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[84233..84242).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[84257..84273).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[84288..84313).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[84374..84391).4" Target="10319:[44751..44765).4" />
<Link Source="10319:[84374..84391).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[84406..84447).4" Target="10319:[44751..44765).4" />
<Link Source="10319:[84406..84447).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[84462..84508).4" Target="10319:[44751..44765).4" />
<Link Source="10319:[84462..84508).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[84124..109887).4" Target="10286:[24450..24529).11" />
<Link Source="10319:[85320..85348).13" Target="10286:[24450..24529).11" />
<Link Source="10319:[85320..85348).14" Target="10319:[84257..84273).4" />
<Link Source="10319:[85320..85348).14" Target="10319:[85320..85348).13" />
<Link Source="10319:[85320..85348).14" Target="10286:[24450..24529).11" />
<Link Source="10319:[85366..85400).13" Target="10286:[24450..24529).11" />
<Link Source="10319:[85366..85400).14" Target="10319:[84288..84313).4" />
<Link Source="10319:[85366..85400).14" Target="10319:[85366..85400).13" />
<Link Source="10319:[85366..85400).14" Target="10286:[24450..24529).11" />
<Link Source="10319:[85467..85484).7" Target="10286:[24450..24529).11" />
<Link Source="10319:[104874..105336).10" Target="10319:[43504..43546).16" />
<Link Source="10319:[104874..105336).10" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).11" Target="10319:[104874..105336).10" />
<Link Source="10319:[104874..105336).11" Target="10319:[84124..109887).4" />
<Link Source="10319:[104874..105336).11" Target="10319:[43504..43546).16" />
<Link Source="10319:[105368..106708).4" Target="10319:[84233..84242).4" />
<Link Source="10319:[105368..106708).4" Target="10319:[43504..43546).16" />
<Link Source="10319:[105465..105535).12" Target="10319:[84288..84313).4" />
<Link Source="10319:[105465..105535).12" Target="10319:[105368..106708).4" />
<Link Source="10319:[105465..105535).13" Target="10319:[84257..84273).4" />
<Link Source="10319:[105465..105535).13" Target="10319:[105368..106708).4" />
<Link Source="10319:[76360..76385).3" Target="10319:[105465..105535).12" />
<Link Source="10319:[76360..76385).3" Target="10319:[105368..106708).4" />
<Link Source="10319:[76387..76402).3" Target="10319:[105465..105535).13" />
<Link Source="10319:[76387..76402).3" Target="10319:[105368..106708).4" />
<Link Source="10319:[76494..76582).9" Target="10319:[105368..106708).4" />
<Link Source="10319:[84691..84861).7" Target="10319:[43504..43546).16" />
<Link Source="10319:[84691..84861).7" Target="10319:[105368..106708).4" />
<Link Source="10319:[84691..84861).7" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).7" Target="10286:[24450..24529).11" />
<Link Source="10319:[84764..84846).19" Target="10319:[84257..84273).4" />
<Link Source="10319:[84764..84846).19" Target="10319:[84691..84861).7" />
<Link Source="10319:[84764..84846).20" Target="10319:[84691..84861).7" />
<Link Source="10319:[84764..84846).22" Target="10319:[43504..43546).16" />
<Link Source="10319:[84764..84846).22" Target="10319:[84691..84861).7" />
<Link Source="10319:[84764..84846).23" Target="10319:[84288..84313).4" />
<Link Source="10319:[84764..84846).23" Target="10319:[84691..84861).7" />
<Link Source="10319:[84764..84845).4" Target="10319:[84691..84861).7" />
<Link Source="10306:[358886..358901).4" Target="10319:[84764..84846).19" />
<Link Source="10306:[358886..358901).4" Target="10319:[84764..84845).4" />
<Link Source="10306:[358903..358930).4" Target="10319:[84764..84846).20" />
<Link Source="10306:[358903..358930).4" Target="10319:[84764..84845).4" />
<Link Source="10306:[358932..358945).4" Target="10319:[84764..84846).22" />
<Link Source="10306:[358932..358945).4" Target="10319:[84764..84845).4" />
<Link Source="10306:[358947..358972).4" Target="10319:[84764..84846).23" />
<Link Source="10306:[358947..358972).4" Target="10319:[84764..84845).4" />
<Link Source="10306:[358838..360009).4" Target="10319:[84124..109887).4" />
<Link Source="10306:[358838..360009).4" Target="10319:[84764..84845).4" />
<Link Source="10306:[358998..359998).19" Target="10306:[358932..358945).4" />
<Link Source="10306:[358998..359998).19" Target="10319:[105368..106708).4" />
<Link Source="10306:[358998..359998).19" Target="10319:[84764..84845).4" />
<Link Source="10306:[358998..359998).20" Target="10319:[84764..84845).4" />
<Link Source="10319:[44948..45377).7" Target="10319:[43504..43546).16" />
<Link Source="10319:[44948..45377).7" Target="10319:[105368..106708).4" />
<Link Source="10319:[44948..45377).7" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).7" Target="10286:[24450..24529).11" />
<Link Source="10319:[45408..45422).4" Target="10286:[24450..24529).11" />
<Link Source="10287:[2377..2471).7" Target="10319:[43504..43546).16" />
<Link Source="10287:[2377..2471).7" Target="10286:[24450..24529).11" />
<Link Source="10287:[791..833).7" Target="10319:[105368..106708).4" />
<Link Source="10287:[791..833).7" Target="10319:[43504..43546).16" />
<Link Source="10287:[912..927).4" Target="10319:[43504..43546).16" />
<Link Source="10287:[912..919).4" Target="10287:[912..927).4" />
<Link Source="10287:[912..919).4" Target="10319:[43504..43546).16" />
<Link Source="10287:[945..972).4" Target="10319:[43504..43546).16" />
<Link Source="10287:[945..963).4" Target="10287:[945..972).4" />
<Link Source="10287:[945..963).4" Target="10319:[43504..43546).16" />
<Link Source="10286:[21546..21561).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[21563..21583).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[22086..22108).4" Target="10286:[21546..21561).4" />
<Link Source="10286:[22086..22108).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[22110..22130).4" Target="10286:[21563..21583).4" />
<Link Source="10286:[22110..22130).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[15616..15690).16" Target="10319:[105368..106708).4" />
<Link Source="10286:[15616..15690).17" Target="10319:[105368..106708).4" />
<Link Source="10286:[15616..15690).17" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23056..23081).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23124..23146).4" Target="10286:[22086..22108).4" />
<Link Source="10286:[23124..23146).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23161..23181).4" Target="10286:[22110..22130).4" />
<Link Source="10286:[23161..23181).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23281..23301).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[23380..23684).22" Target="10319:[105368..106708).4" />
<Link Source="10286:[23380..23684).22" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).7" Target="10319:[105368..106708).4" />
<Link Source="10286:[23893..24026).7" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).7" Target="10286:[23161..23181).4" />
<Link Source="10286:[24545..24641).7" Target="10319:[105368..106708).4" />
<Link Source="10286:[24655..25349).4" Target="10286:[24545..24641).7" />
<Link Source="10286:[24655..25349).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26910..26935).4" Target="10286:[23056..23081).4" />
<Link Source="10286:[26910..26935).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26952..26974).4" Target="10286:[23124..23146).4" />
<Link Source="10286:[26952..26974).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[27002..27022).4" Target="10286:[23281..23301).4" />
<Link Source="10286:[27002..27022).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[27048..27088).13" Target="10319:[105368..106708).4" />
<Link Source="10286:[27048..27088).14" Target="10286:[26910..26935).4" />
<Link Source="10286:[27048..27088).14" Target="10286:[27048..27088).13" />
<Link Source="10286:[27048..27088).14" Target="10319:[105368..106708).4" />
<Link Source="10286:[27208..27236).7" Target="10319:[105368..106708).4" />
<Link Source="10286:[27250..27722).4" Target="10286:[23056..23081).4" />
<Link Source="10286:[27250..27722).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[27738..27845).10" Target="10319:[105368..106708).4" />
<Link Source="10286:[27738..27845).11" Target="10286:[27208..27236).7" />
<Link Source="10286:[27738..27845).11" Target="10286:[27738..27845).10" />
<Link Source="10286:[27738..27845).11" Target="10319:[105368..106708).4" />
<Link Source="10286:[27861..27873).4" Target="10286:[23056..23081).4" />
<Link Source="10286:[27861..27873).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26281..26812).4" Target="10286:[27861..27873).4" />
<Link Source="10286:[26281..26812).4" Target="10319:[105368..106708).4" />
<Link Source="10286:[26450..26769).4" Target="10286:[24545..24641).7" />
<Link Source="10286:[26450..26769).4" Target="10286:[26281..26812).4" />
<Link Source="10287:[1680..1716).4" Target="10319:[105368..106708).4" />
<Link Source="10287:[1680..1716).4" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).4" Target="10287:[1680..1716).4" />
<Link Source="10287:[1683..1690).4" Target="10287:[912..919).4" />
<Link Source="10287:[1683..1690).4" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).7" Target="10287:[1683..1690).4" />
<Link Source="10287:[1683..1716).7" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).7" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).7" Target="10287:[1683..1716).7" />
<Link Source="10319:[51935..52244).7" Target="10319:[13969..14029).1" />
<Link Source="10076:[5223..5250).14" Target="10286:[23056..23081).4" />
<Link Source="10076:[5223..5250).14" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).14" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).14" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).14" Target="10286:[23056..23081).4" />
<Link Source="10076:[5277..5448).14" Target="10076:[4989..5047).1" />
<Link Source="10076:[5391..5433).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5391..5433).1" Target="10076:[5277..5448).14" />
<Link Source="10076:[5391..5433).2" Target="10076:[5277..5448).14" />
<Link Source="10077:[4637..4671).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4637..4671).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4591..7075).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4591..7075).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[4705..4866).1" Target="10076:[5391..5433).1" />
<Link Source="10077:[4705..4866).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[4705..4866).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[4705..4866).3" Target="10077:[4705..4866).1" />
<Link Source="10077:[4705..4866).3" Target="10077:[4705..4866).2" />
<Link Source="10077:[4705..4866).3" Target="10076:[5391..5433).1" />
<Link Source="10077:[4705..4866).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[4886..4902).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4920..5555).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[4920..5555).1" Target="10077:[4705..4866).3" />
<Link Source="10077:[4920..5555).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[4920..5555).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[4920..5555).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5083..5555).1" Target="10077:[4591..7075).1" />
<Link Source="10077:[5083..5555).1" Target="10077:[4920..5555).1" />
<Link Source="10077:[5083..5555).2" Target="10077:[4637..4671).1" />
<Link Source="10077:[5083..5555).2" Target="10077:[4920..5555).1" />
<Link Source="10077:[5511..5536).1" Target="10077:[31842..31894).1" />
<Link Source="10077:[5511..5536).1" Target="10077:[5083..5555).1" />
<Link Source="10077:[5575..5625).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[5575..5625).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5575..5625).2" Target="10077:[5511..5536).1" />
<Link Source="10077:[5575..5625).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5585..5624).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[44159..44180).7" Target="10077:[5575..5625).1" />
<Link Source="10077:[44159..44180).7" Target="10077:[5585..5624).1" />
<Link Source="10077:[44182..44197).7" Target="10077:[5575..5625).2" />
<Link Source="10077:[44182..44197).7" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).49" Target="10077:[44182..44197).7" />
<Link Source="10077:[44231..44317).49" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).51" Target="10077:[5585..5624).1" />
<Link Source="10077:[44335..44374).27" Target="10077:[5585..5624).1" />
<Link Source="10077:[44342..44373).7" Target="10077:[5585..5624).1" />
<Link Source="10076:[853..1034).7" Target="10077:[44335..44374).27" />
<Link Source="10076:[853..1034).7" Target="10077:[44342..44373).7" />
<Link Source="10077:[5575..5625).3" Target="10077:[44335..44374).27" />
<Link Source="10077:[5575..5625).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[5645..5665).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5688..5699).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2066..2158).11" Target="10077:[4591..7075).1" />
<Link Source="10077:[2066..2158).11" Target="10077:[5688..5699).1" />
<Link Source="10077:[2110..2139).11" Target="10077:[2066..2158).11" />
<Link Source="10077:[2110..2139).11" Target="10077:[5083..5555).1" />
<Link Source="10077:[2110..2139).11" Target="10077:[5688..5699).1" />
<Link Source="10077:[5683..7020).1" Target="10077:[2110..2139).11" />
<Link Source="10077:[5683..7020).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).2" Target="10077:[5575..5625).3" />
<Link Source="10077:[5683..7020).2" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).3" Target="10077:[5645..5665).1" />
<Link Source="10077:[5683..7020).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).2" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).3" />
<Link Source="10077:[5683..7020).4" Target="10077:[5683..7020).1" />
<Link Source="10077:[5683..7020).4" Target="10077:[44159..44180).7" />
<Link Source="10077:[5683..7020).4" Target="10077:[44182..44197).7" />
<Link Source="10077:[5683..7020).4" Target="10077:[5083..5555).1" />
<Link Source="10077:[5683..7020).4" Target="10077:[2926..2971).3" />
<Link Source="10077:[5683..7020).5" Target="10077:[2926..2971).3" />
<Link Source="10077:[5776..5836).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[5776..5836).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[5858..6188).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[5858..6188).2" Target="10077:[5776..5836).1" />
<Link Source="10077:[5858..6188).2" Target="10077:[5858..6188).1" />
<Link Source="10077:[5858..6188).2" Target="10077:[5683..7020).4" />
<Link Source="10077:[5930..6023).1" Target="10077:[5776..5836).1" />
<Link Source="10077:[5930..6023).1" Target="10077:[5858..6188).2" />
<Link Source="10077:[5930..6023).2" Target="EXTERNAL" />
<Link Source="10077:[5930..6023).2" Target="10077:[5858..6188).2" />
<Link Source="10077:[5945..6022).1" Target="10077:[5858..6188).2" />
<Link Source="10077:[32474..32502).4" Target="10077:[5930..6023).1" />
<Link Source="10077:[32474..32502).4" Target="10077:[5945..6022).1" />
<Link Source="10077:[32504..32523).4" Target="10077:[5930..6023).2" />
<Link Source="10077:[32504..32523).4" Target="10077:[5945..6022).1" />
<Link Source="10077:[44231..44317).57" Target="10077:[32504..32523).4" />
<Link Source="10077:[44231..44317).57" Target="10077:[5945..6022).1" />
<Link Source="10077:[44231..44317).59" Target="10077:[5945..6022).1" />
<Link Source="10077:[6212..6251).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6275..6566).1" Target="10077:[5511..5536).1" />
<Link Source="10077:[6275..6566).1" Target="10077:[31842..31894).1" />
<Link Source="10077:[6275..6566).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6590..6839).1" Target="10077:[5511..5536).1" />
<Link Source="10077:[6590..6839).1" Target="EXTERNAL" />
<Link Source="10077:[6590..6839).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6863..6941).1" Target="10077:[4637..4671).1" />
<Link Source="10077:[6863..6941).1" Target="10077:[32474..32502).4" />
<Link Source="10077:[6863..6941).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6878..6940).1" Target="10077:[5683..7020).4" />
<Link Source="10307:[3496..3521).4" Target="10077:[6863..6941).1" />
<Link Source="10307:[3496..3521).4" Target="10077:[6878..6940).1" />
<Link Source="10307:[3452..3756).4" Target="10077:[32474..32502).4" />
<Link Source="10307:[3452..3756).4" Target="10077:[6878..6940).1" />
<Link Source="10077:[6963..6974).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[2110..2139).13" Target="10077:[6963..6974).1" />
<Link Source="10077:[2110..2139).13" Target="10307:[3496..3521).4" />
<Link Source="10077:[6963..7001).1" Target="10077:[2110..2139).13" />
<Link Source="10077:[6963..7001).1" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).2" Target="10077:[5575..5625).3" />
<Link Source="10077:[6963..7001).2" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).3" Target="10307:[3496..3521).4" />
<Link Source="10077:[6963..7001).3" Target="10077:[5683..7020).4" />
<Link Source="10077:[6963..7001).5" Target="10077:[5683..7020).4" />
<Link Source="10077:[7040..7060).1" Target="10307:[3496..3521).4" />
<Link Source="10077:[7040..7060).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2926..2971).47" Target="10076:[5391..5433).1" />
<Link Source="10077:[2926..2971).47" Target="10077:[7040..7060).1" />
<Link Source="10077:[2926..2971).47" Target="10077:[6963..7001).1" />
<Link Source="10077:[2926..2971).47" Target="10077:[2749..2764).1" />
<Link Source="10286:[1688..1781).25" Target="10077:[2926..2971).47" />
<Link Source="10286:[1688..1781).25" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).58" Target="10286:[1688..1781).25" />
<Link Source="10298:[471..492).58" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).25" Target="10077:[2926..2971).47" />
<Link Source="10286:[1820..1963).25" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).59" Target="10286:[1820..1963).25" />
<Link Source="10298:[471..492).59" Target="10286:[1840..1888).1" />
<Link Source="10313:[1230..1280).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1230..1280).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1295..1337).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1295..1337).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1352..1376).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1352..1376).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1391..1416).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1391..1416).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1171..3563).1" Target="25002:[4395..4432).3" />
<Link Source="10313:[1171..3563).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1442..1480).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[1494..2257).1" Target="10313:[1230..1280).1" />
<Link Source="10313:[1494..2257).1" Target="10077:[2926..2971).47" />
<Link Source="10313:[1494..2257).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2273..2310).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[2324..3491).1" Target="10313:[1295..1337).1" />
<Link Source="10313:[2324..3491).1" Target="10077:[2926..2971).47" />
<Link Source="10313:[2324..3491).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[3507..3523).1" Target="10313:[1442..1480).1" />
<Link Source="10313:[3507..3523).1" Target="25002:[4395..4432).1" />
<Link Source="10313:[3537..3552).1" Target="10313:[2273..2310).1" />
<Link Source="10313:[3537..3552).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[20392..20435).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20392..20435).1" Target="10077:[2926..2971).47" />
<Link Source="10319:[20392..20435).2" Target="10319:[20027..20052).1" />
<Link Source="10319:[20392..20435).2" Target="10077:[2926..2971).47" />
<Link Source="10319:[20399..20434).1" Target="10077:[2926..2971).47" />
<Link Source="10319:[27647..28051).1" Target="10319:[20392..20435).1" />
<Link Source="10319:[27647..28051).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27647..28051).2" Target="10319:[20392..20435).2" />
<Link Source="10319:[27647..28051).2" Target="10319:[20399..20434).1" />
<Link Source="10319:[27647..28051).3" Target="10319:[19916..30085).1" />
<Link Source="10319:[27647..28051).3" Target="10319:[20399..20434).1" />
<Link Source="10319:[27790..27840).1" Target="10319:[27647..28051).1" />
<Link Source="10319:[27790..27840).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27858..27923).1" Target="10319:[27790..27840).1" />
<Link Source="10319:[27858..27923).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27858..27923).2" Target="10319:[27647..28051).2" />
<Link Source="10319:[27858..27923).2" Target="10319:[20399..20434).1" />
<Link Source="10319:[27869..27922).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[39111..39136).1" Target="10319:[27858..27923).1" />
<Link Source="10319:[39111..39136).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39138..39163).1" Target="10319:[27858..27923).2" />
<Link Source="10319:[39138..39163).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39062..39279).1" Target="10319:[27647..28051).3" />
<Link Source="10319:[39062..39279).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).1" Target="10319:[39111..39136).1" />
<Link Source="10319:[39189..39268).1" Target="10077:[2926..2971).47" />
<Link Source="10319:[39189..39268).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).6" Target="10319:[39138..39163).1" />
<Link Source="10319:[39189..39268).6" Target="10319:[27869..27922).1" />
<Link Source="10319:[39189..39268).7" Target="10319:[39111..39136).1" />
<Link Source="10319:[39189..39268).7" Target="10319:[27869..27922).1" />
<Link Source="10319:[39196..39267).1" Target="10319:[27869..27922).1" />
<Link Source="10319:[73460..73478).1" Target="10319:[39189..39268).1" />
<Link Source="10319:[73460..73478).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73480..73505).1" Target="10319:[39189..39268).6" />
<Link Source="10319:[73480..73505).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73507..73522).1" Target="10319:[39189..39268).7" />
<Link Source="10319:[73507..73522).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73420..73626).1" Target="10319:[39062..39279).1" />
<Link Source="10319:[73420..73626).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[73420..73626).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[39189..39268).1" />
<Link Source="10319:[73548..73615).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).2" Target="10319:[73460..73478).1" />
<Link Source="10319:[73548..73615).2" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).3" Target="10319:[73507..73522).1" />
<Link Source="10319:[73548..73615).3" Target="10319:[39196..39267).1" />
<Link Source="10319:[73548..73615).4" Target="10319:[73480..73505).1" />
<Link Source="10319:[73548..73615).4" Target="10319:[39196..39267).1" />
<Link Source="10319:[73555..73614).1" Target="10319:[39196..39267).1" />
<Link Source="10319:[73685..73714).1" Target="10319:[73548..73615).1" />
<Link Source="10319:[73685..73714).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73716..73734).1" Target="10319:[73548..73615).2" />
<Link Source="10319:[73716..73734).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73736..73751).1" Target="10319:[73548..73615).3" />
<Link Source="10319:[73736..73751).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73753..73778).1" Target="10319:[73548..73615).4" />
<Link Source="10319:[73753..73778).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73804..73868).1" Target="10319:[73716..73734).1" />
<Link Source="10319:[73804..73868).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73685..73714).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73804..73868).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[39189..39268).1" />
<Link Source="10319:[73804..73868).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73882..73975).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73882..73975).2" Target="10319:[73804..73868).2" />
<Link Source="10319:[73882..73975).2" Target="10319:[73882..73975).1" />
<Link Source="10319:[73882..73975).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).1" Target="10319:[73804..73868).2" />
<Link Source="10319:[73989..74045).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).2" Target="10319:[73753..73778).1" />
<Link Source="10319:[73989..74045).2" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74045).3" Target="10319:[73736..73751).1" />
<Link Source="10319:[73989..74045).3" Target="10319:[73555..73614).1" />
<Link Source="10319:[73989..74044).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[76345..76358).4" Target="10319:[73989..74045).1" />
<Link Source="10319:[76345..76358).4" Target="10319:[73989..74044).1" />
<Link Source="10319:[76360..76385).4" Target="10319:[73989..74045).2" />
<Link Source="10319:[76360..76385).4" Target="10319:[73989..74044).1" />
<Link Source="10319:[76387..76402).4" Target="10319:[73989..74045).3" />
<Link Source="10319:[76387..76402).4" Target="10319:[73989..74044).1" />
<Link Source="10319:[76494..76582).13" Target="10319:[73989..74044).1" />
<Link Source="10319:[76494..76582).14" Target="10319:[76345..76358).4" />
<Link Source="10319:[76494..76582).14" Target="10319:[76494..76582).13" />
<Link Source="10319:[76494..76582).14" Target="10319:[73989..74044).1" />
<Link Source="10319:[74059..74077).1" Target="10319:[73804..73868).2" />
<Link Source="10319:[74059..74077).1" Target="10319:[73555..73614).1" />
<Link Source="10319:[27941..28036).1" Target="10319:[27790..27840).1" />
<Link Source="10319:[27941..28036).1" Target="10319:[76345..76358).4" />
<Link Source="10319:[27941..28036).1" Target="10319:[20399..20434).1" />
<Link Source="10319:[27975..28028).1" Target="10319:[20399..20434).1" />
<Link Source="10286:[10010..10027).5" Target="10319:[27941..28036).1" />
<Link Source="10286:[10010..10027).5" Target="10319:[27975..28028).1" />
<Link Source="10286:[9966..10197).5" Target="10319:[27647..28051).3" />
<Link Source="10286:[9966..10197).5" Target="10319:[27975..28028).1" />
<Link Source="10319:[27941..28036).4" Target="10319:[74059..74077).1" />
<Link Source="10319:[27941..28036).4" Target="10319:[20399..20434).1" />
<Link Source="10319:[28030..28034).1" Target="10319:[20399..20434).1" />
<Link Source="10287:[2888..2927).1" Target="10319:[27941..28036).4" />
<Link Source="10287:[2888..2927).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[2961..3037).1" Target="10287:[2888..2927).1" />
<Link Source="10287:[2961..3037).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[2961..3037).2" Target="10319:[28030..28034).1" />
<Link Source="10287:[2968..3036).1" Target="10319:[28030..28034).1" />
<Link Source="10287:[718..757).5" Target="10287:[2961..3037).1" />
<Link Source="10287:[718..757).5" Target="10287:[2968..3036).1" />
<Link Source="10287:[666..1076).5" Target="10287:[2961..3037).2" />
<Link Source="10287:[666..1076).5" Target="10287:[2968..3036).1" />
<Link Source="10287:[791..833).9" Target="10287:[718..757).5" />
<Link Source="10287:[791..833).9" Target="10287:[2968..3036).1" />
<Link Source="10287:[912..927).5" Target="10287:[2968..3036).1" />
<Link Source="10287:[912..919).5" Target="10287:[912..927).5" />
<Link Source="10287:[912..919).5" Target="10287:[666..1076).5" />
<Link Source="10287:[912..919).5" Target="10287:[2968..3036).1" />
<Link Source="10287:[945..972).5" Target="10287:[2968..3036).1" />
<Link Source="10287:[945..963).5" Target="10287:[945..972).5" />
<Link Source="10287:[945..963).5" Target="10287:[666..1076).5" />
<Link Source="10287:[945..963).5" Target="10287:[2968..3036).1" />
<Link Source="10319:[27941..28036).5" Target="10287:[2961..3037).2" />
<Link Source="10319:[27941..28036).5" Target="10319:[20399..20434).1" />
<Link Source="10319:[27941..28036).7" Target="10319:[20399..20434).1" />
<Link Source="10319:[27941..28036).9" Target="10286:[10010..10027).5" />
<Link Source="10319:[27941..28036).9" Target="10319:[27941..28036).5" />
<Link Source="10319:[27941..28036).9" Target="10319:[27941..28036).7" />
<Link Source="10319:[27941..28036).9" Target="10287:[718..757).5" />
<Link Source="10319:[27941..28036).9" Target="10287:[912..919).5" />
<Link Source="10319:[27941..28036).9" Target="10287:[945..963).5" />
<Link Source="10319:[27941..28036).9" Target="10319:[20399..20434).1" />
<Link Source="10286:[21546..21561).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[21563..21583).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[22086..22108).5" Target="10286:[21546..21561).5" />
<Link Source="10286:[22086..22108).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[22110..22130).5" Target="10286:[21563..21583).5" />
<Link Source="10286:[22110..22130).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[15616..15690).21" Target="10319:[27941..28036).9" />
<Link Source="10286:[15616..15690).22" Target="10319:[27941..28036).9" />
<Link Source="10286:[15616..15690).22" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[23124..23146).5" Target="10286:[22086..22108).5" />
<Link Source="10286:[23124..23146).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[23161..23181).5" Target="10286:[22110..22130).5" />
<Link Source="10286:[23161..23181).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[23281..23301).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[23380..23684).29" Target="10319:[27941..28036).9" />
<Link Source="10286:[23380..23684).29" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).9" Target="10319:[27941..28036).9" />
<Link Source="10286:[23893..24026).9" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).9" Target="10286:[23161..23181).5" />
<Link Source="10286:[24545..24641).9" Target="10319:[27941..28036).9" />
<Link Source="10286:[24655..25349).5" Target="10286:[24545..24641).9" />
<Link Source="10286:[24655..25349).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[26910..26935).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[26952..26974).5" Target="10286:[23124..23146).5" />
<Link Source="10286:[26952..26974).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[27002..27022).5" Target="10286:[23281..23301).5" />
<Link Source="10286:[27002..27022).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[27048..27088).17" Target="10319:[27941..28036).9" />
<Link Source="10286:[27048..27088).18" Target="10286:[26910..26935).5" />
<Link Source="10286:[27048..27088).18" Target="10286:[27048..27088).17" />
<Link Source="10286:[27048..27088).18" Target="10319:[27941..28036).9" />
<Link Source="10286:[27208..27236).9" Target="10319:[27941..28036).9" />
<Link Source="10286:[27250..27722).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[27738..27845).13" Target="10319:[27941..28036).9" />
<Link Source="10286:[27738..27845).14" Target="10286:[27208..27236).9" />
<Link Source="10286:[27738..27845).14" Target="10286:[27738..27845).13" />
<Link Source="10286:[27738..27845).14" Target="10319:[27941..28036).9" />
<Link Source="10286:[27861..27873).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[26281..26812).5" Target="10286:[27861..27873).5" />
<Link Source="10286:[26281..26812).5" Target="10319:[27941..28036).9" />
<Link Source="10286:[26450..26769).5" Target="10286:[24545..24641).9" />
<Link Source="10286:[26450..26769).5" Target="10286:[26281..26812).5" />
<Link Source="10287:[1680..1716).5" Target="10319:[27941..28036).9" />
<Link Source="10287:[1680..1716).5" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).5" Target="10287:[1680..1716).5" />
<Link Source="10287:[1683..1690).5" Target="10319:[27941..28036).9" />
<Link Source="10287:[1683..1690).5" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).9" Target="10287:[1683..1690).5" />
<Link Source="10287:[1683..1716).9" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).9" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).9" Target="10287:[1683..1716).9" />
<Link Source="10319:[51935..52244).9" Target="10319:[13969..14029).1" />
<Link Source="10060:[1398..1411).1" Target="25002:[4395..4432).3" />
<Link Source="10060:[1398..1411).1" Target="25002:[4395..4432).1" />
<Link Source="10060:[1426..1448).1" Target="25002:[4395..4432).3" />
<Link Source="10060:[1426..1448).1" Target="25002:[4395..4432).1" />
<Link Source="10060:[1463..1509).1" Target="25002:[4395..4432).3" />
<Link Source="10060:[1463..1509).1" Target="25002:[4395..4432).1" />
<Link Source="10060:[1524..1556).1" Target="25002:[4395..4432).3" />
<Link Source="10060:[1524..1556).1" Target="25002:[4395..4432).1" />
<Link Source="10060:[1582..1610).1" Target="25002:[4395..4432).1" />
<Link Source="10060:[1624..1767).1" Target="10060:[1398..1411).1" />
<Link Source="10060:[1624..1767).1" Target="25002:[4395..4432).1" />
<Link Source="10060:[1624..1767).2" Target="10060:[1426..1448).1" />
<Link Source="10060:[1624..1767).2" Target="25002:[4395..4432).1" />
<Link Source="10060:[1624..1767).3" Target="10060:[1524..1556).1" />
<Link Source="10060:[1624..1767).3" Target="25002:[4395..4432).1" />
<Link Source="10060:[1624..1767).4" Target="10060:[1582..1610).1" />
<Link Source="10060:[1624..1767).4" Target="25002:[4395..4432).1" />
<Link Source="10060:[1624..1767).5" Target="10060:[1426..1448).1" />
<Link Source="10060:[1624..1767).5" Target="10319:[27941..28036).9" />
<Link Source="10060:[1624..1767).5" Target="25002:[4395..4432).1" />
<Link Source="10060:[1624..1767).6" Target="10060:[1463..1509).1" />
<Link Source="10060:[1624..1767).6" Target="25002:[4395..4432).1" />
<Link Source="10060:[1624..1767).7" Target="25002:[4395..4432).1" />
<Link Source="10060:[1631..1766).1" Target="25002:[4395..4432).1" />
<Link Source="10060:[5593..5606).5" Target="10060:[1624..1767).1" />
<Link Source="10060:[5593..5606).5" Target="10060:[1631..1766).1" />
<Link Source="10060:[5621..5634).5" Target="10060:[1624..1767).2" />
<Link Source="10060:[5621..5634).5" Target="10060:[1631..1766).1" />
<Link Source="10060:[5691..5716).5" Target="10060:[1624..1767).3" />
<Link Source="10060:[5691..5716).5" Target="10060:[1631..1766).1" />
<Link Source="10060:[5731..5762).5" Target="10060:[1624..1767).4" />
<Link Source="10060:[5731..5762).5" Target="10060:[1631..1766).1" />
<Link Source="10060:[5777..5806).5" Target="10060:[1624..1767).5" />
<Link Source="10060:[5777..5806).5" Target="10060:[1631..1766).1" />
<Link Source="10060:[5821..5867).5" Target="10060:[1624..1767).6" />
<Link Source="10060:[5821..5867).5" Target="10060:[1631..1766).1" />
<Link Source="10060:[5882..5928).5" Target="10060:[1624..1767).7" />
<Link Source="10060:[5882..5928).5" Target="10060:[1631..1766).1" />
<Link Source="10060:[5954..5991).17" Target="10060:[1631..1766).1" />
<Link Source="10060:[5954..5991).18" Target="10060:[5593..5606).5" />
<Link Source="10060:[5954..5991).18" Target="10060:[5954..5991).17" />
<Link Source="10060:[5954..5991).18" Target="10060:[1631..1766).1" />
<Link Source="10060:[6005..6042).17" Target="10060:[1631..1766).1" />
<Link Source="10060:[6005..6042).18" Target="10060:[5621..5634).5" />
<Link Source="10060:[6005..6042).18" Target="10060:[6005..6042).17" />
<Link Source="10060:[6005..6042).18" Target="10060:[1631..1766).1" />
<Link Source="10060:[6056..6090).9" Target="10060:[5621..5634).5" />
<Link Source="10060:[6056..6090).9" Target="10319:[27941..28036).9" />
<Link Source="10060:[6056..6090).9" Target="10060:[1631..1766).1" />
<Link Source="10060:[6104..6172).13" Target="10060:[5621..5634).5" />
<Link Source="10060:[6104..6172).13" Target="10060:[1631..1766).1" />
<Link Source="10060:[6188..6219).9" Target="10060:[1631..1766).1" />
<Link Source="10060:[6235..9907).5" Target="10060:[5593..5606).5" />
<Link Source="10060:[6235..9907).5" Target="10319:[27941..28036).9" />
<Link Source="10060:[6235..9907).5" Target="10060:[1631..1766).1" />
<Link Source="10060:[6235..9907).6" Target="10060:[5593..5606).5" />
<Link Source="10060:[6235..9907).6" Target="10319:[27941..28036).9" />
<Link Source="10060:[6235..9907).6" Target="EXTERNAL" />
<Link Source="10060:[6235..9907).6" Target="10060:[1631..1766).1" />
<Link Source="10060:[9192..9596).1" Target="10060:[5593..5606).5" />
<Link Source="10060:[9192..9596).1" Target="10060:[6235..9907).6" />
<Link Source="10060:[9620..9788).1" Target="10060:[5593..5606).5" />
<Link Source="10060:[9620..9788).1" Target="10060:[9192..9596).1" />
<Link Source="10060:[9620..9788).1" Target="10060:[6235..9907).6" />
<Link Source="10060:[9620..9788).3" Target="10060:[5621..5634).5" />
<Link Source="10060:[9620..9788).3" Target="10060:[6235..9907).6" />
<Link Source="10060:[9620..9788).4" Target="10060:[5691..5716).5" />
<Link Source="10060:[9620..9788).4" Target="10060:[6235..9907).6" />
<Link Source="10060:[9620..9788).5" Target="10060:[6188..6219).9" />
<Link Source="10060:[9620..9788).5" Target="10060:[6235..9907).6" />
<Link Source="10060:[9620..9788).6" Target="10060:[5777..5806).5" />
<Link Source="10060:[9620..9788).6" Target="10060:[6235..9907).6" />
<Link Source="10060:[9620..9788).7" Target="10060:[5821..5867).5" />
<Link Source="10060:[9620..9788).7" Target="10060:[6235..9907).6" />
<Link Source="10060:[9620..9788).8" Target="10060:[6235..9907).6" />
<Link Source="10060:[9627..9787).1" Target="10060:[6235..9907).6" />
<Link Source="10060:[13816..13846).1" Target="10060:[9620..9788).1" />
<Link Source="10060:[13816..13846).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[13906..13941).1" Target="10060:[9620..9788).1" />
<Link Source="10060:[13906..13941).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[13956..13969).1" Target="10060:[9620..9788).3" />
<Link Source="10060:[13956..13969).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[13984..14009).1" Target="10060:[9620..9788).4" />
<Link Source="10060:[13984..14009).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[14024..14055).1" Target="10060:[9620..9788).5" />
<Link Source="10060:[14024..14055).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[14070..14099).1" Target="10060:[9620..9788).6" />
<Link Source="10060:[14070..14099).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[14114..14160).1" Target="10060:[9620..9788).7" />
<Link Source="10060:[14114..14160).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[14175..14221).1" Target="10060:[9620..9788).8" />
<Link Source="10060:[14175..14221).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[14247..14315).1" Target="10060:[13956..13969).1" />
<Link Source="10060:[14247..14315).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[14329..14374).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[14329..14374).2" Target="10060:[13816..13846).1" />
<Link Source="10060:[14329..14374).2" Target="10060:[14329..14374).1" />
<Link Source="10060:[14329..14374).2" Target="10060:[9627..9787).1" />
<Link Source="10060:[14390..14421).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[14508..14613).1" Target="10060:[13816..13846).1" />
<Link Source="10060:[14508..14613).1" Target="10060:[13956..13969).1" />
<Link Source="10060:[14508..14613).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[14726..14882).1" Target="10060:[13816..13846).1" />
<Link Source="10060:[14726..14882).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[14726..14882).2" Target="10060:[13956..13969).1" />
<Link Source="10060:[14726..14882).2" Target="10060:[9627..9787).1" />
<Link Source="10060:[14726..14882).3" Target="10060:[14114..14160).1" />
<Link Source="10060:[14726..14882).3" Target="10060:[9627..9787).1" />
<Link Source="10060:[14726..14882).4" Target="10060:[14175..14221).1" />
<Link Source="10060:[14726..14882).4" Target="10060:[9627..9787).1" />
<Link Source="10060:[14731..14820).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[10180..10200).5" Target="10060:[14726..14882).1" />
<Link Source="10060:[10180..10200).5" Target="10060:[14731..14820).1" />
<Link Source="10060:[10202..10215).5" Target="10060:[14726..14882).2" />
<Link Source="10060:[10202..10215).5" Target="10060:[14731..14820).1" />
<Link Source="10060:[10217..10263).5" Target="10060:[14726..14882).3" />
<Link Source="10060:[10217..10263).5" Target="10060:[14731..14820).1" />
<Link Source="10060:[10265..10311).5" Target="10060:[14726..14882).4" />
<Link Source="10060:[10265..10311).5" Target="10060:[14731..14820).1" />
<Link Source="10060:[10337..10405).13" Target="10060:[10202..10215).5" />
<Link Source="10060:[10337..10405).13" Target="10060:[14731..14820).1" />
<Link Source="10060:[10419..10454).17" Target="10060:[14731..14820).1" />
<Link Source="10060:[10419..10454).18" Target="10060:[10180..10200).5" />
<Link Source="10060:[10419..10454).18" Target="10060:[10419..10454).17" />
<Link Source="10060:[10419..10454).18" Target="10060:[14731..14820).1" />
<Link Source="10060:[10470..10516).5" Target="10060:[10202..10215).5" />
<Link Source="10060:[10470..10516).5" Target="10060:[9192..9596).1" />
<Link Source="10060:[10470..10516).5" Target="10060:[14731..14820).1" />
<Link Source="10060:[10532..10544).5" Target="10060:[14731..14820).1" />
<Link Source="10060:[10558..11295).5" Target="10060:[10180..10200).5" />
<Link Source="10060:[10558..11295).5" Target="10060:[9192..9596).1" />
<Link Source="10060:[10558..11295).5" Target="10060:[14731..14820).1" />
<Link Source="10060:[11366..11675).37" Target="10060:[10202..10215).5" />
<Link Source="10060:[11366..11675).37" Target="10060:[10180..10200).5" />
<Link Source="10060:[11990..12013).5" Target="10060:[10180..10200).5" />
<Link Source="10060:[12078..12091).5" Target="10060:[11366..11675).37" />
<Link Source="10060:[12078..12091).5" Target="10060:[10180..10200).5" />
<Link Source="10060:[12117..12185).13" Target="10060:[12078..12091).5" />
<Link Source="10060:[12117..12185).13" Target="10060:[10180..10200).5" />
<Link Source="10060:[12199..12238).17" Target="10060:[10180..10200).5" />
<Link Source="10060:[12199..12238).18" Target="10060:[11990..12013).5" />
<Link Source="10060:[12199..12238).18" Target="10060:[12199..12238).17" />
<Link Source="10060:[12199..12238).18" Target="10060:[10180..10200).5" />
<Link Source="10060:[14954..15064).1" Target="10060:[13906..13941).1" />
<Link Source="10060:[14954..15064).1" Target="EXTERNAL" />
<Link Source="10060:[14954..15064).1" Target="10060:[9627..9787).1" />
<Link Source="10060:[15037..15049).1" Target="10060:[14954..15064).1" />
<Link Source="25002:[4395..4432).71" Target="10060:[10217..10263).5" />
<Link Source="25002:[4395..4432).71" Target="10060:[15037..15049).1" />
<Link Source="25002:[4395..4432).71" Target="10060:[9192..9596).1" />
<Link Source="25002:[4395..4432).71" Target="28001:[46830..47156).2" />
<Link Source="10325:[616..730).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[994..1034).5" Target="10325:[616..730).4" />
<Link Source="10286:[994..1034).6" Target="10060:[10217..10263).5" />
<Link Source="10286:[994..1034).6" Target="10286:[994..1034).5" />
<Link Source="10286:[994..1034).6" Target="10325:[616..730).4" />
<Link Source="10286:[17886..18149).1" Target="10060:[10217..10263).5" />
<Link Source="10286:[17886..18149).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[17922..18090).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[17922..18090).2" Target="10286:[17886..18149).1" />
<Link Source="10286:[17922..18090).2" Target="25002:[4395..4432).71" />
<Link Source="10286:[17922..18090).2" Target="10286:[17922..18090).1" />
<Link Source="10286:[17922..18090).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[17992..18071).1" Target="10286:[17886..18149).1" />
<Link Source="10286:[17992..18071).1" Target="25002:[4395..4432).71" />
<Link Source="10286:[17992..18071).1" Target="10286:[17922..18090).2" />
<Link Source="10286:[17992..18071).2" Target="10286:[17886..18149).1" />
<Link Source="10286:[17992..18071).2" Target="10286:[17922..18090).2" />
<Link Source="10286:[17992..18071).3" Target="10286:[17922..18090).2" />
<Link Source="10286:[18042..18063).1" Target="10286:[17922..18090).2" />
<Link Source="10842:[570..583).1" Target="10286:[17992..18071).2" />
<Link Source="10842:[570..583).1" Target="10286:[18042..18063).1" />
<Link Source="10842:[551..714).1" Target="10286:[17992..18071).3" />
<Link Source="10842:[551..714).1" Target="10286:[18042..18063).1" />
<Link Source="10842:[605..611).1" Target="10842:[570..583).1" />
<Link Source="10842:[605..611).1" Target="10286:[18042..18063).1" />
<Link Source="10842:[636..637).1" Target="10286:[18042..18063).1" />
<Link Source="10842:[659..664).1" Target="10286:[18042..18063).1" />
<Link Source="10842:[687..691).1" Target="10286:[18042..18063).1" />
<Link Source="10842:[551..714).2" Target="10286:[18042..18063).1" />
<Link Source="10842:[746..759).1" Target="10842:[605..611).1" />
<Link Source="10842:[746..759).1" Target="10842:[551..714).2" />
<Link Source="10842:[761..786).1" Target="10842:[636..637).1" />
<Link Source="10842:[761..786).1" Target="10842:[551..714).2" />
<Link Source="10842:[788..811).1" Target="10842:[659..664).1" />
<Link Source="10842:[788..811).1" Target="10842:[551..714).2" />
<Link Source="10842:[813..844).1" Target="10842:[687..691).1" />
<Link Source="10842:[813..844).1" Target="10842:[551..714).2" />
<Link Source="10842:[726..1022).1" Target="10842:[551..714).1" />
<Link Source="10842:[726..1022).1" Target="10842:[551..714).2" />
<Link Source="10842:[866..904).1" Target="10842:[746..759).1" />
<Link Source="10842:[866..904).1" Target="25002:[4395..4432).71" />
<Link Source="10842:[866..904).1" Target="10842:[551..714).2" />
<Link Source="10842:[906..927).1" Target="10842:[761..786).1" />
<Link Source="10842:[906..927).1" Target="10842:[551..714).2" />
<Link Source="10842:[929..947).1" Target="10842:[788..811).1" />
<Link Source="10842:[929..947).1" Target="10842:[551..714).2" />
<Link Source="10842:[949..968).1" Target="10842:[813..844).1" />
<Link Source="10842:[949..968).1" Target="10842:[551..714).2" />
<Link Source="10842:[726..1022).2" Target="10842:[551..714).2" />
<Link Source="10843:[1173..1198).3" Target="10842:[866..904).1" />
<Link Source="10843:[1173..1198).3" Target="10842:[726..1022).2" />
<Link Source="10843:[1200..1225).3" Target="10842:[906..927).1" />
<Link Source="10843:[1200..1225).3" Target="10842:[726..1022).2" />
<Link Source="10843:[1227..1250).3" Target="10842:[929..947).1" />
<Link Source="10843:[1227..1250).3" Target="10842:[726..1022).2" />
<Link Source="10843:[1252..1287).3" Target="10842:[949..968).1" />
<Link Source="10843:[1252..1287).3" Target="10842:[726..1022).2" />
<Link Source="10843:[734..744).3" Target="10842:[726..1022).1" />
<Link Source="10843:[734..744).3" Target="10842:[726..1022).2" />
<Link Source="10843:[778..799).3" Target="10842:[726..1022).1" />
<Link Source="10843:[778..799).3" Target="10842:[726..1022).2" />
<Link Source="10843:[835..853).3" Target="10842:[726..1022).1" />
<Link Source="10843:[835..853).3" Target="10842:[726..1022).2" />
<Link Source="10843:[1113..1134).3" Target="10842:[726..1022).1" />
<Link Source="10843:[1113..1134).3" Target="10842:[726..1022).2" />
<Link Source="10843:[1313..1354).9" Target="10842:[726..1022).2" />
<Link Source="10843:[1313..1354).10" Target="10843:[1173..1198).3" />
<Link Source="10843:[1313..1354).10" Target="10843:[1313..1354).9" />
<Link Source="10843:[1313..1354).10" Target="10842:[726..1022).2" />
<Link Source="10843:[1368..1474).11" Target="10842:[726..1022).2" />
<Link Source="10843:[1368..1474).12" Target="10843:[1252..1287).3" />
<Link Source="10843:[1368..1474).12" Target="10843:[1368..1474).11" />
<Link Source="10843:[1368..1474).12" Target="10842:[726..1022).2" />
<Link Source="10843:[1488..1600).11" Target="10842:[726..1022).2" />
<Link Source="10843:[1488..1600).12" Target="10843:[1252..1287).3" />
<Link Source="10843:[1488..1600).12" Target="10843:[1488..1600).11" />
<Link Source="10843:[1488..1600).12" Target="10842:[726..1022).2" />
<Link Source="10843:[1659..1685).3" Target="10843:[1200..1225).3" />
<Link Source="10843:[1659..1685).3" Target="10842:[726..1022).1" />
<Link Source="10843:[1659..1685).3" Target="10842:[726..1022).2" />
<Link Source="10843:[1724..1742).3" Target="10843:[1227..1250).3" />
<Link Source="10843:[1724..1742).3" Target="10842:[726..1022).1" />
<Link Source="10843:[1724..1742).3" Target="10842:[726..1022).2" />
<Link Source="10843:[1778..1799).3" Target="10843:[1252..1287).3" />
<Link Source="10843:[1778..1799).3" Target="10842:[726..1022).1" />
<Link Source="10843:[1778..1799).3" Target="10842:[726..1022).2" />
<Link Source="10842:[531..538).1" Target="10842:[726..1022).1" />
<Link Source="10842:[531..538).1" Target="10842:[551..714).2" />
<Link Source="10842:[994..1001).1" Target="10842:[746..759).1" />
<Link Source="10842:[994..1001).1" Target="10842:[726..1022).1" />
<Link Source="10842:[994..1001).1" Target="10842:[551..714).2" />
<Link Source="10286:[17992..18071).7" Target="10286:[17992..18071).1" />
<Link Source="10286:[17992..18071).7" Target="10286:[17992..18071).3" />
<Link Source="10286:[17992..18071).7" Target="10843:[1173..1198).3" />
<Link Source="10286:[17992..18071).7" Target="10843:[1659..1685).3" />
<Link Source="10286:[17992..18071).7" Target="10843:[1724..1742).3" />
<Link Source="10286:[17992..18071).7" Target="10843:[1778..1799).3" />
<Link Source="10286:[17992..18071).7" Target="10842:[994..1001).1" />
<Link Source="10286:[17992..18071).7" Target="25002:[4395..4432).71" />
<Link Source="10286:[17992..18071).7" Target="10286:[17922..18090).2" />
<Link Source="10286:[18110..18134).1" Target="10286:[17886..18149).1" />
<Link Source="10286:[18110..18134).1" Target="10286:[17992..18071).7" />
<Link Source="10286:[18110..18134).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[2103..2126).1" Target="10060:[10217..10263).5" />
<Link Source="10843:[2103..2126).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[2062..2680).1" Target="10060:[10217..10263).5" />
<Link Source="10843:[2062..2680).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[2152..2257).1" Target="10843:[2062..2680).1" />
<Link Source="10843:[2152..2257).1" Target="10286:[18110..18134).1" />
<Link Source="10843:[2152..2257).1" Target="10843:[2103..2126).1" />
<Link Source="10843:[2152..2257).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[2271..2455).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[2271..2455).2" Target="10843:[2062..2680).1" />
<Link Source="10843:[2271..2455).2" Target="10286:[18110..18134).1" />
<Link Source="10843:[2271..2455).2" Target="10843:[2271..2455).1" />
<Link Source="10843:[2271..2455).2" Target="25002:[4395..4432).1" />
<Link Source="10843:[2338..2440).1" Target="10843:[2062..2680).1" />
<Link Source="10843:[2338..2440).1" Target="10286:[18110..18134).1" />
<Link Source="10843:[2338..2440).1" Target="10843:[2271..2455).2" />
<Link Source="10843:[2338..2440).2" Target="10843:[2103..2126).1" />
<Link Source="10843:[2338..2440).2" Target="10843:[2271..2455).2" />
<Link Source="10843:[2393..2432).1" Target="10843:[2271..2455).2" />
<Link Source="10842:[1404..1427).1" Target="10843:[2338..2440).2" />
<Link Source="10842:[1404..1427).1" Target="10843:[2393..2432).1" />
<Link Source="10842:[1349..1614).1" Target="10843:[2062..2680).1" />
<Link Source="10842:[1349..1614).1" Target="10843:[2393..2432).1" />
<Link Source="10842:[1453..1508).1" Target="10842:[1349..1614).1" />
<Link Source="10842:[1453..1508).1" Target="10286:[18110..18134).1" />
<Link Source="10842:[1453..1508).1" Target="10842:[1404..1427).1" />
<Link Source="10842:[1453..1508).1" Target="10843:[2393..2432).1" />
<Link Source="10842:[1522..1603).1" Target="10842:[1349..1614).1" />
<Link Source="10842:[1522..1603).1" Target="10286:[18110..18134).1" />
<Link Source="10842:[1522..1603).1" Target="10843:[2393..2432).1" />
<Link Source="10842:[1522..1603).3" Target="10842:[1404..1427).1" />
<Link Source="10842:[1522..1603).3" Target="10843:[2393..2432).1" />
<Link Source="10842:[1522..1603).4" Target="10842:[1349..1614).1" />
<Link Source="10842:[1522..1603).4" Target="10843:[2393..2432).1" />
<Link Source="10842:[1522..1603).5" Target="10843:[2393..2432).1" />
<Link Source="10842:[1529..1602).1" Target="10843:[2393..2432).1" />
<Link Source="10842:[746..759).2" Target="10842:[1522..1603).1" />
<Link Source="10842:[746..759).2" Target="10842:[1529..1602).1" />
<Link Source="10842:[761..786).2" Target="10842:[1522..1603).1" />
<Link Source="10842:[761..786).2" Target="10842:[1529..1602).1" />
<Link Source="10842:[788..811).2" Target="10842:[1522..1603).3" />
<Link Source="10842:[788..811).2" Target="10842:[1529..1602).1" />
<Link Source="10842:[813..844).2" Target="10842:[1522..1603).4" />
<Link Source="10842:[813..844).2" Target="10842:[1529..1602).1" />
<Link Source="10842:[726..1022).3" Target="10842:[1522..1603).5" />
<Link Source="10842:[726..1022).3" Target="10842:[1529..1602).1" />
<Link Source="10843:[734..744).4" Target="10842:[726..1022).3" />
<Link Source="10843:[734..744).4" Target="10842:[1529..1602).1" />
<Link Source="10843:[778..799).4" Target="10842:[726..1022).3" />
<Link Source="10843:[778..799).4" Target="10842:[1529..1602).1" />
<Link Source="10843:[835..853).4" Target="10842:[726..1022).3" />
<Link Source="10843:[835..853).4" Target="10842:[1529..1602).1" />
<Link Source="10843:[1113..1134).4" Target="10842:[726..1022).3" />
<Link Source="10843:[1113..1134).4" Target="10842:[1529..1602).1" />
<Link Source="10843:[1313..1354).13" Target="10842:[1529..1602).1" />
<Link Source="10843:[1313..1354).14" Target="10842:[746..759).2" />
<Link Source="10843:[1313..1354).14" Target="10843:[1313..1354).13" />
<Link Source="10843:[1313..1354).14" Target="10842:[1529..1602).1" />
<Link Source="10843:[1368..1474).16" Target="10842:[1529..1602).1" />
<Link Source="10843:[1368..1474).17" Target="10842:[813..844).2" />
<Link Source="10843:[1368..1474).17" Target="10843:[1368..1474).16" />
<Link Source="10843:[1368..1474).17" Target="10842:[1529..1602).1" />
<Link Source="10843:[1368..1474).18" Target="10842:[788..811).2" />
<Link Source="10843:[1368..1474).18" Target="10842:[813..844).2" />
<Link Source="10843:[1368..1474).18" Target="10286:[18110..18134).1" />
<Link Source="10843:[1368..1474).18" Target="10842:[1529..1602).1" />
<Link Source="10843:[1488..1600).16" Target="10842:[1529..1602).1" />
<Link Source="10843:[1488..1600).17" Target="10842:[813..844).2" />
<Link Source="10843:[1488..1600).17" Target="10843:[1488..1600).16" />
<Link Source="10843:[1488..1600).17" Target="10842:[1529..1602).1" />
<Link Source="10843:[1488..1600).18" Target="10842:[761..786).2" />
<Link Source="10843:[1488..1600).18" Target="10842:[813..844).2" />
<Link Source="10843:[1488..1600).18" Target="10286:[18110..18134).1" />
<Link Source="10843:[1488..1600).18" Target="10842:[1529..1602).1" />
<Link Source="10842:[531..538).2" Target="10842:[726..1022).3" />
<Link Source="10842:[531..538).2" Target="10842:[1529..1602).1" />
<Link Source="10843:[2338..2440).3" Target="10842:[1522..1603).5" />
<Link Source="10843:[2338..2440).3" Target="10843:[2271..2455).2" />
<Link Source="10843:[2338..2440).5" Target="10843:[2271..2455).2" />
<Link Source="10843:[2338..2440).7" Target="10843:[2338..2440).1" />
<Link Source="10843:[2338..2440).7" Target="10843:[2338..2440).3" />
<Link Source="10843:[2338..2440).7" Target="10843:[2338..2440).5" />
<Link Source="10843:[2338..2440).7" Target="10842:[746..759).2" />
<Link Source="10843:[2338..2440).7" Target="10842:[761..786).2" />
<Link Source="10843:[2338..2440).7" Target="10842:[788..811).2" />
<Link Source="10843:[2338..2440).7" Target="10842:[813..844).2" />
<Link Source="10843:[2338..2440).7" Target="10286:[18110..18134).1" />
<Link Source="10843:[2338..2440).7" Target="10843:[2271..2455).2" />
<Link Source="10843:[2469..2546).1" Target="10843:[2062..2680).1" />
<Link Source="10843:[2469..2546).1" Target="10843:[2338..2440).7" />
<Link Source="10843:[2469..2546).1" Target="10843:[2103..2126).1" />
<Link Source="10843:[2469..2546).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[2560..2626).1" Target="10843:[2062..2680).1" />
<Link Source="10843:[2560..2626).1" Target="10843:[2338..2440).7" />
<Link Source="10843:[2560..2626).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[2640..2669).1" Target="10843:[2062..2680).1" />
<Link Source="10843:[2640..2669).1" Target="10843:[2338..2440).7" />
<Link Source="10843:[2640..2669).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[6907..6924).1" Target="10060:[10217..10263).5" />
<Link Source="10843:[6907..6924).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[6926..6948).1" Target="10060:[10217..10263).5" />
<Link Source="10843:[6926..6948).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[6950..6996).1" Target="10060:[10217..10263).5" />
<Link Source="10843:[6950..6996).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[6854..8071).1" Target="10060:[10217..10263).5" />
<Link Source="10843:[6854..8071).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[7022..7059).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[7022..7059).2" Target="10843:[6907..6924).1" />
<Link Source="10843:[7022..7059).2" Target="10843:[7022..7059).1" />
<Link Source="10843:[7022..7059).2" Target="25002:[4395..4432).1" />
<Link Source="10843:[7073..7115).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[7073..7115).2" Target="10843:[6926..6948).1" />
<Link Source="10843:[7073..7115).2" Target="10843:[7073..7115).1" />
<Link Source="10843:[7073..7115).2" Target="25002:[4395..4432).1" />
<Link Source="10843:[7212..7342).1" Target="10843:[6907..6924).1" />
<Link Source="10843:[7212..7342).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[7212..7342).2" Target="10843:[6926..6948).1" />
<Link Source="10843:[7212..7342).2" Target="25002:[4395..4432).1" />
<Link Source="10843:[7216..7266).1" Target="25002:[4395..4432).1" />
<Link Source="10843:[72508..72524).1" Target="10843:[7212..7342).1" />
<Link Source="10843:[72508..72524).1" Target="10843:[7216..7266).1" />
<Link Source="10843:[72526..72542).1" Target="10843:[7212..7342).2" />
<Link Source="10843:[72526..72542).1" Target="10843:[7216..7266).1" />
<Link Source="10843:[72465..72650).1" Target="10843:[6854..8071).1" />
<Link Source="10843:[72465..72650).1" Target="10843:[7216..7266).1" />
<Link Source="10843:[72568..72639).1" Target="10843:[72508..72524).1" />
<Link Source="10843:[72568..72639).1" Target="10843:[7216..7266).1" />
<Link Source="10843:[72568..72639).2" Target="10843:[72526..72542).1" />
<Link Source="10843:[72568..72639).2" Target="10843:[7216..7266).1" />
<Link Source="10843:[72568..72639).3" Target="10843:[72465..72650).1" />
<Link Source="10843:[72568..72639).3" Target="10843:[2640..2669).1" />
<Link Source="10843:[72568..72639).3" Target="10843:[7216..7266).1" />
<Link Source="10843:[72575..72638).1" Target="10843:[7216..7266).1" />
<Link Source="10843:[71283..71299).1" Target="10843:[72568..72639).1" />
<Link Source="10843:[71283..71299).1" Target="10843:[72575..72638).1" />
<Link Source="10843:[71301..71317).1" Target="10843:[72568..72639).2" />
<Link Source="10843:[71301..71317).1" Target="10843:[72575..72638).1" />
<Link Source="10843:[71319..71342).1" Target="10843:[72568..72639).3" />
<Link Source="10843:[71319..71342).1" Target="10843:[72575..72638).1" />
<Link Source="10843:[71916..71952).1" Target="10843:[72575..72638).1" />
<Link Source="10843:[71916..71952).2" Target="10843:[71283..71299).1" />
<Link Source="10843:[71916..71952).2" Target="10843:[71916..71952).1" />
<Link Source="10843:[71916..71952).2" Target="10843:[72575..72638).1" />
<Link Source="10843:[71966..72002).1" Target="10843:[72575..72638).1" />
<Link Source="10843:[71966..72002).2" Target="10843:[71301..71317).1" />
<Link Source="10843:[71966..72002).2" Target="10843:[71966..72002).1" />
<Link Source="10843:[71966..72002).2" Target="10843:[72575..72638).1" />
<Link Source="10843:[72205..72223).1" Target="10843:[71319..71342).1" />
<Link Source="10843:[72205..72223).1" Target="10843:[72575..72638).1" />
<Link Source="10843:[72187..72388).1" Target="EXTERNAL" />
<Link Source="10843:[72187..72388).1" Target="10843:[72205..72223).1" />
<Link Source="10843:[72402..72442).1" Target="10843:[71301..71317).1" />
<Link Source="10843:[72402..72442).1" Target="10843:[72575..72638).1" />
<Link Source="10843:[72402..72442).2" Target="10843:[72187..72388).1" />
<Link Source="10843:[72402..72442).2" Target="10843:[72575..72638).1" />
<Link Source="10843:[72402..72442).3" Target="10843:[71283..71299).1" />
<Link Source="10843:[72402..72442).3" Target="10843:[72402..72442).1" />
<Link Source="10843:[72402..72442).3" Target="10843:[72402..72442).2" />
<Link Source="10843:[72402..72442).3" Target="10843:[2640..2669).1" />
<Link Source="10843:[72402..72442).3" Target="10843:[72575..72638).1" />
<Link Source="10843:[7307..7326).1" Target="10843:[72402..72442).3" />
<Link Source="10838:[9032..9055).1" Target="EXTERNAL" />
<Link Source="10838:[9032..9055).1" Target="10843:[7307..7326).1" />
<Link Source="10838:[9017..9056).1" Target="10843:[7307..7326).1" />
<Link Source="10838:[3566..3585).1" Target="10838:[9032..9055).1" />
<Link Source="10838:[3566..3585).1" Target="10838:[9017..9056).1" />
<Link Source="10838:[3547..3640).1" Target="10838:[9017..9056).1" />
<Link Source="10838:[3607..3611).1" Target="10838:[3566..3585).1" />
<Link Source="10838:[3607..3611).1" Target="10838:[9017..9056).1" />
<Link Source="10838:[3613..3617).1" Target="10838:[9017..9056).1" />
<Link Source="10838:[3382..3401).1" Target="10838:[3607..3611).1" />
<Link Source="10838:[3382..3401).1" Target="10838:[3547..3640).1" />
<Link Source="10838:[3416..3442).1" Target="10838:[3613..3617).1" />
<Link Source="10838:[3416..3442).1" Target="10838:[3547..3640).1" />
<Link Source="10838:[3349..3535).1" Target="10838:[3547..3640).1" />
<Link Source="10838:[3468..3473).1" Target="10838:[3382..3401).1" />
<Link Source="10838:[3468..3473).1" Target="10838:[3349..3535).1" />
<Link Source="10838:[3468..3473).1" Target="10838:[3547..3640).1" />
<Link Source="10838:[3495..3508).1" Target="10838:[3416..3442).1" />
<Link Source="10838:[3495..3508).1" Target="10838:[3349..3535).1" />
<Link Source="10838:[3495..3508).1" Target="10838:[3547..3640).1" />
<Link Source="10843:[7300..7327).1" Target="10838:[9017..9056).1" />
<Link Source="10843:[7300..7327).1" Target="10843:[72402..72442).3" />
<Link Source="25002:[4395..4432).83" Target="10843:[6950..6996).1" />
<Link Source="25002:[4395..4432).83" Target="10843:[7300..7327).1" />
<Link Source="25002:[4395..4432).83" Target="10843:[72402..72442).3" />
<Link Source="25002:[4395..4432).83" Target="10838:[3468..3473).1" />
<Link Source="25002:[4395..4432).83" Target="10838:[3495..3508).1" />
<Link Source="25002:[4395..4432).83" Target="28001:[46830..47156).2" />
<Link Source="10838:[16000..16064).1" Target="10843:[6950..6996).1" />
<Link Source="10838:[16000..16064).1" Target="25002:[4395..4432).1" />
<Link Source="10838:[16036..16049).1" Target="10838:[16000..16064).1" />
<Link Source="10838:[16036..16049).1" Target="25002:[4395..4432).83" />
<Link Source="10838:[16036..16049).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[5223..5250).18" Target="10838:[16036..16049).1" />
<Link Source="10076:[5223..5250).18" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).18" Target="10076:[4989..5047).1" />
<Link Source="10077:[1142..1210).30" Target="10843:[6950..6996).1" />
<Link Source="10077:[1142..1210).30" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).30" Target="10076:[5552..5613).1" />
<Link Source="10077:[44231..44317).65" Target="10838:[16036..16049).1" />
<Link Source="10077:[44231..44317).65" Target="10077:[5585..5624).1" />
<Link Source="10077:[44231..44317).73" Target="10838:[16036..16049).1" />
<Link Source="10077:[6212..6251).3" Target="10838:[16036..16049).1" />
<Link Source="10077:[6275..6566).4" Target="10838:[16036..16049).1" />
<Link Source="10077:[6275..6566).4" Target="10077:[31842..31894).1" />
<Link Source="10077:[6590..6839).3" Target="10838:[16036..16049).1" />
<Link Source="10077:[6590..6839).3" Target="EXTERNAL" />
<Link Source="10307:[3290..3331).14" Target="10843:[6950..6996).1" />
<Link Source="10307:[3290..3331).14" Target="10307:[3290..3331).1" />
<Link Source="10307:[3290..3331).14" Target="25002:[4395..4432).1" />
<Link Source="10286:[1605..1638).22" Target="10843:[6950..6996).1" />
<Link Source="10286:[1605..1638).22" Target="10286:[1605..1638).1" />
<Link Source="10286:[1605..1638).22" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).31" Target="10838:[16036..16049).1" />
<Link Source="10286:[1688..1781).31" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).61" Target="10286:[1688..1781).31" />
<Link Source="10298:[471..492).61" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).31" Target="10838:[16036..16049).1" />
<Link Source="10286:[1820..1963).31" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).62" Target="10286:[1820..1963).31" />
<Link Source="10298:[471..492).62" Target="10286:[1840..1888).1" />
<Link Source="10307:[1206..1253).14" Target="10843:[6950..6996).1" />
<Link Source="10307:[1206..1253).14" Target="10307:[1206..1253).1" />
<Link Source="10307:[1206..1253).14" Target="10307:[3352..3428).1" />
<Link Source="10313:[1230..1280).2" Target="10843:[6950..6996).1" />
<Link Source="10313:[1230..1280).2" Target="25002:[4395..4432).1" />
<Link Source="10313:[1295..1337).2" Target="10843:[6950..6996).1" />
<Link Source="10313:[1295..1337).2" Target="25002:[4395..4432).1" />
<Link Source="10313:[1352..1376).2" Target="10843:[6950..6996).1" />
<Link Source="10313:[1352..1376).2" Target="25002:[4395..4432).1" />
<Link Source="10313:[1391..1416).2" Target="10843:[6950..6996).1" />
<Link Source="10313:[1391..1416).2" Target="25002:[4395..4432).1" />
<Link Source="10313:[1171..3563).2" Target="10843:[6950..6996).1" />
<Link Source="10313:[1171..3563).2" Target="25002:[4395..4432).1" />
<Link Source="10313:[1494..2257).2" Target="10313:[1230..1280).2" />
<Link Source="10313:[1494..2257).2" Target="10838:[16036..16049).1" />
<Link Source="10313:[1494..2257).2" Target="25002:[4395..4432).1" />
<Link Source="10313:[2324..3491).2" Target="10313:[1295..1337).2" />
<Link Source="10313:[2324..3491).2" Target="10838:[16036..16049).1" />
<Link Source="10313:[2324..3491).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[15096..15130).22" Target="10843:[6950..6996).1" />
<Link Source="10319:[15096..15130).22" Target="10319:[15096..15130).1" />
<Link Source="10319:[15096..15130).22" Target="10319:[13863..13947).1" />
<Link Source="10319:[39138..39163).2" Target="10838:[16036..16049).1" />
<Link Source="10319:[73480..73505).2" Target="10319:[39138..39163).2" />
<Link Source="10319:[73480..73505).2" Target="10838:[16036..16049).1" />
<Link Source="10319:[73507..73522).2" Target="10319:[39138..39163).2" />
<Link Source="10319:[73507..73522).2" Target="10838:[16036..16049).1" />
<Link Source="10319:[73736..73751).2" Target="10319:[73507..73522).2" />
<Link Source="10319:[73736..73751).2" Target="10838:[16036..16049).1" />
<Link Source="10319:[73753..73778).2" Target="10319:[73480..73505).2" />
<Link Source="10319:[73753..73778).2" Target="10838:[16036..16049).1" />
<Link Source="10319:[73882..73975).7" Target="10838:[16036..16049).1" />
<Link Source="10319:[76360..76385).5" Target="10319:[73753..73778).2" />
<Link Source="10319:[76360..76385).5" Target="10838:[16036..16049).1" />
<Link Source="10319:[76387..76402).5" Target="10319:[73736..73751).2" />
<Link Source="10319:[76387..76402).5" Target="10838:[16036..16049).1" />
<Link Source="10319:[76494..76582).17" Target="10838:[16036..16049).1" />
<Link Source="10287:[791..833).11" Target="10319:[39138..39163).2" />
<Link Source="10287:[791..833).11" Target="10838:[16036..16049).1" />
<Link Source="10286:[21546..21561).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[21563..21583).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[22086..22108).6" Target="10286:[21546..21561).6" />
<Link Source="10286:[22086..22108).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[22110..22130).6" Target="10286:[21563..21583).6" />
<Link Source="10286:[22110..22130).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[15616..15690).26" Target="10319:[39138..39163).2" />
<Link Source="10286:[15616..15690).27" Target="10319:[39138..39163).2" />
<Link Source="10286:[15616..15690).27" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[23124..23146).6" Target="10286:[22086..22108).6" />
<Link Source="10286:[23124..23146).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[23161..23181).6" Target="10286:[22110..22130).6" />
<Link Source="10286:[23161..23181).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[23281..23301).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[23380..23684).36" Target="10319:[39138..39163).2" />
<Link Source="10286:[23380..23684).36" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).11" Target="10319:[39138..39163).2" />
<Link Source="10286:[23893..24026).11" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).11" Target="10286:[23161..23181).6" />
<Link Source="10286:[24545..24641).11" Target="10319:[39138..39163).2" />
<Link Source="10286:[24655..25349).6" Target="10286:[24545..24641).11" />
<Link Source="10286:[24655..25349).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[26910..26935).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[26952..26974).6" Target="10286:[23124..23146).6" />
<Link Source="10286:[26952..26974).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[27002..27022).6" Target="10286:[23281..23301).6" />
<Link Source="10286:[27002..27022).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[27048..27088).21" Target="10319:[39138..39163).2" />
<Link Source="10286:[27048..27088).22" Target="10286:[26910..26935).6" />
<Link Source="10286:[27048..27088).22" Target="10286:[27048..27088).21" />
<Link Source="10286:[27048..27088).22" Target="10319:[39138..39163).2" />
<Link Source="10286:[27208..27236).11" Target="10319:[39138..39163).2" />
<Link Source="10286:[27250..27722).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[27738..27845).16" Target="10319:[39138..39163).2" />
<Link Source="10286:[27738..27845).17" Target="10286:[27208..27236).11" />
<Link Source="10286:[27738..27845).17" Target="10286:[27738..27845).16" />
<Link Source="10286:[27738..27845).17" Target="10319:[39138..39163).2" />
<Link Source="10286:[27861..27873).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[26281..26812).6" Target="10286:[27861..27873).6" />
<Link Source="10286:[26281..26812).6" Target="10319:[39138..39163).2" />
<Link Source="10286:[26450..26769).6" Target="10286:[24545..24641).11" />
<Link Source="10286:[26450..26769).6" Target="10286:[26281..26812).6" />
<Link Source="10319:[51817..51842).6" Target="10843:[6950..6996).1" />
<Link Source="10319:[51817..51842).6" Target="10319:[13969..14029).1" />
<Link Source="10319:[51844..51861).6" Target="10843:[6950..6996).1" />
<Link Source="10319:[51844..51861).6" Target="10319:[13969..14029).1" />
<Link Source="10319:[51863..51909).6" Target="10843:[6950..6996).1" />
<Link Source="10319:[51863..51909).6" Target="10319:[13969..14029).1" />
<Link Source="10319:[51698..52285).6" Target="10843:[6950..6996).1" />
<Link Source="10319:[51698..52285).6" Target="10319:[13969..14029).1" />
<Link Source="10287:[1680..1716).6" Target="10319:[39138..39163).2" />
<Link Source="10287:[1680..1716).6" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).6" Target="10287:[1680..1716).6" />
<Link Source="10287:[1683..1690).6" Target="10319:[39138..39163).2" />
<Link Source="10287:[1683..1690).6" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).11" Target="10287:[1683..1690).6" />
<Link Source="10287:[1683..1716).11" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).11" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).11" Target="10287:[1683..1716).11" />
<Link Source="10319:[51935..52244).11" Target="10319:[13969..14029).1" />
<Link Source="10060:[1426..1448).2" Target="10843:[6950..6996).1" />
<Link Source="10060:[1426..1448).2" Target="25002:[4395..4432).1" />
<Link Source="10060:[1524..1556).2" Target="10843:[6950..6996).1" />
<Link Source="10060:[1524..1556).2" Target="25002:[4395..4432).1" />
<Link Source="10060:[1624..1767).15" Target="10060:[1426..1448).2" />
<Link Source="10060:[1624..1767).15" Target="10319:[39138..39163).2" />
<Link Source="10060:[1624..1767).15" Target="25002:[4395..4432).1" />
<Link Source="10060:[5621..5634).6" Target="10060:[1426..1448).2" />
<Link Source="10060:[5621..5634).6" Target="10060:[1631..1766).1" />
<Link Source="10060:[5691..5716).6" Target="10060:[1524..1556).2" />
<Link Source="10060:[5691..5716).6" Target="10060:[1631..1766).1" />
<Link Source="10060:[5777..5806).6" Target="10060:[1624..1767).15" />
<Link Source="10060:[5777..5806).6" Target="10060:[1631..1766).1" />
<Link Source="10060:[5954..5991).22" Target="10843:[6950..6996).1" />
<Link Source="10060:[5954..5991).22" Target="10060:[5954..5991).17" />
<Link Source="10060:[5954..5991).22" Target="10060:[1631..1766).1" />
<Link Source="10060:[6005..6042).22" Target="10060:[5621..5634).6" />
<Link Source="10060:[6005..6042).22" Target="10060:[6005..6042).17" />
<Link Source="10060:[6005..6042).22" Target="10060:[1631..1766).1" />
<Link Source="10060:[6056..6090).11" Target="10060:[5621..5634).6" />
<Link Source="10060:[6056..6090).11" Target="10319:[39138..39163).2" />
<Link Source="10060:[6056..6090).11" Target="10060:[1631..1766).1" />
<Link Source="10060:[6104..6172).16" Target="10060:[5621..5634).6" />
<Link Source="10060:[6104..6172).16" Target="10060:[1631..1766).1" />
<Link Source="10060:[9620..9788).14" Target="10060:[5621..5634).6" />
<Link Source="10060:[9620..9788).14" Target="10319:[39138..39163).2" />
<Link Source="10060:[9620..9788).15" Target="10060:[5691..5716).6" />
<Link Source="10060:[9620..9788).15" Target="10319:[39138..39163).2" />
<Link Source="10060:[9620..9788).16" Target="10060:[6188..6219).9" />
<Link Source="10060:[9620..9788).16" Target="10319:[39138..39163).2" />
<Link Source="10060:[9620..9788).18" Target="10060:[1426..1448).2" />
<Link Source="10060:[9620..9788).18" Target="10319:[39138..39163).2" />
<Link Source="10060:[13816..13846).2" Target="10319:[39138..39163).2" />
<Link Source="10060:[13956..13969).2" Target="10060:[9620..9788).14" />
<Link Source="10060:[13956..13969).2" Target="10319:[39138..39163).2" />
<Link Source="10060:[13984..14009).2" Target="10060:[9620..9788).15" />
<Link Source="10060:[13984..14009).2" Target="10319:[39138..39163).2" />
<Link Source="10060:[14024..14055).2" Target="10060:[9620..9788).16" />
<Link Source="10060:[14024..14055).2" Target="10319:[39138..39163).2" />
<Link Source="10060:[14070..14099).2" Target="10060:[5777..5806).6" />
<Link Source="10060:[14070..14099).2" Target="10319:[39138..39163).2" />
<Link Source="10060:[14175..14221).2" Target="10319:[39138..39163).2" />
<Link Source="10060:[14247..14315).4" Target="10060:[13956..13969).2" />
<Link Source="10060:[14247..14315).4" Target="10319:[39138..39163).2" />
<Link Source="10060:[14329..14374).5" Target="10319:[39138..39163).2" />
<Link Source="10060:[14329..14374).6" Target="10060:[13816..13846).2" />
<Link Source="10060:[14329..14374).6" Target="10060:[14329..14374).5" />
<Link Source="10060:[14329..14374).6" Target="10319:[39138..39163).2" />
<Link Source="10060:[14390..14421).3" Target="10319:[39138..39163).2" />
<Link Source="10060:[14508..14613).3" Target="10060:[13816..13846).2" />
<Link Source="10060:[14508..14613).3" Target="10060:[13956..13969).2" />
<Link Source="10060:[14508..14613).3" Target="10319:[39138..39163).2" />
<Link Source="10060:[10202..10215).6" Target="10060:[13956..13969).2" />
<Link Source="10060:[10202..10215).6" Target="10319:[39138..39163).2" />
<Link Source="10060:[10265..10311).6" Target="10060:[14175..14221).2" />
<Link Source="10060:[10265..10311).6" Target="10319:[39138..39163).2" />
<Link Source="10060:[10337..10405).16" Target="10060:[10202..10215).6" />
<Link Source="10060:[10337..10405).16" Target="10319:[39138..39163).2" />
<Link Source="10060:[10419..10454).21" Target="10319:[39138..39163).2" />
<Link Source="10060:[10419..10454).22" Target="10060:[13816..13846).2" />
<Link Source="10060:[10419..10454).22" Target="10060:[10419..10454).21" />
<Link Source="10060:[10419..10454).22" Target="10319:[39138..39163).2" />
<Link Source="10060:[10470..10516).6" Target="10060:[10202..10215).6" />
<Link Source="10060:[10470..10516).6" Target="10319:[39138..39163).2" />
<Link Source="10060:[10532..10544).6" Target="10319:[39138..39163).2" />
<Link Source="10060:[10558..11295).6" Target="10060:[13816..13846).2" />
<Link Source="10060:[10558..11295).6" Target="10319:[39138..39163).2" />
<Link Source="10060:[11366..11675).45" Target="10060:[10202..10215).6" />
<Link Source="10060:[11366..11675).45" Target="10060:[13816..13846).2" />
<Link Source="10060:[11990..12013).6" Target="10060:[13816..13846).2" />
<Link Source="10060:[12078..12091).6" Target="10060:[11366..11675).45" />
<Link Source="10060:[12078..12091).6" Target="10060:[13816..13846).2" />
<Link Source="10060:[12117..12185).16" Target="10060:[12078..12091).6" />
<Link Source="10060:[12117..12185).16" Target="10060:[13816..13846).2" />
<Link Source="10060:[12199..12238).21" Target="10060:[13816..13846).2" />
<Link Source="10060:[12199..12238).22" Target="10060:[11990..12013).6" />
<Link Source="10060:[12199..12238).22" Target="10060:[12199..12238).21" />
<Link Source="10060:[12199..12238).22" Target="10060:[13816..13846).2" />
<Link Source="10843:[2152..2257).3" Target="10060:[9620..9788).18" />
<Link Source="10843:[2152..2257).3" Target="25002:[4395..4432).1" />
<Link Source="10843:[2469..2546).4" Target="10060:[9620..9788).18" />
<Link Source="10843:[2469..2546).4" Target="25002:[4395..4432).1" />
<Link Source="10843:[2560..2626).4" Target="10060:[9620..9788).18" />
<Link Source="10843:[2560..2626).4" Target="25002:[4395..4432).1" />
<Link Source="10843:[7022..7059).6" Target="10060:[9620..9788).18" />
<Link Source="10843:[7022..7059).6" Target="10843:[7022..7059).1" />
<Link Source="10843:[7022..7059).6" Target="25002:[4395..4432).1" />
<Link Source="10843:[7073..7115).6" Target="10060:[9620..9788).18" />
<Link Source="10843:[7073..7115).6" Target="10843:[7073..7115).1" />
<Link Source="10843:[7073..7115).6" Target="25002:[4395..4432).1" />
<Link Source="10843:[71916..71952).6" Target="10060:[9620..9788).18" />
<Link Source="10843:[71916..71952).6" Target="10843:[71916..71952).1" />
<Link Source="10843:[71916..71952).6" Target="10843:[72575..72638).1" />
<Link Source="10843:[71966..72002).6" Target="10060:[9620..9788).18" />
<Link Source="10843:[71966..72002).6" Target="10843:[71966..72002).1" />
<Link Source="10843:[71966..72002).6" Target="10843:[72575..72638).1" />
<Link Source="10076:[5223..5250).22" Target="10060:[9620..9788).18" />
<Link Source="10076:[5223..5250).22" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).22" Target="10076:[4989..5047).1" />
<Link Source="10077:[1142..1210).37" Target="10060:[9620..9788).18" />
<Link Source="10077:[1142..1210).37" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).37" Target="10076:[5552..5613).1" />
<Link Source="10077:[31258..31297).4" Target="10077:[31842..31894).1" />
<Link Source="10077:[31258..31297).4" Target="10077:[34685..34715).1" />
<Link Source="10077:[44231..44317).81" Target="10060:[9620..9788).18" />
<Link Source="10077:[44231..44317).81" Target="10077:[32567..32606).1" />
<Link Source="10307:[3290..3331).18" Target="10060:[9620..9788).18" />
<Link Source="10307:[3290..3331).18" Target="10307:[3290..3331).1" />
<Link Source="10307:[3290..3331).18" Target="25002:[4395..4432).1" />
<Link Source="10286:[1605..1638).26" Target="10060:[9620..9788).18" />
<Link Source="10286:[1605..1638).26" Target="10286:[1605..1638).1" />
<Link Source="10286:[1605..1638).26" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).37" Target="10060:[9620..9788).18" />
<Link Source="10286:[1688..1781).37" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).63" Target="10286:[1688..1781).37" />
<Link Source="10298:[471..492).63" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).37" Target="10060:[9620..9788).18" />
<Link Source="10286:[1820..1963).37" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).64" Target="10286:[1820..1963).37" />
<Link Source="10298:[471..492).64" Target="10286:[1840..1888).1" />
<Link Source="10307:[1206..1253).18" Target="10060:[9620..9788).18" />
<Link Source="10307:[1206..1253).18" Target="10307:[1206..1253).1" />
<Link Source="10307:[1206..1253).18" Target="10307:[3352..3428).1" />
<Link Source="10319:[15096..15130).26" Target="10060:[9620..9788).18" />
<Link Source="10319:[15096..15130).26" Target="10319:[15096..15130).1" />
<Link Source="10319:[15096..15130).26" Target="10319:[13863..13947).1" />
<Link Source="10319:[42478..42805).13" Target="10060:[9620..9788).18" />
<Link Source="10319:[42821..42938).33" Target="10060:[9620..9788).18" />
<Link Source="10319:[42839..42937).5" Target="10060:[9620..9788).18" />
<Link Source="10319:[63849..63870).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63849..63870).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63885..63919).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63885..63919).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63934..63945).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63934..63945).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63960..63969).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63960..63969).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63984..64009).5" Target="10319:[42821..42938).33" />
<Link Source="10319:[63984..64009).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[63768..64484).5" Target="10060:[9620..9788).18" />
<Link Source="10319:[63768..64484).5" Target="10319:[42839..42937).5" />
<Link Source="10319:[64035..64445).17" Target="10319:[42839..42937).5" />
<Link Source="10319:[64035..64445).18" Target="10319:[63885..63919).5" />
<Link Source="10319:[64035..64445).18" Target="10319:[64035..64445).17" />
<Link Source="10319:[64035..64445).18" Target="10319:[42839..42937).5" />
<Link Source="10319:[64461..64473).9" Target="10319:[42839..42937).5" />
<Link Source="10319:[42821..42938).39" Target="10319:[64461..64473).9" />
<Link Source="10319:[42821..42938).39" Target="10060:[9620..9788).18" />
<Link Source="10319:[42952..43079).13" Target="10060:[9620..9788).18" />
<Link Source="10319:[42952..43079).14" Target="10319:[42821..42938).39" />
<Link Source="10319:[42952..43079).14" Target="10319:[42952..43079).13" />
<Link Source="10319:[42952..43079).14" Target="10060:[9620..9788).18" />
<Link Source="10354:[11312..11328).7" Target="10060:[9620..9788).18" />
<Link Source="10354:[3684..3818).31" Target="10060:[9620..9788).18" />
<Link Source="10354:[3684..3818).31" Target="10354:[11312..11328).7" />
<Link Source="10354:[3720..3803).225" Target="10354:[3684..3818).31" />
<Link Source="10354:[3720..3803).225" Target="10060:[9620..9788).18" />
<Link Source="10354:[3720..3803).225" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).225" Target="10354:[11312..11328).7" />
<Link Source="10354:[3720..3803).226" Target="10354:[11312..11328).7" />
<Link Source="10354:[3720..3803).227" Target="10354:[3684..3818).31" />
<Link Source="10354:[3720..3803).227" Target="10060:[9620..9788).18" />
<Link Source="10354:[3720..3803).227" Target="10354:[3720..3803).226" />
<Link Source="10354:[3720..3803).227" Target="10354:[11312..11328).7" />
<Link Source="10354:[11299..11330).19" Target="10354:[3720..3803).225" />
<Link Source="10354:[11299..11330).19" Target="10060:[9620..9788).18" />
<Link Source="10319:[50330..50355).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[3905..3919).5" Target="10060:[9620..9788).18" />
<Link Source="10354:[3684..3818).32" Target="10060:[9620..9788).18" />
<Link Source="10354:[3684..3818).32" Target="10312:[3905..3919).5" />
<Link Source="10354:[3720..3803).233" Target="10354:[3684..3818).32" />
<Link Source="10354:[3720..3803).233" Target="10060:[9620..9788).18" />
<Link Source="10354:[3720..3803).233" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).233" Target="10312:[3905..3919).5" />
<Link Source="10354:[3720..3803).234" Target="10312:[3905..3919).5" />
<Link Source="10354:[3720..3803).235" Target="10354:[3684..3818).32" />
<Link Source="10354:[3720..3803).235" Target="10060:[9620..9788).18" />
<Link Source="10354:[3720..3803).235" Target="10354:[3720..3803).234" />
<Link Source="10354:[3720..3803).235" Target="10312:[3905..3919).5" />
<Link Source="10312:[3892..3921).13" Target="10354:[3720..3803).233" />
<Link Source="10312:[3892..3921).13" Target="10060:[9620..9788).18" />
<Link Source="10312:[3935..3968).17" Target="10060:[9620..9788).18" />
<Link Source="10312:[3948..3966).5" Target="10060:[9620..9788).18" />
<Link Source="10353:[4698..4724).11" Target="10312:[3935..3968).17" />
<Link Source="10353:[4698..4724).11" Target="10312:[3948..3966).5" />
<Link Source="10353:[4750..4847).21" Target="10353:[4698..4724).11" />
<Link Source="10353:[4750..4847).21" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).21" Target="10312:[3948..3966).5" />
<Link Source="10353:[4863..5000).41" Target="10353:[4698..4724).11" />
<Link Source="10353:[4863..5000).41" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).41" Target="10312:[3948..3966).5" />
<Link Source="10353:[4863..5000).42" Target="10312:[3948..3966).5" />
<Link Source="10353:[5079..5183).21" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).21" Target="10312:[3948..3966).5" />
<Link Source="10353:[5197..5323).31" Target="10353:[4698..4724).11" />
<Link Source="10353:[5197..5323).31" Target="10353:[5079..5183).21" />
<Link Source="10353:[5197..5323).31" Target="10312:[3948..3966).5" />
<Link Source="10353:[5485..5759).61" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).61" Target="10312:[3948..3966).5" />
<Link Source="10353:[5485..5759).62" Target="10353:[4698..4724).11" />
<Link Source="10353:[5485..5759).62" Target="10353:[5485..5759).61" />
<Link Source="10353:[5485..5759).62" Target="10312:[3948..3966).5" />
<Link Source="10353:[5485..5759).63" Target="10312:[3948..3966).5" />
<Link Source="10353:[5775..5979).41" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).41" Target="10312:[3948..3966).5" />
<Link Source="10353:[5775..5979).43" Target="10353:[4698..4724).11" />
<Link Source="10353:[5775..5979).43" Target="10353:[5775..5979).41" />
<Link Source="10353:[5775..5979).43" Target="10312:[3948..3966).5" />
<Link Source="10353:[5995..6029).31" Target="10353:[5775..5979).43" />
<Link Source="10353:[5995..6029).31" Target="10312:[3948..3966).5" />
<Link Source="10353:[6002..6028).11" Target="10312:[3948..3966).5" />
<Link Source="10353:[6343..6358).11" Target="10353:[5995..6029).31" />
<Link Source="10353:[6343..6358).11" Target="10353:[6002..6028).11" />
<Link Source="10353:[6384..6410).61" Target="10353:[6002..6028).11" />
<Link Source="10353:[6384..6410).62" Target="10353:[6343..6358).11" />
<Link Source="10353:[6384..6410).62" Target="10353:[6384..6410).61" />
<Link Source="10353:[6384..6410).62" Target="10353:[6002..6028).11" />
<Link Source="10312:[5188..5207).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[5209..5220).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[5222..5231).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[5233..5272).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[5274..5295).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[5297..5318).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[5320..5333).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[5124..5404).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[4685..4699).13" Target="10060:[9620..9788).18" />
<Link Source="10354:[3684..3818).33" Target="10060:[9620..9788).18" />
<Link Source="10354:[3684..3818).33" Target="10312:[4685..4699).13" />
<Link Source="10354:[3720..3803).241" Target="10354:[3684..3818).33" />
<Link Source="10354:[3720..3803).241" Target="10060:[9620..9788).18" />
<Link Source="10354:[3720..3803).241" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).241" Target="10312:[4685..4699).13" />
<Link Source="10354:[3720..3803).242" Target="10312:[4685..4699).13" />
<Link Source="10354:[3720..3803).243" Target="10354:[3684..3818).33" />
<Link Source="10354:[3720..3803).243" Target="10060:[9620..9788).18" />
<Link Source="10354:[3720..3803).243" Target="10354:[3720..3803).242" />
<Link Source="10354:[3720..3803).243" Target="10312:[4685..4699).13" />
<Link Source="10312:[4680..4787).25" Target="10354:[3720..3803).241" />
<Link Source="10312:[4680..4787).25" Target="10060:[9620..9788).18" />
<Link Source="10312:[4826..5058).61" Target="10060:[9620..9788).18" />
<Link Source="10312:[4826..5058).61" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).62" Target="10060:[9620..9788).18" />
<Link Source="10382:[1340..1359).3" Target="10060:[9620..9788).18" />
<Link Source="10382:[1374..1383).3" Target="10060:[9620..9788).18" />
<Link Source="10382:[1385..1424).3" Target="10060:[9620..9788).18" />
<Link Source="10382:[1426..1447).3" Target="10060:[9620..9788).18" />
<Link Source="10382:[1449..1470).3" Target="10060:[9620..9788).18" />
<Link Source="10382:[1472..1485).3" Target="10060:[9620..9788).18" />
<Link Source="10382:[1572..1586).3" Target="10060:[9620..9788).18" />
<Link Source="10354:[3684..3818).34" Target="10382:[1340..1359).3" />
<Link Source="10354:[3684..3818).34" Target="10382:[1572..1586).3" />
<Link Source="10354:[3720..3803).249" Target="10354:[3684..3818).34" />
<Link Source="10354:[3720..3803).249" Target="10060:[9620..9788).18" />
<Link Source="10354:[3720..3803).249" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).249" Target="10382:[1572..1586).3" />
<Link Source="10354:[3720..3803).250" Target="10382:[1572..1586).3" />
<Link Source="10354:[3720..3803).251" Target="10354:[3684..3818).34" />
<Link Source="10354:[3720..3803).251" Target="10060:[9620..9788).18" />
<Link Source="10354:[3720..3803).251" Target="10354:[3720..3803).250" />
<Link Source="10354:[3720..3803).251" Target="10382:[1572..1586).3" />
<Link Source="10382:[1559..1588).7" Target="10354:[3720..3803).249" />
<Link Source="10382:[1559..1588).7" Target="10060:[9620..9788).18" />
<Link Source="10382:[1619..1629).3" Target="10060:[9620..9788).18" />
<Link Source="10382:[913..1046).3" Target="10060:[9620..9788).18" />
<Link Source="10382:[913..1046).3" Target="10382:[1619..1629).3" />
<Link Source="10382:[949..1031).5" Target="EXTERNAL" />
<Link Source="10382:[949..1031).5" Target="10382:[1619..1629).3" />
<Link Source="10382:[1604..1691).11" Target="10382:[949..1031).5" />
<Link Source="10382:[1604..1691).11" Target="10060:[9620..9788).18" />
<Link Source="10382:[1604..1691).12" Target="10382:[1426..1447).3" />
<Link Source="10382:[1604..1691).12" Target="10382:[1604..1691).11" />
<Link Source="10382:[1604..1691).12" Target="10060:[9620..9788).18" />
<Link Source="10382:[1604..1691).13" Target="10060:[9620..9788).18" />
<Link Source="10346:[10861..10875).7" Target="10060:[9620..9788).18" />
<Link Source="10354:[3684..3818).36" Target="10060:[9620..9788).18" />
<Link Source="10354:[3684..3818).36" Target="10346:[10861..10875).7" />
<Link Source="10354:[3720..3803).265" Target="10354:[3684..3818).36" />
<Link Source="10354:[3720..3803).265" Target="10060:[9620..9788).18" />
<Link Source="10354:[3720..3803).265" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).265" Target="10346:[10861..10875).7" />
<Link Source="10354:[3720..3803).266" Target="10346:[10861..10875).7" />
<Link Source="10354:[3720..3803).267" Target="10354:[3684..3818).36" />
<Link Source="10354:[3720..3803).267" Target="10060:[9620..9788).18" />
<Link Source="10354:[3720..3803).267" Target="10354:[3720..3803).266" />
<Link Source="10354:[3720..3803).267" Target="10346:[10861..10875).7" />
<Link Source="10346:[10848..10877).19" Target="10354:[3720..3803).265" />
<Link Source="10346:[10848..10877).19" Target="10060:[9620..9788).18" />
<Link Source="10346:[10897..10914).7" Target="10060:[9620..9788).18" />
<Link Source="10346:[7666..7775).7" Target="10060:[9620..9788).18" />
<Link Source="10346:[7666..7775).7" Target="10346:[10897..10914).7" />
<Link Source="10346:[7672..7773).19" Target="10346:[7666..7775).7" />
<Link Source="10346:[7672..7773).19" Target="10060:[9620..9788).18" />
<Link Source="10346:[7672..7773).19" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).19" Target="10346:[10897..10914).7" />
<Link Source="10346:[10893..11127).13" Target="10346:[7672..7773).19" />
<Link Source="10346:[10893..11127).13" Target="10060:[9620..9788).18" />
<Link Source="10346:[3525..3638).47" Target="10060:[9620..9788).18" />
<Link Source="10312:[7903..7936).25" Target="10060:[9620..9788).18" />
<Link Source="10312:[7916..7934).7" Target="10060:[9620..9788).18" />
<Link Source="10353:[4698..4724).12" Target="10312:[7903..7936).25" />
<Link Source="10353:[4698..4724).12" Target="10312:[7916..7934).7" />
<Link Source="10353:[4750..4847).23" Target="10353:[4698..4724).12" />
<Link Source="10353:[4750..4847).23" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).23" Target="10312:[7916..7934).7" />
<Link Source="10353:[4863..5000).45" Target="10353:[4698..4724).12" />
<Link Source="10353:[4863..5000).45" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).45" Target="10312:[7916..7934).7" />
<Link Source="10353:[4863..5000).46" Target="10312:[7916..7934).7" />
<Link Source="10353:[5079..5183).23" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).23" Target="10312:[7916..7934).7" />
<Link Source="10353:[5197..5323).34" Target="10353:[4698..4724).12" />
<Link Source="10353:[5197..5323).34" Target="10353:[5079..5183).23" />
<Link Source="10353:[5197..5323).34" Target="10312:[7916..7934).7" />
<Link Source="10353:[5485..5759).67" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).67" Target="10312:[7916..7934).7" />
<Link Source="10353:[5485..5759).68" Target="10353:[4698..4724).12" />
<Link Source="10353:[5485..5759).68" Target="10353:[5485..5759).67" />
<Link Source="10353:[5485..5759).68" Target="10312:[7916..7934).7" />
<Link Source="10353:[5485..5759).69" Target="10312:[7916..7934).7" />
<Link Source="10353:[5775..5979).45" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).45" Target="10312:[7916..7934).7" />
<Link Source="10353:[5775..5979).47" Target="10353:[4698..4724).12" />
<Link Source="10353:[5775..5979).47" Target="10353:[5775..5979).45" />
<Link Source="10353:[5775..5979).47" Target="10312:[7916..7934).7" />
<Link Source="10353:[5995..6029).34" Target="10353:[5775..5979).47" />
<Link Source="10353:[5995..6029).34" Target="10312:[7916..7934).7" />
<Link Source="10353:[6002..6028).12" Target="10312:[7916..7934).7" />
<Link Source="10353:[6343..6358).12" Target="10353:[5995..6029).34" />
<Link Source="10353:[6343..6358).12" Target="10353:[6002..6028).12" />
<Link Source="10353:[6384..6410).67" Target="10353:[6002..6028).12" />
<Link Source="10353:[6384..6410).68" Target="10353:[6343..6358).12" />
<Link Source="10353:[6384..6410).68" Target="10353:[6384..6410).67" />
<Link Source="10353:[6384..6410).68" Target="10353:[6002..6028).12" />
<Link Source="10312:[7952..7977).25" Target="10060:[9620..9788).18" />
<Link Source="10312:[61608..61629).9" Target="10060:[9620..9788).18" />
<Link Source="10312:[63473..63501).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[63503..63516).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[63566..63612).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[63638..63668).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[80978..80991).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[80993..81002).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[81004..81017).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[81004..81017).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[81019..81040).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[81019..81040).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[81042..81069).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[81042..81069).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[81095..84034).5" Target="10312:[80978..80991).5" />
<Link Source="10312:[81095..84034).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[81196..82523).29" Target="10312:[81095..84034).5" />
<Link Source="10312:[81196..82523).30" Target="10312:[80993..81002).5" />
<Link Source="10312:[81196..82523).30" Target="10312:[81196..82523).29" />
<Link Source="10312:[81196..82523).30" Target="10312:[81095..84034).5" />
<Link Source="10312:[81196..82523).31" Target="10312:[81019..81040).5" />
<Link Source="10312:[81196..82523).31" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).31" Target="10312:[81095..84034).5" />
<Link Source="10312:[81196..82523).34" Target="10312:[81196..82523).30" />
<Link Source="10312:[81196..82523).34" Target="10312:[81196..82523).31" />
<Link Source="10312:[81196..82523).34" Target="10312:[81095..84034).5" />
<Link Source="10312:[81319..81371).5" Target="10312:[80978..80991).5" />
<Link Source="10312:[81319..81371).5" Target="10312:[81196..82523).34" />
<Link Source="10312:[81495..81570).21" Target="10312:[81319..81371).5" />
<Link Source="10312:[81495..81570).21" Target="10060:[9620..9788).18" />
<Link Source="10312:[81495..81570).21" Target="10312:[81196..82523).34" />
<Link Source="10312:[81495..81570).22" Target="10312:[81319..81371).5" />
<Link Source="10312:[81495..81570).22" Target="10312:[81196..82523).34" />
<Link Source="10312:[81596..82500).25" Target="10312:[81319..81371).5" />
<Link Source="10312:[81596..82500).25" Target="10060:[9620..9788).18" />
<Link Source="10312:[81596..82500).25" Target="10312:[80993..81002).5" />
<Link Source="10312:[81596..82500).25" Target="10312:[81196..82523).34" />
<Link Source="10312:[81596..82500).26" Target="10312:[81019..81040).5" />
<Link Source="10312:[81596..82500).26" Target="10312:[81196..82523).34" />
<Link Source="10312:[81628..81659).5" Target="10312:[81196..82523).34" />
<Link Source="10353:[7504..7530).10" Target="10312:[81596..82500).26" />
<Link Source="10353:[7504..7530).10" Target="10312:[81628..81659).5" />
<Link Source="10312:[81596..82500).29" Target="10312:[81596..82500).25" />
<Link Source="10312:[81596..82500).29" Target="10353:[7504..7530).10" />
<Link Source="10312:[81596..82500).29" Target="10312:[81196..82523).34" />
<Link Source="10312:[84050..84066).9" Target="10060:[9620..9788).18" />
<Link Source="10312:[66177..69285).52" Target="10312:[63473..63501).5" />
<Link Source="10312:[66177..69285).52" Target="10312:[63503..63516).5" />
<Link Source="10312:[66291..66342).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[75301..75322).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[75301..75322).5" Target="10312:[66291..66342).5" />
<Link Source="10312:[75324..75352).5" Target="10312:[66177..69285).52" />
<Link Source="10312:[75324..75352).5" Target="10312:[66291..66342).5" />
<Link Source="10312:[75735..75866).21" Target="10312:[75301..75322).5" />
<Link Source="10312:[75735..75866).21" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).21" Target="10312:[66291..66342).5" />
<Link Source="10312:[75735..75866).22" Target="10312:[66291..66342).5" />
<Link Source="10312:[75742..75804).5" Target="10312:[75735..75866).21" />
<Link Source="10312:[75742..75804).5" Target="10312:[66291..66342).5" />
<Link Source="10312:[75735..75866).24" Target="10312:[75324..75352).5" />
<Link Source="10312:[75735..75866).24" Target="10312:[75742..75804).5" />
<Link Source="10312:[66177..69285).55" Target="10312:[63638..63668).5" />
<Link Source="10312:[66177..69285).55" Target="10312:[63503..63516).5" />
<Link Source="10312:[66177..69285).57" Target="10312:[63566..63612).5" />
<Link Source="10312:[66177..69285).57" Target="10312:[63503..63516).5" />
<Link Source="10312:[77543..77571).5" Target="10312:[75735..75866).24" />
<Link Source="10312:[77543..77571).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[77573..77604).5" Target="10312:[66177..69285).55" />
<Link Source="10312:[77573..77604).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[77654..77700).5" Target="10312:[66177..69285).57" />
<Link Source="10312:[77654..77700).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[77726..77892).17" Target="10312:[63503..63516).5" />
<Link Source="10312:[77726..77892).17" Target="10060:[9620..9788).18" />
<Link Source="10312:[77726..77892).18" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).18" Target="10312:[63503..63516).5" />
<Link Source="10312:[77730..77782).5" Target="10312:[63503..63516).5" />
<Link Source="10298:[471..492).68" Target="10312:[77726..77892).17" />
<Link Source="10298:[471..492).68" Target="10312:[77730..77782).5" />
<Link Source="10298:[494..511).68" Target="10312:[77726..77892).18" />
<Link Source="10298:[494..511).68" Target="10312:[77730..77782).5" />
<Link Source="10312:[78402..78430).5" Target="10312:[77543..77571).5" />
<Link Source="10312:[78402..78430).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[78432..78463).5" Target="10312:[77573..77604).5" />
<Link Source="10312:[78432..78463).5" Target="10312:[63503..63516).5" />
<Link Source="10312:[78513..78552).5" Target="10312:[77654..77700).5" />
<Link Source="10312:[78513..78552).5" Target="10312:[63503..63516).5" />
<Link Source="10376:[1085..1113).3" Target="10312:[78402..78430).5" />
<Link Source="10376:[1085..1113).3" Target="10312:[63503..63516).5" />
<Link Source="10376:[1115..1146).3" Target="10312:[78432..78463).5" />
<Link Source="10376:[1115..1146).3" Target="10312:[63503..63516).5" />
<Link Source="10376:[1196..1235).3" Target="10312:[78513..78552).5" />
<Link Source="10376:[1196..1235).3" Target="10312:[63503..63516).5" />
<Link Source="10376:[1028..1425).3" Target="10312:[63503..63516).5" />
<Link Source="10376:[1028..1425).3" Target="10060:[9620..9788).18" />
<Link Source="10286:[30135..30160).5" Target="10376:[1085..1113).3" />
<Link Source="10286:[30135..30160).5" Target="10312:[63503..63516).5" />
<Link Source="10286:[30175..30206).5" Target="10376:[1115..1146).3" />
<Link Source="10286:[30175..30206).5" Target="10312:[63503..63516).5" />
<Link Source="10286:[30283..30330).5" Target="10376:[1196..1235).3" />
<Link Source="10286:[30283..30330).5" Target="10312:[63503..63516).5" />
<Link Source="10286:[30012..30691).5" Target="10376:[1028..1425).3" />
<Link Source="10286:[30012..30691).5" Target="10312:[63503..63516).5" />
<Link Source="10286:[30356..30522).17" Target="10286:[30012..30691).5" />
<Link Source="10286:[30356..30522).17" Target="10060:[9620..9788).18" />
<Link Source="10286:[30356..30522).17" Target="10312:[63503..63516).5" />
<Link Source="10286:[30356..30522).18" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).18" Target="10312:[63503..63516).5" />
<Link Source="10286:[30360..30412).5" Target="10312:[63503..63516).5" />
<Link Source="10298:[471..492).69" Target="10286:[30356..30522).17" />
<Link Source="10298:[471..492).69" Target="10286:[30360..30412).5" />
<Link Source="10298:[494..511).69" Target="10286:[30356..30522).18" />
<Link Source="10298:[494..511).69" Target="10286:[30360..30412).5" />
<Link Source="10060:[2136..2158).5" Target="10376:[1028..1425).3" />
<Link Source="10060:[2136..2158).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[2173..2198).5" Target="10286:[30135..30160).5" />
<Link Source="10060:[2173..2198).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[2213..2244).5" Target="10286:[30175..30206).5" />
<Link Source="10060:[2213..2244).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[2320..2366).5" Target="10286:[30283..30330).5" />
<Link Source="10060:[2320..2366).5" Target="10312:[63503..63516).5" />
<Link Source="10060:[5621..5634).7" Target="10060:[2136..2158).5" />
<Link Source="10060:[5621..5634).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[5691..5716).7" Target="10060:[2173..2198).5" />
<Link Source="10060:[5691..5716).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[5731..5762).7" Target="10060:[2213..2244).5" />
<Link Source="10060:[5731..5762).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[5777..5806).7" Target="10060:[2136..2158).5" />
<Link Source="10060:[5777..5806).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[5882..5928).7" Target="10060:[2320..2366).5" />
<Link Source="10060:[5882..5928).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[5954..5991).25" Target="10312:[63503..63516).5" />
<Link Source="10060:[6005..6042).25" Target="10312:[63503..63516).5" />
<Link Source="10060:[6005..6042).26" Target="10060:[5621..5634).7" />
<Link Source="10060:[6005..6042).26" Target="10060:[6005..6042).25" />
<Link Source="10060:[6005..6042).26" Target="10312:[63503..63516).5" />
<Link Source="10060:[6056..6090).13" Target="10060:[5621..5634).7" />
<Link Source="10060:[6056..6090).13" Target="10060:[9620..9788).18" />
<Link Source="10060:[6056..6090).13" Target="10312:[63503..63516).5" />
<Link Source="10060:[6104..6172).19" Target="10060:[5621..5634).7" />
<Link Source="10060:[6104..6172).19" Target="10312:[63503..63516).5" />
<Link Source="10060:[6188..6219).13" Target="10312:[63503..63516).5" />
<Link Source="10060:[10202..10215).7" Target="10060:[5621..5634).7" />
<Link Source="10060:[10202..10215).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[10265..10311).7" Target="10060:[5882..5928).7" />
<Link Source="10060:[10265..10311).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[10337..10405).19" Target="10060:[10202..10215).7" />
<Link Source="10060:[10337..10405).19" Target="10312:[63503..63516).5" />
<Link Source="10060:[10419..10454).25" Target="10312:[63503..63516).5" />
<Link Source="10060:[10470..10516).7" Target="10060:[10202..10215).7" />
<Link Source="10060:[10470..10516).7" Target="10060:[9620..9788).18" />
<Link Source="10060:[10470..10516).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[10532..10544).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[10558..11295).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[10558..11295).7" Target="10060:[9620..9788).18" />
<Link Source="10060:[11990..12013).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[12078..12091).7" Target="10060:[10202..10215).7" />
<Link Source="10060:[12078..12091).7" Target="10312:[63503..63516).5" />
<Link Source="10060:[12117..12185).19" Target="10060:[12078..12091).7" />
<Link Source="10060:[12117..12185).19" Target="10312:[63503..63516).5" />
<Link Source="10060:[12199..12238).25" Target="10312:[63503..63516).5" />
<Link Source="10060:[12199..12238).26" Target="10060:[11990..12013).7" />
<Link Source="10060:[12199..12238).26" Target="10060:[12199..12238).25" />
<Link Source="10060:[12199..12238).26" Target="10312:[63503..63516).5" />
<Link Source="10346:[11710..11746).5" Target="10312:[63503..63516).5" />
<Link Source="10286:[2155..2260).9" Target="10060:[9620..9788).18" />
<Link Source="10286:[2155..2260).9" Target="10346:[11710..11746).5" />
<Link Source="10286:[2191..2245).33" Target="10286:[2155..2260).9" />
<Link Source="10286:[2191..2245).33" Target="10312:[63503..63516).5" />
<Link Source="10286:[2191..2245).33" Target="10346:[11710..11746).5" />
<Link Source="10286:[2191..2245).34" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).34" Target="10346:[11710..11746).5" />
<Link Source="10286:[2198..2244).9" Target="10346:[11710..11746).5" />
<Link Source="10298:[471..492).71" Target="10286:[2191..2245).33" />
<Link Source="10298:[471..492).71" Target="10286:[2198..2244).9" />
<Link Source="10298:[494..511).71" Target="10286:[2191..2245).34" />
<Link Source="10298:[494..511).71" Target="10286:[2198..2244).9" />
<Link Source="10345:[28225..28251).5" Target="10298:[471..492).71" />
<Link Source="10345:[28225..28251).5" Target="10312:[63503..63516).5" />
<Link Source="10345:[28927..28940).9" Target="10312:[63503..63516).5" />
<Link Source="10346:[12205..12212).5" Target="10312:[63503..63516).5" />
<Link Source="10354:[3720..3803).273" Target="10354:[3684..3818).33" />
<Link Source="10354:[3720..3803).273" Target="10312:[63503..63516).5" />
<Link Source="10354:[3720..3803).273" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).273" Target="10312:[4685..4699).13" />
<Link Source="10312:[4680..4787).29" Target="10354:[3720..3803).273" />
<Link Source="10312:[4680..4787).29" Target="10060:[9620..9788).18" />
<Link Source="10312:[4749..4764).5" Target="10060:[9620..9788).18" />
<Link Source="10312:[4749..4764).5" Target="10312:[4680..4787).29" />
<Link Source="10312:[5087..5101).5" Target="10312:[4749..4764).5" />
<Link Source="10312:[5087..5101).5" Target="10060:[9620..9788).18" />
<Link Source="10319:[43799..44676).25" Target="10060:[9620..9788).18" />
<Link Source="10319:[43853..43873).5" Target="10060:[9620..9788).18" />
<Link Source="10319:[41088..41107).5" Target="10319:[43799..44676).25" />
<Link Source="10319:[41088..41107).5" Target="10319:[43853..43873).5" />
<Link Source="10319:[41138..41158).5" Target="10319:[43853..43873).5" />
<Link Source="10354:[4919..5009).50" Target="10319:[41088..41107).5" />
<Link Source="10354:[4919..5009).50" Target="10319:[41138..41158).5" />
<Link Source="10354:[4094..4107).68" Target="10354:[4919..5009).50" />
<Link Source="10354:[4094..4107).68" Target="10312:[63503..63516).5" />
<Link Source="10354:[4094..4107).68" Target="10319:[41138..41158).5" />
<Link Source="10319:[41133..41220).9" Target="10354:[4094..4107).68" />
<Link Source="10319:[41133..41220).9" Target="10319:[43853..43873).5" />
<Link Source="10319:[41254..41268).5" Target="10319:[43853..43873).5" />
<Link Source="10354:[4525..4595).9" Target="10319:[41088..41107).5" />
<Link Source="10354:[4525..4595).9" Target="10319:[41254..41268).5" />
<Link Source="10354:[4561..4580).9" Target="10354:[4525..4595).9" />
<Link Source="10354:[4561..4580).9" Target="10312:[63503..63516).5" />
<Link Source="10354:[4561..4580).9" Target="10319:[41254..41268).5" />
<Link Source="10319:[41236..41680).17" Target="10354:[4561..4580).9" />
<Link Source="10319:[41236..41680).17" Target="10319:[43853..43873).5" />
<Link Source="10319:[41302..41665).5" Target="10319:[41236..41680).17" />
<Link Source="10319:[41302..41665).5" Target="10312:[63503..63516).5" />
<Link Source="10319:[41634..41646).9" Target="10319:[41302..41665).5" />
<Link Source="10319:[44751..44765).5" Target="10060:[9620..9788).18" />
<Link Source="10319:[84257..84273).5" Target="10060:[9620..9788).18" />
<Link Source="10319:[84288..84313).5" Target="10060:[9620..9788).18" />
<Link Source="10319:[84374..84391).5" Target="10319:[44751..44765).5" />
<Link Source="10319:[84374..84391).5" Target="10060:[9620..9788).18" />
<Link Source="10319:[84406..84447).5" Target="10319:[44751..44765).5" />
<Link Source="10319:[84406..84447).5" Target="10060:[9620..9788).18" />
<Link Source="10319:[84462..84508).5" Target="10319:[44751..44765).5" />
<Link Source="10319:[84462..84508).5" Target="10060:[9620..9788).18" />
<Link Source="10319:[84124..109887).5" Target="10060:[9620..9788).18" />
<Link Source="10319:[85320..85348).17" Target="10060:[9620..9788).18" />
<Link Source="10319:[85320..85348).18" Target="10319:[84257..84273).5" />
<Link Source="10319:[85320..85348).18" Target="10319:[85320..85348).17" />
<Link Source="10319:[85320..85348).18" Target="10060:[9620..9788).18" />
<Link Source="10319:[85366..85400).17" Target="10060:[9620..9788).18" />
<Link Source="10319:[85366..85400).18" Target="10319:[84288..84313).5" />
<Link Source="10319:[85366..85400).18" Target="10319:[85366..85400).17" />
<Link Source="10319:[85366..85400).18" Target="10060:[9620..9788).18" />
<Link Source="10319:[85467..85484).9" Target="10060:[9620..9788).18" />
<Link Source="10319:[104874..105336).13" Target="10312:[63503..63516).5" />
<Link Source="10319:[104874..105336).13" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).14" Target="10319:[104874..105336).13" />
<Link Source="10319:[104874..105336).14" Target="10319:[84124..109887).5" />
<Link Source="10319:[104874..105336).14" Target="10312:[63503..63516).5" />
<Link Source="10319:[105368..106708).5" Target="10319:[84257..84273).5" />
<Link Source="10319:[105368..106708).5" Target="10312:[63503..63516).5" />
<Link Source="10319:[105465..105535).17" Target="10319:[84288..84313).5" />
<Link Source="10319:[105465..105535).17" Target="10319:[105368..106708).5" />
<Link Source="10319:[76360..76385).6" Target="10319:[105465..105535).17" />
<Link Source="10319:[76360..76385).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[76387..76402).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[76494..76582).21" Target="10319:[105368..106708).5" />
<Link Source="10319:[84691..84861).9" Target="10312:[63503..63516).5" />
<Link Source="10319:[84691..84861).9" Target="10319:[105368..106708).5" />
<Link Source="10319:[84691..84861).9" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).9" Target="10060:[9620..9788).18" />
<Link Source="10319:[84764..84846).25" Target="10319:[84257..84273).5" />
<Link Source="10319:[84764..84846).25" Target="10319:[84691..84861).9" />
<Link Source="10319:[84764..84846).26" Target="10319:[84691..84861).9" />
<Link Source="10319:[84764..84846).28" Target="10312:[63503..63516).5" />
<Link Source="10319:[84764..84846).28" Target="10319:[84691..84861).9" />
<Link Source="10319:[84764..84846).29" Target="10319:[84288..84313).5" />
<Link Source="10319:[84764..84846).29" Target="10319:[84691..84861).9" />
<Link Source="10319:[84764..84845).5" Target="10319:[84691..84861).9" />
<Link Source="10306:[358886..358901).5" Target="10319:[84764..84846).25" />
<Link Source="10306:[358886..358901).5" Target="10319:[84764..84845).5" />
<Link Source="10306:[358903..358930).5" Target="10319:[84764..84846).26" />
<Link Source="10306:[358903..358930).5" Target="10319:[84764..84845).5" />
<Link Source="10306:[358932..358945).5" Target="10319:[84764..84846).28" />
<Link Source="10306:[358932..358945).5" Target="10319:[84764..84845).5" />
<Link Source="10306:[358947..358972).5" Target="10319:[84764..84846).29" />
<Link Source="10306:[358947..358972).5" Target="10319:[84764..84845).5" />
<Link Source="10306:[358838..360009).5" Target="10319:[84124..109887).5" />
<Link Source="10306:[358838..360009).5" Target="10319:[84764..84845).5" />
<Link Source="10306:[358998..359998).25" Target="10306:[358932..358945).5" />
<Link Source="10306:[358998..359998).25" Target="10319:[105368..106708).5" />
<Link Source="10306:[358998..359998).25" Target="10319:[84764..84845).5" />
<Link Source="10306:[358998..359998).26" Target="10319:[84764..84845).5" />
<Link Source="10319:[44948..45377).9" Target="10312:[63503..63516).5" />
<Link Source="10319:[44948..45377).9" Target="10319:[105368..106708).5" />
<Link Source="10319:[44948..45377).9" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).9" Target="10060:[9620..9788).18" />
<Link Source="10354:[11428..11441).7" Target="10060:[9620..9788).18" />
<Link Source="10319:[45408..45422).5" Target="10060:[9620..9788).18" />
<Link Source="10287:[2377..2471).9" Target="10312:[63503..63516).5" />
<Link Source="10287:[2377..2471).9" Target="10060:[9620..9788).18" />
<Link Source="10287:[791..833).13" Target="10319:[105368..106708).5" />
<Link Source="10287:[791..833).13" Target="10312:[63503..63516).5" />
<Link Source="10286:[21546..21561).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[21563..21583).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[22086..22108).7" Target="10286:[21546..21561).7" />
<Link Source="10286:[22086..22108).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[22110..22130).7" Target="10286:[21563..21583).7" />
<Link Source="10286:[22110..22130).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[15616..15690).31" Target="10319:[105368..106708).5" />
<Link Source="10286:[15616..15690).32" Target="10319:[105368..106708).5" />
<Link Source="10286:[15616..15690).32" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[23124..23146).7" Target="10286:[22086..22108).7" />
<Link Source="10286:[23124..23146).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[23161..23181).7" Target="10286:[22110..22130).7" />
<Link Source="10286:[23161..23181).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[23281..23301).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[23380..23684).43" Target="10319:[105368..106708).5" />
<Link Source="10286:[23380..23684).43" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).13" Target="10319:[105368..106708).5" />
<Link Source="10286:[23893..24026).13" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).13" Target="10286:[23161..23181).7" />
<Link Source="10286:[24545..24641).13" Target="10319:[105368..106708).5" />
<Link Source="10286:[24655..25349).7" Target="10286:[24545..24641).13" />
<Link Source="10286:[24655..25349).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[26910..26935).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[26952..26974).7" Target="10286:[23124..23146).7" />
<Link Source="10286:[26952..26974).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[27002..27022).7" Target="10286:[23281..23301).7" />
<Link Source="10286:[27002..27022).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[27048..27088).25" Target="10319:[105368..106708).5" />
<Link Source="10286:[27048..27088).26" Target="10286:[26910..26935).7" />
<Link Source="10286:[27048..27088).26" Target="10286:[27048..27088).25" />
<Link Source="10286:[27048..27088).26" Target="10319:[105368..106708).5" />
<Link Source="10286:[27208..27236).13" Target="10319:[105368..106708).5" />
<Link Source="10286:[27250..27722).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[27738..27845).19" Target="10319:[105368..106708).5" />
<Link Source="10286:[27738..27845).20" Target="10286:[27208..27236).13" />
<Link Source="10286:[27738..27845).20" Target="10286:[27738..27845).19" />
<Link Source="10286:[27738..27845).20" Target="10319:[105368..106708).5" />
<Link Source="10286:[27861..27873).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[26281..26812).7" Target="10286:[27861..27873).7" />
<Link Source="10286:[26281..26812).7" Target="10319:[105368..106708).5" />
<Link Source="10286:[26450..26769).7" Target="10286:[24545..24641).13" />
<Link Source="10286:[26450..26769).7" Target="10286:[26281..26812).7" />
<Link Source="10319:[51817..51842).7" Target="10060:[9620..9788).18" />
<Link Source="10319:[51817..51842).7" Target="10319:[13969..14029).1" />
<Link Source="10319:[51844..51861).7" Target="10060:[9620..9788).18" />
<Link Source="10319:[51844..51861).7" Target="10319:[13969..14029).1" />
<Link Source="10319:[51863..51909).7" Target="10060:[9620..9788).18" />
<Link Source="10319:[51863..51909).7" Target="10319:[13969..14029).1" />
<Link Source="10319:[51698..52285).7" Target="10060:[9620..9788).18" />
<Link Source="10319:[51698..52285).7" Target="10319:[13969..14029).1" />
<Link Source="10287:[1680..1716).7" Target="10319:[105368..106708).5" />
<Link Source="10287:[1680..1716).7" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).7" Target="10287:[1680..1716).7" />
<Link Source="10287:[1683..1690).7" Target="10312:[63503..63516).5" />
<Link Source="10287:[1683..1690).7" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).13" Target="10287:[1683..1690).7" />
<Link Source="10287:[1683..1716).13" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).13" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).13" Target="10287:[1683..1716).13" />
<Link Source="10319:[51935..52244).13" Target="10319:[13969..14029).1" />
<Link Source="10076:[5223..5250).26" Target="10319:[105368..106708).5" />
<Link Source="10076:[5223..5250).26" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).26" Target="10076:[4989..5047).1" />
<Link Source="10077:[44231..44317).89" Target="10319:[105368..106708).5" />
<Link Source="10077:[44231..44317).89" Target="10077:[32567..32606).1" />
<Link Source="10286:[1688..1781).43" Target="10319:[105368..106708).5" />
<Link Source="10286:[1688..1781).43" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).72" Target="10286:[1688..1781).43" />
<Link Source="10298:[471..492).72" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).43" Target="10319:[105368..106708).5" />
<Link Source="10286:[1820..1963).43" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).73" Target="10286:[1820..1963).43" />
<Link Source="10298:[471..492).73" Target="10286:[1840..1888).1" />
<Link Source="10319:[42478..42805).16" Target="10319:[105368..106708).5" />
<Link Source="10319:[42821..42938).41" Target="10319:[105368..106708).5" />
<Link Source="10319:[42839..42937).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[63849..63870).6" Target="10319:[42821..42938).41" />
<Link Source="10319:[63849..63870).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[63885..63919).6" Target="10319:[42821..42938).41" />
<Link Source="10319:[63885..63919).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[63934..63945).6" Target="10319:[42821..42938).41" />
<Link Source="10319:[63934..63945).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[63960..63969).6" Target="10319:[42821..42938).41" />
<Link Source="10319:[63960..63969).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[63984..64009).6" Target="10319:[42821..42938).41" />
<Link Source="10319:[63984..64009).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[63768..64484).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[63768..64484).6" Target="10319:[42839..42937).6" />
<Link Source="10319:[64035..64445).21" Target="10319:[42839..42937).6" />
<Link Source="10319:[64035..64445).22" Target="10319:[63885..63919).6" />
<Link Source="10319:[64035..64445).22" Target="10319:[64035..64445).21" />
<Link Source="10319:[64035..64445).22" Target="10319:[42839..42937).6" />
<Link Source="10319:[64461..64473).11" Target="10319:[42839..42937).6" />
<Link Source="10319:[42821..42938).47" Target="10319:[64461..64473).11" />
<Link Source="10319:[42821..42938).47" Target="10319:[105368..106708).5" />
<Link Source="10319:[42952..43079).16" Target="10319:[105368..106708).5" />
<Link Source="10319:[42952..43079).17" Target="10319:[42821..42938).47" />
<Link Source="10319:[42952..43079).17" Target="10319:[42952..43079).16" />
<Link Source="10319:[42952..43079).17" Target="10319:[105368..106708).5" />
<Link Source="10354:[11312..11328).8" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).38" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).38" Target="10354:[11312..11328).8" />
<Link Source="10354:[3720..3803).277" Target="10354:[3684..3818).38" />
<Link Source="10354:[3720..3803).277" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).277" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).277" Target="10354:[11312..11328).8" />
<Link Source="10354:[3720..3803).278" Target="10354:[11312..11328).8" />
<Link Source="10354:[3720..3803).279" Target="10354:[3684..3818).38" />
<Link Source="10354:[3720..3803).279" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).279" Target="10354:[3720..3803).278" />
<Link Source="10354:[3720..3803).279" Target="10354:[11312..11328).8" />
<Link Source="10354:[11299..11330).22" Target="10354:[3720..3803).277" />
<Link Source="10354:[11299..11330).22" Target="10319:[105368..106708).5" />
<Link Source="10319:[50330..50355).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[3905..3919).6" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).39" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).39" Target="10312:[3905..3919).6" />
<Link Source="10354:[3720..3803).285" Target="10354:[3684..3818).39" />
<Link Source="10354:[3720..3803).285" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).285" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).285" Target="10312:[3905..3919).6" />
<Link Source="10354:[3720..3803).286" Target="10312:[3905..3919).6" />
<Link Source="10354:[3720..3803).287" Target="10354:[3684..3818).39" />
<Link Source="10354:[3720..3803).287" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).287" Target="10354:[3720..3803).286" />
<Link Source="10354:[3720..3803).287" Target="10312:[3905..3919).6" />
<Link Source="10312:[3892..3921).16" Target="10354:[3720..3803).285" />
<Link Source="10312:[3892..3921).16" Target="10319:[105368..106708).5" />
<Link Source="10312:[3935..3968).21" Target="10319:[105368..106708).5" />
<Link Source="10312:[3948..3966).6" Target="10319:[105368..106708).5" />
<Link Source="10353:[4698..4724).13" Target="10312:[3935..3968).21" />
<Link Source="10353:[4698..4724).13" Target="10312:[3948..3966).6" />
<Link Source="10353:[4750..4847).25" Target="10353:[4698..4724).13" />
<Link Source="10353:[4750..4847).25" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).25" Target="10312:[3948..3966).6" />
<Link Source="10353:[4863..5000).49" Target="10353:[4698..4724).13" />
<Link Source="10353:[4863..5000).49" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).49" Target="10312:[3948..3966).6" />
<Link Source="10353:[4863..5000).50" Target="10312:[3948..3966).6" />
<Link Source="10353:[5079..5183).25" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).25" Target="10312:[3948..3966).6" />
<Link Source="10353:[5197..5323).37" Target="10353:[4698..4724).13" />
<Link Source="10353:[5197..5323).37" Target="10353:[5079..5183).25" />
<Link Source="10353:[5197..5323).37" Target="10312:[3948..3966).6" />
<Link Source="10353:[5485..5759).73" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).73" Target="10312:[3948..3966).6" />
<Link Source="10353:[5485..5759).74" Target="10353:[4698..4724).13" />
<Link Source="10353:[5485..5759).74" Target="10353:[5485..5759).73" />
<Link Source="10353:[5485..5759).74" Target="10312:[3948..3966).6" />
<Link Source="10353:[5485..5759).75" Target="10312:[3948..3966).6" />
<Link Source="10353:[5775..5979).49" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).49" Target="10312:[3948..3966).6" />
<Link Source="10353:[5775..5979).51" Target="10353:[4698..4724).13" />
<Link Source="10353:[5775..5979).51" Target="10353:[5775..5979).49" />
<Link Source="10353:[5775..5979).51" Target="10312:[3948..3966).6" />
<Link Source="10353:[5995..6029).37" Target="10353:[5775..5979).51" />
<Link Source="10353:[5995..6029).37" Target="10312:[3948..3966).6" />
<Link Source="10353:[6002..6028).13" Target="10312:[3948..3966).6" />
<Link Source="10353:[6343..6358).13" Target="10353:[5995..6029).37" />
<Link Source="10353:[6343..6358).13" Target="10353:[6002..6028).13" />
<Link Source="10353:[6384..6410).73" Target="10353:[6002..6028).13" />
<Link Source="10353:[6384..6410).74" Target="10353:[6343..6358).13" />
<Link Source="10353:[6384..6410).74" Target="10353:[6384..6410).73" />
<Link Source="10353:[6384..6410).74" Target="10353:[6002..6028).13" />
<Link Source="10312:[5188..5207).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5209..5220).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5222..5231).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5233..5272).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5274..5295).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5297..5318).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5320..5333).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[5124..5404).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[4685..4699).16" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).40" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).40" Target="10312:[4685..4699).16" />
<Link Source="10354:[3720..3803).293" Target="10354:[3684..3818).40" />
<Link Source="10354:[3720..3803).293" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).293" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).293" Target="10312:[4685..4699).16" />
<Link Source="10354:[3720..3803).294" Target="10312:[4685..4699).16" />
<Link Source="10354:[3720..3803).295" Target="10354:[3684..3818).40" />
<Link Source="10354:[3720..3803).295" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).295" Target="10354:[3720..3803).294" />
<Link Source="10354:[3720..3803).295" Target="10312:[4685..4699).16" />
<Link Source="10312:[4680..4787).31" Target="10354:[3720..3803).293" />
<Link Source="10312:[4680..4787).31" Target="10319:[105368..106708).5" />
<Link Source="10312:[4826..5058).76" Target="10319:[105368..106708).5" />
<Link Source="10312:[4826..5058).76" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).77" Target="10319:[105368..106708).5" />
<Link Source="10382:[1340..1359).4" Target="10319:[105368..106708).5" />
<Link Source="10382:[1374..1383).4" Target="10319:[105368..106708).5" />
<Link Source="10382:[1385..1424).4" Target="10319:[105368..106708).5" />
<Link Source="10382:[1426..1447).4" Target="10319:[105368..106708).5" />
<Link Source="10382:[1449..1470).4" Target="10319:[105368..106708).5" />
<Link Source="10382:[1472..1485).4" Target="10319:[105368..106708).5" />
<Link Source="10382:[1572..1586).4" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).41" Target="10382:[1340..1359).4" />
<Link Source="10354:[3684..3818).41" Target="10382:[1572..1586).4" />
<Link Source="10354:[3720..3803).301" Target="10354:[3684..3818).41" />
<Link Source="10354:[3720..3803).301" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).301" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).301" Target="10382:[1572..1586).4" />
<Link Source="10354:[3720..3803).302" Target="10382:[1572..1586).4" />
<Link Source="10354:[3720..3803).303" Target="10354:[3684..3818).41" />
<Link Source="10354:[3720..3803).303" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).303" Target="10354:[3720..3803).302" />
<Link Source="10354:[3720..3803).303" Target="10382:[1572..1586).4" />
<Link Source="10382:[1559..1588).10" Target="10354:[3720..3803).301" />
<Link Source="10382:[1559..1588).10" Target="10319:[105368..106708).5" />
<Link Source="10382:[1619..1629).4" Target="10319:[105368..106708).5" />
<Link Source="10382:[913..1046).4" Target="10319:[105368..106708).5" />
<Link Source="10382:[913..1046).4" Target="10382:[1619..1629).4" />
<Link Source="10382:[949..1031).7" Target="EXTERNAL" />
<Link Source="10382:[949..1031).7" Target="10382:[1619..1629).4" />
<Link Source="10382:[1604..1691).16" Target="10382:[949..1031).7" />
<Link Source="10382:[1604..1691).16" Target="10319:[105368..106708).5" />
<Link Source="10382:[1604..1691).17" Target="10382:[1426..1447).4" />
<Link Source="10382:[1604..1691).17" Target="10382:[1604..1691).16" />
<Link Source="10382:[1604..1691).17" Target="10319:[105368..106708).5" />
<Link Source="10382:[1604..1691).18" Target="10319:[105368..106708).5" />
<Link Source="10346:[10861..10875).8" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).43" Target="10319:[105368..106708).5" />
<Link Source="10354:[3684..3818).43" Target="10346:[10861..10875).8" />
<Link Source="10354:[3720..3803).317" Target="10354:[3684..3818).43" />
<Link Source="10354:[3720..3803).317" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).317" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).317" Target="10346:[10861..10875).8" />
<Link Source="10354:[3720..3803).318" Target="10346:[10861..10875).8" />
<Link Source="10354:[3720..3803).319" Target="10354:[3684..3818).43" />
<Link Source="10354:[3720..3803).319" Target="10319:[105368..106708).5" />
<Link Source="10354:[3720..3803).319" Target="10354:[3720..3803).318" />
<Link Source="10354:[3720..3803).319" Target="10346:[10861..10875).8" />
<Link Source="10346:[10848..10877).22" Target="10354:[3720..3803).317" />
<Link Source="10346:[10848..10877).22" Target="10319:[105368..106708).5" />
<Link Source="10346:[10897..10914).8" Target="10319:[105368..106708).5" />
<Link Source="10346:[7666..7775).8" Target="10319:[105368..106708).5" />
<Link Source="10346:[7666..7775).8" Target="10346:[10897..10914).8" />
<Link Source="10346:[7672..7773).22" Target="10346:[7666..7775).8" />
<Link Source="10346:[7672..7773).22" Target="10319:[105368..106708).5" />
<Link Source="10346:[7672..7773).22" Target="EXTERNAL" />
<Link Source="10346:[7672..7773).22" Target="10346:[10897..10914).8" />
<Link Source="10346:[10893..11127).15" Target="10346:[7672..7773).22" />
<Link Source="10346:[10893..11127).15" Target="10319:[105368..106708).5" />
<Link Source="10346:[3525..3638).54" Target="10319:[105368..106708).5" />
<Link Source="10312:[7903..7936).29" Target="10319:[105368..106708).5" />
<Link Source="10312:[7916..7934).8" Target="10319:[105368..106708).5" />
<Link Source="10353:[4698..4724).14" Target="10312:[7903..7936).29" />
<Link Source="10353:[4698..4724).14" Target="10312:[7916..7934).8" />
<Link Source="10353:[4750..4847).27" Target="10353:[4698..4724).14" />
<Link Source="10353:[4750..4847).27" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).27" Target="10312:[7916..7934).8" />
<Link Source="10353:[4863..5000).53" Target="10353:[4698..4724).14" />
<Link Source="10353:[4863..5000).53" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).53" Target="10312:[7916..7934).8" />
<Link Source="10353:[4863..5000).54" Target="10312:[7916..7934).8" />
<Link Source="10353:[5079..5183).27" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).27" Target="10312:[7916..7934).8" />
<Link Source="10353:[5197..5323).40" Target="10353:[4698..4724).14" />
<Link Source="10353:[5197..5323).40" Target="10353:[5079..5183).27" />
<Link Source="10353:[5197..5323).40" Target="10312:[7916..7934).8" />
<Link Source="10353:[5485..5759).79" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).79" Target="10312:[7916..7934).8" />
<Link Source="10353:[5485..5759).80" Target="10353:[4698..4724).14" />
<Link Source="10353:[5485..5759).80" Target="10353:[5485..5759).79" />
<Link Source="10353:[5485..5759).80" Target="10312:[7916..7934).8" />
<Link Source="10353:[5485..5759).81" Target="10312:[7916..7934).8" />
<Link Source="10353:[5775..5979).53" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).53" Target="10312:[7916..7934).8" />
<Link Source="10353:[5775..5979).55" Target="10353:[4698..4724).14" />
<Link Source="10353:[5775..5979).55" Target="10353:[5775..5979).53" />
<Link Source="10353:[5775..5979).55" Target="10312:[7916..7934).8" />
<Link Source="10353:[5995..6029).40" Target="10353:[5775..5979).55" />
<Link Source="10353:[5995..6029).40" Target="10312:[7916..7934).8" />
<Link Source="10353:[6002..6028).14" Target="10312:[7916..7934).8" />
<Link Source="10353:[6343..6358).14" Target="10353:[5995..6029).40" />
<Link Source="10353:[6343..6358).14" Target="10353:[6002..6028).14" />
<Link Source="10353:[6384..6410).79" Target="10353:[6002..6028).14" />
<Link Source="10353:[6384..6410).80" Target="10353:[6343..6358).14" />
<Link Source="10353:[6384..6410).80" Target="10353:[6384..6410).79" />
<Link Source="10353:[6384..6410).80" Target="10353:[6002..6028).14" />
<Link Source="10312:[7952..7977).29" Target="10319:[105368..106708).5" />
<Link Source="10312:[61608..61629).10" Target="10319:[105368..106708).5" />
<Link Source="10312:[63473..63501).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[63566..63612).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[63638..63668).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[80978..80991).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[80993..81002).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[81004..81017).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[81019..81040).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[81042..81069).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[81095..84034).6" Target="10312:[80978..80991).6" />
<Link Source="10312:[81095..84034).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[81196..82523).36" Target="10312:[81095..84034).6" />
<Link Source="10312:[81196..82523).37" Target="10312:[80993..81002).6" />
<Link Source="10312:[81196..82523).37" Target="10312:[81196..82523).36" />
<Link Source="10312:[81196..82523).37" Target="10312:[81095..84034).6" />
<Link Source="10312:[81196..82523).38" Target="10312:[81019..81040).6" />
<Link Source="10312:[81196..82523).38" Target="EXTERNAL" />
<Link Source="10312:[81196..82523).38" Target="10312:[81095..84034).6" />
<Link Source="10312:[81196..82523).41" Target="10312:[81196..82523).37" />
<Link Source="10312:[81196..82523).41" Target="10312:[81196..82523).38" />
<Link Source="10312:[81196..82523).41" Target="10312:[81095..84034).6" />
<Link Source="10312:[81319..81371).6" Target="10312:[80978..80991).6" />
<Link Source="10312:[81319..81371).6" Target="10312:[81196..82523).41" />
<Link Source="10312:[81495..81570).26" Target="10312:[81319..81371).6" />
<Link Source="10312:[81495..81570).26" Target="10319:[105368..106708).5" />
<Link Source="10312:[81495..81570).26" Target="10312:[81196..82523).41" />
<Link Source="10312:[81495..81570).27" Target="10312:[81319..81371).6" />
<Link Source="10312:[81495..81570).27" Target="10312:[81196..82523).41" />
<Link Source="10312:[81596..82500).31" Target="10312:[81319..81371).6" />
<Link Source="10312:[81596..82500).31" Target="10319:[105368..106708).5" />
<Link Source="10312:[81596..82500).31" Target="10312:[80993..81002).6" />
<Link Source="10312:[81596..82500).31" Target="10312:[81196..82523).41" />
<Link Source="10312:[81596..82500).32" Target="10312:[81019..81040).6" />
<Link Source="10312:[81596..82500).32" Target="10312:[81196..82523).41" />
<Link Source="10312:[81628..81659).6" Target="10312:[81196..82523).41" />
<Link Source="10353:[7504..7530).12" Target="10312:[81596..82500).32" />
<Link Source="10353:[7504..7530).12" Target="10312:[81628..81659).6" />
<Link Source="10312:[81596..82500).35" Target="10312:[81596..82500).31" />
<Link Source="10312:[81596..82500).35" Target="10353:[7504..7530).12" />
<Link Source="10312:[81596..82500).35" Target="10312:[81196..82523).41" />
<Link Source="10312:[84050..84066).11" Target="10319:[105368..106708).5" />
<Link Source="10312:[66291..66342).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[75301..75322).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[75301..75322).6" Target="10312:[66291..66342).6" />
<Link Source="10312:[75324..75352).6" Target="10312:[63473..63501).6" />
<Link Source="10312:[75324..75352).6" Target="10312:[66291..66342).6" />
<Link Source="10312:[75735..75866).26" Target="10312:[75301..75322).6" />
<Link Source="10312:[75735..75866).26" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).26" Target="10312:[66291..66342).6" />
<Link Source="10312:[75735..75866).27" Target="10312:[66291..66342).6" />
<Link Source="10312:[75742..75804).6" Target="10312:[75735..75866).26" />
<Link Source="10312:[75742..75804).6" Target="10312:[66291..66342).6" />
<Link Source="10312:[75735..75866).29" Target="10312:[75324..75352).6" />
<Link Source="10312:[75735..75866).29" Target="10312:[75742..75804).6" />
<Link Source="10312:[77543..77571).6" Target="10312:[75735..75866).29" />
<Link Source="10312:[77543..77571).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[77573..77604).6" Target="10312:[63638..63668).6" />
<Link Source="10312:[77573..77604).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[77654..77700).6" Target="10312:[63566..63612).6" />
<Link Source="10312:[77654..77700).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[77726..77892).21" Target="10319:[105368..106708).5" />
<Link Source="10312:[77726..77892).22" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).22" Target="10319:[105368..106708).5" />
<Link Source="10312:[77730..77782).6" Target="10319:[105368..106708).5" />
<Link Source="10298:[471..492).77" Target="10312:[77726..77892).21" />
<Link Source="10298:[471..492).77" Target="10312:[77730..77782).6" />
<Link Source="10298:[494..511).77" Target="10312:[77726..77892).22" />
<Link Source="10298:[494..511).77" Target="10312:[77730..77782).6" />
<Link Source="10312:[78402..78430).6" Target="10312:[77543..77571).6" />
<Link Source="10312:[78402..78430).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[78432..78463).6" Target="10312:[77573..77604).6" />
<Link Source="10312:[78432..78463).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[78513..78552).6" Target="10312:[77654..77700).6" />
<Link Source="10312:[78513..78552).6" Target="10319:[105368..106708).5" />
<Link Source="10376:[1085..1113).4" Target="10312:[78402..78430).6" />
<Link Source="10376:[1085..1113).4" Target="10319:[105368..106708).5" />
<Link Source="10376:[1115..1146).4" Target="10312:[78432..78463).6" />
<Link Source="10376:[1115..1146).4" Target="10319:[105368..106708).5" />
<Link Source="10376:[1196..1235).4" Target="10312:[78513..78552).6" />
<Link Source="10376:[1196..1235).4" Target="10319:[105368..106708).5" />
<Link Source="10376:[1028..1425).4" Target="10319:[105368..106708).5" />
<Link Source="10286:[30135..30160).6" Target="10376:[1085..1113).4" />
<Link Source="10286:[30135..30160).6" Target="10319:[105368..106708).5" />
<Link Source="10286:[30175..30206).6" Target="10376:[1115..1146).4" />
<Link Source="10286:[30175..30206).6" Target="10319:[105368..106708).5" />
<Link Source="10286:[30283..30330).6" Target="10376:[1196..1235).4" />
<Link Source="10286:[30283..30330).6" Target="10319:[105368..106708).5" />
<Link Source="10286:[30012..30691).6" Target="10376:[1028..1425).4" />
<Link Source="10286:[30012..30691).6" Target="10319:[105368..106708).5" />
<Link Source="10286:[30356..30522).21" Target="10286:[30012..30691).6" />
<Link Source="10286:[30356..30522).21" Target="10319:[105368..106708).5" />
<Link Source="10286:[30356..30522).22" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).22" Target="10319:[105368..106708).5" />
<Link Source="10286:[30360..30412).6" Target="10319:[105368..106708).5" />
<Link Source="10298:[471..492).78" Target="10286:[30356..30522).21" />
<Link Source="10298:[471..492).78" Target="10286:[30360..30412).6" />
<Link Source="10298:[494..511).78" Target="10286:[30356..30522).22" />
<Link Source="10298:[494..511).78" Target="10286:[30360..30412).6" />
<Link Source="10060:[2136..2158).6" Target="10376:[1028..1425).4" />
<Link Source="10060:[2136..2158).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[2173..2198).6" Target="10286:[30135..30160).6" />
<Link Source="10060:[2173..2198).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[2213..2244).6" Target="10286:[30175..30206).6" />
<Link Source="10060:[2213..2244).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[2320..2366).6" Target="10286:[30283..30330).6" />
<Link Source="10060:[2320..2366).6" Target="10319:[105368..106708).5" />
<Link Source="10060:[5621..5634).8" Target="10060:[2136..2158).6" />
<Link Source="10060:[5621..5634).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[5691..5716).8" Target="10060:[2173..2198).6" />
<Link Source="10060:[5691..5716).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[5731..5762).8" Target="10060:[2213..2244).6" />
<Link Source="10060:[5731..5762).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[5777..5806).8" Target="10060:[2136..2158).6" />
<Link Source="10060:[5777..5806).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[5882..5928).8" Target="10060:[2320..2366).6" />
<Link Source="10060:[5882..5928).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[5954..5991).29" Target="10319:[105368..106708).5" />
<Link Source="10060:[6005..6042).29" Target="10319:[105368..106708).5" />
<Link Source="10060:[6005..6042).30" Target="10060:[5621..5634).8" />
<Link Source="10060:[6005..6042).30" Target="10060:[6005..6042).29" />
<Link Source="10060:[6005..6042).30" Target="10319:[105368..106708).5" />
<Link Source="10060:[6056..6090).15" Target="10060:[5621..5634).8" />
<Link Source="10060:[6056..6090).15" Target="10319:[105368..106708).5" />
<Link Source="10060:[6104..6172).22" Target="10060:[5621..5634).8" />
<Link Source="10060:[6104..6172).22" Target="10319:[105368..106708).5" />
<Link Source="10060:[6188..6219).15" Target="10319:[105368..106708).5" />
<Link Source="10060:[10202..10215).8" Target="10060:[5621..5634).8" />
<Link Source="10060:[10202..10215).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[10265..10311).8" Target="10060:[5882..5928).8" />
<Link Source="10060:[10265..10311).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[10337..10405).22" Target="10060:[10202..10215).8" />
<Link Source="10060:[10337..10405).22" Target="10319:[105368..106708).5" />
<Link Source="10060:[10419..10454).29" Target="10319:[105368..106708).5" />
<Link Source="10060:[10470..10516).8" Target="10060:[10202..10215).8" />
<Link Source="10060:[10470..10516).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[10532..10544).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[10558..11295).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[11990..12013).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[12078..12091).8" Target="10060:[10202..10215).8" />
<Link Source="10060:[12078..12091).8" Target="10319:[105368..106708).5" />
<Link Source="10060:[12117..12185).22" Target="10060:[12078..12091).8" />
<Link Source="10060:[12117..12185).22" Target="10319:[105368..106708).5" />
<Link Source="10060:[12199..12238).29" Target="10319:[105368..106708).5" />
<Link Source="10060:[12199..12238).30" Target="10060:[11990..12013).8" />
<Link Source="10060:[12199..12238).30" Target="10060:[12199..12238).29" />
<Link Source="10060:[12199..12238).30" Target="10319:[105368..106708).5" />
<Link Source="10346:[11710..11746).6" Target="10312:[63473..63501).6" />
<Link Source="10286:[2155..2260).10" Target="10319:[105368..106708).5" />
<Link Source="10286:[2155..2260).10" Target="10346:[11710..11746).6" />
<Link Source="10286:[2191..2245).37" Target="10286:[2155..2260).10" />
<Link Source="10286:[2191..2245).37" Target="10312:[63473..63501).6" />
<Link Source="10286:[2191..2245).37" Target="10346:[11710..11746).6" />
<Link Source="10286:[2191..2245).38" Target="EXTERNAL" />
<Link Source="10286:[2191..2245).38" Target="10346:[11710..11746).6" />
<Link Source="10286:[2198..2244).10" Target="10346:[11710..11746).6" />
<Link Source="10298:[471..492).80" Target="10286:[2191..2245).37" />
<Link Source="10298:[471..492).80" Target="10286:[2198..2244).10" />
<Link Source="10298:[494..511).80" Target="10286:[2191..2245).38" />
<Link Source="10298:[494..511).80" Target="10286:[2198..2244).10" />
<Link Source="10345:[28225..28251).6" Target="10298:[471..492).80" />
<Link Source="10345:[28225..28251).6" Target="10312:[63473..63501).6" />
<Link Source="10345:[28927..28940).11" Target="10312:[63473..63501).6" />
<Link Source="10346:[12205..12212).6" Target="10312:[63473..63501).6" />
<Link Source="10354:[3720..3803).325" Target="10354:[3684..3818).40" />
<Link Source="10354:[3720..3803).325" Target="10312:[63473..63501).6" />
<Link Source="10354:[3720..3803).325" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).325" Target="10312:[4685..4699).16" />
<Link Source="10312:[4680..4787).35" Target="10354:[3720..3803).325" />
<Link Source="10312:[4680..4787).35" Target="10319:[105368..106708).5" />
<Link Source="10312:[4749..4764).6" Target="10319:[105368..106708).5" />
<Link Source="10312:[4749..4764).6" Target="10312:[4680..4787).35" />
<Link Source="10312:[5087..5101).6" Target="10312:[4749..4764).6" />
<Link Source="10312:[5087..5101).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[43799..44676).31" Target="10319:[105368..106708).5" />
<Link Source="10319:[43853..43873).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[41088..41107).6" Target="10319:[43799..44676).31" />
<Link Source="10319:[41088..41107).6" Target="10319:[43853..43873).6" />
<Link Source="10319:[41138..41158).6" Target="10319:[43853..43873).6" />
<Link Source="10354:[4919..5009).57" Target="10319:[41088..41107).6" />
<Link Source="10354:[4919..5009).57" Target="10319:[41138..41158).6" />
<Link Source="10354:[4094..4107).77" Target="10354:[4919..5009).57" />
<Link Source="10354:[4094..4107).77" Target="10312:[63473..63501).6" />
<Link Source="10354:[4094..4107).77" Target="10319:[41138..41158).6" />
<Link Source="10319:[41133..41220).11" Target="10354:[4094..4107).77" />
<Link Source="10319:[41133..41220).11" Target="10319:[43853..43873).6" />
<Link Source="10319:[41254..41268).6" Target="10319:[43853..43873).6" />
<Link Source="10354:[4525..4595).11" Target="10319:[41088..41107).6" />
<Link Source="10354:[4525..4595).11" Target="10319:[41254..41268).6" />
<Link Source="10354:[4561..4580).11" Target="10354:[4525..4595).11" />
<Link Source="10354:[4561..4580).11" Target="10312:[63473..63501).6" />
<Link Source="10354:[4561..4580).11" Target="10319:[41254..41268).6" />
<Link Source="10319:[41236..41680).21" Target="10354:[4561..4580).11" />
<Link Source="10319:[41236..41680).21" Target="10319:[43853..43873).6" />
<Link Source="10319:[41302..41665).6" Target="10319:[41236..41680).21" />
<Link Source="10319:[41302..41665).6" Target="10312:[63473..63501).6" />
<Link Source="10319:[41634..41646).11" Target="10319:[41302..41665).6" />
<Link Source="10319:[44751..44765).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[84288..84313).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[84374..84391).6" Target="10319:[44751..44765).6" />
<Link Source="10319:[84374..84391).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[84406..84447).6" Target="10319:[44751..44765).6" />
<Link Source="10319:[84406..84447).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[84462..84508).6" Target="10319:[44751..44765).6" />
<Link Source="10319:[84462..84508).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[84124..109887).6" Target="10319:[105368..106708).5" />
<Link Source="10319:[85320..85348).21" Target="10319:[105368..106708).5" />
<Link Source="10319:[85366..85400).21" Target="10319:[105368..106708).5" />
<Link Source="10319:[85366..85400).22" Target="10319:[84288..84313).6" />
<Link Source="10319:[85366..85400).22" Target="10319:[85366..85400).21" />
<Link Source="10319:[85366..85400).22" Target="10319:[105368..106708).5" />
<Link Source="10319:[85467..85484).11" Target="10319:[105368..106708).5" />
<Link Source="10319:[104874..105336).16" Target="10312:[63473..63501).6" />
<Link Source="10319:[104874..105336).16" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).17" Target="10319:[104874..105336).16" />
<Link Source="10319:[104874..105336).17" Target="10319:[84124..109887).6" />
<Link Source="10319:[104874..105336).17" Target="10312:[63473..63501).6" />
<Link Source="10319:[105368..106708).6" Target="10319:[84288..84313).6" />
<Link Source="10319:[105368..106708).6" Target="10312:[63473..63501).6" />
<Link Source="10319:[76360..76385).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[76387..76402).7" Target="10319:[105368..106708).6" />
<Link Source="10319:[76494..76582).25" Target="10319:[105368..106708).6" />
<Link Source="10319:[84691..84861).11" Target="10312:[63473..63501).6" />
<Link Source="10319:[84691..84861).11" Target="10319:[105368..106708).6" />
<Link Source="10319:[84691..84861).11" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).11" Target="10319:[105368..106708).5" />
<Link Source="10319:[84764..84846).31" Target="10319:[105368..106708).5" />
<Link Source="10319:[84764..84846).31" Target="10319:[84691..84861).11" />
<Link Source="10319:[84764..84846).32" Target="10319:[84691..84861).11" />
<Link Source="10319:[84764..84846).34" Target="10312:[63473..63501).6" />
<Link Source="10319:[84764..84846).34" Target="10319:[84691..84861).11" />
<Link Source="10319:[84764..84846).35" Target="10319:[84288..84313).6" />
<Link Source="10319:[84764..84846).35" Target="10319:[84691..84861).11" />
<Link Source="10319:[84764..84845).6" Target="10319:[84691..84861).11" />
<Link Source="10306:[358886..358901).6" Target="10319:[84764..84846).31" />
<Link Source="10306:[358886..358901).6" Target="10319:[84764..84845).6" />
<Link Source="10306:[358903..358930).6" Target="10319:[84764..84846).32" />
<Link Source="10306:[358903..358930).6" Target="10319:[84764..84845).6" />
<Link Source="10306:[358932..358945).6" Target="10319:[84764..84846).34" />
<Link Source="10306:[358932..358945).6" Target="10319:[84764..84845).6" />
<Link Source="10306:[358947..358972).6" Target="10319:[84764..84846).35" />
<Link Source="10306:[358947..358972).6" Target="10319:[84764..84845).6" />
<Link Source="10306:[358838..360009).6" Target="10319:[84124..109887).6" />
<Link Source="10306:[358838..360009).6" Target="10319:[84764..84845).6" />
<Link Source="10306:[358998..359998).31" Target="10306:[358932..358945).6" />
<Link Source="10306:[358998..359998).31" Target="10319:[105368..106708).6" />
<Link Source="10306:[358998..359998).31" Target="10319:[84764..84845).6" />
<Link Source="10306:[358998..359998).32" Target="10319:[84764..84845).6" />
<Link Source="10319:[44948..45377).11" Target="10312:[63473..63501).6" />
<Link Source="10319:[44948..45377).11" Target="10319:[105368..106708).6" />
<Link Source="10319:[44948..45377).11" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).11" Target="10319:[105368..106708).5" />
<Link Source="10354:[11428..11441).8" Target="10319:[105368..106708).5" />
<Link Source="10319:[45408..45422).6" Target="10319:[105368..106708).5" />
<Link Source="10287:[2377..2471).11" Target="10312:[63473..63501).6" />
<Link Source="10287:[2377..2471).11" Target="10319:[105368..106708).5" />
<Link Source="10287:[791..833).15" Target="10319:[105368..106708).6" />
<Link Source="10287:[791..833).15" Target="10312:[63473..63501).6" />
<Link Source="10286:[21546..21561).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[21563..21583).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[22086..22108).8" Target="10286:[21546..21561).8" />
<Link Source="10286:[22086..22108).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[22110..22130).8" Target="10286:[21563..21583).8" />
<Link Source="10286:[22110..22130).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[15616..15690).36" Target="10319:[105368..106708).6" />
<Link Source="10286:[15616..15690).37" Target="10319:[105368..106708).6" />
<Link Source="10286:[15616..15690).37" Target="EXTERNAL" />
<Link Source="10286:[15715..15910).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[23124..23146).8" Target="10286:[22086..22108).8" />
<Link Source="10286:[23124..23146).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[23161..23181).8" Target="10286:[22110..22130).8" />
<Link Source="10286:[23161..23181).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[23281..23301).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[23380..23684).50" Target="10319:[105368..106708).6" />
<Link Source="10286:[23380..23684).50" Target="EXTERNAL" />
<Link Source="10286:[23893..24026).15" Target="10319:[105368..106708).6" />
<Link Source="10286:[23893..24026).15" Target="EXTERNAL" />
<Link Source="10286:[24545..24641).15" Target="10286:[23161..23181).8" />
<Link Source="10286:[24545..24641).15" Target="10319:[105368..106708).6" />
<Link Source="10286:[24655..25349).8" Target="10286:[24545..24641).15" />
<Link Source="10286:[24655..25349).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[26910..26935).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[26952..26974).8" Target="10286:[23124..23146).8" />
<Link Source="10286:[26952..26974).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[27002..27022).8" Target="10286:[23281..23301).8" />
<Link Source="10286:[27002..27022).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[27048..27088).29" Target="10319:[105368..106708).6" />
<Link Source="10286:[27048..27088).30" Target="10286:[26910..26935).8" />
<Link Source="10286:[27048..27088).30" Target="10286:[27048..27088).29" />
<Link Source="10286:[27048..27088).30" Target="10319:[105368..106708).6" />
<Link Source="10286:[27208..27236).15" Target="10319:[105368..106708).6" />
<Link Source="10286:[27250..27722).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[27738..27845).22" Target="10319:[105368..106708).6" />
<Link Source="10286:[27738..27845).23" Target="10286:[27208..27236).15" />
<Link Source="10286:[27738..27845).23" Target="10286:[27738..27845).22" />
<Link Source="10286:[27738..27845).23" Target="10319:[105368..106708).6" />
<Link Source="10286:[27861..27873).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[26281..26812).8" Target="10286:[27861..27873).8" />
<Link Source="10286:[26281..26812).8" Target="10319:[105368..106708).6" />
<Link Source="10286:[26450..26769).8" Target="10286:[24545..24641).15" />
<Link Source="10286:[26450..26769).8" Target="10286:[26281..26812).8" />
<Link Source="10287:[1680..1716).8" Target="10319:[105368..106708).6" />
<Link Source="10287:[1680..1716).8" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).8" Target="10287:[1680..1716).8" />
<Link Source="10287:[1683..1690).8" Target="10312:[63473..63501).6" />
<Link Source="10287:[1683..1690).8" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).15" Target="10287:[1683..1690).8" />
<Link Source="10287:[1683..1716).15" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).15" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).15" Target="10287:[1683..1716).15" />
<Link Source="10319:[51935..52244).15" Target="10319:[13969..14029).1" />
<Link Source="10843:[734..744).5" Target="10060:[9620..9788).18" />
<Link Source="10843:[734..744).5" Target="10845:[740..997).2" />
<Link Source="10843:[778..799).5" Target="10060:[9620..9788).18" />
<Link Source="10843:[778..799).5" Target="10845:[740..997).2" />
<Link Source="10843:[835..853).5" Target="10060:[9620..9788).18" />
<Link Source="10843:[835..853).5" Target="10845:[740..997).2" />
<Link Source="10843:[1113..1134).5" Target="10060:[9620..9788).18" />
<Link Source="10843:[1113..1134).5" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).18" Target="10060:[9620..9788).18" />
<Link Source="10843:[1313..1354).18" Target="10843:[1313..1354).1" />
<Link Source="10843:[1313..1354).18" Target="10845:[740..997).2" />
<Link Source="25002:[4446..4475).1" Target="10319:[105368..106708).6" />
<Link Source="25002:[4446..4475).1" Target="28001:[46830..47156).2" />
<Link Source="25002:[4446..4475).2" Target="25002:[4284..4323).1" />
<Link Source="25002:[4446..4475).2" Target="28001:[46830..47156).2" />
<Link Source="25002:[4446..4474).1" Target="28001:[46830..47156).2" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4475).1" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4475).2" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[2296..2334).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[2336..2375).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2450).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2451).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2451).2" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[1554..1589).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[1591..1630).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).3" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1702).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1703).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1703).2" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1703).3" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2533..2565).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2611..2759).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).2" Target="25002:[2775..2867).1" />
<Link Source="25002:[2775..2867).2" Target="28001:[46830..47157).2" />
<Link Source="25002:[2775..2867).2" Target="28001:[46830..47156).1" />
<Link Source="25002:[2775..2867).2" Target="25003:[2816..2827).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2842..2863).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3253..3278).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2878..2898).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2913..2931).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3464..3478).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3045..3076).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3091..3116).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1383..1412).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3131..3176).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[3191..3238).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[2988..3030).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1713..1727).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1891..1900).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[1941..1960).3" />
<Link Source="25002:[2775..2867).2" Target="25003:[9227..9476).11" />
<Link Source="25002:[2775..2867).2" Target="28001:[47029..47135).1" />
<Link Source="25002:[2775..2867).2" Target="25007:[3901..4266).1" />
<Link Source="25002:[2775..2867).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[2775..2867).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[2775..2867).4" />
<Link Source="25002:[2775..2867).6" Target="28001:[46830..47157).2" />
<Link Source="25002:[2775..2867).6" Target="28001:[46830..47156).1" />
<Link Source="25002:[2775..2867).6" Target="25003:[2816..2827).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2842..2863).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3253..3278).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2878..2898).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2913..2931).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3464..3478).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3045..3076).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3091..3116).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1383..1412).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3131..3176).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[3191..3238).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[2988..3030).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1713..1727).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1891..1900).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[1941..1960).3" />
<Link Source="25002:[2775..2867).6" Target="25003:[9227..9476).11" />
<Link Source="25002:[2775..2867).6" Target="28001:[47029..47135).1" />
<Link Source="25002:[2775..2867).6" Target="25007:[3901..4266).1" />
<Link Source="25002:[2775..2867).6" Target="25002:[1656..1702).1" />
<Link Source="25003:[10448..10470).1" Target="25002:[2775..2867).6" />
<Link Source="25003:[10448..10470).1" Target="25002:[2775..2867).4" />
<Link Source="25003:[10451..10470).1" Target="25003:[10448..10470).1" />
<Link Source="25003:[10451..10470).1" Target="25002:[2775..2867).6" />
<Link Source="25003:[10451..10470).1" Target="25002:[2775..2867).4" />
<Link Source="25002:[2881..2977).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2881..2977).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).2" Target="25002:[2881..2977).1" />
<Link Source="25002:[2881..2977).2" Target="25003:[10451..10470).1" />
<Link Source="25002:[2881..2977).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[2881..2977).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[2881..2977).4" />
<Link Source="25002:[2881..2977).6" Target="25003:[10451..10470).1" />
<Link Source="25002:[2881..2977).6" Target="25002:[1656..1702).1" />
<Link Source="25003:[10526..10550).1" Target="25002:[2881..2977).6" />
<Link Source="25003:[10526..10550).1" Target="25002:[2881..2977).4" />
<Link Source="25003:[10529..10550).1" Target="25003:[10526..10550).1" />
<Link Source="25003:[10529..10550).1" Target="25002:[2881..2977).6" />
<Link Source="25003:[10529..10550).1" Target="25002:[2881..2977).4" />
<Link Source="25002:[2991..3166).1" Target="25002:[2501..2531).1" />
<Link Source="25002:[2991..3166).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2567..2585).1" />
<Link Source="25002:[2991..3166).2" Target="25003:[10451..10470).1" />
<Link Source="25002:[2991..3166).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).2" />
<Link Source="25002:[2991..3166).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).8" Target="25002:[1656..1702).1" />
<Link Source="25003:[4933..4945).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4933..4945).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4947..4965).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4947..4965).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4967..5002).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4967..5002).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5004..5041).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5004..5041).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[4904..7352).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[4904..7352).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[912..917).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[912..917).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[950..967).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[950..967).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1000..1013).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1000..1013).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1048..1062).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1048..1062).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1099..1109).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1099..1109).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1151..1165).10" Target="25003:[4904..7352).1" />
<Link Source="25003:[1151..1165).10" Target="25002:[2991..3166).8" />
<Link Source="25003:[1276..1303).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1276..1303).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1336..1350).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1336..1350).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1460..1479).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1460..1479).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1527..1548).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1527..1548).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[1673..1689).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[1673..1689).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[5067..5072).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5067..5072).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5067..5072).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5067..5072).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5096..5113).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5096..5113).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5096..5113).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5096..5113).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5149..5162).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5149..5162).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5149..5162).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5149..5162).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5194..5203).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5194..5203).1" Target="25002:[2991..3166).4" />
<Link Source="25003:[5194..5203).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5194..5203).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5253..5275).1" Target="25003:[4967..5002).1" />
<Link Source="25003:[5253..5275).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5231..5324).1" Target="25003:[5253..5275).1" />
<Link Source="25003:[5231..5250).1" Target="25003:[5231..5324).1" />
<Link Source="25003:[5231..5250).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5231..5250).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5362..5386).1" Target="25003:[5004..5041).1" />
<Link Source="25003:[5362..5386).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5338..5428).1" Target="25003:[5362..5386).1" />
<Link Source="25003:[5338..5359).1" Target="25003:[5338..5428).1" />
<Link Source="25003:[5338..5359).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[5338..5359).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5444..5476).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).2" Target="25003:[4933..4945).1" />
<Link Source="25003:[5490..6130).2" Target="25002:[2991..3166).4" />
<Link Source="25003:[5490..6130).2" Target="25003:[5490..6130).1" />
<Link Source="25003:[5490..6130).2" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).3" Target="25003:[4933..4945).1" />
<Link Source="25003:[5490..6130).3" Target="25002:[2991..3166).4" />
<Link Source="25003:[5490..6130).3" Target="25002:[2991..3166).8" />
<Link Source="25003:[5490..6130).4" Target="EXTERNAL" />
<Link Source="25003:[5490..6130).4" Target="25002:[2991..3166).8" />
<Link Source="25003:[5744..5776).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[5744..5776).1" Target="25003:[5490..6130).2" />
<Link Source="25003:[5794..6115).1" Target="25003:[5490..6130).2" />
<Link Source="25003:[5794..6115).2" Target="25003:[5744..5776).1" />
<Link Source="25003:[5794..6115).2" Target="25003:[5794..6115).1" />
<Link Source="25003:[5794..6115).2" Target="25003:[5490..6130).2" />
<Link Source="25003:[6001..6015).1" Target="25003:[5744..5776).1" />
<Link Source="25003:[6001..6015).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6001..6015).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6001..6015).1" Target="25003:[5794..6115).2" />
<Link Source="25003:[6081..6086).1" Target="25003:[4933..4945).1" />
<Link Source="25003:[6081..6086).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6081..6086).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6081..6086).1" Target="25003:[5794..6115).2" />
<Link Source="25003:[6146..6175).1" Target="25003:[4947..4965).1" />
<Link Source="25003:[6146..6175).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6146..6175).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[6208..7260).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6208..7260).1" Target="25003:[6146..6175).1" />
<Link Source="25003:[6208..7260).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[6276..6580).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6276..6580).1" Target="25003:[5194..5203).1" />
<Link Source="25003:[6276..6580).1" Target="25003:[5490..6130).3" />
<Link Source="25003:[6276..6580).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[6482..6561).1" Target="25003:[6276..6580).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6482..6496).1" Target="25003:[6276..6580).1" />
<Link Source="25003:[6600..7098).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[5744..5776).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[6600..7098).1" />
<Link Source="25003:[6600..7098).2" Target="25003:[6208..7260).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[5744..5776).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[6659..6669).1" Target="25003:[6600..7098).2" />
<Link Source="25003:[7118..7245).1" Target="25003:[6208..7260).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[6659..6669).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).2" Target="25003:[6208..7260).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[4904..7352).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6659..6669).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6482..6561).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[7118..7245).1" />
<Link Source="25003:[7118..7245).4" Target="25003:[6208..7260).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[5194..5203).1" />
<Link Source="25003:[7276..7341).1" Target="25003:[6482..6561).1" />
<Link Source="25003:[7276..7341).1" Target="25002:[2991..3166).8" />
<Link Source="25003:[7276..7290).1" Target="25003:[7276..7341).1" />
<Link Source="25003:[7276..7290).1" Target="25003:[4904..7352).1" />
<Link Source="25003:[7276..7290).1" Target="25002:[2991..3166).8" />
<Link Source="25002:[2991..3166).9" Target="25002:[2991..3166).4" />
<Link Source="25002:[2991..3166).9" Target="25003:[7276..7341).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6081..6086).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5096..5113).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5149..5162).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6482..6496).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6659..6669).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[7276..7290).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[1276..1303).4" />
<Link Source="25002:[2991..3166).9" Target="25003:[6001..6015).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[6146..6175).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5231..5250).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5338..5359).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[1673..1689).4" />
<Link Source="25002:[2991..3166).9" Target="25003:[4904..7352).1" />
<Link Source="25002:[2991..3166).9" Target="25003:[5194..5203).1" />
<Link Source="25002:[2991..3166).9" Target="25002:[1656..1702).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3341..3730).2" Target="25002:[3341..3730).1" />
<Link Source="25002:[3341..3730).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[3341..3730).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[3401..3434).1" Target="25002:[3341..3730).2" />
<Link Source="25002:[3401..3434).2" Target="25002:[3401..3434).1" />
<Link Source="25002:[3401..3434).2" Target="25002:[2991..3166).9" />
<Link Source="25002:[3401..3434).2" Target="25003:[10529..10550).1" />
<Link Source="25002:[3401..3434).2" Target="25002:[3341..3730).2" />
<Link Source="25003:[10591..10601).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10591..10601).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10563..13732).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10563..13732).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10627..10664).1" Target="25003:[10591..10601).1" />
<Link Source="25003:[10627..10664).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10680..10725).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10680..10725).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[10680..10725).2" Target="25003:[10680..10725).1" />
<Link Source="25003:[10680..10725).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[10741..10799).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10741..10799).1" Target="25002:[3401..3434).2" />
<Link Source="25003:[10741..10799).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10741..10799).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[10741..10799).2" Target="25002:[3401..3434).2" />
<Link Source="25003:[10741..10799).2" Target="25003:[10741..10799).1" />
<Link Source="25003:[10741..10799).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[10815..10891).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10815..10891).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10815..10891).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10815..10891).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10907..10975).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10907..10975).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10907..10975).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[10907..10975).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[10991..11148).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[10991..11148).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[10991..11148).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[11059..11133).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[11059..11133).1" Target="25003:[10991..11148).1" />
<Link Source="25003:[11164..11464).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11164..11464).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[11164..11464).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11164..11464).2" Target="25003:[11164..11464).1" />
<Link Source="25003:[11164..11464).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[11224..11449).1" Target="25003:[11164..11464).2" />
<Link Source="25003:[11294..11430).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[11294..11430).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[11294..11430).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[11294..11430).1" Target="25003:[11224..11449).1" />
<Link Source="25003:[11480..11903).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11480..11903).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[11480..11903).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11480..11903).2" Target="25003:[11480..11903).1" />
<Link Source="25003:[11480..11903).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[11917..12344).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[11917..12344).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[11917..12344).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[11917..12344).2" Target="25003:[11917..12344).1" />
<Link Source="25003:[11917..12344).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[12436..12535).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[12436..12535).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[12436..12535).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[12436..12535).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[12651..13498).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[12651..13498).2" Target="25003:[10563..13732).1" />
<Link Source="25003:[12651..13498).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[12651..13498).2" Target="25003:[12651..13498).1" />
<Link Source="25003:[12651..13498).2" Target="25002:[3401..3434).1" />
<Link Source="25003:[12855..12915).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13006..13029).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[1971..2761).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[1971..2761).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[2047..2709).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[1971..2761).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[2047..2709).2" Target="25003:[2047..2709).1" />
<Link Source="25003:[2047..2709).2" Target="25003:[13006..13029).1" />
<Link Source="25003:[2321..2694).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2321..2694).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[2321..2694).1" Target="25003:[2047..2709).2" />
<Link Source="25003:[2321..2694).2" Target="25003:[2047..2709).2" />
<Link Source="25003:[2321..2340).1" Target="25003:[2321..2694).1" />
<Link Source="25003:[2321..2340).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2321..2340).1" Target="25003:[2047..2709).2" />
<Link Source="25003:[2723..2750).1" Target="25003:[1971..2761).1" />
<Link Source="25003:[2723..2750).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[2723..2750).1" Target="25003:[2321..2340).1" />
<Link Source="25003:[2723..2750).1" Target="25003:[13006..13029).1" />
<Link Source="25003:[12994..13030).1" Target="25003:[2723..2750).1" />
<Link Source="25003:[12994..13030).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13060..13085).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[1971..2761).2" Target="25003:[10627..10664).1" />
<Link Source="25003:[1971..2761).2" Target="25003:[13060..13085).1" />
<Link Source="25003:[2047..2709).4" Target="25003:[13060..13085).1" />
<Link Source="25003:[2047..2709).5" Target="25003:[1971..2761).2" />
<Link Source="25003:[2047..2709).5" Target="25003:[10741..10799).2" />
<Link Source="25003:[2047..2709).5" Target="25003:[2321..2340).1" />
<Link Source="25003:[2047..2709).5" Target="25003:[2047..2709).4" />
<Link Source="25003:[2047..2709).5" Target="25003:[13060..13085).1" />
<Link Source="25003:[2723..2750).2" Target="25003:[1971..2761).2" />
<Link Source="25003:[2723..2750).2" Target="25003:[10741..10799).2" />
<Link Source="25003:[2723..2750).2" Target="25003:[2321..2340).1" />
<Link Source="25003:[2723..2750).2" Target="25003:[2047..2709).5" />
<Link Source="25003:[2723..2750).2" Target="25003:[13060..13085).1" />
<Link Source="25003:[13048..13086).1" Target="25003:[2723..2750).2" />
<Link Source="25003:[13048..13086).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13104..13483).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[13104..13483).1" Target="25003:[10741..10799).2" />
<Link Source="25003:[13104..13483).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[13104..13483).1" Target="25003:[12651..13498).2" />
<Link Source="25003:[13393..13464).1" Target="25003:[12994..13030).1" />
<Link Source="25003:[13393..13464).1" Target="25003:[13104..13483).1" />
<Link Source="25003:[13393..13464).2" Target="25003:[13048..13086).1" />
<Link Source="25003:[13393..13464).2" Target="25003:[13104..13483).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[13393..13464).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[13393..13464).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[10741..10799).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2340).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[2047..2709).5" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2694).1" />
<Link Source="25003:[13393..13464).3" Target="25003:[2321..2694).2" />
<Link Source="25003:[13393..13464).3" Target="25003:[13104..13483).1" />
<Link Source="25003:[13514..13693).1" Target="25003:[10563..13732).1" />
<Link Source="25003:[13514..13693).1" Target="25003:[13393..13464).3" />
<Link Source="25003:[13514..13693).1" Target="25003:[10627..10664).1" />
<Link Source="25003:[13514..13693).1" Target="25002:[3401..3434).1" />
<Link Source="25003:[13709..13721).1" Target="25002:[3401..3434).1" />
<Link Source="25002:[3401..3434).5" Target="25002:[3401..3434).2" />
<Link Source="25002:[3401..3434).5" Target="25003:[13709..13721).1" />
<Link Source="25002:[3401..3434).5" Target="25003:[13393..13464).3" />
<Link Source="25002:[3401..3434).5" Target="25002:[3341..3730).2" />
<Link Source="25002:[3452..3715).1" Target="25002:[3341..3730).2" />
<Link Source="25002:[3452..3715).2" Target="25002:[3401..3434).5" />
<Link Source="25002:[3452..3715).2" Target="25002:[3452..3715).1" />
<Link Source="25002:[3452..3715).2" Target="25002:[3341..3730).2" />
<Link Source="25002:[3508..3534).1" Target="25002:[3401..3434).5" />
<Link Source="25002:[3508..3534).1" Target="25002:[3452..3715).2" />
<Link Source="25002:[3840..3992).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[2991..3166).9" />
<Link Source="25002:[3840..3992).2" Target="25002:[3508..3534).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[3840..3992).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[2533..2565).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[2501..2531).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[4126..4179).1" Target="25002:[1656..1702).1" />
<Link Source="25003:[17577..17609).1" Target="25002:[4102..4181).3" />
<Link Source="25003:[17577..17609).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17611..17641).1" Target="25002:[4102..4181).4" />
<Link Source="25003:[17611..17641).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17667..17688).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17702..17728).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[17742..17827).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).2" Target="25003:[17742..17827).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).4" Target="25002:[3508..3534).1" />
<Link Source="25003:[17742..17827).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[17757..17803).1" Target="25003:[17742..17827).2" />
<Link Source="25003:[17757..17803).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).6" Target="25003:[17667..17688).1" />
<Link Source="25003:[17742..17827).6" Target="25003:[17757..17803).1" />
<Link Source="25003:[17841..17904).1" Target="25003:[17742..17827).6" />
<Link Source="25003:[17841..17904).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17918..17965).1" Target="25003:[17742..17827).6" />
<Link Source="25003:[17918..17965).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17936..17956).1" Target="25003:[17918..17965).1" />
<Link Source="25003:[17936..17956).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[17979..18071).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).2" Target="25003:[17979..18071).1" />
<Link Source="25003:[17979..18071).2" Target="25002:[3508..3534).1" />
<Link Source="25003:[17979..18071).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).6" Target="25003:[17979..18071).1" />
<Link Source="25003:[17979..18071).6" Target="25003:[17979..18071).4" />
<Link Source="25003:[17979..18071).6" Target="25002:[3508..3534).1" />
<Link Source="25003:[17979..18071).6" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18085..18181).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).2" Target="25003:[18085..18181).1" />
<Link Source="25003:[18085..18181).2" Target="25003:[17979..18071).6" />
<Link Source="25003:[18085..18181).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).6" Target="25003:[18085..18181).1" />
<Link Source="25003:[18085..18181).6" Target="25003:[18085..18181).4" />
<Link Source="25003:[18085..18181).6" Target="25003:[17979..18071).6" />
<Link Source="25003:[18085..18181).6" Target="25002:[4126..4179).1" />
<Link Source="25003:[18197..18490).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18197..18490).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18201..18226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18197..18490).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[22962..23812).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[23085..23122).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[23085..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21725..21759).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[21605..21640).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).2" Target="25003:[21773..22187).1" />
<Link Source="25003:[21773..22187).2" Target="25003:[18085..18181).6" />
<Link Source="25003:[21773..22187).2" Target="25003:[18201..18226).1" />
<Link Source="25003:[21845..21956).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[21974..22136).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[21974..22136).2" Target="25003:[21725..21759).1" />
<Link Source="25003:[21974..22136).2" Target="25003:[21974..22136).1" />
<Link Source="25003:[21974..22136).2" Target="25003:[21773..22187).2" />
<Link Source="25003:[22154..22172).1" Target="25003:[21773..22187).2" />
<Link Source="25003:[22201..22213).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[18197..18490).2" Target="25003:[22201..22213).1" />
<Link Source="25003:[18197..18490).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[18462..18474).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[21372..21407).1" Target="25003:[18453..18475).1" />
<Link Source="25003:[21372..21407).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[21372..21407).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).2" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[23085..23122).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).2" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).4" />
<Link Source="25003:[21433..21546).5" Target="25003:[18085..18181).6" />
<Link Source="25003:[21433..21546).5" Target="25003:[18462..18474).1" />
<Link Source="25003:[18506..18543).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18557..18581).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18557..18581).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18658..18664).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18678..18713).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18557..18581).1" />
<Link Source="25003:[18678..18713).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[18727..18781).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18795..18929).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).2" Target="25003:[18795..18929).1" />
<Link Source="25003:[18795..18929).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[18795..18929).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18855..18914).1" Target="25003:[18795..18929).2" />
<Link Source="25003:[18855..18914).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[18855..18914).2" Target="25003:[18795..18929).2" />
<Link Source="25003:[18872..18912).1" Target="25003:[18795..18929).2" />
<Link Source="25003:[22283..22306).1" Target="25003:[18855..18914).1" />
<Link Source="25003:[22283..22306).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22308..22323).1" Target="25003:[18855..18914).2" />
<Link Source="25003:[22308..22323).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[22349..22404).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[22308..22323).1" />
<Link Source="25003:[22349..22404).4" Target="25003:[18872..18912).1" />
<Link Source="25003:[22391..22403).1" Target="25003:[18872..18912).1" />
<Link Source="25003:[14779..17530).1" Target="25003:[22283..22306).1" />
<Link Source="25003:[14779..17530).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14837..14866).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14882..14907).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[14882..14907).1" />
<Link Source="25003:[14882..14907).3" Target="25003:[22391..22403).1" />
<Link Source="25003:[14921..15244).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[14921..15244).2" Target="25003:[14921..15244).1" />
<Link Source="25003:[14921..15244).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15100..15131).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15100..15131).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15100..15131).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15100..15131).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[15100..15131).2" Target="25003:[15100..15131).1" />
<Link Source="25003:[15100..15131).2" Target="25003:[14882..14907).3" />
<Link Source="25003:[15100..15131).2" Target="25003:[14921..15244).2" />
<Link Source="25003:[15149..15164).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15149..15164).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15149..15164).3" Target="25003:[15149..15164).1" />
<Link Source="25003:[15149..15164).3" Target="25003:[15100..15131).2" />
<Link Source="25003:[15149..15164).3" Target="25003:[14921..15244).2" />
<Link Source="25003:[15182..15229).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15182..15229).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15182..15229).1" Target="25003:[14921..15244).2" />
<Link Source="25003:[15182..15229).5" Target="25003:[14837..14866).1" />
<Link Source="25003:[15182..15229).5" Target="25003:[15182..15229).1" />
<Link Source="25003:[15182..15229).5" Target="25003:[15149..15164).3" />
<Link Source="25003:[15182..15229).5" Target="25003:[14921..15244).2" />
<Link Source="25003:[15260..15767).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[15260..15767).2" Target="25003:[15260..15767).1" />
<Link Source="25003:[15260..15767).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15320..15717).1" Target="25003:[15260..15767).2" />
<Link Source="25003:[15632..15650).1" Target="25003:[15320..15717).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[15632..15650).1" />
<Link Source="25003:[15632..15650).3" Target="25003:[15182..15229).5" />
<Link Source="25003:[15632..15650).3" Target="25003:[15320..15717).1" />
<Link Source="25003:[15672..15698).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15672..15698).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15672..15698).1" Target="25003:[15320..15717).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[15672..15698).1" />
<Link Source="25003:[15672..15698).2" Target="25003:[15632..15650).3" />
<Link Source="25003:[15672..15698).2" Target="25003:[15320..15717).1" />
<Link Source="25003:[15737..15752).1" Target="25003:[15260..15767).2" />
<Link Source="25003:[15737..15752).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15737..15752).3" Target="25003:[15737..15752).1" />
<Link Source="25003:[15737..15752).3" Target="25003:[15672..15698).2" />
<Link Source="25003:[15737..15752).3" Target="25003:[15260..15767).2" />
<Link Source="25003:[15783..15883).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[15783..15883).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[15783..15883).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15899..15914).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[15899..15914).1" />
<Link Source="25003:[15899..15914).3" Target="25003:[15737..15752).3" />
<Link Source="25003:[15899..15914).3" Target="25003:[22391..22403).1" />
<Link Source="25003:[15930..16520).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[21433..21546).5" />
<Link Source="25003:[15930..16520).2" Target="25003:[15930..16520).1" />
<Link Source="25003:[15930..16520).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[15986..16015).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[15986..16015).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[15986..16015).3" Target="25003:[15986..16015).1" />
<Link Source="25003:[15986..16015).3" Target="25003:[15899..15914).3" />
<Link Source="25003:[15986..16015).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16055..16078).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16033..16095).1" Target="25003:[16055..16078).1" />
<Link Source="25003:[16033..16095).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16113..16472).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16113..16472).3" Target="25003:[16033..16095).1" />
<Link Source="25003:[16113..16472).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16202..16218).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16202..16218).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16202..16218).3" Target="25003:[16202..16218).1" />
<Link Source="25003:[16202..16218).3" Target="25003:[15986..16015).3" />
<Link Source="25003:[16202..16218).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).1" Target="25003:[16033..16095).1" />
<Link Source="25003:[16240..16275).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16240..16275).2" Target="25003:[14837..14866).1" />
<Link Source="25003:[16240..16275).2" Target="25003:[16240..16275).1" />
<Link Source="25003:[16240..16275).2" Target="25003:[16202..16218).3" />
<Link Source="25003:[16240..16275).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16297..16313).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16297..16313).3" Target="25003:[16297..16313).1" />
<Link Source="25003:[16297..16313).3" Target="25003:[16240..16275).2" />
<Link Source="25003:[16297..16313).3" Target="25003:[16113..16472).3" />
<Link Source="25003:[16335..16453).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16414..16430).1" Target="25003:[16335..16453).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[16414..16430).1" />
<Link Source="25003:[16414..16430).3" Target="25003:[16297..16313).3" />
<Link Source="25003:[16414..16430).3" Target="25003:[16335..16453).1" />
<Link Source="25003:[16490..16505).1" Target="25003:[15930..16520).2" />
<Link Source="25003:[16490..16505).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16490..16505).3" Target="25003:[16490..16505).1" />
<Link Source="25003:[16490..16505).3" Target="25003:[16414..16430).3" />
<Link Source="25003:[16490..16505).3" Target="25003:[15930..16520).2" />
<Link Source="25003:[16536..16829).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16536..16829).2" Target="25003:[16536..16829).1" />
<Link Source="25003:[16536..16829).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[16596..16624).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16596..16624).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16596..16624).3" Target="25003:[16596..16624).1" />
<Link Source="25003:[16596..16624).3" Target="25003:[16490..16505).3" />
<Link Source="25003:[16596..16624).3" Target="25003:[16536..16829).2" />
<Link Source="25003:[16642..16683).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16642..16683).4" Target="25003:[14837..14866).1" />
<Link Source="25003:[16642..16683).4" Target="25003:[16642..16683).1" />
<Link Source="25003:[16642..16683).4" Target="25003:[16596..16624).3" />
<Link Source="25003:[16642..16683).4" Target="25003:[16536..16829).2" />
<Link Source="25003:[16701..16717).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16701..16717).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16701..16717).3" Target="25003:[16701..16717).1" />
<Link Source="25003:[16701..16717).3" Target="25003:[16642..16683).4" />
<Link Source="25003:[16701..16717).3" Target="25003:[16536..16829).2" />
<Link Source="25003:[16735..16781).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16735..16781).4" Target="25003:[14837..14866).1" />
<Link Source="25003:[16735..16781).4" Target="25003:[16735..16781).1" />
<Link Source="25003:[16735..16781).4" Target="25003:[16701..16717).3" />
<Link Source="25003:[16735..16781).4" Target="25003:[16536..16829).2" />
<Link Source="25003:[16799..16814).1" Target="25003:[16536..16829).2" />
<Link Source="25003:[16799..16814).3" Target="25003:[14837..14866).1" />
<Link Source="25003:[16799..16814).3" Target="25003:[16799..16814).1" />
<Link Source="25003:[16799..16814).3" Target="25003:[16735..16781).4" />
<Link Source="25003:[16799..16814).3" Target="25003:[16536..16829).2" />
<Link Source="25003:[16845..16954).1" Target="25003:[14779..17530).1" />
<Link Source="25003:[16845..16954).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[16845..16954).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16970..17144).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[16970..17144).2" Target="25003:[16970..17144).1" />
<Link Source="25003:[16970..17144).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17160..17340).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[17160..17340).2" Target="25003:[17160..17340).1" />
<Link Source="25003:[17160..17340).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17356..17482).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[14779..17530).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[16113..16472).3" />
<Link Source="25003:[17356..17482).2" Target="25003:[17356..17482).1" />
<Link Source="25003:[17356..17482).2" Target="25003:[22391..22403).1" />
<Link Source="25003:[17498..17519).1" Target="25003:[14837..14866).1" />
<Link Source="25003:[17498..17519).1" Target="25003:[16799..16814).3" />
<Link Source="25003:[17498..17519).1" Target="25003:[22391..22403).1" />
<Link Source="25003:[22349..22404).7" Target="25003:[17498..17519).1" />
<Link Source="25003:[22349..22404).7" Target="25003:[18872..18912).1" />
<Link Source="25003:[22349..22404).8" Target="25003:[22349..22404).4" />
<Link Source="25003:[22349..22404).8" Target="25003:[22349..22404).7" />
<Link Source="25003:[22349..22404).8" Target="25003:[18872..18912).1" />
<Link Source="25003:[18855..18914).5" Target="25003:[18727..18781).1" />
<Link Source="25003:[18855..18914).5" Target="25003:[22349..22404).8" />
<Link Source="25003:[18855..18914).5" Target="25003:[18795..18929).2" />
<Link Source="25003:[18943..18992).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18943..18992).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18992).2" Target="25003:[18727..18781).1" />
<Link Source="25003:[18943..18992).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18991).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18992).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18992).2" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[18855..18914).5" />
<Link Source="25003:[22669..22689).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22703..22939).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22669..22689).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[18943..18991).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[22703..22939).1" />
<Link Source="25003:[22763..22783).1" Target="25003:[18855..18914).5" />
<Link Source="25003:[22763..22783).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[22763..22783).3" Target="25003:[22599..22615).1" />
<Link Source="25003:[22763..22783).3" Target="25003:[22763..22783).1" />
<Link Source="25003:[22763..22783).3" Target="25003:[18678..18713).3" />
<Link Source="25003:[22763..22783).3" Target="25003:[22703..22939).3" />
<Link Source="25003:[22801..22890).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[22908..22924).1" Target="25003:[22599..22615).1" />
<Link Source="25003:[22908..22924).1" Target="25003:[22763..22783).3" />
<Link Source="25003:[22908..22924).1" Target="25003:[22703..22939).3" />
<Link Source="25003:[18943..18992).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[19106..19139).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[22908..22924).1" />
<Link Source="25003:[19106..19139).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19153..19205).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19219..19250).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[19219..19250).1" Target="25003:[16113..16472).3" />
<Link Source="25003:[19219..19250).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).3" Target="25003:[19219..19250).1" />
<Link Source="25003:[19264..20938).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[23158..23173).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[23158..23173).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23175..23190).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[23175..23190).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23139..23801).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[23139..23801).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23224..23425).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23224..23425).2" Target="25003:[23158..23173).1" />
<Link Source="25003:[23224..23425).2" Target="25003:[23224..23425).1" />
<Link Source="25003:[23224..23425).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23445..23528).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23445..23528).2" Target="25003:[23175..23190).1" />
<Link Source="25003:[23445..23528).2" Target="25003:[23445..23528).1" />
<Link Source="25003:[23445..23528).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23548..23600).1" Target="25003:[23175..23190).1" />
<Link Source="25003:[23548..23600).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[23548..23600).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23548..23600).2" Target="25003:[23158..23173).1" />
<Link Source="25003:[23548..23600).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[23548..23600).2" Target="25003:[23548..23600).1" />
<Link Source="25003:[23548..23600).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23618..23712).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23618..23712).2" Target="25003:[23548..23600).2" />
<Link Source="25003:[23618..23712).2" Target="25003:[23618..23712).1" />
<Link Source="25003:[23618..23712).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23732..23786).1" Target="25003:[23175..23190).1" />
<Link Source="25003:[23732..23786).1" Target="25003:[19264..20938).3" />
<Link Source="25003:[23732..23786).1" Target="25003:[19264..20938).1" />
<Link Source="25003:[23732..23786).2" Target="25003:[23158..23173).1" />
<Link Source="25003:[23732..23786).2" Target="25003:[19264..20938).3" />
<Link Source="25003:[23732..23786).2" Target="25003:[23732..23786).1" />
<Link Source="25003:[23732..23786).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[23548..23600).4" Target="25003:[23175..23190).1" />
<Link Source="25003:[23548..23600).4" Target="25003:[23732..23786).2" />
<Link Source="25003:[23548..23600).4" Target="25003:[19264..20938).1" />
<Link Source="25003:[23618..23712).5" Target="25003:[23548..23600).4" />
<Link Source="25003:[23618..23712).5" Target="25003:[23618..23712).1" />
<Link Source="25003:[23618..23712).5" Target="25003:[19264..20938).1" />
<Link Source="25003:[19327..19352).1" Target="25003:[19219..19250).1" />
<Link Source="25003:[19327..19352).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[19370..19400).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[19370..19400).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[19418..19628).1" Target="25003:[19370..19400).1" />
<Link Source="25003:[19418..19628).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[19418..19628).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[19648..19745).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[19765..20366).1" Target="25003:[17841..17904).1" />
<Link Source="25003:[19765..20366).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[19846..19878).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[19846..19878).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19846..19878).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[19846..19878).2" Target="25003:[19765..20366).1" />
<Link Source="25003:[19846..19877).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[22454..22470).1" Target="25003:[19846..19878).1" />
<Link Source="25003:[22454..22470).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22472..22481).1" Target="25003:[19846..19878).2" />
<Link Source="25003:[22472..22481).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).1" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[22507..22533).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[22472..22481).1" />
<Link Source="25003:[22507..22533).4" Target="25003:[19846..19877).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22454..22470).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22507..22533).1" />
<Link Source="25003:[22507..22533).6" Target="25003:[22507..22533).4" />
<Link Source="25003:[22507..22533).6" Target="25003:[19106..19139).3" />
<Link Source="25003:[22507..22533).6" Target="25003:[19846..19877).1" />
<Link Source="25003:[19846..19878).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[19900..19925).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[19900..19925).1" />
<Link Source="25003:[19900..19925).3" Target="25003:[22507..22533).6" />
<Link Source="25003:[19900..19925).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19370..19400).1" />
<Link Source="25003:[19947..19983).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[19947..19983).1" />
<Link Source="25003:[19947..19983).3" Target="25003:[19900..19925).3" />
<Link Source="25003:[19947..19983).3" Target="25003:[19765..20366).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19947..19983).1" />
<Link Source="25003:[20005..20024).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[20005..20024).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[19947..19983).1" />
<Link Source="25003:[20046..20347).1" Target="25003:[19765..20366).1" />
<Link Source="25003:[20112..20144).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[20112..20144).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20112..20144).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20112..20144).2" Target="25003:[20046..20347).1" />
<Link Source="25003:[20112..20143).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[22454..22470).2" Target="25003:[20112..20144).1" />
<Link Source="25003:[22454..22470).2" Target="25003:[20112..20143).1" />
<Link Source="25003:[22472..22481).2" Target="25003:[20112..20144).2" />
<Link Source="25003:[22472..22481).2" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).7" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).10" Target="25003:[22507..22533).7" />
<Link Source="25003:[22507..22533).10" Target="25003:[22472..22481).2" />
<Link Source="25003:[22507..22533).10" Target="25003:[20112..20143).1" />
<Link Source="25003:[22507..22533).12" Target="25003:[22454..22470).2" />
<Link Source="25003:[22507..22533).12" Target="25003:[22507..22533).7" />
<Link Source="25003:[22507..22533).12" Target="25003:[22507..22533).10" />
<Link Source="25003:[22507..22533).12" Target="25003:[19947..19983).3" />
<Link Source="25003:[22507..22533).12" Target="25003:[20112..20143).1" />
<Link Source="25003:[20112..20144).3" Target="25003:[20046..20347).1" />
<Link Source="25003:[20170..20195).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[20170..20195).1" />
<Link Source="25003:[20170..20195).3" Target="25003:[22507..22533).12" />
<Link Source="25003:[20170..20195).3" Target="25003:[20046..20347).1" />
<Link Source="25003:[20221..20324).1" Target="25003:[20046..20347).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[18506..18543).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[20221..20324).1" />
<Link Source="25003:[20221..20324).8" Target="25003:[20170..20195).3" />
<Link Source="25003:[20221..20324).8" Target="25003:[20046..20347).1" />
<Link Source="25003:[20386..20505).1" Target="25003:[19327..19352).1" />
<Link Source="25003:[20386..20505).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20386..20505).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20386..20505).4" Target="25003:[17979..18071).2" />
<Link Source="25003:[20386..20505).4" Target="25003:[23732..23786).2" />
<Link Source="25003:[20386..20505).5" Target="25003:[18085..18181).2" />
<Link Source="25003:[20386..20505).5" Target="25003:[23732..23786).2" />
<Link Source="25003:[20404..20504).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[4933..4945).2" Target="25003:[20386..20505).1" />
<Link Source="25003:[4933..4945).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[4947..4965).2" Target="25003:[20386..20505).2" />
<Link Source="25003:[4947..4965).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[4967..5002).2" Target="25003:[20386..20505).4" />
<Link Source="25003:[4967..5002).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[5004..5041).2" Target="25003:[20386..20505).5" />
<Link Source="25003:[5004..5041).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[4904..7352).2" Target="25003:[20386..20505).2" />
<Link Source="25003:[4904..7352).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[912..917).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[912..917).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[950..967).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[950..967).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1000..1013).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1000..1013).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1048..1062).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1048..1062).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1099..1109).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1099..1109).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1151..1165).13" Target="25003:[4904..7352).2" />
<Link Source="25003:[1151..1165).13" Target="25003:[20404..20504).1" />
<Link Source="25003:[1336..1350).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1336..1350).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1460..1479).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1460..1479).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[1527..1548).5" Target="25003:[4904..7352).2" />
<Link Source="25003:[1527..1548).5" Target="25003:[20404..20504).1" />
<Link Source="25003:[5067..5072).2" Target="25003:[4933..4945).2" />
<Link Source="25003:[5067..5072).2" Target="25003:[20221..20324).1" />
<Link Source="25003:[5067..5072).2" Target="25003:[4904..7352).2" />
<Link Source="25003:[5067..5072).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[5096..5113).2" Target="25003:[4933..4945).2" />
<Link Source="25003:[5096..5113).2" Target="25003:[20221..20324).1" />
<Link Source="25003:[5096..5113).2" Target="25003:[4904..7352).2" />
<Link Source="25003:[5096..5113).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[5149..5162).2" Target="25003:[4933..4945).2" />
<Link Source="25003:[5149..5162).2" Target="25003:[20221..20324).1" />
<Link Source="25003:[5149..5162).2" Target="25003:[4904..7352).2" />
<Link Source="25003:[5149..5162).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[5194..5203).2" Target="25003:[4933..4945).2" />
<Link Source="25003:[5194..5203).2" Target="25003:[20221..20324).1" />
<Link Source="25003:[5194..5203).2" Target="25003:[4904..7352).2" />
<Link Source="25003:[5194..5203).2" Target="25003:[20404..20504).1" />
<Link Source="25003:[5444..5476).3" Target="25003:[20404..20504).1" />
<Link Source="25003:[5490..6130).9" Target="25003:[4933..4945).2" />
<Link Source="25003:[5490..6130).9" Target="25003:[20221..20324).1" />
<Link Source="25003:[5490..6130).9" Target="25003:[20404..20504).1" />
<Link Source="25003:[7118..7245).7" Target="25003:[4904..7352).2" />
<Link Source="25003:[7118..7245).8" Target="25003:[4904..7352).2" />
<Link Source="25003:[7118..7245).8" Target="25003:[5490..6130).9" />
<Link Source="25003:[7118..7245).8" Target="25003:[7118..7245).7" />
<Link Source="25003:[7118..7245).10" Target="25003:[4904..7352).2" />
<Link Source="25003:[7118..7245).10" Target="25003:[5490..6130).9" />
<Link Source="25003:[7118..7245).10" Target="25003:[5194..5203).2" />
<Link Source="25003:[7118..7245).10" Target="25003:[7118..7245).7" />
<Link Source="25003:[20523..20557).1" Target="25003:[20386..20505).2" />
<Link Source="25003:[20523..20557).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20575..20622).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[20575..20622).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20575..20622).2" Target="25003:[20386..20505).2" />
<Link Source="25003:[20575..20622).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[20575..20622).1" />
<Link Source="25003:[20575..20622).3" Target="25003:[20575..20622).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[5194..5203).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[5490..6130).9" />
<Link Source="25003:[20575..20622).3" Target="25003:[5096..5113).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[5149..5162).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[4904..7352).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[4947..4965).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[4967..5002).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[5004..5041).2" />
<Link Source="25003:[20575..20622).3" Target="25003:[23732..23786).2" />
<Link Source="25003:[20575..20622).4" Target="25003:[23732..23786).2" />
<Link Source="25003:[10680..10725).4" Target="25003:[20575..20622).4" />
<Link Source="25003:[10680..10725).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[10680..10725).5" Target="25003:[10680..10725).4" />
<Link Source="25003:[10680..10725).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[10815..10891).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[10815..10891).3" Target="25003:[20575..20622).4" />
<Link Source="25003:[10907..10975).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[10907..10975).3" Target="25003:[20575..20622).4" />
<Link Source="25003:[10991..11148).2" Target="25003:[20575..20622).3" />
<Link Source="25003:[10991..11148).2" Target="25003:[20575..20622).4" />
<Link Source="25003:[11059..11133).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[11059..11133).3" Target="25003:[10991..11148).2" />
<Link Source="25003:[11164..11464).4" Target="25003:[20575..20622).4" />
<Link Source="25003:[11164..11464).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[11164..11464).5" Target="25003:[11164..11464).4" />
<Link Source="25003:[11164..11464).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[11224..11449).4" Target="25003:[11164..11464).5" />
<Link Source="25003:[11294..11430).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[11294..11430).3" Target="25003:[11224..11449).4" />
<Link Source="25003:[11480..11903).4" Target="25003:[20575..20622).4" />
<Link Source="25003:[11480..11903).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[11480..11903).5" Target="25003:[11480..11903).4" />
<Link Source="25003:[11480..11903).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[11917..12344).4" Target="25003:[20575..20622).4" />
<Link Source="25003:[11917..12344).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[11917..12344).5" Target="25003:[11917..12344).4" />
<Link Source="25003:[11917..12344).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[12436..12535).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[12436..12535).3" Target="25003:[20575..20622).4" />
<Link Source="25003:[12855..12915).4" Target="25003:[20575..20622).3" />
<Link Source="25003:[13514..13693).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[13514..13693).5" Target="25003:[20575..20622).4" />
<Link Source="25003:[20640..20746).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20640..20746).2" Target="25003:[20575..20622).3" />
<Link Source="25003:[20640..20746).2" Target="25003:[20640..20746).1" />
<Link Source="25003:[20640..20746).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20695..20727).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[20695..20727).1" Target="25003:[20575..20622).3" />
<Link Source="25003:[20695..20727).1" Target="25003:[20640..20746).2" />
<Link Source="25003:[20764..20834).1" Target="25003:[20386..20505).2" />
<Link Source="25003:[20764..20834).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20764..20834).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20764..20834).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20782..20832).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[22283..22306).2" Target="25003:[20764..20834).1" />
<Link Source="25003:[22283..22306).2" Target="25003:[20782..20832).1" />
<Link Source="25003:[22308..22323).2" Target="25003:[20764..20834).2" />
<Link Source="25003:[22308..22323).2" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).10" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).13" Target="25003:[22349..22404).10" />
<Link Source="25003:[22349..22404).13" Target="25003:[22308..22323).2" />
<Link Source="25003:[22349..22404).13" Target="25003:[20782..20832).1" />
<Link Source="25003:[14837..14866).3" Target="25003:[20782..20832).1" />
<Link Source="25003:[14882..14907).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[14882..14907).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[14882..14907).6" Target="25003:[14882..14907).4" />
<Link Source="25003:[14882..14907).6" Target="25003:[20782..20832).1" />
<Link Source="25003:[14921..15244).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[14921..15244).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[14921..15244).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[14921..15244).5" Target="25003:[14921..15244).4" />
<Link Source="25003:[14921..15244).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[15100..15131).3" Target="25003:[22283..22306).2" />
<Link Source="25003:[15100..15131).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[15100..15131).3" Target="25003:[14921..15244).5" />
<Link Source="25003:[15100..15131).4" Target="25003:[14837..14866).3" />
<Link Source="25003:[15100..15131).4" Target="25003:[15100..15131).3" />
<Link Source="25003:[15100..15131).4" Target="25003:[14882..14907).6" />
<Link Source="25003:[15100..15131).4" Target="25003:[14921..15244).5" />
<Link Source="25003:[15149..15164).4" Target="25003:[14921..15244).5" />
<Link Source="25003:[15149..15164).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15149..15164).6" Target="25003:[15149..15164).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[15100..15131).4" />
<Link Source="25003:[15149..15164).6" Target="25003:[14921..15244).5" />
<Link Source="25003:[15182..15229).6" Target="25003:[22283..22306).2" />
<Link Source="25003:[15182..15229).6" Target="25003:[20575..20622).3" />
<Link Source="25003:[15182..15229).6" Target="25003:[14921..15244).5" />
<Link Source="25003:[15182..15229).10" Target="25003:[14837..14866).3" />
<Link Source="25003:[15182..15229).10" Target="25003:[15182..15229).6" />
<Link Source="25003:[15182..15229).10" Target="25003:[15149..15164).6" />
<Link Source="25003:[15182..15229).10" Target="25003:[14921..15244).5" />
<Link Source="25003:[15260..15767).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[15260..15767).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[15260..15767).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[15260..15767).5" Target="25003:[15260..15767).4" />
<Link Source="25003:[15260..15767).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[15320..15717).13" Target="25003:[15260..15767).5" />
<Link Source="25003:[15632..15650).4" Target="25003:[15320..15717).13" />
<Link Source="25003:[15632..15650).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15632..15650).6" Target="25003:[15632..15650).4" />
<Link Source="25003:[15632..15650).6" Target="25003:[15182..15229).10" />
<Link Source="25003:[15632..15650).6" Target="25003:[15320..15717).13" />
<Link Source="25003:[15672..15698).3" Target="25003:[22283..22306).2" />
<Link Source="25003:[15672..15698).3" Target="25003:[20575..20622).3" />
<Link Source="25003:[15672..15698).3" Target="25003:[15320..15717).13" />
<Link Source="25003:[15672..15698).4" Target="25003:[14837..14866).3" />
<Link Source="25003:[15672..15698).4" Target="25003:[15672..15698).3" />
<Link Source="25003:[15672..15698).4" Target="25003:[15632..15650).6" />
<Link Source="25003:[15672..15698).4" Target="25003:[15320..15717).13" />
<Link Source="25003:[15737..15752).4" Target="25003:[15260..15767).5" />
<Link Source="25003:[15737..15752).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15737..15752).6" Target="25003:[15737..15752).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[15672..15698).4" />
<Link Source="25003:[15737..15752).6" Target="25003:[15260..15767).5" />
<Link Source="25003:[15783..15883).2" Target="25003:[22283..22306).2" />
<Link Source="25003:[15783..15883).2" Target="25003:[20575..20622).3" />
<Link Source="25003:[15783..15883).2" Target="25003:[20782..20832).1" />
<Link Source="25003:[15899..15914).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[15899..15914).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15899..15914).6" Target="25003:[15899..15914).4" />
<Link Source="25003:[15899..15914).6" Target="25003:[15737..15752).6" />
<Link Source="25003:[15899..15914).6" Target="25003:[20782..20832).1" />
<Link Source="25003:[15930..16520).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[15930..16520).5" Target="25003:[20575..20622).3" />
<Link Source="25003:[15930..16520).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[15986..16015).4" Target="25003:[15930..16520).5" />
<Link Source="25003:[15986..16015).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[15986..16015).6" Target="25003:[15986..16015).4" />
<Link Source="25003:[15986..16015).6" Target="25003:[15899..15914).6" />
<Link Source="25003:[15986..16015).6" Target="25003:[15930..16520).5" />
<Link Source="25003:[16202..16218).7" Target="25003:[15930..16520).5" />
<Link Source="25003:[16202..16218).9" Target="25003:[14837..14866).3" />
<Link Source="25003:[16202..16218).9" Target="25003:[16202..16218).7" />
<Link Source="25003:[16202..16218).9" Target="25003:[15986..16015).6" />
<Link Source="25003:[16202..16218).9" Target="25003:[15930..16520).5" />
<Link Source="25003:[16240..16275).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[16240..16275).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16240..16275).6" Target="25003:[16240..16275).5" />
<Link Source="25003:[16240..16275).6" Target="25003:[16202..16218).9" />
<Link Source="25003:[16240..16275).6" Target="25003:[15930..16520).5" />
<Link Source="25003:[16297..16313).7" Target="25003:[15930..16520).5" />
<Link Source="25003:[16297..16313).9" Target="25003:[14837..14866).3" />
<Link Source="25003:[16297..16313).9" Target="25003:[16297..16313).7" />
<Link Source="25003:[16297..16313).9" Target="25003:[16240..16275).6" />
<Link Source="25003:[16297..16313).9" Target="25003:[15930..16520).5" />
<Link Source="25003:[16335..16453).9" Target="25003:[15930..16520).5" />
<Link Source="25003:[16414..16430).4" Target="25003:[16335..16453).9" />
<Link Source="25003:[16414..16430).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16414..16430).6" Target="25003:[16414..16430).4" />
<Link Source="25003:[16414..16430).6" Target="25003:[16297..16313).9" />
<Link Source="25003:[16414..16430).6" Target="25003:[16335..16453).9" />
<Link Source="25003:[16490..16505).4" Target="25003:[15930..16520).5" />
<Link Source="25003:[16490..16505).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16490..16505).6" Target="25003:[16490..16505).4" />
<Link Source="25003:[16490..16505).6" Target="25003:[16414..16430).6" />
<Link Source="25003:[16490..16505).6" Target="25003:[15930..16520).5" />
<Link Source="25003:[16536..16829).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[16536..16829).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[16536..16829).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[16536..16829).5" Target="25003:[16536..16829).4" />
<Link Source="25003:[16536..16829).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[16596..16624).4" Target="25003:[16536..16829).5" />
<Link Source="25003:[16596..16624).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16596..16624).6" Target="25003:[16596..16624).4" />
<Link Source="25003:[16596..16624).6" Target="25003:[16490..16505).6" />
<Link Source="25003:[16596..16624).6" Target="25003:[16536..16829).5" />
<Link Source="25003:[16642..16683).5" Target="25003:[16536..16829).5" />
<Link Source="25003:[16642..16683).8" Target="25003:[14837..14866).3" />
<Link Source="25003:[16642..16683).8" Target="25003:[16642..16683).5" />
<Link Source="25003:[16642..16683).8" Target="25003:[16596..16624).6" />
<Link Source="25003:[16642..16683).8" Target="25003:[16536..16829).5" />
<Link Source="25003:[16701..16717).4" Target="25003:[16536..16829).5" />
<Link Source="25003:[16701..16717).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16701..16717).6" Target="25003:[16701..16717).4" />
<Link Source="25003:[16701..16717).6" Target="25003:[16642..16683).8" />
<Link Source="25003:[16701..16717).6" Target="25003:[16536..16829).5" />
<Link Source="25003:[16735..16781).5" Target="25003:[16536..16829).5" />
<Link Source="25003:[16735..16781).8" Target="25003:[14837..14866).3" />
<Link Source="25003:[16735..16781).8" Target="25003:[16735..16781).5" />
<Link Source="25003:[16735..16781).8" Target="25003:[16701..16717).6" />
<Link Source="25003:[16735..16781).8" Target="25003:[16536..16829).5" />
<Link Source="25003:[16799..16814).4" Target="25003:[16536..16829).5" />
<Link Source="25003:[16799..16814).6" Target="25003:[14837..14866).3" />
<Link Source="25003:[16799..16814).6" Target="25003:[16799..16814).4" />
<Link Source="25003:[16799..16814).6" Target="25003:[16735..16781).8" />
<Link Source="25003:[16799..16814).6" Target="25003:[16536..16829).5" />
<Link Source="25003:[16845..16954).2" Target="25003:[22283..22306).2" />
<Link Source="25003:[16845..16954).2" Target="25003:[15930..16520).5" />
<Link Source="25003:[16845..16954).2" Target="25003:[20782..20832).1" />
<Link Source="25003:[16970..17144).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[16970..17144).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[16970..17144).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[16970..17144).5" Target="25003:[16970..17144).4" />
<Link Source="25003:[16970..17144).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[17160..17340).4" Target="25003:[20782..20832).1" />
<Link Source="25003:[17160..17340).5" Target="25003:[22283..22306).2" />
<Link Source="25003:[17160..17340).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[17160..17340).5" Target="25003:[17160..17340).4" />
<Link Source="25003:[17160..17340).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[17356..17482).5" Target="25003:[20782..20832).1" />
<Link Source="25003:[17356..17482).6" Target="25003:[22283..22306).2" />
<Link Source="25003:[17356..17482).6" Target="25003:[15930..16520).5" />
<Link Source="25003:[17356..17482).6" Target="25003:[17356..17482).5" />
<Link Source="25003:[17356..17482).6" Target="25003:[20782..20832).1" />
<Link Source="25003:[17498..17519).3" Target="25003:[14837..14866).3" />
<Link Source="25003:[17498..17519).3" Target="25003:[16799..16814).6" />
<Link Source="25003:[17498..17519).3" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).16" Target="25003:[17498..17519).3" />
<Link Source="25003:[22349..22404).16" Target="25003:[20782..20832).1" />
<Link Source="25003:[22349..22404).17" Target="25003:[22349..22404).13" />
<Link Source="25003:[22349..22404).17" Target="25003:[22349..22404).16" />
<Link Source="25003:[22349..22404).17" Target="25003:[20782..20832).1" />
<Link Source="25003:[20764..20834).5" Target="25003:[18506..18543).1" />
<Link Source="25003:[20764..20834).5" Target="25003:[22349..22404).17" />
<Link Source="25003:[20764..20834).5" Target="25003:[20221..20324).8" />
<Link Source="25003:[20764..20834).5" Target="25003:[23732..23786).2" />
<Link Source="25003:[20852..20923).1" Target="25003:[20695..20727).1" />
<Link Source="25003:[20852..20923).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[20852..20923).2" Target="25003:[17936..17956).1" />
<Link Source="25003:[20852..20923).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20867..20921).1" Target="25003:[23732..23786).2" />
<Link Source="25003:[22283..22306).3" Target="25003:[20852..20923).1" />
<Link Source="25003:[22283..22306).3" Target="25003:[20867..20921).1" />
<Link Source="25003:[22308..22323).3" Target="25003:[20852..20923).2" />
<Link Source="25003:[22308..22323).3" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).19" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).22" Target="25003:[22349..22404).19" />
<Link Source="25003:[22349..22404).22" Target="25003:[22308..22323).3" />
<Link Source="25003:[22349..22404).22" Target="25003:[20867..20921).1" />
<Link Source="25003:[14837..14866).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[14882..14907).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[14882..14907).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[14882..14907).9" Target="25003:[14882..14907).7" />
<Link Source="25003:[14882..14907).9" Target="25003:[20867..20921).1" />
<Link Source="25003:[14921..15244).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[14921..15244).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[14921..15244).8" Target="25003:[15930..16520).5" />
<Link Source="25003:[14921..15244).8" Target="25003:[14921..15244).7" />
<Link Source="25003:[14921..15244).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[15100..15131).5" Target="25003:[22283..22306).3" />
<Link Source="25003:[15100..15131).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[15100..15131).5" Target="25003:[14921..15244).8" />
<Link Source="25003:[15100..15131).6" Target="25003:[14837..14866).5" />
<Link Source="25003:[15100..15131).6" Target="25003:[15100..15131).5" />
<Link Source="25003:[15100..15131).6" Target="25003:[14882..14907).9" />
<Link Source="25003:[15100..15131).6" Target="25003:[14921..15244).8" />
<Link Source="25003:[15149..15164).7" Target="25003:[14921..15244).8" />
<Link Source="25003:[15149..15164).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15149..15164).9" Target="25003:[15149..15164).7" />
<Link Source="25003:[15149..15164).9" Target="25003:[15100..15131).6" />
<Link Source="25003:[15149..15164).9" Target="25003:[14921..15244).8" />
<Link Source="25003:[15182..15229).11" Target="25003:[22283..22306).3" />
<Link Source="25003:[15182..15229).11" Target="25003:[15930..16520).5" />
<Link Source="25003:[15182..15229).11" Target="25003:[14921..15244).8" />
<Link Source="25003:[15182..15229).15" Target="25003:[14837..14866).5" />
<Link Source="25003:[15182..15229).15" Target="25003:[15182..15229).11" />
<Link Source="25003:[15182..15229).15" Target="25003:[15149..15164).9" />
<Link Source="25003:[15182..15229).15" Target="25003:[14921..15244).8" />
<Link Source="25003:[15260..15767).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[15260..15767).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[15260..15767).8" Target="25003:[15930..16520).5" />
<Link Source="25003:[15260..15767).8" Target="25003:[15260..15767).7" />
<Link Source="25003:[15260..15767).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[15320..15717).25" Target="25003:[15260..15767).8" />
<Link Source="25003:[15632..15650).7" Target="25003:[15320..15717).25" />
<Link Source="25003:[15632..15650).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15632..15650).9" Target="25003:[15632..15650).7" />
<Link Source="25003:[15632..15650).9" Target="25003:[15182..15229).15" />
<Link Source="25003:[15632..15650).9" Target="25003:[15320..15717).25" />
<Link Source="25003:[15672..15698).5" Target="25003:[22283..22306).3" />
<Link Source="25003:[15672..15698).5" Target="25003:[15930..16520).5" />
<Link Source="25003:[15672..15698).5" Target="25003:[15320..15717).25" />
<Link Source="25003:[15672..15698).6" Target="25003:[14837..14866).5" />
<Link Source="25003:[15672..15698).6" Target="25003:[15672..15698).5" />
<Link Source="25003:[15672..15698).6" Target="25003:[15632..15650).9" />
<Link Source="25003:[15672..15698).6" Target="25003:[15320..15717).25" />
<Link Source="25003:[15737..15752).7" Target="25003:[15260..15767).8" />
<Link Source="25003:[15737..15752).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15737..15752).9" Target="25003:[15737..15752).7" />
<Link Source="25003:[15737..15752).9" Target="25003:[15672..15698).6" />
<Link Source="25003:[15737..15752).9" Target="25003:[15260..15767).8" />
<Link Source="25003:[15783..15883).3" Target="25003:[22283..22306).3" />
<Link Source="25003:[15783..15883).3" Target="25003:[15930..16520).5" />
<Link Source="25003:[15783..15883).3" Target="25003:[20867..20921).1" />
<Link Source="25003:[15899..15914).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[15899..15914).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15899..15914).9" Target="25003:[15899..15914).7" />
<Link Source="25003:[15899..15914).9" Target="25003:[15737..15752).9" />
<Link Source="25003:[15899..15914).9" Target="25003:[20867..20921).1" />
<Link Source="25003:[15930..16520).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[15930..16520).8" Target="25003:[15930..16520).5" />
<Link Source="25003:[15930..16520).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[15986..16015).7" Target="25003:[15930..16520).8" />
<Link Source="25003:[15986..16015).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[15986..16015).9" Target="25003:[15986..16015).7" />
<Link Source="25003:[15986..16015).9" Target="25003:[15899..15914).9" />
<Link Source="25003:[15986..16015).9" Target="25003:[15930..16520).8" />
<Link Source="25003:[16202..16218).13" Target="25003:[15930..16520).8" />
<Link Source="25003:[16202..16218).15" Target="25003:[14837..14866).5" />
<Link Source="25003:[16202..16218).15" Target="25003:[16202..16218).13" />
<Link Source="25003:[16202..16218).15" Target="25003:[15986..16015).9" />
<Link Source="25003:[16202..16218).15" Target="25003:[15930..16520).8" />
<Link Source="25003:[16240..16275).9" Target="25003:[15930..16520).8" />
<Link Source="25003:[16240..16275).10" Target="25003:[14837..14866).5" />
<Link Source="25003:[16240..16275).10" Target="25003:[16240..16275).9" />
<Link Source="25003:[16240..16275).10" Target="25003:[16202..16218).15" />
<Link Source="25003:[16240..16275).10" Target="25003:[15930..16520).8" />
<Link Source="25003:[16297..16313).13" Target="25003:[15930..16520).8" />
<Link Source="25003:[16297..16313).15" Target="25003:[14837..14866).5" />
<Link Source="25003:[16297..16313).15" Target="25003:[16297..16313).13" />
<Link Source="25003:[16297..16313).15" Target="25003:[16240..16275).10" />
<Link Source="25003:[16297..16313).15" Target="25003:[15930..16520).8" />
<Link Source="25003:[16335..16453).17" Target="25003:[15930..16520).8" />
<Link Source="25003:[16414..16430).7" Target="25003:[16335..16453).17" />
<Link Source="25003:[16414..16430).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16414..16430).9" Target="25003:[16414..16430).7" />
<Link Source="25003:[16414..16430).9" Target="25003:[16297..16313).15" />
<Link Source="25003:[16414..16430).9" Target="25003:[16335..16453).17" />
<Link Source="25003:[16490..16505).7" Target="25003:[15930..16520).8" />
<Link Source="25003:[16490..16505).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16490..16505).9" Target="25003:[16490..16505).7" />
<Link Source="25003:[16490..16505).9" Target="25003:[16414..16430).9" />
<Link Source="25003:[16490..16505).9" Target="25003:[15930..16520).8" />
<Link Source="25003:[16536..16829).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[16536..16829).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[16536..16829).8" Target="25003:[15930..16520).8" />
<Link Source="25003:[16536..16829).8" Target="25003:[16536..16829).7" />
<Link Source="25003:[16536..16829).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[16596..16624).7" Target="25003:[16536..16829).8" />
<Link Source="25003:[16596..16624).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16596..16624).9" Target="25003:[16596..16624).7" />
<Link Source="25003:[16596..16624).9" Target="25003:[16490..16505).9" />
<Link Source="25003:[16596..16624).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16642..16683).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16642..16683).12" Target="25003:[14837..14866).5" />
<Link Source="25003:[16642..16683).12" Target="25003:[16642..16683).9" />
<Link Source="25003:[16642..16683).12" Target="25003:[16596..16624).9" />
<Link Source="25003:[16642..16683).12" Target="25003:[16536..16829).8" />
<Link Source="25003:[16701..16717).7" Target="25003:[16536..16829).8" />
<Link Source="25003:[16701..16717).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16701..16717).9" Target="25003:[16701..16717).7" />
<Link Source="25003:[16701..16717).9" Target="25003:[16642..16683).12" />
<Link Source="25003:[16701..16717).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16735..16781).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16735..16781).12" Target="25003:[14837..14866).5" />
<Link Source="25003:[16735..16781).12" Target="25003:[16735..16781).9" />
<Link Source="25003:[16735..16781).12" Target="25003:[16701..16717).9" />
<Link Source="25003:[16735..16781).12" Target="25003:[16536..16829).8" />
<Link Source="25003:[16799..16814).7" Target="25003:[16536..16829).8" />
<Link Source="25003:[16799..16814).9" Target="25003:[14837..14866).5" />
<Link Source="25003:[16799..16814).9" Target="25003:[16799..16814).7" />
<Link Source="25003:[16799..16814).9" Target="25003:[16735..16781).12" />
<Link Source="25003:[16799..16814).9" Target="25003:[16536..16829).8" />
<Link Source="25003:[16845..16954).3" Target="25003:[22283..22306).3" />
<Link Source="25003:[16845..16954).3" Target="25003:[15930..16520).8" />
<Link Source="25003:[16845..16954).3" Target="25003:[20867..20921).1" />
<Link Source="25003:[16970..17144).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[16970..17144).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[16970..17144).8" Target="25003:[15930..16520).8" />
<Link Source="25003:[16970..17144).8" Target="25003:[16970..17144).7" />
<Link Source="25003:[16970..17144).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[17160..17340).7" Target="25003:[20867..20921).1" />
<Link Source="25003:[17160..17340).8" Target="25003:[22283..22306).3" />
<Link Source="25003:[17160..17340).8" Target="25003:[15930..16520).8" />
<Link Source="25003:[17160..17340).8" Target="25003:[17160..17340).7" />
<Link Source="25003:[17160..17340).8" Target="25003:[20867..20921).1" />
<Link Source="25003:[17356..17482).9" Target="25003:[20867..20921).1" />
<Link Source="25003:[17356..17482).10" Target="25003:[22283..22306).3" />
<Link Source="25003:[17356..17482).10" Target="25003:[15930..16520).8" />
<Link Source="25003:[17356..17482).10" Target="25003:[17356..17482).9" />
<Link Source="25003:[17356..17482).10" Target="25003:[20867..20921).1" />
<Link Source="25003:[17498..17519).5" Target="25003:[14837..14866).5" />
<Link Source="25003:[17498..17519).5" Target="25003:[16799..16814).9" />
<Link Source="25003:[17498..17519).5" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).25" Target="25003:[17498..17519).5" />
<Link Source="25003:[22349..22404).25" Target="25003:[20867..20921).1" />
<Link Source="25003:[22349..22404).26" Target="25003:[22349..22404).22" />
<Link Source="25003:[22349..22404).26" Target="25003:[22349..22404).25" />
<Link Source="25003:[22349..22404).26" Target="25003:[20867..20921).1" />
<Link Source="25003:[20852..20923).5" Target="25003:[19153..19205).1" />
<Link Source="25003:[20852..20923).5" Target="25003:[22349..22404).26" />
<Link Source="25003:[20852..20923).5" Target="25003:[23732..23786).2" />
<Link Source="25003:[20952..21034).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[23732..23786).2" />
<Link Source="25003:[20952..21034).2" Target="25003:[20952..21034).1" />
<Link Source="25003:[20952..21034).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[20995..21019).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[20995..21019).1" Target="25003:[20764..20834).5" />
<Link Source="25003:[20995..21019).1" Target="25003:[20952..21034).2" />
<Link Source="25003:[21050..21081).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[21050..21081).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[20995..21019).1" />
<Link Source="25003:[21050..21081).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21095..21192).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).2" Target="25003:[19153..19205).1" />
<Link Source="25003:[21095..21192).2" Target="25002:[4126..4179).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3129..3133).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3121..3141).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3135..3139).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3121..3141).1" />
<Link Source="25012:[3102..3141).1" Target="25012:[3121..3141).1" />
<Link Source="25003:[21095..21192).3" Target="EXTERNAL" />
<Link Source="25003:[21095..21192).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[21113..21190).1" Target="25002:[4126..4179).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21095..21192).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2498..2519).1" Target="25003:[21095..21192).2" />
<Link Source="25012:[2498..2519).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2521..2537).1" Target="25003:[21095..21192).3" />
<Link Source="25012:[2521..2537).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2539..2575).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2539..2575).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2577..2608).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2577..2608).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2539..2575).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2634..2703).1" />
<Link Source="25012:[2634..2703).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2644..2662).1" Target="25012:[2634..2703).2" />
<Link Source="25012:[2644..2662).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1074..1101).1" Target="EXTERNAL" />
<Link Source="25012:[1194..1223).1" Target="25012:[1074..1101).1" />
<Link Source="25012:[1194..1223).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1183..1293).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[4217..4231).1" Target="25012:[4230..4231).1" />
<Link Source="25012:[4264..4278).1" Target="25012:[4277..4278).1" />
<Link Source="25012:[4311..4325).1" Target="25012:[4324..4325).1" />
<Link Source="25012:[3676..10647).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1194..1223).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1053..1102).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[2717..2783).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2717..2783).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2577..2608).1" />
<Link Source="25012:[2717..2783).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2799..2869).1" Target="25012:[2473..2496).1" />
<Link Source="25012:[2799..2869).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2883..2947).1" Target="25012:[2498..2519).1" />
<Link Source="25012:[2883..2947).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).1" Target="25012:[2521..2537).1" />
<Link Source="25012:[2963..3048).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[2963..3048).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2963..3048).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).4" Target="25012:[2717..2783).3" />
<Link Source="25012:[2963..3048).4" Target="25003:[21113..21190).1" />
<Link Source="25012:[2993..3046).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1574..1592).1" Target="25012:[2963..3048).2" />
<Link Source="25012:[1574..1592).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1594..1612).1" Target="25012:[2963..3048).3" />
<Link Source="25012:[1594..1612).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1614..1638).1" Target="25012:[2963..3048).4" />
<Link Source="25012:[1614..1638).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2644..2662).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2883..2947).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2993..3046).1" />
<Link Source="25012:[1693..1757).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1672..2400).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5415..5426).1" Target="25012:[1672..2400).2" />
<Link Source="25012:[5415..5426).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5428..5447).1" Target="25012:[1672..2400).3" />
<Link Source="25012:[5428..5447).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5449..5460).1" Target="25012:[1672..2400).4" />
<Link Source="25012:[5449..5460).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1533..2415).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[5394..5413).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[5415..5426).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[5428..5447).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[5449..5460).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5505..5562).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5494..5563).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9423..9434).1" Target="25012:[5494..5563).2" />
<Link Source="25012:[9423..9434).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9436..9455).1" Target="25012:[5494..5563).3" />
<Link Source="25012:[9436..9455).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9457..9468).1" Target="25012:[5494..5563).4" />
<Link Source="25012:[9457..9468).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5357..6686).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9423..9434).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9502..9523).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9457..9468).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9541..9562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9740..9764).1" Target="25012:[9502..9523).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[9541..9562).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9796).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9784..9796).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9814..9943).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[9889..9924).1" Target="25012:[9814..9943).3" />
<Link Source="25012:[9889..9924).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9889..9924).1" />
<Link Source="25012:[9889..9924).5" Target="25012:[9814..9943).3" />
<Link Source="25012:[9889..9896).1" Target="25012:[9889..9924).5" />
<Link Source="25012:[9889..9896).1" Target="25012:[9814..9943).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9889..9924).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9889..9896).1" Target="25012:[9814..9943).3" />
<Link Source="25012:[9963..10092).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9963..10092).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10038..10073).1" Target="25012:[9963..10092).3" />
<Link Source="25012:[10038..10073).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9889..9896).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[10038..10073).1" />
<Link Source="25012:[10038..10073).5" Target="25012:[9963..10092).3" />
<Link Source="25012:[10038..10045).1" Target="25012:[10038..10073).5" />
<Link Source="25012:[10038..10045).1" Target="25012:[10038..10073).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9963..10092).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10038..10045).1" Target="25012:[9963..10092).3" />
<Link Source="25012:[10112..10592).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10187..10573).1" Target="25012:[10112..10592).3" />
<Link Source="25012:[10187..10573).3" Target="25012:[10187..10573).1" />
<Link Source="25012:[10187..10573).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[10187..10573).3" Target="25012:[10112..10592).3" />
<Link Source="25012:[10270..10363).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).5" Target="25012:[9740..9764).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[9784..9791).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[9889..9896).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10038..10045).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10270..10363).1" />
<Link Source="25012:[10270..10363).5" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).6" Target="25012:[9402..9421).1" />
<Link Source="25012:[10270..10363).6" Target="25012:[10187..10573).3" />
<Link Source="25012:[10270..10363).10" Target="25012:[9436..9455).1" />
<Link Source="25012:[10270..10363).10" Target="25012:[10187..10573).3" />
<Link Source="25012:[10298..10344).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[1344..1362).1" Target="25012:[10270..10363).6" />
<Link Source="25012:[1344..1362).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1364..1374).1" Target="25012:[10270..10363).1" />
<Link Source="25012:[1364..1374).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1376..1394).1" Target="25012:[10270..10363).10" />
<Link Source="25012:[1376..1394).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1396..1406).1" Target="25012:[10270..10363).1" />
<Link Source="25012:[1396..1406).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1309..1517).1" Target="25012:[9369..10636).1" />
<Link Source="25012:[1309..1517).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[1344..1362).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[2799..2869).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[1364..1374).1" />
<Link Source="25012:[1440..1502).1" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[1376..1394).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[1396..1406).1" />
<Link Source="25012:[1440..1502).3" Target="25012:[10298..10344).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[1309..1517).1" />
<Link Source="25012:[1440..1502).5" Target="EXTERNAL" />
<Link Source="25012:[1440..1502).5" Target="25012:[1440..1502).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[1440..1502).3" />
<Link Source="25012:[1440..1502).5" Target="25012:[2799..2869).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[2883..2947).1" />
<Link Source="25012:[1440..1502).5" Target="25012:[10298..10344).1" />
<Link Source="25012:[10270..10363).17" Target="25012:[10270..10363).5" />
<Link Source="25012:[10270..10363).17" Target="25012:[1440..1502).5" />
<Link Source="25012:[10270..10363).17" Target="25012:[10187..10573).3" />
<Link Source="25012:[10389..10423).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10389..10423).3" Target="25012:[9740..9764).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[9784..9791).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[9889..9896).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10038..10045).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10389..10423).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10187..10573).1" />
<Link Source="25012:[10389..10423).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10449..10483).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10449..10483).3" Target="25012:[9740..9764).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[9784..9791).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[9889..9896).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10038..10045).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10449..10483).1" />
<Link Source="25012:[10449..10483).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).1" Target="25012:[10270..10363).17" />
<Link Source="25012:[10509..10550).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).2" Target="25012:[10389..10423).3" />
<Link Source="25012:[10509..10550).2" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).3" Target="25012:[10509..10550).1" />
<Link Source="25012:[10509..10550).3" Target="25012:[10509..10550).2" />
<Link Source="25012:[10509..10550).3" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).5" Target="25012:[10449..10483).3" />
<Link Source="25012:[10509..10550).5" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10550).6" Target="25012:[10509..10550).3" />
<Link Source="25012:[10509..10550).6" Target="25012:[10509..10550).5" />
<Link Source="25012:[10509..10550).6" Target="25012:[10187..10573).3" />
<Link Source="25012:[10509..10516).1" Target="25012:[10509..10550).6" />
<Link Source="25012:[10509..10516).1" Target="25012:[10112..10592).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[10187..10573).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10509..10516).1" Target="25012:[10187..10573).3" />
<Link Source="25012:[10612..10621).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10612..10621).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[5415..5426).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[5449..5460).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5581..5597).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[5615..5631).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).5" Target="25012:[5651..6341).2" />
<Link Source="25012:[5651..6341).5" Target="25012:[5651..6341).4" />
<Link Source="25012:[5651..6341).5" Target="25012:[1693..1757).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10612..10621).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9784..9791).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[9889..9896).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10038..10045).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[10509..10516).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[5716..6322).1" Target="25012:[5651..6341).5" />
<Link Source="25012:[5716..6322).2" Target="25012:[5651..6341).5" />
<Link Source="25012:[5716..6322).4" Target="25012:[10612..10621).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9740..9764).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9784..9791).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[9889..9896).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[10038..10045).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[10509..10516).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[5716..6322).2" />
<Link Source="25012:[5716..6322).4" Target="25012:[5615..5631).1" />
<Link Source="25012:[5716..6322).4" Target="25012:[5651..6341).5" />
<Link Source="25012:[5931..6322).1" Target="25012:[10612..10621).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9784..9791).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[9889..9896).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[10038..10045).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[10509..10516).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[5931..6322).1" Target="25012:[5716..6322).4" />
<Link Source="25012:[5931..6322).2" Target="25012:[5716..6322).4" />
<Link Source="25012:[6194..6198).1" Target="25012:[5581..5597).1" />
<Link Source="25012:[6194..6198).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6224..6228).1" Target="25012:[5615..5631).1" />
<Link Source="25012:[6224..6228).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).2" Target="EXTERNAL" />
<Link Source="25012:[6254..6299).2" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).3" Target="25012:[6194..6198).1" />
<Link Source="25012:[6254..6299).3" Target="25012:[5931..6322).2" />
<Link Source="25012:[6254..6299).4" Target="25012:[6224..6228).1" />
<Link Source="25012:[6254..6299).4" Target="25012:[5931..6322).2" />
<Link Source="25012:[6267..6298).1" Target="25012:[5931..6322).2" />
<Link Source="25012:[3967..3980).1" Target="25012:[6254..6299).2" />
<Link Source="25012:[3967..3980).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3982..3992).1" Target="25012:[6254..6299).3" />
<Link Source="25012:[3982..3992).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3994..4004).1" Target="25012:[6254..6299).4" />
<Link Source="25012:[3994..4004).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[3953..4168).1" Target="25012:[6254..6299).1" />
<Link Source="25012:[3953..4168).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[3967..3980).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4046..4055).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[3982..3992).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4085..4096).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[3994..4004).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[3953..4168).1" />
<Link Source="25012:[4128..4139).1" Target="25012:[6267..6298).1" />
<Link Source="25012:[6361..6506).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[6194..6198).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[6361..6506).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[6224..6228).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[6526..6671).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[6254..6299).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4046..4055).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4085..4096).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[4128..4139).1" />
<Link Source="25012:[1672..2400).7" Target="25012:[2993..3046).1" />
<Link Source="25012:[1809..2381).1" Target="25012:[1672..2400).7" />
<Link Source="25012:[2267..2322).1" Target="25012:[1809..2381).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2267..2322).3" Target="25012:[1440..1502).5" />
<Link Source="25012:[2267..2322).3" Target="25012:[1672..2400).7" />
<Link Source="25012:[2267..2322).3" Target="25012:[1809..2381).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[1614..1638).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[2267..2322).3" />
<Link Source="25012:[2267..2322).5" Target="25012:[2717..2783).1" />
<Link Source="25012:[2267..2322).5" Target="25012:[1809..2381).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2963..3048).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2267..2322).1" />
<Link Source="25012:[2963..3048).7" Target="25003:[21113..21190).1" />
<Link Source="25003:[21095..21192).10" Target="25003:[18506..18543).1" />
<Link Source="25003:[21095..21192).10" Target="25012:[2963..3048).7" />
<Link Source="25003:[21095..21192).10" Target="25003:[21050..21081).3" />
<Link Source="25003:[21095..21192).10" Target="25002:[4126..4179).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[19153..19205).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[20852..20923).5" />
<Link Source="25003:[21208..21226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[22763..22783).1" />
<Link Source="25003:[21240..21260).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[21095..21192).10" />
<Link Source="25003:[21276..21305).1" Target="25002:[4126..4179).1" />
<Link Source="25002:[2401..2451).3" Target="25002:[4446..4474).1" />
<Link Source="25002:[4446..4475).3" Target="28001:[46830..47156).2" />
<Link Source="25002:[4489..4523).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4489..4523).1" Target="28001:[46830..47156).2" />
<Link Source="25002:[4489..4523).2" Target="10319:[105368..106708).6" />
<Link Source="25002:[4489..4523).2" Target="28001:[46830..47156).2" />
<Link Source="25002:[4489..4522).1" Target="28001:[46830..47156).2" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4523).1" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4523).2" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4653..4691).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[5097..5821).1" Target="25002:[4750..5836).1" />
<Link Source="25002:[5097..5821).1" Target="10319:[105368..106708).6" />
<Link Source="25002:[5097..5821).1" Target="25003:[15930..16520).8" />
<Link Source="25002:[5097..5821).2" Target="25002:[4637..4651).1" />
<Link Source="25002:[5097..5821).2" Target="25002:[5097..5821).1" />
<Link Source="25002:[5097..5821).2" Target="25003:[15930..16520).8" />
<Link Source="25002:[5097..5821).2" Target="25002:[4750..5836).1" />
<Link Source="25002:[5675..5741).1" Target="25002:[4750..5836).1" />
<Link Source="25002:[5675..5741).1" Target="25002:[5097..5821).2" />
<Link Source="25002:[5763..5802).1" Target="25002:[5675..5741).1" />
<Link Source="25002:[5763..5802).1" Target="25002:[5097..5821).2" />
<Link Source="25002:[4489..4523).3" Target="28001:[46830..47156).2" />
<Link Source="25002:[4539..4548).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4539..4548).1" Target="28001:[46830..47156).2" />
</Links>
</DirectedGraph>
