digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 672327"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 672328"];
3 [label="param BindingTests(this) 672329"];
4 [label="'C' 672330"];
5 [label="DefaultTypeName = 'C' 672331"];
6 [label="'M' 672332"];
7 [label="DefaultMethodName = 'M' 672333"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 672334"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 672335"];
10 [label="param CompilingTestBase(this) 672336"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 672337"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 672338"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 672339"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 672340"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 672341"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 672342"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 672343"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 672344"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 672345"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 672346"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 672347"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 672348"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 672349"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 672350"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 672351"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 672352"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 672353"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 672354"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 672355"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 672356"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 672357"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 672358"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 672359"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 672360"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 672361"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 672362"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 672363"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 672364"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 672365"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 672366"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 672367"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 672368"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 672369"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 672370"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 672371"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 672372"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 672373"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 672374"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 672375"];
50 [label="LazyThreadSafetyMode.PublicationOnly 672376"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 672377"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 672378"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 672379"];
54 [label="LazyThreadSafetyMode.PublicationOnly 672380"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 672381"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 672382"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 672383"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 672384"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 672385"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 672386"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 672387"];
62 [label="LazyThreadSafetyMode.PublicationOnly 672388"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 672389"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 672390"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 672391"];
66 [label="LazyThreadSafetyMode.PublicationOnly 672392"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 672393"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 672394"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 672395"];
70 [label="LazyThreadSafetyMode.PublicationOnly 672396"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 672397"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 672398"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 672399"];
74 [label="LazyThreadSafetyMode.PublicationOnly 672400"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672401"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672402"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 672403"];
78 [label="LazyThreadSafetyMode.PublicationOnly 672404"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672405"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672406"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 672407"];
82 [label="LazyThreadSafetyMode.PublicationOnly 672408"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672409"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672410"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 672411"];
86 [label="LazyThreadSafetyMode.PublicationOnly 672412"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672413"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672414"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 672415"];
90 [label="LazyThreadSafetyMode.PublicationOnly 672416"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672417"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672418"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 672419"];
94 [label="LazyThreadSafetyMode.PublicationOnly 672420"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672421"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672422"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 672423"];
98 [label="LazyThreadSafetyMode.PublicationOnly 672424"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672425"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672426"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 672427"];
102 [label="LazyThreadSafetyMode.PublicationOnly 672428"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 672429"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 672430"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 672431"];
106 [label="LazyThreadSafetyMode.PublicationOnly 672432"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 672433"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 672434"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 672435"];
110 [label="LazyThreadSafetyMode.PublicationOnly 672436"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672437"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672438"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 672439"];
114 [label="LazyThreadSafetyMode.PublicationOnly 672440"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672441"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672442"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 672443"];
118 [label="LazyThreadSafetyMode.PublicationOnly 672444"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672445"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672446"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 672447"];
122 [label="LazyThreadSafetyMode.PublicationOnly 672448"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672449"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672450"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 672451"];
126 [label="LazyThreadSafetyMode.PublicationOnly 672452"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 672453"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 672454"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 672455"];
130 [label="LazyThreadSafetyMode.PublicationOnly 672456"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672457"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672458"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 672459"];
134 [label="LazyThreadSafetyMode.PublicationOnly 672460"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672461"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672462"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 672463"];
138 [label="LazyThreadSafetyMode.PublicationOnly 672464"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672465"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672466"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 672467"];
142 [label="LazyThreadSafetyMode.PublicationOnly 672468"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672469"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672470"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 672471"];
146 [label="LazyThreadSafetyMode.PublicationOnly 672472"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672473"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672474"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 672475"];
150 [label="LazyThreadSafetyMode.PublicationOnly 672476"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672477"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672478"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 672479"];
154 [label="LazyThreadSafetyMode.PublicationOnly 672480"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672481"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672482"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 672483"];
158 [label="LazyThreadSafetyMode.PublicationOnly 672484"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672485"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672486"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 672487"];
162 [label="LazyThreadSafetyMode.PublicationOnly 672488"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672489"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672490"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 672491"];
166 [label="LazyThreadSafetyMode.PublicationOnly 672492"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672493"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672494"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 672495"];
170 [label="LazyThreadSafetyMode.PublicationOnly 672496"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672497"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672498"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 672499"];
174 [label="LazyThreadSafetyMode.PublicationOnly 672500"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672501"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672502"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 672503"];
178 [label="LazyThreadSafetyMode.PublicationOnly 672504"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672505"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 672506"];
181 [label="@'R:\\Invalid.dll' 672507"];
182 [label="fullPath: @'R:\\Invalid.dll' 672508"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 672509"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 672510"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 672511"];
186 [label="MscorlibRef_v4_0_30316_17626 672512"];
187 [label="Net451.mscorlib 672513"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 672514"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 672515"];
190 [label="'/*<bind>*/' 672516"];
191 [label="StartString = '/*<bind>*/' 672517"];
192 [label="'/*</bind>*/' 672518"];
193 [label="EndString = '/*</bind>*/' 672519"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 672520"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 672521"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 672522"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 672523"];
198 [label="param CSharpTestBase(this) 672524"];
199 [label="param CommonTestBase(this) 672525"];
200 [label="param TestBase(this) 672526"];
201 [label="_temp 672527"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 672528"];
203 [label="param DelegatesFromOverloads(this) 672529"];
204 [label="var source =\n@'using System;\nclass C\n{\n    static void A(Action<object> a) { }\n    static void M(C c)\n    {\n        A(C.F);\n        A(c.G);\n        Action<object> a;\n        a = C.F;\n        a = c.G;\n    }\n    static void F() { }\n    static void F(object o) { }\n    void G(object o) { }\n    void G(object x, object y) { }\n}'; 672530"];
205 [label="CreateCompilation(source).VerifyDiagnostics(); 672531"];
206 [label="source 672532"];
207 [label="param operator(string source) 672533"];
208 [label="source 672534"];
209 [label="new CSharpTestSource(source) 672535"];
210 [label="param CSharpTestSource(object value) 672536"];
211 [label="param CSharpTestSource(this) 672537"];
212 [label="Value 672538"];
213 [label="CreateCompilation(source).VerifyDiagnostics(); 672539"];
214 [label="CreateCompilation(source).VerifyDiagnostics(); 672540"];
215 [label="CreateCompilation(source) 672541"];
216 [label="param CreateCompilation(CSharpTestSource source) 672542"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 672543"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 672544"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 672545"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 672546"];
221 [label="param CreateCompilation(string assemblyName = '') 672547"];
222 [label="param CreateCompilation(string sourceFileName = '') 672548"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 672549"];
224 [label="source 672550"];
225 [label="targetFramework 672551"];
226 [label="references 672552"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 672553"];
228 [label="param GetReferences(TargetFramework tf) 672554"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 672555"];
230 [label="var references = GetReferences(tf); 672556"];
231 [label="GetReferences(tf) 672557"];
232 [label="param GetReferences(TargetFramework targetFramework) 672558"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 672559"];
234 [label="StandardReferences 672560"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 672561"];
236 [label="Mscorlib46ExtendedReferences 672562"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 672563"];
238 [label="TestBase.ValueTupleRef 672564"];
239 [label="TestReferences.NetFx.ValueTuple.tuplelib 672565"];
240 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 672566"];
241 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 672567"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 672568"];
243 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 672569"];
244 [label="return references; 672570"];
245 [label="options 672571"];
246 [label="parseOptions 672572"];
247 [label="assemblyName 672573"];
248 [label="sourceFileName 672574"];
249 [label="skipUsesIsNullable 672575"];
250 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 672576"];
251 [label="param CreateEmptyCompilation(CSharpTestSource source) 672577"];
252 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 672578"];
253 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 672579"];
254 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 672580"];
255 [label="param CreateEmptyCompilation(string assemblyName = '') 672581"];
256 [label="param CreateEmptyCompilation(string sourceFileName = '') 672582"];
257 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 672583"];
258 [label="source 672584"];
259 [label="references 672585"];
260 [label="options 672586"];
261 [label="parseOptions 672587"];
262 [label="assemblyName 672588"];
263 [label="sourceFileName 672589"];
264 [label="skipUsesIsNullable 672590"];
265 [label="null 672591"];
266 [label="experimentalFeature: null 672592"];
267 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 672593"];
268 [label="param CreateCompilationCore(CSharpTestSource source) 672594"];
269 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 672595"];
270 [label="param CreateCompilationCore(CSharpCompilationOptions options) 672596"];
271 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 672597"];
272 [label="param CreateCompilationCore(string assemblyName) 672598"];
273 [label="param CreateCompilationCore(string sourceFileName) 672599"];
274 [label="param CreateCompilationCore(bool skipUsesIsNullable) 672600"];
275 [label="param CreateCompilationCore(MessageID? experimentalFeature) 672601"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 672602"];
277 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 672603"];
278 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 672604"];
279 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 672605"];
280 [label="param GetSyntaxTrees(string sourceFileName = '') 672606"];
281 [label="param GetSyntaxTrees(this) 672607"];
282 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 672608"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 672609"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 672610"];
285 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 672611"];
286 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 672612"];
287 [label="param Parse(string text) 672613"];
288 [label="param Parse(string filename = '') 672614"];
289 [label="param Parse(CSharpParseOptions options = null) 672615"];
290 [label="param Parse(Encoding encoding = null) 672616"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 672617"];
292 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 672618"];
293 [label="kind: SourceCodeKind.Regular 672619"];
294 [label="documentationMode: DocumentationMode.Parse 672620"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 672621"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 672622"];
297 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 672623"];
298 [label="SourceCodeKind.Script 672624"];
299 [label="Regular.WithKind(SourceCodeKind.Script) 672625"];
300 [label="Script = Regular.WithKind(SourceCodeKind.Script) 672626"];
301 [label="LanguageVersion.CSharp6 672627"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 672628"];
303 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 672629"];
304 [label="LanguageVersion.CSharp7 672630"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 672631"];
306 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 672632"];
307 [label="LanguageVersion.CSharp7_1 672633"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 672634"];
309 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 672635"];
310 [label="LanguageVersion.CSharp7_2 672636"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 672637"];
312 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 672638"];
313 [label="LanguageVersion.CSharp7_3 672639"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 672640"];
315 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 672641"];
316 [label="LanguageVersion.Default 672642"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 672643"];
318 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 672644"];
319 [label="LanguageVersion.Preview 672645"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 672646"];
321 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 672647"];
322 [label="LanguageVersion.CSharp8 672648"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 672649"];
324 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 672650"];
325 [label="LanguageVersion.CSharp9 672651"];
326 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 672652"];
327 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 672653"];
328 [label="DocumentationMode.Diagnose 672654"];
329 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 672655"];
330 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 672656"];
331 [label="Regular 672657"];
332 [label="'UseLegacyStrongNameProvider' 672658"];
333 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 672659"];
334 [label="param WithFeature(this CSharpParseOptions options) 672660"];
335 [label="param WithFeature(string feature) 672661"];
336 [label="param WithFeature(string value = 'true') 672662"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 672663"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 672664"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 672665"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 672666"];
341 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 672667"];
342 [label="new[] { new KeyValuePair<string, string>(feature, value) } 672668"];
343 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 672669"];
344 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 672670"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 672671"];
346 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 672672"];
347 [label="1 672673"];
348 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 672674"];
349 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 672675"];
350 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 672676"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 672677"];
352 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 672678"];
353 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 672679"];
354 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 672680"];
355 [label="LanguageVersion.CSharp8 672681"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 672682"];
357 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 672683"];
358 [label="RegularWithExtendedPartialMethods = RegularPreview 672684"];
359 [label="new SmallDictionary<string, string> { } 672685"];
360 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 672686"];
361 [label="kind: SourceCodeKind.Regular 672687"];
362 [label="documentationMode: DocumentationMode.None 672688"];
363 [label="languageVersion: LanguageVersion.Preview 672689"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 672690"];
365 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 672691"];
366 [label="s_experimentalFeatures 672692"];
367 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 672693"];
368 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 672694"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 672695"];
370 [label="'testV7SwitchBinder' 672696"];
371 [label="'true' 672697"];
372 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 672698"];
373 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 672699"];
374 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 672700"];
375 [label="RegularWithoutRecursivePatterns = Regular7_3 672701"];
376 [label="RegularWithRecursivePatterns = Regular8 672702"];
377 [label="RegularWithoutPatternCombinators = Regular8 672703"];
378 [label="RegularWithPatternCombinators = RegularPreview 672704"];
379 [label="OutputKind.DynamicallyLinkedLibrary 672705"];
380 [label="OptimizationLevel.Release 672706"];
381 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 672707"];
382 [label="param CreateTestOptions(OutputKind outputKind) 672708"];
383 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672709"];
384 [label="param CreateTestOptions(bool allowUnsafe = false) 672710"];
385 [label="outputKind 672711"];
386 [label="optimizationLevel: optimizationLevel 672712"];
387 [label="warningLevel: Diagnostic.MaxWarningLevel 672713"];
388 [label="allowUnsafe: allowUnsafe 672714"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672715"];
390 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672716"];
391 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 672717"];
392 [label="OutputKind.ConsoleApplication 672718"];
393 [label="OptimizationLevel.Release 672719"];
394 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 672720"];
395 [label="param CreateTestOptions(OutputKind outputKind) 672721"];
396 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672722"];
397 [label="param CreateTestOptions(bool allowUnsafe = false) 672723"];
398 [label="outputKind 672724"];
399 [label="optimizationLevel: optimizationLevel 672725"];
400 [label="warningLevel: Diagnostic.MaxWarningLevel 672726"];
401 [label="allowUnsafe: allowUnsafe 672727"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672728"];
403 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672729"];
404 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 672730"];
405 [label="true 672731"];
406 [label="ReleaseDll.WithDebugPlusMode(true) 672732"];
407 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 672733"];
408 [label="true 672734"];
409 [label="ReleaseExe.WithDebugPlusMode(true) 672735"];
410 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 672736"];
411 [label="OutputKind.DynamicallyLinkedLibrary 672737"];
412 [label="OptimizationLevel.Debug 672738"];
413 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 672739"];
414 [label="param CreateTestOptions(OutputKind outputKind) 672740"];
415 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672741"];
416 [label="param CreateTestOptions(bool allowUnsafe = false) 672742"];
417 [label="outputKind 672743"];
418 [label="optimizationLevel: optimizationLevel 672744"];
419 [label="warningLevel: Diagnostic.MaxWarningLevel 672745"];
420 [label="allowUnsafe: allowUnsafe 672746"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672747"];
422 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672748"];
423 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 672749"];
424 [label="OutputKind.ConsoleApplication 672750"];
425 [label="OptimizationLevel.Debug 672751"];
426 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 672752"];
427 [label="param CreateTestOptions(OutputKind outputKind) 672753"];
428 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672754"];
429 [label="param CreateTestOptions(bool allowUnsafe = false) 672755"];
430 [label="outputKind 672756"];
431 [label="optimizationLevel: optimizationLevel 672757"];
432 [label="warningLevel: Diagnostic.MaxWarningLevel 672758"];
433 [label="allowUnsafe: allowUnsafe 672759"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672760"];
435 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672761"];
436 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 672762"];
437 [label="OutputKind.WindowsRuntimeMetadata 672763"];
438 [label="OptimizationLevel.Release 672764"];
439 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 672765"];
440 [label="param CreateTestOptions(OutputKind outputKind) 672766"];
441 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672767"];
442 [label="param CreateTestOptions(bool allowUnsafe = false) 672768"];
443 [label="outputKind 672769"];
444 [label="optimizationLevel: optimizationLevel 672770"];
445 [label="warningLevel: Diagnostic.MaxWarningLevel 672771"];
446 [label="allowUnsafe: allowUnsafe 672772"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672773"];
448 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672774"];
449 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 672775"];
450 [label="OutputKind.WindowsRuntimeMetadata 672776"];
451 [label="OptimizationLevel.Debug 672777"];
452 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 672778"];
453 [label="param CreateTestOptions(OutputKind outputKind) 672779"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672780"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 672781"];
456 [label="outputKind 672782"];
457 [label="optimizationLevel: optimizationLevel 672783"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 672784"];
459 [label="allowUnsafe: allowUnsafe 672785"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672786"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672787"];
462 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 672788"];
463 [label="OutputKind.NetModule 672789"];
464 [label="OptimizationLevel.Release 672790"];
465 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 672791"];
466 [label="param CreateTestOptions(OutputKind outputKind) 672792"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672793"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 672794"];
469 [label="outputKind 672795"];
470 [label="optimizationLevel: optimizationLevel 672796"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 672797"];
472 [label="allowUnsafe: allowUnsafe 672798"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672799"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672800"];
475 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 672801"];
476 [label="OutputKind.NetModule 672802"];
477 [label="OptimizationLevel.Debug 672803"];
478 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 672804"];
479 [label="param CreateTestOptions(OutputKind outputKind) 672805"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 672806"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 672807"];
482 [label="outputKind 672808"];
483 [label="optimizationLevel: optimizationLevel 672809"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 672810"];
485 [label="allowUnsafe: allowUnsafe 672811"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672812"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 672813"];
488 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 672814"];
489 [label="true 672815"];
490 [label="ReleaseDll.WithAllowUnsafe(true) 672816"];
491 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 672817"];
492 [label="true 672818"];
493 [label="ReleaseExe.WithAllowUnsafe(true) 672819"];
494 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 672820"];
495 [label="true 672821"];
496 [label="DebugDll.WithAllowUnsafe(true) 672822"];
497 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 672823"];
498 [label="true 672824"];
499 [label="DebugExe.WithAllowUnsafe(true) 672825"];
500 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 672826"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 672827"];
502 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672828"];
503 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672829"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 672830"];
505 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672831"];
506 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672832"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 672833"];
508 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672834"];
509 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672835"];
510 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 672836"];
511 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672837"];
512 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 672838"];
513 [label="DebugInformationFormat.Pdb 672839"];
514 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 672840"];
515 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 672841"];
516 [label="options = TestOptions.Regular; 672842"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 672843"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 672844"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 672845"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 672846"];
521 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 672847"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 672848"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 672849"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 672850"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 672851"];
526 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 672852"];
527 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 672853"];
528 [label="param CheckSerializable(SyntaxTree tree) 672854"];
529 [label="var stream = new MemoryStream(); 672855"];
530 [label="var root = tree.GetRoot(); 672856"];
531 [label="var root = tree.GetRoot(); 672857"];
532 [label="root.SerializeTo(stream); 672858"];
533 [label="root.SerializeTo(stream); 672859"];
534 [label="root.SerializeTo(stream); 672860"];
535 [label="stream.Position = 0; 672861"];
536 [label="stream.Position 672862"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 672863"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 672864"];
539 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 672865"];
540 [label="return tree; 672866"];
541 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 672867"];
542 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 672868"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 672869"];
544 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 672870"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 672871"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 672872"];
547 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 672873"];
548 [label="hasTopLevelStatements 672874"];
549 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 672875"];
550 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 672876"];
551 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 672877"];
552 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 672878"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 672879"];
554 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 672880"];
555 [label="param ValidateIOperations(Func<Compilation> createCompilation) 672881"];
556 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 672882"];
557 [label="return; 672883"];
558 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 672884"];
559 [label="var compilation = createCompilationLambda(); 672885"];
560 [label="var compilation = createCompilationLambda(); 672886"];
561 [label="return Guid.NewGuid().ToString('D'); 672887"];
562 [label="var compilation = createCompilationLambda(); 672888"];
563 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 672889"];
564 [label="IsNullableEnabled(compilation) 672890"];
565 [label="param IsNullableEnabled(CSharpCompilation compilation) 672891"];
566 [label="var trees = compilation.SyntaxTrees; 672892"];
567 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 672893"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 672894"];
569 [label="var options = (CSharpParseOptions)trees[0].Options; 672895"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 672896"];
571 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 672897"];
572 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 672898"];
573 [label="return compilation; 672899"];
574 [label="CreateCompilation(source).VerifyDiagnostics() 672900"];
575 [label="param VerifyDiagnostics(this TCompilation c) 672901"];
576 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 672902"];
577 [label="var diagnostics = c.GetDiagnostics(); 672903"];
578 [label="null 672904"];
579 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 672905"];
580 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 672906"];
581 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 672907"];
582 [label="null 672908"];
583 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 672909"];
584 [label="param Imports(CSharpCompilation compilation) 672910"];
585 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 672911"];
586 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 672912"];
587 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 672913"];
588 [label="param Imports(DiagnosticBag diagnostics) 672914"];
589 [label="param Imports(this) 672915"];
590 [label="_compilation 672916"];
591 [label="_diagnostics 672917"];
592 [label="UsingAliases 672918"];
593 [label="Debug.Assert(usingAliases != null); 672919"];
594 [label="Debug.Assert(usingAliases != null); 672920"];
595 [label="Debug.Assert(!usings.IsDefault); 672921"];
596 [label="Debug.Assert(!externs.IsDefault); 672922"];
597 [label="_compilation 672923"];
598 [label="this.UsingAliases 672924"];
599 [label="this.Usings 672925"];
600 [label="_diagnostics 672926"];
601 [label="this.ExternAliases 672927"];
602 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 672928"];
603 [label="var diagnostics = c.GetDiagnostics(); 672929"];
604 [label="param FromGlobalUsings(CSharpCompilation compilation) 672930"];
605 [label="var usings = compilation.Options.Usings; 672931"];
606 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 672932"];
607 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 672933"];
608 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 672934"];
609 [label="return Empty; 672935"];
610 [label="var diagnostics = c.GetDiagnostics(); 672936"];
611 [label="param Complete(CancellationToken cancellationToken) 672937"];
612 [label="param Complete(this) 672938"];
613 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 672939"];
614 [label="cancellationToken.ThrowIfCancellationRequested(); 672940"];
615 [label="var incompletePart = _state.NextIncompletePart; 672941"];
616 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 672942"];
617 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 672943"];
618 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 672944"];
619 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 672945"];
620 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 672946"];
621 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 672947"];
622 [label="Validate() 672948"];
623 [label="param Validate(this) 672949"];
624 [label="if (this == Empty)\n            {\n                return;\n            } 672950"];
625 [label="return; 672951"];
626 [label="Validate(); 672952"];
627 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 672953"];
628 [label="return; 672954"];
629 [label="param Includes(this BinderFlags self) 672955"];
630 [label="param Includes(BinderFlags other) 672956"];
631 [label="return (self & other) == other; 672957"];
632 [label="var diagnostics = c.GetDiagnostics(); 672958"];
633 [label="0 672959"];
634 [label="ExternalScope = 0 672960"];
635 [label="1 672961"];
636 [label="TopLevelScope = 1 672962"];
637 [label="2 672963"];
638 [label="ValueKindInsignificantBits = 2 672964"];
639 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 672965"];
640 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 672966"];
641 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 672967"];
642 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 672968"];
643 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 672969"];
644 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 672970"];
645 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 672971"];
646 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 672972"];
647 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 672973"];
648 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 672974"];
649 [label="10 672975"];
650 [label="MaxParameterListsForErrorRecovery = 10 672976"];
651 [label="'<>h__TransparentIdentifier' 672977"];
652 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 672978"];
653 [label="s => (MethodSymbol)s 672979"];
654 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 672980"];
655 [label="s => (PropertySymbol)s 672981"];
656 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 672982"];
657 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 672983"];
658 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 672984"];
659 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 672985"];
660 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 672986"];
661 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 672987"];
662 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 672988"];
663 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 672989"];
664 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 672990"];
665 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 672991"];
666 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 672992"];
667 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672993"];
668 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672994"];
669 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672995"];
670 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672996"];
671 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672997"];
672 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 672998"];
673 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 672999"];
674 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 673000"];
675 [label="param GetWellKnownTypeMember(WellKnownMember member) 673001"];
676 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 673002"];
677 [label="param GetWellKnownTypeMember(Location location = null) 673003"];
678 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 673004"];
679 [label="param GetWellKnownTypeMember(bool isOptional = false) 673005"];
680 [label="Debug.Assert((syntax != null) ^ (location != null)); 673006"];
681 [label="Debug.Assert((syntax != null) ^ (location != null)); 673007"];
682 [label="Debug.Assert((syntax != null) ^ (location != null)); 673008"];
683 [label="Debug.Assert((syntax != null) ^ (location != null)); 673009"];
684 [label="DiagnosticInfo useSiteDiagnostic; 673010"];
685 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 673011"];
686 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 673012"];
687 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 673013"];
688 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 673014"];
689 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 673015"];
690 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 673016"];
691 [label="param GetWellKnownTypeMember(WellKnownMember member) 673017"];
692 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 673018"];
693 [label="param GetWellKnownTypeMember(bool isOptional = false) 673019"];
694 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 673020"];
695 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 673021"];
696 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 673022"];
697 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673023"];
698 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673024"];
699 [label="Debug.Assert(symbol is object); 673025"];
700 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 673026"];
701 [label="isInternal = false; 673027"];
702 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 673028"];
703 [label="symbol = symbol.ContainingType; 673029"];
704 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 673030"];
705 [label="return true; 673031"];
706 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 673032"];
707 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673033"];
708 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673034"];
709 [label="Debug.Assert(symbol is object); 673035"];
710 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 673036"];
711 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 673037"];
712 [label="symbol = symbol.ContainingType; 673038"];
713 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 673039"];
714 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 673040"];
715 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 673041"];
716 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 673042"];
717 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 673043"];
718 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 673044"];
719 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 673045"];
720 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673046"];
721 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673047"];
722 [label="Debug.Assert(symbol is object); 673048"];
723 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 673049"];
724 [label="isInternal = false; 673050"];
725 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 673051"];
726 [label="symbol = symbol.ContainingType; 673052"];
727 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 673053"];
728 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673054"];
729 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673055"];
730 [label="Debug.Assert(symbol is object); 673056"];
731 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 673057"];
732 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 673058"];
733 [label="symbol = symbol.ContainingType; 673059"];
734 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 673060"];
735 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 673061"];
736 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 673062"];
737 [label="return memberSymbol; 673063"];
738 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 673064"];
739 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 673065"];
740 [label="return memberSymbol; 673066"];
741 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673067"];
742 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673068"];
743 [label="Debug.Assert(symbol is object); 673069"];
744 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 673070"];
745 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 673071"];
746 [label="symbol = symbol.ContainingType; 673072"];
747 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 673073"];
748 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 673074"];
749 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 673075"];
750 [label="Debug.Assert(symbol is object); 673076"];
751 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 673077"];
752 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 673078"];
753 [label="symbol = symbol.ContainingType; 673079"];
754 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 673080"];
755 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 673081"];
756 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 673082"];
757 [label="return memberSymbol; 673083"];
758 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 673084"];
759 [label="return memberSymbol; 673085"];
760 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 673086"];
761 [label="return memberSymbol; 673087"];
762 [label="return memberSymbol; 673088"];
763 [label="param BinderFactory(CSharpCompilation compilation) 673089"];
764 [label="param BinderFactory(SyntaxTree syntaxTree) 673090"];
765 [label="param BinderFactory(bool ignoreAccessibility) 673091"];
766 [label="param BinderFactory(this) 673092"];
767 [label="_binderCache 673093"];
768 [label="_compilation 673094"];
769 [label="_syntaxTree 673095"];
770 [label="_buckStopsHereBinder 673096"];
771 [label="_ignoreAccessibility 673097"];
772 [label="_binderFactoryVisitorPool 673098"];
773 [label="_compilation 673099"];
774 [label="_syntaxTree 673100"];
775 [label="_ignoreAccessibility 673101"];
776 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 673102"];
777 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 673103"];
778 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 673104"];
779 [label="_binderFactoryVisitorPool 673105"];
780 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 673106"];
781 [label="_binderCache 673107"];
782 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 673108"];
783 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 673109"];
784 [label="new BuckStopsHereBinder(compilation) 673110"];
785 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 673111"];
786 [label="param BuckStopsHereBinder(this) 673112"];
787 [label="compilation 673113"];
788 [label="param BuckStopsHereBinder(this) 673114"];
789 [label="param Binder(CSharpCompilation compilation) 673115"];
790 [label="param Binder(this) 673116"];
791 [label="internal CSharpCompilation Compilation { get; } 673117"];
792 [label="Flags 673118"];
793 [label="protected internal Binder? Next { get; } 673119"];
794 [label="_lazyConversions 673120"];
795 [label="_lazyOverloadResolution 673121"];
796 [label="RoslynDebug.Assert(compilation != null); 673122"];
797 [label="RoslynDebug.Assert(compilation != null); 673123"];
798 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 673124"];
799 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 673125"];
800 [label="this.Flags 673126"];
801 [label="this.Compilation 673127"];
802 [label="_buckStopsHereBinder 673128"];
803 [label="var diagnostics = c.GetDiagnostics(); 673129"];
804 [label="param GetImportsBinder(CSharpSyntaxNode unit) 673130"];
805 [label="param GetImportsBinder(bool inUsing = false) 673131"];
806 [label="param GetImportsBinder(this) 673132"];
807 [label="switch (unit.Kind())\n            {\n                case SyntaxKind.NamespaceDeclaration:\n                    {\n                        BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate();\n                        visitor.Initialize(0, null, null);\n                        Binder result = visitor.VisitNamespaceDeclaration((NamespaceDeclarationSyntax)unit, unit.SpanStart, inBody: true, inUsing: inUsing);\n                        _binderFactoryVisitorPool.Free(visitor);\n                        return result;\n                    }\n\n                case SyntaxKind.CompilationUnit:\n                    // imports are bound by the Script class binder:\n                    {\n                        BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate();\n                        visitor.Initialize(0, null, null);\n                        Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript);\n                        _binderFactoryVisitorPool.Free(visitor);\n                        return result;\n                    }\n\n                default:\n                    return null;\n            } 673133"];
808 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 673134"];
809 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 673135"];
810 [label="param BinderFactoryVisitor(BinderFactory factory) 673136"];
811 [label="param BinderFactoryVisitor(this) 673137"];
812 [label="param BinderFactoryVisitor(this) 673138"];
813 [label="_position 673139"];
814 [label="_memberDeclarationOpt 673140"];
815 [label="_memberOpt 673141"];
816 [label="_factory 673142"];
817 [label="_factory 673143"];
818 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 673144"];
819 [label="visitor.Initialize(0, null, null); 673145"];
820 [label="visitor.Initialize(0, null, null) 673146"];
821 [label="param Initialize(int position) 673147"];
822 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 673148"];
823 [label="param Initialize(Symbol memberOpt) 673149"];
824 [label="param Initialize(this) 673150"];
825 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 673151"];
826 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 673152"];
827 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 673153"];
828 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 673154"];
829 [label="_position 673155"];
830 [label="_memberDeclarationOpt 673156"];
831 [label="_memberOpt 673157"];
832 [label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 673158"];
833 [label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 673159"];
834 [label="InScript 673160"];
835 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 673161"];
836 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 673162"];
837 [label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 673163"];
838 [label="visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript) 673164"];
839 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 673165"];
840 [label="param VisitCompilationUnit(bool inUsing) 673166"];
841 [label="param VisitCompilationUnit(bool inScript) 673167"];
842 [label="param VisitCompilationUnit(this) 673168"];
843 [label="syntaxTree 673169"];
844 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 673170"];
845 [label="return _factory._syntaxTree; 673171"];
846 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 673172"];
847 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 673173"];
848 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 673174"];
849 [label="inUsing 673175"];
850 [label="inScript 673176"];
851 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 673177"];
852 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 673178"];
853 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 673179"];
854 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 673180"];
855 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 673181"];
856 [label="param CreateBinderCacheKey(NodeUsage usage) 673182"];
857 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 673183"];
858 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 673184"];
859 [label="return new BinderCacheKey(node, usage); 673185"];
860 [label="return new BinderCacheKey(node, usage); 673186"];
861 [label="return new BinderCacheKey(node, usage); 673187"];
862 [label="new BinderCacheKey(node, usage) 673188"];
863 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 673189"];
864 [label="param BinderCacheKey(NodeUsage usage) 673190"];
865 [label="param BinderCacheKey(this) 673191"];
866 [label="this.syntaxNode 673192"];
867 [label="this.usage 673193"];
868 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 673194"];
869 [label="Binder result; 673195"];
870 [label="binderCache 673196"];
871 [label="get\n                {\n                    return _factory._binderCache;\n                } 673197"];
872 [label="return _factory._binderCache; 673198"];
873 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 673199"];
874 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 673200"];
875 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 673201"];
876 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 673202"];
877 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 673203"];
878 [label="param GetHashCode(this) 673204"];
879 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 673205"];
880 [label="this.buckStopsHereBinder 673206"];
881 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 673207"];
882 [label="return _factory._buckStopsHereBinder; 673208"];
883 [label="result = this.buckStopsHereBinder; 673209"];
884 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 673210"];
885 [label="compilation 673211"];
886 [label="get\n                {\n                    return _factory._compilation;\n                } 673212"];
887 [label="return _factory._compilation; 673213"];
888 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 673214"];
889 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 673215"];
890 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 673216"];
891 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 673217"];
892 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 673218"];
893 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 673219"];
894 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 673220"];
895 [label="param InContainerBinder(Binder next) 673221"];
896 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 673222"];
897 [label="param InContainerBinder(bool inUsing) 673223"];
898 [label="param InContainerBinder(this) 673224"];
899 [label="next 673225"];
900 [label="param InContainerBinder(this) 673226"];
901 [label="param Binder(Binder next) 673227"];
902 [label="param Binder(this) 673228"];
903 [label="param Binder(Conversions? conversions = null) 673229"];
904 [label="RoslynDebug.Assert(next != null); 673230"];
905 [label="RoslynDebug.Assert(next != null); 673231"];
906 [label="Next 673232"];
907 [label="this.Flags 673233"];
908 [label="this.Compilation 673234"];
909 [label="_lazyConversions 673235"];
910 [label="_container 673236"];
911 [label="_computeImports 673237"];
912 [label="_lazyImports 673238"];
913 [label="_lazyImportChain 673239"];
914 [label="_lazyQuickAttributeChecker 673240"];
915 [label="Debug.Assert((object)container != null); 673241"];
916 [label="Debug.Assert((object)container != null); 673242"];
917 [label="Debug.Assert(declarationSyntax != null); 673243"];
918 [label="Debug.Assert(declarationSyntax != null); 673244"];
919 [label="_container 673245"];
920 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 673246"];
921 [label="_computeImports 673247"];
922 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 673248"];
923 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 673249"];
924 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 673250"];
925 [label="_usingsSyntax 673251"];
926 [label="compilation 673252"];
927 [label="get\n                {\n                    return _factory._compilation;\n                } 673253"];
928 [label="return _factory._compilation; 673254"];
929 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 673255"];
930 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 673256"];
931 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 673257"];
932 [label="binderCache 673258"];
933 [label="return _factory._binderCache; 673259"];
934 [label="binderCache.TryAdd(key, result); 673260"];
935 [label="binderCache.TryAdd(key, result); 673261"];
936 [label="binderCache.TryAdd(key, result); 673262"];
937 [label="binderCache.TryAdd(key, result); 673263"];
938 [label="binderCache.TryAdd(key, result); 673264"];
939 [label="return result; 673265"];
940 [label="_binderFactoryVisitorPool.Free(visitor); 673266"];
941 [label="_binderFactoryVisitorPool.Free(visitor); 673267"];
942 [label="return result; 673268"];
943 [label="var diagnostics = c.GetDiagnostics(); 673269"];
944 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 673270"];
945 [label="param GetImports(this) 673271"];
946 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 673272"];
947 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 673273"];
948 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 673274"];
949 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 673275"];
950 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 673276"];
951 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 673277"];
952 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 673278"];
953 [label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 673279"];
954 [label="param FromSyntax(InContainerBinder binder) 673280"];
955 [label="param FromSyntax(ConsList<TypeSymbol> basesBeingResolved) 673281"];
956 [label="param FromSyntax(bool inUsing) 673282"];
957 [label="SyntaxList<UsingDirectiveSyntax> usingDirectives; 673283"];
958 [label="usingDirectives 673284"];
959 [label="SyntaxList<ExternAliasDirectiveSyntax> externAliasDirectives; 673285"];
960 [label="externAliasDirectives 673286"];
961 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n            {\n                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings;\n                externAliasDirectives = compilationUnit.Externs;\n            }\n            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n            {\n                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : namespaceDecl.Usings;\n                externAliasDirectives = namespaceDecl.Externs;\n            }\n            else\n            {\n                return Empty;\n            } 673287"];
962 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 673288"];
963 [label="inUsing 673289"];
964 [label="compilationUnit.Usings 673290"];
965 [label="usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings; 673291"];
966 [label="externAliasDirectives = compilationUnit.Externs; 673292"];
967 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 673293"];
968 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 673294"];
969 [label="var diagnostics = new DiagnosticBag(); 673295"];
970 [label="var compilation = binder.Compilation; 673296"];
971 [label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 673297"];
972 [label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 673298"];
973 [label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 673299"];
974 [label="BuildExternAliases(externAliasDirectives, binder, diagnostics) 673300"];
975 [label="param BuildExternAliases(SyntaxList<ExternAliasDirectiveSyntax> syntaxList) 673301"];
976 [label="param BuildExternAliases(InContainerBinder binder) 673302"];
977 [label="param BuildExternAliases(DiagnosticBag diagnostics) 673303"];
978 [label="CSharpCompilation compilation = binder.Compilation; 673304"];
979 [label="var builder = ArrayBuilder<AliasAndExternAliasDirective>.GetInstance(); 673305"];
980 [label="foreach (ExternAliasDirectiveSyntax aliasSyntax in syntaxList)\n            {\n                compilation.RecordImport(aliasSyntax);\n\n                // Extern aliases not allowed in interactive submissions:\n                if (compilation.IsSubmission)\n                {\n                    diagnostics.Add(ErrorCode.ERR_ExternAliasNotAllowed, aliasSyntax.Location);\n                    continue;\n                }\n\n                // some n^2 action, but n should be very small.\n                foreach (var existingAlias in builder)\n                {\n                    if (existingAlias.Alias.Name == aliasSyntax.Identifier.ValueText)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_DuplicateAlias, existingAlias.Alias.Locations[0], existingAlias.Alias.Name);\n                        break;\n                    }\n                }\n\n                if (aliasSyntax.Identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                {\n                    diagnostics.Add(ErrorCode.ERR_GlobalExternAlias, aliasSyntax.Identifier.GetLocation());\n                }\n\n                builder.Add(new AliasAndExternAliasDirective(new AliasSymbol(binder, aliasSyntax), aliasSyntax));\n            } 673306"];
981 [label="foreach (ExternAliasDirectiveSyntax aliasSyntax in syntaxList)\n            {\n                compilation.RecordImport(aliasSyntax);\n\n                // Extern aliases not allowed in interactive submissions:\n                if (compilation.IsSubmission)\n                {\n                    diagnostics.Add(ErrorCode.ERR_ExternAliasNotAllowed, aliasSyntax.Location);\n                    continue;\n                }\n\n                // some n^2 action, but n should be very small.\n                foreach (var existingAlias in builder)\n                {\n                    if (existingAlias.Alias.Name == aliasSyntax.Identifier.ValueText)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_DuplicateAlias, existingAlias.Alias.Locations[0], existingAlias.Alias.Name);\n                        break;\n                    }\n                }\n\n                if (aliasSyntax.Identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                {\n                    diagnostics.Add(ErrorCode.ERR_GlobalExternAlias, aliasSyntax.Identifier.GetLocation());\n                }\n\n                builder.Add(new AliasAndExternAliasDirective(new AliasSymbol(binder, aliasSyntax), aliasSyntax));\n            } 673307"];
982 [label="return builder.ToImmutableAndFree(); 673308"];
983 [label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 673309"];
984 [label="var usings = ArrayBuilder<NamespaceOrTypeAndUsingDirective>.GetInstance(); 673310"];
985 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Builder usingAliases = null; 673311"];
986 [label="if (usingDirectives.Count > 0)\n            {\n                // A binder that contains the extern aliases but not the usings. The resolution of the target of a using directive or alias \n                // should not make use of other peer usings.\n                Binder usingsBinder;\n                if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)\n                {\n                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);\n                }\n                else\n                {\n                    var imports = externAliases.Length == 0\n                        ? Empty\n                        : new Imports(\n                            compilation,\n                            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n                            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n                            externAliases,\n                            diagnostics: null);\n                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);\n                }\n\n                var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance<NamespaceOrTypeSymbol>();\n\n                foreach (var usingDirective in usingDirectives)\n                {\n                    compilation.RecordImport(usingDirective);\n\n                    if (usingDirective.Alias != null)\n                    {\n                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;\n                        Location location = usingDirective.Alias.Name.Location;\n\n                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);\n                        }\n\n                        if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        }\n\n                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);\n\n                        string identifierValueText = identifier.ValueText;\n                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        }\n                    }\n                    else\n                    {\n                        if (usingDirective.Name.IsMissing)\n                        {\n                            //don't try to lookup namespaces inserted by parser error recovery\n                            continue;\n                        }\n\n                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);\n                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;\n                        if (imported.Kind == SymbolKind.Namespace)\n                        {\n                            if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            }\n                        }\n                        else if (imported.Kind == SymbolKind.NamedType)\n                        {\n                            if (usingDirective.StaticKeyword == default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                var importedType = (NamedTypeSymbol)imported;\n                                if (uniqueUsings.Contains(importedType))\n                                {\n                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);\n                                }\n                                else\n                                {\n                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);\n\n                                    uniqueUsings.Add(importedType);\n                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));\n                                }\n                            }\n                        }\n                        else if (imported.Kind != SymbolKind.ErrorType)\n                        {\n                            // Do not report additional error if the symbol itself is erroneous.\n\n                            // error: '<symbol>' is a '<symbol kind>' but is used as 'type or namespace'\n                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,\n                                usingDirective.Name,\n                                imported.GetKindText(),\n                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());\n                        }\n                    }\n                }\n\n                uniqueUsings.Free();\n            } 673312"];
987 [label="if (usingDirectives.Count > 0)\n            {\n                // A binder that contains the extern aliases but not the usings. The resolution of the target of a using directive or alias \n                // should not make use of other peer usings.\n                Binder usingsBinder;\n                if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)\n                {\n                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);\n                }\n                else\n                {\n                    var imports = externAliases.Length == 0\n                        ? Empty\n                        : new Imports(\n                            compilation,\n                            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n                            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n                            externAliases,\n                            diagnostics: null);\n                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);\n                }\n\n                var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance<NamespaceOrTypeSymbol>();\n\n                foreach (var usingDirective in usingDirectives)\n                {\n                    compilation.RecordImport(usingDirective);\n\n                    if (usingDirective.Alias != null)\n                    {\n                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;\n                        Location location = usingDirective.Alias.Name.Location;\n\n                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);\n                        }\n\n                        if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        }\n\n                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);\n\n                        string identifierValueText = identifier.ValueText;\n                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        }\n                    }\n                    else\n                    {\n                        if (usingDirective.Name.IsMissing)\n                        {\n                            //don't try to lookup namespaces inserted by parser error recovery\n                            continue;\n                        }\n\n                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);\n                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;\n                        if (imported.Kind == SymbolKind.Namespace)\n                        {\n                            if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            }\n                        }\n                        else if (imported.Kind == SymbolKind.NamedType)\n                        {\n                            if (usingDirective.StaticKeyword == default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                var importedType = (NamedTypeSymbol)imported;\n                                if (uniqueUsings.Contains(importedType))\n                                {\n                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);\n                                }\n                                else\n                                {\n                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);\n\n                                    uniqueUsings.Add(importedType);\n                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));\n                                }\n                            }\n                        }\n                        else if (imported.Kind != SymbolKind.ErrorType)\n                        {\n                            // Do not report additional error if the symbol itself is erroneous.\n\n                            // error: '<symbol>' is a '<symbol kind>' but is used as 'type or namespace'\n                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,\n                                usingDirective.Name,\n                                imported.GetKindText(),\n                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());\n                        }\n                    }\n                }\n\n                uniqueUsings.Free();\n            } 673313"];
988 [label="Binder usingsBinder; 673314"];
989 [label="if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)\n                {\n                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);\n                }\n                else\n                {\n                    var imports = externAliases.Length == 0\n                        ? Empty\n                        : new Imports(\n                            compilation,\n                            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n                            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n                            externAliases,\n                            diagnostics: null);\n                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);\n                } 673315"];
990 [label="var imports = externAliases.Length == 0\n                        ? Empty\n                        : new Imports(\n                            compilation,\n                            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n                            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n                            externAliases,\n                            diagnostics: null); 673316"];
991 [label="var imports = externAliases.Length == 0\n                        ? Empty\n                        : new Imports(\n                            compilation,\n                            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n                            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n                            externAliases,\n                            diagnostics: null); 673317"];
992 [label="externAliases.Length == 0 673318"];
993 [label="binder.Container 673319"];
994 [label="get\n            {\n                return _container;\n            } 673320"];
995 [label="return _container; 673321"];
996 [label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 673322"];
997 [label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 673323"];
998 [label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 673324"];
999 [label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 673325"];
1000 [label="new InContainerBinder(binder.Container, binder.Next, imports) 673326"];
1001 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 673327"];
1002 [label="param InContainerBinder(Binder next) 673328"];
1003 [label="param InContainerBinder(Imports imports = null) 673329"];
1004 [label="param InContainerBinder(this) 673330"];
1005 [label="next 673331"];
1006 [label="param InContainerBinder(this) 673332"];
1007 [label="param Binder(Binder next) 673333"];
1008 [label="RoslynDebug.Assert(next != null); 673334"];
1009 [label="RoslynDebug.Assert(next != null); 673335"];
1010 [label="_container 673336"];
1011 [label="_computeImports 673337"];
1012 [label="Debug.Assert((object)container != null || imports != null); 673338"];
1013 [label="Debug.Assert((object)container != null || imports != null); 673339"];
1014 [label="_container 673340"];
1015 [label="_lazyImports = imports ?? Imports.Empty; 673341"];
1016 [label="_lazyImports 673342"];
1017 [label="var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance<NamespaceOrTypeSymbol>(); 673343"];
1018 [label="foreach (var usingDirective in usingDirectives)\n                {\n                    compilation.RecordImport(usingDirective);\n\n                    if (usingDirective.Alias != null)\n                    {\n                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;\n                        Location location = usingDirective.Alias.Name.Location;\n\n                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);\n                        }\n\n                        if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        }\n\n                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);\n\n                        string identifierValueText = identifier.ValueText;\n                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        }\n                    }\n                    else\n                    {\n                        if (usingDirective.Name.IsMissing)\n                        {\n                            //don't try to lookup namespaces inserted by parser error recovery\n                            continue;\n                        }\n\n                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);\n                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;\n                        if (imported.Kind == SymbolKind.Namespace)\n                        {\n                            if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            }\n                        }\n                        else if (imported.Kind == SymbolKind.NamedType)\n                        {\n                            if (usingDirective.StaticKeyword == default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                var importedType = (NamedTypeSymbol)imported;\n                                if (uniqueUsings.Contains(importedType))\n                                {\n                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);\n                                }\n                                else\n                                {\n                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);\n\n                                    uniqueUsings.Add(importedType);\n                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));\n                                }\n                            }\n                        }\n                        else if (imported.Kind != SymbolKind.ErrorType)\n                        {\n                            // Do not report additional error if the symbol itself is erroneous.\n\n                            // error: '<symbol>' is a '<symbol kind>' but is used as 'type or namespace'\n                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,\n                                usingDirective.Name,\n                                imported.GetKindText(),\n                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());\n                        }\n                    }\n                } 673344"];
1019 [label="compilation.RecordImport(usingDirective); 673345"];
1020 [label="compilation.RecordImport(usingDirective); 673346"];
1021 [label="if (usingDirective.Alias != null)\n                    {\n                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;\n                        Location location = usingDirective.Alias.Name.Location;\n\n                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);\n                        }\n\n                        if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        }\n\n                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);\n\n                        string identifierValueText = identifier.ValueText;\n                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        }\n                    }\n                    else\n                    {\n                        if (usingDirective.Name.IsMissing)\n                        {\n                            //don't try to lookup namespaces inserted by parser error recovery\n                            continue;\n                        }\n\n                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);\n                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;\n                        if (imported.Kind == SymbolKind.Namespace)\n                        {\n                            if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            }\n                        }\n                        else if (imported.Kind == SymbolKind.NamedType)\n                        {\n                            if (usingDirective.StaticKeyword == default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                var importedType = (NamedTypeSymbol)imported;\n                                if (uniqueUsings.Contains(importedType))\n                                {\n                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);\n                                }\n                                else\n                                {\n                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);\n\n                                    uniqueUsings.Add(importedType);\n                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));\n                                }\n                            }\n                        }\n                        else if (imported.Kind != SymbolKind.ErrorType)\n                        {\n                            // Do not report additional error if the symbol itself is erroneous.\n\n                            // error: '<symbol>' is a '<symbol kind>' but is used as 'type or namespace'\n                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,\n                                usingDirective.Name,\n                                imported.GetKindText(),\n                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());\n                        }\n                    } 673347"];
1022 [label="if (usingDirective.Alias != null)\n                    {\n                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;\n                        Location location = usingDirective.Alias.Name.Location;\n\n                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);\n                        }\n\n                        if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        }\n\n                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);\n\n                        string identifierValueText = identifier.ValueText;\n                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        }\n                    }\n                    else\n                    {\n                        if (usingDirective.Name.IsMissing)\n                        {\n                            //don't try to lookup namespaces inserted by parser error recovery\n                            continue;\n                        }\n\n                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);\n                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;\n                        if (imported.Kind == SymbolKind.Namespace)\n                        {\n                            if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            }\n                        }\n                        else if (imported.Kind == SymbolKind.NamedType)\n                        {\n                            if (usingDirective.StaticKeyword == default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                var importedType = (NamedTypeSymbol)imported;\n                                if (uniqueUsings.Contains(importedType))\n                                {\n                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);\n                                }\n                                else\n                                {\n                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);\n\n                                    uniqueUsings.Add(importedType);\n                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));\n                                }\n                            }\n                        }\n                        else if (imported.Kind != SymbolKind.ErrorType)\n                        {\n                            // Do not report additional error if the symbol itself is erroneous.\n\n                            // error: '<symbol>' is a '<symbol kind>' but is used as 'type or namespace'\n                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,\n                                usingDirective.Name,\n                                imported.GetKindText(),\n                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());\n                        }\n                    } 673348"];
1023 [label="if (usingDirective.Name.IsMissing)\n                        {\n                            //don't try to lookup namespaces inserted by parser error recovery\n                            continue;\n                        } 673349"];
1024 [label="var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks); 673350"];
1025 [label="usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks) 673351"];
1026 [label="param WithAdditionalFlags(BinderFlags flags) 673352"];
1027 [label="param WithAdditionalFlags(this) 673353"];
1028 [label="return this.Flags.Includes(flags)\n                ? this\n                : new Binder(this, this.Flags | flags); 673354"];
1029 [label="return this.Flags.Includes(flags)\n                ? this\n                : new Binder(this, this.Flags | flags); 673355"];
1030 [label="this.Flags.Includes(flags) 673356"];
1031 [label="param Includes(this BinderFlags self) 673357"];
1032 [label="param Includes(BinderFlags other) 673358"];
1033 [label="return (self & other) == other; 673359"];
1034 [label="new Binder(this, this.Flags | flags) 673360"];
1035 [label="param Binder(Binder next) 673361"];
1036 [label="param Binder(BinderFlags flags) 673362"];
1037 [label="param Binder(this) 673363"];
1038 [label="RoslynDebug.Assert(next != null); 673364"];
1039 [label="RoslynDebug.Assert(next != null); 673365"];
1040 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 673366"];
1041 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 673367"];
1042 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 673368"];
1043 [label="param Includes(this BinderFlags self) 673369"];
1044 [label="param Includes(BinderFlags other) 673370"];
1045 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 673371"];
1046 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 673372"];
1047 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 673373"];
1048 [label="param Includes(this BinderFlags self) 673374"];
1049 [label="param Includes(BinderFlags other) 673375"];
1050 [label="Next 673376"];
1051 [label="this.Flags 673377"];
1052 [label="this.Compilation 673378"];
1053 [label="var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol; 673379"];
1054 [label="var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol; 673380"];
1055 [label="var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol; 673381"];
1056 [label="declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved) 673382"];
1057 [label="param BindNamespaceOrTypeSymbol(ExpressionSyntax syntax) 673383"];
1058 [label="param BindNamespaceOrTypeSymbol(DiagnosticBag diagnostics) 673384"];
1059 [label="param BindNamespaceOrTypeSymbol(ConsList<TypeSymbol> basesBeingResolved = null) 673385"];
1060 [label="param BindNamespaceOrTypeSymbol(this) 673386"];
1061 [label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 673387"];
1062 [label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 673388"];
1063 [label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 673389"];
1064 [label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 673390"];
1065 [label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 673391"];
1066 [label="BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null) 673392"];
1067 [label="param BindNamespaceOrTypeSymbol(ExpressionSyntax syntax) 673393"];
1068 [label="param BindNamespaceOrTypeSymbol(DiagnosticBag diagnostics) 673394"];
1069 [label="param BindNamespaceOrTypeSymbol(ConsList<TypeSymbol> basesBeingResolved) 673395"];
1070 [label="param BindNamespaceOrTypeSymbol(bool suppressUseSiteDiagnostics) 673396"];
1071 [label="param BindNamespaceOrTypeSymbol(this) 673397"];
1072 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 673398"];
1073 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 673399"];
1074 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 673400"];
1075 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 673401"];
1076 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 673402"];
1077 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 673403"];
1078 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 673404"];
1079 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 673405"];
1080 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 673406"];
1081 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 673407"];
1082 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 673408"];
1083 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 673409"];
1084 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 673410"];
1085 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 673411"];
1086 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 673412"];
1087 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 673413"];
1088 [label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 673414"];
1089 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 673415"];
1090 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 673416"];
1091 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 673417"];
1092 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 673418"];
1093 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 673419"];
1094 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 673420"];
1095 [label="var identifierValueText = node.Identifier.ValueText; 673421"];
1096 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 673422"];
1097 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673423"];
1098 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673424"];
1099 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673425"];
1100 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673426"];
1101 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673427"];
1102 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 673428"];
1103 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 673429"];
1104 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 673430"];
1105 [label="param CreateErrorIfLookupOnTypeParameter(string name) 673431"];
1106 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 673432"];
1107 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 673433"];
1108 [label="param CreateErrorIfLookupOnTypeParameter(this) 673434"];
1109 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 673435"];
1110 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 673436"];
1111 [label="return null; 673437"];
1112 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 673438"];
1113 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 673439"];
1114 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 673440"];
1115 [label="CreatePool() 673441"];
1116 [label="ObjectPool<LookupResult> pool = null; 673442"];
1117 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 673443"];
1118 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 673444"];
1119 [label="return pool; 673445"];
1120 [label="s_poolInstance = CreatePool() 673446"];
1121 [label="LookupResult.GetInstance() 673447"];
1122 [label="var instance = s_poolInstance.Allocate(); 673448"];
1123 [label="var instance = s_poolInstance.Allocate(); 673449"];
1124 [label="var instance = s_poolInstance.Allocate(); 673450"];
1125 [label="param LookupResult(ObjectPool<LookupResult> pool) 673451"];
1126 [label="param LookupResult(this) 673452"];
1127 [label="_kind 673453"];
1128 [label="_symbolList 673454"];
1129 [label="_error 673455"];
1130 [label="_pool 673456"];
1131 [label="_pool 673457"];
1132 [label="_kind 673458"];
1133 [label="_symbolList = new ArrayBuilder<Symbol>(); 673459"];
1134 [label="_symbolList 673460"];
1135 [label="_error = null; 673461"];
1136 [label="_error 673462"];
1137 [label="var instance = s_poolInstance.Allocate(); 673463"];
1138 [label="instance.IsClear 673464"];
1139 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 673465"];
1140 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673466"];
1141 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673467"];
1142 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673468"];
1143 [label="Debug.Assert(instance.IsClear); 673469"];
1144 [label="return instance; 673470"];
1145 [label="var result = LookupResult.GetInstance(); 673471"];
1146 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 673472"];
1147 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 673473"];
1148 [label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 673474"];
1149 [label="param GetSimpleNameLookupOptions(NameSyntax node) 673475"];
1150 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 673476"];
1151 [label="if (SyntaxFacts.IsAttributeName(node))\n            {\n                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.\n                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.\n                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity\n                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled\n                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only\n                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.\n\n                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;\n            }\n            else\n            {\n                return LookupOptions.NamespacesOrTypesOnly;\n            } 673477"];
1152 [label="return LookupOptions.NamespacesOrTypesOnly; 673478"];
1153 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 673479"];
1154 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673480"];
1155 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673481"];
1156 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673482"];
1157 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673483"];
1158 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673484"];
1159 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673485"];
1160 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 673486"];
1161 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 673487"];
1162 [label="param LookupSymbolsSimpleName(LookupResult result) 673488"];
1163 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 673489"];
1164 [label="param LookupSymbolsSimpleName(string plainName) 673490"];
1165 [label="param LookupSymbolsSimpleName(int arity) 673491"];
1166 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 673492"];
1167 [label="param LookupSymbolsSimpleName(LookupOptions options) 673493"];
1168 [label="param LookupSymbolsSimpleName(bool diagnose) 673494"];
1169 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673495"];
1170 [label="param LookupSymbolsSimpleName(this) 673496"];
1171 [label="if (options.IsAttributeTypeLookup())\n            {\n                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 673497"];
1172 [label="options.IsAttributeTypeLookup() 673498"];
1173 [label="param IsAttributeTypeLookup(this LookupOptions options) 673499"];
1174 [label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 673500"];
1175 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673501"];
1176 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673502"];
1177 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673503"];
1178 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673504"];
1179 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673505"];
1180 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673506"];
1181 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673507"];
1182 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673508"];
1183 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 673509"];
1184 [label="param LookupSymbolsOrMembersInternal(LookupResult result) 673510"];
1185 [label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 673511"];
1186 [label="param LookupSymbolsOrMembersInternal(string name) 673512"];
1187 [label="param LookupSymbolsOrMembersInternal(int arity) 673513"];
1188 [label="param LookupSymbolsOrMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 673514"];
1189 [label="param LookupSymbolsOrMembersInternal(LookupOptions options) 673515"];
1190 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 673516"];
1191 [label="param LookupSymbolsOrMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673517"];
1192 [label="param LookupSymbolsOrMembersInternal(this) 673518"];
1193 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 673519"];
1194 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 673520"];
1195 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673521"];
1196 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673522"];
1197 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673523"];
1198 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673524"];
1199 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673525"];
1200 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673526"];
1201 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673527"];
1202 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 673528"];
1203 [label="param LookupSymbolsInternal(LookupResult result) 673529"];
1204 [label="param LookupSymbolsInternal(string name) 673530"];
1205 [label="param LookupSymbolsInternal(int arity) 673531"];
1206 [label="param LookupSymbolsInternal(ConsList<TypeSymbol> basesBeingResolved) 673532"];
1207 [label="param LookupSymbolsInternal(LookupOptions options) 673533"];
1208 [label="param LookupSymbolsInternal(bool diagnose) 673534"];
1209 [label="param LookupSymbolsInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673535"];
1210 [label="param LookupSymbolsInternal(this) 673536"];
1211 [label="result.IsClear 673537"];
1212 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 673538"];
1213 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673539"];
1214 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673540"];
1215 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673541"];
1216 [label="Debug.Assert(result.IsClear); 673542"];
1217 [label="Debug.Assert(options.AreValid()); 673543"];
1218 [label="options.AreValid() 673544"];
1219 [label="param AreValid(this LookupOptions options) 673545"];
1220 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 673546"];
1221 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 673547"];
1222 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 673548"];
1223 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 673549"];
1224 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 673550"];
1225 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 673551"];
1226 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 673552"];
1227 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 673553"];
1228 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 673554"];
1229 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 673555"];
1230 [label="return OnlyOneBitSet(onlyOptions); 673556"];
1231 [label="OnlyOneBitSet(onlyOptions) 673557"];
1232 [label="param OnlyOneBitSet(LookupOptions o) 673558"];
1233 [label="return (o & (o - 1)) == 0; 673559"];
1234 [label="return (o & (o - 1)) == 0; 673560"];
1235 [label="Binder binder = null; 673561"];
1236 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 673562"];
1237 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 673563"];
1238 [label="result.IsMultiViable 673564"];
1239 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 673565"];
1240 [label="Kind 673566"];
1241 [label="get\n            {\n                return _kind;\n            } 673567"];
1242 [label="return _kind; 673568"];
1243 [label="return Kind == LookupResultKind.Viable; 673569"];
1244 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 673570"];
1245 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 673571"];
1246 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 673572"];
1247 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 673573"];
1248 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673574"];
1249 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673575"];
1250 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673576"];
1251 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673577"];
1252 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673578"];
1253 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673579"];
1254 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673580"];
1255 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673581"];
1256 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 673582"];
1257 [label="param LookupSymbolsInSingleBinder(LookupResult result) 673583"];
1258 [label="param LookupSymbolsInSingleBinder(string name) 673584"];
1259 [label="param LookupSymbolsInSingleBinder(int arity) 673585"];
1260 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 673586"];
1261 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 673587"];
1262 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 673588"];
1263 [label="param LookupSymbolsInSingleBinder(bool diagnose) 673589"];
1264 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673590"];
1265 [label="param LookupSymbolsInSingleBinder(this) 673591"];
1266 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673592"];
1267 [label="result.IsClear 673593"];
1268 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 673594"];
1269 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673595"];
1270 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673596"];
1271 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673597"];
1272 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 673598"];
1273 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 673599"];
1274 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 673600"];
1275 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 673601"];
1276 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 673602"];
1277 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 673603"];
1278 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673604"];
1279 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673605"];
1280 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673606"];
1281 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673607"];
1282 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673608"];
1283 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673609"];
1284 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673610"];
1285 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673611"];
1286 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 673612"];
1287 [label="param LookupSymbolsInSingleBinder(LookupResult result) 673613"];
1288 [label="param LookupSymbolsInSingleBinder(string name) 673614"];
1289 [label="param LookupSymbolsInSingleBinder(int arity) 673615"];
1290 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 673616"];
1291 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 673617"];
1292 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 673618"];
1293 [label="param LookupSymbolsInSingleBinder(bool diagnose) 673619"];
1294 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673620"];
1295 [label="param LookupSymbolsInSingleBinder(this) 673621"];
1296 [label="result.IsClear 673622"];
1297 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 673623"];
1298 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673624"];
1299 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673625"];
1300 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673626"];
1301 [label="Debug.Assert(result.IsClear); 673627"];
1302 [label="IsSubmissionClass 673628"];
1303 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 673629"];
1304 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 673630"];
1305 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 673631"];
1306 [label="var imports = GetImports(basesBeingResolved); 673632"];
1307 [label="GetImports(basesBeingResolved) 673633"];
1308 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 673634"];
1309 [label="param GetImports(this) 673635"];
1310 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 673636"];
1311 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 673637"];
1312 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 673638"];
1313 [label="return _lazyImports; 673639"];
1314 [label="var imports = GetImports(basesBeingResolved); 673640"];
1315 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 673641"];
1316 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 673642"];
1317 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 673643"];
1318 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 673644"];
1319 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673645"];
1320 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673646"];
1321 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673647"];
1322 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673648"];
1323 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673649"];
1324 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673650"];
1325 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673651"];
1326 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673652"];
1327 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673653"];
1328 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 673654"];
1329 [label="param LookupMembersInternal(LookupResult result) 673655"];
1330 [label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 673656"];
1331 [label="param LookupMembersInternal(string name) 673657"];
1332 [label="param LookupMembersInternal(int arity) 673658"];
1333 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 673659"];
1334 [label="param LookupMembersInternal(LookupOptions options) 673660"];
1335 [label="param LookupMembersInternal(Binder originalBinder) 673661"];
1336 [label="param LookupMembersInternal(bool diagnose) 673662"];
1337 [label="param LookupMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673663"];
1338 [label="param LookupMembersInternal(this) 673664"];
1339 [label="Debug.Assert(options.AreValid()); 673665"];
1340 [label="options.AreValid() 673666"];
1341 [label="param AreValid(this LookupOptions options) 673667"];
1342 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 673668"];
1343 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 673669"];
1344 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 673670"];
1345 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 673671"];
1346 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 673672"];
1347 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 673673"];
1348 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 673674"];
1349 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 673675"];
1350 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 673676"];
1351 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 673677"];
1352 [label="return OnlyOneBitSet(onlyOptions); 673678"];
1353 [label="OnlyOneBitSet(onlyOptions) 673679"];
1354 [label="param OnlyOneBitSet(LookupOptions o) 673680"];
1355 [label="return (o & (o - 1)) == 0; 673681"];
1356 [label="return (o & (o - 1)) == 0; 673682"];
1357 [label="Debug.Assert(arity >= 0); 673683"];
1358 [label="Debug.Assert(arity >= 0); 673684"];
1359 [label="if (nsOrType.IsNamespace)\n            {\n                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            } 673685"];
1360 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673686"];
1361 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673687"];
1362 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673688"];
1363 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673689"];
1364 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673690"];
1365 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673691"];
1366 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673692"];
1367 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673693"];
1368 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 673694"];
1369 [label="param LookupMembersInNamespace(LookupResult result) 673695"];
1370 [label="param LookupMembersInNamespace(NamespaceSymbol ns) 673696"];
1371 [label="param LookupMembersInNamespace(string name) 673697"];
1372 [label="param LookupMembersInNamespace(int arity) 673698"];
1373 [label="param LookupMembersInNamespace(LookupOptions options) 673699"];
1374 [label="param LookupMembersInNamespace(Binder originalBinder) 673700"];
1375 [label="param LookupMembersInNamespace(bool diagnose) 673701"];
1376 [label="param LookupMembersInNamespace(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673702"];
1377 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 673703"];
1378 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 673704"];
1379 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 673705"];
1380 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 673706"];
1381 [label="GetCandidateMembers(ns, name, options, originalBinder) 673707"];
1382 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 673708"];
1383 [label="param GetCandidateMembers(string name) 673709"];
1384 [label="param GetCandidateMembers(LookupOptions options) 673710"];
1385 [label="param GetCandidateMembers(Binder originalBinder) 673711"];
1386 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 673712"];
1387 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 673713"];
1388 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 673714"];
1389 [label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 673715"];
1390 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 673716"];
1391 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 673717"];
1392 [label="return nsOrType.GetMembers(name); 673718"];
1393 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 673719"];
1394 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 673720"];
1395 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 673721"];
1396 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 673722"];
1397 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 673723"];
1398 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 673724"];
1399 [label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 673725"];
1400 [label="param CheckViability(Symbol symbol) 673726"];
1401 [label="param CheckViability(int arity) 673727"];
1402 [label="param CheckViability(LookupOptions options) 673728"];
1403 [label="param CheckViability(TypeSymbol accessThroughType) 673729"];
1404 [label="param CheckViability(bool diagnose) 673730"];
1405 [label="param CheckViability(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673731"];
1406 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 673732"];
1407 [label="param CheckViability(this) 673733"];
1408 [label="bool inaccessibleViaQualifier; 673734"];
1409 [label="DiagnosticInfo diagInfo; 673735"];
1410 [label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias\n                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)\n                : symbol; 673736"];
1411 [label="symbol.Kind == SymbolKind.Alias 673737"];
1412 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673738"];
1413 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673739"];
1414 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673740"];
1415 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673741"];
1416 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673742"];
1417 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673743"];
1418 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673744"];
1419 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673745"];
1420 [label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 673746"];
1421 [label="param WrongArity(Symbol symbol) 673747"];
1422 [label="param WrongArity(int arity) 673748"];
1423 [label="param WrongArity(bool diagnose) 673749"];
1424 [label="param WrongArity(LookupOptions options) 673750"];
1425 [label="param WrongArity(out DiagnosticInfo diagInfo) 673751"];
1426 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 673752"];
1427 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 673753"];
1428 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 673754"];
1429 [label="diagInfo = null; 673755"];
1430 [label="return false; 673756"];
1431 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673757"];
1432 [label="InCref 673758"];
1433 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 673759"];
1434 [label="return this.Flags.Includes(BinderFlags.Cref); 673760"];
1435 [label="return this.Flags.Includes(BinderFlags.Cref); 673761"];
1436 [label="this.Flags.Includes(BinderFlags.Cref) 673762"];
1437 [label="param Includes(this BinderFlags self) 673763"];
1438 [label="param Includes(BinderFlags other) 673764"];
1439 [label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673765"];
1440 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673766"];
1441 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673767"];
1442 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673768"];
1443 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673769"];
1444 [label="InCref 673770"];
1445 [label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673771"];
1446 [label="InCref 673772"];
1447 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673773"];
1448 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673774"];
1449 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673775"];
1450 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673776"];
1451 [label="RefineAccessThroughType(options, accessThroughType) 673777"];
1452 [label="param RefineAccessThroughType(LookupOptions options) 673778"];
1453 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 673779"];
1454 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 673780"];
1455 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 673781"];
1456 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 673782"];
1457 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 673783"];
1458 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673784"];
1459 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673785"];
1460 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673786"];
1461 [label="this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved) 673787"];
1462 [label="param IsAccessible(Symbol symbol) 673788"];
1463 [label="param IsAccessible(TypeSymbol accessThroughType) 673789"];
1464 [label="param IsAccessible(out bool failedThroughTypeCheck) 673790"];
1465 [label="param IsAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673791"];
1466 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 673792"];
1467 [label="param IsAccessible(this) 673793"];
1468 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 673794"];
1469 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 673795"];
1470 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 673796"];
1471 [label="param Includes(this BinderFlags self) 673797"];
1472 [label="param Includes(BinderFlags other) 673798"];
1473 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673799"];
1474 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673800"];
1475 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673801"];
1476 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673802"];
1477 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673803"];
1478 [label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 673804"];
1479 [label="param IsAccessibleHelper(Symbol symbol) 673805"];
1480 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 673806"];
1481 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 673807"];
1482 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673808"];
1483 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 673809"];
1484 [label="param IsAccessibleHelper(this) 673810"];
1485 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673811"];
1486 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673812"];
1487 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673813"];
1488 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673814"];
1489 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673815"];
1490 [label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 673816"];
1491 [label="param IsAccessibleHelper(Symbol symbol) 673817"];
1492 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 673818"];
1493 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 673819"];
1494 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673820"];
1495 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 673821"];
1496 [label="param IsAccessibleHelper(this) 673822"];
1497 [label="var type = _container as NamedTypeSymbol; 673823"];
1498 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 673824"];
1499 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 673825"];
1500 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673826"];
1501 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673827"];
1502 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673828"];
1503 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673829"];
1504 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 673830"];
1505 [label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 673831"];
1506 [label="param IsAccessibleHelper(Symbol symbol) 673832"];
1507 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 673833"];
1508 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 673834"];
1509 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 673835"];
1510 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 673836"];
1511 [label="param IsAccessibleHelper(this) 673837"];
1512 [label="failedThroughTypeCheck = false; 673838"];
1513 [label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 673839"];
1514 [label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 673840"];
1515 [label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 673841"];
1516 [label="IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics) 673842"];
1517 [label="param IsSymbolAccessibleConditional(Symbol symbol) 673843"];
1518 [label="param IsSymbolAccessibleConditional(AssemblySymbol within) 673844"];
1519 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 673845"];
1520 [label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 673846"];
1521 [label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 673847"];
1522 [label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 673848"];
1523 [label="AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics) 673849"];
1524 [label="param IsSymbolAccessible(Symbol symbol) 673850"];
1525 [label="param IsSymbolAccessible(AssemblySymbol within) 673851"];
1526 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673852"];
1527 [label="bool failedThroughTypeCheck; 673853"];
1528 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673854"];
1529 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673855"];
1530 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673856"];
1531 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673857"];
1532 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673858"];
1533 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 673859"];
1534 [label="IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics) 673860"];
1535 [label="param IsSymbolAccessibleCore(Symbol symbol) 673861"];
1536 [label="param IsSymbolAccessibleCore(Symbol within) 673862"];
1537 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 673863"];
1538 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 673864"];
1539 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 673865"];
1540 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 673866"];
1541 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 673867"];
1542 [label="Debug.Assert((object)symbol != null); 673868"];
1543 [label="Debug.Assert((object)symbol != null); 673869"];
1544 [label="Debug.Assert((object)within != null); 673870"];
1545 [label="Debug.Assert((object)within != null); 673871"];
1546 [label="Debug.Assert(within.IsDefinition); 673872"];
1547 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 673873"];
1548 [label="failedThroughTypeCheck = false; 673874"];
1549 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 673875"];
1550 [label="return true; 673876"];
1551 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673877"];
1552 [label="InCref 673878"];
1553 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673879"];
1554 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673880"];
1555 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673881"];
1556 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673882"];
1557 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673883"];
1558 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673884"];
1559 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673885"];
1560 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673886"];
1561 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673887"];
1562 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 673888"];
1563 [label="return LookupResult.Good(symbol); 673889"];
1564 [label="LookupResult.Good(symbol) 673890"];
1565 [label="param Good(Symbol symbol) 673891"];
1566 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 673892"];
1567 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 673893"];
1568 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 673894"];
1569 [label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 673895"];
1570 [label="param SingleLookupResult(LookupResultKind kind) 673896"];
1571 [label="param SingleLookupResult(Symbol symbol) 673897"];
1572 [label="param SingleLookupResult(DiagnosticInfo error) 673898"];
1573 [label="param SingleLookupResult(this) 673899"];
1574 [label="this.Kind 673900"];
1575 [label="this.Symbol 673901"];
1576 [label="this.Error 673902"];
1577 [label="return LookupResult.Good(symbol); 673903"];
1578 [label="result.MergeEqual(resultOfThisMember); 673904"];
1579 [label="result.MergeEqual(resultOfThisMember) 673905"];
1580 [label="param MergeEqual(SingleLookupResult result) 673906"];
1581 [label="param MergeEqual(this) 673907"];
1582 [label="Kind 673908"];
1583 [label="get\n            {\n                return _kind;\n            } 673909"];
1584 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 673910"];
1585 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 673911"];
1586 [label="Kind 673912"];
1587 [label="if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 673913"];
1588 [label="this.SetFrom(result); 673914"];
1589 [label="this.SetFrom(result) 673915"];
1590 [label="param SetFrom(SingleLookupResult other) 673916"];
1591 [label="param SetFrom(this) 673917"];
1592 [label="_kind 673918"];
1593 [label="_symbolList.Clear(); 673919"];
1594 [label="_symbolList.Add(other.Symbol); 673920"];
1595 [label="_symbolList.Add(other.Symbol); 673921"];
1596 [label="_error 673922"];
1597 [label="this.SetFrom(result); 673923"];
1598 [label="result.MergeEqual(resultOfThisMember); 673924"];
1599 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 673925"];
1600 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 673926"];
1601 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 673927"];
1602 [label="result.IsMultiViable 673928"];
1603 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 673929"];
1604 [label="return _kind; 673930"];
1605 [label="if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                } 673931"];
1606 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 673932"];
1607 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 673933"];
1608 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 673934"];
1609 [label="originalBinder.IsSemanticModelBinder 673935"];
1610 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 673936"];
1611 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 673937"];
1612 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 673938"];
1613 [label="this.Flags.Includes(BinderFlags.SemanticModel) 673939"];
1614 [label="param Includes(this BinderFlags self) 673940"];
1615 [label="param Includes(BinderFlags other) 673941"];
1616 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 673942"];
1617 [label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 673943"];
1618 [label="param IsUsingAlias(string name) 673944"];
1619 [label="param IsUsingAlias(bool callerIsSemanticModel) 673945"];
1620 [label="param IsUsingAlias(this) 673946"];
1621 [label="AliasAndUsingDirective node; 673947"];
1622 [label="node 673948"];
1623 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 673949"];
1624 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 673950"];
1625 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 673951"];
1626 [label="return false; 673952"];
1627 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 673953"];
1628 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 673954"];
1629 [label="return; 673955"];
1630 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 673956"];
1631 [label="result.IsClear 673957"];
1632 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 673958"];
1633 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 673959"];
1634 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 673960"];
1635 [label="binder = scope; 673961"];
1636 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 673962"];
1637 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 673963"];
1638 [label="return binder; 673964"];
1639 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 673965"];
1640 [label="diagnostics.Add(node, useSiteDiagnostics); 673966"];
1641 [label="diagnostics.Add(node, useSiteDiagnostics); 673967"];
1642 [label="diagnostics.Add(node, useSiteDiagnostics); 673968"];
1643 [label="diagnostics.Add(node, useSiteDiagnostics); 673969"];
1644 [label="Symbol bindingResult = null; 673970"];
1645 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 673971"];
1646 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 673972"];
1647 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 673973"];
1648 [label="IsViableType(result) 673974"];
1649 [label="param IsViableType(LookupResult result) 673975"];
1650 [label="result.IsMultiViable 673976"];
1651 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 673977"];
1652 [label="Kind 673978"];
1653 [label="get\n            {\n                return _kind;\n            } 673979"];
1654 [label="return _kind; 673980"];
1655 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 673981"];
1656 [label="result.Symbols 673982"];
1657 [label="get\n            {\n                return _symbolList;\n            } 673983"];
1658 [label="return _symbolList; 673984"];
1659 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 673985"];
1660 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 673986"];
1661 [label="return false; 673987"];
1662 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 673988"];
1663 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 673989"];
1664 [label="if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                } 673990"];
1665 [label="if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                } 673991"];
1666 [label="bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics); 673992"];
1667 [label="bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics); 673993"];
1668 [label="BindNativeIntegerSymbolIfAny(node, diagnostics) 673994"];
1669 [label="param BindNativeIntegerSymbolIfAny(IdentifierNameSyntax node) 673995"];
1670 [label="param BindNativeIntegerSymbolIfAny(DiagnosticBag diagnostics) 673996"];
1671 [label="param BindNativeIntegerSymbolIfAny(this) 673997"];
1672 [label="SpecialType specialType; 673998"];
1673 [label="switch (node.Identifier.Text)\n            {\n                case 'nint':\n                    specialType = SpecialType.System_IntPtr;\n                    break;\n                case 'nuint':\n                    specialType = SpecialType.System_UIntPtr;\n                    break;\n                default:\n                    return null;\n            } 673999"];
1674 [label="return null; 674000"];
1675 [label="if (bindingResult is null)\n            {\n                bool wasError;\n\n                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);\n                if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n            } 674001"];
1676 [label="bool wasError; 674002"];
1677 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674003"];
1678 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674004"];
1679 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674005"];
1680 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674006"];
1681 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674007"];
1682 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674008"];
1683 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674009"];
1684 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674010"];
1685 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674011"];
1686 [label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 674012"];
1687 [label="param ResultSymbol(LookupResult result) 674013"];
1688 [label="param ResultSymbol(string simpleName) 674014"];
1689 [label="param ResultSymbol(int arity) 674015"];
1690 [label="param ResultSymbol(SyntaxNode where) 674016"];
1691 [label="param ResultSymbol(DiagnosticBag diagnostics) 674017"];
1692 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 674018"];
1693 [label="param ResultSymbol(out bool wasError) 674019"];
1694 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 674020"];
1695 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 674021"];
1696 [label="param ResultSymbol(this) 674022"];
1697 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674023"];
1698 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674024"];
1699 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674025"];
1700 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674026"];
1701 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674027"];
1702 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674028"];
1703 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674029"];
1704 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674030"];
1705 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 674031"];
1706 [label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 674032"];
1707 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 674033"];
1708 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 674034"];
1709 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 674035"];
1710 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 674036"];
1711 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 674037"];
1712 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 674038"];
1713 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 674039"];
1714 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 674040"];
1715 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 674041"];
1716 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 674042"];
1717 [label="Debug.Assert(where != null); 674043"];
1718 [label="Debug.Assert(where != null); 674044"];
1719 [label="Debug.Assert(diagnostics != null); 674045"];
1720 [label="Debug.Assert(diagnostics != null); 674046"];
1721 [label="result.Symbols 674047"];
1722 [label="get\n            {\n                return _symbolList;\n            } 674048"];
1723 [label="return _symbolList; 674049"];
1724 [label="var symbols = result.Symbols; 674050"];
1725 [label="wasError = false; 674051"];
1726 [label="result.IsMultiViable 674052"];
1727 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 674053"];
1728 [label="if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                } 674054"];
1729 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 674055"];
1730 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 674056"];
1731 [label="var singleResult = symbols[0]; 674057"];
1732 [label="var singleType = singleResult as TypeSymbol; 674058"];
1733 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 674059"];
1734 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 674060"];
1735 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 674061"];
1736 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 674062"];
1737 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 674063"];
1738 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 674064"];
1739 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 674065"];
1740 [label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 674066"];
1741 [label="param ReportUseSiteDiagnostics(Symbol symbol) 674067"];
1742 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 674068"];
1743 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 674069"];
1744 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 674070"];
1745 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 674071"];
1746 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 674072"];
1747 [label="return singleResult; 674073"];
1748 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 674074"];
1749 [label="return symbol; 674075"];
1750 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 674076"];
1751 [label="result.Free() 674077"];
1752 [label="param Free(this) 674078"];
1753 [label="this.Clear() 674079"];
1754 [label="param Clear(this) 674080"];
1755 [label="_kind 674081"];
1756 [label="_symbolList.Clear(); 674082"];
1757 [label="_error = null; 674083"];
1758 [label="_error 674084"];
1759 [label="this.Clear(); 674085"];
1760 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 674086"];
1761 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 674087"];
1762 [label="_pool.Free(this); 674088"];
1763 [label="_pool.Free(this); 674089"];
1764 [label="result.Free(); 674090"];
1765 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 674091"];
1766 [label="AreNullableAnnotationsEnabled(node.Identifier) 674092"];
1767 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 674093"];
1768 [label="param AreNullableAnnotationsEnabled(this) 674094"];
1769 [label="RoslynDebug.Assert(token.SyntaxTree is object); 674095"];
1770 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 674096"];
1771 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 674097"];
1772 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 674098"];
1773 [label="param AreNullableAnnotationsEnabled(int position) 674099"];
1774 [label="param AreNullableAnnotationsEnabled(this) 674100"];
1775 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 674101"];
1776 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 674102"];
1777 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 674103"];
1778 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 674104"];
1779 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 674105"];
1780 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 674106"];
1781 [label="AreNullableAnnotationsGloballyEnabled() 674107"];
1782 [label="param AreNullableAnnotationsGloballyEnabled(this) 674108"];
1783 [label="RoslynDebug.Assert(Next is object); 674109"];
1784 [label="RoslynDebug.Assert(Next is object); 674110"];
1785 [label="Next.AreNullableAnnotationsGloballyEnabled() 674111"];
1786 [label="param AreNullableAnnotationsGloballyEnabled(this) 674112"];
1787 [label="RoslynDebug.Assert(Next is object); 674113"];
1788 [label="param AreNullableAnnotationsGloballyEnabled(this) 674114"];
1789 [label="GetGlobalAnnotationState() 674115"];
1790 [label="param GetGlobalAnnotationState(this) 674116"];
1791 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 674117"];
1792 [label="return false; 674118"];
1793 [label="return GetGlobalAnnotationState(); 674119"];
1794 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 674120"];
1795 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 674121"];
1796 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 674122"];
1797 [label="param CreateUnannotated(bool isNullableEnabled) 674123"];
1798 [label="param CreateUnannotated(Symbol symbol) 674124"];
1799 [label="if (symbol is null)\n                {\n                    return default;\n                } 674125"];
1800 [label="var type = symbol as TypeSymbol; 674126"];
1801 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 674127"];
1802 [label="type is null 674128"];
1803 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 674129"];
1804 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) 674130"];
1805 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(Symbol symbol) 674131"];
1806 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(bool isNullableEnabled) 674132"];
1807 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 674133"];
1808 [label="Debug.Assert(!(symbol is TypeSymbol)); 674134"];
1809 [label="_typeWithAnnotations = default; 674135"];
1810 [label="_typeWithAnnotations 674136"];
1811 [label="_symbol 674137"];
1812 [label="_isNullableEnabled 674138"];
1813 [label="result.IsDefault 674139"];
1814 [label="=> !_typeWithAnnotations.HasType && _symbol is null 674140"];
1815 [label="_symbol is null 674141"];
1816 [label="!_typeWithAnnotations.HasType && _symbol is null 674142"];
1817 [label="Debug.Assert(!result.IsDefault); 674143"];
1818 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 674144"];
1819 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 674145"];
1820 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 674146"];
1821 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 674147"];
1822 [label="UnwrapAlias(result, diagnostics, syntax, basesBeingResolved) 674148"];
1823 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 674149"];
1824 [label="param UnwrapAlias(DiagnosticBag diagnostics) 674150"];
1825 [label="param UnwrapAlias(SyntaxNode syntax) 674151"];
1826 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 674152"];
1827 [label="param UnwrapAlias(this) 674153"];
1828 [label="symbol.IsAlias 674154"];
1829 [label="=> _symbol?.Kind == SymbolKind.Alias 674155"];
1830 [label="_symbol?.Kind == SymbolKind.Alias 674156"];
1831 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 674157"];
1832 [label="return symbol; 674158"];
1833 [label="declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol 674159"];
1834 [label="=> Symbol as NamespaceOrTypeSymbol 674160"];
1835 [label="Symbol 674161"];
1836 [label="=> _symbol ?? TypeWithAnnotations.Type 674162"];
1837 [label="_symbol ?? TypeWithAnnotations.Type 674163"];
1838 [label="Symbol as NamespaceOrTypeSymbol 674164"];
1839 [label="if (imported.Kind == SymbolKind.Namespace)\n                        {\n                            if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            }\n                        }\n                        else if (imported.Kind == SymbolKind.NamedType)\n                        {\n                            if (usingDirective.StaticKeyword == default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                var importedType = (NamedTypeSymbol)imported;\n                                if (uniqueUsings.Contains(importedType))\n                                {\n                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);\n                                }\n                                else\n                                {\n                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);\n\n                                    uniqueUsings.Add(importedType);\n                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));\n                                }\n                            }\n                        }\n                        else if (imported.Kind != SymbolKind.ErrorType)\n                        {\n                            // Do not report additional error if the symbol itself is erroneous.\n\n                            // error: '<symbol>' is a '<symbol kind>' but is used as 'type or namespace'\n                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,\n                                usingDirective.Name,\n                                imported.GetKindText(),\n                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());\n                        } 674165"];
1840 [label="if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            } 674166"];
1841 [label="if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            } 674167"];
1842 [label="if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            } 674168"];
1843 [label="uniqueUsings.Add(imported); 674169"];
1844 [label="usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective)); 674170"];
1845 [label="usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective)); 674171"];
1846 [label="usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective)); 674172"];
1847 [label="new NamespaceOrTypeAndUsingDirective(imported, usingDirective) 674173"];
1848 [label="param NamespaceOrTypeAndUsingDirective(NamespaceOrTypeSymbol namespaceOrType) 674174"];
1849 [label="param NamespaceOrTypeAndUsingDirective(UsingDirectiveSyntax usingDirective) 674175"];
1850 [label="param NamespaceOrTypeAndUsingDirective(this) 674176"];
1851 [label="this.NamespaceOrType 674177"];
1852 [label="this.UsingDirective 674178"];
1853 [label="usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective)); 674179"];
1854 [label="uniqueUsings.Free(); 674180"];
1855 [label="if (diagnostics.IsEmptyWithoutResolution)\n            {\n                diagnostics = null;\n            } 674181"];
1856 [label="diagnostics = null; 674182"];
1857 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674183"];
1858 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674184"];
1859 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674185"];
1860 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674186"];
1861 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674187"];
1862 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 674188"];
1863 [label="new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics) 674189"];
1864 [label="param Imports(CSharpCompilation compilation) 674190"];
1865 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 674191"];
1866 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 674192"];
1867 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 674193"];
1868 [label="param Imports(DiagnosticBag diagnostics) 674194"];
1869 [label="param Imports(this) 674195"];
1870 [label="_compilation 674196"];
1871 [label="_diagnostics 674197"];
1872 [label="UsingAliases 674198"];
1873 [label="Debug.Assert(usingAliases != null); 674199"];
1874 [label="Debug.Assert(usingAliases != null); 674200"];
1875 [label="Debug.Assert(!usings.IsDefault); 674201"];
1876 [label="Debug.Assert(!externs.IsDefault); 674202"];
1877 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 674203"];
1878 [label="Validate() 674204"];
1879 [label="param Validate(this) 674205"];
1880 [label="if (this == Empty)\n            {\n                return;\n            } 674206"];
1881 [label="DiagnosticBag semanticDiagnostics = _compilation.DeclarationDiagnostics; 674207"];
1882 [label="var corLibrary = _compilation.SourceAssembly.CorLibrary; 674208"];
1883 [label="var conversions = new TypeConversions(corLibrary); 674209"];
1884 [label="var conversions = new TypeConversions(corLibrary); 674210"];
1885 [label="new TypeConversions(corLibrary) 674211"];
1886 [label="param TypeConversions(AssemblySymbol corLibrary) 674212"];
1887 [label="param TypeConversions(bool includeNullability = false) 674213"];
1888 [label="param TypeConversions(this) 674214"];
1889 [label="corLibrary 674215"];
1890 [label="0 674216"];
1891 [label="includeNullability 674217"];
1892 [label="null 674218"];
1893 [label="param TypeConversions(this) 674219"];
1894 [label="param TypeConversions(AssemblySymbol corLibrary) 674220"];
1895 [label="param TypeConversions(int currentRecursionDepth) 674221"];
1896 [label="param TypeConversions(bool includeNullability) 674222"];
1897 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 674223"];
1898 [label="param TypeConversions(this) 674224"];
1899 [label="50 674225"];
1900 [label="MaximumRecursionDepth = 50 674226"];
1901 [label="false 674227"];
1902 [label="F = false 674228"];
1903 [label="true 674229"];
1904 [label="T = true 674230"];
1905 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 674231"];
1906 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 674232"];
1907 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 674233"];
1908 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 674234"];
1909 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 674235"];
1910 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 674236"];
1911 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 674237"];
1912 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 674238"];
1913 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 674239"];
1914 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 674240"];
1915 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 674241"];
1916 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 674242"];
1917 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 674243"];
1918 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 674244"];
1919 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 674245"];
1920 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 674246"];
1921 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 674247"];
1922 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 674248"];
1923 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674249"];
1924 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674250"];
1925 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674251"];
1926 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674252"];
1927 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674253"];
1928 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 674254"];
1929 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 674255"];
1930 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 674256"];
1931 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 674257"];
1932 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 674258"];
1933 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 674259"];
1934 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 674260"];
1935 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 674261"];
1936 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 674262"];
1937 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 674263"];
1938 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 674264"];
1939 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674265"];
1940 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674266"];
1941 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674267"];
1942 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674268"];
1943 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674269"];
1944 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674270"];
1945 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674271"];
1946 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674272"];
1947 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674273"];
1948 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674274"];
1949 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674275"];
1950 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674276"];
1951 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674277"];
1952 [label="s_implicitNumericConversions =\n        {\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 674278"];
1953 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 674279"];
1954 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 674280"];
1955 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 674281"];
1956 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 674282"];
1957 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 674283"];
1958 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 674284"];
1959 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 674285"];
1960 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 674286"];
1961 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 674287"];
1962 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 674288"];
1963 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 674289"];
1964 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 674290"];
1965 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 674291"];
1966 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 674292"];
1967 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 674293"];
1968 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 674294"];
1969 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 674295"];
1970 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 674296"];
1971 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 674297"];
1972 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 674298"];
1973 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 674299"];
1974 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 674300"];
1975 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 674301"];
1976 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 674302"];
1977 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 674303"];
1978 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 674304"];
1979 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 674305"];
1980 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 674306"];
1981 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 674307"];
1982 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 674308"];
1983 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 674309"];
1984 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 674310"];
1985 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 674311"];
1986 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 674312"];
1987 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 674313"];
1988 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 674314"];
1989 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674315"];
1990 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674316"];
1991 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674317"];
1992 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674318"];
1993 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674319"];
1994 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674320"];
1995 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674321"];
1996 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674322"];
1997 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674323"];
1998 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674324"];
1999 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674325"];
2000 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674326"];
2001 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674327"];
2002 [label="s_explicitNumericConversions =\n        {\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 674328"];
2003 [label="corLibrary 674329"];
2004 [label="currentRecursionDepth 674330"];
2005 [label="includeNullability 674331"];
2006 [label="otherNullabilityOpt 674332"];
2007 [label="param TypeConversions(this) 674333"];
2008 [label="param ConversionsBase(AssemblySymbol corLibrary) 674334"];
2009 [label="param ConversionsBase(int currentRecursionDepth) 674335"];
2010 [label="param ConversionsBase(bool includeNullability) 674336"];
2011 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 674337"];
2012 [label="param ConversionsBase(this) 674338"];
2013 [label="corLibrary 674339"];
2014 [label="currentRecursionDepth 674340"];
2015 [label="IncludeNullability 674341"];
2016 [label="_lazyOtherNullability 674342"];
2017 [label="Debug.Assert((object)corLibrary != null); 674343"];
2018 [label="Debug.Assert((object)corLibrary != null); 674344"];
2019 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 674345"];
2020 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 674346"];
2021 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 674347"];
2022 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 674348"];
2023 [label="this.corLibrary 674349"];
2024 [label="this.currentRecursionDepth 674350"];
2025 [label="IncludeNullability 674351"];
2026 [label="_lazyOtherNullability 674352"];
2027 [label="foreach (var @using in Usings)\n            {\n                // Check if `using static` directives meet constraints.\n                if (@using.NamespaceOrType.IsType)\n                {\n                    var typeSymbol = (TypeSymbol)@using.NamespaceOrType;\n                    // LAFHIS\n                    var location = (@using.UsingDirective != null ? @using.UsingDirective.Name.Location : null) ?? NoLocation.Singleton;\n                    typeSymbol.CheckAllConstraints(_compilation, conversions, location, semanticDiagnostics);\n                }\n            } 674353"];
2028 [label="if (@using.NamespaceOrType.IsType)\n                {\n                    var typeSymbol = (TypeSymbol)@using.NamespaceOrType;\n                    // LAFHIS\n                    var location = (@using.UsingDirective != null ? @using.UsingDirective.Name.Location : null) ?? NoLocation.Singleton;\n                    typeSymbol.CheckAllConstraints(_compilation, conversions, location, semanticDiagnostics);\n                } 674354"];
2029 [label="foreach (var alias in ExternAliases)\n            {\n                alias.Alias.GetAliasTarget(null);\n                semanticDiagnostics.AddRange(alias.Alias.AliasTargetDiagnostics);\n            } 674355"];
2030 [label="if (_diagnostics != null && !_diagnostics.IsEmptyWithoutResolution)\n            {\n                semanticDiagnostics.AddRange(_diagnostics.AsEnumerable());\n            } 674356"];
2031 [label="if (_diagnostics != null && !_diagnostics.IsEmptyWithoutResolution)\n            {\n                semanticDiagnostics.AddRange(_diagnostics.AsEnumerable());\n            } 674357"];
2032 [label="Validate(); 674358"];
2033 [label="return; 674359"];
2034 [label="param GetBinder(SyntaxNode node) 674360"];
2035 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 674361"];
2036 [label="param GetBinder(Symbol memberOpt = null) 674362"];
2037 [label="param GetBinder(this) 674363"];
2038 [label="int position = node.SpanStart; 674364"];
2039 [label="InScript 674365"];
2040 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 674366"];
2041 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 674367"];
2042 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 674368"];
2043 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 674369"];
2044 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 674370"];
2045 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 674371"];
2046 [label="node = node.Parent; 674372"];
2047 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 674373"];
2048 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 674374"];
2049 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 674375"];
2050 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 674376"];
2051 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 674377"];
2052 [label="param GetBinder(SyntaxNode node) 674378"];
2053 [label="param GetBinder(int position) 674379"];
2054 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 674380"];
2055 [label="param GetBinder(Symbol memberOpt = null) 674381"];
2056 [label="param GetBinder(this) 674382"];
2057 [label="Debug.Assert(node != null); 674383"];
2058 [label="Debug.Assert(node != null); 674384"];
2059 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 674385"];
2060 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 674386"];
2061 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 674387"];
2062 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 674388"];
2063 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 674389"];
2064 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 674390"];
2065 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 674391"];
2066 [label="param Initialize(int position) 674392"];
2067 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 674393"];
2068 [label="param Initialize(Symbol memberOpt) 674394"];
2069 [label="param Initialize(this) 674395"];
2070 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 674396"];
2071 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 674397"];
2072 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 674398"];
2073 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 674399"];
2074 [label="_position 674400"];
2075 [label="_memberDeclarationOpt 674401"];
2076 [label="_memberOpt 674402"];
2077 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 674403"];
2078 [label="Binder result = visitor.Visit(node); 674404"];
2079 [label="visitor.Visit(node) 674405"];
2080 [label="param Visit(SyntaxNode node) 674406"];
2081 [label="param Visit(this) 674407"];
2082 [label="return VisitCore(node); 674408"];
2083 [label="VisitCore(node) 674409"];
2084 [label="param VisitCore(SyntaxNode node) 674410"];
2085 [label="param VisitCore(this) 674411"];
2086 [label="return ((CSharpSyntaxNode)node).Accept(this); 674412"];
2087 [label="return ((CSharpSyntaxNode)node).Accept(this); 674413"];
2088 [label="return ((CSharpSyntaxNode)node).Accept(this); 674414"];
2089 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 674415"];
2090 [label="param VisitClassDeclaration(this) 674416"];
2091 [label="return VisitTypeDeclarationCore(node); 674417"];
2092 [label="VisitTypeDeclarationCore(node) 674418"];
2093 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 674419"];
2094 [label="param VisitTypeDeclarationCore(this) 674420"];
2095 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 674421"];
2096 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 674422"];
2097 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 674423"];
2098 [label="NodeUsage extraInfo = NodeUsage.Normal; 674424"];
2099 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 674425"];
2100 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 674426"];
2101 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 674427"];
2102 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 674428"];
2103 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 674429"];
2104 [label="return VisitTypeDeclarationCore(parent, extraInfo); 674430"];
2105 [label="return VisitTypeDeclarationCore(parent, extraInfo); 674431"];
2106 [label="VisitTypeDeclarationCore(parent, extraInfo) 674432"];
2107 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 674433"];
2108 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 674434"];
2109 [label="param VisitTypeDeclarationCore(this) 674435"];
2110 [label="var key = CreateBinderCacheKey(parent, extraInfo); 674436"];
2111 [label="var key = CreateBinderCacheKey(parent, extraInfo); 674437"];
2112 [label="CreateBinderCacheKey(parent, extraInfo) 674438"];
2113 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 674439"];
2114 [label="param CreateBinderCacheKey(NodeUsage usage) 674440"];
2115 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 674441"];
2116 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 674442"];
2117 [label="return new BinderCacheKey(node, usage); 674443"];
2118 [label="new BinderCacheKey(node, usage) 674444"];
2119 [label="param BinderCacheKey(this) 674445"];
2120 [label="var key = CreateBinderCacheKey(parent, extraInfo); 674446"];
2121 [label="Binder resultBinder; 674447"];
2122 [label="binderCache 674448"];
2123 [label="get\n                {\n                    return _factory._binderCache;\n                } 674449"];
2124 [label="return _factory._binderCache; 674450"];
2125 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 674451"];
2126 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 674452"];
2127 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 674453"];
2128 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 674454"];
2129 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 674455"];
2130 [label="resultBinder = VisitCore(parent.Parent); 674456"];
2131 [label="VisitCore(parent.Parent) 674457"];
2132 [label="param VisitCore(SyntaxNode node) 674458"];
2133 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 674459"];
2134 [label="param VisitCompilationUnit(this) 674460"];
2135 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 674461"];
2136 [label="IsInUsing(parent) 674462"];
2137 [label="param IsInUsing(CSharpSyntaxNode containingNode) 674463"];
2138 [label="param IsInUsing(this) 674464"];
2139 [label="TextSpan containingSpan = containingNode.Span; 674465"];
2140 [label="SyntaxToken token; 674466"];
2141 [label="token 674467"];
2142 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 674468"];
2143 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 674469"];
2144 [label="token = containingNode.FindToken(_position); 674470"];
2145 [label="token = containingNode.FindToken(_position); 674471"];
2146 [label="var node = token.Parent; 674472"];
2147 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 674473"];
2148 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 674474"];
2149 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 674475"];
2150 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 674476"];
2151 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 674477"];
2152 [label="node = node.Parent; 674478"];
2153 [label="return false; 674479"];
2154 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 674480"];
2155 [label="InScript 674481"];
2156 [label="get\n                {\n                    return _factory.InScript;\n                } 674482"];
2157 [label="_factory.InScript 674483"];
2158 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 674484"];
2159 [label="return _factory.InScript; 674485"];
2160 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 674486"];
2161 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 674487"];
2162 [label="param VisitCompilationUnit(bool inUsing) 674488"];
2163 [label="param VisitCompilationUnit(bool inScript) 674489"];
2164 [label="param VisitCompilationUnit(this) 674490"];
2165 [label="syntaxTree 674491"];
2166 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 674492"];
2167 [label="return _factory._syntaxTree; 674493"];
2168 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 674494"];
2169 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 674495"];
2170 [label="inScript 674496"];
2171 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 674497"];
2172 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 674498"];
2173 [label="return _factory._binderCache; 674499"];
2174 [label="param Equals(BinderCacheKey other) 674500"];
2175 [label="param Equals(this) 674501"];
2176 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 674502"];
2177 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 674503"];
2178 [label="resultBinder.ContainingMemberOrLambda 674504"];
2179 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 674505"];
2180 [label="var merged = _container as MergedNamespaceSymbol; 674506"];
2181 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 674507"];
2182 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 674508"];
2183 [label="((object)merged != null) 674509"];
2184 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 674510"];
2185 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 674511"];
2186 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 674512"];
2187 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 674513"];
2188 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 674514"];
2189 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 674515"];
2190 [label="new InContainerBinder(typeSymbol, resultBinder) 674516"];
2191 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 674517"];
2192 [label="param InContainerBinder(Binder next) 674518"];
2193 [label="param InContainerBinder(Imports imports = null) 674519"];
2194 [label="param InContainerBinder(this) 674520"];
2195 [label="RoslynDebug.Assert(next != null); 674521"];
2196 [label="RoslynDebug.Assert(next != null); 674522"];
2197 [label="this.Flags 674523"];
2198 [label="this.Compilation 674524"];
2199 [label="_container 674525"];
2200 [label="Debug.Assert((object)container != null || imports != null); 674526"];
2201 [label="Debug.Assert((object)container != null || imports != null); 674527"];
2202 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 674528"];
2203 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 674529"];
2204 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 674530"];
2205 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 674531"];
2206 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 674532"];
2207 [label="param WithUnsafeRegionIfNecessary(this) 674533"];
2208 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 674534"];
2209 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 674535"];
2210 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 674536"];
2211 [label="param Includes(this BinderFlags self) 674537"];
2212 [label="param Includes(BinderFlags other) 674538"];
2213 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 674539"];
2214 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 674540"];
2215 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 674541"];
2216 [label="binderCache 674542"];
2217 [label="return _factory._binderCache; 674543"];
2218 [label="binderCache.TryAdd(key, resultBinder); 674544"];
2219 [label="binderCache.TryAdd(key, resultBinder); 674545"];
2220 [label="binderCache.TryAdd(key, resultBinder); 674546"];
2221 [label="binderCache.TryAdd(key, resultBinder); 674547"];
2222 [label="binderCache.TryAdd(key, resultBinder); 674548"];
2223 [label="return resultBinder; 674549"];
2224 [label="return ((CSharpSyntaxNode)node).Accept(this); 674550"];
2225 [label="_binderFactoryVisitorPool.Free(visitor); 674551"];
2226 [label="_binderFactoryVisitorPool.Free(visitor); 674552"];
2227 [label="return result; 674553"];
2228 [label="var diagnostics = c.GetDiagnostics(); 674554"];
2229 [label="Debug.Assert(node != null); 674555"];
2230 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 674556"];
2231 [label="container.AssertMemberExposure(memberOpt); 674557"];
2232 [label="container.AssertMemberExposure(memberOpt); 674558"];
2233 [label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 674559"];
2234 [label="param VisitMethodDeclaration(this) 674560"];
2235 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 674561"];
2236 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 674562"];
2237 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 674563"];
2238 [label="NodeUsage usage; 674564"];
2239 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 674565"];
2240 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 674566"];
2241 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 674567"];
2242 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 674568"];
2243 [label="usage = NodeUsage.Normal; 674569"];
2244 [label="var key = CreateBinderCacheKey(methodDecl, usage); 674570"];
2245 [label="var key = CreateBinderCacheKey(methodDecl, usage); 674571"];
2246 [label="CreateBinderCacheKey(methodDecl, usage) 674572"];
2247 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 674573"];
2248 [label="param CreateBinderCacheKey(NodeUsage usage) 674574"];
2249 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 674575"];
2250 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 674576"];
2251 [label="return new BinderCacheKey(node, usage); 674577"];
2252 [label="new BinderCacheKey(node, usage) 674578"];
2253 [label="param BinderCacheKey(this) 674579"];
2254 [label="var key = CreateBinderCacheKey(methodDecl, usage); 674580"];
2255 [label="Binder resultBinder; 674581"];
2256 [label="binderCache 674582"];
2257 [label="get\n                {\n                    return _factory._binderCache;\n                } 674583"];
2258 [label="return _factory._binderCache; 674584"];
2259 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 674585"];
2260 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 674586"];
2261 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 674587"];
2262 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 674588"];
2263 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 674589"];
2264 [label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 674590"];
2265 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 674591"];
2266 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 674592"];
2267 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 674593"];
2268 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 674594"];
2269 [label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 674595"];
2270 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 674596"];
2271 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 674597"];
2272 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 674598"];
2273 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 674599"];
2274 [label="SourceMemberMethodSymbol method = null; 674600"];
2275 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 674601"];
2276 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 674602"];
2277 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 674603"];
2278 [label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 674604"];
2279 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 674605"];
2280 [label="param WithUnsafeRegionIfNecessary(this) 674606"];
2281 [label="binderCache 674607"];
2282 [label="return _factory._binderCache; 674608"];
2283 [label="binderCache.TryAdd(key, resultBinder); 674609"];
2284 [label="binderCache.TryAdd(key, resultBinder); 674610"];
2285 [label="binderCache.TryAdd(key, resultBinder); 674611"];
2286 [label="binderCache.TryAdd(key, resultBinder); 674612"];
2287 [label="return resultBinder; 674613"];
2288 [label="return ((CSharpSyntaxNode)node).Accept(this); 674614"];
2289 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 674615"];
2290 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 674616"];
2291 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 674617"];
2292 [label="Debug.Assert((object)containing != null); 674618"];
2293 [label="Debug.Assert((object)containing != null); 674619"];
2294 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 674620"];
2295 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 674621"];
2296 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 674622"];
2297 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 674623"];
2298 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 674624"];
2299 [label="param BinderWithContainingMemberOrLambda(Binder next) 674625"];
2300 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 674626"];
2301 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 674627"];
2302 [label="param BinderWithContainingMemberOrLambda(this) 674628"];
2303 [label="next 674629"];
2304 [label="flags 674630"];
2305 [label="param BinderWithContainingMemberOrLambda(this) 674631"];
2306 [label="param Binder(Binder next) 674632"];
2307 [label="param Binder(BinderFlags flags) 674633"];
2308 [label="param Binder(this) 674634"];
2309 [label="internal CSharpCompilation Compilation { get; } 674635"];
2310 [label="Flags 674636"];
2311 [label="protected internal Binder? Next { get; } 674637"];
2312 [label="_lazyConversions 674638"];
2313 [label="_lazyOverloadResolution 674639"];
2314 [label="RoslynDebug.Assert(next != null); 674640"];
2315 [label="RoslynDebug.Assert(next != null); 674641"];
2316 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 674642"];
2317 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 674643"];
2318 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 674644"];
2319 [label="param Includes(this BinderFlags self) 674645"];
2320 [label="param Includes(BinderFlags other) 674646"];
2321 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 674647"];
2322 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 674648"];
2323 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 674649"];
2324 [label="param Includes(this BinderFlags self) 674650"];
2325 [label="param Includes(BinderFlags other) 674651"];
2326 [label="Next 674652"];
2327 [label="this.Compilation 674653"];
2328 [label="_containingMemberOrLambda 674654"];
2329 [label="Debug.Assert(containingMemberOrLambda != null); 674655"];
2330 [label="Debug.Assert(containingMemberOrLambda != null); 674656"];
2331 [label="_containingMemberOrLambda 674657"];
2332 [label="var diagnostics = c.GetDiagnostics(); 674658"];
2333 [label="param BindType(ExpressionSyntax syntax) 674659"];
2334 [label="param BindType(DiagnosticBag diagnostics) 674660"];
2335 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 674661"];
2336 [label="param BindType(bool suppressUseSiteDiagnostics = false) 674662"];
2337 [label="param BindType(this) 674663"];
2338 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 674664"];
2339 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 674665"];
2340 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 674666"];
2341 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 674667"];
2342 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 674668"];
2343 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 674669"];
2344 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 674670"];
2345 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 674671"];
2346 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 674672"];
2347 [label="param BindTypeOrAlias(this) 674673"];
2348 [label="Debug.Assert(diagnostics != null); 674674"];
2349 [label="Debug.Assert(diagnostics != null); 674675"];
2350 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674676"];
2351 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674677"];
2352 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674678"];
2353 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674679"];
2354 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674680"];
2355 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 674681"];
2356 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 674682"];
2357 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 674683"];
2358 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 674684"];
2359 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 674685"];
2360 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 674686"];
2361 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 674687"];
2362 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 674688"];
2363 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 674689"];
2364 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 674690"];
2365 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 674691"];
2366 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 674692"];
2367 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 674693"];
2368 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 674694"];
2369 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 674695"];
2370 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 674696"];
2371 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 674697"];
2372 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 674698"];
2373 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 674699"];
2374 [label="param CreateErrorIfLookupOnTypeParameter(string name) 674700"];
2375 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 674701"];
2376 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 674702"];
2377 [label="param CreateErrorIfLookupOnTypeParameter(this) 674703"];
2378 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 674704"];
2379 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 674705"];
2380 [label="return null; 674706"];
2381 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 674707"];
2382 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 674708"];
2383 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 674709"];
2384 [label="instance.IsClear 674710"];
2385 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 674711"];
2386 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674712"];
2387 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674713"];
2388 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674714"];
2389 [label="Debug.Assert(instance.IsClear); 674715"];
2390 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 674716"];
2391 [label="param LookupSymbolsSimpleName(int arity) 674717"];
2392 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 674718"];
2393 [label="param LookupSymbolsSimpleName(bool diagnose) 674719"];
2394 [label="param LookupSymbolsOrMembersInternal(int arity) 674720"];
2395 [label="param LookupSymbolsOrMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 674721"];
2396 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 674722"];
2397 [label="param LookupSymbolsInternal(int arity) 674723"];
2398 [label="param LookupSymbolsInternal(ConsList<TypeSymbol> basesBeingResolved) 674724"];
2399 [label="param LookupSymbolsInternal(bool diagnose) 674725"];
2400 [label="result.IsClear 674726"];
2401 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 674727"];
2402 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674728"];
2403 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674729"];
2404 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674730"];
2405 [label="Debug.Assert(result.IsClear); 674731"];
2406 [label="Debug.Assert(options.AreValid()); 674732"];
2407 [label="options.AreValid() 674733"];
2408 [label="param AreValid(this LookupOptions options) 674734"];
2409 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 674735"];
2410 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 674736"];
2411 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 674737"];
2412 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 674738"];
2413 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 674739"];
2414 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 674740"];
2415 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 674741"];
2416 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 674742"];
2417 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 674743"];
2418 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 674744"];
2419 [label="return OnlyOneBitSet(onlyOptions); 674745"];
2420 [label="OnlyOneBitSet(onlyOptions) 674746"];
2421 [label="param OnlyOneBitSet(LookupOptions o) 674747"];
2422 [label="return (o & (o - 1)) == 0; 674748"];
2423 [label="return (o & (o - 1)) == 0; 674749"];
2424 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 674750"];
2425 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 674751"];
2426 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 674752"];
2427 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 674753"];
2428 [label="param LookupSymbolsInSingleBinder(LookupResult result) 674754"];
2429 [label="param LookupSymbolsInSingleBinder(string name) 674755"];
2430 [label="param LookupSymbolsInSingleBinder(int arity) 674756"];
2431 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 674757"];
2432 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 674758"];
2433 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 674759"];
2434 [label="param LookupSymbolsInSingleBinder(bool diagnose) 674760"];
2435 [label="param LookupSymbolsInSingleBinder(this) 674761"];
2436 [label="result.IsClear 674762"];
2437 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 674763"];
2438 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674764"];
2439 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674765"];
2440 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674766"];
2441 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 674767"];
2442 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 674768"];
2443 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 674769"];
2444 [label="param LookupSymbolsInSingleBinder(int arity) 674770"];
2445 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 674771"];
2446 [label="param LookupSymbolsInSingleBinder(bool diagnose) 674772"];
2447 [label="result.IsClear 674773"];
2448 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 674774"];
2449 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674775"];
2450 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674776"];
2451 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674777"];
2452 [label="Debug.Assert(result.IsClear); 674778"];
2453 [label="IsSubmissionClass 674779"];
2454 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 674780"];
2455 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 674781"];
2456 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 674782"];
2457 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 674783"];
2458 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674784"];
2459 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674785"];
2460 [label="param LookupMembersInternal(int arity) 674786"];
2461 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 674787"];
2462 [label="param LookupMembersInternal(bool diagnose) 674788"];
2463 [label="param LookupMembersInternal(this) 674789"];
2464 [label="Debug.Assert(options.AreValid()); 674790"];
2465 [label="options.AreValid() 674791"];
2466 [label="param AreValid(this LookupOptions options) 674792"];
2467 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 674793"];
2468 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 674794"];
2469 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 674795"];
2470 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 674796"];
2471 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 674797"];
2472 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 674798"];
2473 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 674799"];
2474 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 674800"];
2475 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 674801"];
2476 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 674802"];
2477 [label="return OnlyOneBitSet(onlyOptions); 674803"];
2478 [label="OnlyOneBitSet(onlyOptions) 674804"];
2479 [label="param OnlyOneBitSet(LookupOptions o) 674805"];
2480 [label="return (o & (o - 1)) == 0; 674806"];
2481 [label="return (o & (o - 1)) == 0; 674807"];
2482 [label="Debug.Assert(arity >= 0); 674808"];
2483 [label="Debug.Assert(arity >= 0); 674809"];
2484 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674810"];
2485 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674811"];
2486 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674812"];
2487 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674813"];
2488 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 674814"];
2489 [label="param LookupMembersInType(LookupResult result) 674815"];
2490 [label="param LookupMembersInType(TypeSymbol type) 674816"];
2491 [label="param LookupMembersInType(string name) 674817"];
2492 [label="param LookupMembersInType(int arity) 674818"];
2493 [label="param LookupMembersInType(ConsList<TypeSymbol> basesBeingResolved) 674819"];
2494 [label="param LookupMembersInType(LookupOptions options) 674820"];
2495 [label="param LookupMembersInType(Binder originalBinder) 674821"];
2496 [label="param LookupMembersInType(bool diagnose) 674822"];
2497 [label="param LookupMembersInType(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 674823"];
2498 [label="param LookupMembersInType(this) 674824"];
2499 [label="switch (type.TypeKind)\n            {\n                case TypeKind.TypeParameter:\n                    this.LookupMembersInTypeParameter(result, (TypeParameterSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Interface:\n                    this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Class:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                case TypeKind.Delegate:\n                case TypeKind.Array:\n                case TypeKind.Dynamic:\n                    this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Submission:\n                    this.LookupMembersInSubmissions(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Error:\n                    LookupMembersInErrorType(result, (ErrorTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Pointer:\n                case TypeKind.FunctionPointer:\n                    result.Clear();\n                    break;\n\n                case TypeKind.Unknown:\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);\n            } 674825"];
2500 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674826"];
2501 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674827"];
2502 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674828"];
2503 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674829"];
2504 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674830"];
2505 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674831"];
2506 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674832"];
2507 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674833"];
2508 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 674834"];
2509 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 674835"];
2510 [label="param LookupMembersInClass(LookupResult result) 674836"];
2511 [label="param LookupMembersInClass(TypeSymbol type) 674837"];
2512 [label="param LookupMembersInClass(string name) 674838"];
2513 [label="param LookupMembersInClass(int arity) 674839"];
2514 [label="param LookupMembersInClass(ConsList<TypeSymbol> basesBeingResolved) 674840"];
2515 [label="param LookupMembersInClass(LookupOptions options) 674841"];
2516 [label="param LookupMembersInClass(Binder originalBinder) 674842"];
2517 [label="param LookupMembersInClass(bool diagnose) 674843"];
2518 [label="param LookupMembersInClass(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 674844"];
2519 [label="param LookupMembersInClass(this) 674845"];
2520 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674846"];
2521 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674847"];
2522 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674848"];
2523 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674849"];
2524 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674850"];
2525 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674851"];
2526 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674852"];
2527 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674853"];
2528 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 674854"];
2529 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 674855"];
2530 [label="param LookupMembersInClass(LookupResult result) 674856"];
2531 [label="param LookupMembersInClass(TypeSymbol type) 674857"];
2532 [label="param LookupMembersInClass(string name) 674858"];
2533 [label="param LookupMembersInClass(int arity) 674859"];
2534 [label="param LookupMembersInClass(ConsList<TypeSymbol> basesBeingResolved) 674860"];
2535 [label="param LookupMembersInClass(LookupOptions options) 674861"];
2536 [label="param LookupMembersInClass(Binder originalBinder) 674862"];
2537 [label="param LookupMembersInClass(TypeSymbol accessThroughType) 674863"];
2538 [label="param LookupMembersInClass(bool diagnose) 674864"];
2539 [label="param LookupMembersInClass(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 674865"];
2540 [label="param LookupMembersInClass(this) 674866"];
2541 [label="Debug.Assert((object)type != null); 674867"];
2542 [label="Debug.Assert((object)type != null); 674868"];
2543 [label="Debug.Assert(!type.IsInterfaceType() && type.TypeKind != TypeKind.TypeParameter); 674869"];
2544 [label="TypeSymbol currentType = type; 674870"];
2545 [label="LookupResult.GetInstance() 674871"];
2546 [label="var instance = s_poolInstance.Allocate(); 674872"];
2547 [label="_kind 674873"];
2548 [label="_symbolList 674874"];
2549 [label="_error 674875"];
2550 [label="_pool 674876"];
2551 [label="instance.IsClear 674877"];
2552 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 674878"];
2553 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674879"];
2554 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674880"];
2555 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 674881"];
2556 [label="Debug.Assert(instance.IsClear); 674882"];
2557 [label="var tmp = LookupResult.GetInstance(); 674883"];
2558 [label="PooledHashSet<NamedTypeSymbol> visited = null; 674884"];
2559 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 674885"];
2560 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 674886"];
2561 [label="tmp.Clear() 674887"];
2562 [label="param Clear(this) 674888"];
2563 [label="tmp.Clear(); 674889"];
2564 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674890"];
2565 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674891"];
2566 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674892"];
2567 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674893"];
2568 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674894"];
2569 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674895"];
2570 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674896"];
2571 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674897"];
2572 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674898"];
2573 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674899"];
2574 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 674900"];
2575 [label="param LookupMembersWithoutInheritance(LookupResult result) 674901"];
2576 [label="param LookupMembersWithoutInheritance(TypeSymbol type) 674902"];
2577 [label="param LookupMembersWithoutInheritance(string name) 674903"];
2578 [label="param LookupMembersWithoutInheritance(int arity) 674904"];
2579 [label="param LookupMembersWithoutInheritance(LookupOptions options) 674905"];
2580 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 674906"];
2581 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 674907"];
2582 [label="param LookupMembersWithoutInheritance(bool diagnose) 674908"];
2583 [label="param LookupMembersWithoutInheritance(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 674909"];
2584 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 674910"];
2585 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 674911"];
2586 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 674912"];
2587 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 674913"];
2588 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 674914"];
2589 [label="GetCandidateMembers(type, name, options, originalBinder) 674915"];
2590 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 674916"];
2591 [label="param GetCandidateMembers(string name) 674917"];
2592 [label="param GetCandidateMembers(LookupOptions options) 674918"];
2593 [label="param GetCandidateMembers(Binder originalBinder) 674919"];
2594 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 674920"];
2595 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 674921"];
2596 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 674922"];
2597 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 674923"];
2598 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674924"];
2599 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674925"];
2600 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674926"];
2601 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674927"];
2602 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674928"];
2603 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674929"];
2604 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 674930"];
2605 [label="param MergePrioritized(LookupResult other) 674931"];
2606 [label="param MergePrioritized(this) 674932"];
2607 [label="other.Kind 674933"];
2608 [label="get\n            {\n                return _kind;\n            } 674934"];
2609 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 674935"];
2610 [label="Kind 674936"];
2611 [label="get\n            {\n                return _kind;\n            } 674937"];
2612 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 674938"];
2613 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 674939"];
2614 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 674940"];
2615 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 674941"];
2616 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 674942"];
2617 [label="tmp.IsMultiViable 674943"];
2618 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 674944"];
2619 [label="return _kind; 674945"];
2620 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 674946"];
2621 [label="result.IsMultiViable 674947"];
2622 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 674948"];
2623 [label="return _kind; 674949"];
2624 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 674950"];
2625 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 674951"];
2626 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 674952"];
2627 [label="originalBinder.InCrefButNotParameterOrReturnType 674953"];
2628 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 674954"];
2629 [label="InCref 674955"];
2630 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 674956"];
2631 [label="return this.Flags.Includes(BinderFlags.Cref); 674957"];
2632 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 674958"];
2633 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 674959"];
2634 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 674960"];
2635 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 674961"];
2636 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 674962"];
2637 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 674963"];
2638 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 674964"];
2639 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 674965"];
2640 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 674966"];
2641 [label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 674967"];
2642 [label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 674968"];
2643 [label="tmp.Clear(); 674969"];
2644 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674970"];
2645 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674971"];
2646 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674972"];
2647 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 674973"];
2648 [label="param LookupMembersWithoutInheritance(LookupResult result) 674974"];
2649 [label="param LookupMembersWithoutInheritance(int arity) 674975"];
2650 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 674976"];
2651 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 674977"];
2652 [label="param LookupMembersWithoutInheritance(bool diagnose) 674978"];
2653 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 674979"];
2654 [label="param GetCandidateMembers(Binder originalBinder) 674980"];
2655 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 674981"];
2656 [label="param MergePrioritized(LookupResult other) 674982"];
2657 [label="param MergePrioritized(this) 674983"];
2658 [label="other.Kind 674984"];
2659 [label="get\n            {\n                return _kind;\n            } 674985"];
2660 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 674986"];
2661 [label="Kind 674987"];
2662 [label="get\n            {\n                return _kind;\n            } 674988"];
2663 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 674989"];
2664 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 674990"];
2665 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 674991"];
2666 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 674992"];
2667 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 674993"];
2668 [label="tmp.IsMultiViable 674994"];
2669 [label="return _kind; 674995"];
2670 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 674996"];
2671 [label="result.IsMultiViable 674997"];
2672 [label="return _kind; 674998"];
2673 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 674999"];
2674 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 675000"];
2675 [label="originalBinder.InCrefButNotParameterOrReturnType 675001"];
2676 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 675002"];
2677 [label="InCref 675003"];
2678 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 675004"];
2679 [label="return this.Flags.Includes(BinderFlags.Cref); 675005"];
2680 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 675006"];
2681 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 675007"];
2682 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 675008"];
2683 [label="visited?.Free(); 675009"];
2684 [label="tmp.Free() 675010"];
2685 [label="param Free(this) 675011"];
2686 [label="_symbolList.Clear(); 675012"];
2687 [label="this.Clear(); 675013"];
2688 [label="tmp.Free(); 675014"];
2689 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 675015"];
2690 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 675016"];
2691 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675017"];
2692 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675018"];
2693 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675019"];
2694 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675020"];
2695 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675021"];
2696 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675022"];
2697 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 675023"];
2698 [label="param LookupSymbol(Binder originalBinder) 675024"];
2699 [label="param LookupSymbol(LookupResult result) 675025"];
2700 [label="param LookupSymbol(string name) 675026"];
2701 [label="param LookupSymbol(int arity) 675027"];
2702 [label="param LookupSymbol(ConsList<TypeSymbol> basesBeingResolved) 675028"];
2703 [label="param LookupSymbol(LookupOptions options) 675029"];
2704 [label="param LookupSymbol(bool diagnose) 675030"];
2705 [label="param LookupSymbol(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 675031"];
2706 [label="param LookupSymbol(this) 675032"];
2707 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675033"];
2708 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675034"];
2709 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675035"];
2710 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675036"];
2711 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675037"];
2712 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675038"];
2713 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675039"];
2714 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675040"];
2715 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 675041"];
2716 [label="param LookupSymbolInAliases(Binder originalBinder) 675042"];
2717 [label="param LookupSymbolInAliases(LookupResult result) 675043"];
2718 [label="param LookupSymbolInAliases(string name) 675044"];
2719 [label="param LookupSymbolInAliases(int arity) 675045"];
2720 [label="param LookupSymbolInAliases(ConsList<TypeSymbol> basesBeingResolved) 675046"];
2721 [label="param LookupSymbolInAliases(LookupOptions options) 675047"];
2722 [label="param LookupSymbolInAliases(bool diagnose) 675048"];
2723 [label="param LookupSymbolInAliases(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 675049"];
2724 [label="param LookupSymbolInAliases(this) 675050"];
2725 [label="originalBinder.IsSemanticModelBinder 675051"];
2726 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 675052"];
2727 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 675053"];
2728 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 675054"];
2729 [label="this.Flags.Includes(BinderFlags.SemanticModel) 675055"];
2730 [label="param Includes(this BinderFlags self) 675056"];
2731 [label="param Includes(BinderFlags other) 675057"];
2732 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 675058"];
2733 [label="AliasAndUsingDirective alias; 675059"];
2734 [label="alias 675060"];
2735 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 675061"];
2736 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 675062"];
2737 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 675063"];
2738 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 675064"];
2739 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675065"];
2740 [label="result.IsMultiViable 675066"];
2741 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 675067"];
2742 [label="return _kind; 675068"];
2743 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 675069"];
2744 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 675070"];
2745 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 675071"];
2746 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 675072"];
2747 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675073"];
2748 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675074"];
2749 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675075"];
2750 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675076"];
2751 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675077"];
2752 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675078"];
2753 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675079"];
2754 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675080"];
2755 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675081"];
2756 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 675082"];
2757 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 675083"];
2758 [label="param LookupSymbolInUsings(Binder originalBinder) 675084"];
2759 [label="param LookupSymbolInUsings(LookupResult result) 675085"];
2760 [label="param LookupSymbolInUsings(string name) 675086"];
2761 [label="param LookupSymbolInUsings(int arity) 675087"];
2762 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 675088"];
2763 [label="param LookupSymbolInUsings(LookupOptions options) 675089"];
2764 [label="param LookupSymbolInUsings(bool diagnose) 675090"];
2765 [label="param LookupSymbolInUsings(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 675091"];
2766 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 675092"];
2767 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 675093"];
2768 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 675094"];
2769 [label="param Includes(this BinderFlags self) 675095"];
2770 [label="param Includes(BinderFlags other) 675096"];
2771 [label="originalBinder.IsSemanticModelBinder 675097"];
2772 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 675098"];
2773 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 675099"];
2774 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 675100"];
2775 [label="this.Flags.Includes(BinderFlags.SemanticModel) 675101"];
2776 [label="param Includes(this BinderFlags self) 675102"];
2777 [label="param Includes(BinderFlags other) 675103"];
2778 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 675104"];
2779 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 675105"];
2780 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 675106"];
2781 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675107"];
2782 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675108"];
2783 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 675109"];
2784 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 675110"];
2785 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 675111"];
2786 [label="param LookupSymbolsInSingleBinder(int arity) 675112"];
2787 [label="param LookupSymbolsInSingleBinder(bool diagnose) 675113"];
2788 [label="result.IsClear 675114"];
2789 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 675115"];
2790 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675116"];
2791 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675117"];
2792 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675118"];
2793 [label="Debug.Assert(result.IsClear); 675119"];
2794 [label="IsSubmissionClass 675120"];
2795 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 675121"];
2796 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 675122"];
2797 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 675123"];
2798 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 675124"];
2799 [label="param LookupMembersInternal(int arity) 675125"];
2800 [label="param LookupMembersInternal(bool diagnose) 675126"];
2801 [label="Debug.Assert(options.AreValid()); 675127"];
2802 [label="options.AreValid() 675128"];
2803 [label="param AreValid(this LookupOptions options) 675129"];
2804 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 675130"];
2805 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 675131"];
2806 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 675132"];
2807 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 675133"];
2808 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 675134"];
2809 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 675135"];
2810 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 675136"];
2811 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 675137"];
2812 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 675138"];
2813 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 675139"];
2814 [label="return OnlyOneBitSet(onlyOptions); 675140"];
2815 [label="OnlyOneBitSet(onlyOptions) 675141"];
2816 [label="param OnlyOneBitSet(LookupOptions o) 675142"];
2817 [label="return (o & (o - 1)) == 0; 675143"];
2818 [label="return (o & (o - 1)) == 0; 675144"];
2819 [label="Debug.Assert(arity >= 0); 675145"];
2820 [label="Debug.Assert(arity >= 0); 675146"];
2821 [label="param LookupMembersInNamespace(int arity) 675147"];
2822 [label="param LookupMembersInNamespace(bool diagnose) 675148"];
2823 [label="param GetCandidateMembers(Binder originalBinder) 675149"];
2824 [label="param CheckViability(int arity) 675150"];
2825 [label="param CheckViability(TypeSymbol accessThroughType) 675151"];
2826 [label="param CheckViability(bool diagnose) 675152"];
2827 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 675153"];
2828 [label="bool inaccessibleViaQualifier; 675154"];
2829 [label="DiagnosticInfo diagInfo; 675155"];
2830 [label="param WrongArity(Symbol symbol) 675156"];
2831 [label="param WrongArity(int arity) 675157"];
2832 [label="param WrongArity(bool diagnose) 675158"];
2833 [label="param WrongArity(LookupOptions options) 675159"];
2834 [label="param WrongArity(out DiagnosticInfo diagInfo) 675160"];
2835 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 675161"];
2836 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 675162"];
2837 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 675163"];
2838 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 675164"];
2839 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 675165"];
2840 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 675166"];
2841 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 675167"];
2842 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 675168"];
2843 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 675169"];
2844 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 675170"];
2845 [label="options.IsAttributeTypeLookup() 675171"];
2846 [label="param IsAttributeTypeLookup(this LookupOptions options) 675172"];
2847 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 675173"];
2848 [label="diagInfo = null; 675174"];
2849 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 675175"];
2850 [label="RefineAccessThroughType(options, accessThroughType) 675176"];
2851 [label="param RefineAccessThroughType(LookupOptions options) 675177"];
2852 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 675178"];
2853 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 675179"];
2854 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 675180"];
2855 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 675181"];
2856 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 675182"];
2857 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 675183"];
2858 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 675184"];
2859 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 675185"];
2860 [label="param IsAccessible(TypeSymbol accessThroughType) 675186"];
2861 [label="param IsAccessible(out bool failedThroughTypeCheck) 675187"];
2862 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 675188"];
2863 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 675189"];
2864 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 675190"];
2865 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 675191"];
2866 [label="param Includes(this BinderFlags self) 675192"];
2867 [label="param Includes(BinderFlags other) 675193"];
2868 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 675194"];
2869 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 675195"];
2870 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 675196"];
2871 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 675197"];
2872 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 675198"];
2873 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 675199"];
2874 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 675200"];
2875 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 675201"];
2876 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 675202"];
2877 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 675203"];
2878 [label="this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics) 675204"];
2879 [label="param IsSymbolAccessibleConditional(Symbol symbol) 675205"];
2880 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 675206"];
2881 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 675207"];
2882 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 675208"];
2883 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 675209"];
2884 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 675210"];
2885 [label="param IsSymbolAccessibleConditional(this) 675211"];
2886 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 675212"];
2887 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 675213"];
2888 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 675214"];
2889 [label="param Includes(this BinderFlags self) 675215"];
2890 [label="param Includes(BinderFlags other) 675216"];
2891 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675217"];
2892 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675218"];
2893 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675219"];
2894 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675220"];
2895 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675221"];
2896 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 675222"];
2897 [label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 675223"];
2898 [label="param IsSymbolAccessible(Symbol symbol) 675224"];
2899 [label="param IsSymbolAccessible(NamedTypeSymbol within) 675225"];
2900 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 675226"];
2901 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 675227"];
2902 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 675228"];
2903 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 675229"];
2904 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675230"];
2905 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675231"];
2906 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675232"];
2907 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675233"];
2908 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675234"];
2909 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675235"];
2910 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 675236"];
2911 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 675237"];
2912 [label="param IsSymbolAccessibleCore(Symbol symbol) 675238"];
2913 [label="param IsSymbolAccessibleCore(Symbol within) 675239"];
2914 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 675240"];
2915 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 675241"];
2916 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 675242"];
2917 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 675243"];
2918 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 675244"];
2919 [label="Debug.Assert((object)symbol != null); 675245"];
2920 [label="Debug.Assert((object)symbol != null); 675246"];
2921 [label="Debug.Assert((object)within != null); 675247"];
2922 [label="Debug.Assert((object)within != null); 675248"];
2923 [label="Debug.Assert(within.IsDefinition); 675249"];
2924 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 675250"];
2925 [label="failedThroughTypeCheck = false; 675251"];
2926 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 675252"];
2927 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 675253"];
2928 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 675254"];
2929 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 675255"];
2930 [label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 675256"];
2931 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 675257"];
2932 [label="param IsNamedTypeAccessible(Symbol within) 675258"];
2933 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 675259"];
2934 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 675260"];
2935 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 675261"];
2936 [label="Debug.Assert((object)type != null); 675262"];
2937 [label="Debug.Assert((object)type != null); 675263"];
2938 [label="var compilation = within.DeclaringCompilation; 675264"];
2939 [label="bool unused; 675265"];
2940 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 675266"];
2941 [label="var containingType = type.ContainingType; 675267"];
2942 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 675268"];
2943 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 675269"];
2944 [label="(object)containingType == null 675270"];
2945 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 675271"];
2946 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 675272"];
2947 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 675273"];
2948 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 675274"];
2949 [label="param IsNonNestedTypeAccessible(Symbol within) 675275"];
2950 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 675276"];
2951 [label="Debug.Assert((object)assembly != null); 675277"];
2952 [label="Debug.Assert((object)assembly != null); 675278"];
2953 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 675279"];
2954 [label="var withinType = within as NamedTypeSymbol; 675280"];
2955 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 675281"];
2956 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 675282"];
2957 [label="(object)withinType != null 675283"];
2958 [label="withinType.ContainingAssembly 675284"];
2959 [label="return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly); 675285"];
2960 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 675286"];
2961 [label="originalBinder.IsSemanticModelBinder 675287"];
2962 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 675288"];
2963 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 675289"];
2964 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 675290"];
2965 [label="this.Flags.Includes(BinderFlags.SemanticModel) 675291"];
2966 [label="param Includes(this BinderFlags self) 675292"];
2967 [label="param Includes(BinderFlags other) 675293"];
2968 [label="param IsUsingAlias(bool callerIsSemanticModel) 675294"];
2969 [label="return false; 675295"];
2970 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 675296"];
2971 [label="return; 675297"];
2972 [label="result.IsClear 675298"];
2973 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 675299"];
2974 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 675300"];
2975 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 675301"];
2976 [label="binder = scope; 675302"];
2977 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 675303"];
2978 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 675304"];
2979 [label="return binder; 675305"];
2980 [label="diagnostics.Add(node, useSiteDiagnostics); 675306"];
2981 [label="Symbol bindingResult = null; 675307"];
2982 [label="param IsViableType(LookupResult result) 675308"];
2983 [label="result.IsMultiViable 675309"];
2984 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 675310"];
2985 [label="return _kind; 675311"];
2986 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 675312"];
2987 [label="result.Symbols 675313"];
2988 [label="get\n            {\n                return _symbolList;\n            } 675314"];
2989 [label="return _symbolList; 675315"];
2990 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 675316"];
2991 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 675317"];
2992 [label="return true; 675318"];
2993 [label="bool wasError; 675319"];
2994 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 675320"];
2995 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 675321"];
2996 [label="param ResultSymbol(string simpleName) 675322"];
2997 [label="param ResultSymbol(int arity) 675323"];
2998 [label="param ResultSymbol(SyntaxNode where) 675324"];
2999 [label="param ResultSymbol(DiagnosticBag diagnostics) 675325"];
3000 [label="param ResultSymbol(out bool wasError) 675326"];
3001 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 675327"];
3002 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 675328"];
3003 [label="param ResultSymbol(this) 675329"];
3004 [label="Debug.Assert(where != null); 675330"];
3005 [label="Debug.Assert(where != null); 675331"];
3006 [label="Debug.Assert(diagnostics != null); 675332"];
3007 [label="Debug.Assert(diagnostics != null); 675333"];
3008 [label="return _symbolList; 675334"];
3009 [label="wasError = false; 675335"];
3010 [label="return _kind; 675336"];
3011 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 675337"];
3012 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 675338"];
3013 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 675339"];
3014 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 675340"];
3015 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 675341"];
3016 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675342"];
3017 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 675343"];
3018 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675344"];
3019 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 675345"];
3020 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 675346"];
3021 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 675347"];
3022 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 675348"];
3023 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 675349"];
3024 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 675350"];
3025 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 675351"];
3026 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 675352"];
3027 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 675353"];
3028 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 675354"];
3029 [label="param CheckRuntimeSupportForSymbolAccess(this) 675355"];
3030 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 675356"];
3031 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 675357"];
3032 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 675358"];
3033 [label="this.Clear(); 675359"];
3034 [label="result.Free(); 675360"];
3035 [label="param AreNullableAnnotationsGloballyEnabled(this) 675361"];
3036 [label="GetGlobalAnnotationState() 675362"];
3037 [label="param GetGlobalAnnotationState(this) 675363"];
3038 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 675364"];
3039 [label="return false; 675365"];
3040 [label="return GetGlobalAnnotationState(); 675366"];
3041 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 675367"];
3042 [label="param CreateUnannotated(bool isNullableEnabled) 675368"];
3043 [label="if (symbol is null)\n                {\n                    return default;\n                } 675369"];
3044 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 675370"];
3045 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 675371"];
3046 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 675372"];
3047 [label="Debug.Assert(typeWithAnnotations.HasType); 675373"];
3048 [label="_typeWithAnnotations 675374"];
3049 [label="_symbol = null; 675375"];
3050 [label="_symbol 675376"];
3051 [label="_isNullableEnabled = false; 675377"];
3052 [label="_isNullableEnabled 675378"];
3053 [label="symbol.IsType 675379"];
3054 [label="=> !_typeWithAnnotations.IsDefault 675380"];
3055 [label="!_typeWithAnnotations.IsDefault 675381"];
3056 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 675382"];
3057 [label="symbol.IsType 675383"];
3058 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 675384"];
3059 [label="symbol.TypeWithAnnotations 675385"];
3060 [label="=> _typeWithAnnotations 675386"];
3061 [label="_typeWithAnnotations 675387"];
3062 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 675388"];
3063 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 675389"];
3064 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 675390"];
3065 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 675391"];
3066 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 675392"];
3067 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675393"];
3068 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 675394"];
3069 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 675395"];
3070 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675396"];
3071 [label="param ReportDiagnosticsIfObsolete(this) 675397"];
3072 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 675398"];
3073 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 675399"];
3074 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 675400"];
3075 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 675401"];
3076 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 675402"];
3077 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675403"];
3078 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 675404"];
3079 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675405"];
3080 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675406"];
3081 [label="param ReportDiagnosticsIfObsolete(this) 675407"];
3082 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 675408"];
3083 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675409"];
3084 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675410"];
3085 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675411"];
3086 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675412"];
3087 [label="this.ContainingMemberOrLambda 675413"];
3088 [label="get { return _containingMemberOrLambda; } 675414"];
3089 [label="return _containingMemberOrLambda; 675415"];
3090 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675416"];
3091 [label="this.ContainingType 675417"];
3092 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 675418"];
3093 [label="this.ContainingMemberOrLambda 675419"];
3094 [label="get { return _containingMemberOrLambda; } 675420"];
3095 [label="return _containingMemberOrLambda; 675421"];
3096 [label="var member = this.ContainingMemberOrLambda; 675422"];
3097 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675423"];
3098 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675424"];
3099 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 675425"];
3100 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 675426"];
3101 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675427"];
3102 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675428"];
3103 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 675429"];
3104 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675430"];
3105 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 675431"];
3106 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675432"];
3107 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675433"];
3108 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 675434"];
3109 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 675435"];
3110 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675436"];
3111 [label="RoslynDebug.Assert(symbol is object); 675437"];
3112 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 675438"];
3113 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 675439"];
3114 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 675440"];
3115 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 675441"];
3116 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 675442"];
3117 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675443"];
3118 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 675444"];
3119 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 675445"];
3120 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 675446"];
3121 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 675447"];
3122 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 675448"];
3123 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 675449"];
3124 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 675450"];
3125 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675451"];
3126 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 675452"];
3127 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675453"];
3128 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 675454"];
3129 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675455"];
3130 [label="RoslynDebug.Assert(diagnostics != null); 675456"];
3131 [label="RoslynDebug.Assert(diagnostics != null); 675457"];
3132 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 675458"];
3133 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 675459"];
3134 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 675460"];
3135 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 675461"];
3136 [label="DiagnosticInfo? info = null; 675462"];
3137 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 675463"];
3138 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675464"];
3139 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675465"];
3140 [label="return kind; 675466"];
3141 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 675467"];
3142 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 675468"];
3143 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675469"];
3144 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 675470"];
3145 [label="return symbol; 675471"];
3146 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 675472"];
3147 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 675473"];
3148 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 675474"];
3149 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 675475"];
3150 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 675476"];
3151 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 675477"];
3152 [label="param UnwrapAlias(DiagnosticBag diagnostics) 675478"];
3153 [label="param UnwrapAlias(SyntaxNode syntax) 675479"];
3154 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 675480"];
3155 [label="param UnwrapAlias(this) 675481"];
3156 [label="symbol.IsAlias 675482"];
3157 [label="=> _symbol?.Kind == SymbolKind.Alias 675483"];
3158 [label="_symbol 675484"];
3159 [label="_symbol?.Kind == SymbolKind.Alias 675485"];
3160 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 675486"];
3161 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 675487"];
3162 [label="=> _typeWithAnnotations 675488"];
3163 [label="_typeWithAnnotations 675489"];
3164 [label="var diagnostics = c.GetDiagnostics(); 675490"];
3165 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 675491"];
3166 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 675492"];
3167 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 675493"];
3168 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 675494"];
3169 [label="param ValidateParameterNameConflicts(this) 675495"];
3170 [label="PooledHashSet<string>? tpNames = null; 675496"];
3171 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 675497"];
3172 [label="PooledHashSet<string>? pNames = null; 675498"];
3173 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 675499"];
3174 [label="pNames = PooledHashSet<string>.GetInstance(); 675500"];
3175 [label="foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                } 675501"];
3176 [label="var name = p.Name; 675502"];
3177 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 675503"];
3178 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 675504"];
3179 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 675505"];
3180 [label="if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 675506"];
3181 [label="if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 675507"];
3182 [label="if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 675508"];
3183 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 675509"];
3184 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 675510"];
3185 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics) 675511"];
3186 [label="param ValidateDeclarationNameConflictsInScope(Symbol symbol) 675512"];
3187 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 675513"];
3188 [label="param ValidateDeclarationNameConflictsInScope(this) 675514"];
3189 [label="Location location = GetLocation(symbol); 675515"];
3190 [label="GetLocation(symbol) 675516"];
3191 [label="param GetLocation(Symbol symbol) 675517"];
3192 [label="var locations = symbol.Locations; 675518"];
3193 [label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 675519"];
3194 [label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 675520"];
3195 [label="locations.Length != 0 675521"];
3196 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675522"];
3197 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675523"];
3198 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675524"];
3199 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675525"];
3200 [label="ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics) 675526"];
3201 [label="param ValidateNameConflictsInScope(Symbol? symbol) 675527"];
3202 [label="param ValidateNameConflictsInScope(Location location) 675528"];
3203 [label="param ValidateNameConflictsInScope(string name) 675529"];
3204 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 675530"];
3205 [label="param ValidateNameConflictsInScope(this) 675531"];
3206 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 675532"];
3207 [label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 675533"];
3208 [label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 675534"];
3209 [label="for (Binder? binder = this; binder != null; binder = binder.Next)\n            {\n                // no local scopes enclose members\n                if (binder is InContainerBinder)\n                {\n                    return false;\n                }\n\n                var scope = binder as LocalScopeBinder;\n                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                }\n\n                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.\n                if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                }\n\n                if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                }\n            } 675535"];
3210 [label="for (Binder? binder = this; binder != null; binder = binder.Next)\n            {\n                // no local scopes enclose members\n                if (binder is InContainerBinder)\n                {\n                    return false;\n                }\n\n                var scope = binder as LocalScopeBinder;\n                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                }\n\n                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.\n                if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                }\n\n                if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                }\n            } 675536"];
3211 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 675537"];
3212 [label="var scope = binder as LocalScopeBinder; 675538"];
3213 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 675539"];
3214 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 675540"];
3215 [label="binder.IsNestedFunctionBinder 675541"];
3216 [label="=> false 675542"];
3217 [label="false 675543"];
3218 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 675544"];
3219 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 675545"];
3220 [label="binder.IsLastBinderWithinMember() 675546"];
3221 [label="param IsLastBinderWithinMember(this) 675547"];
3222 [label="this.ContainingMemberOrLambda 675548"];
3223 [label="get { return _containingMemberOrLambda; } 675549"];
3224 [label="return _containingMemberOrLambda; 675550"];
3225 [label="var containingMemberOrLambda = this.ContainingMemberOrLambda; 675551"];
3226 [label="switch (containingMemberOrLambda?.Kind)\n            {\n                case null:\n                case SymbolKind.NamedType:\n                case SymbolKind.Namespace:\n                    return true;\n                default:\n                    return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda;\n            } 675552"];
3227 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675553"];
3228 [label=".ContainingMemberOrLambda 675554"];
3229 [label="_container 675555"];
3230 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675556"];
3231 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 675557"];
3232 [label="return false; 675558"];
3233 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675559"];
3234 [label="tpNames?.Free(); 675560"];
3235 [label="pNames?.Free(); 675561"];
3236 [label="return bindPredefined(syntax, diagnostics); 675562"];
3237 [label="return bindPredefined(syntax, diagnostics); 675563"];
3238 [label="bindPredefined(syntax, diagnostics) 675564"];
3239 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 675565"];
3240 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 675566"];
3241 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 675567"];
3242 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 675568"];
3243 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 675569"];
3244 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 675570"];
3245 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 675571"];
3246 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 675572"];
3247 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 675573"];
3248 [label="param BindPredefinedTypeSymbol(this) 675574"];
3249 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 675575"];
3250 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 675576"];
3251 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 675577"];
3252 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 675578"];
3253 [label="param GetSpecialType(SpecialType typeId) 675579"];
3254 [label="param GetSpecialType(DiagnosticBag diagnostics) 675580"];
3255 [label="param GetSpecialType(SyntaxNode node) 675581"];
3256 [label="param GetSpecialType(this) 675582"];
3257 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 675583"];
3258 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 675584"];
3259 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 675585"];
3260 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 675586"];
3261 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 675587"];
3262 [label="param GetSpecialType(CSharpCompilation compilation) 675588"];
3263 [label="param GetSpecialType(SpecialType typeId) 675589"];
3264 [label="param GetSpecialType(SyntaxNode node) 675590"];
3265 [label="param GetSpecialType(DiagnosticBag diagnostics) 675591"];
3266 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 675592"];
3267 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 675593"];
3268 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675594"];
3269 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675595"];
3270 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 675596"];
3271 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 675597"];
3272 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 675598"];
3273 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 675599"];
3274 [label="param ReportUseSiteDiagnostics(Symbol symbol) 675600"];
3275 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675601"];
3276 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 675602"];
3277 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675603"];
3278 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675604"];
3279 [label="return typeSymbol; 675605"];
3280 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 675606"];
3281 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 675607"];
3282 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 675608"];
3283 [label="param AreNullableAnnotationsEnabled(this) 675609"];
3284 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 675610"];
3285 [label="type 675611"];
3286 [label="param operator(TypeWithAnnotations typeWithAnnotations) 675612"];
3287 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 675613"];
3288 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 675614"];
3289 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 675615"];
3290 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 675616"];
3291 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 675617"];
3292 [label="Debug.Assert(typeWithAnnotations.HasType); 675618"];
3293 [label="_symbol = null; 675619"];
3294 [label="_symbol 675620"];
3295 [label="_isNullableEnabled = false; 675621"];
3296 [label="_isNullableEnabled 675622"];
3297 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 675623"];
3298 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 675624"];
3299 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 675625"];
3300 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675626"];
3301 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 675627"];
3302 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675628"];
3303 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675629"];
3304 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675630"];
3305 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675631"];
3306 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675632"];
3307 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675633"];
3308 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675634"];
3309 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675635"];
3310 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 675636"];
3311 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675637"];
3312 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675638"];
3313 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675639"];
3314 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675640"];
3315 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 675641"];
3316 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 675642"];
3317 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675643"];
3318 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 675644"];
3319 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675645"];
3320 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675646"];
3321 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675647"];
3322 [label="RoslynDebug.Assert(diagnostics != null); 675648"];
3323 [label="RoslynDebug.Assert(diagnostics != null); 675649"];
3324 [label="DiagnosticInfo? info = null; 675650"];
3325 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 675651"];
3326 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675652"];
3327 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675653"];
3328 [label="return kind; 675654"];
3329 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 675655"];
3330 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 675656"];
3331 [label="=> _symbol?.Kind == SymbolKind.Alias 675657"];
3332 [label="_symbol 675658"];
3333 [label="_symbol?.Kind == SymbolKind.Alias 675659"];
3334 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 675660"];
3335 [label="Debug.Assert(node != null); 675661"];
3336 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 675662"];
3337 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 675663"];
3338 [label="SourceMemberMethodSymbol method = null; 675664"];
3339 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 675665"];
3340 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 675666"];
3341 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 675667"];
3342 [label="param Includes(this BinderFlags self) 675668"];
3343 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 675669"];
3344 [label="param Includes(this BinderFlags self) 675670"];
3345 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 675671"];
3346 [label="pNames?.Free(); 675672"];
3347 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 675673"];
3348 [label="param GetSpecialType(DiagnosticBag diagnostics) 675674"];
3349 [label="param GetSpecialType(SyntaxNode node) 675675"];
3350 [label="param GetSpecialType(SyntaxNode node) 675676"];
3351 [label="param GetSpecialType(DiagnosticBag diagnostics) 675677"];
3352 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675678"];
3353 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675679"];
3354 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 675680"];
3355 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675681"];
3356 [label="Debug.Assert(typeWithAnnotations.HasType); 675682"];
3357 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 675683"];
3358 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675684"];
3359 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675685"];
3360 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675686"];
3361 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675687"];
3362 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675688"];
3363 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675689"];
3364 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 675690"];
3365 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 675691"];
3366 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675692"];
3367 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675693"];
3368 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675694"];
3369 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 675695"];
3370 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 675696"];
3371 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675697"];
3372 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 675698"];
3373 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675699"];
3374 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675700"];
3375 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675701"];
3376 [label="RoslynDebug.Assert(diagnostics != null); 675702"];
3377 [label="RoslynDebug.Assert(diagnostics != null); 675703"];
3378 [label="DiagnosticInfo? info = null; 675704"];
3379 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 675705"];
3380 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675706"];
3381 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675707"];
3382 [label="return kind; 675708"];
3383 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 675709"];
3384 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 675710"];
3385 [label="=> _symbol?.Kind == SymbolKind.Alias 675711"];
3386 [label="_symbol 675712"];
3387 [label="_symbol?.Kind == SymbolKind.Alias 675713"];
3388 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 675714"];
3389 [label="Debug.Assert(node != null); 675715"];
3390 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 675716"];
3391 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 675717"];
3392 [label="SourceMemberMethodSymbol method = null; 675718"];
3393 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 675719"];
3394 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 675720"];
3395 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 675721"];
3396 [label="param Includes(this BinderFlags self) 675722"];
3397 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 675723"];
3398 [label="param Includes(this BinderFlags self) 675724"];
3399 [label="param GetSpecialType(DiagnosticBag diagnostics) 675725"];
3400 [label="param GetSpecialType(SyntaxNode node) 675726"];
3401 [label="param GetSpecialType(SyntaxNode node) 675727"];
3402 [label="param GetSpecialType(DiagnosticBag diagnostics) 675728"];
3403 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675729"];
3404 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675730"];
3405 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 675731"];
3406 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675732"];
3407 [label="Debug.Assert(typeWithAnnotations.HasType); 675733"];
3408 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 675734"];
3409 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675735"];
3410 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675736"];
3411 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675737"];
3412 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675738"];
3413 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675739"];
3414 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 675740"];
3415 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675741"];
3416 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675742"];
3417 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675743"];
3418 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 675744"];
3419 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 675745"];
3420 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675746"];
3421 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 675747"];
3422 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675748"];
3423 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675749"];
3424 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675750"];
3425 [label="RoslynDebug.Assert(diagnostics != null); 675751"];
3426 [label="RoslynDebug.Assert(diagnostics != null); 675752"];
3427 [label="DiagnosticInfo? info = null; 675753"];
3428 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 675754"];
3429 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675755"];
3430 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675756"];
3431 [label="return kind; 675757"];
3432 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 675758"];
3433 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 675759"];
3434 [label="=> _symbol?.Kind == SymbolKind.Alias 675760"];
3435 [label="_symbol 675761"];
3436 [label="_symbol?.Kind == SymbolKind.Alias 675762"];
3437 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 675763"];
3438 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 675764"];
3439 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 675765"];
3440 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 675766"];
3441 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 675767"];
3442 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 675768"];
3443 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 675769"];
3444 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675770"];
3445 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675771"];
3446 [label="param ValidateNameConflictsInScope(Symbol? symbol) 675772"];
3447 [label="param ValidateNameConflictsInScope(Location location) 675773"];
3448 [label="param ValidateNameConflictsInScope(string name) 675774"];
3449 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 675775"];
3450 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 675776"];
3451 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 675777"];
3452 [label="var scope = binder as LocalScopeBinder; 675778"];
3453 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 675779"];
3454 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 675780"];
3455 [label="binder.IsNestedFunctionBinder 675781"];
3456 [label="=> false 675782"];
3457 [label="false 675783"];
3458 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 675784"];
3459 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675785"];
3460 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675786"];
3461 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 675787"];
3462 [label="return false; 675788"];
3463 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675789"];
3464 [label="pNames?.Free(); 675790"];
3465 [label="param GetSpecialType(DiagnosticBag diagnostics) 675791"];
3466 [label="param GetSpecialType(SyntaxNode node) 675792"];
3467 [label="param GetSpecialType(DiagnosticBag diagnostics) 675793"];
3468 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675794"];
3469 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675795"];
3470 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 675796"];
3471 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675797"];
3472 [label="Debug.Assert(typeWithAnnotations.HasType); 675798"];
3473 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 675799"];
3474 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675800"];
3475 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675801"];
3476 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675802"];
3477 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675803"];
3478 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675804"];
3479 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 675805"];
3480 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675806"];
3481 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675807"];
3482 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675808"];
3483 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 675809"];
3484 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 675810"];
3485 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675811"];
3486 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 675812"];
3487 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675813"];
3488 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675814"];
3489 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675815"];
3490 [label="RoslynDebug.Assert(diagnostics != null); 675816"];
3491 [label="RoslynDebug.Assert(diagnostics != null); 675817"];
3492 [label="DiagnosticInfo? info = null; 675818"];
3493 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 675819"];
3494 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675820"];
3495 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675821"];
3496 [label="return kind; 675822"];
3497 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 675823"];
3498 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 675824"];
3499 [label="=> _symbol?.Kind == SymbolKind.Alias 675825"];
3500 [label="_symbol 675826"];
3501 [label="_symbol?.Kind == SymbolKind.Alias 675827"];
3502 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 675828"];
3503 [label="Debug.Assert(node != null); 675829"];
3504 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 675830"];
3505 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 675831"];
3506 [label="SourceMemberMethodSymbol method = null; 675832"];
3507 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 675833"];
3508 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 675834"];
3509 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 675835"];
3510 [label="param Includes(this BinderFlags self) 675836"];
3511 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 675837"];
3512 [label="param Includes(this BinderFlags self) 675838"];
3513 [label="param GetSpecialType(SyntaxNode node) 675839"];
3514 [label="param GetSpecialType(DiagnosticBag diagnostics) 675840"];
3515 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675841"];
3516 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675842"];
3517 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 675843"];
3518 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675844"];
3519 [label="Debug.Assert(typeWithAnnotations.HasType); 675845"];
3520 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 675846"];
3521 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675847"];
3522 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675848"];
3523 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 675849"];
3524 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675850"];
3525 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675851"];
3526 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675852"];
3527 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 675853"];
3528 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 675854"];
3529 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675855"];
3530 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 675856"];
3531 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675857"];
3532 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675858"];
3533 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675859"];
3534 [label="RoslynDebug.Assert(diagnostics != null); 675860"];
3535 [label="RoslynDebug.Assert(diagnostics != null); 675861"];
3536 [label="DiagnosticInfo? info = null; 675862"];
3537 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 675863"];
3538 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675864"];
3539 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675865"];
3540 [label="return kind; 675866"];
3541 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 675867"];
3542 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 675868"];
3543 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 675869"];
3544 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 675870"];
3545 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 675871"];
3546 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 675872"];
3547 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 675873"];
3548 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 675874"];
3549 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675875"];
3550 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675876"];
3551 [label="param ValidateNameConflictsInScope(Symbol? symbol) 675877"];
3552 [label="param ValidateNameConflictsInScope(Location location) 675878"];
3553 [label="param ValidateNameConflictsInScope(string name) 675879"];
3554 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 675880"];
3555 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 675881"];
3556 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 675882"];
3557 [label="var scope = binder as LocalScopeBinder; 675883"];
3558 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 675884"];
3559 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 675885"];
3560 [label="binder.IsNestedFunctionBinder 675886"];
3561 [label="=> false 675887"];
3562 [label="false 675888"];
3563 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 675889"];
3564 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675890"];
3565 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 675891"];
3566 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 675892"];
3567 [label="return false; 675893"];
3568 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 675894"];
3569 [label="pNames?.Free(); 675895"];
3570 [label="param GetSpecialType(SyntaxNode node) 675896"];
3571 [label="param GetSpecialType(DiagnosticBag diagnostics) 675897"];
3572 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675898"];
3573 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675899"];
3574 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 675900"];
3575 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675901"];
3576 [label="Debug.Assert(typeWithAnnotations.HasType); 675902"];
3577 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675903"];
3578 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675904"];
3579 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675905"];
3580 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675906"];
3581 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675907"];
3582 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675908"];
3583 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675909"];
3584 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675910"];
3585 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 675911"];
3586 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675912"];
3587 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675913"];
3588 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675914"];
3589 [label="RoslynDebug.Assert(diagnostics != null); 675915"];
3590 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 675916"];
3591 [label="return kind; 675917"];
3592 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 675918"];
3593 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 675919"];
3594 [label="=> _symbol?.Kind == SymbolKind.Alias 675920"];
3595 [label="_symbol 675921"];
3596 [label="_symbol?.Kind == SymbolKind.Alias 675922"];
3597 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 675923"];
3598 [label="Debug.Assert(node != null); 675924"];
3599 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 675925"];
3600 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 675926"];
3601 [label="SourceMemberMethodSymbol method = null; 675927"];
3602 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 675928"];
3603 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 675929"];
3604 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 675930"];
3605 [label="param Includes(this BinderFlags self) 675931"];
3606 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 675932"];
3607 [label="param Includes(this BinderFlags self) 675933"];
3608 [label="param GetSpecialType(SyntaxNode node) 675934"];
3609 [label="param GetSpecialType(DiagnosticBag diagnostics) 675935"];
3610 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675936"];
3611 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675937"];
3612 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 675938"];
3613 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675939"];
3614 [label="Debug.Assert(typeWithAnnotations.HasType); 675940"];
3615 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675941"];
3616 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675942"];
3617 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675943"];
3618 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675944"];
3619 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 675945"];
3620 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 675946"];
3621 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675947"];
3622 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675948"];
3623 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 675949"];
3624 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 675950"];
3625 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675951"];
3626 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 675952"];
3627 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675953"];
3628 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675954"];
3629 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675955"];
3630 [label="RoslynDebug.Assert(diagnostics != null); 675956"];
3631 [label="RoslynDebug.Assert(diagnostics != null); 675957"];
3632 [label="DiagnosticInfo? info = null; 675958"];
3633 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 675959"];
3634 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675960"];
3635 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675961"];
3636 [label="return kind; 675962"];
3637 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 675963"];
3638 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 675964"];
3639 [label="=> _symbol?.Kind == SymbolKind.Alias 675965"];
3640 [label="_symbol 675966"];
3641 [label="_symbol?.Kind == SymbolKind.Alias 675967"];
3642 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 675968"];
3643 [label="param GetSpecialType(SyntaxNode node) 675969"];
3644 [label="param GetSpecialType(DiagnosticBag diagnostics) 675970"];
3645 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 675971"];
3646 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 675972"];
3647 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 675973"];
3648 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 675974"];
3649 [label="Debug.Assert(typeWithAnnotations.HasType); 675975"];
3650 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675976"];
3651 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675977"];
3652 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675978"];
3653 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 675979"];
3654 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 675980"];
3655 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 675981"];
3656 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 675982"];
3657 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 675983"];
3658 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 675984"];
3659 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 675985"];
3660 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 675986"];
3661 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 675987"];
3662 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 675988"];
3663 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 675989"];
3664 [label="RoslynDebug.Assert(diagnostics != null); 675990"];
3665 [label="RoslynDebug.Assert(diagnostics != null); 675991"];
3666 [label="DiagnosticInfo? info = null; 675992"];
3667 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 675993"];
3668 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675994"];
3669 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 675995"];
3670 [label="return kind; 675996"];
3671 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 675997"];
3672 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 675998"];
3673 [label="=> _symbol?.Kind == SymbolKind.Alias 675999"];
3674 [label="_symbol 676000"];
3675 [label="_symbol?.Kind == SymbolKind.Alias 676001"];
3676 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 676002"];
3677 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 676003"];
3678 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 676004"];
3679 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 676005"];
3680 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 676006"];
3681 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 676007"];
3682 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 676008"];
3683 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 676009"];
3684 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 676010"];
3685 [label="param ValidateNameConflictsInScope(Symbol? symbol) 676011"];
3686 [label="param ValidateNameConflictsInScope(Location location) 676012"];
3687 [label="param ValidateNameConflictsInScope(string name) 676013"];
3688 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 676014"];
3689 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 676015"];
3690 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 676016"];
3691 [label="var scope = binder as LocalScopeBinder; 676017"];
3692 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 676018"];
3693 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 676019"];
3694 [label="binder.IsNestedFunctionBinder 676020"];
3695 [label="=> false 676021"];
3696 [label="false 676022"];
3697 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 676023"];
3698 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 676024"];
3699 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 676025"];
3700 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 676026"];
3701 [label="return false; 676027"];
3702 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 676028"];
3703 [label="pNames?.Free(); 676029"];
3704 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 676030"];
3705 [label="Debug.Assert(typeWithAnnotations.HasType); 676031"];
3706 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676032"];
3707 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676033"];
3708 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676034"];
3709 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676035"];
3710 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 676036"];
3711 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676037"];
3712 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 676038"];
3713 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 676039"];
3714 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 676040"];
3715 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 676041"];
3716 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 676042"];
3717 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 676043"];
3718 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 676044"];
3719 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 676045"];
3720 [label="RoslynDebug.Assert(diagnostics != null); 676046"];
3721 [label="RoslynDebug.Assert(diagnostics != null); 676047"];
3722 [label="DiagnosticInfo? info = null; 676048"];
3723 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 676049"];
3724 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 676050"];
3725 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 676051"];
3726 [label="return kind; 676052"];
3727 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 676053"];
3728 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 676054"];
3729 [label="=> _symbol?.Kind == SymbolKind.Alias 676055"];
3730 [label="_symbol 676056"];
3731 [label="_symbol?.Kind == SymbolKind.Alias 676057"];
3732 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 676058"];
3733 [label="Debug.Assert(node != null); 676059"];
3734 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 676060"];
3735 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 676061"];
3736 [label="SourceMemberMethodSymbol method = null; 676062"];
3737 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 676063"];
3738 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 676064"];
3739 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 676065"];
3740 [label="param Includes(this BinderFlags self) 676066"];
3741 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 676067"];
3742 [label="param Includes(this BinderFlags self) 676068"];
3743 [label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null); 676069"];
3744 [label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null); 676070"];
3745 [label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null); 676071"];
3746 [label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null); 676072"];
3747 [label="BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null) 676073"];
3748 [label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(GenericNameSyntax node) 676074"];
3749 [label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 676075"];
3750 [label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 676076"];
3751 [label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 676077"];
3752 [label="param BindGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 676078"];
3753 [label="var plainName = node.Identifier.ValueText; 676079"];
3754 [label="SeparatedSyntaxList<TypeSyntax> typeArguments = node.TypeArgumentList.Arguments; 676080"];
3755 [label="bool isUnboundTypeExpr = node.IsUnboundGenericName; 676081"];
3756 [label="LookupOptions options = GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false); 676082"];
3757 [label="LookupOptions options = GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false); 676083"];
3758 [label="GetSimpleNameLookupOptions(node, isVerbatimIdentifier: false) 676084"];
3759 [label="param GetSimpleNameLookupOptions(NameSyntax node) 676085"];
3760 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 676086"];
3761 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676087"];
3762 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676088"];
3763 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676089"];
3764 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676090"];
3765 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676091"];
3766 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676092"];
3767 [label="NamedTypeSymbol unconstructedType = LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options); 676093"];
3768 [label="LookupGenericTypeName(\n                diagnostics, basesBeingResolved, qualifierOpt, node, plainName, node.Arity, options) 676094"];
3769 [label="param LookupGenericTypeName(DiagnosticBag diagnostics) 676095"];
3770 [label="param LookupGenericTypeName(ConsList<TypeSymbol> basesBeingResolved) 676096"];
3771 [label="param LookupGenericTypeName(NamespaceOrTypeSymbol qualifierOpt) 676097"];
3772 [label="param LookupGenericTypeName(GenericNameSyntax node) 676098"];
3773 [label="param LookupGenericTypeName(string plainName) 676099"];
3774 [label="param LookupGenericTypeName(int arity) 676100"];
3775 [label="param LookupGenericTypeName(LookupOptions options) 676101"];
3776 [label="param LookupGenericTypeName(this) 676102"];
3777 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676103"];
3778 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676104"];
3779 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676105"];
3780 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676106"];
3781 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676107"];
3782 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics) 676108"];
3783 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 676109"];
3784 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 676110"];
3785 [label="param CreateErrorIfLookupOnTypeParameter(string name) 676111"];
3786 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 676112"];
3787 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 676113"];
3788 [label="param CreateErrorIfLookupOnTypeParameter(this) 676114"];
3789 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 676115"];
3790 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 676116"];
3791 [label="return null; 676117"];
3792 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, plainName, arity, diagnostics); 676118"];
3793 [label="if ((object)errorResult != null)\n            {\n                return errorResult;\n            } 676119"];
3794 [label="if ((object)errorResult != null)\n            {\n                return errorResult;\n            } 676120"];
3795 [label="LookupResult.GetInstance() 676121"];
3796 [label="var instance = s_poolInstance.Allocate(); 676122"];
3797 [label="instance.IsClear 676123"];
3798 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 676124"];
3799 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676125"];
3800 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676126"];
3801 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676127"];
3802 [label="Debug.Assert(instance.IsClear); 676128"];
3803 [label="var lookupResult = LookupResult.GetInstance(); 676129"];
3804 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 676130"];
3805 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676131"];
3806 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676132"];
3807 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676133"];
3808 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676134"];
3809 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676135"];
3810 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676136"];
3811 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676137"];
3812 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 676138"];
3813 [label="this.LookupSymbolsSimpleName(lookupResult, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 676139"];
3814 [label="param LookupSymbolsSimpleName(LookupResult result) 676140"];
3815 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 676141"];
3816 [label="param LookupSymbolsSimpleName(string plainName) 676142"];
3817 [label="param LookupSymbolsSimpleName(int arity) 676143"];
3818 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 676144"];
3819 [label="param LookupSymbolsSimpleName(LookupOptions options) 676145"];
3820 [label="param LookupSymbolsSimpleName(bool diagnose) 676146"];
3821 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 676147"];
3822 [label="param LookupSymbolsSimpleName(this) 676148"];
3823 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676149"];
3824 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676150"];
3825 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676151"];
3826 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676152"];
3827 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676153"];
3828 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676154"];
3829 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676155"];
3830 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 676156"];
3831 [label="param LookupSymbolsOrMembersInternal(this) 676157"];
3832 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676158"];
3833 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676159"];
3834 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676160"];
3835 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676161"];
3836 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676162"];
3837 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676163"];
3838 [label="param LookupSymbolsInternal(int arity) 676164"];
3839 [label="param LookupSymbolsInternal(bool diagnose) 676165"];
3840 [label="param LookupSymbolsInternal(this) 676166"];
3841 [label="result.IsClear 676167"];
3842 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 676168"];
3843 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676169"];
3844 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676170"];
3845 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676171"];
3846 [label="Debug.Assert(result.IsClear); 676172"];
3847 [label="Debug.Assert(options.AreValid()); 676173"];
3848 [label="options.AreValid() 676174"];
3849 [label="param AreValid(this LookupOptions options) 676175"];
3850 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 676176"];
3851 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 676177"];
3852 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 676178"];
3853 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 676179"];
3854 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 676180"];
3855 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 676181"];
3856 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 676182"];
3857 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 676183"];
3858 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 676184"];
3859 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 676185"];
3860 [label="return OnlyOneBitSet(onlyOptions); 676186"];
3861 [label="OnlyOneBitSet(onlyOptions) 676187"];
3862 [label="param OnlyOneBitSet(LookupOptions o) 676188"];
3863 [label="return (o & (o - 1)) == 0; 676189"];
3864 [label="return (o & (o - 1)) == 0; 676190"];
3865 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 676191"];
3866 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676192"];
3867 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676193"];
3868 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676194"];
3869 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676195"];
3870 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676196"];
3871 [label="param LookupSymbolsInSingleBinder(LookupResult result) 676197"];
3872 [label="param LookupSymbolsInSingleBinder(string name) 676198"];
3873 [label="param LookupSymbolsInSingleBinder(int arity) 676199"];
3874 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 676200"];
3875 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 676201"];
3876 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 676202"];
3877 [label="param LookupSymbolsInSingleBinder(bool diagnose) 676203"];
3878 [label="param LookupSymbolsInSingleBinder(this) 676204"];
3879 [label="result.IsClear 676205"];
3880 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 676206"];
3881 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676207"];
3882 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676208"];
3883 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676209"];
3884 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 676210"];
3885 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 676211"];
3886 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 676212"];
3887 [label="param LookupSymbolsInSingleBinder(int arity) 676213"];
3888 [label="param LookupSymbolsInSingleBinder(bool diagnose) 676214"];
3889 [label="result.IsClear 676215"];
3890 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 676216"];
3891 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676217"];
3892 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676218"];
3893 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676219"];
3894 [label="Debug.Assert(result.IsClear); 676220"];
3895 [label="IsSubmissionClass 676221"];
3896 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 676222"];
3897 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 676223"];
3898 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 676224"];
3899 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 676225"];
3900 [label="param LookupMembersInternal(int arity) 676226"];
3901 [label="param LookupMembersInternal(bool diagnose) 676227"];
3902 [label="Debug.Assert(options.AreValid()); 676228"];
3903 [label="options.AreValid() 676229"];
3904 [label="param AreValid(this LookupOptions options) 676230"];
3905 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 676231"];
3906 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 676232"];
3907 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 676233"];
3908 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 676234"];
3909 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 676235"];
3910 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 676236"];
3911 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 676237"];
3912 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 676238"];
3913 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 676239"];
3914 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 676240"];
3915 [label="return OnlyOneBitSet(onlyOptions); 676241"];
3916 [label="OnlyOneBitSet(onlyOptions) 676242"];
3917 [label="param OnlyOneBitSet(LookupOptions o) 676243"];
3918 [label="return (o & (o - 1)) == 0; 676244"];
3919 [label="return (o & (o - 1)) == 0; 676245"];
3920 [label="Debug.Assert(arity >= 0); 676246"];
3921 [label="Debug.Assert(arity >= 0); 676247"];
3922 [label="param LookupMembersInType(int arity) 676248"];
3923 [label="param LookupMembersInType(Binder originalBinder) 676249"];
3924 [label="param LookupMembersInType(bool diagnose) 676250"];
3925 [label="param LookupMembersInClass(int arity) 676251"];
3926 [label="param LookupMembersInClass(Binder originalBinder) 676252"];
3927 [label="param LookupMembersInClass(bool diagnose) 676253"];
3928 [label="param LookupMembersInClass(int arity) 676254"];
3929 [label="param LookupMembersInClass(Binder originalBinder) 676255"];
3930 [label="param LookupMembersInClass(TypeSymbol accessThroughType) 676256"];
3931 [label="param LookupMembersInClass(bool diagnose) 676257"];
3932 [label="Debug.Assert((object)type != null); 676258"];
3933 [label="instance.IsClear 676259"];
3934 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 676260"];
3935 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676261"];
3936 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676262"];
3937 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676263"];
3938 [label="Debug.Assert(instance.IsClear); 676264"];
3939 [label="tmp.Clear(); 676265"];
3940 [label="param LookupMembersWithoutInheritance(LookupResult result) 676266"];
3941 [label="param LookupMembersWithoutInheritance(int arity) 676267"];
3942 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 676268"];
3943 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 676269"];
3944 [label="param LookupMembersWithoutInheritance(bool diagnose) 676270"];
3945 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 676271"];
3946 [label="param GetCandidateMembers(Binder originalBinder) 676272"];
3947 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 676273"];
3948 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 676274"];
3949 [label="param MergePrioritized(LookupResult other) 676275"];
3950 [label="param MergePrioritized(this) 676276"];
3951 [label="other.Kind 676277"];
3952 [label="get\n            {\n                return _kind;\n            } 676278"];
3953 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 676279"];
3954 [label="Kind 676280"];
3955 [label="get\n            {\n                return _kind;\n            } 676281"];
3956 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 676282"];
3957 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 676283"];
3958 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 676284"];
3959 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 676285"];
3960 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 676286"];
3961 [label="tmp.IsMultiViable 676287"];
3962 [label="return _kind; 676288"];
3963 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 676289"];
3964 [label="result.IsMultiViable 676290"];
3965 [label="return _kind; 676291"];
3966 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 676292"];
3967 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 676293"];
3968 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 676294"];
3969 [label="originalBinder.InCrefButNotParameterOrReturnType 676295"];
3970 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 676296"];
3971 [label="InCref 676297"];
3972 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 676298"];
3973 [label="return this.Flags.Includes(BinderFlags.Cref); 676299"];
3974 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 676300"];
3975 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 676301"];
3976 [label="tmp.Clear(); 676302"];
3977 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676303"];
3978 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676304"];
3979 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676305"];
3980 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676306"];
3981 [label="param LookupMembersWithoutInheritance(LookupResult result) 676307"];
3982 [label="param LookupMembersWithoutInheritance(int arity) 676308"];
3983 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 676309"];
3984 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 676310"];
3985 [label="param LookupMembersWithoutInheritance(bool diagnose) 676311"];
3986 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 676312"];
3987 [label="param GetCandidateMembers(Binder originalBinder) 676313"];
3988 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 676314"];
3989 [label="param MergePrioritized(LookupResult other) 676315"];
3990 [label="param MergePrioritized(this) 676316"];
3991 [label="other.Kind 676317"];
3992 [label="get\n            {\n                return _kind;\n            } 676318"];
3993 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 676319"];
3994 [label="Kind 676320"];
3995 [label="get\n            {\n                return _kind;\n            } 676321"];
3996 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 676322"];
3997 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 676323"];
3998 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 676324"];
3999 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 676325"];
4000 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 676326"];
4001 [label="tmp.IsMultiViable 676327"];
4002 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 676328"];
4003 [label="result.IsMultiViable 676329"];
4004 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 676330"];
4005 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 676331"];
4006 [label="originalBinder.InCrefButNotParameterOrReturnType 676332"];
4007 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 676333"];
4008 [label="InCref 676334"];
4009 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 676335"];
4010 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 676336"];
4011 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 676337"];
4012 [label="visited?.Free(); 676338"];
4013 [label="this.Clear(); 676339"];
4014 [label="tmp.Free(); 676340"];
4015 [label="param LookupSymbol(Binder originalBinder) 676341"];
4016 [label="param LookupSymbol(int arity) 676342"];
4017 [label="param LookupSymbol(ConsList<TypeSymbol> basesBeingResolved) 676343"];
4018 [label="param LookupSymbol(bool diagnose) 676344"];
4019 [label="param LookupSymbolInAliases(Binder originalBinder) 676345"];
4020 [label="param LookupSymbolInAliases(LookupResult result) 676346"];
4021 [label="param LookupSymbolInAliases(int arity) 676347"];
4022 [label="param LookupSymbolInAliases(ConsList<TypeSymbol> basesBeingResolved) 676348"];
4023 [label="param LookupSymbolInAliases(LookupOptions options) 676349"];
4024 [label="param LookupSymbolInAliases(bool diagnose) 676350"];
4025 [label="originalBinder.IsSemanticModelBinder 676351"];
4026 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 676352"];
4027 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 676353"];
4028 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 676354"];
4029 [label="this.Flags.Includes(BinderFlags.SemanticModel) 676355"];
4030 [label="param Includes(this BinderFlags self) 676356"];
4031 [label="param Includes(BinderFlags other) 676357"];
4032 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 676358"];
4033 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 676359"];
4034 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676360"];
4035 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676361"];
4036 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676362"];
4037 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676363"];
4038 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 676364"];
4039 [label="param LookupSymbolInUsings(Binder originalBinder) 676365"];
4040 [label="param LookupSymbolInUsings(LookupResult result) 676366"];
4041 [label="param LookupSymbolInUsings(string name) 676367"];
4042 [label="param LookupSymbolInUsings(int arity) 676368"];
4043 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 676369"];
4044 [label="param LookupSymbolInUsings(LookupOptions options) 676370"];
4045 [label="param LookupSymbolInUsings(bool diagnose) 676371"];
4046 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 676372"];
4047 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 676373"];
4048 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 676374"];
4049 [label="param Includes(this BinderFlags self) 676375"];
4050 [label="param Includes(BinderFlags other) 676376"];
4051 [label="originalBinder.IsSemanticModelBinder 676377"];
4052 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 676378"];
4053 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 676379"];
4054 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 676380"];
4055 [label="this.Flags.Includes(BinderFlags.SemanticModel) 676381"];
4056 [label="param Includes(this BinderFlags self) 676382"];
4057 [label="param Includes(BinderFlags other) 676383"];
4058 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 676384"];
4059 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 676385"];
4060 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676386"];
4061 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676387"];
4062 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 676388"];
4063 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676389"];
4064 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 676390"];
4065 [label="param LookupSymbolsInSingleBinder(int arity) 676391"];
4066 [label="param LookupSymbolsInSingleBinder(bool diagnose) 676392"];
4067 [label="result.IsClear 676393"];
4068 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 676394"];
4069 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676395"];
4070 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676396"];
4071 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676397"];
4072 [label="Debug.Assert(result.IsClear); 676398"];
4073 [label="IsSubmissionClass 676399"];
4074 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 676400"];
4075 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 676401"];
4076 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 676402"];
4077 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 676403"];
4078 [label="param LookupMembersInternal(int arity) 676404"];
4079 [label="param LookupMembersInternal(bool diagnose) 676405"];
4080 [label="Debug.Assert(options.AreValid()); 676406"];
4081 [label="options.AreValid() 676407"];
4082 [label="param AreValid(this LookupOptions options) 676408"];
4083 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 676409"];
4084 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 676410"];
4085 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 676411"];
4086 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 676412"];
4087 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 676413"];
4088 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 676414"];
4089 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 676415"];
4090 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 676416"];
4091 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 676417"];
4092 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 676418"];
4093 [label="return OnlyOneBitSet(onlyOptions); 676419"];
4094 [label="OnlyOneBitSet(onlyOptions) 676420"];
4095 [label="param OnlyOneBitSet(LookupOptions o) 676421"];
4096 [label="return (o & (o - 1)) == 0; 676422"];
4097 [label="return (o & (o - 1)) == 0; 676423"];
4098 [label="Debug.Assert(arity >= 0); 676424"];
4099 [label="Debug.Assert(arity >= 0); 676425"];
4100 [label="param LookupMembersInNamespace(int arity) 676426"];
4101 [label="param LookupMembersInNamespace(bool diagnose) 676427"];
4102 [label="param GetCandidateMembers(Binder originalBinder) 676428"];
4103 [label="param LookupSymbol(Binder originalBinder) 676429"];
4104 [label="param LookupSymbol(int arity) 676430"];
4105 [label="param LookupSymbol(ConsList<TypeSymbol> basesBeingResolved) 676431"];
4106 [label="param LookupSymbol(bool diagnose) 676432"];
4107 [label="param LookupSymbolInAliases(Binder originalBinder) 676433"];
4108 [label="param LookupSymbolInAliases(LookupResult result) 676434"];
4109 [label="param LookupSymbolInAliases(int arity) 676435"];
4110 [label="param LookupSymbolInAliases(ConsList<TypeSymbol> basesBeingResolved) 676436"];
4111 [label="param LookupSymbolInAliases(LookupOptions options) 676437"];
4112 [label="param LookupSymbolInAliases(bool diagnose) 676438"];
4113 [label="originalBinder.IsSemanticModelBinder 676439"];
4114 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 676440"];
4115 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 676441"];
4116 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 676442"];
4117 [label="this.Flags.Includes(BinderFlags.SemanticModel) 676443"];
4118 [label="param Includes(this BinderFlags self) 676444"];
4119 [label="param Includes(BinderFlags other) 676445"];
4120 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 676446"];
4121 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 676447"];
4122 [label="return _kind; 676448"];
4123 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676449"];
4124 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676450"];
4125 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 676451"];
4126 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 676452"];
4127 [label="param LookupSymbolInUsings(Binder originalBinder) 676453"];
4128 [label="param LookupSymbolInUsings(LookupResult result) 676454"];
4129 [label="param LookupSymbolInUsings(string name) 676455"];
4130 [label="param LookupSymbolInUsings(int arity) 676456"];
4131 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 676457"];
4132 [label="param LookupSymbolInUsings(LookupOptions options) 676458"];
4133 [label="param LookupSymbolInUsings(bool diagnose) 676459"];
4134 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 676460"];
4135 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 676461"];
4136 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 676462"];
4137 [label="param Includes(this BinderFlags self) 676463"];
4138 [label="param Includes(BinderFlags other) 676464"];
4139 [label="originalBinder.IsSemanticModelBinder 676465"];
4140 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 676466"];
4141 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 676467"];
4142 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 676468"];
4143 [label="this.Flags.Includes(BinderFlags.SemanticModel) 676469"];
4144 [label="param Includes(this BinderFlags self) 676470"];
4145 [label="param Includes(BinderFlags other) 676471"];
4146 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 676472"];
4147 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 676473"];
4148 [label="ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder); 676474"];
4149 [label="ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder); 676475"];
4150 [label="ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder); 676476"];
4151 [label="ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder); 676477"];
4152 [label="Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder) 676478"];
4153 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 676479"];
4154 [label="param GetCandidateMembers(string name) 676480"];
4155 [label="param GetCandidateMembers(LookupOptions options) 676481"];
4156 [label="param GetCandidateMembers(Binder originalBinder) 676482"];
4157 [label="return nsOrType.GetMembers(name); 676483"];
4158 [label="foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                } 676484"];
4159 [label="if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    } 676485"];
4160 [label="IsValidLookupCandidateInUsings(symbol) 676486"];
4161 [label="param IsValidLookupCandidateInUsings(Symbol symbol) 676487"];
4162 [label="switch (symbol.Kind)\n            {\n                // lookup via 'using namespace' ignores namespaces inside\n                case SymbolKind.Namespace:\n                    return false;\n\n                // lookup via 'using static' ignores extension methods and non-static methods\n                case SymbolKind.Method:\n                    if (!symbol.IsStatic || ((MethodSymbol)symbol).IsExtensionMethod)\n                    {\n                        return false;\n                    }\n\n                    break;\n\n                // types are considered static members for purposes of 'using static' feature\n                // regardless of whether they are declared with 'static' modifier or not\n                case SymbolKind.NamedType:\n                    break;\n\n                // lookup via 'using static' ignores non-static members\n                default:\n                    if (!symbol.IsStatic)\n                    {\n                        return false;\n                    }\n\n                    break;\n            } 676488"];
4163 [label="return true; 676489"];
4164 [label="if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    } 676490"];
4165 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676491"];
4166 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676492"];
4167 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676493"];
4168 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676494"];
4169 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676495"];
4170 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676496"];
4171 [label="originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved) 676497"];
4172 [label="param CheckViability(Symbol symbol) 676498"];
4173 [label="param CheckViability(int arity) 676499"];
4174 [label="param CheckViability(LookupOptions options) 676500"];
4175 [label="param CheckViability(TypeSymbol accessThroughType) 676501"];
4176 [label="param CheckViability(bool diagnose) 676502"];
4177 [label="param CheckViability(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 676503"];
4178 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 676504"];
4179 [label="param CheckViability(this) 676505"];
4180 [label="bool inaccessibleViaQualifier; 676506"];
4181 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 676507"];
4182 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 676508"];
4183 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 676509"];
4184 [label="param WrongArity(Symbol symbol) 676510"];
4185 [label="param WrongArity(int arity) 676511"];
4186 [label="param WrongArity(bool diagnose) 676512"];
4187 [label="param WrongArity(LookupOptions options) 676513"];
4188 [label="param WrongArity(out DiagnosticInfo diagInfo) 676514"];
4189 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 676515"];
4190 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 676516"];
4191 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 676517"];
4192 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 676518"];
4193 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676519"];
4194 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676520"];
4195 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 676521"];
4196 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 676522"];
4197 [label="options.IsAttributeTypeLookup() 676523"];
4198 [label="param IsAttributeTypeLookup(this LookupOptions options) 676524"];
4199 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 676525"];
4200 [label="diagInfo = null; 676526"];
4201 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 676527"];
4202 [label="RefineAccessThroughType(options, accessThroughType) 676528"];
4203 [label="param RefineAccessThroughType(LookupOptions options) 676529"];
4204 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 676530"];
4205 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 676531"];
4206 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 676532"];
4207 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 676533"];
4208 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 676534"];
4209 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 676535"];
4210 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 676536"];
4211 [label="param IsAccessible(TypeSymbol accessThroughType) 676537"];
4212 [label="param IsAccessible(out bool failedThroughTypeCheck) 676538"];
4213 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 676539"];
4214 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 676540"];
4215 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 676541"];
4216 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 676542"];
4217 [label="param Includes(this BinderFlags self) 676543"];
4218 [label="param Includes(BinderFlags other) 676544"];
4219 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 676545"];
4220 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 676546"];
4221 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 676547"];
4222 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 676548"];
4223 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 676549"];
4224 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 676550"];
4225 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 676551"];
4226 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 676552"];
4227 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 676553"];
4228 [label="param IsSymbolAccessibleConditional(this) 676554"];
4229 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 676555"];
4230 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 676556"];
4231 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 676557"];
4232 [label="param Includes(this BinderFlags self) 676558"];
4233 [label="param Includes(BinderFlags other) 676559"];
4234 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 676560"];
4235 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 676561"];
4236 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 676562"];
4237 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 676563"];
4238 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 676564"];
4239 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 676565"];
4240 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 676566"];
4241 [label="Debug.Assert((object)symbol != null); 676567"];
4242 [label="Debug.Assert((object)within != null); 676568"];
4243 [label="Debug.Assert(within.IsDefinition); 676569"];
4244 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 676570"];
4245 [label="failedThroughTypeCheck = false; 676571"];
4246 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 676572"];
4247 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 676573"];
4248 [label="Debug.Assert((object)type != null); 676574"];
4249 [label="var compilation = within.DeclaringCompilation; 676575"];
4250 [label="bool unused; 676576"];
4251 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 676577"];
4252 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 676578"];
4253 [label="Debug.Assert((object)assembly != null); 676579"];
4254 [label="return true; 676580"];
4255 [label="if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    } 676581"];
4256 [label="MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel); 676582"];
4257 [label="MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel); 676583"];
4258 [label="MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel); 676584"];
4259 [label="MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel) 676585"];
4260 [label="param MarkImportDirective(CSharpCompilation compilation) 676586"];
4261 [label="param MarkImportDirective(CSharpSyntaxNode directive) 676587"];
4262 [label="param MarkImportDirective(bool callerIsSemanticModel) 676588"];
4263 [label="Debug.Assert(compilation != null); 676589"];
4264 [label="Debug.Assert(compilation != null); 676590"];
4265 [label="if (directive != null && !callerIsSemanticModel)\n            {\n                compilation.MarkImportDirectiveAsUsed(directive);\n            } 676591"];
4266 [label="if (directive != null && !callerIsSemanticModel)\n            {\n                compilation.MarkImportDirectiveAsUsed(directive);\n            } 676592"];
4267 [label="if (directive != null && !callerIsSemanticModel)\n            {\n                compilation.MarkImportDirectiveAsUsed(directive);\n            } 676593"];
4268 [label="compilation.MarkImportDirectiveAsUsed(directive); 676594"];
4269 [label="compilation.MarkImportDirectiveAsUsed(directive); 676595"];
4270 [label="MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel); 676596"];
4271 [label="result.MergeEqual(res); 676597"];
4272 [label="result.MergeEqual(res) 676598"];
4273 [label="param MergeEqual(SingleLookupResult result) 676599"];
4274 [label="param MergeEqual(this) 676600"];
4275 [label="return _kind; 676601"];
4276 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 676602"];
4277 [label="result.MergeEqual(res); 676603"];
4278 [label="if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    } 676604"];
4279 [label="IsValidLookupCandidateInUsings(symbol) 676605"];
4280 [label="param IsValidLookupCandidateInUsings(Symbol symbol) 676606"];
4281 [label="switch (symbol.Kind)\n            {\n                // lookup via 'using namespace' ignores namespaces inside\n                case SymbolKind.Namespace:\n                    return false;\n\n                // lookup via 'using static' ignores extension methods and non-static methods\n                case SymbolKind.Method:\n                    if (!symbol.IsStatic || ((MethodSymbol)symbol).IsExtensionMethod)\n                    {\n                        return false;\n                    }\n\n                    break;\n\n                // types are considered static members for purposes of 'using static' feature\n                // regardless of whether they are declared with 'static' modifier or not\n                case SymbolKind.NamedType:\n                    break;\n\n                // lookup via 'using static' ignores non-static members\n                default:\n                    if (!symbol.IsStatic)\n                    {\n                        return false;\n                    }\n\n                    break;\n            } 676607"];
4282 [label="return true; 676608"];
4283 [label="if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    } 676609"];
4284 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676610"];
4285 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676611"];
4286 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676612"];
4287 [label="param CheckViability(int arity) 676613"];
4288 [label="param CheckViability(TypeSymbol accessThroughType) 676614"];
4289 [label="param CheckViability(bool diagnose) 676615"];
4290 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 676616"];
4291 [label="bool inaccessibleViaQualifier; 676617"];
4292 [label="param WrongArity(Symbol symbol) 676618"];
4293 [label="param WrongArity(int arity) 676619"];
4294 [label="param WrongArity(bool diagnose) 676620"];
4295 [label="param WrongArity(LookupOptions options) 676621"];
4296 [label="param WrongArity(out DiagnosticInfo diagInfo) 676622"];
4297 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 676623"];
4298 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 676624"];
4299 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 676625"];
4300 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 676626"];
4301 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676627"];
4302 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676628"];
4303 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 676629"];
4304 [label="if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            } 676630"];
4305 [label="diagnose 676631"];
4306 [label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null; 676632"];
4307 [label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null; 676633"];
4308 [label="new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) 676634"];
4309 [label="new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) 676635"];
4310 [label="return true; 676636"];
4311 [label="return LookupResult.WrongArity(symbol, diagInfo); 676637"];
4312 [label="return LookupResult.WrongArity(symbol, diagInfo); 676638"];
4313 [label="LookupResult.WrongArity(symbol, diagInfo) 676639"];
4314 [label="param WrongArity(Symbol symbol) 676640"];
4315 [label="param WrongArity(DiagnosticInfo error) 676641"];
4316 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676642"];
4317 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676643"];
4318 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676644"];
4319 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676645"];
4320 [label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 676646"];
4321 [label="param SingleLookupResult(LookupResultKind kind) 676647"];
4322 [label="param SingleLookupResult(Symbol symbol) 676648"];
4323 [label="param SingleLookupResult(DiagnosticInfo error) 676649"];
4324 [label="param SingleLookupResult(this) 676650"];
4325 [label="return LookupResult.WrongArity(symbol, diagInfo); 676651"];
4326 [label="if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    } 676652"];
4327 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 676653"];
4328 [label="if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    } 676654"];
4329 [label="IsValidLookupCandidateInUsings(symbol) 676655"];
4330 [label="param IsValidLookupCandidateInUsings(Symbol symbol) 676656"];
4331 [label="switch (symbol.Kind)\n            {\n                // lookup via 'using namespace' ignores namespaces inside\n                case SymbolKind.Namespace:\n                    return false;\n\n                // lookup via 'using static' ignores extension methods and non-static methods\n                case SymbolKind.Method:\n                    if (!symbol.IsStatic || ((MethodSymbol)symbol).IsExtensionMethod)\n                    {\n                        return false;\n                    }\n\n                    break;\n\n                // types are considered static members for purposes of 'using static' feature\n                // regardless of whether they are declared with 'static' modifier or not\n                case SymbolKind.NamedType:\n                    break;\n\n                // lookup via 'using static' ignores non-static members\n                default:\n                    if (!symbol.IsStatic)\n                    {\n                        return false;\n                    }\n\n                    break;\n            } 676657"];
4332 [label="return true; 676658"];
4333 [label="if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    } 676659"];
4334 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676660"];
4335 [label="param CheckViability(TypeSymbol accessThroughType) 676661"];
4336 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 676662"];
4337 [label="bool inaccessibleViaQualifier; 676663"];
4338 [label="param WrongArity(LookupOptions options) 676664"];
4339 [label="param WrongArity(out DiagnosticInfo diagInfo) 676665"];
4340 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676666"];
4341 [label="diagnose 676667"];
4342 [label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null; 676668"];
4343 [label="diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null; 676669"];
4344 [label="new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) 676670"];
4345 [label="new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) 676671"];
4346 [label="return true; 676672"];
4347 [label="return LookupResult.WrongArity(symbol, diagInfo); 676673"];
4348 [label="return LookupResult.WrongArity(symbol, diagInfo); 676674"];
4349 [label="LookupResult.WrongArity(symbol, diagInfo) 676675"];
4350 [label="param WrongArity(Symbol symbol) 676676"];
4351 [label="param WrongArity(DiagnosticInfo error) 676677"];
4352 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676678"];
4353 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676679"];
4354 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676680"];
4355 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676681"];
4356 [label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 676682"];
4357 [label="param SingleLookupResult(LookupResultKind kind) 676683"];
4358 [label="param SingleLookupResult(Symbol symbol) 676684"];
4359 [label="param SingleLookupResult(DiagnosticInfo error) 676685"];
4360 [label="param SingleLookupResult(this) 676686"];
4361 [label="return LookupResult.WrongArity(symbol, diagInfo); 676687"];
4362 [label="if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    } 676688"];
4363 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 676689"];
4364 [label="if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    } 676690"];
4365 [label="IsValidLookupCandidateInUsings(symbol) 676691"];
4366 [label="param IsValidLookupCandidateInUsings(Symbol symbol) 676692"];
4367 [label="switch (symbol.Kind)\n            {\n                // lookup via 'using namespace' ignores namespaces inside\n                case SymbolKind.Namespace:\n                    return false;\n\n                // lookup via 'using static' ignores extension methods and non-static methods\n                case SymbolKind.Method:\n                    if (!symbol.IsStatic || ((MethodSymbol)symbol).IsExtensionMethod)\n                    {\n                        return false;\n                    }\n\n                    break;\n\n                // types are considered static members for purposes of 'using static' feature\n                // regardless of whether they are declared with 'static' modifier or not\n                case SymbolKind.NamedType:\n                    break;\n\n                // lookup via 'using static' ignores non-static members\n                default:\n                    if (!symbol.IsStatic)\n                    {\n                        return false;\n                    }\n\n                    break;\n            } 676693"];
4368 [label="return true; 676694"];
4369 [label="if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    } 676695"];
4370 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676696"];
4371 [label="param CheckViability(TypeSymbol accessThroughType) 676697"];
4372 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 676698"];
4373 [label="bool inaccessibleViaQualifier; 676699"];
4374 [label="param WrongArity(LookupOptions options) 676700"];
4375 [label="param WrongArity(out DiagnosticInfo diagInfo) 676701"];
4376 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676702"];
4377 [label="return true; 676703"];
4378 [label="return LookupResult.WrongArity(symbol, diagInfo); 676704"];
4379 [label="LookupResult.WrongArity(symbol, diagInfo) 676705"];
4380 [label="param WrongArity(Symbol symbol) 676706"];
4381 [label="param WrongArity(DiagnosticInfo error) 676707"];
4382 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676708"];
4383 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676709"];
4384 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676710"];
4385 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676711"];
4386 [label="new SingleLookupResult(LookupResultKind.WrongArity, symbol, error) 676712"];
4387 [label="param SingleLookupResult(LookupResultKind kind) 676713"];
4388 [label="param SingleLookupResult(Symbol symbol) 676714"];
4389 [label="param SingleLookupResult(DiagnosticInfo error) 676715"];
4390 [label="param SingleLookupResult(this) 676716"];
4391 [label="return LookupResult.WrongArity(symbol, diagInfo); 676717"];
4392 [label="if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    } 676718"];
4393 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 676719"];
4394 [label="param WrongArity(LookupOptions options) 676720"];
4395 [label="param WrongArity(out DiagnosticInfo diagInfo) 676721"];
4396 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676722"];
4397 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 676723"];
4398 [label="return LookupResult.WrongArity(symbol, diagInfo); 676724"];
4399 [label="param WrongArity(DiagnosticInfo error) 676725"];
4400 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676726"];
4401 [label="param SingleLookupResult(DiagnosticInfo error) 676727"];
4402 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 676728"];
4403 [label="if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    } 676729"];
4404 [label="IsValidLookupCandidateInUsings(symbol) 676730"];
4405 [label="param IsValidLookupCandidateInUsings(Symbol symbol) 676731"];
4406 [label="switch (symbol.Kind)\n            {\n                // lookup via 'using namespace' ignores namespaces inside\n                case SymbolKind.Namespace:\n                    return false;\n\n                // lookup via 'using static' ignores extension methods and non-static methods\n                case SymbolKind.Method:\n                    if (!symbol.IsStatic || ((MethodSymbol)symbol).IsExtensionMethod)\n                    {\n                        return false;\n                    }\n\n                    break;\n\n                // types are considered static members for purposes of 'using static' feature\n                // regardless of whether they are declared with 'static' modifier or not\n                case SymbolKind.NamedType:\n                    break;\n\n                // lookup via 'using static' ignores non-static members\n                default:\n                    if (!symbol.IsStatic)\n                    {\n                        return false;\n                    }\n\n                    break;\n            } 676732"];
4407 [label="return true; 676733"];
4408 [label="if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    } 676734"];
4409 [label="var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 676735"];
4410 [label="param CheckViability(TypeSymbol accessThroughType) 676736"];
4411 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 676737"];
4412 [label="bool inaccessibleViaQualifier; 676738"];
4413 [label="param WrongArity(LookupOptions options) 676739"];
4414 [label="param WrongArity(out DiagnosticInfo diagInfo) 676740"];
4415 [label="param WrongArity(Symbol symbol) 676741"];
4416 [label="return new SingleLookupResult(LookupResultKind.WrongArity, symbol, error); 676742"];
4417 [label="param SingleLookupResult(Symbol symbol) 676743"];
4418 [label="if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    } 676744"];
4419 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 676745"];
4420 [label="result.IsClear 676746"];
4421 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 676747"];
4422 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 676748"];
4423 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 676749"];
4424 [label="binder = scope; 676750"];
4425 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 676751"];
4426 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 676752"];
4427 [label="return binder; 676753"];
4428 [label="diagnostics.Add(node, useSiteDiagnostics); 676754"];
4429 [label="diagnostics.Add(node, useSiteDiagnostics); 676755"];
4430 [label="diagnostics.Add(node, useSiteDiagnostics); 676756"];
4431 [label="diagnostics.Add(node, useSiteDiagnostics); 676757"];
4432 [label="bool wasError; 676758"];
4433 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676759"];
4434 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676760"];
4435 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676761"];
4436 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676762"];
4437 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676763"];
4438 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676764"];
4439 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676765"];
4440 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676766"];
4441 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676767"];
4442 [label="Symbol lookupResultSymbol = ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options); 676768"];
4443 [label="ResultSymbol(lookupResult, plainName, arity, node, diagnostics, (basesBeingResolved != null), out wasError, qualifierOpt, options) 676769"];
4444 [label="param ResultSymbol(LookupResult result) 676770"];
4445 [label="param ResultSymbol(string simpleName) 676771"];
4446 [label="param ResultSymbol(int arity) 676772"];
4447 [label="param ResultSymbol(SyntaxNode where) 676773"];
4448 [label="param ResultSymbol(DiagnosticBag diagnostics) 676774"];
4449 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 676775"];
4450 [label="param ResultSymbol(out bool wasError) 676776"];
4451 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 676777"];
4452 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 676778"];
4453 [label="param ResultSymbol(this) 676779"];
4454 [label="Debug.Assert(where != null); 676780"];
4455 [label="Debug.Assert(where != null); 676781"];
4456 [label="Debug.Assert(diagnostics != null); 676782"];
4457 [label="Debug.Assert(diagnostics != null); 676783"];
4458 [label="return _symbolList; 676784"];
4459 [label="wasError = false; 676785"];
4460 [label="return _kind; 676786"];
4461 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 676787"];
4462 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 676788"];
4463 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 676789"];
4464 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 676790"];
4465 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 676791"];
4466 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 676792"];
4467 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 676793"];
4468 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 676794"];
4469 [label="Debug.Assert(symbol is object); 676795"];
4470 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 676796"];
4471 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 676797"];
4472 [label="symbol = symbol.ContainingType; 676798"];
4473 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 676799"];
4474 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 676800"];
4475 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 676801"];
4476 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 676802"];
4477 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 676803"];
4478 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 676804"];
4479 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 676805"];
4480 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 676806"];
4481 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 676807"];
4482 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 676808"];
4483 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 676809"];
4484 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 676810"];
4485 [label="param CheckRuntimeSupportForSymbolAccess(this) 676811"];
4486 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 676812"];
4487 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 676813"];
4488 [label="NamedTypeSymbol type = lookupResultSymbol as NamedTypeSymbol; 676814"];
4489 [label="if ((object)type == null)\n            {\n                // We did a lookup with a generic arity, filtered to types and namespaces. If\n                // we got back something other than a type, there had better be an error info\n                // for us.\n                Debug.Assert(lookupResult.Error != null);\n                type = new ExtendedErrorTypeSymbol(\n                    GetContainingNamespaceOrType(lookupResultSymbol),\n                    ImmutableArray.Create<Symbol>(lookupResultSymbol),\n                    lookupResult.Kind,\n                    lookupResult.Error,\n                    arity);\n            } 676815"];
4490 [label="if ((object)type == null)\n            {\n                // We did a lookup with a generic arity, filtered to types and namespaces. If\n                // we got back something other than a type, there had better be an error info\n                // for us.\n                Debug.Assert(lookupResult.Error != null);\n                type = new ExtendedErrorTypeSymbol(\n                    GetContainingNamespaceOrType(lookupResultSymbol),\n                    ImmutableArray.Create<Symbol>(lookupResultSymbol),\n                    lookupResult.Kind,\n                    lookupResult.Error,\n                    arity);\n            } 676816"];
4491 [label="lookupResult.Free() 676817"];
4492 [label="param Free(this) 676818"];
4493 [label="_symbolList.Clear(); 676819"];
4494 [label="this.Clear(); 676820"];
4495 [label="lookupResult.Free(); 676821"];
4496 [label="return type; 676822"];
4497 [label="NamedTypeSymbol resultType; 676823"];
4498 [label="if (isUnboundTypeExpr)\n            {\n                if (!IsUnboundTypeAllowed(node))\n                {\n                    // If we already have an error type then skip reporting that the unbound type is illegal.\n                    if (!unconstructedType.IsErrorType())\n                    {\n                        // error CS7003: Unexpected use of an unbound generic name\n                        diagnostics.Add(ErrorCode.ERR_UnexpectedUnboundGenericName, node.Location);\n                    }\n\n                    resultType = unconstructedType.Construct(\n                        UnboundArgumentErrorTypeSymbol.CreateTypeArguments(\n                            unconstructedType.TypeParameters,\n                            node.Arity,\n                            errorInfo: null),\n                        unbound: false);\n                }\n                else\n                {\n                    resultType = unconstructedType.AsUnboundGenericType();\n                }\n            }\n            else if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)\n            {\n                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));\n            }\n            else\n            {\n                // It's not an unbound type expression, so we must have type arguments, and we have a\n                // generic type of the correct arity in hand (possibly an error type). Bind the type\n                // arguments and construct the final result.\n                resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics);\n            } 676824"];
4499 [label="if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)\n            {\n                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));\n            }\n            else\n            {\n                // It's not an unbound type expression, so we must have type arguments, and we have a\n                // generic type of the correct arity in hand (possibly an error type). Bind the type\n                // arguments and construct the final result.\n                resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics);\n            } 676825"];
4500 [label="if ((Flags & BinderFlags.SuppressTypeArgumentBinding) != 0)\n            {\n                resultType = unconstructedType.Construct(PlaceholderTypeArgumentSymbol.CreateTypeArguments(unconstructedType.TypeParameters));\n            }\n            else\n            {\n                // It's not an unbound type expression, so we must have type arguments, and we have a\n                // generic type of the correct arity in hand (possibly an error type). Bind the type\n                // arguments and construct the final result.\n                resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics);\n            } 676826"];
4501 [label="resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics); 676827"];
4502 [label="resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics); 676828"];
4503 [label="resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics); 676829"];
4504 [label="resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics); 676830"];
4505 [label="resultType = ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics); 676831"];
4506 [label="BindTypeArguments(typeArguments, diagnostics, basesBeingResolved) 676832"];
4507 [label="param BindTypeArguments(SeparatedSyntaxList<TypeSyntax> typeArguments) 676833"];
4508 [label="param BindTypeArguments(DiagnosticBag diagnostics) 676834"];
4509 [label="param BindTypeArguments(ConsList<TypeSymbol> basesBeingResolved = null) 676835"];
4510 [label="param BindTypeArguments(this) 676836"];
4511 [label="Debug.Assert(typeArguments.Count > 0); 676837"];
4512 [label="Debug.Assert(typeArguments.Count > 0); 676838"];
4513 [label="var args = ArrayBuilder<TypeWithAnnotations>.GetInstance(); 676839"];
4514 [label="foreach (var argSyntax in typeArguments)\n            {\n                args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved));\n            } 676840"];
4515 [label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 676841"];
4516 [label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 676842"];
4517 [label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 676843"];
4518 [label="BindTypeArgument(argSyntax, diagnostics, basesBeingResolved) 676844"];
4519 [label="param BindTypeArgument(TypeSyntax typeArgument) 676845"];
4520 [label="param BindTypeArgument(DiagnosticBag diagnostics) 676846"];
4521 [label="param BindTypeArgument(ConsList<TypeSymbol> basesBeingResolved = null) 676847"];
4522 [label="param BindTypeArgument(this) 676848"];
4523 [label="var binder = this.WithAdditionalFlags(BinderFlags.SuppressUnsafeDiagnostics); 676849"];
4524 [label="this.WithAdditionalFlags(BinderFlags.SuppressUnsafeDiagnostics) 676850"];
4525 [label="param WithAdditionalFlags(BinderFlags flags) 676851"];
4526 [label="param WithAdditionalFlags(this) 676852"];
4527 [label="return (self & other) == other; 676853"];
4528 [label="RoslynDebug.Assert(next != null); 676854"];
4529 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 676855"];
4530 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 676856"];
4531 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 676857"];
4532 [label="param Includes(this BinderFlags self) 676858"];
4533 [label="param Includes(BinderFlags other) 676859"];
4534 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 676860"];
4535 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 676861"];
4536 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 676862"];
4537 [label="param Includes(this BinderFlags self) 676863"];
4538 [label="param Includes(BinderFlags other) 676864"];
4539 [label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument\n                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)\n                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 676865"];
4540 [label="typeArgument.Kind() == SyntaxKind.OmittedTypeArgument 676866"];
4541 [label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument\n                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)\n                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 676867"];
4542 [label="var arg = typeArgument.Kind() == SyntaxKind.OmittedTypeArgument\n                ? TypeWithAnnotations.Create(UnboundArgumentErrorTypeSymbol.Instance)\n                : binder.BindType(typeArgument, diagnostics, basesBeingResolved); 676868"];
4543 [label="binder.BindType(typeArgument, diagnostics, basesBeingResolved) 676869"];
4544 [label="param BindType(DiagnosticBag diagnostics) 676870"];
4545 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 676871"];
4546 [label="param BindType(this) 676872"];
4547 [label="Debug.Assert(diagnostics != null); 676873"];
4548 [label="Debug.Assert(diagnostics != null); 676874"];
4549 [label="param GetSpecialType(SyntaxNode node) 676875"];
4550 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 676876"];
4551 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 676877"];
4552 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 676878"];
4553 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 676879"];
4554 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 676880"];
4555 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 676881"];
4556 [label="Debug.Assert(typeWithAnnotations.HasType); 676882"];
4557 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 676883"];
4558 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676884"];
4559 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676885"];
4560 [label="get\n            {\n                RoslynDebug.Assert(Next is object);\n                return Next.ContainingMemberOrLambda;\n            } 676886"];
4561 [label="RoslynDebug.Assert(Next is object); 676887"];
4562 [label="Next.ContainingMemberOrLambda 676888"];
4563 [label="get { return _containingMemberOrLambda; } 676889"];
4564 [label="return Next.ContainingMemberOrLambda; 676890"];
4565 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676891"];
4566 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676892"];
4567 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 676893"];
4568 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676894"];
4569 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 676895"];
4570 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 676896"];
4571 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 676897"];
4572 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 676898"];
4573 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 676899"];
4574 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 676900"];
4575 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 676901"];
4576 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 676902"];
4577 [label="RoslynDebug.Assert(diagnostics != null); 676903"];
4578 [label="RoslynDebug.Assert(diagnostics != null); 676904"];
4579 [label="DiagnosticInfo? info = null; 676905"];
4580 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 676906"];
4581 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 676907"];
4582 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 676908"];
4583 [label="return kind; 676909"];
4584 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 676910"];
4585 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 676911"];
4586 [label="param UnwrapAlias(DiagnosticBag diagnostics) 676912"];
4587 [label="param UnwrapAlias(SyntaxNode syntax) 676913"];
4588 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 676914"];
4589 [label="param UnwrapAlias(this) 676915"];
4590 [label="symbol.IsAlias 676916"];
4591 [label="=> _symbol?.Kind == SymbolKind.Alias 676917"];
4592 [label="_symbol 676918"];
4593 [label="_symbol?.Kind == SymbolKind.Alias 676919"];
4594 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 676920"];
4595 [label="return arg; 676921"];
4596 [label="args.Add(BindTypeArgument(argSyntax, diagnostics, basesBeingResolved)); 676922"];
4597 [label="return args.ToImmutableAndFree(); 676923"];
4598 [label="ConstructNamedType(\n                    unconstructedType,\n                    node,\n                    typeArguments,\n                    BindTypeArguments(typeArguments, diagnostics, basesBeingResolved),\n                    basesBeingResolved,\n                    diagnostics) 676924"];
4599 [label="param ConstructNamedType(NamedTypeSymbol type) 676925"];
4600 [label="param ConstructNamedType(SyntaxNode typeSyntax) 676926"];
4601 [label="param ConstructNamedType(SeparatedSyntaxList<TypeSyntax> typeArgumentsSyntax) 676927"];
4602 [label="param ConstructNamedType(ImmutableArray<TypeWithAnnotations> typeArguments) 676928"];
4603 [label="param ConstructNamedType(ConsList<TypeSymbol> basesBeingResolved) 676929"];
4604 [label="param ConstructNamedType(DiagnosticBag diagnostics) 676930"];
4605 [label="param ConstructNamedType(this) 676931"];
4606 [label="Debug.Assert(!typeArguments.IsEmpty); 676932"];
4607 [label="type = type.Construct(typeArguments); 676933"];
4608 [label="type = type.Construct(typeArguments); 676934"];
4609 [label="ShouldCheckConstraints 676935"];
4610 [label="get\n            {\n                return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks);\n            } 676936"];
4611 [label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 676937"];
4612 [label="return !this.Flags.Includes(BinderFlags.SuppressConstraintChecks); 676938"];
4613 [label="this.Flags.Includes(BinderFlags.SuppressConstraintChecks) 676939"];
4614 [label="param Includes(this BinderFlags self) 676940"];
4615 [label="param Includes(BinderFlags other) 676941"];
4616 [label="if (ShouldCheckConstraints && ConstraintsHelper.RequiresChecking(type))\n            {\n                bool includeNullability = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes);\n                type.CheckConstraintsForNamedType(this.Conversions, includeNullability, typeSyntax, typeArgumentsSyntax, this.Compilation, basesBeingResolved, diagnostics);\n            } 676942"];
4617 [label="return type; 676943"];
4618 [label="if (options.IsAttributeTypeLookup())\n            {\n                // Generic type cannot be an attribute type.\n                // Parser error has already been reported, just wrap the result type with error type symbol.\n                Debug.Assert(unconstructedType.IsErrorType());\n                Debug.Assert(resultType.IsErrorType());\n                resultType = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(resultType), resultType,\n                    LookupResultKind.NotAnAttributeType, errorInfo: null);\n            } 676944"];
4619 [label="options.IsAttributeTypeLookup() 676945"];
4620 [label="param IsAttributeTypeLookup(this LookupOptions options) 676946"];
4621 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 676947"];
4622 [label="AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken) 676948"];
4623 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 676949"];
4624 [label="param AreNullableAnnotationsEnabled(this) 676950"];
4625 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 676951"];
4626 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 676952"];
4627 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(node.TypeArgumentList.GreaterThanToken), resultType); 676953"];
4628 [label="Debug.Assert(typeWithAnnotations.HasType); 676954"];
4629 [label="return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null); 676955"];
4630 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676956"];
4631 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676957"];
4632 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676958"];
4633 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 676959"];
4634 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 676960"];
4635 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 676961"];
4636 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 676962"];
4637 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 676963"];
4638 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 676964"];
4639 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 676965"];
4640 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 676966"];
4641 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 676967"];
4642 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 676968"];
4643 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 676969"];
4644 [label="RoslynDebug.Assert(diagnostics != null); 676970"];
4645 [label="RoslynDebug.Assert(diagnostics != null); 676971"];
4646 [label="DiagnosticInfo? info = null; 676972"];
4647 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 676973"];
4648 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 676974"];
4649 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 676975"];
4650 [label="return kind; 676976"];
4651 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 676977"];
4652 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 676978"];
4653 [label="=> _symbol?.Kind == SymbolKind.Alias 676979"];
4654 [label="_symbol 676980"];
4655 [label="_symbol?.Kind == SymbolKind.Alias 676981"];
4656 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 676982"];
4657 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 676983"];
4658 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 676984"];
4659 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 676985"];
4660 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 676986"];
4661 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 676987"];
4662 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 676988"];
4663 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 676989"];
4664 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 676990"];
4665 [label="param ValidateNameConflictsInScope(Symbol? symbol) 676991"];
4666 [label="param ValidateNameConflictsInScope(Location location) 676992"];
4667 [label="param ValidateNameConflictsInScope(string name) 676993"];
4668 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 676994"];
4669 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 676995"];
4670 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 676996"];
4671 [label="var scope = binder as LocalScopeBinder; 676997"];
4672 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 676998"];
4673 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 676999"];
4674 [label="binder.IsNestedFunctionBinder 677000"];
4675 [label="=> false 677001"];
4676 [label="false 677002"];
4677 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 677003"];
4678 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 677004"];
4679 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 677005"];
4680 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 677006"];
4681 [label="return false; 677007"];
4682 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 677008"];
4683 [label="pNames?.Free(); 677009"];
4684 [label="param GetSpecialType(SyntaxNode node) 677010"];
4685 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 677011"];
4686 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 677012"];
4687 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 677013"];
4688 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 677014"];
4689 [label="Debug.Assert(typeWithAnnotations.HasType); 677015"];
4690 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 677016"];
4691 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 677017"];
4692 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 677018"];
4693 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 677019"];
4694 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 677020"];
4695 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 677021"];
4696 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 677022"];
4697 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 677023"];
4698 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 677024"];
4699 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 677025"];
4700 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 677026"];
4701 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 677027"];
4702 [label="RoslynDebug.Assert(diagnostics != null); 677028"];
4703 [label="RoslynDebug.Assert(diagnostics != null); 677029"];
4704 [label="DiagnosticInfo? info = null; 677030"];
4705 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 677031"];
4706 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 677032"];
4707 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 677033"];
4708 [label="return kind; 677034"];
4709 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 677035"];
4710 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 677036"];
4711 [label="_symbol 677037"];
4712 [label="_symbol?.Kind == SymbolKind.Alias 677038"];
4713 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 677039"];
4714 [label="param TypeConversions(AssemblySymbol corLibrary) 677040"];
4715 [label="param TypeConversions(bool includeNullability = false) 677041"];
4716 [label="param TypeConversions(this) 677042"];
4717 [label="corLibrary 677043"];
4718 [label="0 677044"];
4719 [label="includeNullability 677045"];
4720 [label="null 677046"];
4721 [label="param TypeConversions(this) 677047"];
4722 [label="param TypeConversions(AssemblySymbol corLibrary) 677048"];
4723 [label="param TypeConversions(int currentRecursionDepth) 677049"];
4724 [label="param TypeConversions(bool includeNullability) 677050"];
4725 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 677051"];
4726 [label="param TypeConversions(this) 677052"];
4727 [label="corLibrary 677053"];
4728 [label="currentRecursionDepth 677054"];
4729 [label="includeNullability 677055"];
4730 [label="otherNullabilityOpt 677056"];
4731 [label="param TypeConversions(this) 677057"];
4732 [label="param ConversionsBase(AssemblySymbol corLibrary) 677058"];
4733 [label="param ConversionsBase(int currentRecursionDepth) 677059"];
4734 [label="param ConversionsBase(bool includeNullability) 677060"];
4735 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 677061"];
4736 [label="param ConversionsBase(this) 677062"];
4737 [label="corLibrary 677063"];
4738 [label="currentRecursionDepth 677064"];
4739 [label="IncludeNullability 677065"];
4740 [label="_lazyOtherNullability 677066"];
4741 [label="Debug.Assert((object)corLibrary != null); 677067"];
4742 [label="Debug.Assert((object)corLibrary != null); 677068"];
4743 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 677069"];
4744 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 677070"];
4745 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 677071"];
4746 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 677072"];
4747 [label="this.corLibrary 677073"];
4748 [label="this.currentRecursionDepth 677074"];
4749 [label="IncludeNullability 677075"];
4750 [label="_lazyOtherNullability 677076"];
4751 [label="var diagnostics = c.GetDiagnostics(); 677077"];
4752 [label="diagnostics.Verify(expected); 677078"];
4753 [label="diagnostics.Verify(expected); 677079"];
4754 [label="diagnostics.Verify(expected) 677080"];
4755 [label="param Verify(this ImmutableArray<Diagnostic> actual) 677081"];
4756 [label="param Verify(params DiagnosticDescription[] expected) 677082"];
4757 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 677083"];
4758 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 677084"];
4759 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 677085"];
4760 [label="param Verify(this IEnumerable<Diagnostic> actual) 677086"];
4761 [label="param Verify(params DiagnosticDescription[] expected) 677087"];
4762 [label="Verify(actual, expected, errorCodeOnly: false); 677088"];
4763 [label="Verify(actual, expected, errorCodeOnly: false); 677089"];
4764 [label="Verify(actual, expected, errorCodeOnly: false); 677090"];
4765 [label="Verify(actual, expected, errorCodeOnly: false) 677091"];
4766 [label="param Verify(IEnumerable<Diagnostic> actual) 677092"];
4767 [label="param Verify(DiagnosticDescription[] expected) 677093"];
4768 [label="param Verify(bool errorCodeOnly) 677094"];
4769 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 677095"];
4770 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 677096"];
4771 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 677097"];
4772 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 677098"];
4773 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 677099"];
4774 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 677100"];
4775 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 677101"];
4776 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 677102"];
4777 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 677103"];
4778 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 677104"];
4779 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 677105"];
4780 [label="{ } 677106"];
4781 [label="None = { } 677107"];
4782 [label="null 677108"];
4783 [label="Any = null 677109"];
4784 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 677110"];
4785 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 677111"];
4786 [label="DiagnosticDescription.GetAssertText(expected, actual) 677112"];
4787 [label="param GetAssertText(DiagnosticDescription[] expected) 677113"];
4788 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 677114"];
4789 [label="const int CSharp = 1; 677115"];
4790 [label="const int VisualBasic = 2; 677116"];
4791 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 677117"];
4792 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 677118"];
4793 [label="actual.Any() && actual.First() is CSDiagnostic 677119"];
4794 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 677120"];
4795 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 677121"];
4796 [label="int indentDepth = (language == CSharp) ? 4 : 1; 677122"];
4797 [label="(language == CSharp) 677123"];
4798 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 677124"];
4799 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 677125"];
4800 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 677126"];
4801 [label="IsSortedOrEmpty(expected) 677127"];
4802 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 677128"];
4803 [label="new LinePositionComparer() 677129"];
4804 [label="param LinePositionComparer(this) 677130"];
4805 [label="Instance = new LinePositionComparer() 677131"];
4806 [label="var comparer = LinePositionComparer.Instance; 677132"];
4807 [label="DiagnosticDescription last = null; 677133"];
4808 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 677134"];
4809 [label="return true; 677135"];
4810 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 677136"];
4811 [label="actual = Sort(actual); 677137"];
4812 [label="Sort(actual) 677138"];
4813 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 677139"];
4814 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 677140"];
4815 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 677141"];
4816 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 677142"];
4817 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 677143"];
4818 [label="var assertText = new StringBuilder(); 677144"];
4819 [label="assertText.AppendLine(); 677145"];
4820 [label="int i; 677146"];
4821 [label="assertText.AppendLine('Expected:'); 677147"];
4822 [label="assertText.AppendLine('Expected:'); 677148"];
4823 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 677149"];
4824 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 677150"];
4825 [label="GetCommaSeparatedLines(assertText, expectedText); 677151"];
4826 [label="GetCommaSeparatedLines(assertText, expectedText); 677152"];
4827 [label="GetCommaSeparatedLines(assertText, expectedText) 677153"];
4828 [label="param GetCommaSeparatedLines(StringBuilder sb) 677154"];
4829 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 677155"];
4830 [label="int n = lines.Count; 677156"];
4831 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 677157"];
4832 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 677158"];
4833 [label="GetCommaSeparatedLines(assertText, expectedText); 677159"];
4834 [label="assertText.AppendLine('Actual:'); 677160"];
4835 [label="assertText.AppendLine('Actual:'); 677161"];
4836 [label="var actualText = ArrayBuilder<string>.GetInstance(); 677162"];
4837 [label="var e = actual.GetEnumerator(); 677163"];
4838 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 677164"];
4839 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 677165"];
4840 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 677166"];
4841 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 677167"];
4842 [label="assertText.AppendLine('Diff:'); 677168"];
4843 [label="assertText.AppendLine('Diff:'); 677169"];
4844 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 677170"];
4845 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 677171"];
4846 [label="new[] { '\\r', '\\n' } 677172"];
4847 [label="'\\r' 677173"];
4848 [label="'\\n' 677174"];
4849 [label="new[] { '\\r', '\\n' } 677175"];
4850 [label="new[] { '\\r', '\\n' } 677176"];
4851 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 677177"];
4852 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 677178"];
4853 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 677179"];
4854 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 677180"];
4855 [label="param DiffReport(IEnumerable<T> expected) 677181"];
4856 [label="param DiffReport(IEnumerable<T> actual) 677182"];
4857 [label="param DiffReport(string separator) 677183"];
4858 [label="param DiffReport(IEqualityComparer<T> comparer = null) 677184"];
4859 [label="param DiffReport(Func<T, string> toString = null) 677185"];
4860 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 677186"];
4861 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 677187"];
4862 [label="(comparer != null) 677188"];
4863 [label="EqualityComparer<T>.Default 677189"];
4864 [label="new LCS<T>(EqualityComparer<T>.Default) 677190"];
4865 [label="param LCS(IEqualityComparer<T> comparer) 677191"];
4866 [label="param LCS(this) 677192"];
4867 [label="1 677193"];
4868 [label="DeleteCost = 1 677194"];
4869 [label="1 677195"];
4870 [label="InsertCost = 1 677196"];
4871 [label="2 677197"];
4872 [label="UpdateCost = 2 677198"];
4873 [label="param LongestCommonSubsequence(this) 677199"];
4874 [label="_comparer 677200"];
4875 [label="_comparer 677201"];
4876 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 677202"];
4877 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 677203"];
4878 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 677204"];
4879 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 677205"];
4880 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 677206"];
4881 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677207"];
4882 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677208"];
4883 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677209"];
4884 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677210"];
4885 [label="lcs.CalculateDiff(expectedList, actualList, toString) 677211"];
4886 [label="param CalculateDiff(IList<T> sequenceA) 677212"];
4887 [label="param CalculateDiff(IList<T> sequenceB) 677213"];
4888 [label="param CalculateDiff(Func<T, string> toString) 677214"];
4889 [label="param CalculateDiff(this) 677215"];
4890 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 677216"];
4891 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 677217"];
4892 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 677218"];
4893 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 677219"];
4894 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 677220"];
4895 [label="param GetEdits(TSequence sequenceA) 677221"];
4896 [label="param GetEdits(int lengthA) 677222"];
4897 [label="param GetEdits(TSequence sequenceB) 677223"];
4898 [label="param GetEdits(int lengthB) 677224"];
4899 [label="param GetEdits(this) 677225"];
4900 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 677226"];
4901 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 677227"];
4902 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 677228"];
4903 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 677229"];
4904 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 677230"];
4905 [label="param ComputeCostMatrix(TSequence sequenceA) 677231"];
4906 [label="param ComputeCostMatrix(int lengthA) 677232"];
4907 [label="param ComputeCostMatrix(TSequence sequenceB) 677233"];
4908 [label="param ComputeCostMatrix(int lengthB) 677234"];
4909 [label="param ComputeCostMatrix(this) 677235"];
4910 [label="var la = lengthA + 1; 677236"];
4911 [label="var la = lengthA + 1; 677237"];
4912 [label="var lb = lengthB + 1; 677238"];
4913 [label="var lb = lengthB + 1; 677239"];
4914 [label="var d = new int[la, lb]; 677240"];
4915 [label="d[0, 0] = 0; 677241"];
4916 [label="d[0, 0] 677242"];
4917 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 677243"];
4918 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 677244"];
4919 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 677245"];
4920 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 677246"];
4921 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 677247"];
4922 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 677248"];
4923 [label="return d; 677249"];
4924 [label="int i = lengthA; 677250"];
4925 [label="int j = lengthB; 677251"];
4926 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 677252"];
4927 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 677253"];
4928 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 677254"];
4929 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 677255"];
4930 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 677256"];
4931 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 677257"];
4932 [label="param GetEdits(this) 677258"];
4933 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 677259"];
4934 [label="param CalculateDiff(this) 677260"];
4935 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677261"];
4936 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 677262"];
4937 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 677263"];
4938 [label="actualText.Free(); 677264"];
4939 [label="expectedText.Free(); 677265"];
4940 [label="return assertText.ToString(); 677266"];
4941 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 677267"];
4942 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 677268"];
4943 [label="diagnostics.Verify(expected); 677269"];
4944 [label="VerifyAssemblyIds(c, diagnostics); 677270"];
4945 [label="VerifyAssemblyIds(c, diagnostics); 677271"];
4946 [label="VerifyAssemblyIds(c, diagnostics) 677272"];
4947 [label="param VerifyAssemblyIds(TCompilation c) 677273"];
4948 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 677274"];
4949 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 677275"];
4950 [label="VerifyAssemblyIds(c, diagnostics); 677276"];
4951 [label="return c; 677277"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 236;
239 -> 0;
239 -> 238;
240 -> 239;
240 -> 237;
240 -> 236;
241 -> 240;
241 -> 234;
242 -> 227;
243 -> 229;
243 -> 242;
243 -> 227;
244 -> 241;
244 -> 243;
245 -> 218;
245 -> 215;
246 -> 219;
246 -> 215;
247 -> 221;
247 -> 215;
248 -> 222;
248 -> 215;
249 -> 223;
249 -> 215;
250 -> 215;
251 -> 224;
251 -> 250;
252 -> 244;
252 -> 250;
253 -> 245;
253 -> 250;
254 -> 246;
254 -> 250;
255 -> 247;
255 -> 250;
256 -> 248;
256 -> 250;
257 -> 249;
257 -> 250;
258 -> 251;
258 -> 250;
259 -> 252;
259 -> 250;
260 -> 253;
260 -> 250;
261 -> 254;
261 -> 250;
262 -> 255;
262 -> 250;
263 -> 256;
263 -> 250;
264 -> 257;
264 -> 250;
265 -> 250;
266 -> 265;
266 -> 250;
267 -> 250;
268 -> 258;
268 -> 267;
269 -> 259;
269 -> 267;
270 -> 260;
270 -> 267;
271 -> 261;
271 -> 267;
272 -> 262;
272 -> 267;
273 -> 263;
273 -> 267;
274 -> 264;
274 -> 267;
275 -> 266;
275 -> 267;
276 -> 271;
276 -> 267;
277 -> 273;
277 -> 267;
278 -> 267;
279 -> 276;
279 -> 278;
280 -> 277;
280 -> 278;
281 -> 268;
281 -> 278;
282 -> 281;
282 -> 212;
282 -> 278;
283 -> 282;
284 -> 280;
284 -> 282;
285 -> 279;
285 -> 282;
286 -> 282;
287 -> 283;
287 -> 286;
288 -> 284;
288 -> 286;
289 -> 285;
289 -> 286;
290 -> 283;
290 -> 286;
291 -> 286;
292 -> 289;
292 -> 291;
292 -> 286;
293 -> 0;
294 -> 0;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 297;
299 -> 296;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 297;
302 -> 296;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 297;
305 -> 296;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 297;
308 -> 296;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 297;
311 -> 296;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 297;
314 -> 296;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 297;
317 -> 296;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 297;
320 -> 296;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 297;
323 -> 296;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 297;
326 -> 296;
326 -> 325;
327 -> 326;
328 -> 0;
329 -> 297;
329 -> 296;
329 -> 328;
330 -> 329;
331 -> 297;
334 -> 331;
334 -> 333;
335 -> 332;
335 -> 333;
336 -> 333;
337 -> 334;
337 -> 296;
337 -> 333;
338 -> 333;
339 -> 335;
339 -> 333;
340 -> 336;
340 -> 333;
341 -> 339;
341 -> 340;
341 -> 333;
342 -> 341;
342 -> 338;
342 -> 333;
343 -> 337;
343 -> 338;
343 -> 296;
343 -> 342;
343 -> 341;
343 -> 333;
344 -> 343;
345 -> 0;
346 -> 345;
348 -> 346;
348 -> 347;
349 -> 297;
349 -> 296;
349 -> 348;
350 -> 349;
351 -> 0;
352 -> 351;
353 -> 297;
353 -> 296;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 297;
356 -> 296;
356 -> 355;
357 -> 356;
358 -> 321;
360 -> 359;
361 -> 0;
362 -> 0;
363 -> 0;
365 -> 361;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 360;
367 -> 365;
367 -> 366;
367 -> 359;
368 -> 367;
372 -> 369;
372 -> 370;
372 -> 371;
373 -> 303;
373 -> 296;
373 -> 302;
373 -> 369;
373 -> 372;
374 -> 373;
375 -> 315;
376 -> 324;
377 -> 324;
378 -> 321;
379 -> 0;
380 -> 0;
382 -> 379;
382 -> 381;
383 -> 380;
383 -> 381;
384 -> 381;
385 -> 382;
385 -> 381;
386 -> 383;
386 -> 381;
387 -> 0;
387 -> 381;
388 -> 384;
388 -> 381;
389 -> 381;
390 -> 385;
390 -> 386;
390 -> 387;
390 -> 388;
390 -> 389;
390 -> 381;
391 -> 390;
392 -> 0;
393 -> 0;
395 -> 392;
395 -> 394;
396 -> 393;
396 -> 394;
397 -> 394;
398 -> 395;
398 -> 394;
399 -> 396;
399 -> 394;
400 -> 0;
400 -> 394;
401 -> 397;
401 -> 394;
402 -> 394;
403 -> 398;
403 -> 399;
403 -> 400;
403 -> 401;
403 -> 402;
403 -> 394;
404 -> 403;
406 -> 391;
406 -> 390;
406 -> 405;
407 -> 406;
409 -> 404;
409 -> 403;
409 -> 408;
410 -> 409;
411 -> 0;
412 -> 0;
414 -> 411;
414 -> 413;
415 -> 412;
415 -> 413;
416 -> 413;
417 -> 414;
417 -> 413;
418 -> 415;
418 -> 413;
419 -> 0;
419 -> 413;
420 -> 416;
420 -> 413;
421 -> 413;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 420;
422 -> 421;
422 -> 413;
423 -> 422;
424 -> 0;
425 -> 0;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 426;
430 -> 427;
430 -> 426;
431 -> 428;
431 -> 426;
432 -> 0;
432 -> 426;
433 -> 429;
433 -> 426;
434 -> 426;
435 -> 430;
435 -> 431;
435 -> 432;
435 -> 433;
435 -> 434;
435 -> 426;
436 -> 435;
437 -> 0;
438 -> 0;
440 -> 437;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 439;
443 -> 440;
443 -> 439;
444 -> 441;
444 -> 439;
445 -> 0;
445 -> 439;
446 -> 442;
446 -> 439;
447 -> 439;
448 -> 443;
448 -> 444;
448 -> 445;
448 -> 446;
448 -> 447;
448 -> 439;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
490 -> 391;
490 -> 390;
490 -> 489;
491 -> 490;
493 -> 404;
493 -> 403;
493 -> 492;
494 -> 493;
496 -> 423;
496 -> 422;
496 -> 495;
497 -> 496;
499 -> 436;
499 -> 435;
499 -> 498;
500 -> 499;
501 -> 0;
502 -> 391;
502 -> 390;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 404;
505 -> 403;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 475;
508 -> 474;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 423;
511 -> 422;
511 -> 510;
511 -> 0;
512 -> 511;
513 -> 0;
514 -> 0;
514 -> 513;
515 -> 514;
516 -> 297;
516 -> 292;
517 -> 287;
517 -> 286;
518 -> 0;
518 -> 286;
519 -> 518;
519 -> 290;
519 -> 286;
520 -> 286;
521 -> 517;
521 -> 519;
521 -> 520;
521 -> 0;
521 -> 286;
522 -> 521;
522 -> 286;
523 -> 516;
523 -> 286;
524 -> 288;
524 -> 286;
525 -> 286;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 521;
526 -> 296;
526 -> 286;
527 -> 286;
528 -> 526;
528 -> 527;
529 -> 527;
530 -> 527;
531 -> 528;
531 -> 526;
531 -> 530;
531 -> 527;
532 -> 529;
532 -> 527;
533 -> 527;
534 -> 531;
534 -> 526;
534 -> 530;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 527;
535 -> 527;
536 -> 535;
536 -> 529;
536 -> 527;
537 -> 529;
537 -> 527;
538 -> 527;
539 -> 537;
539 -> 538;
539 -> 529;
539 -> 536;
539 -> 527;
540 -> 528;
540 -> 527;
541 -> 540;
541 -> 283;
541 -> 282;
542 -> 283;
542 -> 267;
543 -> 267;
544 -> 270;
544 -> 543;
544 -> 267;
545 -> 542;
545 -> 544;
546 -> 544;
547 -> 545;
547 -> 546;
547 -> 283;
547 -> 541;
547 -> 526;
547 -> 544;
548 -> 547;
548 -> 544;
549 -> 391;
549 -> 548;
550 -> 0;
550 -> 267;
551 -> 275;
551 -> 267;
552 -> 272;
552 -> 542;
552 -> 269;
552 -> 549;
552 -> 267;
553 -> 552;
553 -> 267;
554 -> 267;
555 -> 553;
555 -> 554;
556 -> 0;
556 -> 554;
557 -> 556;
558 -> 267;
559 -> 552;
559 -> 283;
559 -> 541;
559 -> 526;
559 -> 240;
559 -> 0;
559 -> 390;
559 -> 237;
559 -> 267;
560 -> 267;
561 -> 560;
562 -> 559;
562 -> 561;
562 -> 267;
563 -> 562;
563 -> 267;
564 -> 267;
565 -> 563;
565 -> 564;
566 -> 565;
566 -> 562;
566 -> 564;
567 -> 566;
567 -> 562;
567 -> 564;
568 -> 564;
569 -> 566;
569 -> 568;
569 -> 562;
569 -> 564;
570 -> 0;
570 -> 564;
571 -> 569;
571 -> 570;
571 -> 564;
572 -> 274;
572 -> 571;
572 -> 267;
573 -> 562;
573 -> 267;
574 -> 1;
575 -> 573;
575 -> 574;
576 -> 214;
576 -> 574;
577 -> 574;
579 -> 0;
580 -> 0;
581 -> 0;
584 -> 578;
584 -> 583;
585 -> 579;
585 -> 583;
586 -> 580;
586 -> 583;
587 -> 581;
587 -> 583;
588 -> 582;
588 -> 583;
589 -> 583;
590 -> 589;
590 -> 583;
591 -> 589;
591 -> 583;
592 -> 589;
592 -> 583;
593 -> 583;
594 -> 585;
594 -> 593;
594 -> 583;
595 -> 586;
595 -> 0;
595 -> 583;
596 -> 587;
596 -> 0;
596 -> 583;
597 -> 584;
597 -> 589;
597 -> 583;
598 -> 585;
598 -> 589;
598 -> 583;
599 -> 586;
599 -> 589;
599 -> 583;
600 -> 588;
600 -> 589;
600 -> 583;
601 -> 587;
601 -> 589;
601 -> 583;
602 -> 583;
603 -> 577;
603 -> 575;
603 -> 571;
603 -> 574;
604 -> 603;
604 -> 577;
605 -> 604;
605 -> 603;
605 -> 577;
606 -> 577;
607 -> 605;
607 -> 603;
607 -> 606;
607 -> 577;
608 -> 604;
608 -> 603;
608 -> 606;
608 -> 577;
609 -> 602;
609 -> 607;
610 -> 603;
610 -> 609;
610 -> 597;
610 -> 600;
610 -> 598;
610 -> 599;
610 -> 601;
610 -> 0;
610 -> 574;
611 -> 603;
611 -> 577;
612 -> 603;
612 -> 577;
613 -> 577;
614 -> 611;
614 -> 610;
614 -> 613;
615 -> 612;
615 -> 614;
615 -> 613;
616 -> 615;
616 -> 613;
617 -> 0;
617 -> 616;
618 -> 615;
618 -> 613;
619 -> 611;
619 -> 613;
620 -> 612;
620 -> 617;
620 -> 618;
620 -> 619;
620 -> 613;
621 -> 0;
621 -> 620;
622 -> 621;
623 -> 612;
623 -> 622;
624 -> 623;
624 -> 602;
624 -> 622;
625 -> 624;
626 -> 621;
627 -> 0;
627 -> 621;
628 -> 627;
629 -> 603;
629 -> 577;
630 -> 603;
630 -> 577;
631 -> 629;
631 -> 630;
631 -> 577;
632 -> 603;
632 -> 631;
632 -> 627;
632 -> 574;
634 -> 633;
636 -> 635;
638 -> 637;
641 -> 640;
642 -> 0;
643 -> 0;
644 -> 0;
645 -> 644;
647 -> 642;
647 -> 643;
647 -> 645;
647 -> 646;
648 -> 647;
650 -> 649;
652 -> 651;
654 -> 653;
656 -> 655;
657 -> 603;
657 -> 577;
658 -> 603;
658 -> 577;
659 -> 603;
659 -> 577;
660 -> 603;
660 -> 577;
661 -> 603;
661 -> 577;
662 -> 577;
663 -> 660;
663 -> 662;
663 -> 577;
664 -> 661;
664 -> 662;
664 -> 577;
665 -> 663;
665 -> 664;
665 -> 577;
666 -> 658;
666 -> 577;
667 -> 657;
667 -> 577;
668 -> 658;
668 -> 577;
669 -> 659;
669 -> 577;
670 -> 660;
670 -> 577;
671 -> 661;
671 -> 577;
672 -> 666;
672 -> 577;
673 -> 577;
674 -> 667;
674 -> 673;
675 -> 668;
675 -> 673;
676 -> 669;
676 -> 673;
677 -> 670;
677 -> 673;
678 -> 671;
678 -> 673;
679 -> 672;
679 -> 673;
680 -> 673;
681 -> 678;
681 -> 680;
681 -> 673;
682 -> 677;
682 -> 680;
682 -> 673;
683 -> 681;
683 -> 682;
683 -> 673;
684 -> 673;
685 -> 674;
685 -> 673;
686 -> 675;
686 -> 673;
687 -> 684;
687 -> 673;
688 -> 679;
688 -> 673;
689 -> 673;
690 -> 685;
690 -> 689;
691 -> 686;
691 -> 689;
692 -> 687;
692 -> 689;
693 -> 688;
693 -> 689;
694 -> 691;
694 -> 689;
695 -> 694;
695 -> 690;
695 -> 632;
695 -> 689;
696 -> 689;
697 -> 695;
697 -> 696;
698 -> 695;
698 -> 696;
699 -> 697;
699 -> 696;
700 -> 697;
700 -> 695;
700 -> 696;
701 -> 696;
702 -> 697;
702 -> 695;
702 -> 696;
703 -> 697;
703 -> 695;
703 -> 696;
704 -> 703;
704 -> 696;
705 -> 696;
706 -> 701;
706 -> 705;
706 -> 689;
707 -> 701;
707 -> 696;
708 -> 701;
708 -> 696;
709 -> 707;
709 -> 696;
710 -> 707;
710 -> 696;
711 -> 707;
711 -> 696;
712 -> 707;
712 -> 696;
713 -> 712;
713 -> 696;
714 -> 712;
714 -> 713;
715 -> 690;
715 -> 694;
715 -> 695;
715 -> 705;
715 -> 689;
716 -> 689;
717 -> 715;
717 -> 716;
717 -> 689;
718 -> 715;
718 -> 717;
719 -> 717;
720 -> 718;
720 -> 719;
721 -> 718;
721 -> 719;
722 -> 720;
722 -> 719;
723 -> 720;
723 -> 718;
723 -> 719;
724 -> 719;
725 -> 720;
725 -> 718;
725 -> 719;
726 -> 720;
726 -> 718;
726 -> 719;
727 -> 726;
727 -> 719;
728 -> 724;
728 -> 719;
729 -> 724;
729 -> 719;
730 -> 728;
730 -> 719;
731 -> 728;
731 -> 719;
732 -> 728;
732 -> 719;
733 -> 728;
733 -> 719;
734 -> 733;
734 -> 719;
735 -> 717;
736 -> 719;
736 -> 735;
736 -> 717;
737 -> 715;
737 -> 689;
738 -> 673;
739 -> 719;
739 -> 738;
739 -> 673;
740 -> 737;
740 -> 673;
741 -> 719;
741 -> 696;
742 -> 719;
742 -> 696;
743 -> 741;
743 -> 696;
744 -> 741;
744 -> 719;
744 -> 696;
745 -> 741;
745 -> 719;
745 -> 696;
746 -> 741;
746 -> 719;
746 -> 696;
747 -> 746;
747 -> 696;
748 -> 724;
749 -> 724;
750 -> 748;
750 -> 724;
751 -> 748;
751 -> 724;
752 -> 748;
752 -> 724;
753 -> 748;
753 -> 724;
754 -> 753;
754 -> 724;
755 -> 719;
756 -> 724;
756 -> 755;
756 -> 719;
757 -> 719;
757 -> 689;
758 -> 724;
758 -> 738;
758 -> 673;
759 -> 757;
759 -> 673;
760 -> 724;
761 -> 724;
761 -> 689;
762 -> 761;
762 -> 673;
763 -> 603;
763 -> 577;
764 -> 603;
764 -> 577;
765 -> 603;
765 -> 577;
766 -> 603;
766 -> 577;
767 -> 766;
767 -> 577;
768 -> 766;
768 -> 577;
769 -> 766;
769 -> 577;
770 -> 766;
770 -> 577;
771 -> 766;
771 -> 577;
772 -> 766;
772 -> 577;
773 -> 763;
773 -> 766;
773 -> 577;
774 -> 764;
774 -> 766;
774 -> 577;
775 -> 765;
775 -> 766;
775 -> 577;
776 -> 766;
776 -> 577;
777 -> 577;
778 -> 776;
778 -> 777;
778 -> 767;
778 -> 773;
778 -> 774;
778 -> 770;
778 -> 775;
778 -> 772;
778 -> 724;
778 -> 577;
779 -> 778;
779 -> 766;
779 -> 577;
780 -> 577;
781 -> 780;
781 -> 766;
781 -> 577;
782 -> 763;
782 -> 577;
783 -> 577;
784 -> 577;
785 -> 782;
785 -> 784;
786 -> 783;
786 -> 784;
787 -> 785;
787 -> 784;
788 -> 784;
789 -> 787;
789 -> 788;
790 -> 786;
790 -> 788;
791 -> 790;
791 -> 788;
792 -> 790;
792 -> 788;
793 -> 790;
793 -> 788;
794 -> 790;
794 -> 788;
795 -> 790;
795 -> 788;
796 -> 788;
797 -> 789;
797 -> 796;
797 -> 788;
798 -> 790;
798 -> 788;
799 -> 798;
799 -> 791;
799 -> 792;
799 -> 793;
799 -> 794;
799 -> 795;
799 -> 788;
800 -> 789;
800 -> 778;
800 -> 779;
800 -> 781;
800 -> 790;
800 -> 788;
801 -> 789;
801 -> 790;
801 -> 788;
802 -> 783;
802 -> 766;
802 -> 577;
803 -> 603;
803 -> 778;
803 -> 779;
803 -> 781;
803 -> 802;
803 -> 780;
803 -> 799;
803 -> 800;
803 -> 801;
803 -> 574;
804 -> 603;
804 -> 577;
805 -> 603;
805 -> 577;
806 -> 603;
806 -> 577;
807 -> 804;
807 -> 803;
807 -> 577;
808 -> 806;
808 -> 807;
809 -> 807;
810 -> 808;
810 -> 809;
811 -> 808;
811 -> 809;
812 -> 809;
813 -> 812;
813 -> 809;
814 -> 812;
814 -> 809;
815 -> 812;
815 -> 809;
816 -> 812;
816 -> 809;
817 -> 810;
817 -> 812;
817 -> 809;
818 -> 808;
818 -> 812;
818 -> 813;
818 -> 814;
818 -> 815;
818 -> 816;
818 -> 817;
818 -> 807;
819 -> 807;
820 -> 807;
821 -> 819;
821 -> 820;
822 -> 819;
822 -> 820;
823 -> 819;
823 -> 820;
824 -> 818;
824 -> 820;
825 -> 820;
826 -> 822;
826 -> 825;
826 -> 820;
827 -> 823;
827 -> 825;
827 -> 820;
828 -> 826;
828 -> 827;
828 -> 820;
829 -> 821;
829 -> 824;
829 -> 820;
830 -> 822;
830 -> 824;
830 -> 820;
831 -> 823;
831 -> 824;
831 -> 820;
832 -> 804;
832 -> 807;
833 -> 805;
833 -> 807;
834 -> 807;
835 -> 806;
835 -> 834;
836 -> 835;
836 -> 818;
836 -> 829;
836 -> 830;
836 -> 831;
836 -> 0;
836 -> 834;
837 -> 836;
837 -> 807;
838 -> 807;
839 -> 832;
839 -> 838;
840 -> 833;
840 -> 838;
841 -> 837;
841 -> 838;
842 -> 818;
842 -> 838;
843 -> 838;
844 -> 842;
844 -> 843;
845 -> 844;
845 -> 818;
845 -> 829;
845 -> 830;
845 -> 831;
845 -> 843;
846 -> 845;
846 -> 838;
847 -> 838;
848 -> 839;
848 -> 846;
848 -> 838;
849 -> 840;
849 -> 838;
850 -> 841;
850 -> 849;
851 -> 0;
851 -> 850;
852 -> 839;
852 -> 838;
853 -> 851;
853 -> 838;
854 -> 838;
855 -> 852;
855 -> 854;
856 -> 853;
856 -> 854;
857 -> 856;
857 -> 854;
858 -> 854;
859 -> 855;
859 -> 854;
860 -> 856;
860 -> 854;
861 -> 854;
862 -> 854;
863 -> 859;
863 -> 862;
864 -> 860;
864 -> 862;
865 -> 861;
865 -> 862;
866 -> 863;
866 -> 865;
866 -> 862;
867 -> 864;
867 -> 865;
867 -> 862;
868 -> 861;
868 -> 838;
869 -> 838;
870 -> 838;
871 -> 842;
871 -> 870;
872 -> 871;
872 -> 818;
872 -> 829;
872 -> 830;
872 -> 831;
872 -> 870;
873 -> 872;
873 -> 838;
874 -> 868;
874 -> 838;
875 -> 869;
875 -> 838;
876 -> 874;
876 -> 875;
876 -> 873;
876 -> 866;
876 -> 867;
876 -> 818;
876 -> 829;
876 -> 830;
876 -> 831;
876 -> 838;
877 -> 838;
878 -> 876;
878 -> 877;
879 -> 878;
879 -> 876;
879 -> 877;
880 -> 879;
881 -> 842;
881 -> 880;
882 -> 881;
882 -> 879;
882 -> 880;
883 -> 882;
883 -> 879;
884 -> 841;
884 -> 879;
885 -> 884;
886 -> 842;
886 -> 885;
887 -> 886;
887 -> 879;
887 -> 885;
888 -> 887;
888 -> 884;
889 -> 883;
889 -> 884;
890 -> 839;
890 -> 884;
891 -> 840;
891 -> 884;
892 -> 884;
893 -> 884;
894 -> 888;
894 -> 893;
895 -> 889;
895 -> 893;
896 -> 890;
896 -> 893;
897 -> 891;
897 -> 893;
898 -> 892;
898 -> 893;
899 -> 895;
899 -> 893;
900 -> 893;
901 -> 899;
901 -> 900;
902 -> 898;
902 -> 900;
903 -> 900;
904 -> 900;
905 -> 901;
905 -> 904;
905 -> 900;
906 -> 901;
906 -> 902;
906 -> 900;
907 -> 901;
907 -> 879;
907 -> 902;
907 -> 900;
908 -> 901;
908 -> 879;
908 -> 902;
908 -> 900;
909 -> 903;
909 -> 902;
909 -> 900;
910 -> 898;
910 -> 893;
911 -> 898;
911 -> 893;
912 -> 898;
912 -> 893;
913 -> 898;
913 -> 893;
914 -> 898;
914 -> 893;
915 -> 893;
916 -> 894;
916 -> 915;
916 -> 893;
917 -> 893;
918 -> 896;
918 -> 917;
918 -> 893;
919 -> 894;
919 -> 898;
919 -> 893;
920 -> 896;
920 -> 898;
920 -> 897;
920 -> 893;
921 -> 920;
921 -> 898;
921 -> 893;
922 -> 897;
922 -> 893;
923 -> 896;
923 -> 879;
923 -> 922;
924 -> 896;
924 -> 923;
925 -> 924;
925 -> 923;
925 -> 898;
926 -> 884;
927 -> 842;
927 -> 926;
928 -> 927;
928 -> 923;
928 -> 926;
929 -> 928;
929 -> 884;
930 -> 839;
930 -> 884;
931 -> 884;
932 -> 879;
933 -> 932;
933 -> 929;
934 -> 933;
934 -> 879;
935 -> 868;
935 -> 879;
936 -> 892;
936 -> 879;
937 -> 935;
937 -> 936;
937 -> 934;
937 -> 866;
937 -> 867;
937 -> 908;
937 -> 907;
937 -> 906;
937 -> 909;
937 -> 902;
937 -> 919;
937 -> 921;
937 -> 912;
937 -> 913;
937 -> 914;
937 -> 925;
937 -> 929;
937 -> 920;
937 -> 923;
937 -> 879;
938 -> 879;
939 -> 892;
939 -> 838;
940 -> 818;
940 -> 807;
941 -> 806;
941 -> 937;
941 -> 940;
941 -> 807;
942 -> 939;
942 -> 807;
943 -> 603;
943 -> 942;
943 -> 941;
943 -> 574;
944 -> 603;
944 -> 577;
945 -> 603;
945 -> 577;
946 -> 577;
947 -> 945;
947 -> 943;
947 -> 946;
947 -> 577;
948 -> 577;
949 -> 945;
949 -> 943;
949 -> 948;
949 -> 577;
950 -> 945;
950 -> 943;
950 -> 949;
951 -> 944;
951 -> 949;
952 -> 949;
953 -> 951;
953 -> 952;
954 -> 951;
954 -> 952;
955 -> 951;
955 -> 952;
956 -> 951;
956 -> 952;
957 -> 952;
958 -> 957;
958 -> 952;
959 -> 952;
960 -> 959;
960 -> 952;
961 -> 953;
961 -> 951;
961 -> 952;
962 -> 953;
962 -> 961;
963 -> 956;
963 -> 961;
964 -> 962;
964 -> 961;
964 -> 963;
965 -> 962;
965 -> 961;
965 -> 964;
966 -> 962;
966 -> 961;
967 -> 952;
968 -> 965;
968 -> 961;
968 -> 967;
968 -> 952;
969 -> 952;
970 -> 954;
970 -> 961;
970 -> 952;
971 -> 966;
971 -> 952;
972 -> 954;
972 -> 952;
973 -> 969;
973 -> 952;
974 -> 952;
975 -> 971;
975 -> 974;
976 -> 972;
976 -> 974;
977 -> 973;
977 -> 974;
978 -> 976;
978 -> 961;
978 -> 974;
979 -> 974;
980 -> 975;
980 -> 974;
981 -> 980;
981 -> 961;
981 -> 964;
981 -> 974;
982 -> 979;
982 -> 974;
983 -> 982;
983 -> 952;
984 -> 952;
985 -> 952;
986 -> 952;
987 -> 965;
987 -> 961;
987 -> 986;
987 -> 952;
988 -> 987;
989 -> 953;
989 -> 961;
989 -> 964;
989 -> 0;
989 -> 987;
990 -> 989;
991 -> 983;
991 -> 982;
991 -> 990;
991 -> 989;
992 -> 991;
992 -> 989;
993 -> 989;
994 -> 954;
994 -> 993;
995 -> 994;
995 -> 961;
995 -> 993;
996 -> 995;
996 -> 989;
997 -> 954;
997 -> 961;
997 -> 989;
998 -> 992;
998 -> 989;
999 -> 989;
1000 -> 989;
1001 -> 996;
1001 -> 1000;
1002 -> 997;
1002 -> 1000;
1003 -> 998;
1003 -> 1000;
1004 -> 999;
1004 -> 1000;
1005 -> 1002;
1005 -> 1000;
1006 -> 1000;
1007 -> 1005;
1007 -> 1006;
1008 -> 1006;
1009 -> 1007;
1009 -> 1008;
1009 -> 1006;
1010 -> 1004;
1010 -> 1000;
1011 -> 1004;
1011 -> 1000;
1012 -> 1000;
1013 -> 1001;
1013 -> 1012;
1013 -> 1000;
1014 -> 1001;
1014 -> 1004;
1014 -> 1000;
1015 -> 1003;
1015 -> 1000;
1016 -> 1015;
1016 -> 1004;
1016 -> 1000;
1017 -> 987;
1018 -> 965;
1018 -> 987;
1019 -> 1018;
1020 -> 970;
1020 -> 1019;
1020 -> 961;
1020 -> 964;
1020 -> 1018;
1021 -> 1018;
1022 -> 1018;
1022 -> 1020;
1022 -> 1021;
1023 -> 1018;
1023 -> 1020;
1023 -> 1022;
1024 -> 0;
1024 -> 1022;
1025 -> 1022;
1026 -> 1024;
1026 -> 1025;
1027 -> 999;
1027 -> 1025;
1028 -> 1027;
1028 -> 1007;
1028 -> 1025;
1029 -> 1026;
1029 -> 1025;
1030 -> 1025;
1031 -> 1028;
1031 -> 1030;
1032 -> 1029;
1032 -> 1030;
1033 -> 1031;
1033 -> 1032;
1033 -> 1030;
1034 -> 1033;
1035 -> 1033;
1035 -> 1034;
1036 -> 1033;
1036 -> 1034;
1037 -> 1033;
1037 -> 1034;
1038 -> 1034;
1039 -> 1035;
1039 -> 1038;
1039 -> 1034;
1040 -> 1036;
1040 -> 1034;
1041 -> 0;
1041 -> 1034;
1042 -> 1034;
1043 -> 1040;
1043 -> 1042;
1044 -> 1041;
1044 -> 1042;
1045 -> 1036;
1045 -> 1034;
1046 -> 0;
1046 -> 1034;
1047 -> 1034;
1048 -> 1045;
1048 -> 1047;
1049 -> 1046;
1049 -> 1047;
1050 -> 1035;
1050 -> 1037;
1050 -> 1034;
1051 -> 1036;
1051 -> 1037;
1051 -> 1034;
1052 -> 1035;
1052 -> 1007;
1052 -> 1037;
1052 -> 1034;
1053 -> 1018;
1053 -> 1020;
1053 -> 1022;
1054 -> 969;
1054 -> 1022;
1055 -> 955;
1055 -> 1022;
1056 -> 1022;
1057 -> 1053;
1057 -> 1056;
1058 -> 1054;
1058 -> 1056;
1059 -> 1055;
1059 -> 1056;
1060 -> 1033;
1060 -> 1056;
1061 -> 1057;
1061 -> 1056;
1062 -> 1058;
1062 -> 1056;
1063 -> 1059;
1063 -> 1056;
1064 -> 1056;
1065 -> 1059;
1065 -> 1064;
1065 -> 1056;
1066 -> 1056;
1067 -> 1061;
1067 -> 1066;
1068 -> 1062;
1068 -> 1066;
1069 -> 1063;
1069 -> 1066;
1070 -> 1065;
1070 -> 1066;
1071 -> 1060;
1071 -> 1066;
1072 -> 1067;
1072 -> 1066;
1073 -> 1068;
1073 -> 1066;
1074 -> 1069;
1074 -> 1066;
1075 -> 1070;
1075 -> 1066;
1076 -> 1066;
1077 -> 1072;
1077 -> 1076;
1078 -> 1073;
1078 -> 1076;
1079 -> 1074;
1079 -> 1076;
1080 -> 1075;
1080 -> 1076;
1081 -> 1071;
1081 -> 1076;
1082 -> 1077;
1082 -> 1020;
1082 -> 1076;
1083 -> 1077;
1083 -> 1082;
1084 -> 1078;
1084 -> 1082;
1085 -> 1079;
1085 -> 1082;
1086 -> 1080;
1086 -> 1082;
1087 -> 1082;
1088 -> 1082;
1089 -> 1083;
1089 -> 1088;
1090 -> 1084;
1090 -> 1088;
1091 -> 1085;
1091 -> 1088;
1092 -> 1086;
1092 -> 1088;
1093 -> 1087;
1093 -> 1088;
1094 -> 1081;
1094 -> 1088;
1095 -> 1089;
1095 -> 1082;
1095 -> 1088;
1096 -> 1095;
1096 -> 1088;
1097 -> 1089;
1097 -> 1082;
1097 -> 1088;
1098 -> 1093;
1098 -> 1088;
1099 -> 1095;
1099 -> 1088;
1100 -> 1088;
1101 -> 1090;
1101 -> 1088;
1102 -> 1088;
1103 -> 1097;
1103 -> 1102;
1104 -> 1098;
1104 -> 1102;
1105 -> 1099;
1105 -> 1102;
1106 -> 1100;
1106 -> 1102;
1107 -> 1101;
1107 -> 1102;
1108 -> 1094;
1108 -> 1102;
1109 -> 1102;
1110 -> 1104;
1110 -> 1109;
1110 -> 1102;
1111 -> 1102;
1112 -> 1111;
1112 -> 1088;
1113 -> 1088;
1114 -> 1112;
1114 -> 1113;
1114 -> 1088;
1116 -> 1115;
1117 -> 1116;
1117 -> 1115;
1118 -> 1115;
1119 -> 1117;
1119 -> 1115;
1120 -> 1119;
1121 -> 1088;
1122 -> 1120;
1122 -> 1121;
1123 -> 1120;
1123 -> 1117;
1123 -> 1121;
1124 -> 1121;
1125 -> 1123;
1125 -> 1124;
1126 -> 1122;
1126 -> 1124;
1127 -> 1126;
1127 -> 1124;
1128 -> 1126;
1128 -> 1124;
1129 -> 1126;
1129 -> 1124;
1130 -> 1126;
1130 -> 1124;
1131 -> 1125;
1131 -> 1126;
1131 -> 1124;
1132 -> 0;
1132 -> 1126;
1132 -> 1124;
1133 -> 1124;
1134 -> 1133;
1134 -> 1126;
1134 -> 1124;
1135 -> 1124;
1136 -> 1135;
1136 -> 1126;
1136 -> 1124;
1137 -> 1123;
1137 -> 1122;
1137 -> 1132;
1137 -> 1134;
1137 -> 1136;
1137 -> 1131;
1137 -> 1133;
1137 -> 1121;
1138 -> 1121;
1139 -> 1137;
1139 -> 1138;
1140 -> 1139;
1140 -> 1137;
1140 -> 0;
1140 -> 1138;
1141 -> 1138;
1142 -> 1139;
1142 -> 1137;
1142 -> 1141;
1142 -> 1138;
1143 -> 1140;
1143 -> 1121;
1144 -> 1137;
1144 -> 1121;
1145 -> 1144;
1145 -> 1088;
1146 -> 1089;
1146 -> 1088;
1147 -> 1089;
1147 -> 1082;
1147 -> 1088;
1148 -> 1088;
1149 -> 1146;
1149 -> 1148;
1150 -> 1147;
1150 -> 1148;
1151 -> 1149;
1151 -> 1148;
1152 -> 0;
1152 -> 1151;
1153 -> 1088;
1154 -> 1145;
1154 -> 1088;
1155 -> 1093;
1155 -> 1088;
1156 -> 1095;
1156 -> 1088;
1157 -> 1088;
1158 -> 1091;
1158 -> 1088;
1159 -> 1152;
1159 -> 1088;
1160 -> 1153;
1160 -> 1088;
1161 -> 1088;
1162 -> 1154;
1162 -> 1161;
1163 -> 1155;
1163 -> 1161;
1164 -> 1156;
1164 -> 1161;
1165 -> 1157;
1165 -> 1161;
1166 -> 1158;
1166 -> 1161;
1167 -> 1159;
1167 -> 1161;
1168 -> 1157;
1168 -> 1161;
1169 -> 1160;
1169 -> 1161;
1170 -> 1094;
1170 -> 1161;
1171 -> 1167;
1171 -> 1161;
1172 -> 1161;
1173 -> 1171;
1173 -> 1172;
1174 -> 1173;
1174 -> 0;
1174 -> 1172;
1175 -> 1162;
1175 -> 1174;
1176 -> 1163;
1176 -> 1174;
1177 -> 1164;
1177 -> 1174;
1178 -> 1165;
1178 -> 1174;
1179 -> 1166;
1179 -> 1174;
1180 -> 1167;
1180 -> 1174;
1181 -> 1168;
1181 -> 1174;
1182 -> 1169;
1182 -> 1174;
1183 -> 1174;
1184 -> 1175;
1184 -> 1183;
1185 -> 1176;
1185 -> 1183;
1186 -> 1177;
1186 -> 1183;
1187 -> 1178;
1187 -> 1183;
1188 -> 1179;
1188 -> 1183;
1189 -> 1180;
1189 -> 1183;
1190 -> 1181;
1190 -> 1183;
1191 -> 1182;
1191 -> 1183;
1192 -> 1170;
1192 -> 1183;
1193 -> 1183;
1194 -> 1185;
1194 -> 1193;
1194 -> 1183;
1195 -> 1184;
1195 -> 1194;
1196 -> 1186;
1196 -> 1194;
1197 -> 1187;
1197 -> 1194;
1198 -> 1188;
1198 -> 1194;
1199 -> 1189;
1199 -> 1194;
1200 -> 1190;
1200 -> 1194;
1201 -> 1191;
1201 -> 1194;
1202 -> 1194;
1203 -> 1195;
1203 -> 1202;
1204 -> 1196;
1204 -> 1202;
1205 -> 1197;
1205 -> 1202;
1206 -> 1198;
1206 -> 1202;
1207 -> 1199;
1207 -> 1202;
1208 -> 1200;
1208 -> 1202;
1209 -> 1201;
1209 -> 1202;
1210 -> 1192;
1210 -> 1202;
1211 -> 1202;
1212 -> 1203;
1212 -> 1211;
1213 -> 1212;
1213 -> 1137;
1213 -> 0;
1213 -> 1211;
1214 -> 1211;
1215 -> 1212;
1215 -> 1137;
1215 -> 1214;
1215 -> 1211;
1216 -> 1213;
1216 -> 1202;
1217 -> 1207;
1217 -> 1202;
1218 -> 1202;
1219 -> 1217;
1219 -> 1218;
1220 -> 1219;
1220 -> 0;
1220 -> 1218;
1221 -> 1219;
1221 -> 0;
1221 -> 1218;
1222 -> 1218;
1223 -> 0;
1223 -> 1218;
1224 -> 1219;
1224 -> 1223;
1224 -> 1218;
1225 -> 0;
1225 -> 1218;
1226 -> 1219;
1226 -> 1225;
1226 -> 1218;
1227 -> 1218;
1228 -> 0;
1228 -> 1218;
1229 -> 1219;
1229 -> 1228;
1229 -> 1218;
1230 -> 1229;
1230 -> 1218;
1231 -> 1218;
1232 -> 1230;
1232 -> 1231;
1233 -> 1231;
1234 -> 1232;
1234 -> 1233;
1234 -> 1231;
1235 -> 1202;
1236 -> 1210;
1236 -> 1202;
1237 -> 1202;
1238 -> 1202;
1239 -> 1203;
1239 -> 1238;
1240 -> 1238;
1241 -> 1239;
1241 -> 1240;
1242 -> 1241;
1242 -> 1137;
1242 -> 1240;
1243 -> 1242;
1243 -> 1238;
1244 -> 1243;
1244 -> 1202;
1245 -> 1236;
1245 -> 1244;
1245 -> 1202;
1246 -> 1245;
1247 -> 1235;
1247 -> 1246;
1247 -> 1245;
1248 -> 1203;
1248 -> 1247;
1249 -> 1204;
1249 -> 1247;
1250 -> 1205;
1250 -> 1247;
1251 -> 1206;
1251 -> 1247;
1252 -> 1207;
1252 -> 1247;
1253 -> 1210;
1253 -> 1247;
1254 -> 1208;
1254 -> 1247;
1255 -> 1209;
1255 -> 1247;
1256 -> 1247;
1257 -> 1248;
1257 -> 1256;
1258 -> 1249;
1258 -> 1256;
1259 -> 1250;
1259 -> 1256;
1260 -> 1251;
1260 -> 1256;
1261 -> 1252;
1261 -> 1256;
1262 -> 1253;
1262 -> 1256;
1263 -> 1254;
1263 -> 1256;
1264 -> 1255;
1264 -> 1256;
1265 -> 1236;
1265 -> 1256;
1266 -> 1247;
1267 -> 1247;
1268 -> 1203;
1268 -> 1267;
1269 -> 1268;
1269 -> 1137;
1269 -> 0;
1269 -> 1267;
1270 -> 1267;
1271 -> 1268;
1271 -> 1137;
1271 -> 1270;
1271 -> 1267;
1272 -> 1269;
1272 -> 1247;
1273 -> 1207;
1273 -> 0;
1273 -> 1245;
1274 -> 1245;
1275 -> 1236;
1275 -> 1050;
1275 -> 1245;
1276 -> 1275;
1277 -> 1235;
1277 -> 1276;
1277 -> 1275;
1278 -> 1203;
1278 -> 1277;
1279 -> 1204;
1279 -> 1277;
1280 -> 1205;
1280 -> 1277;
1281 -> 1206;
1281 -> 1277;
1282 -> 1207;
1282 -> 1277;
1283 -> 1210;
1283 -> 1277;
1284 -> 1208;
1284 -> 1277;
1285 -> 1264;
1285 -> 1277;
1286 -> 1277;
1287 -> 1278;
1287 -> 1286;
1288 -> 1279;
1288 -> 1286;
1289 -> 1280;
1289 -> 1286;
1290 -> 1281;
1290 -> 1286;
1291 -> 1282;
1291 -> 1286;
1292 -> 1283;
1292 -> 1286;
1293 -> 1284;
1293 -> 1286;
1294 -> 1285;
1294 -> 1286;
1295 -> 1275;
1295 -> 1286;
1296 -> 1286;
1297 -> 1287;
1297 -> 1296;
1298 -> 1297;
1298 -> 1137;
1298 -> 0;
1298 -> 1296;
1299 -> 1296;
1300 -> 1297;
1300 -> 1137;
1300 -> 1299;
1300 -> 1296;
1301 -> 1298;
1301 -> 1286;
1302 -> 1286;
1303 -> 1295;
1303 -> 1302;
1304 -> 1303;
1304 -> 1014;
1304 -> 1151;
1304 -> 0;
1304 -> 1302;
1305 -> 1304;
1305 -> 1286;
1306 -> 1290;
1306 -> 1286;
1307 -> 1286;
1308 -> 1306;
1308 -> 1307;
1309 -> 1295;
1309 -> 1307;
1310 -> 1307;
1311 -> 1309;
1311 -> 1016;
1311 -> 1310;
1311 -> 1307;
1312 -> 1309;
1312 -> 1016;
1312 -> 1307;
1313 -> 1309;
1313 -> 1016;
1313 -> 1307;
1314 -> 1313;
1314 -> 1286;
1315 -> 1291;
1315 -> 0;
1315 -> 1286;
1316 -> 1286;
1317 -> 1295;
1317 -> 1014;
1317 -> 1316;
1317 -> 1286;
1318 -> 1315;
1318 -> 1317;
1318 -> 1286;
1319 -> 1287;
1319 -> 1318;
1320 -> 1295;
1320 -> 1014;
1320 -> 1318;
1321 -> 1288;
1321 -> 1318;
1322 -> 1289;
1322 -> 1318;
1323 -> 1290;
1323 -> 1318;
1324 -> 1291;
1324 -> 1318;
1325 -> 1292;
1325 -> 1318;
1326 -> 1293;
1326 -> 1318;
1327 -> 1294;
1327 -> 1318;
1328 -> 1318;
1329 -> 1319;
1329 -> 1328;
1330 -> 1320;
1330 -> 1328;
1331 -> 1321;
1331 -> 1328;
1332 -> 1322;
1332 -> 1328;
1333 -> 1323;
1333 -> 1328;
1334 -> 1324;
1334 -> 1328;
1335 -> 1325;
1335 -> 1328;
1336 -> 1326;
1336 -> 1328;
1337 -> 1327;
1337 -> 1328;
1338 -> 1295;
1338 -> 1328;
1339 -> 1334;
1339 -> 1328;
1340 -> 1328;
1341 -> 1339;
1341 -> 1340;
1342 -> 1341;
1342 -> 0;
1342 -> 1340;
1343 -> 1341;
1343 -> 0;
1343 -> 1340;
1344 -> 1340;
1345 -> 0;
1345 -> 1340;
1346 -> 1341;
1346 -> 1345;
1346 -> 1340;
1347 -> 0;
1347 -> 1340;
1348 -> 1341;
1348 -> 1347;
1348 -> 1340;
1349 -> 1340;
1350 -> 0;
1350 -> 1340;
1351 -> 1341;
1351 -> 1350;
1351 -> 1340;
1352 -> 1351;
1352 -> 1340;
1353 -> 1340;
1354 -> 1352;
1354 -> 1353;
1355 -> 1353;
1356 -> 1354;
1356 -> 1355;
1356 -> 1353;
1357 -> 1328;
1358 -> 1332;
1358 -> 1357;
1358 -> 1328;
1359 -> 1330;
1359 -> 1151;
1359 -> 1328;
1360 -> 1329;
1360 -> 1359;
1361 -> 1330;
1361 -> 1359;
1362 -> 1331;
1362 -> 1359;
1363 -> 1332;
1363 -> 1359;
1364 -> 1334;
1364 -> 1359;
1365 -> 1335;
1365 -> 1359;
1366 -> 1336;
1366 -> 1359;
1367 -> 1337;
1367 -> 1359;
1368 -> 1359;
1369 -> 1360;
1369 -> 1368;
1370 -> 1361;
1370 -> 1368;
1371 -> 1362;
1371 -> 1368;
1372 -> 1363;
1372 -> 1368;
1373 -> 1364;
1373 -> 1368;
1374 -> 1365;
1374 -> 1368;
1375 -> 1366;
1375 -> 1368;
1376 -> 1367;
1376 -> 1368;
1377 -> 1370;
1377 -> 1368;
1378 -> 1371;
1378 -> 1368;
1379 -> 1373;
1379 -> 1368;
1380 -> 1374;
1380 -> 1368;
1381 -> 1368;
1382 -> 1377;
1382 -> 1381;
1383 -> 1378;
1383 -> 1381;
1384 -> 1379;
1384 -> 1381;
1385 -> 1380;
1385 -> 1381;
1386 -> 1384;
1386 -> 0;
1386 -> 1381;
1387 -> 1381;
1388 -> 1386;
1388 -> 1382;
1388 -> 1381;
1389 -> 1382;
1389 -> 1151;
1389 -> 0;
1389 -> 1388;
1390 -> 1384;
1390 -> 0;
1390 -> 1389;
1391 -> 1389;
1392 -> 1383;
1392 -> 1390;
1393 -> 1392;
1393 -> 1368;
1394 -> 1393;
1395 -> 1372;
1395 -> 1393;
1396 -> 1373;
1396 -> 1393;
1397 -> 1375;
1397 -> 1393;
1398 -> 1376;
1398 -> 1393;
1399 -> 1393;
1400 -> 1394;
1400 -> 1399;
1401 -> 1395;
1401 -> 1399;
1402 -> 1396;
1402 -> 1399;
1403 -> 1394;
1403 -> 1399;
1404 -> 1397;
1404 -> 1399;
1405 -> 1398;
1405 -> 1399;
1406 -> 1394;
1406 -> 1399;
1407 -> 1374;
1407 -> 1399;
1408 -> 1399;
1409 -> 1399;
1410 -> 1400;
1410 -> 1151;
1410 -> 1392;
1410 -> 0;
1410 -> 1399;
1411 -> 1410;
1411 -> 1399;
1412 -> 1411;
1412 -> 1151;
1412 -> 1392;
1412 -> 1399;
1413 -> 1407;
1413 -> 1052;
1413 -> 1151;
1413 -> 1412;
1413 -> 1392;
1413 -> 1399;
1414 -> 1411;
1414 -> 1399;
1415 -> 1411;
1415 -> 1413;
1416 -> 1401;
1416 -> 1413;
1417 -> 1404;
1417 -> 1413;
1418 -> 1402;
1418 -> 1413;
1419 -> 1409;
1419 -> 1413;
1420 -> 1413;
1421 -> 1415;
1421 -> 1420;
1422 -> 1416;
1422 -> 1420;
1423 -> 1417;
1423 -> 1420;
1424 -> 1418;
1424 -> 1420;
1425 -> 1419;
1425 -> 1420;
1426 -> 1421;
1426 -> 1413;
1426 -> 1420;
1427 -> 1426;
1428 -> 1422;
1428 -> 1427;
1428 -> 1426;
1429 -> 1420;
1430 -> 1420;
1431 -> 1430;
1431 -> 1413;
1432 -> 1431;
1433 -> 1407;
1433 -> 1432;
1434 -> 1433;
1434 -> 1051;
1434 -> 1432;
1435 -> 0;
1435 -> 1432;
1436 -> 1432;
1437 -> 1434;
1437 -> 1436;
1438 -> 1435;
1438 -> 1436;
1439 -> 1437;
1439 -> 1431;
1440 -> 1402;
1440 -> 0;
1440 -> 1439;
1441 -> 1439;
1442 -> 1402;
1442 -> 0;
1442 -> 1440;
1443 -> 1440;
1444 -> 1442;
1445 -> 1444;
1445 -> 1442;
1446 -> 1445;
1447 -> 1446;
1447 -> 1445;
1448 -> 1411;
1448 -> 1445;
1449 -> 1402;
1449 -> 1445;
1450 -> 1403;
1450 -> 1445;
1451 -> 1445;
1452 -> 1449;
1452 -> 1451;
1453 -> 1450;
1453 -> 1451;
1454 -> 1452;
1454 -> 0;
1454 -> 1451;
1455 -> 1451;
1456 -> 1454;
1456 -> 1451;
1457 -> 1453;
1457 -> 1456;
1458 -> 1408;
1458 -> 1445;
1459 -> 1405;
1459 -> 1445;
1460 -> 1406;
1460 -> 1445;
1461 -> 1445;
1462 -> 1448;
1462 -> 1461;
1463 -> 1457;
1463 -> 1461;
1464 -> 1458;
1464 -> 1461;
1465 -> 1459;
1465 -> 1461;
1466 -> 1460;
1466 -> 1461;
1467 -> 1407;
1467 -> 1461;
1468 -> 1467;
1468 -> 1051;
1468 -> 1461;
1469 -> 0;
1469 -> 1461;
1470 -> 1461;
1471 -> 1468;
1471 -> 1470;
1472 -> 1469;
1472 -> 1470;
1473 -> 1462;
1473 -> 1461;
1474 -> 1463;
1474 -> 1461;
1475 -> 1464;
1475 -> 1461;
1476 -> 1465;
1476 -> 1461;
1477 -> 1466;
1477 -> 1461;
1478 -> 1461;
1479 -> 1473;
1479 -> 1478;
1480 -> 1474;
1480 -> 1478;
1481 -> 1475;
1481 -> 1478;
1482 -> 1476;
1482 -> 1478;
1483 -> 1477;
1483 -> 1478;
1484 -> 1467;
1484 -> 1478;
1485 -> 1479;
1485 -> 1478;
1486 -> 1480;
1486 -> 1478;
1487 -> 1481;
1487 -> 1478;
1488 -> 1482;
1488 -> 1478;
1489 -> 1483;
1489 -> 1478;
1490 -> 1478;
1491 -> 1485;
1491 -> 1490;
1492 -> 1486;
1492 -> 1490;
1493 -> 1487;
1493 -> 1490;
1494 -> 1488;
1494 -> 1490;
1495 -> 1489;
1495 -> 1490;
1496 -> 1484;
1496 -> 1050;
1496 -> 1490;
1497 -> 1496;
1497 -> 1014;
1497 -> 1490;
1498 -> 1490;
1499 -> 1497;
1499 -> 1498;
1499 -> 1490;
1500 -> 1491;
1500 -> 1499;
1501 -> 1492;
1501 -> 1499;
1502 -> 1493;
1502 -> 1499;
1503 -> 1494;
1503 -> 1499;
1504 -> 1495;
1504 -> 1499;
1505 -> 1499;
1506 -> 1500;
1506 -> 1505;
1507 -> 1501;
1507 -> 1505;
1508 -> 1502;
1508 -> 1505;
1509 -> 1503;
1509 -> 1505;
1510 -> 1504;
1510 -> 1505;
1511 -> 1496;
1511 -> 1007;
1511 -> 1505;
1512 -> 1505;
1513 -> 1506;
1513 -> 1505;
1514 -> 1511;
1514 -> 1413;
1514 -> 1505;
1515 -> 1509;
1515 -> 1505;
1516 -> 1505;
1517 -> 1513;
1517 -> 1516;
1518 -> 1514;
1518 -> 1516;
1519 -> 1515;
1519 -> 1516;
1520 -> 1517;
1520 -> 1516;
1521 -> 1518;
1521 -> 1516;
1522 -> 1519;
1522 -> 1516;
1523 -> 1516;
1524 -> 1520;
1524 -> 1523;
1525 -> 1521;
1525 -> 1523;
1526 -> 1522;
1526 -> 1523;
1527 -> 1523;
1528 -> 1524;
1528 -> 1523;
1529 -> 1525;
1529 -> 1523;
1530 -> 1523;
1531 -> 1527;
1531 -> 1523;
1532 -> 1525;
1532 -> 1413;
1532 -> 1523;
1533 -> 1526;
1533 -> 1523;
1534 -> 1523;
1535 -> 1528;
1535 -> 1534;
1536 -> 1529;
1536 -> 1534;
1537 -> 1530;
1537 -> 1534;
1538 -> 1531;
1538 -> 1534;
1539 -> 1532;
1539 -> 1534;
1540 -> 1533;
1540 -> 1534;
1541 -> 1530;
1541 -> 1534;
1542 -> 1534;
1543 -> 1535;
1543 -> 1542;
1543 -> 1534;
1544 -> 1534;
1545 -> 1536;
1545 -> 1544;
1545 -> 1534;
1546 -> 1536;
1546 -> 1413;
1546 -> 1534;
1547 -> 1536;
1547 -> 1534;
1548 -> 1534;
1549 -> 1535;
1549 -> 1413;
1549 -> 1534;
1550 -> 1549;
1551 -> 1447;
1551 -> 1550;
1551 -> 1445;
1552 -> 1551;
1553 -> 1552;
1553 -> 1551;
1554 -> 1411;
1554 -> 1551;
1555 -> 1402;
1555 -> 0;
1555 -> 1553;
1556 -> 1553;
1557 -> 1402;
1557 -> 0;
1557 -> 1555;
1558 -> 1555;
1559 -> 1402;
1559 -> 0;
1559 -> 1557;
1560 -> 1557;
1561 -> 1402;
1561 -> 0;
1561 -> 1559;
1562 -> 1559;
1563 -> 1411;
1563 -> 1561;
1564 -> 1561;
1565 -> 1563;
1565 -> 1564;
1566 -> 0;
1566 -> 1564;
1567 -> 1565;
1567 -> 1564;
1568 -> 1564;
1569 -> 1564;
1570 -> 1566;
1570 -> 1569;
1571 -> 1567;
1571 -> 1569;
1572 -> 1568;
1572 -> 1569;
1573 -> 1568;
1573 -> 1569;
1574 -> 1570;
1574 -> 1573;
1574 -> 1569;
1575 -> 1571;
1575 -> 1573;
1575 -> 1569;
1576 -> 1572;
1576 -> 1573;
1576 -> 1569;
1577 -> 1568;
1577 -> 1561;
1578 -> 1577;
1578 -> 1393;
1579 -> 1393;
1580 -> 1578;
1580 -> 1579;
1581 -> 1369;
1581 -> 1579;
1582 -> 1579;
1583 -> 1581;
1583 -> 1582;
1584 -> 1583;
1584 -> 1579;
1585 -> 1584;
1585 -> 1580;
1585 -> 1574;
1585 -> 1579;
1586 -> 1585;
1587 -> 1586;
1587 -> 1585;
1588 -> 1580;
1588 -> 1587;
1589 -> 1587;
1590 -> 1588;
1590 -> 1589;
1591 -> 1581;
1591 -> 1589;
1592 -> 1590;
1592 -> 1574;
1592 -> 1591;
1592 -> 1589;
1593 -> 1591;
1593 -> 1137;
1593 -> 1592;
1593 -> 1589;
1594 -> 1590;
1594 -> 1575;
1594 -> 1589;
1595 -> 1591;
1595 -> 1593;
1595 -> 1594;
1595 -> 1554;
1595 -> 1589;
1596 -> 1590;
1596 -> 1576;
1596 -> 1591;
1596 -> 1589;
1597 -> 1587;
1598 -> 1393;
1599 -> 1393;
1599 -> 1595;
1599 -> 1596;
1599 -> 1368;
1600 -> 1359;
1601 -> 1318;
1602 -> 1318;
1603 -> 1287;
1603 -> 1602;
1604 -> 1603;
1604 -> 1595;
1604 -> 1602;
1605 -> 1604;
1605 -> 1318;
1606 -> 1605;
1607 -> 1289;
1607 -> 1606;
1607 -> 1605;
1608 -> 1288;
1608 -> 1605;
1609 -> 1605;
1610 -> 1292;
1610 -> 1609;
1611 -> 1610;
1611 -> 1051;
1611 -> 1609;
1612 -> 0;
1612 -> 1609;
1613 -> 1609;
1614 -> 1611;
1614 -> 1613;
1615 -> 1612;
1615 -> 1613;
1616 -> 1614;
1616 -> 1605;
1617 -> 1605;
1618 -> 1608;
1618 -> 1617;
1619 -> 1616;
1619 -> 1617;
1620 -> 1314;
1620 -> 1617;
1621 -> 1617;
1622 -> 1621;
1622 -> 1617;
1623 -> 1618;
1623 -> 1617;
1624 -> 1621;
1624 -> 1617;
1625 -> 1620;
1625 -> 1595;
1625 -> 1623;
1625 -> 1624;
1625 -> 1596;
1625 -> 1622;
1625 -> 1617;
1626 -> 1617;
1627 -> 1626;
1627 -> 1605;
1628 -> 1607;
1628 -> 1627;
1628 -> 1605;
1629 -> 1605;
1630 -> 1277;
1631 -> 1277;
1632 -> 1203;
1632 -> 1631;
1633 -> 1632;
1633 -> 1625;
1633 -> 0;
1633 -> 1631;
1634 -> 1633;
1634 -> 1277;
1635 -> 1275;
1635 -> 1634;
1636 -> 1207;
1636 -> 0;
1636 -> 1275;
1637 -> 1275;
1638 -> 1635;
1638 -> 1202;
1639 -> 1174;
1640 -> 1090;
1640 -> 1088;
1641 -> 1089;
1641 -> 1088;
1642 -> 1540;
1642 -> 1088;
1643 -> 1640;
1643 -> 1641;
1643 -> 1642;
1643 -> 969;
1643 -> 1625;
1643 -> 1088;
1644 -> 1088;
1645 -> 1088;
1646 -> 1093;
1646 -> 1645;
1646 -> 1088;
1647 -> 1145;
1647 -> 1088;
1648 -> 1088;
1649 -> 1647;
1649 -> 1648;
1650 -> 1648;
1651 -> 1649;
1651 -> 1650;
1652 -> 1650;
1653 -> 1651;
1653 -> 1652;
1654 -> 1653;
1654 -> 1643;
1654 -> 1652;
1655 -> 1654;
1655 -> 1648;
1656 -> 1648;
1657 -> 1649;
1657 -> 1656;
1658 -> 1657;
1658 -> 1643;
1658 -> 1656;
1659 -> 1658;
1659 -> 1648;
1660 -> 1659;
1660 -> 1643;
1661 -> 1648;
1662 -> 1661;
1662 -> 1088;
1663 -> 1646;
1663 -> 1662;
1663 -> 1088;
1664 -> 1663;
1665 -> 1089;
1665 -> 1643;
1665 -> 1664;
1665 -> 1663;
1666 -> 1089;
1666 -> 1665;
1667 -> 1090;
1667 -> 1665;
1668 -> 1665;
1669 -> 1666;
1669 -> 1668;
1670 -> 1667;
1670 -> 1668;
1671 -> 1094;
1671 -> 1668;
1672 -> 1668;
1673 -> 1669;
1673 -> 1643;
1673 -> 1668;
1674 -> 1673;
1675 -> 1674;
1675 -> 1088;
1676 -> 1675;
1677 -> 1145;
1677 -> 1675;
1678 -> 1095;
1678 -> 1675;
1679 -> 1675;
1680 -> 1089;
1680 -> 1675;
1681 -> 1090;
1681 -> 1675;
1682 -> 1092;
1682 -> 1675;
1683 -> 1676;
1683 -> 1675;
1684 -> 1093;
1684 -> 1675;
1685 -> 1152;
1685 -> 1675;
1686 -> 1675;
1687 -> 1677;
1687 -> 1686;
1688 -> 1678;
1688 -> 1686;
1689 -> 1679;
1689 -> 1686;
1690 -> 1680;
1690 -> 1686;
1691 -> 1681;
1691 -> 1686;
1692 -> 1682;
1692 -> 1686;
1693 -> 1683;
1693 -> 1686;
1694 -> 1684;
1694 -> 1686;
1695 -> 1685;
1695 -> 1686;
1696 -> 1094;
1696 -> 1686;
1697 -> 1687;
1697 -> 1686;
1698 -> 1688;
1698 -> 1686;
1699 -> 1689;
1699 -> 1686;
1700 -> 1690;
1700 -> 1686;
1701 -> 1691;
1701 -> 1686;
1702 -> 1692;
1702 -> 1686;
1703 -> 1693;
1703 -> 1686;
1704 -> 1694;
1704 -> 1686;
1705 -> 1695;
1705 -> 1686;
1706 -> 1686;
1707 -> 1697;
1707 -> 1706;
1708 -> 1698;
1708 -> 1706;
1709 -> 1699;
1709 -> 1706;
1710 -> 1700;
1710 -> 1706;
1711 -> 1701;
1711 -> 1706;
1712 -> 1702;
1712 -> 1706;
1713 -> 1703;
1713 -> 1706;
1714 -> 1704;
1714 -> 1706;
1715 -> 1705;
1715 -> 1706;
1716 -> 1696;
1716 -> 1706;
1717 -> 1706;
1718 -> 1710;
1718 -> 1717;
1718 -> 1706;
1719 -> 1706;
1720 -> 1711;
1720 -> 1719;
1720 -> 1706;
1721 -> 1706;
1722 -> 1707;
1722 -> 1721;
1723 -> 1722;
1723 -> 1643;
1723 -> 1721;
1724 -> 1723;
1724 -> 1706;
1725 -> 1706;
1726 -> 1706;
1727 -> 1707;
1727 -> 1726;
1728 -> 1727;
1728 -> 1706;
1729 -> 1728;
1730 -> 1724;
1730 -> 1643;
1730 -> 1729;
1730 -> 1728;
1731 -> 1730;
1732 -> 1731;
1732 -> 1730;
1733 -> 1730;
1734 -> 1732;
1734 -> 1733;
1734 -> 1730;
1735 -> 1731;
1735 -> 0;
1735 -> 1734;
1736 -> 1712;
1736 -> 1734;
1737 -> 1731;
1737 -> 1736;
1738 -> 1711;
1738 -> 1736;
1739 -> 1710;
1739 -> 1736;
1740 -> 1736;
1741 -> 1737;
1741 -> 1740;
1742 -> 1738;
1742 -> 1740;
1743 -> 1739;
1743 -> 1740;
1744 -> 1741;
1744 -> 1731;
1744 -> 1740;
1745 -> 1740;
1746 -> 1744;
1746 -> 1745;
1746 -> 1740;
1747 -> 1731;
1747 -> 1730;
1748 -> 1747;
1748 -> 1744;
1748 -> 0;
1748 -> 1686;
1749 -> 1747;
1749 -> 1686;
1750 -> 1749;
1750 -> 1744;
1750 -> 0;
1750 -> 1675;
1751 -> 1088;
1752 -> 1145;
1752 -> 1751;
1753 -> 1751;
1754 -> 1752;
1754 -> 1753;
1755 -> 0;
1755 -> 1754;
1755 -> 1753;
1756 -> 1754;
1756 -> 1744;
1756 -> 1755;
1756 -> 1753;
1757 -> 1753;
1758 -> 1757;
1758 -> 1754;
1758 -> 1753;
1759 -> 1751;
1760 -> 1751;
1761 -> 1752;
1761 -> 1756;
1761 -> 1760;
1761 -> 1751;
1762 -> 1752;
1762 -> 1761;
1763 -> 1752;
1763 -> 1756;
1763 -> 1762;
1763 -> 1758;
1763 -> 1761;
1764 -> 1088;
1765 -> 1089;
1765 -> 1763;
1765 -> 1088;
1766 -> 1088;
1767 -> 1765;
1767 -> 1766;
1768 -> 1094;
1768 -> 1766;
1769 -> 1767;
1769 -> 1763;
1769 -> 1766;
1770 -> 1767;
1770 -> 1763;
1770 -> 1766;
1771 -> 1766;
1772 -> 1770;
1772 -> 1771;
1773 -> 1770;
1773 -> 1771;
1774 -> 1768;
1774 -> 1771;
1775 -> 1772;
1775 -> 1771;
1776 -> 1773;
1776 -> 1771;
1777 -> 1775;
1777 -> 1776;
1777 -> 1769;
1777 -> 1771;
1778 -> 1777;
1778 -> 1771;
1779 -> 1774;
1779 -> 1052;
1779 -> 1777;
1779 -> 1778;
1780 -> 0;
1780 -> 1778;
1781 -> 1778;
1782 -> 1774;
1782 -> 1781;
1783 -> 1782;
1783 -> 1050;
1783 -> 1781;
1784 -> 1783;
1784 -> 1007;
1784 -> 1004;
1784 -> 1014;
1784 -> 1011;
1784 -> 1016;
1784 -> 1779;
1784 -> 1781;
1785 -> 1781;
1786 -> 1782;
1786 -> 1050;
1786 -> 1785;
1787 -> 1786;
1787 -> 1784;
1787 -> 1785;
1788 -> 1786;
1788 -> 1787;
1788 -> 1785;
1789 -> 1785;
1790 -> 1788;
1790 -> 1789;
1791 -> 1790;
1791 -> 1787;
1791 -> 1789;
1792 -> 1791;
1793 -> 1792;
1793 -> 1785;
1794 -> 1793;
1794 -> 1785;
1795 -> 1749;
1795 -> 1088;
1796 -> 1088;
1797 -> 1794;
1797 -> 1796;
1798 -> 1795;
1798 -> 1796;
1799 -> 1798;
1799 -> 1796;
1800 -> 1798;
1800 -> 1796;
1801 -> 1800;
1801 -> 1796;
1802 -> 1801;
1802 -> 1796;
1803 -> 1797;
1803 -> 1802;
1804 -> 1802;
1805 -> 1802;
1805 -> 1804;
1806 -> 1803;
1806 -> 1804;
1807 -> 1802;
1807 -> 1804;
1808 -> 1805;
1808 -> 1804;
1809 -> 1804;
1810 -> 1809;
1810 -> 1807;
1810 -> 1804;
1811 -> 1805;
1811 -> 1807;
1811 -> 1804;
1812 -> 1806;
1812 -> 1807;
1812 -> 1804;
1813 -> 1066;
1814 -> 1802;
1814 -> 1813;
1815 -> 1814;
1815 -> 1811;
1815 -> 1813;
1816 -> 1814;
1816 -> 1810;
1816 -> 1809;
1816 -> 1815;
1816 -> 1813;
1817 -> 1816;
1817 -> 1066;
1818 -> 1802;
1818 -> 1066;
1819 -> 1068;
1819 -> 1066;
1820 -> 1067;
1820 -> 1066;
1821 -> 1069;
1821 -> 1066;
1822 -> 1066;
1823 -> 1818;
1823 -> 1822;
1824 -> 1819;
1824 -> 1822;
1825 -> 1820;
1825 -> 1822;
1826 -> 1821;
1826 -> 1822;
1827 -> 1071;
1827 -> 1822;
1828 -> 1822;
1829 -> 1823;
1829 -> 1828;
1830 -> 1829;
1830 -> 1811;
1830 -> 1787;
1830 -> 0;
1830 -> 1828;
1831 -> 1830;
1831 -> 1822;
1832 -> 1823;
1832 -> 1822;
1833 -> 1022;
1834 -> 1832;
1834 -> 1833;
1835 -> 1833;
1836 -> 1834;
1836 -> 1835;
1837 -> 1836;
1837 -> 1811;
1837 -> 1835;
1838 -> 1837;
1838 -> 1833;
1839 -> 1838;
1839 -> 1787;
1839 -> 0;
1839 -> 1022;
1840 -> 1839;
1841 -> 1838;
1841 -> 1840;
1842 -> 1017;
1842 -> 1841;
1842 -> 1787;
1842 -> 1840;
1843 -> 1838;
1843 -> 1842;
1844 -> 1838;
1844 -> 1842;
1845 -> 1018;
1845 -> 1842;
1846 -> 1842;
1847 -> 1842;
1848 -> 1844;
1848 -> 1847;
1849 -> 1845;
1849 -> 1847;
1850 -> 1846;
1850 -> 1847;
1851 -> 1848;
1851 -> 1850;
1851 -> 1847;
1852 -> 1849;
1852 -> 1850;
1852 -> 1847;
1853 -> 984;
1853 -> 1846;
1853 -> 1851;
1853 -> 1852;
1853 -> 1843;
1853 -> 1842;
1854 -> 1017;
1854 -> 1853;
1854 -> 987;
1855 -> 969;
1855 -> 1854;
1855 -> 952;
1856 -> 1855;
1857 -> 970;
1857 -> 952;
1858 -> 985;
1858 -> 952;
1859 -> 984;
1859 -> 1854;
1859 -> 952;
1860 -> 983;
1860 -> 952;
1861 -> 1856;
1861 -> 952;
1862 -> 952;
1863 -> 952;
1864 -> 1857;
1864 -> 1863;
1865 -> 1858;
1865 -> 1863;
1866 -> 1859;
1866 -> 1863;
1867 -> 1860;
1867 -> 1863;
1868 -> 1861;
1868 -> 1863;
1869 -> 1862;
1869 -> 1863;
1870 -> 1869;
1870 -> 1863;
1871 -> 1869;
1871 -> 1863;
1872 -> 1869;
1872 -> 1863;
1873 -> 1863;
1874 -> 1865;
1874 -> 1873;
1874 -> 1863;
1875 -> 1866;
1875 -> 1859;
1875 -> 1863;
1876 -> 1867;
1876 -> 982;
1876 -> 1863;
1877 -> 951;
1877 -> 1862;
1877 -> 1854;
1877 -> 1864;
1877 -> 1868;
1877 -> 1865;
1877 -> 1866;
1877 -> 1867;
1877 -> 1858;
1877 -> 1859;
1877 -> 982;
1877 -> 979;
1877 -> 949;
1878 -> 1877;
1879 -> 612;
1879 -> 1878;
1880 -> 1879;
1880 -> 992;
1880 -> 1878;
1881 -> 1879;
1881 -> 1877;
1881 -> 1878;
1882 -> 1879;
1882 -> 1877;
1882 -> 1878;
1883 -> 1882;
1883 -> 1878;
1884 -> 1878;
1885 -> 1878;
1886 -> 1883;
1886 -> 1885;
1887 -> 1884;
1887 -> 1885;
1888 -> 1884;
1888 -> 1885;
1889 -> 1886;
1889 -> 1885;
1890 -> 1885;
1891 -> 1887;
1891 -> 1885;
1892 -> 1885;
1893 -> 1885;
1894 -> 1889;
1894 -> 1893;
1895 -> 1890;
1895 -> 1893;
1896 -> 1891;
1896 -> 1893;
1897 -> 1892;
1897 -> 1893;
1898 -> 1888;
1898 -> 1893;
1900 -> 1899;
1902 -> 1901;
1904 -> 1903;
1906 -> 1902;
1906 -> 1905;
1907 -> 1904;
1907 -> 1905;
1909 -> 1902;
1909 -> 1908;
1910 -> 1904;
1910 -> 1908;
1912 -> 1902;
1912 -> 1911;
1913 -> 1904;
1913 -> 1911;
1915 -> 1902;
1915 -> 1914;
1916 -> 1904;
1916 -> 1914;
1918 -> 1902;
1918 -> 1917;
1919 -> 1904;
1919 -> 1917;
1921 -> 1902;
1921 -> 1920;
1922 -> 1904;
1922 -> 1920;
1924 -> 1902;
1924 -> 1923;
1925 -> 1904;
1925 -> 1923;
1927 -> 1902;
1927 -> 1926;
1928 -> 1904;
1928 -> 1926;
1930 -> 1902;
1930 -> 1929;
1931 -> 1904;
1931 -> 1929;
1933 -> 1902;
1933 -> 1932;
1934 -> 1904;
1934 -> 1932;
1936 -> 1902;
1936 -> 1935;
1938 -> 1902;
1938 -> 1937;
1940 -> 1905;
1940 -> 1939;
1941 -> 1908;
1941 -> 1939;
1942 -> 1911;
1942 -> 1939;
1943 -> 1914;
1943 -> 1939;
1944 -> 1917;
1944 -> 1939;
1945 -> 1920;
1945 -> 1939;
1946 -> 1923;
1946 -> 1939;
1947 -> 1926;
1947 -> 1939;
1948 -> 1929;
1948 -> 1939;
1949 -> 1932;
1949 -> 1939;
1950 -> 1935;
1950 -> 1939;
1951 -> 1937;
1951 -> 1939;
1952 -> 1939;
1954 -> 1902;
1954 -> 1953;
1955 -> 1904;
1955 -> 1953;
1957 -> 1904;
1957 -> 1956;
1958 -> 1902;
1958 -> 1956;
1960 -> 1904;
1960 -> 1959;
1961 -> 1902;
1961 -> 1959;
1963 -> 1904;
1963 -> 1962;
1964 -> 1902;
1964 -> 1962;
1966 -> 1904;
1966 -> 1965;
1967 -> 1902;
1967 -> 1965;
1969 -> 1904;
1969 -> 1968;
1970 -> 1902;
1970 -> 1968;
1972 -> 1904;
1972 -> 1971;
1973 -> 1902;
1973 -> 1971;
1975 -> 1904;
1975 -> 1974;
1976 -> 1902;
1976 -> 1974;
1978 -> 1904;
1978 -> 1977;
1979 -> 1902;
1979 -> 1977;
1981 -> 1904;
1981 -> 1980;
1982 -> 1902;
1982 -> 1980;
1984 -> 1904;
1984 -> 1983;
1985 -> 1902;
1985 -> 1983;
1987 -> 1904;
1987 -> 1986;
1988 -> 1902;
1988 -> 1986;
1990 -> 1953;
1990 -> 1989;
1991 -> 1956;
1991 -> 1989;
1992 -> 1959;
1992 -> 1989;
1993 -> 1962;
1993 -> 1989;
1994 -> 1965;
1994 -> 1989;
1995 -> 1968;
1995 -> 1989;
1996 -> 1971;
1996 -> 1989;
1997 -> 1974;
1997 -> 1989;
1998 -> 1977;
1998 -> 1989;
1999 -> 1980;
1999 -> 1989;
2000 -> 1983;
2000 -> 1989;
2001 -> 1986;
2001 -> 1989;
2002 -> 1989;
2003 -> 1894;
2003 -> 1893;
2004 -> 1895;
2004 -> 1893;
2005 -> 1896;
2005 -> 1893;
2006 -> 1897;
2006 -> 1893;
2007 -> 1893;
2008 -> 2003;
2008 -> 2007;
2009 -> 2004;
2009 -> 2007;
2010 -> 2005;
2010 -> 2007;
2011 -> 2006;
2011 -> 2007;
2012 -> 1898;
2012 -> 2007;
2013 -> 2012;
2013 -> 2007;
2014 -> 2012;
2014 -> 2007;
2015 -> 2012;
2015 -> 2007;
2016 -> 2012;
2016 -> 2007;
2017 -> 2007;
2018 -> 2008;
2018 -> 2017;
2018 -> 2007;
2019 -> 2007;
2020 -> 2011;
2020 -> 2019;
2020 -> 2007;
2021 -> 2007;
2022 -> 2011;
2022 -> 2021;
2022 -> 2007;
2023 -> 2008;
2023 -> 2012;
2023 -> 2007;
2024 -> 2009;
2024 -> 2012;
2024 -> 2007;
2025 -> 2010;
2025 -> 2012;
2025 -> 2007;
2026 -> 2011;
2026 -> 2012;
2026 -> 2007;
2027 -> 1879;
2027 -> 1877;
2027 -> 1878;
2028 -> 2027;
2028 -> 1877;
2029 -> 1879;
2029 -> 1877;
2029 -> 1878;
2030 -> 1878;
2031 -> 1879;
2031 -> 1877;
2031 -> 2030;
2031 -> 1878;
2032 -> 1877;
2033 -> 1877;
2034 -> 603;
2034 -> 577;
2035 -> 603;
2035 -> 577;
2036 -> 603;
2036 -> 577;
2037 -> 603;
2037 -> 577;
2038 -> 2034;
2038 -> 1877;
2038 -> 577;
2039 -> 577;
2040 -> 2037;
2040 -> 2039;
2041 -> 2040;
2041 -> 1877;
2041 -> 0;
2041 -> 2039;
2042 -> 2041;
2042 -> 577;
2043 -> 577;
2044 -> 2034;
2044 -> 1877;
2044 -> 2043;
2044 -> 577;
2045 -> 2042;
2045 -> 2044;
2045 -> 577;
2046 -> 2034;
2046 -> 1877;
2046 -> 2045;
2047 -> 2046;
2047 -> 577;
2048 -> 2038;
2048 -> 577;
2049 -> 2035;
2049 -> 577;
2050 -> 2036;
2050 -> 577;
2051 -> 577;
2052 -> 2047;
2052 -> 2051;
2053 -> 2048;
2053 -> 2051;
2054 -> 2049;
2054 -> 2051;
2055 -> 2050;
2055 -> 2051;
2056 -> 2037;
2056 -> 2051;
2057 -> 2051;
2058 -> 2052;
2058 -> 2057;
2058 -> 2051;
2059 -> 2055;
2059 -> 2051;
2060 -> 2055;
2060 -> 1877;
2060 -> 2051;
2061 -> 2056;
2061 -> 1877;
2061 -> 2051;
2062 -> 2053;
2062 -> 2051;
2063 -> 2054;
2063 -> 2051;
2064 -> 2055;
2064 -> 2051;
2065 -> 2051;
2066 -> 2062;
2066 -> 2065;
2067 -> 2063;
2067 -> 2065;
2068 -> 2064;
2068 -> 2065;
2069 -> 2061;
2069 -> 2065;
2070 -> 2065;
2071 -> 2067;
2071 -> 2070;
2071 -> 2065;
2072 -> 2068;
2072 -> 2070;
2072 -> 2065;
2073 -> 2071;
2073 -> 2072;
2073 -> 2065;
2074 -> 2066;
2074 -> 2069;
2074 -> 2065;
2075 -> 2067;
2075 -> 2069;
2075 -> 2065;
2076 -> 2068;
2076 -> 2069;
2076 -> 2065;
2077 -> 2051;
2078 -> 2052;
2078 -> 2051;
2079 -> 2051;
2080 -> 2078;
2080 -> 2079;
2081 -> 2061;
2081 -> 2079;
2082 -> 2080;
2082 -> 2079;
2083 -> 2079;
2084 -> 2082;
2084 -> 2083;
2085 -> 2081;
2085 -> 2083;
2086 -> 2085;
2086 -> 2083;
2087 -> 2086;
2087 -> 2084;
2087 -> 2061;
2087 -> 2074;
2087 -> 2075;
2087 -> 2076;
2087 -> 2083;
2088 -> 2083;
2089 -> 2087;
2089 -> 2088;
2090 -> 2087;
2090 -> 2088;
2091 -> 2089;
2091 -> 2088;
2092 -> 2088;
2093 -> 2091;
2093 -> 2092;
2094 -> 2090;
2094 -> 2092;
2095 -> 2094;
2095 -> 2087;
2095 -> 2092;
2096 -> 2093;
2096 -> 2092;
2097 -> 2095;
2097 -> 2096;
2097 -> 2087;
2097 -> 2092;
2098 -> 851;
2098 -> 2092;
2099 -> 2092;
2100 -> 2093;
2100 -> 2097;
2100 -> 2099;
2100 -> 2092;
2101 -> 2094;
2101 -> 2097;
2101 -> 2092;
2102 -> 2093;
2102 -> 2097;
2102 -> 2092;
2103 -> 0;
2103 -> 2100;
2104 -> 2093;
2104 -> 2092;
2105 -> 2103;
2105 -> 2092;
2106 -> 2092;
2107 -> 2104;
2107 -> 2106;
2108 -> 2105;
2108 -> 2106;
2109 -> 2094;
2109 -> 2106;
2110 -> 2107;
2110 -> 2106;
2111 -> 2108;
2111 -> 2106;
2112 -> 2106;
2113 -> 2110;
2113 -> 2112;
2114 -> 2111;
2114 -> 2112;
2115 -> 2114;
2115 -> 2112;
2116 -> 2112;
2117 -> 2112;
2118 -> 2112;
2119 -> 2117;
2119 -> 2118;
2120 -> 2117;
2120 -> 2106;
2121 -> 2106;
2122 -> 2106;
2123 -> 2109;
2123 -> 2122;
2124 -> 2123;
2124 -> 2101;
2124 -> 2122;
2125 -> 2124;
2125 -> 2106;
2126 -> 2120;
2126 -> 2106;
2127 -> 2121;
2127 -> 2106;
2128 -> 2126;
2128 -> 2127;
2128 -> 2125;
2128 -> 2113;
2128 -> 2114;
2128 -> 2101;
2128 -> 2106;
2129 -> 2106;
2130 -> 2107;
2130 -> 2128;
2131 -> 2128;
2132 -> 2130;
2132 -> 2131;
2133 -> 2132;
2133 -> 2131;
2134 -> 2132;
2134 -> 2131;
2135 -> 2133;
2135 -> 2131;
2136 -> 2131;
2137 -> 2135;
2137 -> 2136;
2138 -> 2134;
2138 -> 2136;
2139 -> 2137;
2139 -> 2132;
2139 -> 2136;
2140 -> 2136;
2141 -> 2140;
2141 -> 2136;
2142 -> 2137;
2142 -> 2132;
2142 -> 2136;
2143 -> 2138;
2143 -> 2142;
2143 -> 2139;
2143 -> 2132;
2144 -> 2138;
2144 -> 2142;
2144 -> 2143;
2145 -> 2143;
2146 -> 2144;
2146 -> 2136;
2147 -> 2136;
2148 -> 2146;
2148 -> 2147;
2148 -> 2136;
2149 -> 2146;
2149 -> 2137;
2149 -> 2136;
2150 -> 2146;
2150 -> 2148;
2151 -> 0;
2151 -> 2148;
2152 -> 2146;
2152 -> 2150;
2152 -> 2148;
2153 -> 2136;
2154 -> 2153;
2154 -> 2131;
2155 -> 2131;
2156 -> 2134;
2156 -> 2155;
2157 -> 2155;
2158 -> 2156;
2158 -> 2152;
2158 -> 2157;
2159 -> 2158;
2159 -> 2155;
2160 -> 2131;
2161 -> 2135;
2161 -> 2160;
2162 -> 2154;
2162 -> 2160;
2163 -> 2159;
2163 -> 2160;
2164 -> 2134;
2164 -> 2160;
2165 -> 2160;
2166 -> 2164;
2166 -> 2165;
2167 -> 2166;
2167 -> 2152;
2167 -> 2165;
2168 -> 2167;
2168 -> 2160;
2169 -> 2160;
2170 -> 2163;
2170 -> 2162;
2171 -> 2170;
2171 -> 2160;
2172 -> 2160;
2173 -> 2164;
2173 -> 2152;
2173 -> 2160;
2174 -> 2170;
2174 -> 2160;
2175 -> 2170;
2175 -> 2160;
2176 -> 2175;
2176 -> 2170;
2176 -> 2174;
2176 -> 2160;
2177 -> 2108;
2177 -> 2170;
2177 -> 2128;
2178 -> 2177;
2179 -> 2176;
2179 -> 2178;
2180 -> 2179;
2180 -> 2176;
2180 -> 2178;
2181 -> 2178;
2182 -> 2180;
2182 -> 2181;
2182 -> 2178;
2183 -> 2182;
2183 -> 2178;
2184 -> 2183;
2184 -> 2177;
2185 -> 2107;
2185 -> 2177;
2186 -> 2108;
2186 -> 0;
2186 -> 2177;
2187 -> 2184;
2187 -> 2186;
2188 -> 2176;
2188 -> 2186;
2189 -> 2186;
2190 -> 2186;
2191 -> 2187;
2191 -> 2190;
2192 -> 2188;
2192 -> 2190;
2193 -> 2189;
2193 -> 2190;
2194 -> 2189;
2194 -> 2190;
2195 -> 2190;
2196 -> 2192;
2196 -> 2195;
2196 -> 2190;
2197 -> 2192;
2197 -> 2184;
2197 -> 2194;
2197 -> 2190;
2198 -> 2192;
2198 -> 2184;
2198 -> 2194;
2198 -> 2190;
2199 -> 2194;
2199 -> 2190;
2200 -> 2190;
2201 -> 2191;
2201 -> 2200;
2201 -> 2190;
2202 -> 2186;
2203 -> 2107;
2203 -> 2184;
2203 -> 2202;
2203 -> 2186;
2204 -> 2107;
2204 -> 2184;
2204 -> 2128;
2205 -> 2128;
2206 -> 2204;
2206 -> 2205;
2207 -> 2189;
2207 -> 2205;
2208 -> 2207;
2208 -> 2197;
2208 -> 2205;
2209 -> 0;
2209 -> 2205;
2210 -> 2205;
2211 -> 2208;
2211 -> 2210;
2212 -> 2209;
2212 -> 2210;
2213 -> 2206;
2213 -> 2205;
2214 -> 2211;
2214 -> 2213;
2214 -> 2205;
2215 -> 2214;
2215 -> 2205;
2216 -> 2128;
2217 -> 2216;
2217 -> 2213;
2218 -> 2217;
2218 -> 2128;
2219 -> 2120;
2219 -> 2128;
2220 -> 2215;
2220 -> 2128;
2221 -> 2219;
2221 -> 2220;
2221 -> 2218;
2221 -> 2113;
2221 -> 2114;
2221 -> 2198;
2221 -> 2197;
2221 -> 2192;
2221 -> 2194;
2221 -> 2191;
2221 -> 2193;
2221 -> 2213;
2221 -> 2128;
2222 -> 2128;
2223 -> 2215;
2223 -> 2106;
2224 -> 2087;
2224 -> 2223;
2224 -> 2221;
2224 -> 2083;
2225 -> 2061;
2225 -> 2051;
2226 -> 2056;
2226 -> 2224;
2226 -> 2225;
2226 -> 2051;
2227 -> 2224;
2227 -> 2051;
2228 -> 603;
2228 -> 2227;
2228 -> 2226;
2228 -> 574;
2229 -> 2228;
2229 -> 2057;
2229 -> 2051;
2230 -> 2055;
2230 -> 2228;
2230 -> 2051;
2231 -> 2055;
2231 -> 2230;
2232 -> 2230;
2233 -> 2231;
2233 -> 2088;
2234 -> 2231;
2234 -> 2088;
2235 -> 2234;
2235 -> 2231;
2235 -> 2088;
2236 -> 2233;
2236 -> 2088;
2237 -> 2235;
2237 -> 2236;
2237 -> 2231;
2237 -> 2088;
2238 -> 2088;
2239 -> 2234;
2239 -> 2237;
2239 -> 2088;
2240 -> 2233;
2240 -> 2088;
2241 -> 2234;
2241 -> 2239;
2242 -> 2233;
2242 -> 2239;
2243 -> 2170;
2243 -> 2241;
2244 -> 2233;
2244 -> 2088;
2245 -> 2243;
2245 -> 2088;
2246 -> 2088;
2247 -> 2244;
2247 -> 2246;
2248 -> 2245;
2248 -> 2246;
2249 -> 2248;
2249 -> 2246;
2250 -> 2246;
2251 -> 2246;
2252 -> 2246;
2253 -> 2251;
2253 -> 2252;
2254 -> 2251;
2254 -> 2088;
2255 -> 2088;
2256 -> 2088;
2257 -> 2234;
2257 -> 2256;
2258 -> 2257;
2258 -> 2241;
2258 -> 2256;
2259 -> 2258;
2259 -> 2088;
2260 -> 2254;
2260 -> 2088;
2261 -> 2255;
2261 -> 2088;
2262 -> 2260;
2262 -> 2261;
2262 -> 2259;
2262 -> 2247;
2262 -> 2248;
2262 -> 2241;
2262 -> 2088;
2263 -> 2088;
2264 -> 2233;
2264 -> 2262;
2265 -> 2262;
2266 -> 2264;
2266 -> 2265;
2266 -> 2262;
2267 -> 2264;
2267 -> 2266;
2268 -> 0;
2268 -> 2266;
2269 -> 2266;
2270 -> 2267;
2270 -> 2269;
2271 -> 2268;
2271 -> 2269;
2272 -> 2271;
2272 -> 2269;
2273 -> 2269;
2274 -> 2262;
2275 -> 2243;
2275 -> 2170;
2275 -> 2262;
2276 -> 2243;
2276 -> 0;
2276 -> 2262;
2277 -> 2233;
2277 -> 2270;
2277 -> 2262;
2278 -> 2262;
2279 -> 2277;
2279 -> 2278;
2280 -> 2270;
2280 -> 2278;
2281 -> 2262;
2282 -> 2281;
2282 -> 2279;
2283 -> 2282;
2283 -> 2262;
2284 -> 2254;
2284 -> 2262;
2285 -> 2279;
2285 -> 2262;
2286 -> 2262;
2287 -> 2279;
2287 -> 2088;
2288 -> 2231;
2288 -> 2287;
2288 -> 2283;
2288 -> 2083;
2289 -> 603;
2289 -> 577;
2290 -> 603;
2290 -> 577;
2291 -> 603;
2291 -> 577;
2292 -> 577;
2293 -> 2290;
2293 -> 2292;
2293 -> 577;
2294 -> 2291;
2294 -> 577;
2295 -> 2291;
2295 -> 2288;
2295 -> 2289;
2295 -> 577;
2296 -> 2290;
2296 -> 577;
2297 -> 577;
2298 -> 577;
2299 -> 2294;
2299 -> 2298;
2300 -> 2295;
2300 -> 2298;
2301 -> 2296;
2301 -> 2298;
2302 -> 2297;
2302 -> 2298;
2303 -> 2299;
2303 -> 2298;
2304 -> 2300;
2304 -> 2298;
2305 -> 2298;
2306 -> 2303;
2306 -> 2305;
2307 -> 2304;
2307 -> 2305;
2308 -> 2302;
2308 -> 2305;
2309 -> 2308;
2309 -> 2305;
2310 -> 2308;
2310 -> 2305;
2311 -> 2308;
2311 -> 2305;
2312 -> 2308;
2312 -> 2305;
2313 -> 2308;
2313 -> 2305;
2314 -> 2305;
2315 -> 2306;
2315 -> 2314;
2315 -> 2305;
2316 -> 2307;
2316 -> 2305;
2317 -> 0;
2317 -> 2305;
2318 -> 2305;
2319 -> 2316;
2319 -> 2318;
2320 -> 2317;
2320 -> 2318;
2321 -> 2307;
2321 -> 2305;
2322 -> 0;
2322 -> 2305;
2323 -> 2305;
2324 -> 2321;
2324 -> 2323;
2325 -> 2322;
2325 -> 2323;
2326 -> 2306;
2326 -> 2308;
2326 -> 2305;
2327 -> 2306;
2327 -> 2288;
2327 -> 2308;
2327 -> 2305;
2328 -> 2302;
2328 -> 2298;
2329 -> 2298;
2330 -> 2301;
2330 -> 2329;
2330 -> 2298;
2331 -> 2301;
2331 -> 2302;
2331 -> 2298;
2332 -> 603;
2332 -> 2297;
2332 -> 2288;
2332 -> 2327;
2332 -> 2307;
2332 -> 2326;
2332 -> 2312;
2332 -> 2313;
2332 -> 2331;
2332 -> 574;
2333 -> 603;
2333 -> 577;
2334 -> 603;
2334 -> 577;
2335 -> 603;
2335 -> 577;
2336 -> 603;
2336 -> 577;
2337 -> 603;
2337 -> 577;
2338 -> 2333;
2338 -> 577;
2339 -> 2334;
2339 -> 577;
2340 -> 2335;
2340 -> 577;
2341 -> 2336;
2341 -> 577;
2342 -> 577;
2343 -> 2338;
2343 -> 2342;
2344 -> 2339;
2344 -> 2342;
2345 -> 2340;
2345 -> 2342;
2346 -> 2341;
2346 -> 2342;
2347 -> 2337;
2347 -> 2342;
2348 -> 2342;
2349 -> 2344;
2349 -> 2348;
2349 -> 2342;
2350 -> 2343;
2350 -> 2342;
2351 -> 2344;
2351 -> 2342;
2352 -> 2345;
2352 -> 2342;
2353 -> 2342;
2354 -> 2345;
2354 -> 2353;
2354 -> 2342;
2355 -> 2354;
2355 -> 2346;
2355 -> 2342;
2356 -> 2342;
2357 -> 2350;
2357 -> 2356;
2358 -> 2351;
2358 -> 2356;
2359 -> 2352;
2359 -> 2356;
2360 -> 2355;
2360 -> 2356;
2361 -> 2347;
2361 -> 2356;
2362 -> 2357;
2362 -> 2332;
2362 -> 2356;
2363 -> 2358;
2363 -> 2362;
2364 -> 2359;
2364 -> 2362;
2365 -> 2360;
2365 -> 2362;
2366 -> 2364;
2366 -> 2362;
2367 -> 2361;
2367 -> 2362;
2368 -> 2362;
2369 -> 2362;
2370 -> 2363;
2370 -> 2362;
2371 -> 2362;
2372 -> 2369;
2372 -> 2371;
2373 -> 2369;
2373 -> 2371;
2374 -> 2369;
2374 -> 2371;
2375 -> 2369;
2375 -> 2371;
2376 -> 2370;
2376 -> 2371;
2377 -> 2367;
2377 -> 2371;
2378 -> 2371;
2379 -> 2373;
2379 -> 2378;
2379 -> 2371;
2380 -> 2371;
2381 -> 2380;
2381 -> 2362;
2382 -> 2362;
2383 -> 2381;
2383 -> 2382;
2383 -> 2362;
2384 -> 2362;
2385 -> 2362;
2385 -> 2384;
2386 -> 2385;
2386 -> 2362;
2386 -> 0;
2386 -> 2384;
2387 -> 2384;
2388 -> 2385;
2388 -> 2362;
2388 -> 2387;
2388 -> 2384;
2389 -> 2386;
2389 -> 2362;
2390 -> 2362;
2391 -> 2362;
2392 -> 2366;
2392 -> 2362;
2393 -> 2362;
2394 -> 2391;
2394 -> 2362;
2395 -> 2392;
2395 -> 2362;
2396 -> 2393;
2396 -> 2362;
2397 -> 2394;
2397 -> 2362;
2398 -> 2395;
2398 -> 2362;
2399 -> 2396;
2399 -> 2362;
2400 -> 2362;
2401 -> 2362;
2401 -> 2400;
2402 -> 2401;
2402 -> 2362;
2402 -> 0;
2402 -> 2400;
2403 -> 2400;
2404 -> 2401;
2404 -> 2362;
2404 -> 2403;
2404 -> 2400;
2405 -> 2402;
2405 -> 2362;
2406 -> 2394;
2406 -> 2362;
2407 -> 2362;
2408 -> 2406;
2408 -> 2407;
2409 -> 2408;
2409 -> 0;
2409 -> 2407;
2410 -> 2408;
2410 -> 0;
2410 -> 2407;
2411 -> 2407;
2412 -> 0;
2412 -> 2407;
2413 -> 2408;
2413 -> 2412;
2413 -> 2407;
2414 -> 0;
2414 -> 2407;
2415 -> 2408;
2415 -> 2414;
2415 -> 2407;
2416 -> 2407;
2417 -> 0;
2417 -> 2407;
2418 -> 2408;
2418 -> 2417;
2418 -> 2407;
2419 -> 2418;
2419 -> 2407;
2420 -> 2407;
2421 -> 2419;
2421 -> 2420;
2422 -> 2420;
2423 -> 2421;
2423 -> 2422;
2423 -> 2420;
2424 -> 2397;
2424 -> 2367;
2425 -> 2398;
2425 -> 2367;
2426 -> 2394;
2426 -> 2367;
2427 -> 2399;
2427 -> 2367;
2428 -> 2367;
2429 -> 2367;
2430 -> 2424;
2430 -> 2367;
2431 -> 2425;
2431 -> 2367;
2432 -> 2426;
2432 -> 2367;
2433 -> 2367;
2434 -> 2427;
2434 -> 2367;
2435 -> 2367;
2436 -> 2367;
2437 -> 2362;
2437 -> 2436;
2438 -> 2437;
2438 -> 2362;
2438 -> 0;
2438 -> 2436;
2439 -> 2436;
2440 -> 2437;
2440 -> 2362;
2440 -> 2439;
2440 -> 2436;
2441 -> 2438;
2441 -> 2367;
2442 -> 2394;
2442 -> 0;
2442 -> 2367;
2443 -> 2367;
2444 -> 2424;
2444 -> 2367;
2445 -> 2425;
2445 -> 2367;
2446 -> 2427;
2446 -> 2367;
2447 -> 2367;
2448 -> 2367;
2448 -> 2447;
2449 -> 2448;
2449 -> 2362;
2449 -> 0;
2449 -> 2447;
2450 -> 2447;
2451 -> 2448;
2451 -> 2362;
2451 -> 2450;
2451 -> 2447;
2452 -> 2449;
2452 -> 2367;
2453 -> 2367;
2454 -> 2367;
2454 -> 2453;
2455 -> 2454;
2455 -> 2362;
2455 -> 0;
2455 -> 2453;
2456 -> 2455;
2456 -> 2367;
2457 -> 2367;
2458 -> 2445;
2458 -> 2426;
2459 -> 2446;
2459 -> 2426;
2460 -> 2444;
2460 -> 2426;
2461 -> 2458;
2461 -> 2426;
2462 -> 2459;
2462 -> 2426;
2463 -> 2367;
2463 -> 2426;
2464 -> 2426;
2465 -> 2426;
2466 -> 2464;
2466 -> 2465;
2467 -> 2466;
2467 -> 0;
2467 -> 2465;
2468 -> 2466;
2468 -> 0;
2468 -> 2465;
2469 -> 2465;
2470 -> 0;
2470 -> 2465;
2471 -> 2466;
2471 -> 2470;
2471 -> 2465;
2472 -> 0;
2472 -> 2465;
2473 -> 2466;
2473 -> 2472;
2473 -> 2465;
2474 -> 2465;
2475 -> 0;
2475 -> 2465;
2476 -> 2466;
2476 -> 2475;
2476 -> 2465;
2477 -> 2476;
2477 -> 2465;
2478 -> 2465;
2479 -> 2477;
2479 -> 2478;
2480 -> 2478;
2481 -> 2479;
2481 -> 2480;
2481 -> 2478;
2482 -> 2426;
2483 -> 2460;
2483 -> 2482;
2483 -> 2426;
2484 -> 2426;
2485 -> 2460;
2485 -> 2426;
2486 -> 2461;
2486 -> 2426;
2487 -> 2462;
2487 -> 2426;
2488 -> 2426;
2489 -> 2484;
2489 -> 2488;
2490 -> 2484;
2490 -> 2488;
2491 -> 2484;
2491 -> 2488;
2492 -> 2485;
2492 -> 2488;
2493 -> 2486;
2493 -> 2488;
2494 -> 2484;
2494 -> 2488;
2495 -> 2484;
2495 -> 2488;
2496 -> 2487;
2496 -> 2488;
2497 -> 2484;
2497 -> 2488;
2498 -> 2463;
2498 -> 2488;
2499 -> 2490;
2499 -> 2362;
2499 -> 2488;
2500 -> 2489;
2500 -> 2499;
2501 -> 2490;
2501 -> 2499;
2502 -> 2491;
2502 -> 2499;
2503 -> 2492;
2503 -> 2499;
2504 -> 2493;
2504 -> 2499;
2505 -> 2494;
2505 -> 2499;
2506 -> 2495;
2506 -> 2499;
2507 -> 2496;
2507 -> 2499;
2508 -> 2497;
2508 -> 2499;
2509 -> 2499;
2510 -> 2500;
2510 -> 2509;
2511 -> 2501;
2511 -> 2509;
2512 -> 2502;
2512 -> 2509;
2513 -> 2503;
2513 -> 2509;
2514 -> 2504;
2514 -> 2509;
2515 -> 2505;
2515 -> 2509;
2516 -> 2506;
2516 -> 2509;
2517 -> 2507;
2517 -> 2509;
2518 -> 2508;
2518 -> 2509;
2519 -> 2498;
2519 -> 2509;
2520 -> 2510;
2520 -> 2509;
2521 -> 2511;
2521 -> 2509;
2522 -> 2512;
2522 -> 2509;
2523 -> 2513;
2523 -> 2509;
2524 -> 2514;
2524 -> 2509;
2525 -> 2515;
2525 -> 2509;
2526 -> 2516;
2526 -> 2509;
2527 -> 2517;
2527 -> 2509;
2528 -> 2518;
2528 -> 2509;
2529 -> 2509;
2530 -> 2520;
2530 -> 2529;
2531 -> 2521;
2531 -> 2529;
2532 -> 2522;
2532 -> 2529;
2533 -> 2523;
2533 -> 2529;
2534 -> 2524;
2534 -> 2529;
2535 -> 2525;
2535 -> 2529;
2536 -> 2526;
2536 -> 2529;
2537 -> 2521;
2537 -> 2529;
2538 -> 2527;
2538 -> 2529;
2539 -> 2528;
2539 -> 2529;
2540 -> 2519;
2540 -> 2529;
2541 -> 2529;
2542 -> 2531;
2542 -> 2541;
2542 -> 2529;
2543 -> 2531;
2543 -> 2529;
2544 -> 2531;
2544 -> 2529;
2545 -> 2529;
2546 -> 1120;
2546 -> 2543;
2546 -> 2545;
2547 -> 2545;
2548 -> 2545;
2549 -> 2545;
2550 -> 2545;
2551 -> 2545;
2552 -> 2546;
2552 -> 2551;
2553 -> 2552;
2553 -> 2546;
2553 -> 0;
2553 -> 2551;
2554 -> 2551;
2555 -> 2552;
2555 -> 2546;
2555 -> 2554;
2555 -> 2551;
2556 -> 2553;
2556 -> 2545;
2557 -> 2546;
2557 -> 2529;
2558 -> 2529;
2559 -> 2529;
2560 -> 2544;
2560 -> 2559;
2560 -> 2529;
2561 -> 2560;
2562 -> 2557;
2562 -> 2561;
2563 -> 2560;
2564 -> 2557;
2564 -> 2560;
2565 -> 2544;
2565 -> 2560;
2566 -> 2532;
2566 -> 2560;
2567 -> 2533;
2567 -> 2560;
2568 -> 2535;
2568 -> 2560;
2569 -> 2536;
2569 -> 2560;
2570 -> 2537;
2570 -> 2560;
2571 -> 2538;
2571 -> 2560;
2572 -> 2539;
2572 -> 2560;
2573 -> 2534;
2573 -> 2560;
2574 -> 2560;
2575 -> 2564;
2575 -> 2574;
2576 -> 2565;
2576 -> 2574;
2577 -> 2566;
2577 -> 2574;
2578 -> 2567;
2578 -> 2574;
2579 -> 2568;
2579 -> 2574;
2580 -> 2569;
2580 -> 2574;
2581 -> 2570;
2581 -> 2574;
2582 -> 2571;
2582 -> 2574;
2583 -> 2572;
2583 -> 2574;
2584 -> 2573;
2584 -> 2574;
2585 -> 2576;
2585 -> 2574;
2586 -> 2577;
2586 -> 2574;
2587 -> 2579;
2587 -> 2574;
2588 -> 2580;
2588 -> 2574;
2589 -> 2574;
2590 -> 2585;
2590 -> 2589;
2591 -> 2586;
2591 -> 2589;
2592 -> 2587;
2592 -> 2589;
2593 -> 2588;
2593 -> 2589;
2594 -> 2592;
2594 -> 2590;
2594 -> 2589;
2595 -> 2591;
2595 -> 2594;
2596 -> 2590;
2596 -> 2595;
2596 -> 2562;
2596 -> 2594;
2597 -> 2596;
2597 -> 2574;
2598 -> 2560;
2599 -> 2530;
2599 -> 2560;
2600 -> 2557;
2600 -> 2560;
2601 -> 2534;
2601 -> 2560;
2602 -> 2583;
2602 -> 2560;
2603 -> 2599;
2603 -> 2600;
2603 -> 2601;
2603 -> 2602;
2603 -> 2596;
2603 -> 2560;
2604 -> 2560;
2605 -> 2603;
2605 -> 2604;
2606 -> 2603;
2606 -> 2604;
2607 -> 2604;
2608 -> 2605;
2608 -> 2607;
2609 -> 2608;
2609 -> 2604;
2610 -> 2604;
2611 -> 2606;
2611 -> 2610;
2612 -> 2611;
2612 -> 2604;
2613 -> 2609;
2613 -> 2612;
2613 -> 2604;
2614 -> 2544;
2614 -> 2560;
2615 -> 2560;
2616 -> 2614;
2616 -> 2603;
2616 -> 2615;
2616 -> 2560;
2617 -> 2560;
2618 -> 2557;
2618 -> 2617;
2619 -> 2618;
2619 -> 2603;
2619 -> 2617;
2620 -> 2619;
2620 -> 2560;
2621 -> 2560;
2622 -> 2530;
2622 -> 2621;
2623 -> 2622;
2623 -> 2603;
2623 -> 2621;
2624 -> 2623;
2624 -> 2560;
2625 -> 2560;
2626 -> 2534;
2626 -> 2625;
2626 -> 2560;
2627 -> 2560;
2628 -> 2536;
2628 -> 2627;
2629 -> 2627;
2630 -> 2628;
2630 -> 2629;
2631 -> 2630;
2631 -> 2603;
2631 -> 2629;
2632 -> 2631;
2632 -> 2627;
2633 -> 2632;
2633 -> 2560;
2634 -> 2544;
2634 -> 2560;
2635 -> 2534;
2635 -> 2560;
2636 -> 2540;
2636 -> 2603;
2636 -> 2560;
2637 -> 2558;
2637 -> 2560;
2638 -> 2634;
2638 -> 2635;
2638 -> 2636;
2638 -> 2637;
2638 -> 2603;
2638 -> 2560;
2639 -> 2560;
2640 -> 2638;
2640 -> 2639;
2640 -> 2560;
2641 -> 2638;
2641 -> 2640;
2642 -> 2603;
2642 -> 2640;
2643 -> 2638;
2644 -> 2533;
2644 -> 2638;
2645 -> 2536;
2645 -> 2638;
2646 -> 2537;
2646 -> 2638;
2647 -> 2538;
2647 -> 2638;
2648 -> 2638;
2649 -> 2644;
2649 -> 2638;
2650 -> 2645;
2650 -> 2638;
2651 -> 2646;
2651 -> 2638;
2652 -> 2647;
2652 -> 2638;
2653 -> 2638;
2654 -> 2650;
2654 -> 2638;
2655 -> 2641;
2655 -> 2638;
2656 -> 2641;
2656 -> 2638;
2657 -> 2641;
2657 -> 2638;
2658 -> 2638;
2659 -> 2656;
2659 -> 2658;
2660 -> 2659;
2660 -> 2638;
2661 -> 2638;
2662 -> 2657;
2662 -> 2661;
2663 -> 2662;
2663 -> 2638;
2664 -> 2660;
2664 -> 2663;
2664 -> 2638;
2665 -> 2638;
2666 -> 2638;
2667 -> 2665;
2667 -> 2641;
2667 -> 2666;
2667 -> 2638;
2668 -> 2638;
2669 -> 2668;
2669 -> 2641;
2670 -> 2669;
2670 -> 2638;
2671 -> 2638;
2672 -> 2671;
2672 -> 2641;
2673 -> 2672;
2673 -> 2638;
2674 -> 2638;
2675 -> 2638;
2676 -> 2536;
2676 -> 2675;
2677 -> 2675;
2678 -> 2676;
2678 -> 2677;
2679 -> 2678;
2679 -> 2641;
2679 -> 2677;
2680 -> 2679;
2680 -> 2675;
2681 -> 2680;
2681 -> 2638;
2682 -> 2638;
2683 -> 2641;
2683 -> 2529;
2684 -> 2529;
2685 -> 2557;
2685 -> 2684;
2686 -> 2685;
2686 -> 2641;
2686 -> 2684;
2687 -> 2684;
2688 -> 2529;
2689 -> 2509;
2690 -> 2499;
2691 -> 2367;
2692 -> 2444;
2692 -> 2367;
2693 -> 2445;
2693 -> 2367;
2694 -> 2426;
2694 -> 2367;
2695 -> 2446;
2695 -> 2367;
2696 -> 2641;
2696 -> 2367;
2697 -> 2367;
2698 -> 2691;
2698 -> 2697;
2699 -> 2691;
2699 -> 2697;
2700 -> 2691;
2700 -> 2697;
2701 -> 2692;
2701 -> 2697;
2702 -> 2693;
2702 -> 2697;
2703 -> 2694;
2703 -> 2697;
2704 -> 2695;
2704 -> 2697;
2705 -> 2696;
2705 -> 2697;
2706 -> 2367;
2706 -> 2697;
2707 -> 2698;
2707 -> 2697;
2708 -> 2699;
2708 -> 2697;
2709 -> 2700;
2709 -> 2697;
2710 -> 2701;
2710 -> 2697;
2711 -> 2702;
2711 -> 2697;
2712 -> 2703;
2712 -> 2697;
2713 -> 2704;
2713 -> 2697;
2714 -> 2705;
2714 -> 2697;
2715 -> 2697;
2716 -> 2707;
2716 -> 2715;
2717 -> 2708;
2717 -> 2715;
2718 -> 2709;
2718 -> 2715;
2719 -> 2710;
2719 -> 2715;
2720 -> 2711;
2720 -> 2715;
2721 -> 2712;
2721 -> 2715;
2722 -> 2713;
2722 -> 2715;
2723 -> 2714;
2723 -> 2715;
2724 -> 2706;
2724 -> 2715;
2725 -> 2715;
2726 -> 2716;
2726 -> 2725;
2727 -> 2726;
2727 -> 2686;
2727 -> 2725;
2728 -> 0;
2728 -> 2725;
2729 -> 2725;
2730 -> 2727;
2730 -> 2729;
2731 -> 2728;
2731 -> 2729;
2732 -> 2730;
2732 -> 2715;
2733 -> 2715;
2734 -> 2733;
2734 -> 2715;
2735 -> 2718;
2735 -> 2715;
2736 -> 2733;
2736 -> 2715;
2737 -> 2724;
2737 -> 2686;
2737 -> 2735;
2737 -> 2736;
2737 -> 2734;
2737 -> 2715;
2738 -> 2724;
2738 -> 2737;
2738 -> 2715;
2739 -> 2697;
2740 -> 2697;
2741 -> 2699;
2741 -> 2740;
2742 -> 2741;
2742 -> 2737;
2742 -> 2740;
2743 -> 2742;
2743 -> 2697;
2744 -> 2703;
2744 -> 0;
2744 -> 2697;
2745 -> 2697;
2746 -> 2743;
2746 -> 2744;
2746 -> 2697;
2747 -> 2706;
2747 -> 2737;
2747 -> 2746;
2748 -> 2698;
2748 -> 2746;
2749 -> 2699;
2749 -> 2746;
2750 -> 2700;
2750 -> 2746;
2751 -> 2701;
2751 -> 2746;
2752 -> 2702;
2752 -> 2746;
2753 -> 2703;
2753 -> 2746;
2754 -> 2704;
2754 -> 2746;
2755 -> 2723;
2755 -> 2746;
2756 -> 2746;
2757 -> 2747;
2757 -> 2756;
2758 -> 2748;
2758 -> 2756;
2759 -> 2749;
2759 -> 2756;
2760 -> 2750;
2760 -> 2756;
2761 -> 2751;
2761 -> 2756;
2762 -> 2752;
2762 -> 2756;
2763 -> 2753;
2763 -> 2756;
2764 -> 2754;
2764 -> 2756;
2765 -> 2755;
2765 -> 2756;
2766 -> 2758;
2766 -> 2737;
2766 -> 2756;
2767 -> 0;
2767 -> 2756;
2768 -> 2756;
2769 -> 2766;
2769 -> 2768;
2770 -> 2767;
2770 -> 2768;
2771 -> 2756;
2772 -> 2758;
2772 -> 2771;
2773 -> 2772;
2773 -> 2737;
2773 -> 2771;
2774 -> 0;
2774 -> 2771;
2775 -> 2771;
2776 -> 2773;
2776 -> 2775;
2777 -> 2774;
2777 -> 2775;
2778 -> 2776;
2778 -> 2756;
2779 -> 2757;
2779 -> 2756;
2780 -> 2746;
2781 -> 2437;
2781 -> 2737;
2781 -> 0;
2781 -> 2436;
2782 -> 2437;
2782 -> 2737;
2782 -> 2439;
2782 -> 2436;
2783 -> 2781;
2783 -> 2367;
2784 -> 2397;
2784 -> 2737;
2785 -> 2399;
2785 -> 2737;
2786 -> 2784;
2786 -> 2737;
2787 -> 2785;
2787 -> 2737;
2788 -> 2737;
2789 -> 2737;
2789 -> 2788;
2790 -> 2789;
2790 -> 2737;
2790 -> 0;
2790 -> 2788;
2791 -> 2788;
2792 -> 2789;
2792 -> 2737;
2792 -> 2791;
2792 -> 2788;
2793 -> 2790;
2793 -> 2737;
2794 -> 2737;
2795 -> 2737;
2795 -> 2794;
2796 -> 2795;
2796 -> 2737;
2796 -> 0;
2796 -> 2794;
2797 -> 2796;
2797 -> 2737;
2798 -> 2737;
2799 -> 2786;
2799 -> 2737;
2800 -> 2787;
2800 -> 2737;
2801 -> 2737;
2802 -> 2737;
2803 -> 2801;
2803 -> 2802;
2804 -> 2803;
2804 -> 0;
2804 -> 2802;
2805 -> 2803;
2805 -> 0;
2805 -> 2802;
2806 -> 2802;
2807 -> 0;
2807 -> 2802;
2808 -> 2803;
2808 -> 2807;
2808 -> 2802;
2809 -> 0;
2809 -> 2802;
2810 -> 2803;
2810 -> 2809;
2810 -> 2802;
2811 -> 2802;
2812 -> 0;
2812 -> 2802;
2813 -> 2803;
2813 -> 2812;
2813 -> 2802;
2814 -> 2813;
2814 -> 2802;
2815 -> 2802;
2816 -> 2814;
2816 -> 2815;
2817 -> 2815;
2818 -> 2816;
2818 -> 2817;
2818 -> 2815;
2819 -> 2737;
2820 -> 2799;
2820 -> 2819;
2820 -> 2737;
2821 -> 2799;
2821 -> 2737;
2822 -> 2800;
2822 -> 2737;
2823 -> 2737;
2824 -> 2821;
2824 -> 2737;
2825 -> 2737;
2826 -> 2822;
2826 -> 2737;
2827 -> 2737;
2828 -> 2737;
2829 -> 2737;
2830 -> 2737;
2831 -> 2824;
2831 -> 2737;
2832 -> 2826;
2832 -> 2737;
2833 -> 2737;
2834 -> 2829;
2834 -> 2737;
2835 -> 2830;
2835 -> 2737;
2836 -> 2835;
2837 -> 2831;
2837 -> 2836;
2837 -> 2835;
2838 -> 2833;
2838 -> 0;
2838 -> 2835;
2839 -> 2837;
2839 -> 2838;
2839 -> 2835;
2840 -> 2830;
2840 -> 2839;
2841 -> 2840;
2841 -> 2737;
2841 -> 2839;
2842 -> 2840;
2842 -> 2839;
2843 -> 2840;
2843 -> 2737;
2843 -> 2831;
2843 -> 2839;
2844 -> 2833;
2844 -> 2839;
2845 -> 2839;
2846 -> 2844;
2846 -> 2845;
2847 -> 2843;
2847 -> 2846;
2847 -> 2839;
2848 -> 2737;
2849 -> 2825;
2849 -> 2829;
2850 -> 2829;
2851 -> 2829;
2851 -> 2850;
2852 -> 2849;
2852 -> 2850;
2853 -> 2851;
2853 -> 0;
2853 -> 2850;
2854 -> 2850;
2855 -> 2853;
2855 -> 2850;
2856 -> 2852;
2856 -> 2855;
2857 -> 2828;
2857 -> 2829;
2858 -> 2765;
2858 -> 2829;
2859 -> 2827;
2859 -> 2829;
2860 -> 2856;
2860 -> 2829;
2861 -> 2857;
2861 -> 2829;
2862 -> 2859;
2862 -> 2829;
2863 -> 2829;
2863 -> 2737;
2864 -> 0;
2864 -> 2829;
2865 -> 2829;
2866 -> 2863;
2866 -> 2865;
2867 -> 2864;
2867 -> 2865;
2868 -> 2860;
2868 -> 2829;
2869 -> 2861;
2869 -> 2829;
2870 -> 2862;
2870 -> 2829;
2871 -> 2868;
2871 -> 2829;
2872 -> 2869;
2872 -> 2829;
2873 -> 2870;
2873 -> 2829;
2874 -> 2829;
2875 -> 2871;
2875 -> 2829;
2876 -> 2872;
2876 -> 2829;
2877 -> 2858;
2877 -> 2829;
2878 -> 2829;
2879 -> 2874;
2879 -> 2878;
2880 -> 2874;
2880 -> 2878;
2881 -> 2875;
2881 -> 2878;
2882 -> 2876;
2882 -> 2878;
2883 -> 2877;
2883 -> 2878;
2884 -> 2874;
2884 -> 2878;
2885 -> 2829;
2885 -> 2878;
2886 -> 2885;
2886 -> 2737;
2886 -> 2878;
2887 -> 0;
2887 -> 2878;
2888 -> 2878;
2889 -> 2886;
2889 -> 2888;
2890 -> 2887;
2890 -> 2888;
2891 -> 2879;
2891 -> 2878;
2892 -> 2880;
2892 -> 2878;
2893 -> 2881;
2893 -> 2878;
2894 -> 2882;
2894 -> 2878;
2895 -> 2883;
2895 -> 2878;
2896 -> 2884;
2896 -> 2878;
2897 -> 2878;
2898 -> 2891;
2898 -> 2897;
2899 -> 2892;
2899 -> 2897;
2900 -> 2893;
2900 -> 2897;
2901 -> 2894;
2901 -> 2897;
2902 -> 2895;
2902 -> 2897;
2903 -> 2896;
2903 -> 2897;
2904 -> 2898;
2904 -> 2897;
2905 -> 2899;
2905 -> 2897;
2906 -> 2900;
2906 -> 2897;
2907 -> 2901;
2907 -> 2897;
2908 -> 2899;
2908 -> 2737;
2908 -> 2897;
2909 -> 2902;
2909 -> 2897;
2910 -> 2903;
2910 -> 2897;
2911 -> 2897;
2912 -> 2904;
2912 -> 2911;
2913 -> 2905;
2913 -> 2911;
2914 -> 2906;
2914 -> 2911;
2915 -> 2907;
2915 -> 2911;
2916 -> 2908;
2916 -> 2911;
2917 -> 2909;
2917 -> 2911;
2918 -> 2910;
2918 -> 2911;
2919 -> 2911;
2920 -> 2912;
2920 -> 2919;
2920 -> 2911;
2921 -> 2911;
2922 -> 2913;
2922 -> 2921;
2922 -> 2911;
2923 -> 2913;
2923 -> 2737;
2923 -> 2911;
2924 -> 2913;
2924 -> 2911;
2925 -> 2911;
2926 -> 2912;
2927 -> 2913;
2927 -> 2912;
2928 -> 2917;
2928 -> 2912;
2929 -> 2918;
2929 -> 2912;
2930 -> 2912;
2931 -> 2926;
2931 -> 2930;
2932 -> 2927;
2932 -> 2930;
2933 -> 2928;
2933 -> 2930;
2934 -> 2929;
2934 -> 2930;
2935 -> 2932;
2935 -> 2930;
2936 -> 2930;
2937 -> 2931;
2937 -> 2936;
2937 -> 2930;
2938 -> 2932;
2938 -> 2737;
2938 -> 2930;
2939 -> 2930;
2940 -> 2931;
2940 -> 2737;
2940 -> 2930;
2941 -> 2931;
2941 -> 2737;
2941 -> 2930;
2942 -> 2930;
2943 -> 2941;
2943 -> 2942;
2943 -> 2930;
2944 -> 2943;
2944 -> 2930;
2945 -> 2932;
2945 -> 2944;
2946 -> 2944;
2947 -> 2944;
2947 -> 2946;
2948 -> 2944;
2948 -> 2946;
2949 -> 2945;
2949 -> 2946;
2950 -> 2949;
2950 -> 2946;
2951 -> 2946;
2952 -> 2947;
2952 -> 2951;
2952 -> 2946;
2953 -> 2948;
2953 -> 2946;
2954 -> 2949;
2954 -> 2953;
2955 -> 2953;
2956 -> 2954;
2956 -> 2955;
2956 -> 2953;
2957 -> 2956;
2957 -> 2953;
2958 -> 2954;
2958 -> 2737;
2958 -> 2957;
2959 -> 2958;
2959 -> 2947;
2959 -> 2953;
2960 -> 2786;
2960 -> 2959;
2961 -> 2959;
2962 -> 2737;
2962 -> 2961;
2963 -> 2962;
2963 -> 2959;
2963 -> 2961;
2964 -> 0;
2964 -> 2961;
2965 -> 2961;
2966 -> 2963;
2966 -> 2965;
2967 -> 2964;
2967 -> 2965;
2968 -> 2966;
2968 -> 2959;
2969 -> 2959;
2970 -> 2960;
2970 -> 2969;
2970 -> 2959;
2971 -> 2959;
2972 -> 2737;
2973 -> 2362;
2973 -> 2972;
2974 -> 2973;
2974 -> 2959;
2974 -> 0;
2974 -> 2972;
2975 -> 2974;
2975 -> 2737;
2976 -> 2737;
2976 -> 2975;
2977 -> 2394;
2977 -> 0;
2977 -> 2737;
2978 -> 2737;
2979 -> 2976;
2979 -> 2362;
2980 -> 2363;
2980 -> 2362;
2980 -> 2933;
2980 -> 2959;
2981 -> 2362;
2982 -> 2362;
2983 -> 2362;
2984 -> 2982;
2984 -> 2983;
2985 -> 2984;
2985 -> 2980;
2985 -> 2983;
2986 -> 2985;
2986 -> 2362;
2987 -> 2362;
2988 -> 2982;
2988 -> 2987;
2989 -> 2988;
2989 -> 2980;
2989 -> 2987;
2990 -> 2989;
2990 -> 2362;
2991 -> 2990;
2991 -> 2980;
2992 -> 2991;
2993 -> 2981;
2994 -> 2363;
2994 -> 2981;
2995 -> 2365;
2995 -> 2981;
2996 -> 2981;
2997 -> 2981;
2998 -> 2981;
2999 -> 2994;
2999 -> 2981;
3000 -> 2993;
3000 -> 2981;
3001 -> 2981;
3002 -> 2981;
3003 -> 2367;
3003 -> 2981;
3004 -> 2981;
3005 -> 2998;
3005 -> 3004;
3005 -> 2981;
3006 -> 2981;
3007 -> 2999;
3007 -> 3006;
3007 -> 2981;
3008 -> 2981;
3008 -> 2980;
3009 -> 2981;
3010 -> 2981;
3010 -> 2980;
3011 -> 3008;
3011 -> 0;
3012 -> 3011;
3012 -> 3003;
3012 -> 3008;
3013 -> 2995;
3013 -> 3008;
3014 -> 2999;
3014 -> 3013;
3015 -> 2998;
3015 -> 3013;
3016 -> 3014;
3016 -> 3013;
3017 -> 3015;
3017 -> 3013;
3018 -> 3013;
3019 -> 3008;
3019 -> 3013;
3019 -> 0;
3019 -> 2981;
3020 -> 2998;
3020 -> 3019;
3021 -> 3019;
3022 -> 3008;
3022 -> 3019;
3023 -> 2999;
3023 -> 3019;
3024 -> 3019;
3025 -> 3020;
3025 -> 3024;
3026 -> 3021;
3026 -> 3024;
3027 -> 3022;
3027 -> 3024;
3028 -> 3023;
3028 -> 3024;
3029 -> 3003;
3029 -> 3024;
3030 -> 3027;
3030 -> 3013;
3030 -> 3024;
3031 -> 3024;
3032 -> 3008;
3032 -> 3013;
3032 -> 0;
3032 -> 2981;
3033 -> 2362;
3034 -> 2362;
3035 -> 3013;
3036 -> 3013;
3037 -> 3035;
3037 -> 3036;
3038 -> 3037;
3038 -> 3013;
3038 -> 3036;
3039 -> 3038;
3040 -> 3039;
3040 -> 3013;
3041 -> 3040;
3041 -> 3013;
3042 -> 3041;
3042 -> 2362;
3043 -> 3008;
3043 -> 2362;
3044 -> 3008;
3045 -> 3042;
3045 -> 3044;
3046 -> 3008;
3046 -> 3044;
3047 -> 3045;
3047 -> 3042;
3047 -> 3044;
3048 -> 3045;
3048 -> 3046;
3048 -> 3044;
3049 -> 3044;
3050 -> 3049;
3050 -> 3046;
3050 -> 3044;
3051 -> 3044;
3052 -> 3051;
3052 -> 3046;
3052 -> 3044;
3053 -> 2342;
3054 -> 3008;
3054 -> 3053;
3055 -> 3054;
3055 -> 3048;
3055 -> 3042;
3055 -> 3053;
3056 -> 3055;
3056 -> 2342;
3057 -> 3056;
3058 -> 3057;
3058 -> 3056;
3059 -> 3058;
3060 -> 3008;
3060 -> 3059;
3061 -> 3060;
3061 -> 3048;
3061 -> 3059;
3062 -> 3061;
3062 -> 3058;
3063 -> 2347;
3063 -> 3058;
3064 -> 2343;
3064 -> 3058;
3065 -> 2344;
3065 -> 3058;
3066 -> 3058;
3067 -> 3062;
3067 -> 3066;
3068 -> 3062;
3068 -> 3066;
3069 -> 3062;
3069 -> 3066;
3070 -> 3062;
3070 -> 3066;
3071 -> 3062;
3071 -> 3066;
3072 -> 3067;
3072 -> 3066;
3073 -> 3068;
3073 -> 3066;
3074 -> 3069;
3074 -> 3066;
3075 -> 3070;
3075 -> 3066;
3076 -> 3066;
3077 -> 3072;
3077 -> 3076;
3078 -> 3073;
3078 -> 3076;
3079 -> 3074;
3079 -> 3076;
3080 -> 3075;
3080 -> 3076;
3081 -> 3071;
3081 -> 3076;
3082 -> 3078;
3082 -> 3062;
3082 -> 3076;
3083 -> 3077;
3083 -> 3082;
3084 -> 3078;
3084 -> 3082;
3085 -> 3079;
3085 -> 3082;
3086 -> 3080;
3086 -> 3082;
3087 -> 3082;
3088 -> 3081;
3088 -> 3087;
3089 -> 3088;
3089 -> 3062;
3089 -> 3087;
3090 -> 3089;
3090 -> 3082;
3091 -> 3082;
3092 -> 3081;
3092 -> 3091;
3093 -> 3091;
3094 -> 3092;
3094 -> 3093;
3095 -> 3094;
3095 -> 3062;
3095 -> 3093;
3096 -> 3095;
3096 -> 3091;
3097 -> 3096;
3097 -> 3091;
3098 -> 3096;
3098 -> 3062;
3098 -> 0;
3098 -> 3091;
3099 -> 3096;
3099 -> 3091;
3100 -> 3096;
3100 -> 3062;
3100 -> 3091;
3101 -> 3100;
3101 -> 3082;
3102 -> 3081;
3102 -> 3062;
3102 -> 3082;
3103 -> 3082;
3104 -> 3083;
3104 -> 3103;
3105 -> 3084;
3105 -> 3103;
3106 -> 3085;
3106 -> 3103;
3107 -> 3086;
3107 -> 3103;
3108 -> 3090;
3108 -> 3103;
3109 -> 3101;
3109 -> 3103;
3110 -> 3102;
3110 -> 3103;
3111 -> 3105;
3111 -> 3103;
3112 -> 3105;
3112 -> 3111;
3112 -> 0;
3112 -> 3103;
3113 -> 3105;
3113 -> 3111;
3113 -> 0;
3113 -> 3103;
3114 -> 3105;
3114 -> 3103;
3115 -> 3109;
3115 -> 3103;
3116 -> 3114;
3116 -> 3115;
3116 -> 3111;
3116 -> 3103;
3117 -> 3107;
3117 -> 3103;
3118 -> 3117;
3118 -> 3103;
3119 -> 3104;
3119 -> 3103;
3120 -> 3116;
3120 -> 3103;
3121 -> 3106;
3121 -> 3103;
3122 -> 3108;
3122 -> 3103;
3123 -> 3110;
3123 -> 3103;
3124 -> 3103;
3125 -> 3119;
3125 -> 3124;
3126 -> 3120;
3126 -> 3124;
3127 -> 3121;
3127 -> 3124;
3128 -> 3122;
3128 -> 3124;
3129 -> 3123;
3129 -> 3124;
3130 -> 3124;
3131 -> 3125;
3131 -> 3130;
3131 -> 3124;
3132 -> 3126;
3132 -> 3124;
3133 -> 3128;
3133 -> 3124;
3134 -> 3124;
3135 -> 3132;
3135 -> 3133;
3135 -> 3134;
3135 -> 3116;
3135 -> 3124;
3136 -> 3124;
3137 -> 3135;
3137 -> 3124;
3138 -> 3124;
3139 -> 3136;
3139 -> 3138;
3139 -> 3124;
3140 -> 3135;
3140 -> 3124;
3141 -> 3140;
3141 -> 3103;
3142 -> 3117;
3142 -> 3141;
3143 -> 3082;
3144 -> 3066;
3145 -> 3008;
3145 -> 3056;
3146 -> 3145;
3146 -> 577;
3147 -> 2334;
3147 -> 577;
3148 -> 2333;
3148 -> 577;
3149 -> 2335;
3149 -> 577;
3150 -> 577;
3151 -> 3146;
3151 -> 3150;
3152 -> 3147;
3152 -> 3150;
3153 -> 3148;
3153 -> 3150;
3154 -> 3149;
3154 -> 3150;
3155 -> 2337;
3155 -> 3150;
3156 -> 3150;
3157 -> 3151;
3157 -> 3156;
3158 -> 3157;
3158 -> 3050;
3158 -> 3156;
3159 -> 3158;
3159 -> 0;
3159 -> 3156;
3160 -> 3159;
3160 -> 3150;
3161 -> 577;
3162 -> 3151;
3162 -> 3161;
3163 -> 3162;
3163 -> 3048;
3163 -> 3161;
3164 -> 603;
3164 -> 3163;
3164 -> 3135;
3164 -> 3042;
3164 -> 574;
3165 -> 603;
3165 -> 577;
3166 -> 603;
3166 -> 577;
3167 -> 603;
3167 -> 577;
3168 -> 603;
3168 -> 577;
3169 -> 603;
3169 -> 577;
3170 -> 577;
3171 -> 3165;
3171 -> 3164;
3171 -> 577;
3172 -> 577;
3173 -> 3166;
3173 -> 3164;
3173 -> 577;
3174 -> 3173;
3175 -> 3166;
3175 -> 3173;
3176 -> 3175;
3176 -> 3164;
3177 -> 3176;
3177 -> 3175;
3178 -> 3175;
3179 -> 3170;
3179 -> 3178;
3179 -> 3175;
3180 -> 3176;
3180 -> 3175;
3181 -> 3174;
3181 -> 3180;
3181 -> 3175;
3182 -> 3167;
3182 -> 3181;
3183 -> 3175;
3183 -> 3182;
3184 -> 3168;
3184 -> 3182;
3185 -> 3182;
3186 -> 3183;
3186 -> 3185;
3187 -> 3184;
3187 -> 3185;
3188 -> 3169;
3188 -> 3185;
3189 -> 3186;
3189 -> 3185;
3190 -> 3185;
3191 -> 3189;
3191 -> 3190;
3192 -> 3191;
3192 -> 3164;
3192 -> 3190;
3193 -> 3190;
3194 -> 3192;
3194 -> 3164;
3194 -> 3193;
3194 -> 3190;
3195 -> 3194;
3195 -> 3190;
3196 -> 3186;
3196 -> 3185;
3197 -> 3195;
3197 -> 3185;
3198 -> 3186;
3198 -> 3164;
3198 -> 3195;
3198 -> 3185;
3199 -> 3187;
3199 -> 3185;
3200 -> 3185;
3201 -> 3196;
3201 -> 3200;
3202 -> 3197;
3202 -> 3200;
3203 -> 3198;
3203 -> 3200;
3204 -> 3199;
3204 -> 3200;
3205 -> 3188;
3205 -> 3200;
3206 -> 3203;
3206 -> 3200;
3207 -> 3205;
3207 -> 3195;
3207 -> 3200;
3208 -> 0;
3208 -> 3200;
3209 -> 3205;
3209 -> 3200;
3210 -> 3200;
3211 -> 3209;
3212 -> 3209;
3213 -> 3212;
3213 -> 3209;
3214 -> 3209;
3215 -> 3209;
3216 -> 3209;
3216 -> 3215;
3217 -> 3215;
3218 -> 3217;
3218 -> 3209;
3219 -> 3207;
3219 -> 3218;
3219 -> 3209;
3220 -> 3209;
3221 -> 3209;
3221 -> 3220;
3222 -> 3220;
3223 -> 3221;
3223 -> 3222;
3224 -> 3223;
3224 -> 3207;
3224 -> 3222;
3225 -> 3224;
3225 -> 3220;
3226 -> 3225;
3226 -> 3207;
3226 -> 3220;
3227 -> 3225;
3227 -> 3207;
3227 -> 0;
3227 -> 3226;
3228 -> 3226;
3229 -> 3228;
3229 -> 3207;
3230 -> 3229;
3230 -> 3226;
3231 -> 3230;
3231 -> 3209;
3232 -> 3231;
3233 -> 3232;
3233 -> 3185;
3234 -> 3170;
3234 -> 577;
3235 -> 3174;
3235 -> 3181;
3235 -> 577;
3236 -> 2357;
3236 -> 3229;
3237 -> 2358;
3237 -> 3229;
3238 -> 3229;
3239 -> 3236;
3239 -> 3238;
3240 -> 3237;
3240 -> 3238;
3241 -> 2361;
3241 -> 3238;
3242 -> 3239;
3242 -> 3238;
3243 -> 3242;
3243 -> 3238;
3244 -> 3240;
3244 -> 3238;
3245 -> 3238;
3246 -> 3243;
3246 -> 3245;
3247 -> 3244;
3247 -> 3245;
3248 -> 3241;
3248 -> 3245;
3249 -> 3246;
3249 -> 3229;
3249 -> 3245;
3250 -> 3247;
3250 -> 3245;
3251 -> 3246;
3251 -> 3245;
3252 -> 3245;
3253 -> 3249;
3253 -> 3252;
3254 -> 3250;
3254 -> 3252;
3255 -> 3251;
3255 -> 3252;
3256 -> 3248;
3256 -> 3252;
3257 -> 3256;
3257 -> 3249;
3257 -> 3252;
3258 -> 3253;
3258 -> 3252;
3259 -> 3255;
3259 -> 3252;
3260 -> 3254;
3260 -> 3252;
3261 -> 3252;
3262 -> 3257;
3262 -> 3261;
3263 -> 3258;
3263 -> 3261;
3264 -> 3259;
3264 -> 3261;
3265 -> 3260;
3265 -> 3261;
3266 -> 3263;
3266 -> 3261;
3267 -> 3262;
3267 -> 3266;
3267 -> 3249;
3267 -> 3261;
3268 -> 3261;
3269 -> 3267;
3269 -> 3268;
3269 -> 3261;
3270 -> 3267;
3270 -> 3261;
3271 -> 3265;
3271 -> 3261;
3272 -> 3264;
3272 -> 3261;
3273 -> 3261;
3274 -> 3270;
3274 -> 3273;
3275 -> 3271;
3275 -> 3273;
3276 -> 3272;
3276 -> 3273;
3277 -> 3273;
3278 -> 3274;
3278 -> 3277;
3278 -> 3273;
3279 -> 3267;
3279 -> 3261;
3280 -> 3242;
3280 -> 3274;
3280 -> 3238;
3281 -> 3238;
3282 -> 3280;
3282 -> 3281;
3283 -> 3241;
3283 -> 3281;
3284 -> 3279;
3284 -> 3238;
3285 -> 3238;
3286 -> 3284;
3286 -> 3285;
3287 -> 3286;
3287 -> 3285;
3288 -> 3285;
3289 -> 3285;
3290 -> 3287;
3290 -> 3289;
3291 -> 3288;
3291 -> 3289;
3292 -> 3290;
3292 -> 3289;
3293 -> 3289;
3294 -> 3293;
3294 -> 3291;
3294 -> 3289;
3295 -> 3289;
3296 -> 3295;
3296 -> 3291;
3296 -> 3289;
3297 -> 3288;
3297 -> 3238;
3298 -> 3238;
3299 -> 3282;
3299 -> 3297;
3299 -> 3298;
3299 -> 3290;
3299 -> 3294;
3299 -> 3296;
3299 -> 3238;
3300 -> 3299;
3301 -> 3299;
3302 -> 3299;
3303 -> 3300;
3303 -> 3299;
3304 -> 3301;
3304 -> 3299;
3305 -> 3302;
3305 -> 3299;
3306 -> 3304;
3306 -> 3300;
3307 -> 3305;
3307 -> 3300;
3308 -> 3300;
3309 -> 3300;
3309 -> 3299;
3309 -> 0;
3310 -> 3300;
3311 -> 3303;
3311 -> 3300;
3312 -> 3306;
3312 -> 3300;
3313 -> 3307;
3313 -> 3300;
3314 -> 3303;
3314 -> 3300;
3315 -> 3300;
3315 -> 0;
3316 -> 3300;
3316 -> 0;
3317 -> 3313;
3317 -> 3300;
3318 -> 3317;
3318 -> 3300;
3319 -> 3311;
3319 -> 3300;
3320 -> 3312;
3320 -> 3300;
3321 -> 3314;
3321 -> 3300;
3322 -> 3300;
3323 -> 3319;
3323 -> 3322;
3323 -> 3300;
3324 -> 3300;
3325 -> 3300;
3326 -> 3300;
3327 -> 3324;
3327 -> 3326;
3327 -> 3300;
3328 -> 3300;
3329 -> 3328;
3329 -> 3300;
3330 -> 3317;
3330 -> 3329;
3331 -> 3299;
3331 -> 3156;
3332 -> 3331;
3332 -> 3299;
3332 -> 3156;
3333 -> 3332;
3333 -> 0;
3333 -> 3156;
3334 -> 3333;
3334 -> 3150;
3335 -> 3300;
3335 -> 2057;
3335 -> 2051;
3336 -> 3300;
3336 -> 2246;
3337 -> 3300;
3338 -> 3300;
3339 -> 3300;
3339 -> 2170;
3340 -> 3300;
3340 -> 0;
3341 -> 3300;
3341 -> 2305;
3342 -> 3341;
3342 -> 2318;
3343 -> 3300;
3343 -> 2305;
3344 -> 3343;
3344 -> 2323;
3345 -> 3165;
3345 -> 3300;
3345 -> 577;
3346 -> 3172;
3346 -> 577;
3347 -> 3300;
3348 -> 3347;
3348 -> 3300;
3349 -> 3347;
3349 -> 3300;
3350 -> 3349;
3350 -> 3300;
3351 -> 3348;
3351 -> 3300;
3352 -> 3300;
3353 -> 3351;
3353 -> 3300;
3354 -> 3350;
3354 -> 3300;
3355 -> 3300;
3356 -> 3347;
3356 -> 3300;
3357 -> 3347;
3358 -> 3347;
3359 -> 3347;
3360 -> 3357;
3360 -> 3347;
3361 -> 3358;
3361 -> 3347;
3362 -> 3347;
3363 -> 3347;
3363 -> 0;
3364 -> 3347;
3365 -> 3359;
3365 -> 3347;
3366 -> 3360;
3366 -> 3347;
3367 -> 3361;
3367 -> 3347;
3368 -> 3359;
3368 -> 3347;
3369 -> 3359;
3369 -> 0;
3369 -> 3347;
3370 -> 3359;
3370 -> 0;
3370 -> 3347;
3371 -> 3367;
3371 -> 3347;
3372 -> 3371;
3372 -> 3347;
3373 -> 3365;
3373 -> 3347;
3374 -> 3366;
3374 -> 3347;
3375 -> 3368;
3375 -> 3347;
3376 -> 3347;
3377 -> 3373;
3377 -> 3376;
3377 -> 3347;
3378 -> 3347;
3379 -> 3365;
3379 -> 3347;
3380 -> 3347;
3381 -> 3378;
3381 -> 3380;
3381 -> 3347;
3382 -> 3365;
3382 -> 3347;
3383 -> 3382;
3383 -> 3347;
3384 -> 3371;
3384 -> 3383;
3385 -> 3347;
3385 -> 3156;
3386 -> 3385;
3386 -> 3347;
3386 -> 3156;
3387 -> 3386;
3387 -> 0;
3387 -> 3156;
3388 -> 3387;
3388 -> 3150;
3389 -> 3365;
3389 -> 2057;
3389 -> 2051;
3390 -> 3365;
3390 -> 2246;
3391 -> 3365;
3392 -> 3365;
3393 -> 3365;
3393 -> 2170;
3394 -> 3365;
3394 -> 0;
3395 -> 3365;
3395 -> 2305;
3396 -> 3395;
3396 -> 2318;
3397 -> 3365;
3397 -> 2305;
3398 -> 3397;
3398 -> 2323;
3399 -> 3365;
3400 -> 3365;
3401 -> 3400;
3401 -> 3365;
3402 -> 3399;
3402 -> 3365;
3403 -> 3365;
3404 -> 3402;
3404 -> 3365;
3405 -> 3401;
3405 -> 3365;
3406 -> 3365;
3407 -> 3400;
3407 -> 3365;
3408 -> 3400;
3409 -> 3400;
3410 -> 3408;
3410 -> 3400;
3411 -> 3409;
3411 -> 3400;
3412 -> 3400;
3413 -> 3400;
3413 -> 0;
3414 -> 3400;
3415 -> 3410;
3415 -> 3400;
3416 -> 3411;
3416 -> 3400;
3417 -> 3400;
3418 -> 3400;
3418 -> 0;
3419 -> 3400;
3419 -> 0;
3420 -> 3416;
3420 -> 3400;
3421 -> 3420;
3421 -> 3400;
3422 -> 3400;
3423 -> 3415;
3423 -> 3400;
3424 -> 3417;
3424 -> 3400;
3425 -> 3400;
3426 -> 3422;
3426 -> 3425;
3426 -> 3400;
3427 -> 3400;
3428 -> 3400;
3429 -> 3400;
3430 -> 3427;
3430 -> 3429;
3430 -> 3400;
3431 -> 3400;
3432 -> 3431;
3432 -> 3400;
3433 -> 3420;
3433 -> 3432;
3434 -> 3400;
3434 -> 3156;
3435 -> 3434;
3435 -> 3400;
3435 -> 3156;
3436 -> 3435;
3436 -> 0;
3436 -> 3156;
3437 -> 3436;
3437 -> 3150;
3438 -> 3165;
3438 -> 3400;
3438 -> 577;
3439 -> 3400;
3440 -> 3400;
3441 -> 3170;
3441 -> 3440;
3441 -> 3400;
3442 -> 3168;
3442 -> 3400;
3443 -> 3442;
3443 -> 3400;
3444 -> 3400;
3445 -> 3443;
3445 -> 3400;
3446 -> 3444;
3446 -> 3400;
3447 -> 3444;
3447 -> 3400;
3448 -> 3444;
3448 -> 3400;
3449 -> 3445;
3449 -> 3400;
3450 -> 3448;
3450 -> 3400;
3451 -> 3400;
3452 -> 3400;
3453 -> 3452;
3453 -> 3400;
3454 -> 3400;
3455 -> 3400;
3456 -> 3400;
3456 -> 3455;
3457 -> 3455;
3458 -> 3457;
3458 -> 3400;
3459 -> 3400;
3459 -> 0;
3460 -> 3400;
3461 -> 3459;
3461 -> 3400;
3462 -> 3461;
3463 -> 3462;
3463 -> 3400;
3464 -> 3400;
3464 -> 577;
3465 -> 3400;
3466 -> 3400;
3467 -> 3465;
3467 -> 3400;
3468 -> 3400;
3469 -> 3467;
3469 -> 3400;
3470 -> 3466;
3470 -> 3400;
3471 -> 3400;
3472 -> 3465;
3472 -> 3400;
3473 -> 3465;
3474 -> 3465;
3475 -> 3473;
3475 -> 3465;
3476 -> 3474;
3476 -> 3465;
3477 -> 3465;
3478 -> 3465;
3478 -> 0;
3479 -> 3465;
3480 -> 3475;
3480 -> 3465;
3481 -> 3476;
3481 -> 3465;
3482 -> 3465;
3483 -> 3465;
3483 -> 0;
3484 -> 3465;
3484 -> 0;
3485 -> 3481;
3485 -> 3465;
3486 -> 3485;
3486 -> 3465;
3487 -> 3465;
3488 -> 3480;
3488 -> 3465;
3489 -> 3482;
3489 -> 3465;
3490 -> 3465;
3491 -> 3487;
3491 -> 3490;
3491 -> 3465;
3492 -> 3465;
3493 -> 3465;
3494 -> 3465;
3495 -> 3492;
3495 -> 3494;
3495 -> 3465;
3496 -> 3465;
3497 -> 3496;
3497 -> 3465;
3498 -> 3485;
3498 -> 3497;
3499 -> 3465;
3499 -> 3156;
3500 -> 3499;
3500 -> 3465;
3500 -> 3156;
3501 -> 3500;
3501 -> 0;
3501 -> 3156;
3502 -> 3501;
3502 -> 3150;
3503 -> 3465;
3503 -> 2057;
3503 -> 2051;
3504 -> 3465;
3504 -> 2246;
3505 -> 3465;
3506 -> 3465;
3507 -> 3465;
3507 -> 2170;
3508 -> 3465;
3508 -> 0;
3509 -> 3465;
3509 -> 2305;
3510 -> 3509;
3510 -> 2318;
3511 -> 3465;
3511 -> 2305;
3512 -> 3511;
3512 -> 2323;
3513 -> 3465;
3514 -> 3465;
3515 -> 3465;
3516 -> 3514;
3516 -> 3465;
3517 -> 3513;
3517 -> 3465;
3518 -> 3465;
3519 -> 3465;
3520 -> 3476;
3520 -> 3473;
3521 -> 3473;
3522 -> 3473;
3522 -> 3465;
3522 -> 0;
3523 -> 3473;
3524 -> 3475;
3524 -> 3473;
3525 -> 3520;
3525 -> 3473;
3526 -> 3475;
3526 -> 3473;
3527 -> 3473;
3527 -> 0;
3528 -> 3473;
3528 -> 0;
3529 -> 3525;
3529 -> 3473;
3530 -> 3529;
3530 -> 3473;
3531 -> 3473;
3532 -> 3524;
3532 -> 3473;
3533 -> 3526;
3533 -> 3473;
3534 -> 3473;
3535 -> 3531;
3535 -> 3534;
3535 -> 3473;
3536 -> 3473;
3537 -> 3473;
3538 -> 3473;
3539 -> 3536;
3539 -> 3538;
3539 -> 3473;
3540 -> 3473;
3541 -> 3540;
3541 -> 3473;
3542 -> 3529;
3542 -> 3541;
3543 -> 3165;
3543 -> 3473;
3543 -> 577;
3544 -> 3473;
3545 -> 3473;
3546 -> 3170;
3546 -> 3545;
3546 -> 3473;
3547 -> 3168;
3547 -> 3473;
3548 -> 3547;
3548 -> 3473;
3549 -> 3473;
3550 -> 3548;
3550 -> 3473;
3551 -> 3549;
3551 -> 3473;
3552 -> 3549;
3552 -> 3473;
3553 -> 3549;
3553 -> 3473;
3554 -> 3550;
3554 -> 3473;
3555 -> 3553;
3555 -> 3473;
3556 -> 3473;
3557 -> 3473;
3558 -> 3557;
3558 -> 3473;
3559 -> 3473;
3560 -> 3473;
3561 -> 3473;
3561 -> 3560;
3562 -> 3560;
3563 -> 3562;
3563 -> 3473;
3564 -> 3473;
3564 -> 0;
3565 -> 3473;
3566 -> 3564;
3566 -> 3473;
3567 -> 3566;
3568 -> 3567;
3568 -> 3473;
3569 -> 3473;
3569 -> 577;
3570 -> 3473;
3571 -> 3473;
3572 -> 3473;
3573 -> 3571;
3573 -> 3473;
3574 -> 3570;
3574 -> 3473;
3575 -> 3473;
3576 -> 3473;
3577 -> 3473;
3578 -> 3473;
3579 -> 3577;
3579 -> 3473;
3580 -> 3473;
3580 -> 0;
3581 -> 3578;
3581 -> 3473;
3582 -> 3579;
3582 -> 3473;
3583 -> 3578;
3583 -> 3473;
3584 -> 3582;
3584 -> 3473;
3585 -> 3584;
3585 -> 3473;
3586 -> 3540;
3586 -> 3473;
3587 -> 3581;
3587 -> 3473;
3588 -> 3583;
3588 -> 3473;
3589 -> 3586;
3589 -> 3534;
3589 -> 3473;
3590 -> 3578;
3590 -> 3473;
3591 -> 3578;
3591 -> 3473;
3592 -> 3591;
3592 -> 3473;
3593 -> 3584;
3593 -> 3592;
3594 -> 3473;
3594 -> 3156;
3595 -> 3594;
3595 -> 3473;
3595 -> 3156;
3596 -> 3595;
3596 -> 0;
3596 -> 3156;
3597 -> 3596;
3597 -> 3150;
3598 -> 3578;
3598 -> 2057;
3598 -> 2051;
3599 -> 3578;
3599 -> 2246;
3600 -> 3578;
3601 -> 3578;
3602 -> 3578;
3602 -> 2170;
3603 -> 3578;
3603 -> 0;
3604 -> 3578;
3604 -> 2305;
3605 -> 3604;
3605 -> 2318;
3606 -> 3578;
3606 -> 2305;
3607 -> 3606;
3607 -> 2323;
3608 -> 3578;
3609 -> 3578;
3610 -> 3578;
3611 -> 3609;
3611 -> 3578;
3612 -> 3608;
3612 -> 3578;
3613 -> 3578;
3614 -> 3578;
3615 -> 3578;
3616 -> 3615;
3616 -> 3578;
3617 -> 3578;
3618 -> 3578;
3618 -> 0;
3619 -> 3578;
3620 -> 3578;
3621 -> 3616;
3621 -> 3578;
3622 -> 3578;
3623 -> 3578;
3623 -> 0;
3624 -> 3578;
3624 -> 0;
3625 -> 3621;
3625 -> 3578;
3626 -> 3625;
3626 -> 3578;
3627 -> 3578;
3628 -> 3620;
3628 -> 3578;
3629 -> 3622;
3629 -> 3578;
3630 -> 3578;
3631 -> 3627;
3631 -> 3630;
3631 -> 3578;
3632 -> 3578;
3633 -> 3620;
3633 -> 3578;
3634 -> 3578;
3635 -> 3632;
3635 -> 3634;
3635 -> 3578;
3636 -> 3620;
3636 -> 3578;
3637 -> 3636;
3637 -> 3578;
3638 -> 3625;
3638 -> 3637;
3639 -> 3578;
3639 -> 3156;
3640 -> 3639;
3640 -> 3578;
3640 -> 3156;
3641 -> 3640;
3641 -> 0;
3641 -> 3156;
3642 -> 3641;
3642 -> 3150;
3643 -> 3620;
3644 -> 3620;
3645 -> 3620;
3646 -> 3644;
3646 -> 3620;
3647 -> 3643;
3647 -> 3620;
3648 -> 3620;
3649 -> 3620;
3650 -> 3620;
3651 -> 3650;
3651 -> 3620;
3652 -> 3620;
3653 -> 3620;
3653 -> 0;
3654 -> 3620;
3655 -> 3651;
3655 -> 3620;
3656 -> 3620;
3657 -> 3620;
3657 -> 0;
3658 -> 3620;
3658 -> 0;
3659 -> 3655;
3659 -> 3620;
3660 -> 3659;
3660 -> 3620;
3661 -> 3620;
3662 -> 3620;
3663 -> 3656;
3663 -> 3620;
3664 -> 3620;
3665 -> 3661;
3665 -> 3664;
3665 -> 3620;
3666 -> 3620;
3667 -> 3620;
3668 -> 3620;
3669 -> 3666;
3669 -> 3668;
3669 -> 3620;
3670 -> 3620;
3671 -> 3670;
3671 -> 3620;
3672 -> 3659;
3672 -> 3671;
3673 -> 3620;
3673 -> 3156;
3674 -> 3673;
3674 -> 3620;
3674 -> 3156;
3675 -> 3674;
3675 -> 0;
3675 -> 3156;
3676 -> 3675;
3676 -> 3150;
3677 -> 3165;
3677 -> 3620;
3677 -> 577;
3678 -> 3620;
3679 -> 3620;
3680 -> 3170;
3680 -> 3679;
3680 -> 3620;
3681 -> 3168;
3681 -> 3620;
3682 -> 3681;
3682 -> 3620;
3683 -> 3620;
3684 -> 3682;
3684 -> 3620;
3685 -> 3683;
3685 -> 3620;
3686 -> 3683;
3686 -> 3620;
3687 -> 3683;
3687 -> 3620;
3688 -> 3684;
3688 -> 3620;
3689 -> 3687;
3689 -> 3620;
3690 -> 3620;
3691 -> 3620;
3692 -> 3691;
3692 -> 3620;
3693 -> 3620;
3694 -> 3620;
3695 -> 3620;
3695 -> 3694;
3696 -> 3694;
3697 -> 3696;
3697 -> 3620;
3698 -> 3620;
3698 -> 0;
3699 -> 3620;
3700 -> 3698;
3700 -> 3620;
3701 -> 3700;
3702 -> 3701;
3702 -> 3620;
3703 -> 3620;
3703 -> 577;
3704 -> 3644;
3704 -> 3648;
3704 -> 3620;
3705 -> 3644;
3705 -> 3620;
3706 -> 3644;
3707 -> 3706;
3707 -> 3644;
3708 -> 3644;
3709 -> 3644;
3709 -> 0;
3710 -> 3644;
3711 -> 3707;
3711 -> 3644;
3712 -> 3644;
3713 -> 3644;
3713 -> 0;
3714 -> 3644;
3714 -> 0;
3715 -> 3711;
3715 -> 3644;
3716 -> 3715;
3716 -> 3644;
3717 -> 3644;
3718 -> 3644;
3719 -> 3712;
3719 -> 3644;
3720 -> 3644;
3721 -> 3717;
3721 -> 3720;
3721 -> 3644;
3722 -> 3644;
3723 -> 3644;
3724 -> 3644;
3725 -> 3722;
3725 -> 3724;
3725 -> 3644;
3726 -> 3644;
3727 -> 3726;
3727 -> 3644;
3728 -> 3715;
3728 -> 3727;
3729 -> 3644;
3729 -> 3156;
3730 -> 3729;
3730 -> 3644;
3730 -> 3156;
3731 -> 3730;
3731 -> 0;
3731 -> 3156;
3732 -> 3731;
3732 -> 3150;
3733 -> 3644;
3733 -> 2057;
3733 -> 2051;
3734 -> 3644;
3734 -> 2246;
3735 -> 3644;
3736 -> 3644;
3737 -> 3644;
3737 -> 2170;
3738 -> 3644;
3738 -> 0;
3739 -> 3644;
3739 -> 2305;
3740 -> 3739;
3740 -> 2318;
3741 -> 3644;
3741 -> 2305;
3742 -> 3741;
3742 -> 2323;
3743 -> 2357;
3743 -> 3644;
3744 -> 2358;
3744 -> 3644;
3745 -> 2359;
3745 -> 3644;
3746 -> 3644;
3747 -> 3644;
3748 -> 3743;
3748 -> 3747;
3749 -> 3744;
3749 -> 3747;
3750 -> 3745;
3750 -> 3747;
3751 -> 3746;
3751 -> 3747;
3752 -> 2361;
3752 -> 3747;
3753 -> 3748;
3753 -> 3644;
3753 -> 3747;
3754 -> 3748;
3754 -> 3644;
3754 -> 3747;
3755 -> 3748;
3755 -> 3644;
3755 -> 3747;
3756 -> 3748;
3756 -> 3747;
3757 -> 3747;
3758 -> 3747;
3759 -> 3756;
3759 -> 3758;
3760 -> 3757;
3760 -> 3758;
3761 -> 3749;
3761 -> 3747;
3762 -> 3750;
3762 -> 3747;
3763 -> 3751;
3763 -> 3747;
3764 -> 3748;
3764 -> 3747;
3765 -> 3753;
3765 -> 3747;
3766 -> 3748;
3766 -> 3759;
3766 -> 3747;
3767 -> 3759;
3767 -> 3747;
3768 -> 3747;
3769 -> 3761;
3769 -> 3768;
3770 -> 3762;
3770 -> 3768;
3771 -> 3763;
3771 -> 3768;
3772 -> 3764;
3772 -> 3768;
3773 -> 3765;
3773 -> 3768;
3774 -> 3766;
3774 -> 3768;
3775 -> 3767;
3775 -> 3768;
3776 -> 3752;
3776 -> 3768;
3777 -> 3772;
3777 -> 3759;
3777 -> 3768;
3778 -> 3771;
3778 -> 3768;
3779 -> 3773;
3779 -> 3768;
3780 -> 3774;
3780 -> 3768;
3781 -> 3769;
3781 -> 3768;
3782 -> 3768;
3783 -> 3777;
3783 -> 3782;
3784 -> 3778;
3784 -> 3782;
3785 -> 3779;
3785 -> 3782;
3786 -> 3780;
3786 -> 3782;
3787 -> 3781;
3787 -> 3782;
3788 -> 3776;
3788 -> 3782;
3789 -> 3782;
3790 -> 3784;
3790 -> 3789;
3790 -> 3782;
3791 -> 3782;
3792 -> 3791;
3792 -> 3768;
3793 -> 3768;
3794 -> 3792;
3794 -> 3793;
3794 -> 3768;
3795 -> 3768;
3796 -> 1120;
3796 -> 3759;
3796 -> 3795;
3797 -> 3795;
3798 -> 3796;
3798 -> 3797;
3799 -> 3798;
3799 -> 3796;
3799 -> 0;
3799 -> 3797;
3800 -> 3797;
3801 -> 3798;
3801 -> 3796;
3801 -> 3800;
3801 -> 3797;
3802 -> 3799;
3802 -> 3795;
3803 -> 3796;
3803 -> 3768;
3804 -> 3768;
3805 -> 3803;
3805 -> 3768;
3806 -> 3771;
3806 -> 3768;
3807 -> 3773;
3807 -> 3768;
3808 -> 3774;
3808 -> 3768;
3809 -> 3770;
3809 -> 3768;
3810 -> 3775;
3810 -> 3768;
3811 -> 3768;
3812 -> 3804;
3812 -> 3768;
3813 -> 3768;
3814 -> 3805;
3814 -> 3813;
3815 -> 3806;
3815 -> 3813;
3816 -> 3807;
3816 -> 3813;
3817 -> 3808;
3817 -> 3813;
3818 -> 3809;
3818 -> 3813;
3819 -> 3810;
3819 -> 3813;
3820 -> 3811;
3820 -> 3813;
3821 -> 3812;
3821 -> 3813;
3822 -> 3776;
3822 -> 3813;
3823 -> 3814;
3823 -> 3819;
3824 -> 3815;
3824 -> 3819;
3825 -> 3816;
3825 -> 3819;
3826 -> 3817;
3826 -> 3819;
3827 -> 3818;
3827 -> 3819;
3828 -> 3820;
3828 -> 3819;
3829 -> 3821;
3829 -> 3819;
3830 -> 3828;
3830 -> 3819;
3831 -> 3822;
3831 -> 3819;
3832 -> 3823;
3832 -> 3824;
3833 -> 3825;
3833 -> 3824;
3834 -> 3826;
3834 -> 3824;
3835 -> 3827;
3835 -> 3824;
3836 -> 3830;
3836 -> 3824;
3837 -> 3829;
3837 -> 3824;
3838 -> 3834;
3838 -> 3824;
3839 -> 3836;
3839 -> 3824;
3840 -> 3831;
3840 -> 3824;
3841 -> 3824;
3842 -> 3832;
3842 -> 3841;
3843 -> 3842;
3843 -> 3796;
3843 -> 0;
3843 -> 3841;
3844 -> 3841;
3845 -> 3842;
3845 -> 3796;
3845 -> 3844;
3845 -> 3841;
3846 -> 3843;
3846 -> 3824;
3847 -> 3824;
3848 -> 3824;
3849 -> 3847;
3849 -> 3848;
3850 -> 3849;
3850 -> 0;
3850 -> 3848;
3851 -> 3849;
3851 -> 0;
3851 -> 3848;
3852 -> 3848;
3853 -> 0;
3853 -> 3848;
3854 -> 3849;
3854 -> 3853;
3854 -> 3848;
3855 -> 0;
3855 -> 3848;
3856 -> 3849;
3856 -> 3855;
3856 -> 3848;
3857 -> 3848;
3858 -> 0;
3858 -> 3848;
3859 -> 3849;
3859 -> 3858;
3859 -> 3848;
3860 -> 3859;
3860 -> 3848;
3861 -> 3848;
3862 -> 3860;
3862 -> 3861;
3863 -> 3861;
3864 -> 3862;
3864 -> 3863;
3864 -> 3861;
3865 -> 3840;
3865 -> 3832;
3865 -> 3824;
3866 -> 3833;
3866 -> 3865;
3867 -> 3838;
3867 -> 3865;
3868 -> 3835;
3868 -> 3865;
3869 -> 3839;
3869 -> 3865;
3870 -> 3837;
3870 -> 3865;
3871 -> 3865;
3872 -> 3866;
3872 -> 3865;
3873 -> 3867;
3873 -> 3865;
3874 -> 3868;
3874 -> 3865;
3875 -> 3865;
3876 -> 3865;
3877 -> 3869;
3877 -> 3865;
3878 -> 3840;
3878 -> 3865;
3879 -> 3865;
3880 -> 3832;
3880 -> 3879;
3881 -> 3880;
3881 -> 3796;
3881 -> 0;
3881 -> 3879;
3882 -> 3879;
3883 -> 3880;
3883 -> 3796;
3883 -> 3882;
3883 -> 3879;
3884 -> 3881;
3884 -> 3865;
3885 -> 3824;
3885 -> 0;
3885 -> 3865;
3886 -> 3865;
3887 -> 3867;
3887 -> 3865;
3888 -> 3869;
3888 -> 3865;
3889 -> 3865;
3890 -> 3865;
3890 -> 3889;
3891 -> 3890;
3891 -> 3796;
3891 -> 0;
3891 -> 3889;
3892 -> 3889;
3893 -> 3890;
3893 -> 3796;
3893 -> 3892;
3893 -> 3889;
3894 -> 3891;
3894 -> 3865;
3895 -> 3865;
3896 -> 3865;
3896 -> 3895;
3897 -> 3896;
3897 -> 3796;
3897 -> 0;
3897 -> 3895;
3898 -> 3897;
3898 -> 3865;
3899 -> 3865;
3900 -> 3887;
3900 -> 3865;
3901 -> 3888;
3901 -> 3865;
3902 -> 3865;
3903 -> 3865;
3904 -> 3902;
3904 -> 3903;
3905 -> 3904;
3905 -> 0;
3905 -> 3903;
3906 -> 3904;
3906 -> 0;
3906 -> 3903;
3907 -> 3903;
3908 -> 0;
3908 -> 3903;
3909 -> 3904;
3909 -> 3908;
3909 -> 3903;
3910 -> 0;
3910 -> 3903;
3911 -> 3904;
3911 -> 3910;
3911 -> 3903;
3912 -> 3903;
3913 -> 0;
3913 -> 3903;
3914 -> 3904;
3914 -> 3913;
3914 -> 3903;
3915 -> 3914;
3915 -> 3903;
3916 -> 3903;
3917 -> 3915;
3917 -> 3916;
3918 -> 3916;
3919 -> 3917;
3919 -> 3918;
3919 -> 3916;
3920 -> 3865;
3921 -> 3900;
3921 -> 3920;
3921 -> 3865;
3922 -> 3900;
3922 -> 3865;
3923 -> 3865;
3924 -> 3901;
3924 -> 3865;
3925 -> 3922;
3925 -> 3865;
3926 -> 3923;
3926 -> 3865;
3927 -> 3924;
3927 -> 3865;
3928 -> 3925;
3928 -> 3865;
3929 -> 3926;
3929 -> 3865;
3930 -> 3865;
3931 -> 3927;
3931 -> 3865;
3932 -> 3865;
3933 -> 3865;
3934 -> 3865;
3934 -> 3933;
3935 -> 3934;
3935 -> 3865;
3935 -> 0;
3935 -> 3933;
3936 -> 3933;
3937 -> 3934;
3937 -> 3865;
3937 -> 3936;
3937 -> 3933;
3938 -> 3935;
3938 -> 3865;
3939 -> 3865;
3940 -> 3865;
3941 -> 3928;
3941 -> 3865;
3942 -> 3929;
3942 -> 3865;
3943 -> 3930;
3943 -> 3865;
3944 -> 3931;
3944 -> 3865;
3945 -> 3868;
3945 -> 3865;
3946 -> 3942;
3946 -> 3865;
3947 -> 3866;
3947 -> 3865;
3948 -> 3865;
3948 -> 3868;
3948 -> 3870;
3948 -> 3866;
3949 -> 3948;
3949 -> 3865;
3950 -> 3948;
3950 -> 3865;
3951 -> 3865;
3952 -> 3949;
3952 -> 3951;
3953 -> 3952;
3953 -> 3865;
3954 -> 3865;
3955 -> 3950;
3955 -> 3954;
3956 -> 3955;
3956 -> 3865;
3957 -> 3953;
3957 -> 3956;
3957 -> 3865;
3958 -> 3865;
3959 -> 3865;
3960 -> 3958;
3960 -> 3948;
3960 -> 3959;
3960 -> 3865;
3961 -> 3865;
3962 -> 3961;
3962 -> 3948;
3963 -> 3962;
3963 -> 3865;
3964 -> 3865;
3965 -> 3964;
3965 -> 3948;
3966 -> 3965;
3966 -> 3865;
3967 -> 3865;
3968 -> 3868;
3968 -> 3967;
3968 -> 3865;
3969 -> 3865;
3970 -> 3929;
3970 -> 3969;
3971 -> 3969;
3972 -> 3970;
3972 -> 3971;
3973 -> 3972;
3973 -> 3948;
3973 -> 3971;
3974 -> 3973;
3974 -> 3969;
3975 -> 3974;
3975 -> 3865;
3976 -> 3948;
3977 -> 3928;
3977 -> 3948;
3978 -> 3929;
3978 -> 3948;
3979 -> 3930;
3979 -> 3948;
3980 -> 3931;
3980 -> 3948;
3981 -> 3948;
3982 -> 3977;
3982 -> 3948;
3983 -> 3978;
3983 -> 3948;
3984 -> 3979;
3984 -> 3948;
3985 -> 3980;
3985 -> 3948;
3986 -> 3948;
3987 -> 3983;
3987 -> 3948;
3988 -> 3948;
3989 -> 3948;
3990 -> 3948;
3991 -> 3948;
3992 -> 3989;
3992 -> 3991;
3993 -> 3992;
3993 -> 3948;
3994 -> 3948;
3995 -> 3990;
3995 -> 3994;
3996 -> 3995;
3996 -> 3948;
3997 -> 3993;
3997 -> 3996;
3997 -> 3948;
3998 -> 3948;
3999 -> 3948;
4000 -> 3998;
4000 -> 3948;
4000 -> 3999;
4001 -> 3948;
4002 -> 4001;
4002 -> 3948;
4003 -> 3948;
4004 -> 4003;
4004 -> 3948;
4005 -> 3948;
4006 -> 3948;
4007 -> 3929;
4007 -> 4006;
4008 -> 4006;
4009 -> 4007;
4009 -> 4008;
4010 -> 4009;
4010 -> 4006;
4011 -> 4010;
4011 -> 3948;
4012 -> 3948;
4012 -> 3865;
4013 -> 3865;
4014 -> 3865;
4015 -> 3865;
4016 -> 3887;
4016 -> 3865;
4017 -> 3868;
4017 -> 3865;
4018 -> 3888;
4018 -> 3865;
4019 -> 4015;
4019 -> 3865;
4020 -> 4015;
4020 -> 3865;
4021 -> 4016;
4021 -> 3865;
4022 -> 4017;
4022 -> 3865;
4023 -> 4015;
4023 -> 3865;
4024 -> 4018;
4024 -> 3865;
4025 -> 3865;
4026 -> 4019;
4026 -> 4025;
4027 -> 4026;
4027 -> 3948;
4027 -> 4025;
4028 -> 0;
4028 -> 4025;
4029 -> 4025;
4030 -> 4027;
4030 -> 4029;
4031 -> 4028;
4031 -> 4029;
4032 -> 4030;
4032 -> 3865;
4033 -> 3865;
4033 -> 3948;
4034 -> 4015;
4034 -> 3962;
4035 -> 4016;
4035 -> 3962;
4036 -> 4017;
4036 -> 3962;
4037 -> 4018;
4037 -> 3962;
4038 -> 3962;
4039 -> 4034;
4039 -> 3962;
4040 -> 3962;
4041 -> 3962;
4042 -> 4035;
4042 -> 3962;
4043 -> 4036;
4043 -> 3962;
4044 -> 3962;
4045 -> 4037;
4045 -> 3962;
4046 -> 4039;
4046 -> 3948;
4046 -> 3962;
4047 -> 0;
4047 -> 3962;
4048 -> 3962;
4049 -> 4046;
4049 -> 4048;
4050 -> 4047;
4050 -> 4048;
4051 -> 3962;
4052 -> 4039;
4052 -> 4051;
4053 -> 4052;
4053 -> 3948;
4053 -> 4051;
4054 -> 0;
4054 -> 4051;
4055 -> 4051;
4056 -> 4053;
4056 -> 4055;
4057 -> 4054;
4057 -> 4055;
4058 -> 4056;
4058 -> 3962;
4059 -> 4038;
4059 -> 3962;
4060 -> 3880;
4060 -> 3948;
4060 -> 0;
4060 -> 3879;
4061 -> 3880;
4061 -> 3948;
4061 -> 3882;
4061 -> 3879;
4062 -> 4060;
4062 -> 3865;
4063 -> 3838;
4063 -> 3948;
4064 -> 3839;
4064 -> 3948;
4065 -> 4063;
4065 -> 3948;
4066 -> 4064;
4066 -> 3948;
4067 -> 3948;
4068 -> 3948;
4068 -> 4067;
4069 -> 4068;
4069 -> 3948;
4069 -> 0;
4069 -> 4067;
4070 -> 4067;
4071 -> 4068;
4071 -> 3948;
4071 -> 4070;
4071 -> 4067;
4072 -> 4069;
4072 -> 3948;
4073 -> 3948;
4074 -> 3948;
4074 -> 4073;
4075 -> 4074;
4075 -> 3948;
4075 -> 0;
4075 -> 4073;
4076 -> 4075;
4076 -> 3948;
4077 -> 3948;
4078 -> 4065;
4078 -> 3948;
4079 -> 4066;
4079 -> 3948;
4080 -> 3948;
4081 -> 3948;
4082 -> 4080;
4082 -> 4081;
4083 -> 4082;
4083 -> 0;
4083 -> 4081;
4084 -> 4082;
4084 -> 0;
4084 -> 4081;
4085 -> 4081;
4086 -> 0;
4086 -> 4081;
4087 -> 4082;
4087 -> 4086;
4087 -> 4081;
4088 -> 0;
4088 -> 4081;
4089 -> 4082;
4089 -> 4088;
4089 -> 4081;
4090 -> 4081;
4091 -> 0;
4091 -> 4081;
4092 -> 4082;
4092 -> 4091;
4092 -> 4081;
4093 -> 4092;
4093 -> 4081;
4094 -> 4081;
4095 -> 4093;
4095 -> 4094;
4096 -> 4094;
4097 -> 4095;
4097 -> 4096;
4097 -> 4094;
4098 -> 3948;
4099 -> 4078;
4099 -> 4098;
4099 -> 3948;
4100 -> 4078;
4100 -> 3948;
4101 -> 4079;
4101 -> 3948;
4102 -> 3948;
4103 -> 3948;
4104 -> 4065;
4104 -> 3948;
4105 -> 3948;
4106 -> 4066;
4106 -> 3948;
4107 -> 4103;
4107 -> 3948;
4108 -> 4103;
4108 -> 3948;
4109 -> 4104;
4109 -> 3948;
4110 -> 4105;
4110 -> 3948;
4111 -> 4103;
4111 -> 3948;
4112 -> 4106;
4112 -> 3948;
4113 -> 3948;
4114 -> 4107;
4114 -> 4113;
4115 -> 4114;
4115 -> 3948;
4115 -> 4113;
4116 -> 0;
4116 -> 4113;
4117 -> 4113;
4118 -> 4115;
4118 -> 4117;
4119 -> 4116;
4119 -> 4117;
4120 -> 4118;
4120 -> 3948;
4121 -> 3948;
4121 -> 4103;
4122 -> 4001;
4122 -> 4103;
4123 -> 4104;
4123 -> 4122;
4124 -> 4105;
4124 -> 4122;
4125 -> 4106;
4125 -> 4122;
4126 -> 4122;
4127 -> 4122;
4128 -> 4122;
4129 -> 4122;
4130 -> 4123;
4130 -> 4122;
4131 -> 4124;
4131 -> 4122;
4132 -> 4122;
4133 -> 4125;
4133 -> 4122;
4134 -> 4127;
4134 -> 4103;
4134 -> 4122;
4135 -> 0;
4135 -> 4122;
4136 -> 4122;
4137 -> 4134;
4137 -> 4136;
4138 -> 4135;
4138 -> 4136;
4139 -> 4122;
4140 -> 4127;
4140 -> 4139;
4141 -> 4140;
4141 -> 4103;
4141 -> 4139;
4142 -> 0;
4142 -> 4139;
4143 -> 4139;
4144 -> 4141;
4144 -> 4143;
4145 -> 4142;
4145 -> 4143;
4146 -> 4144;
4146 -> 4122;
4147 -> 4126;
4147 -> 4122;
4148 -> 4147;
4148 -> 4103;
4149 -> 4129;
4149 -> 4147;
4150 -> 4132;
4150 -> 4147;
4151 -> 4127;
4151 -> 4147;
4152 -> 4147;
4153 -> 4148;
4153 -> 4152;
4154 -> 4149;
4154 -> 4152;
4155 -> 4150;
4155 -> 4152;
4156 -> 4151;
4156 -> 4152;
4157 -> 4154;
4157 -> 4155;
4158 -> 4157;
4158 -> 4147;
4159 -> 4158;
4160 -> 4158;
4161 -> 4159;
4161 -> 4160;
4162 -> 4161;
4162 -> 4103;
4162 -> 4157;
4162 -> 4160;
4163 -> 4160;
4164 -> 4163;
4164 -> 4158;
4165 -> 4158;
4166 -> 4130;
4166 -> 4158;
4167 -> 4132;
4167 -> 4158;
4168 -> 4133;
4168 -> 4158;
4169 -> 4122;
4169 -> 4158;
4170 -> 4131;
4170 -> 4158;
4171 -> 4158;
4172 -> 4165;
4172 -> 4171;
4173 -> 4166;
4173 -> 4171;
4174 -> 4167;
4174 -> 4171;
4175 -> 4165;
4175 -> 4171;
4176 -> 4168;
4176 -> 4171;
4177 -> 4169;
4177 -> 4171;
4178 -> 4170;
4178 -> 4171;
4179 -> 4127;
4179 -> 4171;
4180 -> 4171;
4181 -> 4179;
4181 -> 4103;
4181 -> 4172;
4181 -> 4157;
4181 -> 4171;
4182 -> 4173;
4182 -> 4181;
4183 -> 4176;
4183 -> 4181;
4184 -> 4181;
4185 -> 4182;
4185 -> 4181;
4186 -> 4183;
4186 -> 4181;
4187 -> 4181;
4188 -> 4181;
4189 -> 4184;
4189 -> 4181;
4190 -> 4189;
4191 -> 4185;
4191 -> 4190;
4191 -> 4189;
4192 -> 4184;
4192 -> 4191;
4193 -> 4192;
4193 -> 4181;
4193 -> 4191;
4194 -> 4192;
4194 -> 4191;
4195 -> 4192;
4195 -> 4181;
4195 -> 4185;
4195 -> 4191;
4196 -> 4187;
4196 -> 4191;
4197 -> 4191;
4198 -> 4196;
4198 -> 4197;
4199 -> 4195;
4199 -> 4198;
4199 -> 4191;
4200 -> 4181;
4201 -> 4175;
4201 -> 4181;
4202 -> 4181;
4203 -> 4181;
4203 -> 4202;
4204 -> 4201;
4204 -> 4202;
4205 -> 4203;
4205 -> 0;
4205 -> 4202;
4206 -> 4202;
4207 -> 4205;
4207 -> 4202;
4208 -> 4204;
4208 -> 4207;
4209 -> 4180;
4209 -> 4181;
4210 -> 4178;
4210 -> 4181;
4211 -> 4208;
4211 -> 4181;
4212 -> 4209;
4212 -> 4181;
4213 -> 4210;
4213 -> 4181;
4214 -> 4181;
4215 -> 0;
4215 -> 4181;
4216 -> 4181;
4217 -> 4214;
4217 -> 4216;
4218 -> 4215;
4218 -> 4216;
4219 -> 4211;
4219 -> 4181;
4220 -> 4212;
4220 -> 4181;
4221 -> 4213;
4221 -> 4181;
4222 -> 4219;
4222 -> 4181;
4223 -> 4220;
4223 -> 4181;
4224 -> 4221;
4224 -> 4181;
4225 -> 4222;
4225 -> 4181;
4226 -> 4223;
4226 -> 4181;
4227 -> 4181;
4228 -> 4181;
4229 -> 4228;
4229 -> 4181;
4230 -> 0;
4230 -> 4181;
4231 -> 4181;
4232 -> 4229;
4232 -> 4231;
4233 -> 4230;
4233 -> 4231;
4234 -> 4225;
4234 -> 4181;
4235 -> 4226;
4235 -> 4181;
4236 -> 4227;
4236 -> 4181;
4237 -> 4234;
4237 -> 4181;
4238 -> 4235;
4238 -> 4181;
4239 -> 4181;
4240 -> 4236;
4240 -> 4181;
4241 -> 4181;
4242 -> 4181;
4243 -> 4181;
4244 -> 4181;
4245 -> 4181;
4246 -> 4240;
4246 -> 4181;
4247 -> 4181;
4248 -> 4181;
4249 -> 4181;
4250 -> 4181;
4251 -> 4181;
4252 -> 4181;
4253 -> 4181;
4254 -> 4181;
4255 -> 4254;
4255 -> 0;
4255 -> 4158;
4256 -> 4127;
4256 -> 4254;
4256 -> 4255;
4257 -> 4147;
4257 -> 4103;
4257 -> 4255;
4258 -> 4146;
4258 -> 4255;
4259 -> 4255;
4260 -> 4256;
4260 -> 4259;
4261 -> 4257;
4261 -> 4259;
4262 -> 4258;
4262 -> 4259;
4263 -> 4259;
4264 -> 4260;
4264 -> 4263;
4264 -> 4259;
4265 -> 4259;
4266 -> 4261;
4266 -> 4265;
4266 -> 4259;
4267 -> 4266;
4267 -> 4262;
4267 -> 4259;
4268 -> 4261;
4268 -> 4267;
4269 -> 4260;
4269 -> 4268;
4269 -> 4254;
4269 -> 4267;
4270 -> 4255;
4271 -> 4254;
4271 -> 4158;
4272 -> 4158;
4273 -> 4271;
4273 -> 4272;
4274 -> 4128;
4274 -> 4272;
4275 -> 4274;
4275 -> 4269;
4275 -> 4272;
4276 -> 4275;
4276 -> 4273;
4276 -> 4254;
4276 -> 4272;
4277 -> 4158;
4278 -> 4276;
4279 -> 4276;
4280 -> 4278;
4280 -> 4279;
4281 -> 4280;
4281 -> 4276;
4281 -> 4279;
4282 -> 4279;
4283 -> 4282;
4283 -> 4276;
4284 -> 4130;
4284 -> 4276;
4285 -> 4133;
4285 -> 4276;
4286 -> 4131;
4286 -> 4276;
4287 -> 4284;
4287 -> 4276;
4288 -> 4276;
4289 -> 4285;
4289 -> 4276;
4290 -> 4286;
4290 -> 4276;
4291 -> 4276;
4292 -> 4276;
4293 -> 4287;
4293 -> 4276;
4294 -> 4289;
4294 -> 4276;
4295 -> 4276;
4296 -> 4276;
4297 -> 4292;
4297 -> 4276;
4298 -> 4297;
4299 -> 4293;
4299 -> 4298;
4299 -> 4297;
4300 -> 4292;
4300 -> 4299;
4301 -> 4300;
4301 -> 4276;
4301 -> 4299;
4302 -> 4300;
4302 -> 4299;
4303 -> 4300;
4303 -> 4276;
4303 -> 4293;
4303 -> 4299;
4304 -> 4303;
4305 -> 4294;
4305 -> 4304;
4306 -> 0;
4306 -> 4305;
4307 -> 4305;
4308 -> 4300;
4308 -> 4307;
4308 -> 4305;
4309 -> 4306;
4309 -> 4307;
4309 -> 4305;
4310 -> 4303;
4311 -> 4276;
4311 -> 4310;
4312 -> 4308;
4312 -> 4310;
4313 -> 4310;
4314 -> 4311;
4314 -> 4313;
4315 -> 4312;
4315 -> 4313;
4316 -> 0;
4316 -> 4313;
4317 -> 4314;
4317 -> 4313;
4318 -> 4315;
4318 -> 4313;
4319 -> 4313;
4320 -> 4313;
4321 -> 4316;
4321 -> 4320;
4322 -> 4317;
4322 -> 4320;
4323 -> 4318;
4323 -> 4320;
4324 -> 4319;
4324 -> 4320;
4325 -> 4319;
4325 -> 4310;
4326 -> 4325;
4326 -> 4321;
4326 -> 0;
4326 -> 4276;
4327 -> 4308;
4327 -> 4325;
4327 -> 4321;
4327 -> 4276;
4328 -> 4308;
4329 -> 4308;
4330 -> 4328;
4330 -> 4329;
4331 -> 4330;
4331 -> 4308;
4331 -> 4329;
4332 -> 4329;
4333 -> 4332;
4333 -> 4308;
4334 -> 4131;
4334 -> 4308;
4335 -> 4308;
4336 -> 4334;
4336 -> 4308;
4337 -> 4308;
4338 -> 4308;
4339 -> 4308;
4340 -> 4308;
4341 -> 4308;
4342 -> 0;
4342 -> 4341;
4343 -> 4341;
4344 -> 4308;
4344 -> 4343;
4344 -> 4341;
4345 -> 4342;
4345 -> 4343;
4345 -> 4341;
4346 -> 4308;
4347 -> 4308;
4347 -> 4346;
4348 -> 4344;
4348 -> 4346;
4349 -> 4346;
4350 -> 4347;
4350 -> 4349;
4351 -> 4348;
4351 -> 4349;
4352 -> 0;
4352 -> 4349;
4353 -> 4350;
4353 -> 4349;
4354 -> 4351;
4354 -> 4349;
4355 -> 4349;
4356 -> 4349;
4357 -> 4352;
4357 -> 4356;
4358 -> 4353;
4358 -> 4356;
4359 -> 4354;
4359 -> 4356;
4360 -> 4355;
4360 -> 4356;
4361 -> 4355;
4361 -> 4346;
4362 -> 4361;
4362 -> 4357;
4362 -> 0;
4362 -> 4308;
4363 -> 4344;
4363 -> 4361;
4363 -> 4357;
4363 -> 4308;
4364 -> 4344;
4365 -> 4344;
4366 -> 4364;
4366 -> 4365;
4367 -> 4366;
4367 -> 4344;
4367 -> 4365;
4368 -> 4365;
4369 -> 4368;
4369 -> 4344;
4370 -> 4131;
4370 -> 4344;
4371 -> 4344;
4372 -> 4370;
4372 -> 4344;
4373 -> 4344;
4374 -> 4344;
4375 -> 4344;
4376 -> 4344;
4377 -> 4344;
4378 -> 4344;
4378 -> 4377;
4379 -> 4377;
4380 -> 4378;
4380 -> 4379;
4381 -> 4378;
4381 -> 4379;
4382 -> 0;
4382 -> 4379;
4383 -> 4380;
4383 -> 4379;
4384 -> 4381;
4384 -> 4379;
4385 -> 4379;
4386 -> 4379;
4387 -> 4382;
4387 -> 4386;
4388 -> 4383;
4388 -> 4386;
4389 -> 4384;
4389 -> 4386;
4390 -> 4385;
4390 -> 4386;
4391 -> 4385;
4391 -> 4377;
4392 -> 4391;
4392 -> 4387;
4392 -> 0;
4392 -> 4344;
4393 -> 4344;
4393 -> 4391;
4393 -> 4387;
4394 -> 4377;
4394 -> 4344;
4395 -> 4377;
4395 -> 4344;
4396 -> 4377;
4396 -> 4344;
4397 -> 4377;
4398 -> 4377;
4399 -> 4398;
4399 -> 4379;
4400 -> 4399;
4400 -> 4379;
4401 -> 4400;
4401 -> 4386;
4402 -> 4377;
4402 -> 4391;
4402 -> 4387;
4402 -> 4344;
4403 -> 4377;
4404 -> 4377;
4405 -> 4403;
4405 -> 4404;
4406 -> 4405;
4406 -> 4377;
4406 -> 4404;
4407 -> 4404;
4408 -> 4407;
4408 -> 4377;
4409 -> 4131;
4409 -> 4377;
4410 -> 4377;
4411 -> 4409;
4411 -> 4377;
4412 -> 4377;
4413 -> 4377;
4414 -> 4377;
4415 -> 4398;
4415 -> 4379;
4416 -> 4415;
4416 -> 4379;
4417 -> 4416;
4417 -> 4386;
4418 -> 4391;
4418 -> 4387;
4418 -> 0;
4418 -> 4377;
4419 -> 4377;
4419 -> 4391;
4419 -> 4387;
4420 -> 3948;
4421 -> 3832;
4421 -> 4420;
4422 -> 4421;
4422 -> 4377;
4422 -> 0;
4422 -> 4420;
4423 -> 4422;
4423 -> 3948;
4424 -> 3948;
4424 -> 4423;
4425 -> 3824;
4425 -> 0;
4425 -> 3948;
4426 -> 3948;
4427 -> 4424;
4427 -> 3824;
4428 -> 3769;
4428 -> 3768;
4429 -> 3772;
4429 -> 3768;
4430 -> 4377;
4430 -> 3768;
4431 -> 4428;
4431 -> 4429;
4431 -> 4430;
4431 -> 4377;
4431 -> 3768;
4432 -> 3768;
4433 -> 3803;
4433 -> 3768;
4434 -> 3773;
4434 -> 3768;
4435 -> 3774;
4435 -> 3768;
4436 -> 3772;
4436 -> 3768;
4437 -> 3769;
4437 -> 3768;
4438 -> 3768;
4439 -> 3770;
4439 -> 4438;
4439 -> 3768;
4440 -> 4432;
4440 -> 3768;
4441 -> 3771;
4441 -> 3768;
4442 -> 3775;
4442 -> 3768;
4443 -> 3768;
4444 -> 4433;
4444 -> 4443;
4445 -> 4434;
4445 -> 4443;
4446 -> 4435;
4446 -> 4443;
4447 -> 4436;
4447 -> 4443;
4448 -> 4437;
4448 -> 4443;
4449 -> 4439;
4449 -> 4443;
4450 -> 4440;
4450 -> 4443;
4451 -> 4441;
4451 -> 4443;
4452 -> 4442;
4452 -> 4443;
4453 -> 3776;
4453 -> 4443;
4454 -> 4443;
4455 -> 4447;
4455 -> 4454;
4455 -> 4443;
4456 -> 4443;
4457 -> 4448;
4457 -> 4456;
4457 -> 4443;
4458 -> 4444;
4458 -> 4431;
4458 -> 4443;
4459 -> 4443;
4460 -> 4444;
4460 -> 4431;
4460 -> 4443;
4461 -> 4458;
4461 -> 0;
4462 -> 4461;
4462 -> 4453;
4462 -> 4458;
4463 -> 4448;
4463 -> 4458;
4464 -> 4447;
4464 -> 4458;
4465 -> 4463;
4465 -> 4458;
4466 -> 4464;
4466 -> 4458;
4467 -> 4458;
4468 -> 4458;
4469 -> 4467;
4469 -> 4458;
4470 -> 4467;
4470 -> 4458;
4471 -> 4467;
4471 -> 4458;
4472 -> 4467;
4472 -> 4458;
4473 -> 4472;
4473 -> 4458;
4474 -> 4458;
4475 -> 4458;
4475 -> 0;
4475 -> 4443;
4476 -> 4447;
4476 -> 4475;
4477 -> 4475;
4478 -> 4458;
4478 -> 4475;
4479 -> 4448;
4479 -> 4475;
4480 -> 4475;
4481 -> 4476;
4481 -> 4480;
4482 -> 4477;
4482 -> 4480;
4483 -> 4478;
4483 -> 4480;
4484 -> 4479;
4484 -> 4480;
4485 -> 4453;
4485 -> 4480;
4486 -> 4483;
4486 -> 4458;
4486 -> 4480;
4487 -> 4480;
4488 -> 4458;
4488 -> 3768;
4489 -> 3768;
4490 -> 4488;
4490 -> 4489;
4490 -> 3768;
4491 -> 3768;
4492 -> 3803;
4492 -> 4491;
4493 -> 4492;
4493 -> 4458;
4493 -> 4491;
4494 -> 4491;
4495 -> 3768;
4496 -> 4488;
4496 -> 3768;
4497 -> 3747;
4498 -> 3755;
4498 -> 3747;
4499 -> 3752;
4499 -> 4493;
4499 -> 0;
4499 -> 4498;
4500 -> 4498;
4501 -> 4496;
4501 -> 4499;
4502 -> 3748;
4502 -> 4499;
4503 -> 3754;
4503 -> 4499;
4504 -> 3749;
4504 -> 4499;
4505 -> 3750;
4505 -> 4499;
4506 -> 4499;
4507 -> 4503;
4507 -> 4506;
4508 -> 4504;
4508 -> 4506;
4509 -> 4505;
4509 -> 4506;
4510 -> 3752;
4510 -> 4506;
4511 -> 4506;
4512 -> 4507;
4512 -> 3644;
4512 -> 4511;
4512 -> 4506;
4513 -> 4506;
4514 -> 4507;
4514 -> 4506;
4515 -> 4514;
4516 -> 4508;
4516 -> 4514;
4517 -> 4509;
4517 -> 4514;
4518 -> 4514;
4519 -> 4515;
4519 -> 4518;
4520 -> 4516;
4520 -> 4518;
4521 -> 4517;
4521 -> 4518;
4522 -> 4510;
4522 -> 4518;
4523 -> 0;
4523 -> 4518;
4524 -> 4518;
4525 -> 4523;
4525 -> 4524;
4526 -> 4522;
4526 -> 4524;
4527 -> 4526;
4527 -> 4525;
4527 -> 4524;
4528 -> 4527;
4529 -> 4527;
4530 -> 0;
4530 -> 4527;
4531 -> 4527;
4532 -> 4529;
4532 -> 4531;
4533 -> 4530;
4533 -> 4531;
4534 -> 4527;
4535 -> 0;
4535 -> 4527;
4536 -> 4527;
4537 -> 4534;
4537 -> 4536;
4538 -> 4535;
4538 -> 4536;
4539 -> 4519;
4539 -> 3644;
4539 -> 4493;
4539 -> 4518;
4540 -> 4539;
4540 -> 4518;
4541 -> 4520;
4541 -> 4540;
4542 -> 4521;
4542 -> 4540;
4543 -> 4540;
4544 -> 4541;
4544 -> 4543;
4545 -> 4542;
4545 -> 4543;
4546 -> 4527;
4546 -> 4543;
4547 -> 4543;
4548 -> 4544;
4548 -> 4547;
4548 -> 4543;
4549 -> 4543;
4550 -> 4543;
4551 -> 4546;
4551 -> 4550;
4551 -> 4543;
4552 -> 4544;
4552 -> 4543;
4553 -> 4549;
4553 -> 4543;
4554 -> 4543;
4555 -> 4546;
4555 -> 4554;
4555 -> 4543;
4556 -> 4546;
4556 -> 4543;
4557 -> 4544;
4557 -> 4546;
4558 -> 4557;
4558 -> 4546;
4559 -> 4558;
4559 -> 4546;
4560 -> 4557;
4561 -> 4560;
4561 -> 4557;
4562 -> 4557;
4563 -> 4560;
4563 -> 4561;
4563 -> 4562;
4564 -> 4563;
4564 -> 4557;
4565 -> 4564;
4565 -> 4557;
4566 -> 4564;
4566 -> 4561;
4566 -> 0;
4566 -> 4557;
4567 -> 4564;
4567 -> 4557;
4568 -> 4559;
4568 -> 4557;
4569 -> 4561;
4569 -> 4557;
4570 -> 4557;
4570 -> 4561;
4570 -> 0;
4571 -> 4557;
4571 -> 4561;
4571 -> 0;
4572 -> 4568;
4572 -> 4557;
4573 -> 4572;
4573 -> 4557;
4574 -> 4557;
4575 -> 4557;
4576 -> 4569;
4576 -> 4557;
4577 -> 4557;
4578 -> 4574;
4578 -> 4577;
4578 -> 4557;
4579 -> 4557;
4580 -> 4564;
4580 -> 4557;
4581 -> 4557;
4582 -> 4579;
4582 -> 4581;
4582 -> 4557;
4583 -> 4564;
4583 -> 4557;
4584 -> 4583;
4584 -> 4557;
4585 -> 4572;
4585 -> 4584;
4586 -> 4544;
4586 -> 4543;
4587 -> 4543;
4588 -> 4545;
4588 -> 4543;
4589 -> 4546;
4589 -> 4543;
4590 -> 4543;
4591 -> 4546;
4591 -> 4590;
4592 -> 4591;
4592 -> 4546;
4592 -> 4590;
4593 -> 4592;
4593 -> 0;
4593 -> 4590;
4594 -> 4593;
4594 -> 4543;
4595 -> 4546;
4595 -> 4518;
4596 -> 4513;
4596 -> 4595;
4596 -> 4564;
4596 -> 4514;
4597 -> 4513;
4597 -> 4596;
4597 -> 4506;
4598 -> 4499;
4599 -> 4501;
4599 -> 4598;
4600 -> 4502;
4600 -> 4598;
4601 -> 4503;
4601 -> 4598;
4602 -> 4597;
4602 -> 4598;
4603 -> 4505;
4603 -> 4598;
4604 -> 4504;
4604 -> 4598;
4605 -> 3752;
4605 -> 4598;
4606 -> 4602;
4606 -> 4597;
4606 -> 4598;
4607 -> 4602;
4607 -> 4598;
4608 -> 4599;
4608 -> 4607;
4608 -> 4596;
4608 -> 4597;
4608 -> 4598;
4609 -> 4598;
4610 -> 4605;
4610 -> 4609;
4611 -> 4610;
4611 -> 4608;
4611 -> 4609;
4612 -> 0;
4612 -> 4609;
4613 -> 4609;
4614 -> 4611;
4614 -> 4613;
4615 -> 4612;
4615 -> 4613;
4616 -> 4614;
4616 -> 4598;
4617 -> 4608;
4617 -> 4598;
4618 -> 3759;
4618 -> 3747;
4619 -> 3747;
4620 -> 4618;
4620 -> 4619;
4621 -> 3748;
4621 -> 4608;
4621 -> 3747;
4622 -> 3747;
4623 -> 4621;
4623 -> 4622;
4624 -> 3752;
4624 -> 4622;
4625 -> 4617;
4625 -> 3747;
4626 -> 3747;
4627 -> 4623;
4627 -> 4625;
4627 -> 4626;
4627 -> 3747;
4628 -> 4627;
4628 -> 3747;
4629 -> 3747;
4629 -> 3644;
4630 -> 4627;
4631 -> 4630;
4631 -> 4627;
4632 -> 4627;
4633 -> 4627;
4633 -> 0;
4634 -> 4627;
4635 -> 4631;
4635 -> 4627;
4636 -> 4627;
4637 -> 4627;
4637 -> 0;
4638 -> 4627;
4638 -> 0;
4639 -> 4635;
4639 -> 4627;
4640 -> 4639;
4640 -> 4627;
4641 -> 4627;
4642 -> 4627;
4643 -> 4636;
4643 -> 4627;
4644 -> 4627;
4645 -> 4641;
4645 -> 4644;
4645 -> 4627;
4646 -> 4627;
4647 -> 4627;
4648 -> 4627;
4649 -> 4646;
4649 -> 4648;
4649 -> 4627;
4650 -> 4627;
4651 -> 4650;
4651 -> 4627;
4652 -> 4639;
4652 -> 4651;
4653 -> 4627;
4653 -> 3156;
4654 -> 4653;
4654 -> 3747;
4654 -> 3156;
4655 -> 4654;
4655 -> 0;
4655 -> 3156;
4656 -> 4655;
4656 -> 3150;
4657 -> 3165;
4657 -> 4627;
4657 -> 577;
4658 -> 4627;
4659 -> 4627;
4660 -> 3170;
4660 -> 4659;
4660 -> 4627;
4661 -> 3168;
4661 -> 4627;
4662 -> 4661;
4662 -> 4627;
4663 -> 4627;
4664 -> 4662;
4664 -> 4627;
4665 -> 4663;
4665 -> 4627;
4666 -> 4663;
4666 -> 4627;
4667 -> 4663;
4667 -> 4627;
4668 -> 4664;
4668 -> 4627;
4669 -> 4667;
4669 -> 4627;
4670 -> 4627;
4671 -> 4627;
4672 -> 4671;
4672 -> 4627;
4673 -> 4627;
4674 -> 4627;
4675 -> 4627;
4675 -> 4674;
4676 -> 4674;
4677 -> 4676;
4677 -> 4627;
4678 -> 4627;
4678 -> 0;
4679 -> 4627;
4680 -> 4678;
4680 -> 4627;
4681 -> 4680;
4682 -> 4681;
4682 -> 4627;
4683 -> 4627;
4683 -> 577;
4684 -> 4627;
4685 -> 4627;
4686 -> 4627;
4687 -> 4684;
4687 -> 4627;
4688 -> 4627;
4689 -> 4627;
4690 -> 4630;
4691 -> 4630;
4691 -> 4627;
4691 -> 0;
4692 -> 4630;
4693 -> 4631;
4693 -> 4630;
4694 -> 4631;
4694 -> 4630;
4695 -> 4630;
4695 -> 0;
4696 -> 4630;
4696 -> 0;
4697 -> 4693;
4697 -> 4630;
4698 -> 4697;
4698 -> 4630;
4699 -> 4630;
4700 -> 4630;
4701 -> 4694;
4701 -> 4630;
4702 -> 4630;
4703 -> 4699;
4703 -> 4702;
4703 -> 4630;
4704 -> 4630;
4705 -> 4630;
4706 -> 4630;
4707 -> 4704;
4707 -> 4706;
4707 -> 4630;
4708 -> 4630;
4709 -> 4708;
4709 -> 4630;
4710 -> 4697;
4710 -> 4709;
4711 -> 4653;
4711 -> 4627;
4711 -> 3156;
4712 -> 4711;
4712 -> 0;
4712 -> 3156;
4713 -> 4712;
4713 -> 3150;
4714 -> 603;
4714 -> 577;
4715 -> 603;
4715 -> 577;
4716 -> 603;
4716 -> 577;
4717 -> 4714;
4717 -> 577;
4718 -> 577;
4719 -> 4715;
4719 -> 577;
4720 -> 577;
4721 -> 577;
4722 -> 4717;
4722 -> 4721;
4723 -> 4718;
4723 -> 4721;
4724 -> 4719;
4724 -> 4721;
4725 -> 4720;
4725 -> 4721;
4726 -> 4716;
4726 -> 4721;
4727 -> 4722;
4727 -> 4721;
4728 -> 4723;
4728 -> 4721;
4729 -> 4724;
4729 -> 4721;
4730 -> 4725;
4730 -> 4721;
4731 -> 4721;
4732 -> 4727;
4732 -> 4731;
4733 -> 4728;
4733 -> 4731;
4734 -> 4729;
4734 -> 4731;
4735 -> 4730;
4735 -> 4731;
4736 -> 4726;
4736 -> 4731;
4737 -> 4736;
4737 -> 4731;
4738 -> 4736;
4738 -> 4731;
4739 -> 4736;
4739 -> 4731;
4740 -> 4736;
4740 -> 4731;
4741 -> 4731;
4742 -> 4732;
4742 -> 4741;
4742 -> 4731;
4743 -> 4731;
4744 -> 4735;
4744 -> 4743;
4744 -> 4731;
4745 -> 4731;
4746 -> 4735;
4746 -> 4745;
4746 -> 4731;
4747 -> 4732;
4747 -> 4736;
4747 -> 4731;
4748 -> 4733;
4748 -> 4736;
4748 -> 4731;
4749 -> 4734;
4749 -> 4736;
4749 -> 4731;
4750 -> 4735;
4750 -> 4736;
4750 -> 4731;
4751 -> 603;
4751 -> 4630;
4751 -> 4747;
4751 -> 4748;
4751 -> 4749;
4751 -> 4750;
4751 -> 574;
4752 -> 4751;
4752 -> 574;
4753 -> 576;
4753 -> 574;
4754 -> 574;
4755 -> 4752;
4755 -> 4754;
4756 -> 4753;
4756 -> 4754;
4757 -> 4755;
4757 -> 4754;
4758 -> 4756;
4758 -> 4754;
4759 -> 4754;
4760 -> 4757;
4760 -> 4759;
4761 -> 4758;
4761 -> 4759;
4762 -> 4760;
4762 -> 4759;
4763 -> 4761;
4763 -> 4759;
4764 -> 4759;
4765 -> 4759;
4766 -> 4762;
4766 -> 4765;
4767 -> 4763;
4767 -> 4765;
4768 -> 4764;
4768 -> 4765;
4769 -> 4765;
4770 -> 4767;
4770 -> 4769;
4770 -> 4765;
4771 -> 4767;
4771 -> 4765;
4772 -> 4767;
4772 -> 4765;
4773 -> 4766;
4773 -> 4765;
4774 -> 4768;
4774 -> 4771;
4774 -> 4772;
4774 -> 4765;
4775 -> 4773;
4775 -> 4774;
4775 -> 4765;
4776 -> 4767;
4776 -> 4765;
4777 -> 4765;
4778 -> 4775;
4778 -> 4777;
4778 -> 4765;
4779 -> 4765;
4781 -> 4780;
4783 -> 4782;
4784 -> 4767;
4784 -> 4765;
4785 -> 4766;
4785 -> 4765;
4786 -> 4765;
4787 -> 4784;
4787 -> 4786;
4788 -> 4785;
4788 -> 4786;
4789 -> 4786;
4790 -> 4786;
4791 -> 4788;
4791 -> 4786;
4792 -> 4791;
4792 -> 4775;
4792 -> 4786;
4793 -> 4792;
4793 -> 4786;
4794 -> 4790;
4794 -> 4793;
4795 -> 4794;
4795 -> 4789;
4795 -> 4786;
4796 -> 4794;
4796 -> 4789;
4796 -> 4786;
4797 -> 4796;
4797 -> 4786;
4798 -> 4787;
4798 -> 4786;
4799 -> 4787;
4799 -> 4786;
4800 -> 4787;
4800 -> 4786;
4801 -> 4786;
4802 -> 4800;
4802 -> 4801;
4804 -> 4803;
4805 -> 4803;
4806 -> 4805;
4806 -> 4801;
4807 -> 4801;
4808 -> 4802;
4808 -> 4801;
4809 -> 4801;
4810 -> 4809;
4810 -> 4786;
4811 -> 4788;
4811 -> 4810;
4812 -> 4810;
4813 -> 4811;
4813 -> 4812;
4814 -> 4813;
4814 -> 4812;
4815 -> 4812;
4816 -> 4805;
4816 -> 4812;
4817 -> 4814;
4817 -> 4815;
4817 -> 4816;
4817 -> 4775;
4817 -> 4812;
4818 -> 4786;
4819 -> 4818;
4819 -> 4786;
4820 -> 4786;
4821 -> 4786;
4822 -> 4818;
4822 -> 4821;
4822 -> 4819;
4822 -> 4786;
4823 -> 4786;
4824 -> 4787;
4824 -> 4786;
4825 -> 4818;
4825 -> 4786;
4826 -> 4823;
4826 -> 4786;
4827 -> 4786;
4828 -> 4825;
4828 -> 4827;
4829 -> 4826;
4829 -> 4827;
4830 -> 4829;
4830 -> 4823;
4830 -> 4827;
4831 -> 4827;
4832 -> 4831;
4832 -> 4830;
4832 -> 4827;
4833 -> 4786;
4834 -> 4786;
4835 -> 4818;
4835 -> 4834;
4835 -> 4822;
4835 -> 4786;
4836 -> 4786;
4837 -> 4817;
4837 -> 4786;
4838 -> 4786;
4839 -> 4837;
4839 -> 4786;
4840 -> 4786;
4841 -> 4838;
4841 -> 4840;
4841 -> 4786;
4842 -> 4786;
4843 -> 4818;
4843 -> 4842;
4843 -> 4835;
4843 -> 4786;
4844 -> 4823;
4844 -> 4786;
4845 -> 4836;
4845 -> 4786;
4849 -> 4847;
4849 -> 4846;
4850 -> 4848;
4850 -> 4846;
4851 -> 4846;
4852 -> 0;
4852 -> 4786;
4853 -> 4786;
4854 -> 4786;
4855 -> 4844;
4855 -> 4854;
4856 -> 4845;
4856 -> 4854;
4857 -> 4852;
4857 -> 4854;
4858 -> 4853;
4858 -> 4854;
4859 -> 4853;
4859 -> 4854;
4860 -> 4854;
4861 -> 4858;
4861 -> 4860;
4861 -> 4854;
4862 -> 4861;
4862 -> 4854;
4863 -> 0;
4865 -> 4863;
4865 -> 4864;
4866 -> 4864;
4868 -> 4867;
4870 -> 4869;
4872 -> 4871;
4873 -> 4866;
4874 -> 4866;
4874 -> 4864;
4875 -> 4865;
4875 -> 4866;
4875 -> 4864;
4876 -> 4864;
4877 -> 4854;
4878 -> 4877;
4878 -> 4859;
4878 -> 4854;
4879 -> 4855;
4879 -> 4854;
4880 -> 4856;
4880 -> 4854;
4881 -> 4857;
4881 -> 4854;
4882 -> 4879;
4882 -> 4854;
4883 -> 4880;
4883 -> 4854;
4884 -> 4878;
4884 -> 4854;
4885 -> 4854;
4886 -> 4882;
4886 -> 4885;
4887 -> 4883;
4887 -> 4885;
4888 -> 4884;
4888 -> 4885;
4889 -> 4862;
4889 -> 4885;
4890 -> 4886;
4890 -> 4885;
4891 -> 4886;
4891 -> 4879;
4891 -> 4885;
4892 -> 4887;
4892 -> 4885;
4893 -> 4887;
4893 -> 4880;
4893 -> 4885;
4894 -> 4885;
4895 -> 4890;
4895 -> 4894;
4896 -> 4891;
4896 -> 4894;
4897 -> 4892;
4897 -> 4894;
4898 -> 4893;
4898 -> 4894;
4899 -> 4889;
4899 -> 4894;
4900 -> 4895;
4900 -> 4894;
4901 -> 4896;
4901 -> 4894;
4902 -> 4897;
4902 -> 4894;
4903 -> 4898;
4903 -> 4894;
4904 -> 4894;
4905 -> 4900;
4905 -> 4904;
4906 -> 4901;
4906 -> 4904;
4907 -> 4902;
4907 -> 4904;
4908 -> 4903;
4908 -> 4904;
4909 -> 4899;
4909 -> 4904;
4910 -> 4904;
4911 -> 4906;
4911 -> 4910;
4911 -> 4904;
4912 -> 4904;
4913 -> 4908;
4913 -> 4912;
4913 -> 4904;
4914 -> 4911;
4914 -> 4913;
4914 -> 4904;
4915 -> 4904;
4916 -> 4915;
4916 -> 4914;
4916 -> 4904;
4917 -> 4904;
4918 -> 4917;
4918 -> 4906;
4918 -> 4904;
4919 -> 4904;
4920 -> 4919;
4920 -> 4908;
4920 -> 4904;
4921 -> 4904;
4922 -> 4921;
4922 -> 4906;
4922 -> 4904;
4923 -> 4914;
4923 -> 4904;
4924 -> 4896;
4924 -> 4894;
4925 -> 4898;
4925 -> 4894;
4926 -> 4894;
4927 -> 4924;
4927 -> 4926;
4927 -> 4894;
4928 -> 4894;
4929 -> 4924;
4929 -> 4928;
4929 -> 4894;
4930 -> 4894;
4931 -> 4925;
4931 -> 4930;
4931 -> 4894;
4932 -> 4894;
4933 -> 4932;
4933 -> 4885;
4934 -> 4885;
4935 -> 4934;
4935 -> 4854;
4936 -> 4881;
4936 -> 4935;
4936 -> 4854;
4937 -> 4818;
4937 -> 4936;
4937 -> 4843;
4937 -> 4786;
4938 -> 4836;
4938 -> 4786;
4939 -> 4823;
4939 -> 4786;
4940 -> 4818;
4940 -> 4937;
4940 -> 4786;
4941 -> 4940;
4941 -> 4765;
4942 -> 4754;
4943 -> 574;
4944 -> 575;
4944 -> 574;
4945 -> 4751;
4945 -> 574;
4946 -> 574;
4947 -> 4944;
4947 -> 4946;
4948 -> 4945;
4948 -> 4946;
4949 -> 4948;
4949 -> 4946;
4950 -> 574;
4951 -> 575;
4951 -> 574;
}