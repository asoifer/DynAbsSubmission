digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 755752"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 755753"];
3 [label="@'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 755754"];
4 [label="prefix = @'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 755755"];
5 [label="@'\n}' 755756"];
6 [label="suffix = @'\n}' 755757"];
7 [label="param FlowTests(this) 755758"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 755759"];
9 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 755760"];
10 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 755761"];
11 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 755762"];
12 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 755763"];
13 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 755764"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 755765"];
15 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 755766"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 755767"];
17 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 755768"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 755769"];
19 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 755770"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 755771"];
21 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 755772"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 755773"];
23 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 755774"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 755775"];
25 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 755776"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 755777"];
27 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 755778"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 755779"];
29 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 755780"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 755781"];
31 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 755782"];
32 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 755783"];
33 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 755784"];
34 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 755785"];
35 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 755786"];
36 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 755787"];
37 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 755788"];
38 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 755789"];
39 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 755790"];
40 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 755791"];
41 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 755792"];
42 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 755793"];
43 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 755794"];
44 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 755795"];
45 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 755796"];
46 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 755797"];
47 [label="LazyThreadSafetyMode.PublicationOnly 755798"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 755799"];
49 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 755800"];
50 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 755801"];
51 [label="LazyThreadSafetyMode.PublicationOnly 755802"];
52 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 755803"];
53 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 755804"];
54 [label="RuntimeUtilities.IsCoreClrRuntime 755805"];
55 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 755806"];
56 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 755807"];
57 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 755808"];
58 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 755809"];
59 [label="LazyThreadSafetyMode.PublicationOnly 755810"];
60 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 755811"];
61 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 755812"];
62 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 755813"];
63 [label="LazyThreadSafetyMode.PublicationOnly 755814"];
64 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 755815"];
65 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 755816"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 755817"];
67 [label="LazyThreadSafetyMode.PublicationOnly 755818"];
68 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 755819"];
69 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 755820"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 755821"];
71 [label="LazyThreadSafetyMode.PublicationOnly 755822"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755823"];
73 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755824"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 755825"];
75 [label="LazyThreadSafetyMode.PublicationOnly 755826"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755827"];
77 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755828"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 755829"];
79 [label="LazyThreadSafetyMode.PublicationOnly 755830"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755831"];
81 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755832"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 755833"];
83 [label="LazyThreadSafetyMode.PublicationOnly 755834"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755835"];
85 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755836"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 755837"];
87 [label="LazyThreadSafetyMode.PublicationOnly 755838"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755839"];
89 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755840"];
90 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 755841"];
91 [label="LazyThreadSafetyMode.PublicationOnly 755842"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755843"];
93 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755844"];
94 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 755845"];
95 [label="LazyThreadSafetyMode.PublicationOnly 755846"];
96 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755847"];
97 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755848"];
98 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 755849"];
99 [label="LazyThreadSafetyMode.PublicationOnly 755850"];
100 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 755851"];
101 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 755852"];
102 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 755853"];
103 [label="LazyThreadSafetyMode.PublicationOnly 755854"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 755855"];
105 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 755856"];
106 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 755857"];
107 [label="LazyThreadSafetyMode.PublicationOnly 755858"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755859"];
109 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755860"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 755861"];
111 [label="LazyThreadSafetyMode.PublicationOnly 755862"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755863"];
113 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755864"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 755865"];
115 [label="LazyThreadSafetyMode.PublicationOnly 755866"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755867"];
117 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755868"];
118 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 755869"];
119 [label="LazyThreadSafetyMode.PublicationOnly 755870"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755871"];
121 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755872"];
122 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 755873"];
123 [label="LazyThreadSafetyMode.PublicationOnly 755874"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 755875"];
125 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 755876"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 755877"];
127 [label="LazyThreadSafetyMode.PublicationOnly 755878"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755879"];
129 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755880"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 755881"];
131 [label="LazyThreadSafetyMode.PublicationOnly 755882"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755883"];
133 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755884"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 755885"];
135 [label="LazyThreadSafetyMode.PublicationOnly 755886"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755887"];
137 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755888"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 755889"];
139 [label="LazyThreadSafetyMode.PublicationOnly 755890"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755891"];
141 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755892"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 755893"];
143 [label="LazyThreadSafetyMode.PublicationOnly 755894"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755895"];
145 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755896"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 755897"];
147 [label="LazyThreadSafetyMode.PublicationOnly 755898"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755899"];
149 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755900"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 755901"];
151 [label="LazyThreadSafetyMode.PublicationOnly 755902"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755903"];
153 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755904"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 755905"];
155 [label="LazyThreadSafetyMode.PublicationOnly 755906"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755907"];
157 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755908"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 755909"];
159 [label="LazyThreadSafetyMode.PublicationOnly 755910"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755911"];
161 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755912"];
162 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 755913"];
163 [label="LazyThreadSafetyMode.PublicationOnly 755914"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755915"];
165 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755916"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 755917"];
167 [label="LazyThreadSafetyMode.PublicationOnly 755918"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755919"];
169 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755920"];
170 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 755921"];
171 [label="LazyThreadSafetyMode.PublicationOnly 755922"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755923"];
173 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755924"];
174 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 755925"];
175 [label="LazyThreadSafetyMode.PublicationOnly 755926"];
176 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755927"];
177 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 755928"];
178 [label="@'R:\\Invalid.dll' 755929"];
179 [label="fullPath: @'R:\\Invalid.dll' 755930"];
180 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 755931"];
181 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 755932"];
182 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 755933"];
183 [label="MscorlibRef_v4_0_30316_17626 755934"];
184 [label="Net451.mscorlib 755935"];
185 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 755936"];
186 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 755937"];
187 [label="'/*<bind>*/' 755938"];
188 [label="StartString = '/*<bind>*/' 755939"];
189 [label="'/*</bind>*/' 755940"];
190 [label="EndString = '/*</bind>*/' 755941"];
191 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 755942"];
192 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 755943"];
193 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 755944"];
194 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 755945"];
195 [label="param CSharpTestBase(this) 755946"];
196 [label="param CommonTestBase(this) 755947"];
197 [label="param TestBase(this) 755948"];
198 [label="_temp 755949"];
199 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 755950"];
200 [label="param UseDefViolationInDelegateInSwitchWithGoto(this) 755951"];
201 [label="var source = @'\npublic class C\n{\n    public static void Main()\n    {\n        switch (5)\n        {\n            case 1:\n                System.Action a = delegate { int b; int c = b; }; // Error on b.\n            Lab:\n                break;\n            case 5:\n                goto Lab;\n        }\n    }\n}\n'; 755952"];
202 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,31): warning CS0162: Unreachable code detected\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'System'),\n                // (9,61): error CS0165: Use of unassigned local variable 'b'\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b')\n                ); 755953"];
203 [label="source 755954"];
204 [label="param operator(string source) 755955"];
205 [label="source 755956"];
206 [label="new CSharpTestSource(source) 755957"];
207 [label="param CSharpTestSource(object value) 755958"];
208 [label="param CSharpTestSource(this) 755959"];
209 [label="Value 755960"];
210 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,31): warning CS0162: Unreachable code detected\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'System'),\n                // (9,61): error CS0165: Use of unassigned local variable 'b'\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b')\n                ); 755961"];
211 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,31): warning CS0162: Unreachable code detected\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'System'),\n                // (9,61): error CS0165: Use of unassigned local variable 'b'\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b')\n                ); 755962"];
212 [label="CreateCompilation(source) 755963"];
213 [label="param CreateCompilation(CSharpTestSource source) 755964"];
214 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 755965"];
215 [label="param CreateCompilation(CSharpCompilationOptions options = null) 755966"];
216 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 755967"];
217 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 755968"];
218 [label="param CreateCompilation(string assemblyName = '') 755969"];
219 [label="param CreateCompilation(string sourceFileName = '') 755970"];
220 [label="param CreateCompilation(bool skipUsesIsNullable = false) 755971"];
221 [label="source 755972"];
222 [label="targetFramework 755973"];
223 [label="references 755974"];
224 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 755975"];
225 [label="param GetReferences(TargetFramework tf) 755976"];
226 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 755977"];
227 [label="var references = GetReferences(tf); 755978"];
228 [label="GetReferences(tf) 755979"];
229 [label="param GetReferences(TargetFramework targetFramework) 755980"];
230 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 755981"];
231 [label="StandardReferences 755982"];
232 [label="RuntimeUtilities.IsCoreClrRuntime 755983"];
233 [label="Mscorlib46ExtendedReferences 755984"];
234 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 755985"];
235 [label="TestBase.ValueTupleRef 755986"];
236 [label="TestReferences.NetFx.ValueTuple.tuplelib 755987"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 755988"];
238 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 755989"];
239 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 755990"];
240 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 755991"];
241 [label="return references; 755992"];
242 [label="options 755993"];
243 [label="parseOptions 755994"];
244 [label="assemblyName 755995"];
245 [label="sourceFileName 755996"];
246 [label="skipUsesIsNullable 755997"];
247 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 755998"];
248 [label="param CreateEmptyCompilation(CSharpTestSource source) 755999"];
249 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 756000"];
250 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 756001"];
251 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 756002"];
252 [label="param CreateEmptyCompilation(string assemblyName = '') 756003"];
253 [label="param CreateEmptyCompilation(string sourceFileName = '') 756004"];
254 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 756005"];
255 [label="source 756006"];
256 [label="references 756007"];
257 [label="options 756008"];
258 [label="parseOptions 756009"];
259 [label="assemblyName 756010"];
260 [label="sourceFileName 756011"];
261 [label="skipUsesIsNullable 756012"];
262 [label="null 756013"];
263 [label="experimentalFeature: null 756014"];
264 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 756015"];
265 [label="param CreateCompilationCore(CSharpTestSource source) 756016"];
266 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 756017"];
267 [label="param CreateCompilationCore(CSharpCompilationOptions options) 756018"];
268 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 756019"];
269 [label="param CreateCompilationCore(string assemblyName) 756020"];
270 [label="param CreateCompilationCore(string sourceFileName) 756021"];
271 [label="param CreateCompilationCore(bool skipUsesIsNullable) 756022"];
272 [label="param CreateCompilationCore(MessageID? experimentalFeature) 756023"];
273 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 756024"];
274 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 756025"];
275 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 756026"];
276 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 756027"];
277 [label="param GetSyntaxTrees(string sourceFileName = '') 756028"];
278 [label="param GetSyntaxTrees(this) 756029"];
279 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 756030"];
280 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 756031"];
281 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 756032"];
282 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 756033"];
283 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 756034"];
284 [label="param Parse(string text) 756035"];
285 [label="param Parse(string filename = '') 756036"];
286 [label="param Parse(CSharpParseOptions options = null) 756037"];
287 [label="param Parse(Encoding encoding = null) 756038"];
288 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 756039"];
289 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 756040"];
290 [label="kind: SourceCodeKind.Regular 756041"];
291 [label="documentationMode: DocumentationMode.Parse 756042"];
292 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 756043"];
293 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 756044"];
294 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 756045"];
295 [label="SourceCodeKind.Script 756046"];
296 [label="Regular.WithKind(SourceCodeKind.Script) 756047"];
297 [label="Script = Regular.WithKind(SourceCodeKind.Script) 756048"];
298 [label="LanguageVersion.CSharp6 756049"];
299 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 756050"];
300 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 756051"];
301 [label="LanguageVersion.CSharp7 756052"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 756053"];
303 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 756054"];
304 [label="LanguageVersion.CSharp7_1 756055"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 756056"];
306 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 756057"];
307 [label="LanguageVersion.CSharp7_2 756058"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 756059"];
309 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 756060"];
310 [label="LanguageVersion.CSharp7_3 756061"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 756062"];
312 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 756063"];
313 [label="LanguageVersion.Default 756064"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 756065"];
315 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 756066"];
316 [label="LanguageVersion.Preview 756067"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 756068"];
318 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 756069"];
319 [label="LanguageVersion.CSharp8 756070"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 756071"];
321 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 756072"];
322 [label="LanguageVersion.CSharp9 756073"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 756074"];
324 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 756075"];
325 [label="DocumentationMode.Diagnose 756076"];
326 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 756077"];
327 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 756078"];
328 [label="Regular 756079"];
329 [label="'UseLegacyStrongNameProvider' 756080"];
330 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 756081"];
331 [label="param WithFeature(this CSharpParseOptions options) 756082"];
332 [label="param WithFeature(string feature) 756083"];
333 [label="param WithFeature(string value = 'true') 756084"];
334 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 756085"];
335 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 756086"];
336 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 756087"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 756088"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 756089"];
339 [label="new[] { new KeyValuePair<string, string>(feature, value) } 756090"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 756091"];
341 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 756092"];
342 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 756093"];
343 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 756094"];
344 [label="1 756095"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 756096"];
346 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 756097"];
347 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 756098"];
348 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 756099"];
349 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 756100"];
350 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 756101"];
351 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 756102"];
352 [label="LanguageVersion.CSharp8 756103"];
353 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 756104"];
354 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 756105"];
355 [label="RegularWithExtendedPartialMethods = RegularPreview 756106"];
356 [label="new SmallDictionary<string, string> { } 756107"];
357 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 756108"];
358 [label="kind: SourceCodeKind.Regular 756109"];
359 [label="documentationMode: DocumentationMode.None 756110"];
360 [label="languageVersion: LanguageVersion.Preview 756111"];
361 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 756112"];
362 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 756113"];
363 [label="s_experimentalFeatures 756114"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 756115"];
365 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 756116"];
366 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 756117"];
367 [label="'testV7SwitchBinder' 756118"];
368 [label="'true' 756119"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 756120"];
370 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 756121"];
371 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 756122"];
372 [label="RegularWithoutRecursivePatterns = Regular7_3 756123"];
373 [label="RegularWithRecursivePatterns = Regular8 756124"];
374 [label="RegularWithoutPatternCombinators = Regular8 756125"];
375 [label="RegularWithPatternCombinators = RegularPreview 756126"];
376 [label="OutputKind.DynamicallyLinkedLibrary 756127"];
377 [label="OptimizationLevel.Release 756128"];
378 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 756129"];
379 [label="param CreateTestOptions(OutputKind outputKind) 756130"];
380 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 756131"];
381 [label="param CreateTestOptions(bool allowUnsafe = false) 756132"];
382 [label="outputKind 756133"];
383 [label="optimizationLevel: optimizationLevel 756134"];
384 [label="warningLevel: Diagnostic.MaxWarningLevel 756135"];
385 [label="allowUnsafe: allowUnsafe 756136"];
386 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756137"];
387 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756138"];
388 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 756139"];
389 [label="OutputKind.ConsoleApplication 756140"];
390 [label="OptimizationLevel.Release 756141"];
391 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 756142"];
392 [label="param CreateTestOptions(OutputKind outputKind) 756143"];
393 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 756144"];
394 [label="param CreateTestOptions(bool allowUnsafe = false) 756145"];
395 [label="outputKind 756146"];
396 [label="optimizationLevel: optimizationLevel 756147"];
397 [label="warningLevel: Diagnostic.MaxWarningLevel 756148"];
398 [label="allowUnsafe: allowUnsafe 756149"];
399 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756150"];
400 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756151"];
401 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 756152"];
402 [label="true 756153"];
403 [label="ReleaseDll.WithDebugPlusMode(true) 756154"];
404 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 756155"];
405 [label="true 756156"];
406 [label="ReleaseExe.WithDebugPlusMode(true) 756157"];
407 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 756158"];
408 [label="OutputKind.DynamicallyLinkedLibrary 756159"];
409 [label="OptimizationLevel.Debug 756160"];
410 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 756161"];
411 [label="param CreateTestOptions(OutputKind outputKind) 756162"];
412 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 756163"];
413 [label="param CreateTestOptions(bool allowUnsafe = false) 756164"];
414 [label="outputKind 756165"];
415 [label="optimizationLevel: optimizationLevel 756166"];
416 [label="warningLevel: Diagnostic.MaxWarningLevel 756167"];
417 [label="allowUnsafe: allowUnsafe 756168"];
418 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756169"];
419 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756170"];
420 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 756171"];
421 [label="OutputKind.ConsoleApplication 756172"];
422 [label="OptimizationLevel.Debug 756173"];
423 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 756174"];
424 [label="param CreateTestOptions(OutputKind outputKind) 756175"];
425 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 756176"];
426 [label="param CreateTestOptions(bool allowUnsafe = false) 756177"];
427 [label="outputKind 756178"];
428 [label="optimizationLevel: optimizationLevel 756179"];
429 [label="warningLevel: Diagnostic.MaxWarningLevel 756180"];
430 [label="allowUnsafe: allowUnsafe 756181"];
431 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756182"];
432 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756183"];
433 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 756184"];
434 [label="OutputKind.WindowsRuntimeMetadata 756185"];
435 [label="OptimizationLevel.Release 756186"];
436 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 756187"];
437 [label="param CreateTestOptions(OutputKind outputKind) 756188"];
438 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 756189"];
439 [label="param CreateTestOptions(bool allowUnsafe = false) 756190"];
440 [label="outputKind 756191"];
441 [label="optimizationLevel: optimizationLevel 756192"];
442 [label="warningLevel: Diagnostic.MaxWarningLevel 756193"];
443 [label="allowUnsafe: allowUnsafe 756194"];
444 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756195"];
445 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756196"];
446 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 756197"];
447 [label="OutputKind.WindowsRuntimeMetadata 756198"];
448 [label="OptimizationLevel.Debug 756199"];
449 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 756200"];
450 [label="param CreateTestOptions(OutputKind outputKind) 756201"];
451 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 756202"];
452 [label="param CreateTestOptions(bool allowUnsafe = false) 756203"];
453 [label="outputKind 756204"];
454 [label="optimizationLevel: optimizationLevel 756205"];
455 [label="warningLevel: Diagnostic.MaxWarningLevel 756206"];
456 [label="allowUnsafe: allowUnsafe 756207"];
457 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756208"];
458 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756209"];
459 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 756210"];
460 [label="OutputKind.NetModule 756211"];
461 [label="OptimizationLevel.Release 756212"];
462 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 756213"];
463 [label="param CreateTestOptions(OutputKind outputKind) 756214"];
464 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 756215"];
465 [label="param CreateTestOptions(bool allowUnsafe = false) 756216"];
466 [label="outputKind 756217"];
467 [label="optimizationLevel: optimizationLevel 756218"];
468 [label="warningLevel: Diagnostic.MaxWarningLevel 756219"];
469 [label="allowUnsafe: allowUnsafe 756220"];
470 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756221"];
471 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756222"];
472 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 756223"];
473 [label="OutputKind.NetModule 756224"];
474 [label="OptimizationLevel.Debug 756225"];
475 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 756226"];
476 [label="param CreateTestOptions(OutputKind outputKind) 756227"];
477 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 756228"];
478 [label="param CreateTestOptions(bool allowUnsafe = false) 756229"];
479 [label="outputKind 756230"];
480 [label="optimizationLevel: optimizationLevel 756231"];
481 [label="warningLevel: Diagnostic.MaxWarningLevel 756232"];
482 [label="allowUnsafe: allowUnsafe 756233"];
483 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756234"];
484 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 756235"];
485 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 756236"];
486 [label="true 756237"];
487 [label="ReleaseDll.WithAllowUnsafe(true) 756238"];
488 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 756239"];
489 [label="true 756240"];
490 [label="ReleaseExe.WithAllowUnsafe(true) 756241"];
491 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 756242"];
492 [label="true 756243"];
493 [label="DebugDll.WithAllowUnsafe(true) 756244"];
494 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 756245"];
495 [label="true 756246"];
496 [label="DebugExe.WithAllowUnsafe(true) 756247"];
497 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 756248"];
498 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 756249"];
499 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 756250"];
500 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 756251"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 756252"];
502 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 756253"];
503 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 756254"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 756255"];
505 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 756256"];
506 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 756257"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 756258"];
508 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 756259"];
509 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 756260"];
510 [label="DebugInformationFormat.Pdb 756261"];
511 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 756262"];
512 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 756263"];
513 [label="options = TestOptions.Regular; 756264"];
514 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 756265"];
515 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 756266"];
516 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 756267"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 756268"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 756269"];
519 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 756270"];
520 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 756271"];
521 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 756272"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 756273"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 756274"];
524 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 756275"];
525 [label="param CheckSerializable(SyntaxTree tree) 756276"];
526 [label="var stream = new MemoryStream(); 756277"];
527 [label="var root = tree.GetRoot(); 756278"];
528 [label="var root = tree.GetRoot(); 756279"];
529 [label="root.SerializeTo(stream); 756280"];
530 [label="root.SerializeTo(stream); 756281"];
531 [label="root.SerializeTo(stream); 756282"];
532 [label="stream.Position = 0; 756283"];
533 [label="stream.Position 756284"];
534 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 756285"];
535 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 756286"];
536 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 756287"];
537 [label="return tree; 756288"];
538 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 756289"];
539 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 756290"];
540 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 756291"];
541 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 756292"];
542 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 756293"];
543 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 756294"];
544 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 756295"];
545 [label="hasTopLevelStatements 756296"];
546 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 756297"];
547 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 756298"];
548 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 756299"];
549 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 756300"];
550 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 756301"];
551 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 756302"];
552 [label="param ValidateIOperations(Func<Compilation> createCompilation) 756303"];
553 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 756304"];
554 [label="return; 756305"];
555 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 756306"];
556 [label="var compilation = createCompilationLambda(); 756307"];
557 [label="var compilation = createCompilationLambda(); 756308"];
558 [label="return Guid.NewGuid().ToString('D'); 756309"];
559 [label="var compilation = createCompilationLambda(); 756310"];
560 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 756311"];
561 [label="IsNullableEnabled(compilation) 756312"];
562 [label="param IsNullableEnabled(CSharpCompilation compilation) 756313"];
563 [label="var trees = compilation.SyntaxTrees; 756314"];
564 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 756315"];
565 [label="var options = (CSharpParseOptions)trees[0].Options; 756316"];
566 [label="var options = (CSharpParseOptions)trees[0].Options; 756317"];
567 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 756318"];
568 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 756319"];
569 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 756320"];
570 [label="return compilation; 756321"];
571 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,31): warning CS0162: Unreachable code detected\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'System'),\n                // (9,61): error CS0165: Use of unassigned local variable 'b'\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b')\n                ); 756322"];
572 [label="Diagnostic(ErrorCode.WRN_UnreachableCode, 'System') 756323"];
573 [label="param Diagnostic(object code) 756324"];
574 [label="param Diagnostic(string squiggledText = null) 756325"];
575 [label="param Diagnostic(object[] arguments = null) 756326"];
576 [label="param Diagnostic(LinePosition? startLocation = null) 756327"];
577 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 756328"];
578 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 756329"];
579 [label="param Diagnostic(bool isSuppressed = false) 756330"];
580 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756331"];
581 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756332"];
582 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756333"];
583 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756334"];
584 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756335"];
585 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756336"];
586 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756337"];
587 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 756338"];
588 [label="param Diagnostic(object code) 756339"];
589 [label="param Diagnostic(string squiggledText = null) 756340"];
590 [label="param Diagnostic(object[] arguments = null) 756341"];
591 [label="param Diagnostic(LinePosition? startLocation = null) 756342"];
592 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 756343"];
593 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 756344"];
594 [label="param Diagnostic(bool isSuppressed = false) 756345"];
595 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 756346"];
596 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756347"];
597 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756348"];
598 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756349"];
599 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756350"];
600 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756351"];
601 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756352"];
602 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756353"];
603 [label="{ } 756354"];
604 [label="None = { } 756355"];
605 [label="null 756356"];
606 [label="Any = null 756357"];
607 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756358"];
608 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 756359"];
609 [label="param DiagnosticDescription(object code) 756360"];
610 [label="param DiagnosticDescription(bool isWarningAsError) 756361"];
611 [label="param DiagnosticDescription(string squiggledText) 756362"];
612 [label="param DiagnosticDescription(object[] arguments) 756363"];
613 [label="param DiagnosticDescription(LinePosition? startLocation) 756364"];
614 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 756365"];
615 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 756366"];
616 [label="param DiagnosticDescription(Type errorCodeType = null) 756367"];
617 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 756368"];
618 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 756369"];
619 [label="param DiagnosticDescription(bool isSuppressed = false) 756370"];
620 [label="param DiagnosticDescription(this) 756371"];
621 [label="_code 756372"];
622 [label="_isWarningAsError 756373"];
623 [label="_isSuppressed 756374"];
624 [label="_squiggledText 756375"];
625 [label="_arguments 756376"];
626 [label="_startPosition 756377"];
627 [label="_argumentOrderDoesNotMatter 756378"];
628 [label="_errorCodeType 756379"];
629 [label="_ignoreArgumentsWhenComparing 756380"];
630 [label="_defaultSeverityOpt 756381"];
631 [label="_effectiveSeverityOpt 756382"];
632 [label="_syntaxPredicate 756383"];
633 [label="_showPredicate 756384"];
634 [label="_location 756385"];
635 [label="_argumentsAsStrings 756386"];
636 [label="_code 756387"];
637 [label="_isWarningAsError 756388"];
638 [label="_squiggledText 756389"];
639 [label="_arguments 756390"];
640 [label="_startPosition 756391"];
641 [label="_syntaxPredicate 756392"];
642 [label="_argumentOrderDoesNotMatter 756393"];
643 [label="_errorCodeType = errorCodeType ?? code.GetType(); 756394"];
644 [label="_errorCodeType 756395"];
645 [label="_defaultSeverityOpt 756396"];
646 [label="_effectiveSeverityOpt 756397"];
647 [label="_isSuppressed 756398"];
648 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756399"];
649 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,31): warning CS0162: Unreachable code detected\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'System'),\n                // (9,61): error CS0165: Use of unassigned local variable 'b'\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b')\n                ); 756400"];
650 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'b') 756401"];
651 [label="param Diagnostic(object code) 756402"];
652 [label="param Diagnostic(string squiggledText = null) 756403"];
653 [label="param Diagnostic(object[] arguments = null) 756404"];
654 [label="param Diagnostic(LinePosition? startLocation = null) 756405"];
655 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 756406"];
656 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 756407"];
657 [label="param Diagnostic(bool isSuppressed = false) 756408"];
658 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756409"];
659 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756410"];
660 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756411"];
661 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756412"];
662 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756413"];
663 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756414"];
664 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756415"];
665 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 756416"];
666 [label="param Diagnostic(object code) 756417"];
667 [label="param Diagnostic(string squiggledText = null) 756418"];
668 [label="param Diagnostic(object[] arguments = null) 756419"];
669 [label="param Diagnostic(LinePosition? startLocation = null) 756420"];
670 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 756421"];
671 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 756422"];
672 [label="param Diagnostic(bool isSuppressed = false) 756423"];
673 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 756424"];
674 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756425"];
675 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756426"];
676 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756427"];
677 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756428"];
678 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756429"];
679 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756430"];
680 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756431"];
681 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 756432"];
682 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 756433"];
683 [label="param DiagnosticDescription(object code) 756434"];
684 [label="param DiagnosticDescription(bool isWarningAsError) 756435"];
685 [label="param DiagnosticDescription(string squiggledText) 756436"];
686 [label="param DiagnosticDescription(object[] arguments) 756437"];
687 [label="param DiagnosticDescription(LinePosition? startLocation) 756438"];
688 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 756439"];
689 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 756440"];
690 [label="param DiagnosticDescription(Type errorCodeType = null) 756441"];
691 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 756442"];
692 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 756443"];
693 [label="param DiagnosticDescription(bool isSuppressed = false) 756444"];
694 [label="param DiagnosticDescription(this) 756445"];
695 [label="_code 756446"];
696 [label="_isWarningAsError 756447"];
697 [label="_isSuppressed 756448"];
698 [label="_squiggledText 756449"];
699 [label="_arguments 756450"];
700 [label="_startPosition 756451"];
701 [label="_argumentOrderDoesNotMatter 756452"];
702 [label="_errorCodeType 756453"];
703 [label="_ignoreArgumentsWhenComparing 756454"];
704 [label="_defaultSeverityOpt 756455"];
705 [label="_effectiveSeverityOpt 756456"];
706 [label="_syntaxPredicate 756457"];
707 [label="_showPredicate 756458"];
708 [label="_location 756459"];
709 [label="_argumentsAsStrings 756460"];
710 [label="_code 756461"];
711 [label="_isWarningAsError 756462"];
712 [label="_squiggledText 756463"];
713 [label="_arguments 756464"];
714 [label="_startPosition 756465"];
715 [label="_syntaxPredicate 756466"];
716 [label="_argumentOrderDoesNotMatter 756467"];
717 [label="_errorCodeType = errorCodeType ?? code.GetType(); 756468"];
718 [label="_errorCodeType 756469"];
719 [label="_defaultSeverityOpt 756470"];
720 [label="_effectiveSeverityOpt 756471"];
721 [label="_isSuppressed 756472"];
722 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 756473"];
723 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,31): warning CS0162: Unreachable code detected\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'System'),\n                // (9,61): error CS0165: Use of unassigned local variable 'b'\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b')\n                ); 756474"];
724 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b') 756475"];
725 [label="Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b') 756476"];
726 [label="param WithArguments(params object[] arguments) 756477"];
727 [label="param WithArguments(this) 756478"];
728 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 756479"];
729 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 756480"];
730 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 756481"];
731 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 756482"];
732 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 756483"];
733 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 756484"];
734 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 756485"];
735 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 756486"];
736 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 756487"];
737 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 756488"];
738 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 756489"];
739 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 756490"];
740 [label="param DiagnosticDescription(object code) 756491"];
741 [label="param DiagnosticDescription(bool isWarningAsError) 756492"];
742 [label="param DiagnosticDescription(string squiggledText) 756493"];
743 [label="param DiagnosticDescription(object[] arguments) 756494"];
744 [label="param DiagnosticDescription(LinePosition? startLocation) 756495"];
745 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 756496"];
746 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 756497"];
747 [label="param DiagnosticDescription(Type errorCodeType = null) 756498"];
748 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 756499"];
749 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 756500"];
750 [label="param DiagnosticDescription(bool isSuppressed = false) 756501"];
751 [label="param DiagnosticDescription(this) 756502"];
752 [label="_code 756503"];
753 [label="_isWarningAsError 756504"];
754 [label="_isSuppressed 756505"];
755 [label="_squiggledText 756506"];
756 [label="_arguments 756507"];
757 [label="_startPosition 756508"];
758 [label="_argumentOrderDoesNotMatter 756509"];
759 [label="_errorCodeType 756510"];
760 [label="_ignoreArgumentsWhenComparing 756511"];
761 [label="_defaultSeverityOpt 756512"];
762 [label="_effectiveSeverityOpt 756513"];
763 [label="_syntaxPredicate 756514"];
764 [label="_showPredicate 756515"];
765 [label="_location 756516"];
766 [label="_argumentsAsStrings 756517"];
767 [label="_arguments 756518"];
768 [label="_argumentOrderDoesNotMatter 756519"];
769 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,31): warning CS0162: Unreachable code detected\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'System'),\n                // (9,61): error CS0165: Use of unassigned local variable 'b'\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b')\n                ); 756520"];
770 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,31): warning CS0162: Unreachable code detected\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'System'),\n                // (9,61): error CS0165: Use of unassigned local variable 'b'\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b')\n                ) 756521"];
771 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,31): warning CS0162: Unreachable code detected\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'System'),\n                // (9,61): error CS0165: Use of unassigned local variable 'b'\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b')\n                ) 756522"];
772 [label="CreateCompilation(source).VerifyDiagnostics(\n                // (9,31): warning CS0162: Unreachable code detected\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.WRN_UnreachableCode, 'System'),\n                // (9,61): error CS0165: Use of unassigned local variable 'b'\n                //                 System.Action a = delegate { int b; int c = b; }; // Error on b.\n                Diagnostic(ErrorCode.ERR_UseDefViolation, 'b').WithArguments('b')\n                ) 756523"];
773 [label="param VerifyDiagnostics(this TCompilation c) 756524"];
774 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 756525"];
775 [label="var diagnostics = c.GetDiagnostics(); 756526"];
776 [label="var diagnostics = c.GetDiagnostics(); 756527"];
777 [label="diagnostics.Verify(expected); 756528"];
778 [label="diagnostics.Verify(expected); 756529"];
779 [label="diagnostics.Verify(expected) 756530"];
780 [label="param Verify(this ImmutableArray<Diagnostic> actual) 756531"];
781 [label="param Verify(params DiagnosticDescription[] expected) 756532"];
782 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 756533"];
783 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 756534"];
784 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 756535"];
785 [label="param Verify(this IEnumerable<Diagnostic> actual) 756536"];
786 [label="param Verify(params DiagnosticDescription[] expected) 756537"];
787 [label="Verify(actual, expected, errorCodeOnly: false); 756538"];
788 [label="Verify(actual, expected, errorCodeOnly: false); 756539"];
789 [label="Verify(actual, expected, errorCodeOnly: false); 756540"];
790 [label="Verify(actual, expected, errorCodeOnly: false) 756541"];
791 [label="param Verify(IEnumerable<Diagnostic> actual) 756542"];
792 [label="param Verify(DiagnosticDescription[] expected) 756543"];
793 [label="param Verify(bool errorCodeOnly) 756544"];
794 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 756545"];
795 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 756546"];
796 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 756547"];
797 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 756548"];
798 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 756549"];
799 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 756550"];
800 [label="=> _defaultSeverityOpt 756551"];
801 [label="_defaultSeverityOpt 756552"];
802 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 756553"];
803 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 756554"];
804 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 756555"];
805 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 756556"];
806 [label="=> _effectiveSeverityOpt 756557"];
807 [label="_effectiveSeverityOpt 756558"];
808 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 756559"];
809 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 756560"];
810 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 756561"];
811 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 756562"];
812 [label="param DiagnosticDescription(Diagnostic d) 756563"];
813 [label="param DiagnosticDescription(bool errorCodeOnly) 756564"];
814 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 756565"];
815 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 756566"];
816 [label="param DiagnosticDescription(this) 756567"];
817 [label="_code 756568"];
818 [label="_isWarningAsError 756569"];
819 [label="_isSuppressed 756570"];
820 [label="_squiggledText 756571"];
821 [label="_arguments 756572"];
822 [label="_startPosition 756573"];
823 [label="_argumentOrderDoesNotMatter 756574"];
824 [label="_errorCodeType 756575"];
825 [label="_defaultSeverityOpt 756576"];
826 [label="_effectiveSeverityOpt 756577"];
827 [label="_syntaxPredicate 756578"];
828 [label="_code 756579"];
829 [label="_isWarningAsError 756580"];
830 [label="_isSuppressed 756581"];
831 [label="_location 756582"];
832 [label="includeDefaultSeverity 756583"];
833 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 756584"];
834 [label="_defaultSeverityOpt 756585"];
835 [label="includeEffectiveSeverity 756586"];
836 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 756587"];
837 [label="_effectiveSeverityOpt 756588"];
838 [label="DiagnosticWithInfo dinfo = null; 756589"];
839 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 756590"];
840 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 756591"];
841 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 756592"];
842 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 756593"];
843 [label="dinfo = d as DiagnosticWithInfo; 756594"];
844 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 756595"];
845 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 756596"];
846 [label="_errorCodeType 756597"];
847 [label="_code 756598"];
848 [label="_ignoreArgumentsWhenComparing 756599"];
849 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 756600"];
850 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 756601"];
851 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 756602"];
852 [label="_squiggledText 756603"];
853 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 756604"];
854 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 756605"];
855 [label="_arguments 756606"];
856 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 756607"];
857 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 756608"];
858 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 756609"];
859 [label="_arguments = null; 756610"];
860 [label="_arguments 756611"];
861 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 756612"];
862 [label="_startPosition 756613"];
863 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 756614"];
864 [label="_code 756615"];
865 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 756616"];
866 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 756617"];
867 [label="int index = unmatched.IndexOf(d); 756618"];
868 [label="int index = unmatched.IndexOf(d); 756619"];
869 [label="param Equals(object obj) 756620"];
870 [label="param Equals(this) 756621"];
871 [label="var d = obj as DiagnosticDescription; 756622"];
872 [label="if (d == null)\n                return false; 756623"];
873 [label="if (d == null)\n                return false; 756624"];
874 [label="if (!_code.Equals(d._code))\n                return false; 756625"];
875 [label="if (!_code.Equals(d._code))\n                return false; 756626"];
876 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 756627"];
877 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 756628"];
878 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 756629"];
879 [label="if (_squiggledText != d._squiggledText)\n                    return false; 756630"];
880 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 756631"];
881 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 756632"];
882 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 756633"];
883 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 756634"];
884 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 756635"];
885 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 756636"];
886 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 756637"];
887 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 756638"];
888 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 756639"];
889 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 756640"];
890 [label="if (d._arguments != null)\n                    return false; 756641"];
891 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 756642"];
892 [label="return true; 756643"];
893 [label="int index = unmatched.IndexOf(d); 756644"];
894 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 756645"];
895 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 756646"];
896 [label="unmatched.RemoveAt(index); 756647"];
897 [label="if (d == null)\n                return false; 756648"];
898 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 756649"];
899 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 756650"];
900 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 756651"];
901 [label="if (_squiggledText != d._squiggledText)\n                    return false; 756652"];
902 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 756653"];
903 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 756654"];
904 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 756655"];
905 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 756656"];
906 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 756657"];
907 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 756658"];
908 [label="if (d._arguments == null)\n                    return false; 756659"];
909 [label="GetArgumentsAsStrings() 756660"];
910 [label="param GetArgumentsAsStrings(this) 756661"];
911 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 756662"];
912 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 756663"];
913 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 756664"];
914 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 756665"];
915 [label="_argumentsAsStrings 756666"];
916 [label="return _argumentsAsStrings; 756667"];
917 [label="var args1 = GetArgumentsAsStrings(); 756668"];
918 [label="d.GetArgumentsAsStrings() 756669"];
919 [label="param GetArgumentsAsStrings(this) 756670"];
920 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 756671"];
921 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 756672"];
922 [label="return _argumentsAsStrings; 756673"];
923 [label="var args2 = d.GetArgumentsAsStrings(); 756674"];
924 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 756675"];
925 [label="if (!args1.SequenceEqual(args2))\n                        return false; 756676"];
926 [label="if (!args1.SequenceEqual(args2))\n                        return false; 756677"];
927 [label="if (!args1.SequenceEqual(args2))\n                        return false; 756678"];
928 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 756679"];
929 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 756680"];
930 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 756681"];
931 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 756682"];
932 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 756683"];
933 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 756684"];
934 [label="DiagnosticDescription.GetAssertText(expected, actual) 756685"];
935 [label="param GetAssertText(DiagnosticDescription[] expected) 756686"];
936 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 756687"];
937 [label="const int CSharp = 1; 756688"];
938 [label="const int VisualBasic = 2; 756689"];
939 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 756690"];
940 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 756691"];
941 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 756692"];
942 [label="actual.Any() && actual.First() is CSDiagnostic 756693"];
943 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 756694"];
944 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 756695"];
945 [label="int indentDepth = (language == CSharp) ? 4 : 1; 756696"];
946 [label="(language == CSharp) 756697"];
947 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 756698"];
948 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 756699"];
949 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 756700"];
950 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 756701"];
951 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 756702"];
952 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 756703"];
953 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 756704"];
954 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 756705"];
955 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 756706"];
956 [label="IsSortedOrEmpty(expected) 756707"];
957 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 756708"];
958 [label="new LinePositionComparer() 756709"];
959 [label="param LinePositionComparer(this) 756710"];
960 [label="Instance = new LinePositionComparer() 756711"];
961 [label="var comparer = LinePositionComparer.Instance; 756712"];
962 [label="DiagnosticDescription last = null; 756713"];
963 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 756714"];
964 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 756715"];
965 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 756716"];
966 [label="return false; 756717"];
967 [label="var assertText = new StringBuilder(); 756718"];
968 [label="assertText.AppendLine(); 756719"];
969 [label="int i; 756720"];
970 [label="assertText.AppendLine('Expected:'); 756721"];
971 [label="assertText.AppendLine('Expected:'); 756722"];
972 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 756723"];
973 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 756724"];
974 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 756725"];
975 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 756726"];
976 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 756727"];
977 [label="GetDiagnosticDescription(d, indentDepth) 756728"];
978 [label="param GetDiagnosticDescription(DiagnosticDescription d) 756729"];
979 [label="param GetDiagnosticDescription(int indentDepth) 756730"];
980 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756731"];
981 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756732"];
982 [label="d.ToString() 756733"];
983 [label="param ToString(this) 756734"];
984 [label="var sb = new StringBuilder(); 756735"];
985 [label="sb.Append('Diagnostic('); 756736"];
986 [label="sb.Append('Diagnostic('); 756737"];
987 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 756738"];
988 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 756739"];
989 [label="sb.Append(_errorCodeType.Name); 756740"];
990 [label="sb.Append(_errorCodeType.Name); 756741"];
991 [label="sb.Append('.'); 756742"];
992 [label="sb.Append('.'); 756743"];
993 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 756744"];
994 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 756745"];
995 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 756746"];
996 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 756747"];
997 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 756748"];
998 [label="sb.Append(', \\''); 756749"];
999 [label="sb.Append(', \\''); 756750"];
1000 [label="sb.Append(_squiggledText); 756751"];
1001 [label="sb.Append(_squiggledText); 756752"];
1002 [label="sb.Append('''); 756753"];
1003 [label="sb.Append('''); 756754"];
1004 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 756755"];
1005 [label="sb.Append(')'); 756756"];
1006 [label="sb.Append(')'); 756757"];
1007 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 756758"];
1008 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 756759"];
1009 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 756760"];
1010 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 756761"];
1011 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 756762"];
1012 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 756763"];
1013 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 756764"];
1014 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 756765"];
1015 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 756766"];
1016 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 756767"];
1017 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 756768"];
1018 [label="return sb.ToString(); 756769"];
1019 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756770"];
1020 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756771"];
1021 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 756772"];
1022 [label="sb.Append('.WithArguments('); 756773"];
1023 [label="sb.Append('.WithArguments('); 756774"];
1024 [label="GetArgumentsAsStrings() 756775"];
1025 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 756776"];
1026 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 756777"];
1027 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 756778"];
1028 [label="sb.Append('\\''); 756779"];
1029 [label="sb.Append('\\''); 756780"];
1030 [label="sb.Append(argumentStrings.Current); 756781"];
1031 [label="sb.Append(argumentStrings.Current); 756782"];
1032 [label="sb.Append('\\''); 756783"];
1033 [label="sb.Append('\\''); 756784"];
1034 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 756785"];
1035 [label="sb.Append(')'); 756786"];
1036 [label="sb.Append(')'); 756787"];
1037 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 756788"];
1038 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 756789"];
1039 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 756790"];
1040 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 756791"];
1041 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 756792"];
1042 [label="return sb.ToString(); 756793"];
1043 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756794"];
1044 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756795"];
1045 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 756796"];
1046 [label="GetCommaSeparatedLines(assertText, expectedText); 756797"];
1047 [label="GetCommaSeparatedLines(assertText, expectedText); 756798"];
1048 [label="GetCommaSeparatedLines(assertText, expectedText) 756799"];
1049 [label="param GetCommaSeparatedLines(StringBuilder sb) 756800"];
1050 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 756801"];
1051 [label="int n = lines.Count; 756802"];
1052 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 756803"];
1053 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 756804"];
1054 [label="sb.Append(lines[i]); 756805"];
1055 [label="sb.Append(lines[i]); 756806"];
1056 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 756807"];
1057 [label="sb.Append(','); 756808"];
1058 [label="sb.Append(','); 756809"];
1059 [label="sb.AppendLine(); 756810"];
1060 [label="GetCommaSeparatedLines(assertText, expectedText); 756811"];
1061 [label="assertText.AppendLine('Actual:'); 756812"];
1062 [label="assertText.AppendLine('Actual:'); 756813"];
1063 [label="var actualText = ArrayBuilder<string>.GetInstance(); 756814"];
1064 [label="var e = actual.GetEnumerator(); 756815"];
1065 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 756816"];
1066 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 756817"];
1067 [label="Diagnostic d = e.Current; 756818"];
1068 [label="string message = d.ToString(); 756819"];
1069 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 756820"];
1070 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 756821"];
1071 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 756822"];
1072 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 756823"];
1073 [label="Indent(assertText, indentDepth); 756824"];
1074 [label="Indent(assertText, indentDepth); 756825"];
1075 [label="Indent(assertText, indentDepth) 756826"];
1076 [label="param Indent(StringBuilder sb) 756827"];
1077 [label="param Indent(int count) 756828"];
1078 [label="sb.Append(' ', 4 * count); 756829"];
1079 [label="sb.Append(' ', 4 * count); 756830"];
1080 [label="sb.Append(' ', 4 * count); 756831"];
1081 [label="Indent(assertText, indentDepth); 756832"];
1082 [label="assertText.Append('// '); 756833"];
1083 [label="assertText.Append('// '); 756834"];
1084 [label="assertText.AppendLine(d.ToString()); 756835"];
1085 [label="assertText.AppendLine(d.ToString()); 756836"];
1086 [label="var l = d.Location; 756837"];
1087 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 756838"];
1088 [label="Indent(assertText, indentDepth); 756839"];
1089 [label="Indent(assertText, indentDepth); 756840"];
1090 [label="Indent(assertText, indentDepth) 756841"];
1091 [label="param Indent(StringBuilder sb) 756842"];
1092 [label="param Indent(int count) 756843"];
1093 [label="sb.Append(' ', 4 * count); 756844"];
1094 [label="sb.Append(' ', 4 * count); 756845"];
1095 [label="sb.Append(' ', 4 * count); 756846"];
1096 [label="Indent(assertText, indentDepth); 756847"];
1097 [label="assertText.Append('// '); 756848"];
1098 [label="assertText.Append('// '); 756849"];
1099 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 756850"];
1100 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 756851"];
1101 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 756852"];
1102 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 756853"];
1103 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 756854"];
1104 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 756855"];
1105 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 756856"];
1106 [label="param DiagnosticDescription(Diagnostic d) 756857"];
1107 [label="param DiagnosticDescription(bool errorCodeOnly) 756858"];
1108 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 756859"];
1109 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 756860"];
1110 [label="param DiagnosticDescription(this) 756861"];
1111 [label="_code 756862"];
1112 [label="_isWarningAsError 756863"];
1113 [label="_isSuppressed 756864"];
1114 [label="_squiggledText 756865"];
1115 [label="_arguments 756866"];
1116 [label="_startPosition 756867"];
1117 [label="_errorCodeType 756868"];
1118 [label="_defaultSeverityOpt 756869"];
1119 [label="_effectiveSeverityOpt 756870"];
1120 [label="_code 756871"];
1121 [label="_isWarningAsError 756872"];
1122 [label="_isSuppressed 756873"];
1123 [label="_location 756874"];
1124 [label="DiagnosticWithInfo dinfo = null; 756875"];
1125 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 756876"];
1126 [label="var diffDescription = description; 756877"];
1127 [label="var idx = Array.IndexOf(expected, description); 756878"];
1128 [label="var idx = Array.IndexOf(expected, description); 756879"];
1129 [label="var idx = Array.IndexOf(expected, description); 756880"];
1130 [label="var idx = Array.IndexOf(expected, description); 756881"];
1131 [label="if (d == null)\n                return false; 756882"];
1132 [label="if (d == null)\n                return false; 756883"];
1133 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 756884"];
1134 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 756885"];
1135 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 756886"];
1136 [label="if (_squiggledText != d._squiggledText)\n                    return false; 756887"];
1137 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 756888"];
1138 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 756889"];
1139 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 756890"];
1140 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 756891"];
1141 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 756892"];
1142 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 756893"];
1143 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 756894"];
1144 [label="if (d._arguments != null)\n                    return false; 756895"];
1145 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 756896"];
1146 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 756897"];
1147 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 756898"];
1148 [label="diffDescription = expected[idx]; 756899"];
1149 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 756900"];
1150 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 756901"];
1151 [label="GetDiagnosticDescription(description, indentDepth) 756902"];
1152 [label="param GetDiagnosticDescription(DiagnosticDescription d) 756903"];
1153 [label="param GetDiagnosticDescription(int indentDepth) 756904"];
1154 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756905"];
1155 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756906"];
1156 [label="var sb = new StringBuilder(); 756907"];
1157 [label="sb.Append('Diagnostic('); 756908"];
1158 [label="sb.Append('Diagnostic('); 756909"];
1159 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 756910"];
1160 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 756911"];
1161 [label="sb.Append(_errorCodeType.Name); 756912"];
1162 [label="sb.Append(_errorCodeType.Name); 756913"];
1163 [label="sb.Append('.'); 756914"];
1164 [label="sb.Append('.'); 756915"];
1165 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 756916"];
1166 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 756917"];
1167 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 756918"];
1168 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 756919"];
1169 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 756920"];
1170 [label="sb.Append(', \\''); 756921"];
1171 [label="sb.Append(', \\''); 756922"];
1172 [label="sb.Append(_squiggledText); 756923"];
1173 [label="sb.Append(_squiggledText); 756924"];
1174 [label="sb.Append('''); 756925"];
1175 [label="sb.Append('''); 756926"];
1176 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 756927"];
1177 [label="sb.Append(')'); 756928"];
1178 [label="sb.Append(')'); 756929"];
1179 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 756930"];
1180 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 756931"];
1181 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 756932"];
1182 [label="sb.Append('.WithLocation('); 756933"];
1183 [label="sb.Append('.WithLocation('); 756934"];
1184 [label="sb.Append(_startPosition.Value.Line + 1); 756935"];
1185 [label="sb.Append(_startPosition.Value.Line + 1); 756936"];
1186 [label="sb.Append(', '); 756937"];
1187 [label="sb.Append(', '); 756938"];
1188 [label="sb.Append(_startPosition.Value.Character + 1); 756939"];
1189 [label="sb.Append(_startPosition.Value.Character + 1); 756940"];
1190 [label="sb.Append(')'); 756941"];
1191 [label="sb.Append(')'); 756942"];
1192 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 756943"];
1193 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 756944"];
1194 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 756945"];
1195 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 756946"];
1196 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 756947"];
1197 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 756948"];
1198 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 756949"];
1199 [label="return sb.ToString(); 756950"];
1200 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756951"];
1201 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756952"];
1202 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 756953"];
1203 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 756954"];
1204 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 756955"];
1205 [label="GetDiagnosticDescription(diffDescription, indentDepth) 756956"];
1206 [label="param GetDiagnosticDescription(DiagnosticDescription d) 756957"];
1207 [label="param GetDiagnosticDescription(int indentDepth) 756958"];
1208 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756959"];
1209 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756960"];
1210 [label="var sb = new StringBuilder(); 756961"];
1211 [label="sb.Append('Diagnostic('); 756962"];
1212 [label="sb.Append('Diagnostic('); 756963"];
1213 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 756964"];
1214 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 756965"];
1215 [label="sb.Append(_errorCodeType.Name); 756966"];
1216 [label="sb.Append(_errorCodeType.Name); 756967"];
1217 [label="sb.Append('.'); 756968"];
1218 [label="sb.Append('.'); 756969"];
1219 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 756970"];
1220 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 756971"];
1221 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 756972"];
1222 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 756973"];
1223 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 756974"];
1224 [label="sb.Append(', \\''); 756975"];
1225 [label="sb.Append(', \\''); 756976"];
1226 [label="sb.Append(_squiggledText); 756977"];
1227 [label="sb.Append(_squiggledText); 756978"];
1228 [label="sb.Append('''); 756979"];
1229 [label="sb.Append('''); 756980"];
1230 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 756981"];
1231 [label="sb.Append(')'); 756982"];
1232 [label="sb.Append(')'); 756983"];
1233 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 756984"];
1234 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 756985"];
1235 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 756986"];
1236 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 756987"];
1237 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 756988"];
1238 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 756989"];
1239 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 756990"];
1240 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 756991"];
1241 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 756992"];
1242 [label="return sb.ToString(); 756993"];
1243 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756994"];
1244 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 756995"];
1245 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 756996"];
1246 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 756997"];
1247 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 756998"];
1248 [label="assertText.AppendLine(','); 756999"];
1249 [label="assertText.AppendLine(','); 757000"];
1250 [label="Indent(assertText, indentDepth); 757001"];
1251 [label="Indent(assertText, indentDepth); 757002"];
1252 [label="Indent(assertText, indentDepth) 757003"];
1253 [label="param Indent(StringBuilder sb) 757004"];
1254 [label="param Indent(int count) 757005"];
1255 [label="sb.Append(' ', 4 * count); 757006"];
1256 [label="sb.Append(' ', 4 * count); 757007"];
1257 [label="Indent(assertText, indentDepth); 757008"];
1258 [label="assertText.Append('// '); 757009"];
1259 [label="Indent(assertText, indentDepth); 757010"];
1260 [label="Indent(assertText, indentDepth); 757011"];
1261 [label="Indent(assertText, indentDepth) 757012"];
1262 [label="param Indent(StringBuilder sb) 757013"];
1263 [label="param Indent(int count) 757014"];
1264 [label="sb.Append(' ', 4 * count); 757015"];
1265 [label="sb.Append(' ', 4 * count); 757016"];
1266 [label="Indent(assertText, indentDepth); 757017"];
1267 [label="assertText.Append('// '); 757018"];
1268 [label="_code 757019"];
1269 [label="_isWarningAsError 757020"];
1270 [label="_isSuppressed 757021"];
1271 [label="_squiggledText 757022"];
1272 [label="_arguments 757023"];
1273 [label="_startPosition 757024"];
1274 [label="_errorCodeType 757025"];
1275 [label="_defaultSeverityOpt 757026"];
1276 [label="_effectiveSeverityOpt 757027"];
1277 [label="_code 757028"];
1278 [label="DiagnosticWithInfo dinfo = null; 757029"];
1279 [label="var diffDescription = description; 757030"];
1280 [label="if (d == null)\n                return false; 757031"];
1281 [label="return false; 757032"];
1282 [label="if (d == null)\n                return false; 757033"];
1283 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 757034"];
1284 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 757035"];
1285 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 757036"];
1286 [label="if (_squiggledText != d._squiggledText)\n                    return false; 757037"];
1287 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 757038"];
1288 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 757039"];
1289 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 757040"];
1290 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 757041"];
1291 [label="if (d._arguments == null)\n                    return false; 757042"];
1292 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 757043"];
1293 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 757044"];
1294 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 757045"];
1295 [label="diffDescription = expected[idx]; 757046"];
1296 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 757047"];
1297 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 757048"];
1298 [label="GetDiagnosticDescription(description, indentDepth) 757049"];
1299 [label="param GetDiagnosticDescription(DiagnosticDescription d) 757050"];
1300 [label="param GetDiagnosticDescription(int indentDepth) 757051"];
1301 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 757052"];
1302 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 757053"];
1303 [label="var sb = new StringBuilder(); 757054"];
1304 [label="sb.Append('Diagnostic('); 757055"];
1305 [label="sb.Append('Diagnostic('); 757056"];
1306 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 757057"];
1307 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 757058"];
1308 [label="sb.Append(_errorCodeType.Name); 757059"];
1309 [label="sb.Append(_errorCodeType.Name); 757060"];
1310 [label="sb.Append('.'); 757061"];
1311 [label="sb.Append('.'); 757062"];
1312 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 757063"];
1313 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 757064"];
1314 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 757065"];
1315 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 757066"];
1316 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 757067"];
1317 [label="sb.Append(', \\''); 757068"];
1318 [label="sb.Append(', \\''); 757069"];
1319 [label="sb.Append(_squiggledText); 757070"];
1320 [label="sb.Append(_squiggledText); 757071"];
1321 [label="sb.Append('''); 757072"];
1322 [label="sb.Append('''); 757073"];
1323 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 757074"];
1324 [label="sb.Append(')'); 757075"];
1325 [label="sb.Append(')'); 757076"];
1326 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 757077"];
1327 [label="sb.Append('.WithArguments('); 757078"];
1328 [label="sb.Append('.WithArguments('); 757079"];
1329 [label="sb.Append('\\''); 757080"];
1330 [label="sb.Append('\\''); 757081"];
1331 [label="sb.Append(argumentStrings.Current); 757082"];
1332 [label="sb.Append(argumentStrings.Current); 757083"];
1333 [label="sb.Append('\\''); 757084"];
1334 [label="sb.Append('\\''); 757085"];
1335 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 757086"];
1336 [label="sb.Append(')'); 757087"];
1337 [label="sb.Append(')'); 757088"];
1338 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 757089"];
1339 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 757090"];
1340 [label="sb.Append('.WithLocation('); 757091"];
1341 [label="sb.Append('.WithLocation('); 757092"];
1342 [label="sb.Append(_startPosition.Value.Line + 1); 757093"];
1343 [label="sb.Append(_startPosition.Value.Line + 1); 757094"];
1344 [label="sb.Append(', '); 757095"];
1345 [label="sb.Append(', '); 757096"];
1346 [label="sb.Append(_startPosition.Value.Character + 1); 757097"];
1347 [label="sb.Append(_startPosition.Value.Character + 1); 757098"];
1348 [label="sb.Append(')'); 757099"];
1349 [label="sb.Append(')'); 757100"];
1350 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 757101"];
1351 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 757102"];
1352 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 757103"];
1353 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 757104"];
1354 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 757105"];
1355 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 757106"];
1356 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 757107"];
1357 [label="return sb.ToString(); 757108"];
1358 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 757109"];
1359 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 757110"];
1360 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 757111"];
1361 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 757112"];
1362 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 757113"];
1363 [label="GetDiagnosticDescription(diffDescription, indentDepth) 757114"];
1364 [label="param GetDiagnosticDescription(DiagnosticDescription d) 757115"];
1365 [label="param GetDiagnosticDescription(int indentDepth) 757116"];
1366 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 757117"];
1367 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 757118"];
1368 [label="var sb = new StringBuilder(); 757119"];
1369 [label="sb.Append('Diagnostic('); 757120"];
1370 [label="sb.Append('Diagnostic('); 757121"];
1371 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 757122"];
1372 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 757123"];
1373 [label="sb.Append(_errorCodeType.Name); 757124"];
1374 [label="sb.Append(_errorCodeType.Name); 757125"];
1375 [label="sb.Append('.'); 757126"];
1376 [label="sb.Append('.'); 757127"];
1377 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 757128"];
1378 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 757129"];
1379 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 757130"];
1380 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 757131"];
1381 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 757132"];
1382 [label="sb.Append(', \\''); 757133"];
1383 [label="sb.Append(', \\''); 757134"];
1384 [label="sb.Append(_squiggledText); 757135"];
1385 [label="sb.Append(_squiggledText); 757136"];
1386 [label="sb.Append('''); 757137"];
1387 [label="sb.Append('''); 757138"];
1388 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 757139"];
1389 [label="sb.Append(')'); 757140"];
1390 [label="sb.Append(')'); 757141"];
1391 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 757142"];
1392 [label="sb.Append('.WithArguments('); 757143"];
1393 [label="sb.Append('.WithArguments('); 757144"];
1394 [label="sb.Append('\\''); 757145"];
1395 [label="sb.Append('\\''); 757146"];
1396 [label="sb.Append(argumentStrings.Current); 757147"];
1397 [label="sb.Append(argumentStrings.Current); 757148"];
1398 [label="sb.Append('\\''); 757149"];
1399 [label="sb.Append('\\''); 757150"];
1400 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 757151"];
1401 [label="sb.Append(')'); 757152"];
1402 [label="sb.Append(')'); 757153"];
1403 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 757154"];
1404 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 757155"];
1405 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 757156"];
1406 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 757157"];
1407 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 757158"];
1408 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 757159"];
1409 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 757160"];
1410 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 757161"];
1411 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 757162"];
1412 [label="return sb.ToString(); 757163"];
1413 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 757164"];
1414 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 757165"];
1415 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 757166"];
1416 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 757167"];
1417 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 757168"];
1418 [label="assertText.AppendLine(); 757169"];
1419 [label="assertText.AppendLine('Diff:'); 757170"];
1420 [label="assertText.AppendLine('Diff:'); 757171"];
1421 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 757172"];
1422 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 757173"];
1423 [label="new[] { '\\r', '\\n' } 757174"];
1424 [label="'\\r' 757175"];
1425 [label="'\\n' 757176"];
1426 [label="new[] { '\\r', '\\n' } 757177"];
1427 [label="new[] { '\\r', '\\n' } 757178"];
1428 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 757179"];
1429 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 757180"];
1430 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 757181"];
1431 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 757182"];
1432 [label="param DiffReport(IEnumerable<T> expected) 757183"];
1433 [label="param DiffReport(IEnumerable<T> actual) 757184"];
1434 [label="param DiffReport(string separator) 757185"];
1435 [label="param DiffReport(IEqualityComparer<T> comparer = null) 757186"];
1436 [label="param DiffReport(Func<T, string> toString = null) 757187"];
1437 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 757188"];
1438 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 757189"];
1439 [label="(comparer != null) 757190"];
1440 [label="EqualityComparer<T>.Default 757191"];
1441 [label="new LCS<T>(EqualityComparer<T>.Default) 757192"];
1442 [label="param LCS(IEqualityComparer<T> comparer) 757193"];
1443 [label="param LCS(this) 757194"];
1444 [label="1 757195"];
1445 [label="DeleteCost = 1 757196"];
1446 [label="1 757197"];
1447 [label="InsertCost = 1 757198"];
1448 [label="2 757199"];
1449 [label="UpdateCost = 2 757200"];
1450 [label="param LongestCommonSubsequence(this) 757201"];
1451 [label="_comparer 757202"];
1452 [label="_comparer 757203"];
1453 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 757204"];
1454 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 757205"];
1455 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 757206"];
1456 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 757207"];
1457 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 757208"];
1458 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 757209"];
1459 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 757210"];
1460 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 757211"];
1461 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 757212"];
1462 [label="lcs.CalculateDiff(expectedList, actualList, toString) 757213"];
1463 [label="param CalculateDiff(IList<T> sequenceA) 757214"];
1464 [label="param CalculateDiff(IList<T> sequenceB) 757215"];
1465 [label="param CalculateDiff(Func<T, string> toString) 757216"];
1466 [label="param CalculateDiff(this) 757217"];
1467 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 757218"];
1468 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 757219"];
1469 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 757220"];
1470 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 757221"];
1471 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 757222"];
1472 [label="param GetEdits(TSequence sequenceA) 757223"];
1473 [label="param GetEdits(int lengthA) 757224"];
1474 [label="param GetEdits(TSequence sequenceB) 757225"];
1475 [label="param GetEdits(int lengthB) 757226"];
1476 [label="param GetEdits(this) 757227"];
1477 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 757228"];
1478 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 757229"];
1479 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 757230"];
1480 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 757231"];
1481 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 757232"];
1482 [label="param ComputeCostMatrix(TSequence sequenceA) 757233"];
1483 [label="param ComputeCostMatrix(int lengthA) 757234"];
1484 [label="param ComputeCostMatrix(TSequence sequenceB) 757235"];
1485 [label="param ComputeCostMatrix(int lengthB) 757236"];
1486 [label="param ComputeCostMatrix(this) 757237"];
1487 [label="var la = lengthA + 1; 757238"];
1488 [label="var la = lengthA + 1; 757239"];
1489 [label="var lb = lengthB + 1; 757240"];
1490 [label="var lb = lengthB + 1; 757241"];
1491 [label="var d = new int[la, lb]; 757242"];
1492 [label="d[0, 0] = 0; 757243"];
1493 [label="d[0, 0] 757244"];
1494 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 757245"];
1495 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 757246"];
1496 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 757247"];
1497 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 757248"];
1498 [label="d[i, 0] 757249"];
1499 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 757250"];
1500 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 757251"];
1501 [label="d[0, j] = d[0, j - 1] + InsertCost; 757252"];
1502 [label="d[0, j] = d[0, j - 1] + InsertCost; 757253"];
1503 [label="d[0, j] 757254"];
1504 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 757255"];
1505 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 757256"];
1506 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 757257"];
1507 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 757258"];
1508 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 757259"];
1509 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 757260"];
1510 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 757261"];
1511 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 757262"];
1512 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 757263"];
1513 [label="param ItemsEqual(IList<T> sequenceA) 757264"];
1514 [label="param ItemsEqual(int indexA) 757265"];
1515 [label="param ItemsEqual(IList<T> sequenceB) 757266"];
1516 [label="param ItemsEqual(int indexB) 757267"];
1517 [label="param ItemsEqual(this) 757268"];
1518 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 757269"];
1519 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 757270"];
1520 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 757271"];
1521 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 757272"];
1522 [label="int m2 = d[i - 1, j] + DeleteCost; 757273"];
1523 [label="int m2 = d[i - 1, j] + DeleteCost; 757274"];
1524 [label="int m3 = d[i, j - 1] + InsertCost; 757275"];
1525 [label="int m3 = d[i, j - 1] + InsertCost; 757276"];
1526 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 757277"];
1527 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 757278"];
1528 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 757279"];
1529 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 757280"];
1530 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 757281"];
1531 [label="d[i, j] 757282"];
1532 [label="return d; 757283"];
1533 [label="int i = lengthA; 757284"];
1534 [label="int j = lengthB; 757285"];
1535 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 757286"];
1536 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 757287"];
1537 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 757288"];
1538 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 757289"];
1539 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 757290"];
1540 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 757291"];
1541 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 757292"];
1542 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 757293"];
1543 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 757294"];
1544 [label="i--; 757295"];
1545 [label="j--; 757296"];
1546 [label="yield return new Edit(EditKind.Update, i, j); 757297"];
1547 [label="yield return new Edit(EditKind.Update, i, j); 757298"];
1548 [label="yield return new Edit(EditKind.Update, i, j); 757299"];
1549 [label="yield return new Edit(EditKind.Update, i, j); 757300"];
1550 [label="new Edit(EditKind.Update, i, j) 757301"];
1551 [label="param Edit(EditKind kind) 757302"];
1552 [label="param Edit(int indexA) 757303"];
1553 [label="param Edit(int indexB) 757304"];
1554 [label="param Edit(this) 757305"];
1555 [label="this.Kind 757306"];
1556 [label="this.IndexA 757307"];
1557 [label="this.IndexB 757308"];
1558 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 757309"];
1559 [label="yield return new Edit(EditKind.Update, i, j); 757310"];
1560 [label="yield return new Edit(EditKind.Update, i, j); 757311"];
1561 [label="new Edit(EditKind.Update, i, j) 757312"];
1562 [label="param Edit(EditKind kind) 757313"];
1563 [label="param Edit(int indexA) 757314"];
1564 [label="param Edit(int indexB) 757315"];
1565 [label="param Edit(this) 757316"];
1566 [label="this.Kind 757317"];
1567 [label="this.IndexA 757318"];
1568 [label="this.IndexB 757319"];
1569 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 757320"];
1570 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 757321"];
1571 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 757322"];
1572 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 757323"];
1573 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 757324"];
1574 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 757325"];
1575 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 757326"];
1576 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 757327"];
1577 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 757328"];
1578 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 757329"];
1579 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 757330"];
1580 [label="actualText.Free(); 757331"];
1581 [label="expectedText.Free(); 757332"];
1582 [label="return assertText.ToString(); 757333"];
1583 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 757334"];
1584 [label="diagnostics.Verify(expected); 757335"];
1585 [label="VerifyAssemblyIds(c, diagnostics); 757336"];
1586 [label="VerifyAssemblyIds(c, diagnostics); 757337"];
1587 [label="VerifyAssemblyIds(c, diagnostics) 757338"];
1588 [label="param VerifyAssemblyIds(TCompilation c) 757339"];
1589 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 757340"];
1590 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 757341"];
1591 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 757342"];
1592 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 757343"];
1593 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 757344"];
1594 [label="CustomAssert.True(assemblyIds.IsEmpty); 757345"];
1595 [label="CustomAssert.True(assemblyIds.IsEmpty); 757346"];
1596 [label="VerifyAssemblyIds(c, diagnostics); 757347"];
1597 [label="return c; 757348"];
2 -> 0;
2 -> 1;
4 -> 3;
6 -> 5;
7 -> 1;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
43 -> 42;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 0;
49 -> 48;
50 -> 0;
51 -> 0;
52 -> 50;
52 -> 51;
52 -> 48;
53 -> 52;
54 -> 0;
55 -> 54;
56 -> 55;
56 -> 54;
57 -> 56;
59 -> 0;
60 -> 58;
60 -> 59;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 0;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 52;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 72;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 0;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 76;
93 -> 92;
94 -> 0;
95 -> 0;
96 -> 94;
96 -> 95;
96 -> 0;
97 -> 96;
99 -> 0;
100 -> 98;
100 -> 99;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 92;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 0;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 104;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 136;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 0;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 140;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 0;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 152;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
174 -> 0;
175 -> 0;
176 -> 174;
176 -> 175;
176 -> 0;
177 -> 176;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
184 -> 0;
184 -> 183;
185 -> 184;
185 -> 0;
186 -> 185;
188 -> 187;
190 -> 189;
192 -> 191;
194 -> 193;
195 -> 7;
196 -> 195;
197 -> 196;
198 -> 197;
198 -> 196;
199 -> 1;
199 -> 2;
199 -> 198;
200 -> 1;
201 -> 1;
202 -> 201;
202 -> 1;
203 -> 1;
204 -> 202;
204 -> 203;
205 -> 204;
205 -> 203;
206 -> 203;
207 -> 205;
207 -> 206;
208 -> 206;
209 -> 207;
209 -> 208;
209 -> 206;
210 -> 206;
210 -> 1;
211 -> 1;
212 -> 1;
213 -> 210;
213 -> 212;
214 -> 211;
214 -> 212;
215 -> 211;
215 -> 212;
216 -> 211;
216 -> 212;
217 -> 211;
217 -> 212;
218 -> 211;
218 -> 212;
219 -> 211;
219 -> 212;
220 -> 211;
220 -> 212;
221 -> 213;
221 -> 212;
222 -> 217;
222 -> 212;
223 -> 214;
223 -> 212;
224 -> 212;
225 -> 222;
225 -> 224;
226 -> 223;
226 -> 224;
227 -> 225;
227 -> 224;
228 -> 224;
229 -> 227;
229 -> 228;
230 -> 229;
230 -> 228;
231 -> 230;
232 -> 0;
232 -> 231;
233 -> 232;
234 -> 233;
235 -> 233;
236 -> 0;
236 -> 235;
237 -> 236;
237 -> 234;
237 -> 233;
238 -> 237;
238 -> 231;
239 -> 224;
240 -> 226;
240 -> 239;
240 -> 224;
241 -> 238;
241 -> 240;
242 -> 215;
242 -> 212;
243 -> 216;
243 -> 212;
244 -> 218;
244 -> 212;
245 -> 219;
245 -> 212;
246 -> 220;
246 -> 212;
247 -> 212;
248 -> 221;
248 -> 247;
249 -> 241;
249 -> 247;
250 -> 242;
250 -> 247;
251 -> 243;
251 -> 247;
252 -> 244;
252 -> 247;
253 -> 245;
253 -> 247;
254 -> 246;
254 -> 247;
255 -> 248;
255 -> 247;
256 -> 249;
256 -> 247;
257 -> 250;
257 -> 247;
258 -> 251;
258 -> 247;
259 -> 252;
259 -> 247;
260 -> 253;
260 -> 247;
261 -> 254;
261 -> 247;
262 -> 247;
263 -> 262;
263 -> 247;
264 -> 247;
265 -> 255;
265 -> 264;
266 -> 256;
266 -> 264;
267 -> 257;
267 -> 264;
268 -> 258;
268 -> 264;
269 -> 259;
269 -> 264;
270 -> 260;
270 -> 264;
271 -> 261;
271 -> 264;
272 -> 263;
272 -> 264;
273 -> 268;
273 -> 264;
274 -> 270;
274 -> 264;
275 -> 264;
276 -> 273;
276 -> 275;
277 -> 274;
277 -> 275;
278 -> 265;
278 -> 275;
279 -> 278;
279 -> 209;
279 -> 275;
280 -> 279;
281 -> 277;
281 -> 279;
282 -> 276;
282 -> 279;
283 -> 279;
284 -> 280;
284 -> 283;
285 -> 281;
285 -> 283;
286 -> 282;
286 -> 283;
287 -> 280;
287 -> 283;
288 -> 283;
289 -> 286;
289 -> 288;
289 -> 283;
290 -> 0;
291 -> 0;
293 -> 290;
293 -> 291;
293 -> 292;
294 -> 293;
295 -> 0;
296 -> 294;
296 -> 293;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 294;
299 -> 293;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 294;
302 -> 293;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 294;
305 -> 293;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 294;
308 -> 293;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 294;
311 -> 293;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 294;
314 -> 293;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 294;
317 -> 293;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 294;
320 -> 293;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 294;
323 -> 293;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 294;
326 -> 293;
326 -> 325;
327 -> 326;
328 -> 294;
331 -> 328;
331 -> 330;
332 -> 329;
332 -> 330;
333 -> 330;
334 -> 331;
334 -> 293;
334 -> 330;
335 -> 330;
336 -> 332;
336 -> 330;
337 -> 333;
337 -> 330;
338 -> 336;
338 -> 337;
338 -> 330;
339 -> 338;
339 -> 335;
339 -> 330;
340 -> 334;
340 -> 335;
340 -> 293;
340 -> 339;
340 -> 338;
340 -> 330;
341 -> 340;
342 -> 0;
343 -> 342;
345 -> 343;
345 -> 344;
346 -> 294;
346 -> 293;
346 -> 345;
347 -> 346;
348 -> 0;
349 -> 348;
350 -> 294;
350 -> 293;
350 -> 349;
351 -> 350;
352 -> 0;
353 -> 294;
353 -> 293;
353 -> 352;
354 -> 353;
355 -> 318;
357 -> 356;
358 -> 0;
359 -> 0;
360 -> 0;
362 -> 358;
362 -> 359;
362 -> 360;
362 -> 361;
363 -> 357;
364 -> 362;
364 -> 363;
364 -> 356;
365 -> 364;
369 -> 366;
369 -> 367;
369 -> 368;
370 -> 300;
370 -> 293;
370 -> 299;
370 -> 366;
370 -> 369;
371 -> 370;
372 -> 312;
373 -> 321;
374 -> 321;
375 -> 318;
376 -> 0;
377 -> 0;
379 -> 376;
379 -> 378;
380 -> 377;
380 -> 378;
381 -> 378;
382 -> 379;
382 -> 378;
383 -> 380;
383 -> 378;
384 -> 0;
384 -> 378;
385 -> 381;
385 -> 378;
386 -> 378;
387 -> 382;
387 -> 383;
387 -> 384;
387 -> 385;
387 -> 386;
387 -> 378;
388 -> 387;
389 -> 0;
390 -> 0;
392 -> 389;
392 -> 391;
393 -> 390;
393 -> 391;
394 -> 391;
395 -> 392;
395 -> 391;
396 -> 393;
396 -> 391;
397 -> 0;
397 -> 391;
398 -> 394;
398 -> 391;
399 -> 391;
400 -> 395;
400 -> 396;
400 -> 397;
400 -> 398;
400 -> 399;
400 -> 391;
401 -> 400;
403 -> 388;
403 -> 387;
403 -> 402;
404 -> 403;
406 -> 401;
406 -> 400;
406 -> 405;
407 -> 406;
408 -> 0;
409 -> 0;
411 -> 408;
411 -> 410;
412 -> 409;
412 -> 410;
413 -> 410;
414 -> 411;
414 -> 410;
415 -> 412;
415 -> 410;
416 -> 0;
416 -> 410;
417 -> 413;
417 -> 410;
418 -> 410;
419 -> 414;
419 -> 415;
419 -> 416;
419 -> 417;
419 -> 418;
419 -> 410;
420 -> 419;
421 -> 0;
422 -> 0;
424 -> 421;
424 -> 423;
425 -> 422;
425 -> 423;
426 -> 423;
427 -> 424;
427 -> 423;
428 -> 425;
428 -> 423;
429 -> 0;
429 -> 423;
430 -> 426;
430 -> 423;
431 -> 423;
432 -> 427;
432 -> 428;
432 -> 429;
432 -> 430;
432 -> 431;
432 -> 423;
433 -> 432;
434 -> 0;
435 -> 0;
437 -> 434;
437 -> 436;
438 -> 435;
438 -> 436;
439 -> 436;
440 -> 437;
440 -> 436;
441 -> 438;
441 -> 436;
442 -> 0;
442 -> 436;
443 -> 439;
443 -> 436;
444 -> 436;
445 -> 440;
445 -> 441;
445 -> 442;
445 -> 443;
445 -> 444;
445 -> 436;
446 -> 445;
447 -> 0;
448 -> 0;
450 -> 447;
450 -> 449;
451 -> 448;
451 -> 449;
452 -> 449;
453 -> 450;
453 -> 449;
454 -> 451;
454 -> 449;
455 -> 0;
455 -> 449;
456 -> 452;
456 -> 449;
457 -> 449;
458 -> 453;
458 -> 454;
458 -> 455;
458 -> 456;
458 -> 457;
458 -> 449;
459 -> 458;
460 -> 0;
461 -> 0;
463 -> 460;
463 -> 462;
464 -> 461;
464 -> 462;
465 -> 462;
466 -> 463;
466 -> 462;
467 -> 464;
467 -> 462;
468 -> 0;
468 -> 462;
469 -> 465;
469 -> 462;
470 -> 462;
471 -> 466;
471 -> 467;
471 -> 468;
471 -> 469;
471 -> 470;
471 -> 462;
472 -> 471;
473 -> 0;
474 -> 0;
476 -> 473;
476 -> 475;
477 -> 474;
477 -> 475;
478 -> 475;
479 -> 476;
479 -> 475;
480 -> 477;
480 -> 475;
481 -> 0;
481 -> 475;
482 -> 478;
482 -> 475;
483 -> 475;
484 -> 479;
484 -> 480;
484 -> 481;
484 -> 482;
484 -> 483;
484 -> 475;
485 -> 484;
487 -> 388;
487 -> 387;
487 -> 486;
488 -> 487;
490 -> 401;
490 -> 400;
490 -> 489;
491 -> 490;
493 -> 420;
493 -> 419;
493 -> 492;
494 -> 493;
496 -> 433;
496 -> 432;
496 -> 495;
497 -> 496;
498 -> 0;
499 -> 388;
499 -> 387;
499 -> 498;
499 -> 0;
500 -> 499;
501 -> 0;
502 -> 401;
502 -> 400;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 472;
505 -> 471;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 420;
508 -> 419;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 0;
511 -> 510;
512 -> 511;
513 -> 294;
513 -> 289;
514 -> 284;
514 -> 283;
515 -> 0;
515 -> 283;
516 -> 515;
516 -> 287;
516 -> 283;
517 -> 283;
518 -> 514;
518 -> 516;
518 -> 517;
518 -> 0;
518 -> 283;
519 -> 518;
519 -> 283;
520 -> 513;
520 -> 283;
521 -> 285;
521 -> 283;
522 -> 283;
523 -> 519;
523 -> 520;
523 -> 521;
523 -> 522;
523 -> 518;
523 -> 293;
523 -> 283;
524 -> 283;
525 -> 523;
525 -> 524;
526 -> 524;
527 -> 524;
528 -> 525;
528 -> 523;
528 -> 527;
528 -> 524;
529 -> 526;
529 -> 524;
530 -> 524;
531 -> 528;
531 -> 523;
531 -> 527;
531 -> 529;
531 -> 530;
531 -> 526;
531 -> 524;
532 -> 524;
533 -> 532;
533 -> 526;
533 -> 524;
534 -> 526;
534 -> 524;
535 -> 524;
536 -> 534;
536 -> 535;
536 -> 526;
536 -> 533;
536 -> 524;
537 -> 525;
537 -> 524;
538 -> 537;
538 -> 280;
538 -> 279;
539 -> 280;
539 -> 264;
540 -> 264;
541 -> 267;
541 -> 540;
541 -> 264;
542 -> 539;
542 -> 541;
543 -> 541;
544 -> 542;
544 -> 543;
544 -> 280;
544 -> 538;
544 -> 523;
544 -> 541;
545 -> 544;
545 -> 541;
546 -> 388;
546 -> 545;
547 -> 0;
547 -> 264;
548 -> 272;
548 -> 264;
549 -> 269;
549 -> 539;
549 -> 266;
549 -> 546;
549 -> 264;
550 -> 549;
550 -> 264;
551 -> 264;
552 -> 550;
552 -> 551;
553 -> 0;
553 -> 551;
554 -> 553;
555 -> 264;
556 -> 549;
556 -> 280;
556 -> 538;
556 -> 523;
556 -> 237;
556 -> 0;
556 -> 387;
556 -> 234;
556 -> 264;
557 -> 264;
558 -> 557;
559 -> 556;
559 -> 558;
559 -> 264;
560 -> 559;
560 -> 264;
561 -> 264;
562 -> 560;
562 -> 561;
563 -> 562;
563 -> 559;
563 -> 561;
564 -> 563;
564 -> 559;
564 -> 561;
565 -> 561;
566 -> 563;
566 -> 565;
566 -> 559;
566 -> 561;
567 -> 0;
567 -> 561;
568 -> 566;
568 -> 567;
568 -> 561;
569 -> 271;
569 -> 568;
569 -> 264;
570 -> 559;
570 -> 264;
571 -> 0;
571 -> 1;
572 -> 1;
573 -> 571;
573 -> 572;
574 -> 211;
574 -> 572;
575 -> 211;
575 -> 572;
576 -> 211;
576 -> 572;
577 -> 211;
577 -> 572;
578 -> 211;
578 -> 572;
579 -> 211;
579 -> 572;
580 -> 573;
580 -> 572;
581 -> 574;
581 -> 572;
582 -> 575;
582 -> 572;
583 -> 576;
583 -> 572;
584 -> 577;
584 -> 572;
585 -> 578;
585 -> 572;
586 -> 579;
586 -> 572;
587 -> 572;
588 -> 580;
588 -> 587;
589 -> 581;
589 -> 587;
590 -> 582;
590 -> 587;
591 -> 583;
591 -> 587;
592 -> 584;
592 -> 587;
593 -> 585;
593 -> 587;
594 -> 586;
594 -> 587;
595 -> 588;
595 -> 587;
596 -> 588;
596 -> 587;
597 -> 587;
598 -> 589;
598 -> 587;
599 -> 590;
599 -> 587;
600 -> 591;
600 -> 587;
601 -> 592;
601 -> 587;
602 -> 593;
602 -> 587;
604 -> 603;
606 -> 605;
607 -> 594;
607 -> 587;
608 -> 587;
609 -> 596;
609 -> 608;
610 -> 597;
610 -> 608;
611 -> 598;
611 -> 608;
612 -> 599;
612 -> 608;
613 -> 600;
613 -> 608;
614 -> 601;
614 -> 608;
615 -> 602;
615 -> 608;
616 -> 596;
616 -> 608;
617 -> 607;
617 -> 608;
618 -> 597;
618 -> 608;
619 -> 597;
619 -> 608;
620 -> 597;
620 -> 608;
621 -> 620;
621 -> 608;
622 -> 620;
622 -> 608;
623 -> 620;
623 -> 608;
624 -> 620;
624 -> 608;
625 -> 620;
625 -> 608;
626 -> 620;
626 -> 608;
627 -> 620;
627 -> 608;
628 -> 620;
628 -> 608;
629 -> 620;
629 -> 608;
630 -> 620;
630 -> 608;
631 -> 620;
631 -> 608;
632 -> 620;
632 -> 608;
633 -> 620;
633 -> 608;
634 -> 620;
634 -> 608;
635 -> 620;
635 -> 608;
636 -> 609;
636 -> 620;
636 -> 608;
637 -> 610;
637 -> 620;
637 -> 608;
638 -> 611;
638 -> 620;
638 -> 608;
639 -> 612;
639 -> 620;
639 -> 608;
640 -> 613;
640 -> 620;
640 -> 608;
641 -> 614;
641 -> 620;
641 -> 608;
642 -> 615;
642 -> 620;
642 -> 608;
643 -> 616;
643 -> 608;
644 -> 643;
644 -> 620;
644 -> 608;
645 -> 617;
645 -> 620;
645 -> 608;
646 -> 618;
646 -> 620;
646 -> 608;
647 -> 619;
647 -> 620;
647 -> 608;
648 -> 597;
648 -> 572;
649 -> 648;
649 -> 1;
650 -> 1;
651 -> 571;
651 -> 650;
652 -> 211;
652 -> 650;
653 -> 211;
653 -> 650;
654 -> 211;
654 -> 650;
655 -> 211;
655 -> 650;
656 -> 211;
656 -> 650;
657 -> 211;
657 -> 650;
658 -> 651;
658 -> 650;
659 -> 652;
659 -> 650;
660 -> 653;
660 -> 650;
661 -> 654;
661 -> 650;
662 -> 655;
662 -> 650;
663 -> 656;
663 -> 650;
664 -> 657;
664 -> 650;
665 -> 650;
666 -> 658;
666 -> 665;
667 -> 659;
667 -> 665;
668 -> 660;
668 -> 665;
669 -> 661;
669 -> 665;
670 -> 662;
670 -> 665;
671 -> 663;
671 -> 665;
672 -> 664;
672 -> 665;
673 -> 666;
673 -> 665;
674 -> 666;
674 -> 665;
675 -> 665;
676 -> 667;
676 -> 665;
677 -> 668;
677 -> 665;
678 -> 669;
678 -> 665;
679 -> 670;
679 -> 665;
680 -> 671;
680 -> 665;
681 -> 672;
681 -> 665;
682 -> 665;
683 -> 674;
683 -> 682;
684 -> 675;
684 -> 682;
685 -> 676;
685 -> 682;
686 -> 677;
686 -> 682;
687 -> 678;
687 -> 682;
688 -> 679;
688 -> 682;
689 -> 680;
689 -> 682;
690 -> 674;
690 -> 682;
691 -> 681;
691 -> 682;
692 -> 675;
692 -> 682;
693 -> 675;
693 -> 682;
694 -> 675;
694 -> 682;
695 -> 694;
695 -> 682;
696 -> 694;
696 -> 682;
697 -> 694;
697 -> 682;
698 -> 694;
698 -> 682;
699 -> 694;
699 -> 682;
700 -> 694;
700 -> 682;
701 -> 694;
701 -> 682;
702 -> 694;
702 -> 682;
703 -> 694;
703 -> 682;
704 -> 694;
704 -> 682;
705 -> 694;
705 -> 682;
706 -> 694;
706 -> 682;
707 -> 694;
707 -> 682;
708 -> 694;
708 -> 682;
709 -> 694;
709 -> 682;
710 -> 683;
710 -> 694;
710 -> 682;
711 -> 684;
711 -> 694;
711 -> 682;
712 -> 685;
712 -> 694;
712 -> 682;
713 -> 686;
713 -> 694;
713 -> 682;
714 -> 687;
714 -> 694;
714 -> 682;
715 -> 688;
715 -> 694;
715 -> 682;
716 -> 689;
716 -> 694;
716 -> 682;
717 -> 690;
717 -> 682;
718 -> 717;
718 -> 694;
718 -> 682;
719 -> 691;
719 -> 694;
719 -> 682;
720 -> 692;
720 -> 694;
720 -> 682;
721 -> 693;
721 -> 694;
721 -> 682;
722 -> 675;
722 -> 650;
723 -> 722;
723 -> 1;
724 -> 211;
724 -> 1;
725 -> 1;
726 -> 211;
726 -> 725;
727 -> 723;
727 -> 725;
728 -> 727;
728 -> 710;
728 -> 725;
729 -> 727;
729 -> 711;
729 -> 725;
730 -> 727;
730 -> 712;
730 -> 725;
731 -> 726;
731 -> 725;
732 -> 727;
732 -> 714;
732 -> 725;
733 -> 727;
733 -> 715;
733 -> 725;
734 -> 725;
735 -> 727;
735 -> 718;
735 -> 725;
736 -> 727;
736 -> 719;
736 -> 725;
737 -> 727;
737 -> 720;
737 -> 725;
738 -> 727;
738 -> 721;
738 -> 725;
739 -> 725;
740 -> 728;
740 -> 739;
741 -> 729;
741 -> 739;
742 -> 730;
742 -> 739;
743 -> 731;
743 -> 739;
744 -> 732;
744 -> 739;
745 -> 733;
745 -> 739;
746 -> 734;
746 -> 739;
747 -> 735;
747 -> 739;
748 -> 736;
748 -> 739;
749 -> 737;
749 -> 739;
750 -> 738;
750 -> 739;
751 -> 734;
751 -> 739;
752 -> 751;
752 -> 739;
753 -> 751;
753 -> 739;
754 -> 751;
754 -> 739;
755 -> 751;
755 -> 739;
756 -> 751;
756 -> 739;
757 -> 751;
757 -> 739;
758 -> 751;
758 -> 739;
759 -> 751;
759 -> 739;
760 -> 751;
760 -> 739;
761 -> 751;
761 -> 739;
762 -> 751;
762 -> 739;
763 -> 751;
763 -> 739;
764 -> 751;
764 -> 739;
765 -> 751;
765 -> 739;
766 -> 751;
766 -> 739;
767 -> 743;
767 -> 751;
767 -> 739;
768 -> 746;
768 -> 751;
768 -> 739;
769 -> 734;
769 -> 1;
770 -> 649;
770 -> 211;
770 -> 1;
771 -> 769;
771 -> 211;
771 -> 1;
772 -> 1;
773 -> 570;
773 -> 772;
774 -> 211;
774 -> 772;
775 -> 772;
776 -> 773;
776 -> 775;
776 -> 568;
776 -> 772;
777 -> 776;
777 -> 772;
778 -> 774;
778 -> 772;
779 -> 772;
780 -> 777;
780 -> 779;
781 -> 778;
781 -> 779;
782 -> 780;
782 -> 779;
783 -> 781;
783 -> 779;
784 -> 779;
785 -> 782;
785 -> 784;
786 -> 783;
786 -> 784;
787 -> 785;
787 -> 784;
788 -> 786;
788 -> 784;
789 -> 784;
790 -> 784;
791 -> 787;
791 -> 790;
792 -> 788;
792 -> 790;
793 -> 789;
793 -> 790;
794 -> 790;
795 -> 792;
795 -> 794;
795 -> 790;
796 -> 792;
796 -> 790;
797 -> 796;
797 -> 211;
797 -> 770;
797 -> 771;
797 -> 636;
797 -> 637;
797 -> 647;
797 -> 638;
797 -> 639;
797 -> 640;
797 -> 642;
797 -> 644;
797 -> 629;
797 -> 645;
797 -> 646;
797 -> 641;
797 -> 633;
797 -> 634;
797 -> 635;
797 -> 740;
797 -> 741;
797 -> 750;
797 -> 742;
797 -> 767;
797 -> 744;
797 -> 768;
797 -> 747;
797 -> 760;
797 -> 748;
797 -> 749;
797 -> 745;
797 -> 764;
797 -> 765;
797 -> 766;
797 -> 596;
797 -> 724;
797 -> 674;
797 -> 790;
798 -> 790;
799 -> 796;
799 -> 798;
799 -> 211;
799 -> 770;
799 -> 771;
799 -> 636;
799 -> 637;
799 -> 647;
799 -> 638;
799 -> 639;
799 -> 640;
799 -> 642;
799 -> 644;
799 -> 629;
799 -> 645;
799 -> 646;
799 -> 641;
799 -> 633;
799 -> 634;
799 -> 635;
799 -> 740;
799 -> 741;
799 -> 750;
799 -> 742;
799 -> 767;
799 -> 744;
799 -> 768;
799 -> 747;
799 -> 760;
799 -> 748;
799 -> 749;
799 -> 745;
799 -> 764;
799 -> 765;
799 -> 766;
799 -> 596;
799 -> 724;
799 -> 674;
799 -> 790;
800 -> 799;
800 -> 798;
801 -> 800;
801 -> 799;
801 -> 798;
802 -> 792;
802 -> 790;
803 -> 802;
803 -> 801;
803 -> 790;
804 -> 790;
805 -> 802;
805 -> 804;
805 -> 801;
805 -> 790;
806 -> 805;
806 -> 804;
807 -> 806;
807 -> 805;
807 -> 804;
808 -> 791;
808 -> 790;
809 -> 793;
809 -> 801;
809 -> 807;
809 -> 790;
810 -> 808;
810 -> 809;
810 -> 790;
811 -> 790;
812 -> 810;
812 -> 811;
813 -> 810;
813 -> 811;
814 -> 810;
814 -> 811;
815 -> 810;
815 -> 811;
816 -> 810;
816 -> 811;
817 -> 816;
817 -> 811;
818 -> 816;
818 -> 811;
819 -> 816;
819 -> 811;
820 -> 816;
820 -> 811;
821 -> 816;
821 -> 811;
822 -> 816;
822 -> 811;
823 -> 816;
823 -> 811;
824 -> 816;
824 -> 811;
825 -> 816;
825 -> 811;
826 -> 816;
826 -> 811;
827 -> 816;
827 -> 811;
828 -> 812;
828 -> 810;
828 -> 816;
828 -> 811;
829 -> 812;
829 -> 810;
829 -> 816;
829 -> 811;
830 -> 812;
830 -> 810;
830 -> 816;
830 -> 811;
831 -> 812;
831 -> 810;
831 -> 816;
831 -> 811;
832 -> 814;
832 -> 811;
833 -> 832;
834 -> 833;
834 -> 816;
834 -> 811;
835 -> 815;
835 -> 811;
836 -> 835;
837 -> 836;
837 -> 816;
837 -> 811;
838 -> 811;
839 -> 811;
840 -> 812;
840 -> 810;
840 -> 839;
840 -> 811;
841 -> 812;
841 -> 810;
841 -> 811;
842 -> 0;
842 -> 811;
843 -> 812;
843 -> 840;
844 -> 840;
845 -> 843;
845 -> 844;
845 -> 840;
846 -> 843;
846 -> 841;
846 -> 816;
846 -> 845;
847 -> 812;
847 -> 841;
847 -> 816;
847 -> 845;
848 -> 813;
848 -> 816;
848 -> 811;
849 -> 816;
849 -> 848;
849 -> 811;
850 -> 816;
850 -> 831;
850 -> 841;
850 -> 849;
851 -> 850;
852 -> 851;
852 -> 816;
852 -> 850;
853 -> 849;
854 -> 843;
854 -> 853;
854 -> 849;
855 -> 843;
855 -> 851;
855 -> 816;
855 -> 854;
856 -> 849;
857 -> 816;
857 -> 855;
857 -> 856;
857 -> 849;
858 -> 816;
858 -> 855;
858 -> 851;
858 -> 856;
858 -> 849;
859 -> 857;
860 -> 859;
860 -> 816;
860 -> 857;
861 -> 816;
861 -> 831;
861 -> 851;
861 -> 811;
862 -> 861;
862 -> 816;
862 -> 811;
863 -> 810;
863 -> 861;
863 -> 847;
863 -> 829;
863 -> 830;
863 -> 852;
863 -> 860;
863 -> 862;
863 -> 823;
863 -> 846;
863 -> 848;
863 -> 834;
863 -> 837;
863 -> 827;
863 -> 816;
863 -> 831;
863 -> 790;
864 -> 812;
864 -> 863;
864 -> 816;
864 -> 811;
865 -> 792;
865 -> 790;
866 -> 865;
866 -> 807;
866 -> 790;
867 -> 866;
868 -> 867;
868 -> 863;
868 -> 807;
868 -> 866;
869 -> 868;
869 -> 867;
870 -> 868;
870 -> 867;
871 -> 869;
871 -> 867;
872 -> 867;
873 -> 871;
873 -> 872;
873 -> 867;
874 -> 871;
874 -> 868;
874 -> 867;
875 -> 870;
875 -> 868;
875 -> 874;
875 -> 867;
876 -> 870;
876 -> 875;
876 -> 871;
876 -> 867;
877 -> 870;
877 -> 875;
877 -> 871;
877 -> 867;
878 -> 870;
878 -> 875;
878 -> 867;
879 -> 870;
879 -> 875;
879 -> 871;
879 -> 878;
880 -> 867;
881 -> 870;
881 -> 875;
881 -> 880;
881 -> 867;
882 -> 881;
883 -> 867;
884 -> 870;
884 -> 875;
884 -> 883;
884 -> 867;
885 -> 867;
886 -> 871;
886 -> 875;
886 -> 885;
886 -> 867;
887 -> 870;
887 -> 875;
887 -> 871;
887 -> 867;
888 -> 867;
889 -> 870;
889 -> 875;
889 -> 888;
889 -> 867;
890 -> 889;
891 -> 870;
891 -> 875;
891 -> 871;
891 -> 867;
892 -> 867;
893 -> 868;
893 -> 892;
893 -> 875;
893 -> 866;
894 -> 866;
895 -> 893;
895 -> 894;
895 -> 866;
896 -> 893;
896 -> 895;
897 -> 896;
898 -> 896;
899 -> 896;
900 -> 896;
901 -> 896;
901 -> 900;
902 -> 896;
903 -> 902;
904 -> 896;
905 -> 896;
906 -> 896;
907 -> 896;
908 -> 907;
909 -> 907;
910 -> 896;
910 -> 909;
911 -> 909;
912 -> 910;
912 -> 896;
912 -> 911;
912 -> 909;
913 -> 910;
913 -> 896;
913 -> 912;
914 -> 912;
915 -> 913;
915 -> 910;
915 -> 912;
916 -> 910;
916 -> 896;
916 -> 915;
916 -> 909;
917 -> 916;
917 -> 907;
918 -> 907;
919 -> 896;
919 -> 918;
920 -> 918;
921 -> 919;
921 -> 896;
921 -> 915;
921 -> 920;
921 -> 918;
922 -> 919;
922 -> 896;
922 -> 915;
922 -> 921;
922 -> 918;
923 -> 922;
923 -> 907;
924 -> 896;
924 -> 907;
925 -> 917;
925 -> 924;
926 -> 923;
926 -> 924;
927 -> 925;
927 -> 926;
927 -> 896;
927 -> 915;
927 -> 921;
927 -> 913;
927 -> 914;
927 -> 924;
928 -> 896;
928 -> 927;
929 -> 790;
930 -> 863;
930 -> 927;
930 -> 929;
930 -> 790;
931 -> 790;
932 -> 792;
932 -> 790;
933 -> 791;
933 -> 790;
934 -> 790;
935 -> 932;
935 -> 934;
936 -> 933;
936 -> 934;
937 -> 934;
938 -> 934;
939 -> 936;
939 -> 934;
940 -> 939;
940 -> 927;
940 -> 934;
941 -> 927;
941 -> 934;
942 -> 940;
942 -> 934;
943 -> 937;
943 -> 942;
944 -> 943;
944 -> 934;
945 -> 943;
945 -> 934;
946 -> 945;
946 -> 934;
947 -> 935;
947 -> 934;
948 -> 947;
948 -> 927;
948 -> 934;
949 -> 934;
950 -> 947;
950 -> 949;
950 -> 927;
950 -> 934;
951 -> 935;
951 -> 934;
952 -> 951;
952 -> 950;
952 -> 934;
953 -> 934;
954 -> 951;
954 -> 953;
954 -> 950;
954 -> 934;
955 -> 935;
955 -> 934;
956 -> 934;
957 -> 955;
957 -> 956;
959 -> 958;
960 -> 958;
961 -> 960;
961 -> 956;
962 -> 956;
963 -> 957;
963 -> 956;
964 -> 963;
964 -> 954;
964 -> 956;
965 -> 964;
966 -> 965;
967 -> 934;
968 -> 967;
968 -> 934;
969 -> 934;
970 -> 934;
971 -> 967;
971 -> 970;
971 -> 968;
971 -> 934;
972 -> 934;
973 -> 935;
973 -> 934;
974 -> 973;
974 -> 954;
974 -> 934;
975 -> 974;
976 -> 946;
976 -> 974;
977 -> 974;
978 -> 975;
978 -> 977;
979 -> 976;
979 -> 977;
980 -> 977;
981 -> 980;
981 -> 979;
981 -> 977;
982 -> 977;
983 -> 978;
983 -> 982;
984 -> 982;
985 -> 982;
986 -> 984;
986 -> 985;
986 -> 982;
987 -> 982;
988 -> 983;
988 -> 954;
988 -> 987;
988 -> 982;
989 -> 983;
989 -> 954;
989 -> 988;
990 -> 984;
990 -> 989;
990 -> 986;
990 -> 988;
991 -> 988;
992 -> 984;
992 -> 991;
992 -> 990;
992 -> 988;
993 -> 983;
993 -> 954;
993 -> 988;
994 -> 984;
994 -> 993;
994 -> 992;
994 -> 988;
995 -> 982;
996 -> 983;
996 -> 954;
996 -> 995;
996 -> 982;
997 -> 996;
998 -> 997;
999 -> 984;
999 -> 998;
999 -> 994;
999 -> 997;
1000 -> 983;
1000 -> 954;
1000 -> 997;
1001 -> 984;
1001 -> 1000;
1001 -> 999;
1001 -> 997;
1002 -> 996;
1003 -> 984;
1003 -> 1002;
1003 -> 1001;
1003 -> 996;
1004 -> 983;
1004 -> 954;
1004 -> 982;
1005 -> 982;
1006 -> 984;
1006 -> 1005;
1006 -> 1003;
1006 -> 982;
1007 -> 982;
1008 -> 983;
1008 -> 954;
1008 -> 1007;
1008 -> 982;
1009 -> 982;
1010 -> 983;
1010 -> 954;
1010 -> 1009;
1010 -> 982;
1011 -> 983;
1011 -> 954;
1011 -> 982;
1012 -> 982;
1013 -> 983;
1013 -> 954;
1013 -> 1012;
1013 -> 982;
1014 -> 982;
1015 -> 983;
1015 -> 954;
1015 -> 1014;
1015 -> 982;
1016 -> 982;
1017 -> 983;
1017 -> 954;
1017 -> 1016;
1017 -> 982;
1018 -> 984;
1018 -> 1006;
1018 -> 982;
1019 -> 1018;
1019 -> 977;
1020 -> 981;
1020 -> 1019;
1020 -> 977;
1021 -> 972;
1021 -> 1020;
1021 -> 974;
1022 -> 1008;
1023 -> 984;
1023 -> 1022;
1023 -> 1006;
1023 -> 1008;
1024 -> 1008;
1025 -> 1024;
1025 -> 1008;
1026 -> 1008;
1027 -> 1025;
1027 -> 1008;
1028 -> 1027;
1029 -> 984;
1029 -> 1028;
1029 -> 1023;
1029 -> 1027;
1030 -> 1025;
1030 -> 1027;
1031 -> 984;
1031 -> 1030;
1031 -> 1029;
1031 -> 1027;
1032 -> 1027;
1033 -> 984;
1033 -> 1032;
1033 -> 1031;
1033 -> 1027;
1034 -> 1027;
1035 -> 1008;
1036 -> 984;
1036 -> 1035;
1036 -> 1033;
1036 -> 1008;
1037 -> 983;
1037 -> 1027;
1037 -> 1009;
1037 -> 982;
1038 -> 983;
1038 -> 1027;
1038 -> 982;
1039 -> 983;
1039 -> 1027;
1039 -> 1012;
1039 -> 982;
1040 -> 983;
1040 -> 1027;
1040 -> 1014;
1040 -> 982;
1041 -> 983;
1041 -> 1027;
1041 -> 1016;
1041 -> 982;
1042 -> 984;
1042 -> 1036;
1042 -> 982;
1043 -> 1042;
1043 -> 977;
1044 -> 981;
1044 -> 1043;
1044 -> 977;
1045 -> 972;
1045 -> 1044;
1045 -> 1021;
1045 -> 974;
1046 -> 967;
1046 -> 934;
1047 -> 972;
1047 -> 934;
1048 -> 934;
1049 -> 1046;
1049 -> 1048;
1050 -> 1047;
1050 -> 1048;
1051 -> 1050;
1051 -> 1045;
1051 -> 1048;
1052 -> 1048;
1053 -> 1052;
1053 -> 1051;
1053 -> 1048;
1054 -> 1050;
1054 -> 1052;
1054 -> 1045;
1054 -> 1053;
1055 -> 1049;
1055 -> 1054;
1055 -> 971;
1055 -> 1053;
1056 -> 1053;
1057 -> 1056;
1058 -> 1049;
1058 -> 1057;
1058 -> 1055;
1058 -> 1056;
1059 -> 1049;
1059 -> 1058;
1059 -> 1053;
1060 -> 934;
1061 -> 934;
1062 -> 967;
1062 -> 1061;
1062 -> 1059;
1062 -> 934;
1063 -> 934;
1064 -> 936;
1064 -> 1027;
1064 -> 934;
1065 -> 934;
1066 -> 1064;
1066 -> 934;
1067 -> 1064;
1067 -> 1066;
1068 -> 1067;
1068 -> 1066;
1069 -> 1068;
1069 -> 1066;
1070 -> 1066;
1071 -> 1066;
1072 -> 944;
1072 -> 1066;
1073 -> 967;
1073 -> 1072;
1074 -> 946;
1074 -> 1072;
1075 -> 1072;
1076 -> 1073;
1076 -> 1075;
1077 -> 1074;
1077 -> 1075;
1078 -> 1075;
1079 -> 1078;
1079 -> 1077;
1079 -> 1075;
1080 -> 1076;
1080 -> 1078;
1080 -> 1079;
1080 -> 1062;
1080 -> 1075;
1081 -> 1072;
1082 -> 1072;
1083 -> 967;
1083 -> 1082;
1083 -> 1080;
1083 -> 1072;
1084 -> 1067;
1084 -> 1068;
1084 -> 1072;
1085 -> 967;
1085 -> 1084;
1085 -> 1083;
1085 -> 1072;
1086 -> 1067;
1086 -> 1084;
1086 -> 1072;
1087 -> 1086;
1087 -> 1084;
1087 -> 1072;
1088 -> 967;
1088 -> 1087;
1089 -> 946;
1089 -> 1087;
1090 -> 1087;
1091 -> 1088;
1091 -> 1090;
1092 -> 1089;
1092 -> 1090;
1093 -> 1090;
1094 -> 1093;
1094 -> 1092;
1094 -> 1090;
1095 -> 1091;
1095 -> 1093;
1095 -> 1094;
1095 -> 1085;
1095 -> 1090;
1096 -> 1087;
1097 -> 1087;
1098 -> 967;
1098 -> 1097;
1098 -> 1095;
1098 -> 1087;
1099 -> 1087;
1100 -> 967;
1100 -> 1099;
1100 -> 1098;
1100 -> 1087;
1101 -> 1067;
1101 -> 1066;
1102 -> 1066;
1103 -> 948;
1103 -> 1066;
1104 -> 952;
1104 -> 1066;
1105 -> 1066;
1106 -> 1101;
1106 -> 1105;
1107 -> 1102;
1107 -> 1105;
1108 -> 1103;
1108 -> 1105;
1109 -> 1104;
1109 -> 1105;
1110 -> 1102;
1110 -> 1105;
1111 -> 1110;
1111 -> 1105;
1112 -> 1110;
1112 -> 1105;
1113 -> 1110;
1113 -> 1105;
1114 -> 1110;
1114 -> 1105;
1115 -> 1110;
1115 -> 1105;
1116 -> 1110;
1116 -> 1105;
1117 -> 1110;
1117 -> 1105;
1118 -> 1110;
1118 -> 1105;
1119 -> 1110;
1119 -> 1105;
1120 -> 1106;
1120 -> 1099;
1120 -> 1110;
1120 -> 1105;
1121 -> 1106;
1121 -> 1099;
1121 -> 1110;
1121 -> 1105;
1122 -> 1106;
1122 -> 1099;
1122 -> 1110;
1122 -> 1105;
1123 -> 1106;
1123 -> 1099;
1123 -> 1110;
1123 -> 1105;
1124 -> 1105;
1125 -> 1106;
1125 -> 1099;
1125 -> 1105;
1126 -> 1102;
1126 -> 1066;
1127 -> 935;
1127 -> 1066;
1128 -> 1102;
1128 -> 1066;
1129 -> 1127;
1129 -> 1128;
1129 -> 1123;
1129 -> 1125;
1129 -> 1121;
1129 -> 1122;
1129 -> 1110;
1129 -> 1107;
1129 -> 1108;
1129 -> 1109;
1129 -> 1066;
1130 -> 1066;
1131 -> 1130;
1132 -> 1129;
1132 -> 1131;
1132 -> 1130;
1133 -> 1129;
1133 -> 1130;
1134 -> 1129;
1134 -> 1130;
1135 -> 1129;
1135 -> 1130;
1136 -> 1129;
1136 -> 1135;
1137 -> 1130;
1138 -> 1129;
1138 -> 1137;
1138 -> 1130;
1139 -> 1130;
1140 -> 1129;
1140 -> 1139;
1140 -> 1130;
1141 -> 1130;
1142 -> 1129;
1142 -> 1141;
1142 -> 1130;
1143 -> 1129;
1143 -> 1130;
1144 -> 1129;
1145 -> 1129;
1145 -> 1130;
1146 -> 1066;
1147 -> 1129;
1147 -> 1146;
1147 -> 1066;
1148 -> 935;
1148 -> 1129;
1148 -> 1147;
1149 -> 1102;
1149 -> 1066;
1150 -> 946;
1150 -> 1066;
1151 -> 1066;
1152 -> 1149;
1152 -> 1151;
1153 -> 1150;
1153 -> 1151;
1154 -> 1151;
1155 -> 1154;
1155 -> 1153;
1155 -> 1151;
1156 -> 1151;
1157 -> 1151;
1158 -> 1156;
1158 -> 1157;
1158 -> 1151;
1159 -> 1151;
1160 -> 1152;
1160 -> 1129;
1160 -> 1159;
1160 -> 1151;
1161 -> 1152;
1161 -> 1129;
1161 -> 1160;
1162 -> 1156;
1162 -> 1161;
1162 -> 1158;
1162 -> 1160;
1163 -> 1160;
1164 -> 1156;
1164 -> 1163;
1164 -> 1162;
1164 -> 1160;
1165 -> 1152;
1165 -> 1129;
1165 -> 1160;
1166 -> 1156;
1166 -> 1165;
1166 -> 1164;
1166 -> 1160;
1167 -> 1151;
1168 -> 1152;
1168 -> 1129;
1168 -> 1167;
1168 -> 1151;
1169 -> 1168;
1170 -> 1169;
1171 -> 1156;
1171 -> 1170;
1171 -> 1166;
1171 -> 1169;
1172 -> 1152;
1172 -> 1129;
1172 -> 1169;
1173 -> 1156;
1173 -> 1172;
1173 -> 1171;
1173 -> 1169;
1174 -> 1168;
1175 -> 1156;
1175 -> 1174;
1175 -> 1173;
1175 -> 1168;
1176 -> 1152;
1176 -> 1129;
1176 -> 1151;
1177 -> 1151;
1178 -> 1156;
1178 -> 1177;
1178 -> 1175;
1178 -> 1151;
1179 -> 1152;
1179 -> 1129;
1179 -> 1151;
1180 -> 1151;
1181 -> 1152;
1181 -> 1129;
1181 -> 1180;
1181 -> 1151;
1182 -> 1181;
1183 -> 1156;
1183 -> 1182;
1183 -> 1178;
1183 -> 1181;
1184 -> 1181;
1185 -> 1156;
1185 -> 1184;
1185 -> 1183;
1185 -> 1181;
1186 -> 1181;
1187 -> 1156;
1187 -> 1186;
1187 -> 1185;
1187 -> 1181;
1188 -> 1181;
1189 -> 1156;
1189 -> 1188;
1189 -> 1187;
1189 -> 1181;
1190 -> 1181;
1191 -> 1156;
1191 -> 1190;
1191 -> 1189;
1191 -> 1181;
1192 -> 1152;
1192 -> 1129;
1192 -> 1151;
1193 -> 1151;
1194 -> 1152;
1194 -> 1129;
1194 -> 1193;
1194 -> 1151;
1195 -> 1151;
1196 -> 1152;
1196 -> 1129;
1196 -> 1195;
1196 -> 1151;
1197 -> 1151;
1198 -> 1152;
1198 -> 1129;
1198 -> 1197;
1198 -> 1151;
1199 -> 1156;
1199 -> 1191;
1199 -> 1151;
1200 -> 1199;
1200 -> 1151;
1201 -> 1155;
1201 -> 1200;
1201 -> 1151;
1202 -> 967;
1202 -> 1201;
1202 -> 1100;
1202 -> 1066;
1203 -> 1148;
1203 -> 1066;
1204 -> 946;
1204 -> 1066;
1205 -> 1066;
1206 -> 1203;
1206 -> 1205;
1207 -> 1204;
1207 -> 1205;
1208 -> 1205;
1209 -> 1208;
1209 -> 1207;
1209 -> 1205;
1210 -> 1205;
1211 -> 1205;
1212 -> 1210;
1212 -> 1211;
1212 -> 1205;
1213 -> 1205;
1214 -> 1206;
1214 -> 1129;
1214 -> 1213;
1214 -> 1205;
1215 -> 1206;
1215 -> 1129;
1215 -> 1214;
1216 -> 1210;
1216 -> 1215;
1216 -> 1212;
1216 -> 1214;
1217 -> 1214;
1218 -> 1210;
1218 -> 1217;
1218 -> 1216;
1218 -> 1214;
1219 -> 1206;
1219 -> 1129;
1219 -> 1214;
1220 -> 1210;
1220 -> 1219;
1220 -> 1218;
1220 -> 1214;
1221 -> 1205;
1222 -> 1206;
1222 -> 1129;
1222 -> 1221;
1222 -> 1205;
1223 -> 1222;
1224 -> 1223;
1225 -> 1210;
1225 -> 1224;
1225 -> 1220;
1225 -> 1223;
1226 -> 1206;
1226 -> 1129;
1226 -> 1223;
1227 -> 1210;
1227 -> 1226;
1227 -> 1225;
1227 -> 1223;
1228 -> 1222;
1229 -> 1210;
1229 -> 1228;
1229 -> 1227;
1229 -> 1222;
1230 -> 1206;
1230 -> 1129;
1230 -> 1205;
1231 -> 1205;
1232 -> 1210;
1232 -> 1231;
1232 -> 1229;
1232 -> 1205;
1233 -> 1205;
1234 -> 1206;
1234 -> 1129;
1234 -> 1233;
1234 -> 1205;
1235 -> 1206;
1235 -> 1129;
1235 -> 1205;
1236 -> 1205;
1237 -> 1206;
1237 -> 1129;
1237 -> 1236;
1237 -> 1205;
1238 -> 1205;
1239 -> 1206;
1239 -> 1129;
1239 -> 1238;
1239 -> 1205;
1240 -> 1205;
1241 -> 1206;
1241 -> 1129;
1241 -> 1240;
1241 -> 1205;
1242 -> 1210;
1242 -> 1232;
1242 -> 1205;
1243 -> 1242;
1243 -> 1205;
1244 -> 1209;
1244 -> 1243;
1244 -> 1205;
1245 -> 1063;
1245 -> 1244;
1245 -> 1066;
1246 -> 1129;
1247 -> 1129;
1248 -> 1247;
1249 -> 967;
1249 -> 1248;
1249 -> 1202;
1249 -> 1247;
1250 -> 967;
1250 -> 1129;
1251 -> 946;
1251 -> 1129;
1252 -> 1129;
1253 -> 1250;
1253 -> 1252;
1254 -> 1251;
1254 -> 1252;
1255 -> 1252;
1256 -> 1255;
1256 -> 1254;
1256 -> 1252;
1257 -> 1129;
1258 -> 1129;
1259 -> 967;
1259 -> 1129;
1260 -> 946;
1260 -> 1129;
1261 -> 1129;
1262 -> 1259;
1262 -> 1261;
1263 -> 1260;
1263 -> 1261;
1264 -> 1261;
1265 -> 1264;
1265 -> 1263;
1265 -> 1261;
1266 -> 1129;
1267 -> 1129;
1268 -> 1129;
1269 -> 1129;
1270 -> 1129;
1271 -> 1129;
1272 -> 1129;
1273 -> 1129;
1274 -> 1129;
1275 -> 1129;
1276 -> 1129;
1277 -> 1129;
1278 -> 1129;
1279 -> 1129;
1280 -> 1129;
1281 -> 1129;
1282 -> 1281;
1283 -> 1281;
1284 -> 1281;
1285 -> 1281;
1286 -> 1281;
1286 -> 1285;
1287 -> 1281;
1288 -> 1281;
1289 -> 1281;
1290 -> 1281;
1291 -> 1281;
1292 -> 1281;
1293 -> 1129;
1294 -> 1281;
1294 -> 1293;
1294 -> 1129;
1295 -> 935;
1295 -> 1281;
1295 -> 1294;
1296 -> 1129;
1297 -> 946;
1297 -> 1129;
1298 -> 1129;
1299 -> 1296;
1299 -> 1298;
1300 -> 1297;
1300 -> 1298;
1301 -> 1298;
1302 -> 1301;
1302 -> 1300;
1302 -> 1298;
1303 -> 1298;
1304 -> 1298;
1305 -> 1303;
1305 -> 1304;
1305 -> 1298;
1306 -> 1298;
1307 -> 1299;
1307 -> 1281;
1307 -> 1306;
1307 -> 1298;
1308 -> 1299;
1308 -> 1281;
1308 -> 1307;
1309 -> 1303;
1309 -> 1308;
1309 -> 1305;
1309 -> 1307;
1310 -> 1307;
1311 -> 1303;
1311 -> 1310;
1311 -> 1309;
1311 -> 1307;
1312 -> 1299;
1312 -> 1281;
1312 -> 1307;
1313 -> 1303;
1313 -> 1312;
1313 -> 1311;
1313 -> 1307;
1314 -> 1298;
1315 -> 1299;
1315 -> 1281;
1315 -> 1314;
1315 -> 1298;
1316 -> 1315;
1317 -> 1316;
1318 -> 1303;
1318 -> 1317;
1318 -> 1313;
1318 -> 1316;
1319 -> 1299;
1319 -> 1281;
1319 -> 1316;
1320 -> 1303;
1320 -> 1319;
1320 -> 1318;
1320 -> 1316;
1321 -> 1315;
1322 -> 1303;
1322 -> 1321;
1322 -> 1320;
1322 -> 1315;
1323 -> 1299;
1323 -> 1281;
1323 -> 1298;
1324 -> 1298;
1325 -> 1303;
1325 -> 1324;
1325 -> 1322;
1325 -> 1298;
1326 -> 1299;
1326 -> 1281;
1326 -> 1298;
1327 -> 1326;
1328 -> 1303;
1328 -> 1327;
1328 -> 1325;
1328 -> 1326;
1329 -> 1326;
1330 -> 1303;
1330 -> 1329;
1330 -> 1328;
1330 -> 1326;
1331 -> 1326;
1332 -> 1303;
1332 -> 1331;
1332 -> 1330;
1332 -> 1326;
1333 -> 1326;
1334 -> 1303;
1334 -> 1333;
1334 -> 1332;
1334 -> 1326;
1335 -> 1326;
1336 -> 1326;
1337 -> 1303;
1337 -> 1336;
1337 -> 1334;
1337 -> 1326;
1338 -> 1298;
1339 -> 1299;
1339 -> 1326;
1339 -> 1338;
1339 -> 1298;
1340 -> 1339;
1341 -> 1303;
1341 -> 1340;
1341 -> 1337;
1341 -> 1339;
1342 -> 1339;
1343 -> 1303;
1343 -> 1342;
1343 -> 1341;
1343 -> 1339;
1344 -> 1339;
1345 -> 1303;
1345 -> 1344;
1345 -> 1343;
1345 -> 1339;
1346 -> 1339;
1347 -> 1303;
1347 -> 1346;
1347 -> 1345;
1347 -> 1339;
1348 -> 1339;
1349 -> 1303;
1349 -> 1348;
1349 -> 1347;
1349 -> 1339;
1350 -> 1299;
1350 -> 1326;
1350 -> 1298;
1351 -> 1298;
1352 -> 1299;
1352 -> 1326;
1352 -> 1351;
1352 -> 1298;
1353 -> 1298;
1354 -> 1299;
1354 -> 1326;
1354 -> 1353;
1354 -> 1298;
1355 -> 1298;
1356 -> 1299;
1356 -> 1326;
1356 -> 1355;
1356 -> 1298;
1357 -> 1303;
1357 -> 1349;
1357 -> 1298;
1358 -> 1357;
1358 -> 1298;
1359 -> 1302;
1359 -> 1358;
1359 -> 1298;
1360 -> 967;
1360 -> 1359;
1360 -> 1249;
1360 -> 1129;
1361 -> 1295;
1361 -> 1129;
1362 -> 946;
1362 -> 1129;
1363 -> 1129;
1364 -> 1361;
1364 -> 1363;
1365 -> 1362;
1365 -> 1363;
1366 -> 1363;
1367 -> 1366;
1367 -> 1365;
1367 -> 1363;
1368 -> 1363;
1369 -> 1363;
1370 -> 1368;
1370 -> 1369;
1370 -> 1363;
1371 -> 1363;
1372 -> 1364;
1372 -> 1326;
1372 -> 1371;
1372 -> 1363;
1373 -> 1364;
1373 -> 1326;
1373 -> 1372;
1374 -> 1368;
1374 -> 1373;
1374 -> 1370;
1374 -> 1372;
1375 -> 1372;
1376 -> 1368;
1376 -> 1375;
1376 -> 1374;
1376 -> 1372;
1377 -> 1364;
1377 -> 1326;
1377 -> 1372;
1378 -> 1368;
1378 -> 1377;
1378 -> 1376;
1378 -> 1372;
1379 -> 1363;
1380 -> 1364;
1380 -> 1326;
1380 -> 1379;
1380 -> 1363;
1381 -> 1380;
1382 -> 1381;
1383 -> 1368;
1383 -> 1382;
1383 -> 1378;
1383 -> 1381;
1384 -> 1364;
1384 -> 1326;
1384 -> 1381;
1385 -> 1368;
1385 -> 1384;
1385 -> 1383;
1385 -> 1381;
1386 -> 1380;
1387 -> 1368;
1387 -> 1386;
1387 -> 1385;
1387 -> 1380;
1388 -> 1364;
1388 -> 1326;
1388 -> 1363;
1389 -> 1363;
1390 -> 1368;
1390 -> 1389;
1390 -> 1387;
1390 -> 1363;
1391 -> 1364;
1391 -> 1326;
1391 -> 1363;
1392 -> 1391;
1393 -> 1368;
1393 -> 1392;
1393 -> 1390;
1393 -> 1391;
1394 -> 1391;
1395 -> 1368;
1395 -> 1394;
1395 -> 1393;
1395 -> 1391;
1396 -> 1391;
1397 -> 1368;
1397 -> 1396;
1397 -> 1395;
1397 -> 1391;
1398 -> 1391;
1399 -> 1368;
1399 -> 1398;
1399 -> 1397;
1399 -> 1391;
1400 -> 1391;
1401 -> 1391;
1402 -> 1368;
1402 -> 1401;
1402 -> 1399;
1402 -> 1391;
1403 -> 1363;
1404 -> 1364;
1404 -> 1391;
1404 -> 1403;
1404 -> 1363;
1405 -> 1364;
1405 -> 1391;
1405 -> 1363;
1406 -> 1363;
1407 -> 1364;
1407 -> 1391;
1407 -> 1406;
1407 -> 1363;
1408 -> 1363;
1409 -> 1364;
1409 -> 1391;
1409 -> 1408;
1409 -> 1363;
1410 -> 1363;
1411 -> 1364;
1411 -> 1391;
1411 -> 1410;
1411 -> 1363;
1412 -> 1368;
1412 -> 1402;
1412 -> 1363;
1413 -> 1412;
1413 -> 1363;
1414 -> 1367;
1414 -> 1413;
1414 -> 1363;
1415 -> 1063;
1415 -> 1414;
1415 -> 1245;
1415 -> 1129;
1416 -> 934;
1417 -> 1129;
1417 -> 1416;
1417 -> 934;
1418 -> 967;
1418 -> 1360;
1418 -> 1417;
1419 -> 934;
1420 -> 967;
1420 -> 1419;
1420 -> 1418;
1420 -> 934;
1421 -> 972;
1421 -> 934;
1422 -> 1063;
1422 -> 934;
1426 -> 1424;
1426 -> 1423;
1427 -> 1425;
1427 -> 1423;
1428 -> 1423;
1429 -> 0;
1429 -> 934;
1430 -> 934;
1431 -> 934;
1432 -> 1421;
1432 -> 1431;
1433 -> 1422;
1433 -> 1431;
1434 -> 1429;
1434 -> 1431;
1435 -> 1430;
1435 -> 1431;
1436 -> 1430;
1436 -> 1431;
1437 -> 1431;
1438 -> 1435;
1438 -> 1437;
1438 -> 1431;
1439 -> 1438;
1439 -> 1431;
1440 -> 0;
1442 -> 1440;
1442 -> 1441;
1443 -> 1441;
1445 -> 1444;
1447 -> 1446;
1449 -> 1448;
1450 -> 1443;
1451 -> 1443;
1451 -> 1441;
1452 -> 1442;
1452 -> 1443;
1452 -> 1441;
1453 -> 1441;
1454 -> 1431;
1455 -> 1454;
1455 -> 1436;
1455 -> 1431;
1456 -> 1432;
1456 -> 1431;
1457 -> 1433;
1457 -> 1431;
1458 -> 1434;
1458 -> 1431;
1459 -> 1456;
1459 -> 1431;
1460 -> 1457;
1460 -> 1431;
1461 -> 1455;
1461 -> 1431;
1462 -> 1431;
1463 -> 1459;
1463 -> 1462;
1464 -> 1460;
1464 -> 1462;
1465 -> 1461;
1465 -> 1462;
1466 -> 1439;
1466 -> 1462;
1467 -> 1463;
1467 -> 1462;
1468 -> 1463;
1468 -> 1456;
1468 -> 1462;
1469 -> 1464;
1469 -> 1462;
1470 -> 1464;
1470 -> 1457;
1470 -> 1462;
1471 -> 1462;
1472 -> 1467;
1472 -> 1471;
1473 -> 1468;
1473 -> 1471;
1474 -> 1469;
1474 -> 1471;
1475 -> 1470;
1475 -> 1471;
1476 -> 1466;
1476 -> 1471;
1477 -> 1472;
1477 -> 1471;
1478 -> 1473;
1478 -> 1471;
1479 -> 1474;
1479 -> 1471;
1480 -> 1475;
1480 -> 1471;
1481 -> 1471;
1482 -> 1477;
1482 -> 1481;
1483 -> 1478;
1483 -> 1481;
1484 -> 1479;
1484 -> 1481;
1485 -> 1480;
1485 -> 1481;
1486 -> 1476;
1486 -> 1481;
1487 -> 1481;
1488 -> 1483;
1488 -> 1487;
1488 -> 1481;
1489 -> 1481;
1490 -> 1485;
1490 -> 1489;
1490 -> 1481;
1491 -> 1488;
1491 -> 1490;
1491 -> 1481;
1492 -> 1481;
1493 -> 1492;
1493 -> 1491;
1493 -> 1481;
1494 -> 1481;
1495 -> 1494;
1495 -> 1483;
1495 -> 1481;
1496 -> 1495;
1497 -> 1491;
1497 -> 1493;
1497 -> 1496;
1497 -> 1495;
1498 -> 1497;
1498 -> 1494;
1498 -> 1496;
1498 -> 1491;
1498 -> 1495;
1499 -> 1481;
1500 -> 1499;
1500 -> 1485;
1500 -> 1481;
1501 -> 1500;
1502 -> 1491;
1502 -> 1493;
1502 -> 1498;
1502 -> 1501;
1502 -> 1500;
1503 -> 1502;
1503 -> 1501;
1503 -> 1499;
1503 -> 1491;
1503 -> 1500;
1504 -> 1481;
1505 -> 1504;
1505 -> 1483;
1505 -> 1481;
1506 -> 1505;
1507 -> 1506;
1507 -> 1485;
1507 -> 1505;
1508 -> 1507;
1509 -> 1491;
1509 -> 1493;
1509 -> 1498;
1509 -> 1503;
1509 -> 1508;
1509 -> 1507;
1510 -> 1482;
1510 -> 1507;
1511 -> 1484;
1511 -> 1507;
1512 -> 1507;
1513 -> 1510;
1513 -> 1512;
1514 -> 1508;
1514 -> 1512;
1515 -> 1511;
1515 -> 1512;
1516 -> 1508;
1516 -> 1512;
1517 -> 1486;
1517 -> 1512;
1518 -> 1513;
1518 -> 1456;
1518 -> 1514;
1518 -> 1512;
1519 -> 1515;
1519 -> 1457;
1519 -> 1516;
1519 -> 1512;
1520 -> 1517;
1520 -> 0;
1520 -> 1518;
1520 -> 1519;
1520 -> 1456;
1520 -> 1457;
1520 -> 1512;
1521 -> 1509;
1521 -> 1520;
1521 -> 1507;
1522 -> 1507;
1523 -> 1491;
1523 -> 1493;
1523 -> 1498;
1523 -> 1503;
1523 -> 1522;
1523 -> 1506;
1523 -> 1507;
1524 -> 1507;
1525 -> 1491;
1525 -> 1493;
1525 -> 1498;
1525 -> 1503;
1525 -> 1504;
1525 -> 1524;
1525 -> 1507;
1526 -> 1521;
1526 -> 1507;
1527 -> 1523;
1527 -> 1507;
1528 -> 1526;
1528 -> 1527;
1528 -> 1507;
1529 -> 1525;
1529 -> 1507;
1530 -> 1528;
1530 -> 1529;
1530 -> 1507;
1531 -> 1530;
1531 -> 1504;
1531 -> 1506;
1531 -> 1491;
1531 -> 1507;
1532 -> 1491;
1532 -> 1481;
1533 -> 1473;
1533 -> 1471;
1534 -> 1475;
1534 -> 1471;
1535 -> 1471;
1536 -> 1533;
1536 -> 1535;
1536 -> 1471;
1537 -> 1534;
1537 -> 1535;
1537 -> 1471;
1538 -> 1536;
1538 -> 1537;
1538 -> 1471;
1539 -> 1532;
1539 -> 1491;
1539 -> 1493;
1539 -> 1498;
1539 -> 1503;
1539 -> 1531;
1539 -> 1533;
1539 -> 1534;
1539 -> 1538;
1540 -> 1538;
1541 -> 1532;
1541 -> 1491;
1541 -> 1493;
1541 -> 1498;
1541 -> 1503;
1541 -> 1531;
1541 -> 1540;
1541 -> 1534;
1541 -> 1538;
1542 -> 1532;
1542 -> 1491;
1542 -> 1493;
1542 -> 1498;
1542 -> 1503;
1542 -> 1531;
1542 -> 1533;
1542 -> 1534;
1542 -> 1541;
1543 -> 1541;
1544 -> 1533;
1544 -> 1543;
1545 -> 1534;
1545 -> 1543;
1546 -> 1543;
1547 -> 0;
1547 -> 1543;
1548 -> 1544;
1548 -> 1543;
1549 -> 1545;
1549 -> 1543;
1550 -> 1543;
1551 -> 1547;
1551 -> 1550;
1552 -> 1548;
1552 -> 1550;
1553 -> 1549;
1553 -> 1550;
1554 -> 1546;
1554 -> 1550;
1555 -> 1551;
1555 -> 1554;
1555 -> 1550;
1556 -> 1552;
1556 -> 1554;
1556 -> 1550;
1557 -> 1553;
1557 -> 1554;
1557 -> 1550;
1558 -> 1544;
1558 -> 1545;
1558 -> 1471;
1559 -> 0;
1559 -> 1558;
1560 -> 1558;
1561 -> 1558;
1562 -> 1559;
1562 -> 1561;
1563 -> 1560;
1563 -> 1561;
1564 -> 1560;
1564 -> 1561;
1565 -> 1560;
1565 -> 1561;
1566 -> 1562;
1566 -> 1565;
1566 -> 1561;
1567 -> 1563;
1567 -> 1565;
1567 -> 1561;
1568 -> 1564;
1568 -> 1565;
1568 -> 1561;
1569 -> 1471;
1570 -> 1558;
1570 -> 1569;
1570 -> 1471;
1571 -> 1471;
1572 -> 1558;
1572 -> 1571;
1572 -> 1471;
1573 -> 1546;
1573 -> 1560;
1573 -> 1555;
1573 -> 1556;
1573 -> 1557;
1573 -> 1566;
1573 -> 1567;
1573 -> 1568;
1573 -> 1462;
1574 -> 1573;
1575 -> 1574;
1576 -> 1464;
1576 -> 1457;
1576 -> 1520;
1576 -> 1573;
1576 -> 1574;
1577 -> 1465;
1577 -> 1576;
1577 -> 1454;
1577 -> 1574;
1578 -> 1458;
1578 -> 1575;
1578 -> 1431;
1579 -> 967;
1579 -> 1578;
1579 -> 1420;
1579 -> 934;
1580 -> 1063;
1580 -> 1415;
1580 -> 934;
1581 -> 972;
1581 -> 1054;
1581 -> 934;
1582 -> 967;
1582 -> 1579;
1582 -> 934;
1583 -> 779;
1584 -> 772;
1585 -> 773;
1585 -> 772;
1586 -> 776;
1586 -> 772;
1587 -> 772;
1588 -> 1585;
1588 -> 1587;
1589 -> 1586;
1589 -> 1587;
1590 -> 1589;
1590 -> 1587;
1591 -> 1590;
1591 -> 776;
1591 -> 1391;
1592 -> 1588;
1592 -> 1591;
1592 -> 1391;
1592 -> 1590;
1593 -> 1590;
1593 -> 1592;
1594 -> 1593;
1594 -> 1592;
1595 -> 1593;
1596 -> 772;
1597 -> 773;
1597 -> 772;
}