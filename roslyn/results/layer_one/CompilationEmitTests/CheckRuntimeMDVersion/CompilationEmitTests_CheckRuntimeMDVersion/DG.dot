digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 775585"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 775586"];
3 [label="param CompilationEmitTests(this) 775587"];
4 [label="param EmitMetadataTestBase(this) 775588"];
5 [label="param CSharpTestBase(this) 775589"];
6 [label="param CommonTestBase(this) 775590"];
7 [label="param TestBase(this) 775591"];
8 [label="_temp 775592"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 775593"];
10 [label="param CheckRuntimeMDVersion(this) 775594"];
11 [label="string source = @'\nclass C\n{\n    public static void Main()\n    {\n    }\n}'; 775595"];
12 [label="var compilation = CSharpCompilation.Create(\n                'v2Fx.exe',\n                new[] { Parse(source) },\n                new[] { Net20.mscorlib }); 775596"];
13 [label="var compilation = CSharpCompilation.Create(\n                'v2Fx.exe',\n                new[] { Parse(source) },\n                new[] { Net20.mscorlib }); 775597"];
14 [label="Parse(source) 775598"];
15 [label="param Parse(string text) 775599"];
16 [label="param Parse(string filename = '') 775600"];
17 [label="param Parse(CSharpParseOptions options = null) 775601"];
18 [label="param Parse(Encoding encoding = null) 775602"];
19 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 775603"];
20 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 775604"];
21 [label="options = TestOptions.Regular; 775605"];
22 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 775606"];
23 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 775607"];
24 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 775608"];
25 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 775609"];
26 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 775610"];
27 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 775611"];
28 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 775612"];
29 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 775613"];
30 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 775614"];
31 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 775615"];
32 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 775616"];
33 [label="param CheckSerializable(SyntaxTree tree) 775617"];
34 [label="var stream = new MemoryStream(); 775618"];
35 [label="var root = tree.GetRoot(); 775619"];
36 [label="var root = tree.GetRoot(); 775620"];
37 [label="root.SerializeTo(stream); 775621"];
38 [label="root.SerializeTo(stream); 775622"];
39 [label="root.SerializeTo(stream); 775623"];
40 [label="stream.Position = 0; 775624"];
41 [label="stream.Position 775625"];
42 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 775626"];
43 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 775627"];
44 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 775628"];
45 [label="return tree; 775629"];
46 [label="new[] { Parse(source) } 775630"];
47 [label="OutputKind.ConsoleApplication 775631"];
48 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 775632"];
49 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 775633"];
50 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 775634"];
51 [label="OutputKind.DynamicallyLinkedLibrary 775635"];
52 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 775636"];
53 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 775637"];
54 [label="true 775638"];
55 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 775639"];
56 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 775640"];
57 [label="new[] { Net20.mscorlib } 775641"];
58 [label="CSharpCompilation.Create(\n                'v2Fx.exe',\n                new[] { Parse(source) },\n                new[] { Net20.mscorlib }) 775642"];
59 [label="param Create(string? assemblyName) 775643"];
60 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 775644"];
61 [label="param Create(IEnumerable<MetadataReference>? references = null) 775645"];
62 [label="param Create(CSharpCompilationOptions? options = null) 775646"];
63 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 775647"];
64 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 775648"];
65 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 775649"];
66 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 775650"];
67 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 775651"];
68 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 775652"];
69 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 775653"];
70 [label="param Create(string? assemblyName) 775654"];
71 [label="param Create(CSharpCompilationOptions options) 775655"];
72 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 775656"];
73 [label="param Create(IEnumerable<MetadataReference>? references) 775657"];
74 [label="param Create(CSharpCompilation? previousSubmission) 775658"];
75 [label="param Create(Type? returnType) 775659"];
76 [label="param Create(Type? hostObjectType) 775660"];
77 [label="param Create(bool isSubmission) 775661"];
78 [label="RoslynDebug.Assert(options != null); 775662"];
79 [label="RoslynDebug.Assert(options != null); 775663"];
80 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 775664"];
81 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 775665"];
82 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 775666"];
83 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 775667"];
84 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 775668"];
85 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 775669"];
86 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 775670"];
87 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 775671"];
88 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 775672"];
89 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 775673"];
90 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 775674"];
91 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 775675"];
92 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 775676"];
93 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 775677"];
94 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 775678"];
95 [label="param SyntaxAndDeclarationManager(string scriptClassName) 775679"];
96 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 775680"];
97 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 775681"];
98 [label="param SyntaxAndDeclarationManager(bool isSubmission) 775682"];
99 [label="param SyntaxAndDeclarationManager(State state) 775683"];
100 [label="param SyntaxAndDeclarationManager(this) 775684"];
101 [label="externalSyntaxTrees 775685"];
102 [label="scriptClassName 775686"];
103 [label="resolver 775687"];
104 [label="messageProvider 775688"];
105 [label="isSubmission 775689"];
106 [label="param SyntaxAndDeclarationManager(this) 775690"];
107 [label="param SyntaxAndDeclarationManager(this) 775691"];
108 [label="_lazyState 775692"];
109 [label="_lazyState 775693"];
110 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 775694"];
111 [label="param CSharpCompilation(string? assemblyName) 775695"];
112 [label="param CSharpCompilation(CSharpCompilationOptions options) 775696"];
113 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 775697"];
114 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 775698"];
115 [label="param CSharpCompilation(Type? submissionReturnType) 775699"];
116 [label="param CSharpCompilation(Type? hostObjectType) 775700"];
117 [label="param CSharpCompilation(bool isSubmission) 775701"];
118 [label="param CSharpCompilation(ReferenceManager? referenceManager) 775702"];
119 [label="param CSharpCompilation(bool reuseReferenceManager) 775703"];
120 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 775704"];
121 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 775705"];
122 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 775706"];
123 [label="param CSharpCompilation(this) 775707"];
124 [label="assemblyName 775708"];
125 [label="options 775709"];
126 [label="references 775710"];
127 [label="previousSubmission 775711"];
128 [label="submissionReturnType 775712"];
129 [label="hostObjectType 775713"];
130 [label="isSubmission 775714"];
131 [label="referenceManager 775715"];
132 [label="reuseReferenceManager 775716"];
133 [label="syntaxAndDeclarations 775717"];
134 [label="syntaxAndDeclarations.ExternalSyntaxTrees 775718"];
135 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 775719"];
136 [label="semanticModelProvider 775720"];
137 [label="eventQueue 775721"];
138 [label="param CSharpCompilation(this) 775722"];
139 [label="param CSharpCompilation(string? assemblyName) 775723"];
140 [label="param CSharpCompilation(CSharpCompilationOptions options) 775724"];
141 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 775725"];
142 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 775726"];
143 [label="param CSharpCompilation(Type? submissionReturnType) 775727"];
144 [label="param CSharpCompilation(Type? hostObjectType) 775728"];
145 [label="param CSharpCompilation(bool isSubmission) 775729"];
146 [label="param CSharpCompilation(ReferenceManager? referenceManager) 775730"];
147 [label="param CSharpCompilation(bool reuseReferenceManager) 775731"];
148 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 775732"];
149 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 775733"];
150 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 775734"];
151 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 775735"];
152 [label="param CSharpCompilation(this) 775736"];
153 [label="assemblyName 775737"];
154 [label="references 775738"];
155 [label="features 775739"];
156 [label="isSubmission 775740"];
157 [label="semanticModelProvider 775741"];
158 [label="eventQueue 775742"];
159 [label="param CSharpCompilation(this) 775743"];
160 [label="param CSharpCompilation(this) 775744"];
161 [label="_options 775745"];
162 [label="_globalImports 775746"];
163 [label="_previousSubmissionImports 775747"];
164 [label="_globalNamespaceAlias 775748"];
165 [label="_scriptClass 775749"];
166 [label="_lazyHostObjectTypeSymbol 775750"];
167 [label="_lazyImportInfos 775751"];
168 [label="_conversions 775752"];
169 [label="_anonymousTypeManager 775753"];
170 [label="_lazyGlobalNamespace 775754"];
171 [label="builtInOperators 775755"];
172 [label="_lazyAssemblySymbol 775756"];
173 [label="_referenceManager 775757"];
174 [label="_syntaxAndDeclarations 775758"];
175 [label="_lazyEntryPoint 775759"];
176 [label="_lazyEmitNullablePublicOnly 775760"];
177 [label="_lazyCompilationUnitCompletedTrees 775761"];
178 [label="NullableAnalysisData 775762"];
179 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 775763"];
180 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 775764"];
181 [label="_externAliasTargets 775765"];
182 [label="_moduleInitializerMethods 775766"];
183 [label="_binderFactories 775767"];
184 [label="_ignoreAccessibilityBinderFactories 775768"];
185 [label="_lazyDeclarationDiagnostics 775769"];
186 [label="_declarationDiagnosticsFrozen 775770"];
187 [label="new DiagnosticBag() 775771"];
188 [label="_additionalCodegenWarnings = new DiagnosticBag() 775772"];
189 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 775773"];
190 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 775774"];
191 [label="WellKnownMemberSignatureComparer 775775"];
192 [label="_options 775776"];
193 [label="this.builtInOperators = new BuiltInOperators(this); 775777"];
194 [label="this.builtInOperators = new BuiltInOperators(this); 775778"];
195 [label="new BuiltInOperators(this) 775779"];
196 [label="param BuiltInOperators(CSharpCompilation compilation) 775780"];
197 [label="param BuiltInOperators(this) 775781"];
198 [label="_compilation 775782"];
199 [label="_builtInUnaryOperators 775783"];
200 [label="_builtInOperators 775784"];
201 [label="_compilation 775785"];
202 [label="this.builtInOperators 775786"];
203 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 775787"];
204 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 775788"];
205 [label="_scriptClass 775789"];
206 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 775790"];
207 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 775791"];
208 [label="_globalImports 775792"];
209 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 775793"];
210 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 775794"];
211 [label="_previousSubmissionImports 775795"];
212 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 775796"];
213 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 775797"];
214 [label="_globalNamespaceAlias 775798"];
215 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 775799"];
216 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 775800"];
217 [label="_anonymousTypeManager 775801"];
218 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 775802"];
219 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 775803"];
220 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 775804"];
221 [label="LanguageVersion? result = null; 775805"];
222 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 775806"];
223 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 775807"];
224 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 775808"];
225 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 775809"];
226 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 775810"];
227 [label="this.LanguageVersion 775811"];
228 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 775812"];
229 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775813"];
230 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775814"];
231 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775815"];
232 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775816"];
233 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775817"];
234 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775818"];
235 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 775819"];
236 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 775820"];
237 [label="this.Options 775821"];
238 [label="get\n            {\n                return _options;\n            } 775822"];
239 [label="return _options; 775823"];
240 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 775824"];
241 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 775825"];
242 [label="_referenceManager 775826"];
243 [label="_syntaxAndDeclarations 775827"];
244 [label="Debug.Assert(_lazyAssemblySymbol is null); 775828"];
245 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 775829"];
246 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 775830"];
247 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 775831"];
248 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 775832"];
249 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 775833"];
250 [label="compilation.AddSyntaxTrees(syntaxTrees) 775834"];
251 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 775835"];
252 [label="param AddSyntaxTrees(this) 775836"];
253 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 775837"];
254 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 775838"];
255 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 775839"];
256 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 775840"];
257 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 775841"];
258 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 775842"];
259 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 775843"];
260 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 775844"];
261 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 775845"];
262 [label="bool reuseReferenceManager = true; 775846"];
263 [label="int i = 0; 775847"];
264 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 775848"];
265 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 775849"];
266 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 775850"];
267 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 775851"];
268 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 775852"];
269 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 775853"];
270 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 775854"];
271 [label="externalSyntaxTrees.Add(tree); 775855"];
272 [label="externalSyntaxTrees.Add(tree); 775856"];
273 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 775857"];
274 [label="i++; 775858"];
275 [label="externalSyntaxTrees.Free(); 775859"];
276 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 775860"];
277 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 775861"];
278 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 775862"];
279 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 775863"];
280 [label="param AddSyntaxTrees(this) 775864"];
281 [label="var scriptClassName = this.ScriptClassName; 775865"];
282 [label="var resolver = this.Resolver; 775866"];
283 [label="var messageProvider = this.MessageProvider; 775867"];
284 [label="var isSubmission = this.IsSubmission; 775868"];
285 [label="var state = _lazyState; 775869"];
286 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 775870"];
287 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 775871"];
288 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 775872"];
289 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 775873"];
290 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 775874"];
291 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 775875"];
292 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 775876"];
293 [label="param WithExternalSyntaxTrees(this) 775877"];
294 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 775878"];
295 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 775879"];
296 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 775880"];
297 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 775881"];
298 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 775882"];
299 [label="param SyntaxAndDeclarationManager(string scriptClassName) 775883"];
300 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 775884"];
301 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 775885"];
302 [label="param SyntaxAndDeclarationManager(bool isSubmission) 775886"];
303 [label="param SyntaxAndDeclarationManager(State state) 775887"];
304 [label="param SyntaxAndDeclarationManager(this) 775888"];
305 [label="param SyntaxAndDeclarationManager(this) 775889"];
306 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 775890"];
307 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 775891"];
308 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 775892"];
309 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 775893"];
310 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 775894"];
311 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 775895"];
312 [label="param Update(ReferenceManager referenceManager) 775896"];
313 [label="param Update(bool reuseReferenceManager) 775897"];
314 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 775898"];
315 [label="param Update(this) 775899"];
316 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 775900"];
317 [label="this.PreviousSubmission 775901"];
318 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 775902"];
319 [label="ScriptCompilationInfo 775903"];
320 [label="ScriptCompilationInfo?.PreviousScriptCompilation 775904"];
321 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 775905"];
322 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 775906"];
323 [label="this.SubmissionReturnType 775907"];
324 [label="=> ScriptCompilationInfo 775908"];
325 [label="ScriptCompilationInfo 775909"];
326 [label="this.HostObjectType 775910"];
327 [label="=> ScriptCompilationInfo 775911"];
328 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 775912"];
329 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 775913"];
330 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 775914"];
331 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 775915"];
332 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 775916"];
333 [label="param CSharpCompilation(string? assemblyName) 775917"];
334 [label="param CSharpCompilation(CSharpCompilationOptions options) 775918"];
335 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 775919"];
336 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 775920"];
337 [label="param CSharpCompilation(Type? submissionReturnType) 775921"];
338 [label="param CSharpCompilation(Type? hostObjectType) 775922"];
339 [label="param CSharpCompilation(bool isSubmission) 775923"];
340 [label="param CSharpCompilation(ReferenceManager? referenceManager) 775924"];
341 [label="param CSharpCompilation(bool reuseReferenceManager) 775925"];
342 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 775926"];
343 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 775927"];
344 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 775928"];
345 [label="param CSharpCompilation(this) 775929"];
346 [label="previousSubmission 775930"];
347 [label="submissionReturnType 775931"];
348 [label="hostObjectType 775932"];
349 [label="syntaxAndDeclarations.ExternalSyntaxTrees 775933"];
350 [label="eventQueue 775934"];
351 [label="param CSharpCompilation(this) 775935"];
352 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 775936"];
353 [label="param CSharpCompilation(Type? submissionReturnType) 775937"];
354 [label="param CSharpCompilation(Type? hostObjectType) 775938"];
355 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 775939"];
356 [label="param CSharpCompilation(this) 775940"];
357 [label="eventQueue 775941"];
358 [label="param CSharpCompilation(this) 775942"];
359 [label="_options 775943"];
360 [label="_globalImports 775944"];
361 [label="_previousSubmissionImports 775945"];
362 [label="_globalNamespaceAlias 775946"];
363 [label="_scriptClass 775947"];
364 [label="_lazyHostObjectTypeSymbol 775948"];
365 [label="_lazyImportInfos 775949"];
366 [label="_conversions 775950"];
367 [label="_anonymousTypeManager 775951"];
368 [label="_lazyGlobalNamespace 775952"];
369 [label="builtInOperators 775953"];
370 [label="_lazyAssemblySymbol 775954"];
371 [label="_referenceManager 775955"];
372 [label="_syntaxAndDeclarations 775956"];
373 [label="_lazyEntryPoint 775957"];
374 [label="_lazyEmitNullablePublicOnly 775958"];
375 [label="_lazyCompilationUnitCompletedTrees 775959"];
376 [label="NullableAnalysisData 775960"];
377 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 775961"];
378 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 775962"];
379 [label="_externAliasTargets 775963"];
380 [label="_moduleInitializerMethods 775964"];
381 [label="_binderFactories 775965"];
382 [label="_ignoreAccessibilityBinderFactories 775966"];
383 [label="_lazyDeclarationDiagnostics 775967"];
384 [label="_declarationDiagnosticsFrozen 775968"];
385 [label="new DiagnosticBag() 775969"];
386 [label="_additionalCodegenWarnings = new DiagnosticBag() 775970"];
387 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 775971"];
388 [label="this.builtInOperators = new BuiltInOperators(this); 775972"];
389 [label="this.builtInOperators = new BuiltInOperators(this); 775973"];
390 [label="new BuiltInOperators(this) 775974"];
391 [label="param BuiltInOperators(CSharpCompilation compilation) 775975"];
392 [label="param BuiltInOperators(this) 775976"];
393 [label="_compilation 775977"];
394 [label="_builtInUnaryOperators 775978"];
395 [label="_builtInOperators 775979"];
396 [label="_compilation 775980"];
397 [label="this.builtInOperators 775981"];
398 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 775982"];
399 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 775983"];
400 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 775984"];
401 [label="LanguageVersion? result = null; 775985"];
402 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 775986"];
403 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 775987"];
404 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 775988"];
405 [label="result = version; 775989"];
406 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 775990"];
407 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775991"];
408 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775992"];
409 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775993"];
410 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775994"];
411 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775995"];
412 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 775996"];
413 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 775997"];
414 [label="referenceManager.AssertCanReuseForCompilation(this); 775998"];
415 [label="referenceManager.AssertCanReuseForCompilation(this); 775999"];
416 [label="_referenceManager 776000"];
417 [label="Debug.Assert(_lazyAssemblySymbol is null); 776001"];
418 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 776002"];
419 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 776003"];
420 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 776004"];
421 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 776005"];
422 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 776006"];
423 [label="return compilation; 776007"];
424 [label="var metadataReader = ModuleMetadata.CreateFromStream(compilation.EmitToStream()).MetadataReader; 776008"];
425 [label="var metadataReader = ModuleMetadata.CreateFromStream(compilation.EmitToStream()).MetadataReader; 776009"];
426 [label="compilation.EmitToStream() 776010"];
427 [label="param EmitToStream(this Compilation compilation) 776011"];
428 [label="param EmitToStream(EmitOptions options = null) 776012"];
429 [label="param EmitToStream(DiagnosticDescription[] expectedWarnings = null) 776013"];
430 [label="var stream = new MemoryStream(); 776014"];
431 [label="var emitResult = compilation.Emit(stream, options: options); 776015"];
432 [label="var emitResult = compilation.Emit(stream, options: options); 776016"];
433 [label="var emitResult = compilation.Emit(stream, options: options); 776017"];
434 [label="var emitResult = compilation.Emit(stream, options: options); 776018"];
435 [label="get { return _options; } 776019"];
436 [label="return _options; 776020"];
437 [label="get { return _syntaxAndDeclarations.MessageProvider; } 776021"];
438 [label="return _syntaxAndDeclarations.MessageProvider; 776022"];
439 [label="param CreateModuleBuilder(EmitOptions emitOptions) 776023"];
440 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 776024"];
441 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 776025"];
442 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 776026"];
443 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 776027"];
444 [label="param CreateModuleBuilder(CompilationTestData? testData) 776028"];
445 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 776029"];
446 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 776030"];
447 [label="param CreateModuleBuilder(this) 776031"];
448 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 776032"];
449 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 776033"];
450 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 776034"];
451 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 776035"];
452 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 776036"];
453 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 776037"];
454 [label="param GetRuntimeMetadataVersion(this) 776038"];
455 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 776039"];
456 [label="GetRuntimeMetadataVersion(emitOptions) 776040"];
457 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 776041"];
458 [label="param GetRuntimeMetadataVersion(this) 776042"];
459 [label="Assembly 776043"];
460 [label="get\n            {\n                return SourceAssembly;\n            } 776044"];
461 [label="SourceAssembly 776045"];
462 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 776046"];
463 [label="GetBoundReferenceManager() 776047"];
464 [label="param GetBoundReferenceManager(this) 776048"];
465 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 776049"];
466 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 776050"];
467 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 776051"];
468 [label="get { return this.Declarations.ReferenceDirectives; } 776052"];
469 [label="this.Declarations 776053"];
470 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 776054"];
471 [label="_syntaxAndDeclarations.GetLazyState() 776055"];
472 [label="param GetLazyState(this) 776056"];
473 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776057"];
474 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776058"];
475 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 776059"];
476 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 776060"];
477 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 776061"];
478 [label="param CreateState(string scriptClassName) 776062"];
479 [label="param CreateState(SourceReferenceResolver resolver) 776063"];
480 [label="param CreateState(CommonMessageProvider messageProvider) 776064"];
481 [label="param CreateState(bool isSubmission) 776065"];
482 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 776066"];
483 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 776067"];
484 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 776068"];
485 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 776069"];
486 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 776070"];
487 [label="var declTable = DeclarationTable.Empty; 776071"];
488 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 776072"];
489 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 776073"];
490 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 776074"];
491 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 776075"];
492 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 776076"];
493 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 776077"];
494 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 776078"];
495 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 776079"];
496 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 776080"];
497 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 776081"];
498 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 776082"];
499 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 776083"];
500 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 776084"];
501 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 776085"];
502 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 776086"];
503 [label="param AppendAllSyntaxTrees(string scriptClassName) 776087"];
504 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 776088"];
505 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 776089"];
506 [label="param AppendAllSyntaxTrees(bool isSubmission) 776090"];
507 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 776091"];
508 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 776092"];
509 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 776093"];
510 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 776094"];
511 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 776095"];
512 [label="var sourceCodeKind = tree.Options.Kind; 776096"];
513 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 776097"];
514 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 776098"];
515 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 776099"];
516 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 776100"];
517 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 776101"];
518 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 776102"];
519 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 776103"];
520 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 776104"];
521 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 776105"];
522 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 776106"];
523 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 776107"];
524 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 776108"];
525 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 776109"];
526 [label="declMapBuilder.Add(tree, lazyRoot); 776110"];
527 [label="declMapBuilder.Add(tree, lazyRoot); 776111"];
528 [label="declMapBuilder.Add(tree, lazyRoot); 776112"];
529 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 776113"];
530 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 776114"];
531 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 776115"];
532 [label="treesBuilder.Add(tree); 776116"];
533 [label="treesBuilder.Add(tree); 776117"];
534 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 776118"];
535 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 776119"];
536 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 776120"];
537 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 776121"];
538 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 776122"];
539 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 776123"];
540 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 776124"];
541 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 776125"];
542 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 776126"];
543 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 776127"];
544 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 776128"];
545 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 776129"];
546 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 776130"];
547 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 776131"];
548 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 776132"];
549 [label="param State(DeclarationTable declarationTable) 776133"];
550 [label="param State(this) 776134"];
551 [label="OrdinalMap 776135"];
552 [label="LoadDirectiveMap 776136"];
553 [label="LoadedSyntaxTreeMap 776137"];
554 [label="RootNamespaces 776138"];
555 [label="DeclarationTable 776139"];
556 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 776140"];
557 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 776141"];
558 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 776142"];
559 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 776143"];
560 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 776144"];
561 [label="this.SyntaxTrees 776145"];
562 [label="this.OrdinalMap 776146"];
563 [label="this.LoadDirectiveMap 776147"];
564 [label="this.LoadedSyntaxTreeMap 776148"];
565 [label="this.RootNamespaces 776149"];
566 [label="this.DeclarationTable 776150"];
567 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 776151"];
568 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 776152"];
569 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 776153"];
570 [label="return _lazyState; 776154"];
571 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 776155"];
572 [label="return this.Declarations.ReferenceDirectives; 776156"];
573 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 776157"];
574 [label="_syntaxAndDeclarations.GetLazyState() 776158"];
575 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776159"];
576 [label="Debug.Assert(_lazyAssemblySymbol is object); 776160"];
577 [label="return _referenceManager; 776161"];
578 [label="GetBoundReferenceManager(); 776162"];
579 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 776163"];
580 [label="return _lazyAssemblySymbol; 776164"];
581 [label="return SourceAssembly; 776165"];
582 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 776166"];
583 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 776167"];
584 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 776168"];
585 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 776169"];
586 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 776170"];
587 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 776171"];
588 [label="return runtimeMDVersion; 776172"];
589 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 776173"];
590 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 776174"];
591 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 776175"];
592 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 776176"];
593 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 776177"];
594 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 776178"];
595 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 776179"];
596 [label="get { return SourceAssembly.IsDelaySigned; } 776180"];
597 [label="SourceAssembly 776181"];
598 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 776182"];
599 [label="GetBoundReferenceManager() 776183"];
600 [label="return _referenceManager; 776184"];
601 [label="GetBoundReferenceManager(); 776185"];
602 [label="return SourceAssembly.IsDelaySigned; 776186"];
603 [label="SourceAssembly.IsDelaySigned 776187"];
604 [label="get\n            {\n                return _options;\n            } 776188"];
605 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 776189"];
606 [label="Declarations 776190"];
607 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 776191"];
608 [label="_syntaxAndDeclarations.GetLazyState() 776192"];
609 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776193"];
610 [label="return Declarations.GetMergedRoot(this); 776194"];
611 [label="return Declarations.GetMergedRoot(this); 776195"];
612 [label="return Declarations.GetMergedRoot(this); 776196"];
613 [label="_syntaxAndDeclarations.GetLazyState() 776197"];
614 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776198"];
615 [label="get { return SourceAssembly.StrongNameKeys; } 776199"];
616 [label="SourceAssembly 776200"];
617 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 776201"];
618 [label="GetBoundReferenceManager() 776202"];
619 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 776203"];
620 [label="return _referenceManager; 776204"];
621 [label="GetBoundReferenceManager(); 776205"];
622 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 776206"];
623 [label="return SourceAssembly.StrongNameKeys; 776207"];
624 [label="SourceAssembly.StrongNameKeys 776208"];
625 [label="get\n            {\n                return _options;\n            } 776209"];
626 [label="=> 0x30 776210"];
627 [label="0x30 776211"];
628 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 776212"];
629 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 776213"];
630 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 776214"];
631 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 776215"];
632 [label="PEModuleBuilder moduleBeingBuilt; 776216"];
633 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 776217"];
634 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 776218"];
635 [label="_options.OutputKind.IsValid() 776219"];
636 [label="_options.OutputKind 776220"];
637 [label="SourceAssembly 776221"];
638 [label="return _referenceManager; 776222"];
639 [label="GetBoundReferenceManager(); 776223"];
640 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 776224"];
641 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 776225"];
642 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 776226"];
643 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 776227"];
644 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 776228"];
645 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 776229"];
646 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 776230"];
647 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 776231"];
648 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 776232"];
649 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 776233"];
650 [label="param PEAssemblyBuilder(OutputKind outputKind) 776234"];
651 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 776235"];
652 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 776236"];
653 [label="param PEAssemblyBuilder(this) 776237"];
654 [label="sourceAssembly 776238"];
655 [label="emitOptions 776239"];
656 [label="outputKind 776240"];
657 [label="serializationProperties 776241"];
658 [label="manifestResources 776242"];
659 [label="ImmutableArray<NamedTypeSymbol>.Empty 776243"];
660 [label="param PEAssemblyBuilder(this) 776244"];
661 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 776245"];
662 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 776246"];
663 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 776247"];
664 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 776248"];
665 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 776249"];
666 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 776250"];
667 [label="param PEAssemblyBuilderBase(this) 776251"];
668 [label="0 776252"];
669 [label="sourceAssembly.Modules[0] 776253"];
670 [label="emitOptions 776254"];
671 [label="outputKind 776255"];
672 [label="serializationProperties 776256"];
673 [label="manifestResources 776257"];
674 [label="param PEAssemblyBuilderBase(this) 776258"];
675 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 776259"];
676 [label="param PEModuleBuilder(EmitOptions emitOptions) 776260"];
677 [label="param PEModuleBuilder(OutputKind outputKind) 776261"];
678 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 776262"];
679 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 776263"];
680 [label="param PEModuleBuilder(this) 776264"];
681 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 776265"];
682 [label="sourceModule 776266"];
683 [label="serializationProperties 776267"];
684 [label="manifestResources 776268"];
685 [label="outputKind 776269"];
686 [label="emitOptions 776270"];
687 [label="new ModuleCompilationState() 776271"];
688 [label="param ModuleCompilationState(this) 776272"];
689 [label="param PEModuleBuilder(this) 776273"];
690 [label="param PEModuleBuilder(this) 776274"];
691 [label="get\n            {\n                return true;\n            } 776275"];
692 [label="return true; 776276"];
693 [label="param PEModuleBuilder(this) 776277"];
694 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 776278"];
695 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 776279"];
696 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 776280"];
697 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 776281"];
698 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 776282"];
699 [label="new ConcurrentSet<TypeSymbol>() 776283"];
700 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 776284"];
701 [label="_embeddedTypesManagerOpt 776285"];
702 [label="_metadataName 776286"];
703 [label="_fixedImplementationTypes 776287"];
704 [label="_needsGeneratedAttributes 776288"];
705 [label="_needsGeneratedAttributes_IsFrozen 776289"];
706 [label="var specifiedName = sourceModule.MetadataName; 776290"];
707 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 776291"];
708 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 776292"];
709 [label="_metadataName 776293"];
710 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 776294"];
711 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 776295"];
712 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 776296"];
713 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 776297"];
714 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 776298"];
715 [label="_sourceAssembly 776299"];
716 [label="_lazyEmbeddedAttribute 776300"];
717 [label="_lazyIsReadOnlyAttribute 776301"];
718 [label="_lazyIsByRefLikeAttribute 776302"];
719 [label="_lazyIsUnmanagedAttribute 776303"];
720 [label="_lazyNullableAttribute 776304"];
721 [label="_lazyNullableContextAttribute 776305"];
722 [label="_lazyNullablePublicOnlyAttribute 776306"];
723 [label="_lazyNativeIntegerAttribute 776307"];
724 [label="_metadataName 776308"];
725 [label="Debug.Assert(sourceAssembly is object); 776309"];
726 [label="_sourceAssembly 776310"];
727 [label="_additionalTypes = additionalTypes.NullToEmpty(); 776311"];
728 [label="_additionalTypes 776312"];
729 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 776313"];
730 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 776314"];
731 [label="(emitOptions.OutputNameOverride == null) 776315"];
732 [label="sourceAssembly.MetadataName 776316"];
733 [label="_metadataName 776317"];
734 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 776318"];
735 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 776319"];
736 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 776320"];
737 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 776321"];
738 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 776322"];
739 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 776323"];
740 [label="moduleBeingBuilt.SourceLinkStreamOpt 776324"];
741 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 776325"];
742 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 776326"];
743 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 776327"];
744 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 776328"];
745 [label="return moduleBeingBuilt; 776329"];
746 [label="var emitResult = compilation.Emit(stream, options: options); 776330"];
747 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 776331"];
748 [label="param CompileMethods(bool emittingPdb) 776332"];
749 [label="param CompileMethods(bool emitMetadataOnly) 776333"];
750 [label="param CompileMethods(bool emitTestCoverageData) 776334"];
751 [label="param CompileMethods(DiagnosticBag diagnostics) 776335"];
752 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 776336"];
753 [label="param CompileMethods(CancellationToken cancellationToken) 776337"];
754 [label="param CompileMethods(this) 776338"];
755 [label="PooledHashSet<int>? excludeDiagnostics = null; 776339"];
756 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 776340"];
757 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 776341"];
758 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 776342"];
759 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 776343"];
760 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 776344"];
761 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 776345"];
762 [label="param GetDiagnostics(CompilationStage stage) 776346"];
763 [label="param GetDiagnostics(bool includeEarlierStages) 776347"];
764 [label="param GetDiagnostics(CancellationToken cancellationToken) 776348"];
765 [label="param GetDiagnostics(this) 776349"];
766 [label="var diagnostics = DiagnosticBag.GetInstance(); 776350"];
767 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 776351"];
768 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 776352"];
769 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 776353"];
770 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 776354"];
771 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 776355"];
772 [label="param GetDiagnostics(CompilationStage stage) 776356"];
773 [label="param GetDiagnostics(bool includeEarlierStages) 776357"];
774 [label="param GetDiagnostics(DiagnosticBag diagnostics) 776358"];
775 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 776359"];
776 [label="param GetDiagnostics(this) 776360"];
777 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 776361"];
778 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 776362"];
779 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 776363"];
780 [label="this.SyntaxTrees 776364"];
781 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 776365"];
782 [label="_syntaxAndDeclarations.GetLazyState() 776366"];
783 [label="param GetLazyState(this) 776367"];
784 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776368"];
785 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 776369"];
786 [label="var syntaxTrees = this.SyntaxTrees; 776370"];
787 [label="this.Options 776371"];
788 [label="get\n            {\n                return _options;\n            } 776372"];
789 [label="return _options; 776373"];
790 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 776374"];
791 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 776375"];
792 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 776376"];
793 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 776377"];
794 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 776378"];
795 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 776379"];
796 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 776380"];
797 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 776381"];
798 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 776382"];
799 [label="ImmutableArray<LoadDirective> loadDirectives; 776383"];
800 [label="loadDirectives 776384"];
801 [label="syntaxAndDeclarations.GetLazyState() 776385"];
802 [label="param GetLazyState(this) 776386"];
803 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 776387"];
804 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 776388"];
805 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 776389"];
806 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 776390"];
807 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 776391"];
808 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 776392"];
809 [label="cancellationToken.ThrowIfCancellationRequested(); 776393"];
810 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 776394"];
811 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 776395"];
812 [label="CheckAssemblyName(builder); 776396"];
813 [label="CheckAssemblyName(builder); 776397"];
814 [label="CheckAssemblyName(builder); 776398"];
815 [label="Options 776399"];
816 [label="get\n            {\n                return _options;\n            } 776400"];
817 [label="return _options; 776401"];
818 [label="builder.AddRange(Options.Errors); 776402"];
819 [label="Options 776403"];
820 [label="get\n            {\n                return _options;\n            } 776404"];
821 [label="return _options; 776405"];
822 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 776406"];
823 [label="cancellationToken.ThrowIfCancellationRequested(); 776407"];
824 [label="GetBoundReferenceManager() 776408"];
825 [label="param GetBoundReferenceManager(this) 776409"];
826 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 776410"];
827 [label="return _referenceManager; 776411"];
828 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 776412"];
829 [label="cancellationToken.ThrowIfCancellationRequested(); 776413"];
830 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 776414"];
831 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 776415"];
832 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 776416"];
833 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 776417"];
834 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 776418"];
835 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 776419"];
836 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 776420"];
837 [label="param GetSourceDeclarationDiagnostics(this) 776421"];
838 [label="GlobalImports 776422"];
839 [label="=> _globalImports.Value 776423"];
840 [label="_globalImports.Value 776424"];
841 [label="_globalImports.Value 776425"];
842 [label="=> Imports.FromGlobalUsings(this) 776426"];
843 [label="this 776427"];
844 [label="Imports.FromGlobalUsings(this) 776428"];
845 [label="Imports.FromGlobalUsings(this) 776429"];
846 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 776430"];
847 [label="ScriptCompilationInfo 776431"];
848 [label="ScriptCompilationInfo?.PreviousScriptCompilation 776432"];
849 [label="GlobalImports.Complete(cancellationToken); 776433"];
850 [label="GlobalImports.Complete(cancellationToken); 776434"];
851 [label="GlobalImports.Complete(cancellationToken); 776435"];
852 [label="SourceLocation? location = null; 776436"];
853 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 776437"];
854 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 776438"];
855 [label="Assembly 776439"];
856 [label="get\n            {\n                return SourceAssembly;\n            } 776440"];
857 [label="SourceAssembly 776441"];
858 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 776442"];
859 [label="GetBoundReferenceManager() 776443"];
860 [label="param GetBoundReferenceManager(this) 776444"];
861 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 776445"];
862 [label="return _referenceManager; 776446"];
863 [label="GetBoundReferenceManager(); 776447"];
864 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 776448"];
865 [label="Assembly.ForceComplete(location, cancellationToken); 776449"];
866 [label="Assembly.ForceComplete(location, cancellationToken); 776450"];
867 [label="Assembly.ForceComplete(location, cancellationToken); 776451"];
868 [label="Assembly.ForceComplete(location, cancellationToken); 776452"];
869 [label="Assembly.ForceComplete(location, cancellationToken); 776453"];
870 [label="SourceAssembly 776454"];
871 [label="GetBoundReferenceManager() 776455"];
872 [label="GetBoundReferenceManager(); 776456"];
873 [label="Declarations 776457"];
874 [label="_syntaxAndDeclarations.GetLazyState() 776458"];
875 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776459"];
876 [label="return Declarations.GetMergedRoot(this); 776460"];
877 [label="_syntaxAndDeclarations.GetLazyState() 776461"];
878 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776462"];
879 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 776463"];
880 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 776464"];
881 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 776465"];
882 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 776466"];
883 [label="var diagnostics = new DiagnosticBag(); 776467"];
884 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 776468"];
885 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 776469"];
886 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 776470"];
887 [label="return _lazyDeclarationDiagnostics; 776471"];
888 [label="param SymbolDeclaredEvent(Symbol symbol) 776472"];
889 [label="param SymbolDeclaredEvent(this) 776473"];
890 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 776474"];
891 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 776475"];
892 [label="param GetUnaliasedReferencedAssemblies(this) 776476"];
893 [label="GetBoundReferenceManager() 776477"];
894 [label="param GetBoundReferenceManager(this) 776478"];
895 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 776479"];
896 [label="return _referenceManager; 776480"];
897 [label="var referenceManager = GetBoundReferenceManager(); 776481"];
898 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 776482"];
899 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 776483"];
900 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 776484"];
901 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 776485"];
902 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 776486"];
903 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 776487"];
904 [label="return _additionalCodegenWarnings; 776488"];
905 [label="GetBoundReferenceManager(); 776489"];
906 [label="param GetSpecialType(SpecialType specialType) 776490"];
907 [label="param GetSpecialType(this) 776491"];
908 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 776492"];
909 [label="NamedTypeSymbol result; 776493"];
910 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 776494"];
911 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 776495"];
912 [label="Assembly 776496"];
913 [label="GetBoundReferenceManager(); 776497"];
914 [label="result = Assembly.GetSpecialType(specialType); 776498"];
915 [label="result = Assembly.GetSpecialType(specialType); 776499"];
916 [label="Debug.Assert(result.SpecialType == specialType); 776500"];
917 [label="return result; 776501"];
918 [label="param GetBinder(CSharpSyntaxNode syntax) 776502"];
919 [label="param GetBinder(this) 776503"];
920 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 776504"];
921 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 776505"];
922 [label="GetBinderFactory(syntax.SyntaxTree) 776506"];
923 [label="param GetBinderFactory(SyntaxTree syntaxTree) 776507"];
924 [label="param GetBinderFactory(bool ignoreAccessibility = false) 776508"];
925 [label="param GetBinderFactory(this) 776509"];
926 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 776510"];
927 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 776511"];
928 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 776512"];
929 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 776513"];
930 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 776514"];
931 [label="param GetBinderFactory(SyntaxTree syntaxTree) 776515"];
932 [label="param GetBinderFactory(bool ignoreAccessibility) 776516"];
933 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 776517"];
934 [label="param GetBinderFactory(this) 776518"];
935 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 776519"];
936 [label="ignoreAccessibility 776520"];
937 [label="_binderFactories 776521"];
938 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 776522"];
939 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 776523"];
940 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 776524"];
941 [label="GetSyntaxTreeOrdinal(syntaxTree) 776525"];
942 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 776526"];
943 [label="param GetSyntaxTreeOrdinal(this) 776527"];
944 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 776528"];
945 [label="this.ContainsSyntaxTree(tree) 776529"];
946 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 776530"];
947 [label="param ContainsSyntaxTree(this) 776531"];
948 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 776532"];
949 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 776533"];
950 [label="_syntaxAndDeclarations.GetLazyState() 776534"];
951 [label="param GetLazyState(this) 776535"];
952 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776536"];
953 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 776537"];
954 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 776538"];
955 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 776539"];
956 [label="_syntaxAndDeclarations.GetLazyState() 776540"];
957 [label="param GetLazyState(this) 776541"];
958 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776542"];
959 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 776543"];
960 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 776544"];
961 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 776545"];
962 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 776546"];
963 [label="this.SyntaxTrees 776547"];
964 [label="param GetLazyState(this) 776548"];
965 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 776549"];
966 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 776550"];
967 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 776551"];
968 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 776552"];
969 [label="BinderFactory? previousFactory; 776553"];
970 [label="var previousWeakReference = binderFactories[treeNum]; 776554"];
971 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 776555"];
972 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 776556"];
973 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 776557"];
974 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 776558"];
975 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 776559"];
976 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 776560"];
977 [label="param AddNewFactory(SyntaxTree syntaxTree) 776561"];
978 [label="param AddNewFactory(bool ignoreAccessibility) 776562"];
979 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 776563"];
980 [label="param AddNewFactory(this) 776564"];
981 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 776565"];
982 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 776566"];
983 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 776567"];
984 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 776568"];
985 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 776569"];
986 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 776570"];
987 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 776571"];
988 [label="BinderFactory? previousFactory; 776572"];
989 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 776573"];
990 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 776574"];
991 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 776575"];
992 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 776576"];
993 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 776577"];
994 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 776578"];
995 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 776579"];
996 [label="return newFactory; 776580"];
997 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 776581"];
998 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 776582"];
999 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 776583"];
1000 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 776584"];
1001 [label="GetAllUnaliasedModules(modules); 776585"];
1002 [label="GetAllUnaliasedModules(modules) 776586"];
1003 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 776587"];
1004 [label="param GetAllUnaliasedModules(this) 776588"];
1005 [label="Assembly 776589"];
1006 [label="get\n            {\n                return SourceAssembly;\n            } 776590"];
1007 [label="GetBoundReferenceManager(); 776591"];
1008 [label="modules.AddRange(Assembly.Modules); 776592"];
1009 [label="modules.AddRange(Assembly.Modules); 776593"];
1010 [label="GetBoundReferenceManager() 776594"];
1011 [label="param GetBoundReferenceManager(this) 776595"];
1012 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 776596"];
1013 [label="return _referenceManager; 776597"];
1014 [label="var referenceManager = GetBoundReferenceManager(); 776598"];
1015 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 776599"];
1016 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 776600"];
1017 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 776601"];
1018 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 776602"];
1019 [label="GetAllUnaliasedModules(modules); 776603"];
1020 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 776604"];
1021 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 776605"];
1022 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 776606"];
1023 [label="modules.Free(); 776607"];
1024 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 776608"];
1025 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 776609"];
1026 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 776610"];
1027 [label="return _lazyGlobalNamespace; 776611"];
1028 [label="get\n            {\n                return Assembly.Modules[0];\n            } 776612"];
1029 [label="Assembly 776613"];
1030 [label="get\n            {\n                return SourceAssembly;\n            } 776614"];
1031 [label="SourceAssembly 776615"];
1032 [label="GetBoundReferenceManager() 776616"];
1033 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 776617"];
1034 [label="return _referenceManager; 776618"];
1035 [label="GetBoundReferenceManager(); 776619"];
1036 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 776620"];
1037 [label="return Assembly.Modules[0]; 776621"];
1038 [label="return Assembly.Modules[0]; 776622"];
1039 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 776623"];
1040 [label="param IsNullableAnalysisEnabledIn(this) 776624"];
1041 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 776625"];
1042 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 776626"];
1043 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 776627"];
1044 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 776628"];
1045 [label="param IsNullableAnalysisEnabledIn(this) 776629"];
1046 [label="GetNullableAnalysisValue() 776630"];
1047 [label="param GetNullableAnalysisValue(this) 776631"];
1048 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 776632"];
1049 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 776633"];
1050 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 776634"];
1051 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 776635"];
1052 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 776636"];
1053 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 776637"];
1054 [label="Options 776638"];
1055 [label="get\n            {\n                return _options;\n            } 776639"];
1056 [label="return _options; 776640"];
1057 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 776641"];
1058 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 776642"];
1059 [label="param GetBinderFactory(SyntaxTree syntaxTree) 776643"];
1060 [label="param GetBinderFactory(bool ignoreAccessibility = false) 776644"];
1061 [label="param GetBinderFactory(this) 776645"];
1062 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 776646"];
1063 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 776647"];
1064 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 776648"];
1065 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 776649"];
1066 [label="param GetBinderFactory(SyntaxTree syntaxTree) 776650"];
1067 [label="param GetBinderFactory(bool ignoreAccessibility) 776651"];
1068 [label="param GetBinderFactory(this) 776652"];
1069 [label="ignoreAccessibility 776653"];
1070 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 776654"];
1071 [label="GetSyntaxTreeOrdinal(syntaxTree) 776655"];
1072 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 776656"];
1073 [label="param GetSyntaxTreeOrdinal(this) 776657"];
1074 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 776658"];
1075 [label="this.ContainsSyntaxTree(tree) 776659"];
1076 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 776660"];
1077 [label="param ContainsSyntaxTree(this) 776661"];
1078 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 776662"];
1079 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 776663"];
1080 [label="_syntaxAndDeclarations.GetLazyState() 776664"];
1081 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776665"];
1082 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 776666"];
1083 [label="_syntaxAndDeclarations.GetLazyState() 776667"];
1084 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776668"];
1085 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 776669"];
1086 [label="BinderFactory? previousFactory; 776670"];
1087 [label="var previousWeakReference = binderFactories[treeNum]; 776671"];
1088 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 776672"];
1089 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 776673"];
1090 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 776674"];
1091 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 776675"];
1092 [label="return previousFactory; 776676"];
1093 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 776677"];
1094 [label="param IsFeatureEnabled(MessageID feature) 776678"];
1095 [label="compilation.SyntaxTrees 776679"];
1096 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 776680"];
1097 [label="_syntaxAndDeclarations.GetLazyState() 776681"];
1098 [label="param GetLazyState(this) 776682"];
1099 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 776683"];
1100 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 776684"];
1101 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 776685"];
1102 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 776686"];
1103 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 776687"];
1104 [label="GetBoundReferenceManager(); 776688"];
1105 [label="Debug.Assert(result.SpecialType == specialType); 776689"];
1106 [label="param ShouldEmitNullableAttributes(Symbol symbol) 776690"];
1107 [label="param ShouldEmitNullableAttributes(this) 776691"];
1108 [label="RoslynDebug.Assert(symbol is object); 776692"];
1109 [label="RoslynDebug.Assert(symbol is object); 776693"];
1110 [label="Debug.Assert(symbol.IsDefinition); 776694"];
1111 [label="SourceModule 776695"];
1112 [label="get\n            {\n                return Assembly.Modules[0];\n            } 776696"];
1113 [label="Assembly 776697"];
1114 [label="get\n            {\n                return SourceAssembly;\n            } 776698"];
1115 [label="SourceAssembly 776699"];
1116 [label="GetBoundReferenceManager() 776700"];
1117 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 776701"];
1118 [label="return _referenceManager; 776702"];
1119 [label="GetBoundReferenceManager(); 776703"];
1120 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 776704"];
1121 [label="return Assembly.Modules[0]; 776705"];
1122 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 776706"];
1123 [label="EmitNullablePublicOnly 776707"];
1124 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 776708"];
1125 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 776709"];
1126 [label="SyntaxTrees 776710"];
1127 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 776711"];
1128 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 776712"];
1129 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 776713"];
1130 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 776714"];
1131 [label="_lazyEmitNullablePublicOnly 776715"];
1132 [label="return _lazyEmitNullablePublicOnly.Value(); 776716"];
1133 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 776717"];
1134 [label="return true; 776718"];
1135 [label="Debug.Assert(symbol.IsDefinition); 776719"];
1136 [label="GetBoundReferenceManager(); 776720"];
1137 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 776721"];
1138 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 776722"];
1139 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 776723"];
1140 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 776724"];
1141 [label="_declarationDiagnosticsFrozen = true; 776725"];
1142 [label="_declarationDiagnosticsFrozen 776726"];
1143 [label="_needsGeneratedAttributes_IsFrozen = true; 776727"];
1144 [label="_needsGeneratedAttributes_IsFrozen 776728"];
1145 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 776729"];
1146 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 776730"];
1147 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 776731"];
1148 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 776732"];
1149 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 776733"];
1150 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 776734"];
1151 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 776735"];
1152 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 776736"];
1153 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 776737"];
1154 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 776738"];
1155 [label="param GetClsComplianceDiagnostics(this) 776739"];
1156 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 776740"];
1157 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 776741"];
1158 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 776742"];
1159 [label="var builder = DiagnosticBag.GetInstance(); 776743"];
1160 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 776744"];
1161 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 776745"];
1162 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 776746"];
1163 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 776747"];
1164 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 776748"];
1165 [label="param CheckCompliance(CSharpCompilation compilation) 776749"];
1166 [label="param CheckCompliance(DiagnosticBag diagnostics) 776750"];
1167 [label="param CheckCompliance(CancellationToken cancellationToken) 776751"];
1168 [label="param CheckCompliance(SyntaxTree filterTree = null) 776752"];
1169 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 776753"];
1170 [label="var queue = new ConcurrentQueue<Diagnostic>(); 776754"];
1171 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 776755"];
1172 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 776756"];
1173 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 776757"];
1174 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 776758"];
1175 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 776759"];
1176 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 776760"];
1177 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 776761"];
1178 [label="param ClsComplianceChecker(CSharpCompilation compilation) 776762"];
1179 [label="param ClsComplianceChecker(SyntaxTree filterTree) 776763"];
1180 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 776764"];
1181 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 776765"];
1182 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 776766"];
1183 [label="param ClsComplianceChecker(this) 776767"];
1184 [label="param ClsComplianceChecker(this) 776768"];
1185 [label="_compilation 776769"];
1186 [label="_filterTree 776770"];
1187 [label="_filterSpanWithinTree 776771"];
1188 [label="_diagnostics 776772"];
1189 [label="_declaredOrInheritedCompliance 776773"];
1190 [label="_compilerTasks 776774"];
1191 [label="_compilation 776775"];
1192 [label="_filterTree 776776"];
1193 [label="_filterSpanWithinTree 776777"];
1194 [label="_diagnostics 776778"];
1195 [label="_cancellationToken 776779"];
1196 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 776780"];
1197 [label="_declaredOrInheritedCompliance 776781"];
1198 [label="ConcurrentAnalysis 776782"];
1199 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 776783"];
1200 [label="null 776784"];
1201 [label="_filterTree == null 776785"];
1202 [label="_compilation.Options 776786"];
1203 [label="get\n            {\n                return _options;\n            } 776787"];
1204 [label="return _options; 776788"];
1205 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 776789"];
1206 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 776790"];
1207 [label="_compilerTasks = new ConcurrentStack<Task>(); 776791"];
1208 [label="_compilerTasks 776792"];
1209 [label="compilation.Assembly 776793"];
1210 [label="get\n            {\n                return SourceAssembly;\n            } 776794"];
1211 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 776795"];
1212 [label="return _referenceManager; 776796"];
1213 [label="GetBoundReferenceManager(); 776797"];
1214 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 776798"];
1215 [label="checker.Visit(compilation.Assembly); 776799"];
1216 [label="checker.Visit(compilation.Assembly); 776800"];
1217 [label="checker.Visit(compilation.Assembly); 776801"];
1218 [label="param VisitAssembly(AssemblySymbol symbol) 776802"];
1219 [label="param VisitAssembly(this) 776803"];
1220 [label="_cancellationToken.ThrowIfCancellationRequested(); 776804"];
1221 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 776805"];
1222 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 776806"];
1223 [label="GetDeclaredOrInheritedCompliance(symbol) 776807"];
1224 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 776808"];
1225 [label="param GetDeclaredOrInheritedCompliance(this) 776809"];
1226 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 776810"];
1227 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 776811"];
1228 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 776812"];
1229 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 776813"];
1230 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 776814"];
1231 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 776815"];
1232 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 776816"];
1233 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 776817"];
1234 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 776818"];
1235 [label="Compliance compliance; 776819"];
1236 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 776820"];
1237 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 776821"];
1238 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 776822"];
1239 [label="Location ignoredLocation; 776823"];
1240 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 776824"];
1241 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 776825"];
1242 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 776826"];
1243 [label="param GetDeclaredCompliance(Symbol symbol) 776827"];
1244 [label="param GetDeclaredCompliance(out Location attributeLocation) 776828"];
1245 [label="param GetDeclaredCompliance(this) 776829"];
1246 [label="attributeLocation = null; 776830"];
1247 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 776831"];
1248 [label="return null; 776832"];
1249 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 776833"];
1250 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 776834"];
1251 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 776835"];
1252 [label="compliance = Compliance.ImpliedFalse; 776836"];
1253 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 776837"];
1254 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 776838"];
1255 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 776839"];
1256 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 776840"];
1257 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 776841"];
1258 [label="IsTrue(assemblyCompliance) 776842"];
1259 [label="param IsTrue(Compliance compliance) 776843"];
1260 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 776844"];
1261 [label="return false; 776845"];
1262 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 776846"];
1263 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 776847"];
1264 [label="ModuleSymbol module = symbol.Modules[i]; 776848"];
1265 [label="Location attributeLocation; 776849"];
1266 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 776850"];
1267 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 776851"];
1268 [label="GetDeclaredCompliance(module, out attributeLocation) 776852"];
1269 [label="param GetDeclaredCompliance(Symbol symbol) 776853"];
1270 [label="param GetDeclaredCompliance(out Location attributeLocation) 776854"];
1271 [label="param GetDeclaredCompliance(this) 776855"];
1272 [label="attributeLocation = null; 776856"];
1273 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 776857"];
1274 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 776858"];
1275 [label="i == 0 776859"];
1276 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 776860"];
1277 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 776861"];
1278 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 776862"];
1279 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 776863"];
1280 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 776864"];
1281 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 776865"];
1282 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 776866"];
1283 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 776867"];
1284 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 776868"];
1285 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 776869"];
1286 [label="GetDeclaredOrInheritedCompliance(sourceModule) 776870"];
1287 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 776871"];
1288 [label="param GetDeclaredOrInheritedCompliance(this) 776872"];
1289 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 776873"];
1290 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 776874"];
1291 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 776875"];
1292 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 776876"];
1293 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 776877"];
1294 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 776878"];
1295 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 776879"];
1296 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 776880"];
1297 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 776881"];
1298 [label="Compliance compliance; 776882"];
1299 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 776883"];
1300 [label="Location ignoredLocation; 776884"];
1301 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 776885"];
1302 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 776886"];
1303 [label="param GetDeclaredCompliance(out Location attributeLocation) 776887"];
1304 [label="param GetDeclaredCompliance(this) 776888"];
1305 [label="attributeLocation = null; 776889"];
1306 [label="return null; 776890"];
1307 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 776891"];
1308 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 776892"];
1309 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 776893"];
1310 [label="GetInheritedCompliance(symbol) 776894"];
1311 [label="param GetInheritedCompliance(Symbol symbol) 776895"];
1312 [label="param GetInheritedCompliance(this) 776896"];
1313 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 776897"];
1314 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 776898"];
1315 [label="System.Diagnostics.Debug.Assert((object)containing != null); 776899"];
1316 [label="System.Diagnostics.Debug.Assert((object)containing != null); 776900"];
1317 [label="return GetDeclaredOrInheritedCompliance(containing); 776901"];
1318 [label="GetDeclaredOrInheritedCompliance(containing) 776902"];
1319 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 776903"];
1320 [label="param GetDeclaredOrInheritedCompliance(this) 776904"];
1321 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 776905"];
1322 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 776906"];
1323 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 776907"];
1324 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 776908"];
1325 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 776909"];
1326 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 776910"];
1327 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 776911"];
1328 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 776912"];
1329 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 776913"];
1330 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 776914"];
1331 [label="return compliance; 776915"];
1332 [label="IsTrue(GetInheritedCompliance(symbol)) 776916"];
1333 [label="param IsTrue(Compliance compliance) 776917"];
1334 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 776918"];
1335 [label="return false; 776919"];
1336 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 776920"];
1337 [label="param IsTrue(Compliance compliance) 776921"];
1338 [label="Visit(symbol.GlobalNamespace); 776922"];
1339 [label="Visit(symbol.GlobalNamespace); 776923"];
1340 [label="param VisitNamespace(NamespaceSymbol symbol) 776924"];
1341 [label="param VisitNamespace(this) 776925"];
1342 [label="_cancellationToken.ThrowIfCancellationRequested(); 776926"];
1343 [label="if (DoNotVisit(symbol)) return; 776927"];
1344 [label="DoNotVisit(symbol) 776928"];
1345 [label="param DoNotVisit(Symbol symbol) 776929"];
1346 [label="param DoNotVisit(this) 776930"];
1347 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 776931"];
1348 [label="return false; 776932"];
1349 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 776933"];
1350 [label="GetDeclaredOrInheritedCompliance(symbol) 776934"];
1351 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 776935"];
1352 [label="param GetDeclaredOrInheritedCompliance(this) 776936"];
1353 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 776937"];
1354 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 776938"];
1355 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 776939"];
1356 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 776940"];
1357 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 776941"];
1358 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 776942"];
1359 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 776943"];
1360 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 776944"];
1361 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 776945"];
1362 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 776946"];
1363 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 776947"];
1364 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 776948"];
1365 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 776949"];
1366 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 776950"];
1367 [label="return compliance; 776951"];
1368 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 776952"];
1369 [label="param IsTrue(Compliance compliance) 776953"];
1370 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 776954"];
1371 [label="return false; 776955"];
1372 [label="ConcurrentAnalysis 776956"];
1373 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 776957"];
1374 [label="null 776958"];
1375 [label="_filterTree == null 776959"];
1376 [label="_compilation.Options 776960"];
1377 [label="get\n            {\n                return _options;\n            } 776961"];
1378 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 776962"];
1379 [label="VisitNamespaceMembersAsTasks(symbol); 776963"];
1380 [label="VisitNamespaceMembersAsTasks(symbol) 776964"];
1381 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 776965"];
1382 [label="param VisitNamespaceMembersAsTasks(this) 776966"];
1383 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 776967"];
1384 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 776968"];
1385 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 776969"];
1386 [label="VisitNamespaceMembersAsTasks(symbol); 776970"];
1387 [label="checker.WaitForWorkers() 776971"];
1388 [label="param WaitForWorkers(this) 776972"];
1389 [label="var tasks = _compilerTasks; 776973"];
1390 [label="if (tasks == null)\n            {\n                return;\n            } 776974"];
1391 [label="if (tasks == null)\n            {\n                return;\n            } 776975"];
1392 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 776976"];
1393 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 776977"];
1394 [label="curTask.GetAwaiter().GetResult(); 776978"];
1395 [label="checker.WaitForWorkers(); 776979"];
1396 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 776980"];
1397 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 776981"];
1398 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 776982"];
1399 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 776983"];
1400 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 776984"];
1401 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 776985"];
1402 [label="return _lazyClsComplianceDiagnostics; 776986"];
1403 [label="return result.AsImmutable().Concat(clsDiagnostics); 776987"];
1404 [label="return result.AsImmutable().Concat(clsDiagnostics); 776988"];
1405 [label="return result.AsImmutable().Concat(clsDiagnostics); 776989"];
1406 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 776990"];
1407 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 776991"];
1408 [label="cancellationToken.ThrowIfCancellationRequested(); 776992"];
1409 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 776993"];
1410 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 776994"];
1411 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 776995"];
1412 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 776996"];
1413 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 776997"];
1414 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 776998"];
1415 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 776999"];
1416 [label="return diagnostics.ToReadOnlyAndFree(); 777000"];
1417 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 777001"];
1418 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 777002"];
1419 [label="excludeDiagnostics?.Free(); 777003"];
1420 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 777004"];
1421 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 777005"];
1422 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 777006"];
1423 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 777007"];
1424 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 777008"];
1425 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 777009"];
1426 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 777010"];
1427 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 777011"];
1428 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 777012"];
1429 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 777013"];
1430 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 777014"];
1431 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 777015"];
1432 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 777016"];
1433 [label="param CompileMethodBodies(CSharpCompilation compilation) 777017"];
1434 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 777018"];
1435 [label="param CompileMethodBodies(bool emittingPdb) 777019"];
1436 [label="param CompileMethodBodies(bool emitTestCoverageData) 777020"];
1437 [label="param CompileMethodBodies(bool hasDeclarationErrors) 777021"];
1438 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 777022"];
1439 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 777023"];
1440 [label="param CompileMethodBodies(CancellationToken cancellationToken) 777024"];
1441 [label="Debug.Assert(compilation != null); 777025"];
1442 [label="Debug.Assert(compilation != null); 777026"];
1443 [label="Debug.Assert(diagnostics != null); 777027"];
1444 [label="Debug.Assert(diagnostics != null); 777028"];
1445 [label="compilation.PreviousSubmission 777029"];
1446 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 777030"];
1447 [label="ScriptCompilationInfo 777031"];
1448 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 777032"];
1449 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 777033"];
1450 [label="MethodSymbol entryPoint = null; 777034"];
1451 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 777035"];
1452 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 777036"];
1453 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 777037"];
1454 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 777038"];
1455 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 777039"];
1456 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 777040"];
1457 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 777041"];
1458 [label="param GetEntryPoint(CSharpCompilation compilation) 777042"];
1459 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 777043"];
1460 [label="param GetEntryPoint(bool hasDeclarationErrors) 777044"];
1461 [label="param GetEntryPoint(DiagnosticBag diagnostics) 777045"];
1462 [label="param GetEntryPoint(CancellationToken cancellationToken) 777046"];
1463 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 777047"];
1464 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 777048"];
1465 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 777049"];
1466 [label="param GetEntryPointAndDiagnostics(this) 777050"];
1467 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 777051"];
1468 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 777052"];
1469 [label="EntryPoint? entryPoint; 777053"];
1470 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 777054"];
1471 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 777055"];
1472 [label="GetBoundReferenceManager(); 777056"];
1473 [label="this.Options 777057"];
1474 [label="return _options; 777058"];
1475 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 777059"];
1476 [label="entryPoint = null; 777060"];
1477 [label="this.Options 777061"];
1478 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 777062"];
1479 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 777063"];
1480 [label="if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    } 777064"];
1481 [label="ImmutableArray<Diagnostic> diagnostics; 777065"];
1482 [label="diagnostics 777066"];
1483 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 777067"];
1484 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 777068"];
1485 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 777069"];
1486 [label="FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics) 777070"];
1487 [label="param FindEntryPoint(MethodSymbol? simpleProgramEntryPointSymbol) 777071"];
1488 [label="param FindEntryPoint(CancellationToken cancellationToken) 777072"];
1489 [label="param FindEntryPoint(out ImmutableArray<Diagnostic> sealedDiagnostics) 777073"];
1490 [label="param FindEntryPoint(this) 777074"];
1491 [label="var diagnostics = DiagnosticBag.GetInstance(); 777075"];
1492 [label="var entryPointCandidates = ArrayBuilder<MethodSymbol>.GetInstance(); 777076"];
1493 [label="NamedTypeSymbol? mainType; 777077"];
1494 [label="this.Options 777078"];
1495 [label="get\n            {\n                return _options;\n            } 777079"];
1496 [label="string? mainTypeName = this.Options.MainTypeName; 777080"];
1497 [label="this.SourceModule 777081"];
1498 [label="get\n            {\n                return Assembly.Modules[0];\n            } 777082"];
1499 [label="GetBoundReferenceManager(); 777083"];
1500 [label="NamespaceSymbol globalNamespace = this.SourceModule.GlobalNamespace; 777084"];
1501 [label="this.ScriptClass 777085"];
1502 [label="get { return _scriptClass.Value; } 777086"];
1503 [label="return _scriptClass.Value; 777087"];
1504 [label="_scriptClass.Value 777088"];
1505 [label="param BindScriptClass(this) 777089"];
1506 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 777090"];
1507 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 777091"];
1508 [label="get { return this.SourceModule.GetPublicSymbol(); } 777092"];
1509 [label="this.SourceModule 777093"];
1510 [label="get\n            {\n                return Assembly.Modules[0];\n            } 777094"];
1511 [label="GetBoundReferenceManager(); 777095"];
1512 [label="return this.SourceModule.GetPublicSymbol(); 777096"];
1513 [label="get\n            {\n                return this.SyntaxTrees;\n            } 777097"];
1514 [label="this.SyntaxTrees 777098"];
1515 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 777099"];
1516 [label="param GetLazyState(this) 777100"];
1517 [label="return this.SyntaxTrees; 777101"];
1518 [label="var scriptClass = this.ScriptClass; 777102"];
1519 [label="if (mainTypeName != null)\n                {\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    }\n\n                    var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity();\n                    if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    }\n\n                    mainType = mainTypeOrNamespace as NamedTypeSymbol;\n                    if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    }\n\n                    AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered());\n                }\n                else\n                {\n                    mainType = null;\n\n                    AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken));\n\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    }\n                } 777103"];
1520 [label="if (mainTypeName != null)\n                {\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    }\n\n                    var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity();\n                    if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    }\n\n                    mainType = mainTypeOrNamespace as NamedTypeSymbol;\n                    if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    }\n\n                    AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered());\n                }\n                else\n                {\n                    mainType = null;\n\n                    AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken));\n\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    }\n                } 777104"];
1521 [label="mainType = null; 777105"];
1522 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 777106"];
1523 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 777107"];
1524 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 777108"];
1525 [label="this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken) 777109"];
1526 [label="param GetSymbolsWithNameCore(string name) 777110"];
1527 [label="param GetSymbolsWithNameCore(SymbolFilter filter = SymbolFilter.TypeAndMember) 777111"];
1528 [label="param GetSymbolsWithNameCore(CancellationToken cancellationToken = default) 777112"];
1529 [label="param GetSymbolsWithNameCore(this) 777113"];
1530 [label="if (name == null)\n            {\n                throw new ArgumentNullException(nameof(name));\n            } 777114"];
1531 [label="if (name == null)\n            {\n                throw new ArgumentNullException(nameof(name));\n            } 777115"];
1532 [label="if (filter == SymbolFilter.None)\n            {\n                throw new ArgumentException(CSharpResources.NoNoneSearchCriteria, nameof(filter));\n            } 777116"];
1533 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 777117"];
1534 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 777118"];
1535 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 777119"];
1536 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 777120"];
1537 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 777121"];
1538 [label="new NameSymbolSearcher(this, filter, name, cancellationToken) 777122"];
1539 [label="param NameSymbolSearcher(CSharpCompilation compilation) 777123"];
1540 [label="param NameSymbolSearcher(SymbolFilter filter) 777124"];
1541 [label="param NameSymbolSearcher(string name) 777125"];
1542 [label="param NameSymbolSearcher(CancellationToken cancellationToken) 777126"];
1543 [label="param NameSymbolSearcher(this) 777127"];
1544 [label="compilation 777128"];
1545 [label="filter 777129"];
1546 [label="cancellationToken 777130"];
1547 [label="param NameSymbolSearcher(this) 777131"];
1548 [label="param AbstractSymbolSearcher(CSharpCompilation compilation) 777132"];
1549 [label="param AbstractSymbolSearcher(SymbolFilter filter) 777133"];
1550 [label="param AbstractSymbolSearcher(CancellationToken cancellationToken) 777134"];
1551 [label="param AbstractSymbolSearcher(this) 777135"];
1552 [label="_cache 777136"];
1553 [label="_compilation 777137"];
1554 [label="_includeNamespace 777138"];
1555 [label="_includeType 777139"];
1556 [label="_includeMember 777140"];
1557 [label="_cache = PooledDictionary<Declaration, NamespaceOrTypeSymbol>.GetInstance(); 777141"];
1558 [label="_cache 777142"];
1559 [label="_compilation 777143"];
1560 [label="_includeNamespace = (filter & SymbolFilter.Namespace) == SymbolFilter.Namespace; 777144"];
1561 [label="_includeNamespace 777145"];
1562 [label="_includeType = (filter & SymbolFilter.Type) == SymbolFilter.Type; 777146"];
1563 [label="_includeType 777147"];
1564 [label="_includeMember = (filter & SymbolFilter.Member) == SymbolFilter.Member; 777148"];
1565 [label="_includeMember 777149"];
1566 [label="_cancellationToken 777150"];
1567 [label="_name 777151"];
1568 [label="_name 777152"];
1569 [label="new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName() 777153"];
1570 [label="param GetSymbolsWithName(this) 777154"];
1571 [label="var result = new HashSet<Symbol>(); 777155"];
1572 [label="var spine = ArrayBuilder<MergedNamespaceOrTypeDeclaration>.GetInstance(); 777156"];
1573 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 777157"];
1574 [label="_compilation.MergedRootDeclaration 777158"];
1575 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 777159"];
1576 [label="param GetLazyState(this) 777160"];
1577 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 777161"];
1578 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 777162"];
1579 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result) 777163"];
1580 [label="param AppendSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 777164"];
1581 [label="param AppendSymbolsWithName(MergedNamespaceOrTypeDeclaration current) 777165"];
1582 [label="param AppendSymbolsWithName(HashSet<Symbol> set) 777166"];
1583 [label="param AppendSymbolsWithName(this) 777167"];
1584 [label="if (current.Kind == DeclarationKind.Namespace)\n                {\n                    if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n                }\n                else\n                {\n                    if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n\n                    if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    }\n                } 777168"];
1585 [label="if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    } 777169"];
1586 [label="spine.Add(current); 777170"];
1587 [label="spine.Add(current); 777171"];
1588 [label="foreach (var child in current.Children)\n                {\n                    if (child is MergedNamespaceOrTypeDeclaration mergedNamespaceOrType)\n                    {\n                        if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        }\n                    }\n                } 777172"];
1589 [label="if (child is MergedNamespaceOrTypeDeclaration mergedNamespaceOrType)\n                    {\n                        if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        }\n                    } 777173"];
1590 [label="if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        } 777174"];
1591 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 777175"];
1592 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 777176"];
1593 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 777177"];
1594 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set) 777178"];
1595 [label="param AppendSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 777179"];
1596 [label="param AppendSymbolsWithName(MergedNamespaceOrTypeDeclaration current) 777180"];
1597 [label="param AppendSymbolsWithName(HashSet<Symbol> set) 777181"];
1598 [label="if (current.Kind == DeclarationKind.Namespace)\n                {\n                    if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n                }\n                else\n                {\n                    if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n\n                    if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    }\n                } 777182"];
1599 [label="if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    } 777183"];
1600 [label="if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    } 777184"];
1601 [label="var typeDeclaration = (MergedTypeDeclaration)current; 777185"];
1602 [label="if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        } 777186"];
1603 [label="ShouldCheckTypeForMembers(typeDeclaration) 777187"];
1604 [label="param ShouldCheckTypeForMembers(MergedTypeDeclaration current) 777188"];
1605 [label="param ShouldCheckTypeForMembers(this) 777189"];
1606 [label="foreach (SingleTypeDeclaration typeDecl in current.Declarations)\n                {\n                    if (typeDecl.MemberNames.Contains(_name))\n                    {\n                        return true;\n                    }\n                } 777190"];
1607 [label="if (typeDecl.MemberNames.Contains(_name))\n                    {\n                        return true;\n                    } 777191"];
1608 [label="return true; 777192"];
1609 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 777193"];
1610 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 777194"];
1611 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 777195"];
1612 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set) 777196"];
1613 [label="param AppendMemberSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 777197"];
1614 [label="param AppendMemberSymbolsWithName(MergedTypeDeclaration current) 777198"];
1615 [label="param AppendMemberSymbolsWithName(HashSet<Symbol> set) 777199"];
1616 [label="param AppendMemberSymbolsWithName(this) 777200"];
1617 [label="_cancellationToken.ThrowIfCancellationRequested(); 777201"];
1618 [label="spine.Add(current); 777202"];
1619 [label="spine.Add(current); 777203"];
1620 [label="var container = GetSpineSymbol(spine); 777204"];
1621 [label="GetSpineSymbol(spine) 777205"];
1622 [label="param GetSpineSymbol(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 777206"];
1623 [label="param GetSpineSymbol(this) 777207"];
1624 [label="if (spine.Count == 0)\n                {\n                    return null;\n                } 777208"];
1625 [label="if (spine.Count == 0)\n                {\n                    return null;\n                } 777209"];
1626 [label="var symbol = GetCachedSymbol(spine[spine.Count - 1]); 777210"];
1627 [label="var symbol = GetCachedSymbol(spine[spine.Count - 1]); 777211"];
1628 [label="GetCachedSymbol(spine[spine.Count - 1]) 777212"];
1629 [label="param GetCachedSymbol(MergedNamespaceOrTypeDeclaration declaration) 777213"];
1630 [label="=> _cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 777214"];
1631 [label="declaration 777215"];
1632 [label="symbol 777216"];
1633 [label="out NamespaceOrTypeSymbol? symbol 777217"];
1634 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol) 777218"];
1635 [label="null 777219"];
1636 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 777220"];
1637 [label="if (symbol != null)\n                {\n                    return symbol;\n                } 777221"];
1638 [label="if (symbol != null)\n                {\n                    return symbol;\n                } 777222"];
1639 [label="_compilation.GlobalNamespace 777223"];
1640 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 777224"];
1641 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 777225"];
1642 [label="return _lazyGlobalNamespace; 777226"];
1643 [label="NamespaceOrTypeSymbol? current = _compilation.GlobalNamespace; 777227"];
1644 [label="for (var i = 1; i < spine.Count; i++)\n                {\n                    current = GetSymbol(current, spine[i]);\n                } 777228"];
1645 [label="for (var i = 1; i < spine.Count; i++)\n                {\n                    current = GetSymbol(current, spine[i]);\n                } 777229"];
1646 [label="current = GetSymbol(current, spine[i]); 777230"];
1647 [label="current = GetSymbol(current, spine[i]); 777231"];
1648 [label="GetSymbol(current, spine[i]) 777232"];
1649 [label="param GetSymbol(NamespaceOrTypeSymbol? container) 777233"];
1650 [label="param GetSymbol(MergedNamespaceOrTypeDeclaration declaration) 777234"];
1651 [label="param GetSymbol(this) 777235"];
1652 [label="if (container == null)\n                {\n                    return _compilation.GlobalNamespace;\n                } 777236"];
1653 [label="if (container == null)\n                {\n                    return _compilation.GlobalNamespace;\n                } 777237"];
1654 [label="if (declaration.Kind == DeclarationKind.Namespace)\n                {\n                    AddCache(container.GetMembers(declaration.Name).OfType<NamespaceOrTypeSymbol>());\n                }\n                else\n                {\n                    AddCache(container.GetTypeMembers(declaration.Name));\n                } 777238"];
1655 [label="AddCache(container.GetTypeMembers(declaration.Name)); 777239"];
1656 [label="AddCache(container.GetTypeMembers(declaration.Name)); 777240"];
1657 [label="AddCache(container.GetTypeMembers(declaration.Name)) 777241"];
1658 [label="param AddCache(IEnumerable<NamespaceOrTypeSymbol> symbols) 777242"];
1659 [label="param AddCache(this) 777243"];
1660 [label="foreach (var symbol in symbols)\n                {\n                    var mergedNamespace = symbol as MergedNamespaceSymbol;\n                    if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    }\n\n                    var sourceNamespace = symbol as SourceNamespaceSymbol;\n                    if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    }\n\n                    var sourceType = symbol as SourceMemberContainerTypeSymbol;\n                    if (sourceType is object)\n                    {\n                        _cache[sourceType.MergedDeclaration] = sourceType;\n                    }\n                } 777244"];
1661 [label="var mergedNamespace = symbol as MergedNamespaceSymbol; 777245"];
1662 [label="if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    } 777246"];
1663 [label="if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    } 777247"];
1664 [label="var sourceNamespace = symbol as SourceNamespaceSymbol; 777248"];
1665 [label="if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    } 777249"];
1666 [label="if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    } 777250"];
1667 [label="var sourceType = symbol as SourceMemberContainerTypeSymbol; 777251"];
1668 [label="if (sourceType is object)\n                    {\n                        _cache[sourceType.MergedDeclaration] = sourceType;\n                    } 777252"];
1669 [label="_cache 777253"];
1670 [label="AddCache(container.GetTypeMembers(declaration.Name)); 777254"];
1671 [label="return GetCachedSymbol(declaration); 777255"];
1672 [label="GetCachedSymbol(declaration) 777256"];
1673 [label="param GetCachedSymbol(MergedNamespaceOrTypeDeclaration declaration) 777257"];
1674 [label="=> _cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 777258"];
1675 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol) 777259"];
1676 [label="symbol 777260"];
1677 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 777261"];
1678 [label="return current; 777262"];
1679 [label="if (container != null)\n                {\n                    foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    }\n                } 777263"];
1680 [label="if (container != null)\n                {\n                    foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    }\n                } 777264"];
1681 [label="new LexicalOrderSymbolComparer() 777265"];
1682 [label="param LexicalOrderSymbolComparer(this) 777266"];
1683 [label="Instance = new LexicalOrderSymbolComparer() 777267"];
1684 [label="foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    } 777268"];
1685 [label="foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    } 777269"];
1686 [label="param Compare(Symbol x) 777270"];
1687 [label="param Compare(Symbol y) 777271"];
1688 [label="param Compare(this) 777272"];
1689 [label="int comparison; 777273"];
1690 [label="if (x == y)\n            {\n                return 0;\n            } 777274"];
1691 [label="var xSortKey = x.GetLexicalSortKey(); 777275"];
1692 [label="var ySortKey = y.GetLexicalSortKey(); 777276"];
1693 [label="var ySortKey = y.GetLexicalSortKey(); 777277"];
1694 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 777278"];
1695 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 777279"];
1696 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 777280"];
1697 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 777281"];
1698 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 777282"];
1699 [label="return comparison; 777283"];
1700 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 777284"];
1701 [label="if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        } 777285"];
1702 [label="Matches(member.Name) 777286"];
1703 [label="param Matches(string name) 777287"];
1704 [label="=> _name == name 777288"];
1705 [label="_name == name 777289"];
1706 [label="set.Add(member); 777290"];
1707 [label="set.Add(member); 777291"];
1708 [label="spine.RemoveAt(spine.Count - 1); 777292"];
1709 [label="spine.RemoveAt(spine.Count - 1); 777293"];
1710 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 777294"];
1711 [label="spine.RemoveAt(spine.Count - 1); 777295"];
1712 [label="spine.RemoveAt(spine.Count - 1); 777296"];
1713 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 777297"];
1714 [label="spine.RemoveAt(spine.Count - 1); 777298"];
1715 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 777299"];
1716 [label="spine.Free(); 777300"];
1717 [label="_cache.Free(); 777301"];
1718 [label="return result; 777302"];
1719 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 777303"];
1720 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 777304"];
1721 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)) 777305"];
1722 [label="param AddEntryPointCandidates(ArrayBuilder<MethodSymbol> entryPointCandidates) 777306"];
1723 [label="param AddEntryPointCandidates(IEnumerable<Symbol> members) 777307"];
1724 [label="foreach (var member in members)\n            {\n                if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                }\n            } 777308"];
1725 [label="foreach (var member in members)\n            {\n                if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                }\n            } 777309"];
1726 [label="if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                } 777310"];
1727 [label="entryPointCandidates.Add(method); 777311"];
1728 [label="entryPointCandidates.Add(method); 777312"];
1729 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 777313"];
1730 [label="if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    } 777314"];
1731 [label="var taskEntryPoints = ArrayBuilder<(bool IsValid, MethodSymbol Candidate, DiagnosticBag SpecificDiagnostics)>.GetInstance(); 777315"];
1732 [label="DiagnosticBag noMainFoundDiagnostics = DiagnosticBag.GetInstance(); 777316"];
1733 [label="var viableEntryPoints = ArrayBuilder<MethodSymbol>.GetInstance(); 777317"];
1734 [label="foreach (var candidate in entryPointCandidates)\n                {\n                    var perCandidateBag = DiagnosticBag.GetInstance();\n                    var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag);\n\n                    if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    }\n                } 777318"];
1735 [label="foreach (var candidate in entryPointCandidates)\n                {\n                    var perCandidateBag = DiagnosticBag.GetInstance();\n                    var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag);\n\n                    if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    }\n                } 777319"];
1736 [label="var perCandidateBag = DiagnosticBag.GetInstance(); 777320"];
1737 [label="var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag); 777321"];
1738 [label="var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag); 777322"];
1739 [label="HasEntryPointSignature(candidate, perCandidateBag) 777323"];
1740 [label="param HasEntryPointSignature(MethodSymbol method) 777324"];
1741 [label="param HasEntryPointSignature(DiagnosticBag bag) 777325"];
1742 [label="param HasEntryPointSignature(this) 777326"];
1743 [label="if (method.IsVararg)\n            {\n                return (false, false);\n            } 777327"];
1744 [label="TypeSymbol returnType = method.ReturnType; 777328"];
1745 [label="bool returnsTaskOrTaskOfInt = false; 777329"];
1746 [label="if (returnType.SpecialType != SpecialType.System_Int32 && !returnType.IsVoidType())\n            {\n                // Never look for ReturnsAwaitableToVoidOrInt on int32 or void\n                returnsTaskOrTaskOfInt = ReturnsAwaitableToVoidOrInt(method, bag);\n                if (!returnsTaskOrTaskOfInt)\n                {\n                    return (false, false);\n                }\n            } 777330"];
1747 [label="if (returnType.SpecialType != SpecialType.System_Int32 && !returnType.IsVoidType())\n            {\n                // Never look for ReturnsAwaitableToVoidOrInt on int32 or void\n                returnsTaskOrTaskOfInt = ReturnsAwaitableToVoidOrInt(method, bag);\n                if (!returnsTaskOrTaskOfInt)\n                {\n                    return (false, false);\n                }\n            } 777331"];
1748 [label="if (method.RefKind != RefKind.None)\n            {\n                return (false, returnsTaskOrTaskOfInt);\n            } 777332"];
1749 [label="if (method.Parameters.Length == 0)\n            {\n                return (true, returnsTaskOrTaskOfInt);\n            } 777333"];
1750 [label="if (method.Parameters.Length == 0)\n            {\n                return (true, returnsTaskOrTaskOfInt);\n            } 777334"];
1751 [label="return (true, returnsTaskOrTaskOfInt); 777335"];
1752 [label="true 777336"];
1753 [label="returnsTaskOrTaskOfInt 777337"];
1754 [label="if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    } 777338"];
1755 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 777339"];
1756 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 777340"];
1757 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 777341"];
1758 [label="checkValid(candidate, IsCandidate, perCandidateBag) 777342"];
1759 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 777343"];
1760 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 777344"];
1761 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 777345"];
1762 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 777346"];
1763 [label="if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    } 777347"];
1764 [label="if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    } 777348"];
1765 [label="return true; 777349"];
1766 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 777350"];
1767 [label="if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            } 777351"];
1768 [label="diagnostics.AddRange(perCandidateBag); 777352"];
1769 [label="diagnostics.AddRange(perCandidateBag); 777353"];
1770 [label="viableEntryPoints.Add(candidate); 777354"];
1771 [label="viableEntryPoints.Add(candidate); 777355"];
1772 [label="perCandidateBag.Free(); 777356"];
1773 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 777357"];
1774 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 777358"];
1775 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 777359"];
1776 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 777360"];
1777 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 777361"];
1778 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 777362"];
1779 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 777363"];
1780 [label="if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 777364"];
1781 [label="foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    } 777365"];
1782 [label="MethodSymbol? entryPoint = null; 777366"];
1783 [label="if (viableEntryPoints.Count == 0)\n                {\n                    if (mainType is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoEntryPoint, NoLocation.Singleton);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoMainInClass, mainType.Locations.First(), mainType);\n                    }\n                }\n                else\n                {\n                    foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    }\n\n                    if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    }\n                } 777367"];
1784 [label="if (viableEntryPoints.Count == 0)\n                {\n                    if (mainType is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoEntryPoint, NoLocation.Singleton);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoMainInClass, mainType.Locations.First(), mainType);\n                    }\n                }\n                else\n                {\n                    foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    }\n\n                    if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    }\n                } 777368"];
1785 [label="foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    } 777369"];
1786 [label="if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        } 777370"];
1787 [label="if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    } 777371"];
1788 [label="if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    } 777372"];
1789 [label="entryPoint = viableEntryPoints[0]; 777373"];
1790 [label="taskEntryPoints.Free(); 777374"];
1791 [label="viableEntryPoints.Free(); 777375"];
1792 [label="noMainFoundDiagnostics.Free(); 777376"];
1793 [label="return entryPoint; 777377"];
1794 [label="entryPointCandidates.Free(); 777378"];
1795 [label="sealedDiagnostics = diagnostics.ToReadOnlyAndFree(); 777379"];
1796 [label="null 777380"];
1797 [label="ImmutableArray<Diagnostic>.Empty 777381"];
1798 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 777382"];
1799 [label="param EntryPoint(MethodSymbol? methodSymbol) 777383"];
1800 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 777384"];
1801 [label="param EntryPoint(this) 777385"];
1802 [label="MethodSymbol 777386"];
1803 [label="this.MethodSymbol 777387"];
1804 [label="this.Diagnostics 777388"];
1805 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 777389"];
1806 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 777390"];
1807 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 777391"];
1808 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 777392"];
1809 [label="new EntryPoint(entryPointMethod, diagnostics) 777393"];
1810 [label="param EntryPoint(MethodSymbol? methodSymbol) 777394"];
1811 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 777395"];
1812 [label="param EntryPoint(this) 777396"];
1813 [label="MethodSymbol 777397"];
1814 [label="this.MethodSymbol 777398"];
1815 [label="this.Diagnostics 777399"];
1816 [label="this.Options 777400"];
1817 [label="return _options; 777401"];
1818 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 777402"];
1819 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 777403"];
1820 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 777404"];
1821 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 777405"];
1822 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 777406"];
1823 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 777407"];
1824 [label="return _lazyEntryPoint; 777408"];
1825 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 777409"];
1826 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 777410"];
1827 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 777411"];
1828 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 777412"];
1829 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 777413"];
1830 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 777414"];
1831 [label="SynthesizedEntryPointSymbol synthesizedEntryPoint = entryPoint as SynthesizedEntryPointSymbol; 777415"];
1832 [label="if ((object)synthesizedEntryPoint == null)\n            {\n                var returnType = entryPoint.ReturnType;\n                if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                }\n            } 777416"];
1833 [label="if ((object)synthesizedEntryPoint == null)\n            {\n                var returnType = entryPoint.ReturnType;\n                if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                }\n            } 777417"];
1834 [label="var returnType = entryPoint.ReturnType; 777418"];
1835 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 777419"];
1836 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 777420"];
1837 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 777421"];
1838 [label="GetBoundReferenceManager(); 777422"];
1839 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 777423"];
1840 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 777424"];
1841 [label="return entryPoint; 777425"];
1842 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 777426"];
1843 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 777427"];
1844 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 777428"];
1845 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 777429"];
1846 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 777430"];
1847 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 777431"];
1848 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 777432"];
1849 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 777433"];
1850 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 777434"];
1851 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 777435"];
1852 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 777436"];
1853 [label="param MethodCompiler(CSharpCompilation compilation) 777437"];
1854 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 777438"];
1855 [label="param MethodCompiler(bool emittingPdb) 777439"];
1856 [label="param MethodCompiler(bool emitTestCoverageData) 777440"];
1857 [label="param MethodCompiler(bool hasDeclarationErrors) 777441"];
1858 [label="param MethodCompiler(DiagnosticBag diagnostics) 777442"];
1859 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 777443"];
1860 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 777444"];
1861 [label="param MethodCompiler(CancellationToken cancellationToken) 777445"];
1862 [label="param MethodCompiler(this) 777446"];
1863 [label="param MethodCompiler(this) 777447"];
1864 [label="_compilation 777448"];
1865 [label="_emittingPdb 777449"];
1866 [label="_emitTestCoverageData 777450"];
1867 [label="_diagnostics 777451"];
1868 [label="_hasDeclarationErrors 777452"];
1869 [label="_moduleBeingBuiltOpt 777453"];
1870 [label="_filterOpt 777454"];
1871 [label="_debugDocumentProvider 777455"];
1872 [label="_entryPointOpt 777456"];
1873 [label="_compilerTasks 777457"];
1874 [label="_globalHasErrors 777458"];
1875 [label="Debug.Assert(compilation != null); 777459"];
1876 [label="Debug.Assert(compilation != null); 777460"];
1877 [label="Debug.Assert(diagnostics != null); 777461"];
1878 [label="Debug.Assert(diagnostics != null); 777462"];
1879 [label="_compilation 777463"];
1880 [label="_moduleBeingBuiltOpt 777464"];
1881 [label="_emittingPdb 777465"];
1882 [label="_cancellationToken 777466"];
1883 [label="_diagnostics 777467"];
1884 [label="_filterOpt 777468"];
1885 [label="_entryPointOpt 777469"];
1886 [label="_hasDeclarationErrors 777470"];
1887 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 777471"];
1888 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 777472"];
1889 [label="param SetGlobalErrorIfTrue(bool arg) 777473"];
1890 [label="param SetGlobalErrorIfTrue(this) 777474"];
1891 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 777475"];
1892 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 777476"];
1893 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 777477"];
1894 [label="_emitTestCoverageData 777478"];
1895 [label="compilation.Options 777479"];
1896 [label="get\n            {\n                return _options;\n            } 777480"];
1897 [label="return _options; 777481"];
1898 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 777482"];
1899 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 777483"];
1900 [label="methodCompiler._compilerTasks 777484"];
1901 [label="compilation.SourceModule 777485"];
1902 [label="get\n            {\n                return Assembly.Modules[0];\n            } 777486"];
1903 [label="Assembly 777487"];
1904 [label="get\n            {\n                return SourceAssembly;\n            } 777488"];
1905 [label="SourceAssembly 777489"];
1906 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 777490"];
1907 [label="GetBoundReferenceManager() 777491"];
1908 [label="param GetBoundReferenceManager(this) 777492"];
1909 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 777493"];
1910 [label="return _referenceManager; 777494"];
1911 [label="GetBoundReferenceManager(); 777495"];
1912 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 777496"];
1913 [label="return Assembly.Modules[0]; 777497"];
1914 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 777498"];
1915 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 777499"];
1916 [label="param CompileNamespace(NamespaceSymbol symbol) 777500"];
1917 [label="param CompileNamespace(this) 777501"];
1918 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 777502"];
1919 [label="s.Accept(this, null); 777503"];
1920 [label="s.Accept(this, null); 777504"];
1921 [label="s.Accept(this, null); 777505"];
1922 [label="param VisitNamedType(NamedTypeSymbol symbol) 777506"];
1923 [label="param VisitNamedType(TypeCompilationState arg) 777507"];
1924 [label="param VisitNamedType(this) 777508"];
1925 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 777509"];
1926 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 777510"];
1927 [label="PassesFilter(_filterOpt, symbol) 777511"];
1928 [label="param PassesFilter(Predicate<Symbol> filterOpt) 777512"];
1929 [label="param PassesFilter(Symbol symbol) 777513"];
1930 [label="return (filterOpt == null) || filterOpt(symbol); 777514"];
1931 [label="return (filterOpt == null) || filterOpt(symbol); 777515"];
1932 [label="arg = null; 777516"];
1933 [label="_cancellationToken.ThrowIfCancellationRequested(); 777517"];
1934 [label="_compilation.Options 777518"];
1935 [label="get\n            {\n                return _options;\n            } 777519"];
1936 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 777520"];
1937 [label="Task worker = CompileNamedTypeAsync(symbol); 777521"];
1938 [label="CompileNamedTypeAsync(symbol) 777522"];
1939 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 777523"];
1940 [label="param CompileNamedTypeAsync(this) 777524"];
1941 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 777525"];
1942 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 777526"];
1943 [label="Task worker = CompileNamedTypeAsync(symbol); 777527"];
1944 [label="_compilerTasks.Push(worker); 777528"];
1945 [label="return null; 777529"];
1946 [label="s.Accept(this, null); 777530"];
1947 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 777531"];
1948 [label="methodCompiler.WaitForWorkers() 777532"];
1949 [label="param WaitForWorkers(this) 777533"];
1950 [label="var tasks = _compilerTasks; 777534"];
1951 [label="if (tasks == null)\n            {\n                return;\n            } 777535"];
1952 [label="if (tasks == null)\n            {\n                return;\n            } 777536"];
1953 [label="Task curTask; 777537"];
1954 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 777538"];
1955 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 777539"];
1956 [label="curTask.GetAwaiter().GetResult(); 777540"];
1957 [label="methodCompiler.WaitForWorkers(); 777541"];
1958 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 777542"];
1959 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 777543"];
1960 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 777544"];
1961 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 777545"];
1962 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 777546"];
1963 [label="=> _additionalTypes 777547"];
1964 [label="_additionalTypes 777548"];
1965 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 777549"];
1966 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 777550"];
1967 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 777551"];
1968 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 777552"];
1969 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 777553"];
1970 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 777554"];
1971 [label="param CompileSynthesizedMethods(this) 777555"];
1972 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 777556"];
1973 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 777557"];
1974 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 777558"];
1975 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 777559"];
1976 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 777560"];
1977 [label="param GetEmbeddedTypes(this) 777561"];
1978 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 777562"];
1979 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 777563"];
1980 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 777564"];
1981 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 777565"];
1982 [label="param CreateEmbeddedAttributesIfNeeded(this) 777566"];
1983 [label="GetNeedsGeneratedAttributes() 777567"];
1984 [label="param GetNeedsGeneratedAttributes(this) 777568"];
1985 [label="_needsGeneratedAttributes_IsFrozen = true; 777569"];
1986 [label="_needsGeneratedAttributes_IsFrozen 777570"];
1987 [label="GetNeedsGeneratedAttributesInternal() 777571"];
1988 [label="param GetNeedsGeneratedAttributesInternal(this) 777572"];
1989 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 777573"];
1990 [label="return GetNeedsGeneratedAttributesInternal(); 777574"];
1991 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 777575"];
1992 [label="ShouldEmitNullablePublicOnlyAttribute() 777576"];
1993 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 777577"];
1994 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 777578"];
1995 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 777579"];
1996 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 777580"];
1997 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 777581"];
1998 [label="return; 777582"];
1999 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 777583"];
2000 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 777584"];
2001 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 777585"];
2002 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 777586"];
2003 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 777587"];
2004 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 777588"];
2005 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 777589"];
2006 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 777590"];
2007 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 777591"];
2008 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 777592"];
2009 [label="builder.AddIfNotNull(_lazyNullableAttribute); 777593"];
2010 [label="builder.AddIfNotNull(_lazyNullableAttribute); 777594"];
2011 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 777595"];
2012 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 777596"];
2013 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 777597"];
2014 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 777598"];
2015 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 777599"];
2016 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 777600"];
2017 [label="return builder.ToImmutableAndFree(); 777601"];
2018 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 777602"];
2019 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 777603"];
2020 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 777604"];
2021 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 777605"];
2022 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 777606"];
2023 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 777607"];
2024 [label="param CompileSynthesizedMethods(this) 777608"];
2025 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 777609"];
2026 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 777610"];
2027 [label="compilation.AnonymousTypeManager 777611"];
2028 [label="get\n            {\n                return _anonymousTypeManager;\n            } 777612"];
2029 [label="return _anonymousTypeManager; 777613"];
2030 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 777614"];
2031 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 777615"];
2032 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 777616"];
2033 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 777617"];
2034 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 777618"];
2035 [label="param GetPreviousAnonymousTypes(this) 777619"];
2036 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 777620"];
2037 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 777621"];
2038 [label="param GetNextAnonymousTypeIndex(this) 777622"];
2039 [label="return 0; 777623"];
2040 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 777624"];
2041 [label="methodCompiler.WaitForWorkers() 777625"];
2042 [label="param WaitForWorkers(this) 777626"];
2043 [label="var tasks = _compilerTasks; 777627"];
2044 [label="if (tasks == null)\n            {\n                return;\n            } 777628"];
2045 [label="if (tasks == null)\n            {\n                return;\n            } 777629"];
2046 [label="Task curTask; 777630"];
2047 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 777631"];
2048 [label="methodCompiler.WaitForWorkers(); 777632"];
2049 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 777633"];
2050 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 777634"];
2051 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 777635"];
2052 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 777636"];
2053 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 777637"];
2054 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 777638"];
2055 [label="compilation.AdditionalCodegenWarnings 777639"];
2056 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 777640"];
2057 [label="return _additionalCodegenWarnings; 777641"];
2058 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 777642"];
2059 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 777643"];
2060 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 777644"];
2061 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 777645"];
2062 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 777646"];
2063 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 777647"];
2064 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 777648"];
2065 [label="param WarnUnusedFields(CSharpCompilation compilation) 777649"];
2066 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 777650"];
2067 [label="param WarnUnusedFields(CancellationToken cancellationToken) 777651"];
2068 [label="compilation.Assembly 777652"];
2069 [label="get\n            {\n                return SourceAssembly;\n            } 777653"];
2070 [label="SourceAssembly 777654"];
2071 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 777655"];
2072 [label="GetBoundReferenceManager() 777656"];
2073 [label="param GetBoundReferenceManager(this) 777657"];
2074 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 777658"];
2075 [label="return _referenceManager; 777659"];
2076 [label="GetBoundReferenceManager(); 777660"];
2077 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 777661"];
2078 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 777662"];
2079 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 777663"];
2080 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 777664"];
2081 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 777665"];
2082 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 777666"];
2083 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 777667"];
2084 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 777668"];
2085 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 777669"];
2086 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 777670"];
2087 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 777671"];
2088 [label="compilation.Options 777672"];
2089 [label="get\n            {\n                return _options;\n            } 777673"];
2090 [label="return _options; 777674"];
2091 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 777675"];
2092 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 777676"];
2093 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 777677"];
2094 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 777678"];
2095 [label="param Translate(MethodSymbol symbol) 777679"];
2096 [label="param Translate(DiagnosticBag diagnostics) 777680"];
2097 [label="param Translate(bool needDeclaration) 777681"];
2098 [label="param Translate(this) 777682"];
2099 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 777683"];
2100 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 777684"];
2101 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 777685"];
2102 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 777686"];
2103 [label="Translate(symbol, null, diagnostics, null, needDeclaration) 777687"];
2104 [label="param Translate(MethodSymbol methodSymbol) 777688"];
2105 [label="param Translate(SyntaxNode syntaxNodeOpt) 777689"];
2106 [label="param Translate(DiagnosticBag diagnostics) 777690"];
2107 [label="param Translate(BoundArgListOperator optArgList = null) 777691"];
2108 [label="param Translate(bool needDeclaration = false) 777692"];
2109 [label="param Translate(this) 777693"];
2110 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 777694"];
2111 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 777695"];
2112 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 777696"];
2113 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 777697"];
2114 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 777698"];
2115 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 777699"];
2116 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 777700"];
2117 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 777701"];
2118 [label="param Translate(MethodSymbol methodSymbol) 777702"];
2119 [label="param Translate(SyntaxNode syntaxNodeOpt) 777703"];
2120 [label="param Translate(DiagnosticBag diagnostics) 777704"];
2121 [label="param Translate(bool needDeclaration) 777705"];
2122 [label="param Translate(this) 777706"];
2123 [label="object reference; 777707"];
2124 [label="Cci.IMethodReference methodRef; 777708"];
2125 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 777709"];
2126 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 777710"];
2127 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 777711"];
2128 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 777712"];
2129 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 777713"];
2130 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 777714"];
2131 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 777715"];
2132 [label="return methodSymbol.GetCciAdapter(); 777716"];
2133 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 777717"];
2134 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 777718"];
2135 [label="return unexpandedMethodRef; 777719"];
2136 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 777720"];
2137 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 777721"];
2138 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 777722"];
2139 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 777723"];
2140 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 777724"];
2141 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 777725"];
2142 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 777726"];
2143 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 777727"];
2144 [label="param GenerateModuleInitializer(this) 777728"];
2145 [label="Debug.Assert(_declarationDiagnosticsFrozen); 777729"];
2146 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 777730"];
2147 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 777731"];
2148 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 777732"];
2149 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 777733"];
2150 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 777734"];
2151 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 777735"];
2152 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 777736"];
2153 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 777737"];
2154 [label="return true; 777738"];
2155 [label="var emitResult = compilation.Emit(stream, options: options); 777739"];
2156 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 777740"];
2157 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 777741"];
2158 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 777742"];
2159 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 777743"];
2160 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 777744"];
2161 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 777745"];
2162 [label="param GenerateResourcesAndDocumentationComments(this) 777746"];
2163 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 777747"];
2164 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 777748"];
2165 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 777749"];
2166 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 777750"];
2167 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 777751"];
2168 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 777752"];
2169 [label="SourceAssembly 777753"];
2170 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 777754"];
2171 [label="GetBoundReferenceManager() 777755"];
2172 [label="param GetBoundReferenceManager(this) 777756"];
2173 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 777757"];
2174 [label="return _referenceManager; 777758"];
2175 [label="GetBoundReferenceManager(); 777759"];
2176 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 777760"];
2177 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 777761"];
2178 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 777762"];
2179 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 777763"];
2180 [label="AddedModulesResourceNames(resourceDiagnostics) 777764"];
2181 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 777765"];
2182 [label="param AddedModulesResourceNames(this) 777766"];
2183 [label="SourceAssembly 777767"];
2184 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 777768"];
2185 [label="GetBoundReferenceManager() 777769"];
2186 [label="param GetBoundReferenceManager(this) 777770"];
2187 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 777771"];
2188 [label="return _referenceManager; 777772"];
2189 [label="GetBoundReferenceManager(); 777773"];
2190 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 777774"];
2191 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 777775"];
2192 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 777776"];
2193 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 777777"];
2194 [label="param AddedModulesResourceNames(this) 777778"];
2195 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 777779"];
2196 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 777780"];
2197 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 777781"];
2198 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 777782"];
2199 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 777783"];
2200 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 777784"];
2201 [label="cancellationToken.ThrowIfCancellationRequested(); 777785"];
2202 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 777786"];
2203 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 777787"];
2204 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 777788"];
2205 [label="new[] { '\\r\\n', '\\r', '\\n' } 777789"];
2206 [label="'\\r\\n' 777790"];
2207 [label="'\\r' 777791"];
2208 [label="'\\n' 777792"];
2209 [label="new[] { '\\r\\n', '\\r', '\\n' } 777793"];
2210 [label="new[] { '\\r\\n', '\\r', '\\n' } 777794"];
2211 [label="new[] { '\\r\\n', '\\r', '\\n' } 777795"];
2212 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 777796"];
2213 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 777797"];
2214 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 777798"];
2215 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 777799"];
2216 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 777800"];
2217 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 777801"];
2218 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 777802"];
2219 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 777803"];
2220 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 777804"];
2221 [label="param WriteDocumentationCommentXml(string? assemblyName) 777805"];
2222 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 777806"];
2223 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 777807"];
2224 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 777808"];
2225 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 777809"];
2226 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 777810"];
2227 [label="StreamWriter writer = null; 777811"];
2228 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 777812"];
2229 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 777813"];
2230 [label="compilation.SourceAssembly 777814"];
2231 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 777815"];
2232 [label="GetBoundReferenceManager() 777816"];
2233 [label="param GetBoundReferenceManager(this) 777817"];
2234 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 777818"];
2235 [label="return _referenceManager; 777819"];
2236 [label="GetBoundReferenceManager(); 777820"];
2237 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 777821"];
2238 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 777822"];
2239 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 777823"];
2240 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 777824"];
2241 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 777825"];
2242 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 777826"];
2243 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 777827"];
2244 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 777828"];
2245 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 777829"];
2246 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 777830"];
2247 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 777831"];
2248 [label="param DocumentationCommentCompiler(string assemblyName) 777832"];
2249 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 777833"];
2250 [label="param DocumentationCommentCompiler(TextWriter writer) 777834"];
2251 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 777835"];
2252 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 777836"];
2253 [label="param DocumentationCommentCompiler(bool processIncludes) 777837"];
2254 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 777838"];
2255 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 777839"];
2256 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 777840"];
2257 [label="param DocumentationCommentCompiler(this) 777841"];
2258 [label="param DocumentationCommentCompiler(this) 777842"];
2259 [label="_assemblyName 777843"];
2260 [label="_compilation 777844"];
2261 [label="_writer 777845"];
2262 [label="_filterTree 777846"];
2263 [label="_filterSpanWithinTree 777847"];
2264 [label="_processIncludes 777848"];
2265 [label="_isForSingleSymbol 777849"];
2266 [label="_diagnostics 777850"];
2267 [label="_lazyComparer 777851"];
2268 [label="_includedFileCache 777852"];
2269 [label="_indentDepth 777853"];
2270 [label="_temporaryStringBuilders 777854"];
2271 [label="_assemblyName 777855"];
2272 [label="_compilation 777856"];
2273 [label="_writer 777857"];
2274 [label="_filterTree 777858"];
2275 [label="_filterSpanWithinTree 777859"];
2276 [label="_processIncludes 777860"];
2277 [label="_isForSingleSymbol 777861"];
2278 [label="_diagnostics 777862"];
2279 [label="_cancellationToken 777863"];
2280 [label="compilation.SourceAssembly 777864"];
2281 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 777865"];
2282 [label="GetBoundReferenceManager() 777866"];
2283 [label="param GetBoundReferenceManager(this) 777867"];
2284 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 777868"];
2285 [label="return _referenceManager; 777869"];
2286 [label="GetBoundReferenceManager(); 777870"];
2287 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 777871"];
2288 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 777872"];
2289 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 777873"];
2290 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 777874"];
2291 [label="param VisitNamespace(NamespaceSymbol symbol) 777875"];
2292 [label="param VisitNamespace(this) 777876"];
2293 [label="_cancellationToken.ThrowIfCancellationRequested(); 777877"];
2294 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 777878"];
2295 [label="Debug.Assert(_assemblyName != null); 777879"];
2296 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 777880"];
2297 [label="WriteLine('<?xml version=\\'1.0\\'?>') 777881"];
2298 [label="param WriteLine(string message) 777882"];
2299 [label="param WriteLine(this) 777883"];
2300 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777884"];
2301 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777885"];
2302 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777886"];
2303 [label="WriteLine('<doc>'); 777887"];
2304 [label="WriteLine('<doc>') 777888"];
2305 [label="param WriteLine(string message) 777889"];
2306 [label="param WriteLine(this) 777890"];
2307 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777891"];
2308 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777892"];
2309 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777893"];
2310 [label="Indent() 777894"];
2311 [label="param Indent(this) 777895"];
2312 [label="_indentDepth 777896"];
2313 [label="Indent(); 777897"];
2314 [label="_compilation.Options 777898"];
2315 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 777899"];
2316 [label="WriteLine('<assembly>'); 777900"];
2317 [label="WriteLine('<assembly>') 777901"];
2318 [label="param WriteLine(string message) 777902"];
2319 [label="param WriteLine(this) 777903"];
2320 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777904"];
2321 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777905"];
2322 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777906"];
2323 [label="Indent() 777907"];
2324 [label="param Indent(this) 777908"];
2325 [label="_indentDepth 777909"];
2326 [label="Indent(); 777910"];
2327 [label="WriteLine('<name>{0}</name>', _assemblyName); 777911"];
2328 [label="WriteLine('<name>{0}</name>', _assemblyName) 777912"];
2329 [label="WriteLine('<name>{0}</name>', _assemblyName) 777913"];
2330 [label="param WriteLine(string format) 777914"];
2331 [label="param WriteLine(params object[] args) 777915"];
2332 [label="param WriteLine(this) 777916"];
2333 [label="WriteLine(string.Format(format, args)); 777917"];
2334 [label="WriteLine(string.Format(format, args)); 777918"];
2335 [label="WriteLine(string.Format(format, args)); 777919"];
2336 [label="WriteLine(string.Format(format, args)) 777920"];
2337 [label="param WriteLine(string message) 777921"];
2338 [label="param WriteLine(this) 777922"];
2339 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777923"];
2340 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777924"];
2341 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777925"];
2342 [label="WriteLine(string.Format(format, args)); 777926"];
2343 [label="Unindent() 777927"];
2344 [label="param Unindent(this) 777928"];
2345 [label="_indentDepth 777929"];
2346 [label="Debug.Assert(_indentDepth >= 0); 777930"];
2347 [label="Debug.Assert(_indentDepth >= 0); 777931"];
2348 [label="Unindent(); 777932"];
2349 [label="WriteLine('</assembly>'); 777933"];
2350 [label="WriteLine('</assembly>') 777934"];
2351 [label="param WriteLine(string message) 777935"];
2352 [label="param WriteLine(this) 777936"];
2353 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777937"];
2354 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777938"];
2355 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777939"];
2356 [label="WriteLine('<members>'); 777940"];
2357 [label="WriteLine('<members>') 777941"];
2358 [label="param WriteLine(string message) 777942"];
2359 [label="param WriteLine(this) 777943"];
2360 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777944"];
2361 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777945"];
2362 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 777946"];
2363 [label="Indent() 777947"];
2364 [label="param Indent(this) 777948"];
2365 [label="_indentDepth 777949"];
2366 [label="Indent(); 777950"];
2367 [label="Debug.Assert(!_isForSingleSymbol); 777951"];
2368 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 777952"];
2369 [label="_cancellationToken.ThrowIfCancellationRequested(); 777953"];
2370 [label="s.Accept(this); 777954"];
2371 [label="s.Accept(this); 777955"];
2372 [label="s.Accept(this); 777956"];
2373 [label="param VisitNamedType(NamedTypeSymbol symbol) 777957"];
2374 [label="param VisitNamedType(this) 777958"];
2375 [label="_cancellationToken.ThrowIfCancellationRequested(); 777959"];
2376 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 777960"];
2377 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 777961"];
2378 [label="DefaultVisit(symbol); 777962"];
2379 [label="DefaultVisit(symbol) 777963"];
2380 [label="param DefaultVisit(Symbol symbol) 777964"];
2381 [label="param DefaultVisit(this) 777965"];
2382 [label="_cancellationToken.ThrowIfCancellationRequested(); 777966"];
2383 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 777967"];
2384 [label="ShouldSkip(symbol) 777968"];
2385 [label="param ShouldSkip(Symbol symbol) 777969"];
2386 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 777970"];
2387 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 777971"];
2388 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 777972"];
2389 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 777973"];
2390 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 777974"];
2391 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 777975"];
2392 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 777976"];
2393 [label="DocumentationMode maxDocumentationMode; 777977"];
2394 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 777978"];
2395 [label="docCommentNodes 777979"];
2396 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 777980"];
2397 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 777981"];
2398 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 777982"];
2399 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 777983"];
2400 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 777984"];
2401 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 777985"];
2402 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 777986"];
2403 [label="param TryGetDocumentationCommentNodes(this) 777987"];
2404 [label="maxDocumentationMode = DocumentationMode.None; 777988"];
2405 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 777989"];
2406 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 777990"];
2407 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 777991"];
2408 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 777992"];
2409 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 777993"];
2410 [label="currDocumentationMode > maxDocumentationMode 777994"];
2411 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 777995"];
2412 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 777996"];
2413 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 777997"];
2414 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 777998"];
2415 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 777999"];
2416 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 778000"];
2417 [label="return true; 778001"];
2418 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 778002"];
2419 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 778003"];
2420 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 778004"];
2421 [label="return; 778005"];
2422 [label="DefaultVisit(symbol); 778006"];
2423 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 778007"];
2424 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 778008"];
2425 [label="_cancellationToken.ThrowIfCancellationRequested(); 778009"];
2426 [label="member.Accept(this); 778010"];
2427 [label="member.Accept(this); 778011"];
2428 [label="member.Accept(this); 778012"];
2429 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 778013"];
2430 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 778014"];
2431 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 778015"];
2432 [label="DocumentationMode maxDocumentationMode; 778016"];
2433 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 778017"];
2434 [label="docCommentNodes 778018"];
2435 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 778019"];
2436 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 778020"];
2437 [label="maxDocumentationMode = DocumentationMode.None; 778021"];
2438 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 778022"];
2439 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 778023"];
2440 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 778024"];
2441 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 778025"];
2442 [label="currDocumentationMode > maxDocumentationMode 778026"];
2443 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 778027"];
2444 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 778028"];
2445 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 778029"];
2446 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 778030"];
2447 [label="return true; 778031"];
2448 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 778032"];
2449 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 778033"];
2450 [label="return; 778034"];
2451 [label="return; 778035"];
2452 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 778036"];
2453 [label="Unindent() 778037"];
2454 [label="Debug.Assert(_indentDepth >= 0); 778038"];
2455 [label="Unindent(); 778039"];
2456 [label="WriteLine('</members>'); 778040"];
2457 [label="WriteLine('</members>') 778041"];
2458 [label="param WriteLine(string message) 778042"];
2459 [label="param WriteLine(this) 778043"];
2460 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 778044"];
2461 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 778045"];
2462 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 778046"];
2463 [label="Unindent() 778047"];
2464 [label="_indentDepth 778048"];
2465 [label="Debug.Assert(_indentDepth >= 0); 778049"];
2466 [label="Debug.Assert(_indentDepth >= 0); 778050"];
2467 [label="Unindent(); 778051"];
2468 [label="WriteLine('</doc>'); 778052"];
2469 [label="WriteLine('</doc>') 778053"];
2470 [label="param WriteLine(string message) 778054"];
2471 [label="param WriteLine(this) 778055"];
2472 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 778056"];
2473 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 778057"];
2474 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 778058"];
2475 [label="Debug.Assert(compiler._indentDepth == 0); 778059"];
2476 [label="Debug.Assert(compiler._indentDepth == 0); 778060"];
2477 [label="writer?.Flush(); 778061"];
2478 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 778062"];
2479 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 778063"];
2480 [label="compilation.SyntaxTrees 778064"];
2481 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 778065"];
2482 [label="_syntaxAndDeclarations.GetLazyState() 778066"];
2483 [label="param GetLazyState(this) 778067"];
2484 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 778068"];
2485 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 778069"];
2486 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 778070"];
2487 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 778071"];
2488 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 778072"];
2489 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 778073"];
2490 [label="param ReportUnprocessed(SyntaxTree tree) 778074"];
2491 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 778075"];
2492 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 778076"];
2493 [label="param ReportUnprocessed(CancellationToken cancellationToken) 778077"];
2494 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 778078"];
2495 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 778079"];
2496 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 778080"];
2497 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 778081"];
2498 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 778082"];
2499 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 778083"];
2500 [label="param ReportUnusedImports(SyntaxTree? filterTree) 778084"];
2501 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 778085"];
2502 [label="param ReportUnusedImports(CancellationToken cancellationToken) 778086"];
2503 [label="param ReportUnusedImports(this) 778087"];
2504 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 778088"];
2505 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 778089"];
2506 [label="CompleteTrees(filterTree); 778090"];
2507 [label="CompleteTrees(filterTree) 778091"];
2508 [label="param CompleteTrees(SyntaxTree? filterTree) 778092"];
2509 [label="param CompleteTrees(this) 778093"];
2510 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 778094"];
2511 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 778095"];
2512 [label="CompleteTrees(filterTree); 778096"];
2513 [label="get { return SourceAssembly.IsDelaySigned; } 778097"];
2514 [label="SourceAssembly 778098"];
2515 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 778099"];
2516 [label="GetBoundReferenceManager() 778100"];
2517 [label="param GetBoundReferenceManager(this) 778101"];
2518 [label="GetBoundReferenceManager(); 778102"];
2519 [label="SourceAssembly.IsDelaySigned 778103"];
2520 [label="get { return SourceAssembly.StrongNameKeys; } 778104"];
2521 [label="SourceAssembly 778105"];
2522 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 778106"];
2523 [label="GetBoundReferenceManager() 778107"];
2524 [label="param GetBoundReferenceManager(this) 778108"];
2525 [label="GetBoundReferenceManager(); 778109"];
2526 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 778110"];
2527 [label="param GetCorLibraryReferenceToEmit(this) 778111"];
2528 [label="CorLibrary 778112"];
2529 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 778113"];
2530 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 778114"];
2531 [label="AssemblySymbol corLibrary = CorLibrary; 778115"];
2532 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 778116"];
2533 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 778117"];
2534 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 778118"];
2535 [label="return Translate(corLibrary, context.Diagnostics); 778119"];
2536 [label="return Translate(corLibrary, context.Diagnostics); 778120"];
2537 [label="Translate(corLibrary, context.Diagnostics) 778121"];
2538 [label="param Translate(AssemblySymbol assembly) 778122"];
2539 [label="param Translate(DiagnosticBag diagnostics) 778123"];
2540 [label="param Translate(this) 778124"];
2541 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 778125"];
2542 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 778126"];
2543 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 778127"];
2544 [label="Cci.IModuleReference reference; 778128"];
2545 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 778129"];
2546 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 778130"];
2547 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 778131"];
2548 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 778132"];
2549 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 778133"];
2550 [label="new AssemblyReference(assembly) 778134"];
2551 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 778135"];
2552 [label="param AssemblyReference(this) 778136"];
2553 [label="_targetAssembly 778137"];
2554 [label="Debug.Assert((object)assemblySymbol != null); 778138"];
2555 [label="Debug.Assert((object)assemblySymbol != null); 778139"];
2556 [label="_targetAssembly 778140"];
2557 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 778141"];
2558 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 778142"];
2559 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 778143"];
2560 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 778144"];
2561 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 778145"];
2562 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 778146"];
2563 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 778147"];
2564 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 778148"];
2565 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 778149"];
2566 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 778150"];
2567 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 778151"];
2568 [label="param ValidateReferencedAssembly(this) 778152"];
2569 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 778153"];
2570 [label="asmRef.Identity 778154"];
2571 [label="=> _targetAssembly.Identity 778155"];
2572 [label="_targetAssembly.Identity 778156"];
2573 [label="AssemblyIdentity refIdentity = asmRef.Identity; 778157"];
2574 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 778158"];
2575 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 778159"];
2576 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 778160"];
2577 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 778161"];
2578 [label="var refMachine = assembly.Machine; 778162"];
2579 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 778163"];
2580 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 778164"];
2581 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 778165"];
2582 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 778166"];
2583 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 778167"];
2584 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 778168"];
2585 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 778169"];
2586 [label="return cachedAsmRef; 778170"];
2587 [label="var emitResult = compilation.Emit(stream, options: options); 778171"];
2588 [label="=> _targetAssembly.Identity 778172"];
2589 [label="_targetAssembly.Identity 778173"];
2590 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 778174"];
2591 [label="param GetAssemblyReferencesFromAddedModules(this) 778175"];
2592 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 778176"];
2593 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 778177"];
2594 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 778178"];
2595 [label="param GetAssemblyReferencesFromAddedModules(this) 778179"];
2596 [label="var emitResult = compilation.Emit(stream, options: options); 778180"];
2597 [label="param GetFiles(EmitContext context) 778181"];
2598 [label="param GetFiles(this) 778182"];
2599 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 778183"];
2600 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 778184"];
2601 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 778185"];
2602 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 778186"];
2603 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 778187"];
2604 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 778188"];
2605 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 778189"];
2606 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 778190"];
2607 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 778191"];
2608 [label="var modules = sourceAssSymbol.Modules; 778192"];
2609 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 778193"];
2610 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 778194"];
2611 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 778195"];
2612 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 778196"];
2613 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 778197"];
2614 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 778198"];
2615 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 778199"];
2616 [label="builder.Free(); 778200"];
2617 [label="return lazyFiles; 778201"];
2618 [label="var emitResult = compilation.Emit(stream, options: options); 778202"];
2619 [label="=> _embeddedTypesManagerOpt 778203"];
2620 [label="_embeddedTypesManagerOpt 778204"];
2621 [label="param GetAnonymousTypeDefinitions(EmitContext context) 778205"];
2622 [label="param GetAnonymousTypeDefinitions(this) 778206"];
2623 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 778207"];
2624 [label="Compilation.AnonymousTypeManager 778208"];
2625 [label="get\n            {\n                return _anonymousTypeManager;\n            } 778209"];
2626 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 778210"];
2627 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 778211"];
2628 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 778212"];
2629 [label="param GetAdditionalTopLevelTypeDefinitions(this) 778213"];
2630 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 778214"];
2631 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 778215"];
2632 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 778216"];
2633 [label="=> _additionalTypes 778217"];
2634 [label="_additionalTypes 778218"];
2635 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 778219"];
2636 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 778220"];
2637 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 778221"];
2638 [label="param GetEmbeddedTypeDefinitions(this) 778222"];
2639 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 778223"];
2640 [label="GetEmbeddedTypes(context.Diagnostics) 778224"];
2641 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 778225"];
2642 [label="param GetEmbeddedTypes(this) 778226"];
2643 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 778227"];
2644 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 778228"];
2645 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 778229"];
2646 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 778230"];
2647 [label="param CreateEmbeddedAttributesIfNeeded(this) 778231"];
2648 [label="GetNeedsGeneratedAttributes() 778232"];
2649 [label="param GetNeedsGeneratedAttributes(this) 778233"];
2650 [label="_needsGeneratedAttributes_IsFrozen = true; 778234"];
2651 [label="_needsGeneratedAttributes_IsFrozen 778235"];
2652 [label="GetNeedsGeneratedAttributesInternal() 778236"];
2653 [label="param GetNeedsGeneratedAttributesInternal(this) 778237"];
2654 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 778238"];
2655 [label="return GetNeedsGeneratedAttributesInternal(); 778239"];
2656 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 778240"];
2657 [label="ShouldEmitNullablePublicOnlyAttribute() 778241"];
2658 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 778242"];
2659 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 778243"];
2660 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 778244"];
2661 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 778245"];
2662 [label="return; 778246"];
2663 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 778247"];
2664 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 778248"];
2665 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 778249"];
2666 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 778250"];
2667 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 778251"];
2668 [label="builder.AddIfNotNull(_lazyNullableAttribute); 778252"];
2669 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 778253"];
2670 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 778254"];
2671 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 778255"];
2672 [label="return builder.ToImmutableAndFree(); 778256"];
2673 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 778257"];
2674 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 778258"];
2675 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 778259"];
2676 [label="param GetTopLevelSourceTypeDefinitions(this) 778260"];
2677 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 778261"];
2678 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 778262"];
2679 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 778263"];
2680 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 778264"];
2681 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 778265"];
2682 [label="var ns = namespacesToProcess.Pop(); 778266"];
2683 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 778267"];
2684 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 778268"];
2685 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 778269"];
2686 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 778270"];
2687 [label="param ShouldEmitNullableAttributes(Symbol symbol) 778271"];
2688 [label="param ShouldEmitNullableAttributes(this) 778272"];
2689 [label="RoslynDebug.Assert(symbol is object); 778273"];
2690 [label="Debug.Assert(symbol.IsDefinition); 778274"];
2691 [label="SourceModule 778275"];
2692 [label="get\n            {\n                return Assembly.Modules[0];\n            } 778276"];
2693 [label="Assembly 778277"];
2694 [label="get\n            {\n                return SourceAssembly;\n            } 778278"];
2695 [label="SourceAssembly 778279"];
2696 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 778280"];
2697 [label="GetBoundReferenceManager() 778281"];
2698 [label="param GetBoundReferenceManager(this) 778282"];
2699 [label="GetBoundReferenceManager(); 778283"];
2700 [label="return Assembly.Modules[0]; 778284"];
2701 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 778285"];
2702 [label="EmitNullablePublicOnly 778286"];
2703 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 778287"];
2704 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 778288"];
2705 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 778289"];
2706 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 778290"];
2707 [label="param SynthesizeNullableAttributeIfNecessary(this) 778291"];
2708 [label="Compilation.SourceModule 778292"];
2709 [label="get\n            {\n                return Assembly.Modules[0];\n            } 778293"];
2710 [label="Assembly 778294"];
2711 [label="SourceAssembly 778295"];
2712 [label="GetBoundReferenceManager() 778296"];
2713 [label="GetBoundReferenceManager(); 778297"];
2714 [label="return Assembly.Modules[0]; 778298"];
2715 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 778299"];
2716 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 778300"];
2717 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 778301"];
2718 [label="type.AddNullableTransforms(flagsBuilder); 778302"];
2719 [label="type.AddNullableTransforms(flagsBuilder); 778303"];
2720 [label="SynthesizedAttributeData attribute; 778304"];
2721 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 778305"];
2722 [label="attribute = null; 778306"];
2723 [label="flagsBuilder.Free(); 778307"];
2724 [label="return attribute; 778308"];
2725 [label="var emitResult = compilation.Emit(stream, options: options); 778309"];
2726 [label="Debug.Assert(symbol.IsDefinition); 778310"];
2727 [label="GetBoundReferenceManager(); 778311"];
2728 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 778312"];
2729 [label="GetBoundReferenceManager(); 778313"];
2730 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 778314"];
2731 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 778315"];
2732 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 778316"];
2733 [label="param GetSynthesizedNestedTypes(this) 778317"];
2734 [label="return null; 778318"];
2735 [label="var emitResult = compilation.Emit(stream, options: options); 778319"];
2736 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 778320"];
2737 [label="param GetSourceAssemblyAttributes(this) 778321"];
2738 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 778322"];
2739 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 778323"];
2740 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 778324"];
2741 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 778325"];
2742 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 778326"];
2743 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 778327"];
2744 [label="NamedTypeSymbol result; 778328"];
2745 [label="GetBoundReferenceManager(); 778329"];
2746 [label="Debug.Assert(result.SpecialType == specialType); 778330"];
2747 [label="SourceAssembly 778331"];
2748 [label="GetBoundReferenceManager() 778332"];
2749 [label="GetBoundReferenceManager(); 778333"];
2750 [label="GetBoundReferenceManager() 778334"];
2751 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 778335"];
2752 [label="param Translate(MethodSymbol methodSymbol) 778336"];
2753 [label="param Translate(SyntaxNode syntaxNodeOpt) 778337"];
2754 [label="param Translate(DiagnosticBag diagnostics) 778338"];
2755 [label="param Translate(BoundArgListOperator optArgList = null) 778339"];
2756 [label="param Translate(bool needDeclaration = false) 778340"];
2757 [label="param Translate(this) 778341"];
2758 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 778342"];
2759 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 778343"];
2760 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 778344"];
2761 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 778345"];
2762 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 778346"];
2763 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 778347"];
2764 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 778348"];
2765 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 778349"];
2766 [label="param Translate(MethodSymbol methodSymbol) 778350"];
2767 [label="param Translate(SyntaxNode syntaxNodeOpt) 778351"];
2768 [label="param Translate(DiagnosticBag diagnostics) 778352"];
2769 [label="param Translate(bool needDeclaration) 778353"];
2770 [label="param Translate(this) 778354"];
2771 [label="object reference; 778355"];
2772 [label="Cci.IMethodReference methodRef; 778356"];
2773 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 778357"];
2774 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 778358"];
2775 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 778359"];
2776 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 778360"];
2777 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 778361"];
2778 [label="bool typeIsGeneric = IsGenericType(container); 778362"];
2779 [label="IsGenericType(container) 778363"];
2780 [label="param IsGenericType(NamedTypeSymbol toCheck) 778364"];
2781 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778365"];
2782 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778366"];
2783 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 778367"];
2784 [label="toCheck = toCheck.ContainingType; 778368"];
2785 [label="return false; 778369"];
2786 [label="bool typeIsGeneric = IsGenericType(container); 778370"];
2787 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778371"];
2788 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778372"];
2789 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778373"];
2790 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 778374"];
2791 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 778375"];
2792 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 778376"];
2793 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 778377"];
2794 [label="param Translate(TypeSymbol typeSymbol) 778378"];
2795 [label="param Translate(SyntaxNode syntaxNodeOpt) 778379"];
2796 [label="param Translate(DiagnosticBag diagnostics) 778380"];
2797 [label="param Translate(this) 778381"];
2798 [label="Debug.Assert(diagnostics != null); 778382"];
2799 [label="Debug.Assert(diagnostics != null); 778383"];
2800 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 778384"];
2801 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778385"];
2802 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778386"];
2803 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778387"];
2804 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778388"];
2805 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 778389"];
2806 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 778390"];
2807 [label="param Translate(SyntaxNode syntaxNodeOpt) 778391"];
2808 [label="param Translate(DiagnosticBag diagnostics) 778392"];
2809 [label="param Translate(bool fromImplements = false) 778393"];
2810 [label="param Translate(bool needDeclaration = false) 778394"];
2811 [label="param Translate(this) 778395"];
2812 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 778396"];
2813 [label="Debug.Assert(diagnostics != null); 778397"];
2814 [label="Debug.Assert(diagnostics != null); 778398"];
2815 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778399"];
2816 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778400"];
2817 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778401"];
2818 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778402"];
2819 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778403"];
2820 [label="object reference; 778404"];
2821 [label="Cci.INamedTypeReference typeRef; 778405"];
2822 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 778406"];
2823 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778407"];
2824 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778408"];
2825 [label="IsGenericType(container) 778409"];
2826 [label="param IsGenericType(NamedTypeSymbol toCheck) 778410"];
2827 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778411"];
2828 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778412"];
2829 [label="return false; 778413"];
2830 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778414"];
2831 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778415"];
2832 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778416"];
2833 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 778417"];
2834 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 778418"];
2835 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 778419"];
2836 [label="param Translate(SyntaxNode syntaxNodeOpt) 778420"];
2837 [label="param Translate(DiagnosticBag diagnostics) 778421"];
2838 [label="param Translate(bool fromImplements = false) 778422"];
2839 [label="param Translate(bool needDeclaration = false) 778423"];
2840 [label="param Translate(this) 778424"];
2841 [label="Debug.Assert(diagnostics != null); 778425"];
2842 [label="Debug.Assert(diagnostics != null); 778426"];
2843 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778427"];
2844 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778428"];
2845 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778429"];
2846 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778430"];
2847 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778431"];
2848 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778432"];
2849 [label="param Translate(ModuleSymbol module) 778433"];
2850 [label="param Translate(DiagnosticBag diagnostics) 778434"];
2851 [label="param Translate(this) 778435"];
2852 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 778436"];
2853 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 778437"];
2854 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 778438"];
2855 [label="if ((object)module == null)\n            {\n                return null;\n            } 778439"];
2856 [label="if ((object)module == null)\n            {\n                return null;\n            } 778440"];
2857 [label="Cci.IModuleReference moduleRef; 778441"];
2858 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 778442"];
2859 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 778443"];
2860 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 778444"];
2861 [label="return moduleRef; 778445"];
2862 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778446"];
2863 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778447"];
2864 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778448"];
2865 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778449"];
2866 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778450"];
2867 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778451"];
2868 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 778452"];
2869 [label="param Translate(this) 778453"];
2870 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 778454"];
2871 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 778455"];
2872 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 778456"];
2873 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 778457"];
2874 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 778458"];
2875 [label="MustBeWrapped(@params.First()) 778459"];
2876 [label="param MustBeWrapped(ParameterSymbol param) 778460"];
2877 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 778461"];
2878 [label="var container = param.ContainingSymbol; 778462"];
2879 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 778463"];
2880 [label="ContainerIsGeneric(container) 778464"];
2881 [label="param ContainerIsGeneric(Symbol container) 778465"];
2882 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778466"];
2883 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778467"];
2884 [label="IsGenericType(container.ContainingType) 778468"];
2885 [label="param IsGenericType(NamedTypeSymbol toCheck) 778469"];
2886 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778470"];
2887 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778471"];
2888 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 778472"];
2889 [label="toCheck = toCheck.ContainingType; 778473"];
2890 [label="return false; 778474"];
2891 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778475"];
2892 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778476"];
2893 [label="return false; 778477"];
2894 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 778478"];
2895 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 778479"];
2896 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 778480"];
2897 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 778481"];
2898 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 778482"];
2899 [label="param MustBeWrapped(ParameterSymbol param) 778483"];
2900 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 778484"];
2901 [label="var container = param.ContainingSymbol; 778485"];
2902 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 778486"];
2903 [label="ContainerIsGeneric(container) 778487"];
2904 [label="param ContainerIsGeneric(Symbol container) 778488"];
2905 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778489"];
2906 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778490"];
2907 [label="IsGenericType(container.ContainingType) 778491"];
2908 [label="param IsGenericType(NamedTypeSymbol toCheck) 778492"];
2909 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778493"];
2910 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778494"];
2911 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 778495"];
2912 [label="toCheck = toCheck.ContainingType; 778496"];
2913 [label="return false; 778497"];
2914 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778498"];
2915 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778499"];
2916 [label="return false; 778500"];
2917 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 778501"];
2918 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 778502"];
2919 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 778503"];
2920 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 778504"];
2921 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778505"];
2922 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778506"];
2923 [label="param Translate(SyntaxNode syntaxNodeOpt) 778507"];
2924 [label="param Translate(DiagnosticBag diagnostics) 778508"];
2925 [label="param Translate(bool fromImplements = false) 778509"];
2926 [label="param Translate(bool needDeclaration = false) 778510"];
2927 [label="Debug.Assert(diagnostics != null); 778511"];
2928 [label="Debug.Assert(diagnostics != null); 778512"];
2929 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778513"];
2930 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778514"];
2931 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778515"];
2932 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778516"];
2933 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778517"];
2934 [label="object reference; 778518"];
2935 [label="Cci.INamedTypeReference typeRef; 778519"];
2936 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 778520"];
2937 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778521"];
2938 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778522"];
2939 [label="IsGenericType(container) 778523"];
2940 [label="param IsGenericType(NamedTypeSymbol toCheck) 778524"];
2941 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778525"];
2942 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778526"];
2943 [label="return false; 778527"];
2944 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778528"];
2945 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778529"];
2946 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778530"];
2947 [label="param IsPlatformType(Cci.ITypeReference typeRef) 778531"];
2948 [label="param IsPlatformType(Cci.PlatformType platformType) 778532"];
2949 [label="param IsPlatformType(this) 778533"];
2950 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 778534"];
2951 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 778535"];
2952 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 778536"];
2953 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 778537"];
2954 [label="return namedType.SpecialType == (SpecialType)platformType; 778538"];
2955 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 778539"];
2956 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778540"];
2957 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778541"];
2958 [label="param Translate(SyntaxNode syntaxNodeOpt) 778542"];
2959 [label="param Translate(DiagnosticBag diagnostics) 778543"];
2960 [label="param Translate(bool fromImplements = false) 778544"];
2961 [label="param Translate(bool needDeclaration = false) 778545"];
2962 [label="Debug.Assert(diagnostics != null); 778546"];
2963 [label="Debug.Assert(diagnostics != null); 778547"];
2964 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778548"];
2965 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778549"];
2966 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778550"];
2967 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778551"];
2968 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778552"];
2969 [label="object reference; 778553"];
2970 [label="Cci.INamedTypeReference typeRef; 778554"];
2971 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 778555"];
2972 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778556"];
2973 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778557"];
2974 [label="IsGenericType(container) 778558"];
2975 [label="param IsGenericType(NamedTypeSymbol toCheck) 778559"];
2976 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778560"];
2977 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778561"];
2978 [label="return false; 778562"];
2979 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778563"];
2980 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778564"];
2981 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778565"];
2982 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778566"];
2983 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778567"];
2984 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778568"];
2985 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778569"];
2986 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778570"];
2987 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778571"];
2988 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 778572"];
2989 [label="param MustBeWrapped(ParameterSymbol param) 778573"];
2990 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 778574"];
2991 [label="var container = param.ContainingSymbol; 778575"];
2992 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 778576"];
2993 [label="ContainerIsGeneric(container) 778577"];
2994 [label="param ContainerIsGeneric(Symbol container) 778578"];
2995 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778579"];
2996 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778580"];
2997 [label="IsGenericType(container.ContainingType) 778581"];
2998 [label="param IsGenericType(NamedTypeSymbol toCheck) 778582"];
2999 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778583"];
3000 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778584"];
3001 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 778585"];
3002 [label="toCheck = toCheck.ContainingType; 778586"];
3003 [label="return false; 778587"];
3004 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778588"];
3005 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778589"];
3006 [label="param MustBeWrapped(ParameterSymbol param) 778590"];
3007 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 778591"];
3008 [label="var container = param.ContainingSymbol; 778592"];
3009 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 778593"];
3010 [label="ContainerIsGeneric(container) 778594"];
3011 [label="param ContainerIsGeneric(Symbol container) 778595"];
3012 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778596"];
3013 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778597"];
3014 [label="IsGenericType(container.ContainingType) 778598"];
3015 [label="param IsGenericType(NamedTypeSymbol toCheck) 778599"];
3016 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778600"];
3017 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778601"];
3018 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 778602"];
3019 [label="toCheck = toCheck.ContainingType; 778603"];
3020 [label="return false; 778604"];
3021 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778605"];
3022 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778606"];
3023 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 778607"];
3024 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 778608"];
3025 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 778609"];
3026 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 778610"];
3027 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 778611"];
3028 [label="bool typeIsGeneric = IsGenericType(container); 778612"];
3029 [label="IsGenericType(container) 778613"];
3030 [label="param IsGenericType(NamedTypeSymbol toCheck) 778614"];
3031 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778615"];
3032 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778616"];
3033 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 778617"];
3034 [label="toCheck = toCheck.ContainingType; 778618"];
3035 [label="return false; 778619"];
3036 [label="bool typeIsGeneric = IsGenericType(container); 778620"];
3037 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778621"];
3038 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778622"];
3039 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778623"];
3040 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 778624"];
3041 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 778625"];
3042 [label="toCheck = toCheck.ContainingType; 778626"];
3043 [label="param GetSourceAssemblySecurityAttributes(this) 778627"];
3044 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 778628"];
3045 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 778629"];
3046 [label="return Translate(corLibrary, context.Diagnostics); 778630"];
3047 [label="param Translate(DiagnosticBag diagnostics) 778631"];
3048 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 778632"];
3049 [label="return (Cci.IAssemblyReference)reference; 778633"];
3050 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 778634"];
3051 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 778635"];
3052 [label="param GetSourceModuleAttributes(this) 778636"];
3053 [label="return SourceModule.GetCustomAttributesToEmit(this); 778637"];
3054 [label="return SourceModule.GetCustomAttributesToEmit(this); 778638"];
3055 [label="return SourceModule.GetCustomAttributesToEmit(this); 778639"];
3056 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 778640"];
3057 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 778641"];
3058 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 778642"];
3059 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 778643"];
3060 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 778644"];
3061 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 778645"];
3062 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 778646"];
3063 [label="return GetNeedsGeneratedAttributesInternal(); 778647"];
3064 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 778648"];
3065 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 778649"];
3066 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 778650"];
3067 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 778651"];
3068 [label="return; 778652"];
3069 [label="Debug.Assert(symbol.IsDefinition); 778653"];
3070 [label="GetBoundReferenceManager(); 778654"];
3071 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 778655"];
3072 [label="GetBoundReferenceManager(); 778656"];
3073 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 778657"];
3074 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 778658"];
3075 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 778659"];
3076 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 778660"];
3077 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 778661"];
3078 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 778662"];
3079 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 778663"];
3080 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 778664"];
3081 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 778665"];
3082 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 778666"];
3083 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 778667"];
3084 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 778668"];
3085 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 778669"];
3086 [label="param SynthesizeNullableAttributeIfNecessary(this) 778670"];
3087 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 778671"];
3088 [label="return null; 778672"];
3089 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778673"];
3090 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778674"];
3091 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778675"];
3092 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778676"];
3093 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778677"];
3094 [label="object reference; 778678"];
3095 [label="Cci.INamedTypeReference typeRef; 778679"];
3096 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 778680"];
3097 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778681"];
3098 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778682"];
3099 [label="IsGenericType(container) 778683"];
3100 [label="param IsGenericType(NamedTypeSymbol toCheck) 778684"];
3101 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778685"];
3102 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778686"];
3103 [label="return false; 778687"];
3104 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778688"];
3105 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778689"];
3106 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778690"];
3107 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 778691"];
3108 [label="Debug.Assert(symbol.IsDefinition); 778692"];
3109 [label="GetBoundReferenceManager(); 778693"];
3110 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 778694"];
3111 [label="GetBoundReferenceManager(); 778695"];
3112 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 778696"];
3113 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 778697"];
3114 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778698"];
3115 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778699"];
3116 [label="param Translate(SyntaxNode syntaxNodeOpt) 778700"];
3117 [label="param Translate(DiagnosticBag diagnostics) 778701"];
3118 [label="param Translate(bool fromImplements = false) 778702"];
3119 [label="param Translate(bool needDeclaration = false) 778703"];
3120 [label="Debug.Assert(diagnostics != null); 778704"];
3121 [label="Debug.Assert(diagnostics != null); 778705"];
3122 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778706"];
3123 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778707"];
3124 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778708"];
3125 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778709"];
3126 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778710"];
3127 [label="object reference; 778711"];
3128 [label="Cci.INamedTypeReference typeRef; 778712"];
3129 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 778713"];
3130 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778714"];
3131 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778715"];
3132 [label="IsGenericType(container) 778716"];
3133 [label="param IsGenericType(NamedTypeSymbol toCheck) 778717"];
3134 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778718"];
3135 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778719"];
3136 [label="return false; 778720"];
3137 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778721"];
3138 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778722"];
3139 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778723"];
3140 [label="param GetExportedTypes(DiagnosticBag diagnostics) 778724"];
3141 [label="param GetExportedTypes(this) 778725"];
3142 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 778726"];
3143 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 778727"];
3144 [label="CalculateExportedTypes() 778728"];
3145 [label="param CalculateExportedTypes(this) 778729"];
3146 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 778730"];
3147 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 778731"];
3148 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 778732"];
3149 [label="var modules = sourceAssembly.Modules; 778733"];
3150 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 778734"];
3151 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 778735"];
3152 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 778736"];
3153 [label="sourceAssembly.DeclaringCompilation.Options 778737"];
3154 [label="get\n            {\n                return _options;\n            } 778738"];
3155 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 778739"];
3156 [label="GetForwardedTypes(sourceAssembly, builder); 778740"];
3157 [label="GetForwardedTypes(sourceAssembly, builder); 778741"];
3158 [label="GetForwardedTypes(sourceAssembly, builder) 778742"];
3159 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 778743"];
3160 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 778744"];
3161 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 778745"];
3162 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 778746"];
3163 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 778747"];
3164 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 778748"];
3165 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 778749"];
3166 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 778750"];
3167 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 778751"];
3168 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 778752"];
3169 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 778753"];
3170 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 778754"];
3171 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 778755"];
3172 [label="sourceAssembly.DeclaringCompilation.Options 778756"];
3173 [label="get\n            {\n                return _options;\n            } 778757"];
3174 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 778758"];
3175 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 778759"];
3176 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 778760"];
3177 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 778761"];
3178 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 778762"];
3179 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 778763"];
3180 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 778764"];
3181 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 778765"];
3182 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 778766"];
3183 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 778767"];
3184 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 778768"];
3185 [label="return seenTopLevelForwardedTypes; 778769"];
3186 [label="GetForwardedTypes(sourceAssembly, builder); 778770"];
3187 [label="return builder.ToImmutableAndFree(); 778771"];
3188 [label="_lazyExportedTypes = CalculateExportedTypes(); 778772"];
3189 [label="_lazyExportedTypes 778773"];
3190 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 778774"];
3191 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 778775"];
3192 [label="return _lazyExportedTypes; 778776"];
3193 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 778777"];
3194 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 778778"];
3195 [label="param AddEmbeddedResourcesFromAddedModules(this) 778779"];
3196 [label="var modules = _sourceAssembly.Modules; 778780"];
3197 [label="int count = modules.Length; 778781"];
3198 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 778782"];
3199 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 778783"];
3200 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 778784"];
3201 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 778785"];
3202 [label="var emitResult = compilation.Emit(stream, options: options); 778786"];
3203 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778787"];
3204 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778788"];
3205 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778789"];
3206 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778790"];
3207 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778791"];
3208 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778792"];
3209 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 778793"];
3210 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778794"];
3211 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778795"];
3212 [label="param Translate(SyntaxNode syntaxNodeOpt) 778796"];
3213 [label="param Translate(DiagnosticBag diagnostics) 778797"];
3214 [label="param Translate(bool fromImplements = false) 778798"];
3215 [label="param Translate(bool needDeclaration = false) 778799"];
3216 [label="Debug.Assert(diagnostics != null); 778800"];
3217 [label="Debug.Assert(diagnostics != null); 778801"];
3218 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778802"];
3219 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778803"];
3220 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778804"];
3221 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778805"];
3222 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778806"];
3223 [label="object reference; 778807"];
3224 [label="Cci.INamedTypeReference typeRef; 778808"];
3225 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 778809"];
3226 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778810"];
3227 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778811"];
3228 [label="IsGenericType(container) 778812"];
3229 [label="param IsGenericType(NamedTypeSymbol toCheck) 778813"];
3230 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778814"];
3231 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778815"];
3232 [label="return false; 778816"];
3233 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778817"];
3234 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778818"];
3235 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778819"];
3236 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 778820"];
3237 [label="=> _sourceAssembly 778821"];
3238 [label="_sourceAssembly 778822"];
3239 [label="=> _metadataName 778823"];
3240 [label="_metadataName 778824"];
3241 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 778825"];
3242 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778826"];
3243 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778827"];
3244 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778828"];
3245 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778829"];
3246 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778830"];
3247 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778831"];
3248 [label="param MemberVisibility(Symbol symbol) 778832"];
3249 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 778833"];
3250 [label="return Cci.TypeMemberVisibility.Public; 778834"];
3251 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778835"];
3252 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778836"];
3253 [label="param Translate(SyntaxNode syntaxNodeOpt) 778837"];
3254 [label="param Translate(DiagnosticBag diagnostics) 778838"];
3255 [label="param Translate(bool fromImplements = false) 778839"];
3256 [label="param Translate(bool needDeclaration = false) 778840"];
3257 [label="Debug.Assert(diagnostics != null); 778841"];
3258 [label="Debug.Assert(diagnostics != null); 778842"];
3259 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778843"];
3260 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778844"];
3261 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778845"];
3262 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778846"];
3263 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778847"];
3264 [label="object reference; 778848"];
3265 [label="Cci.INamedTypeReference typeRef; 778849"];
3266 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 778850"];
3267 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778851"];
3268 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778852"];
3269 [label="IsGenericType(container) 778853"];
3270 [label="param IsGenericType(NamedTypeSymbol toCheck) 778854"];
3271 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778855"];
3272 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778856"];
3273 [label="return false; 778857"];
3274 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778858"];
3275 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778859"];
3276 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778860"];
3277 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 778861"];
3278 [label="get { return _metadataName; } 778862"];
3279 [label="return _metadataName; 778863"];
3280 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778864"];
3281 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778865"];
3282 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778866"];
3283 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778867"];
3284 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778868"];
3285 [label="object reference; 778869"];
3286 [label="Cci.INamedTypeReference typeRef; 778870"];
3287 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 778871"];
3288 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778872"];
3289 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778873"];
3290 [label="IsGenericType(container) 778874"];
3291 [label="param IsGenericType(NamedTypeSymbol toCheck) 778875"];
3292 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778876"];
3293 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778877"];
3294 [label="return false; 778878"];
3295 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778879"];
3296 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778880"];
3297 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778881"];
3298 [label="if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    } 778882"];
3299 [label="return Cci.TypeMemberVisibility.Assembly; 778883"];
3300 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 778884"];
3301 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778885"];
3302 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778886"];
3303 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778887"];
3304 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778888"];
3305 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778889"];
3306 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778890"];
3307 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 778891"];
3308 [label="GetBoundReferenceManager(); 778892"];
3309 [label="Debug.Assert(result.SpecialType == specialType); 778893"];
3310 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 778894"];
3311 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 778895"];
3312 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 778896"];
3313 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 778897"];
3314 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 778898"];
3315 [label="bool typeIsGeneric = IsGenericType(container); 778899"];
3316 [label="IsGenericType(container) 778900"];
3317 [label="param IsGenericType(NamedTypeSymbol toCheck) 778901"];
3318 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778902"];
3319 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778903"];
3320 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 778904"];
3321 [label="toCheck = toCheck.ContainingType; 778905"];
3322 [label="return false; 778906"];
3323 [label="bool typeIsGeneric = IsGenericType(container); 778907"];
3324 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778908"];
3325 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778909"];
3326 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778910"];
3327 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 778911"];
3328 [label="param MustBeWrapped(ParameterSymbol param) 778912"];
3329 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 778913"];
3330 [label="var container = param.ContainingSymbol; 778914"];
3331 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 778915"];
3332 [label="ContainerIsGeneric(container) 778916"];
3333 [label="param ContainerIsGeneric(Symbol container) 778917"];
3334 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778918"];
3335 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778919"];
3336 [label="IsGenericType(container.ContainingType) 778920"];
3337 [label="param IsGenericType(NamedTypeSymbol toCheck) 778921"];
3338 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778922"];
3339 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778923"];
3340 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 778924"];
3341 [label="toCheck = toCheck.ContainingType; 778925"];
3342 [label="return false; 778926"];
3343 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778927"];
3344 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778928"];
3345 [label="param MustBeWrapped(ParameterSymbol param) 778929"];
3346 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 778930"];
3347 [label="var container = param.ContainingSymbol; 778931"];
3348 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 778932"];
3349 [label="ContainerIsGeneric(container) 778933"];
3350 [label="param ContainerIsGeneric(Symbol container) 778934"];
3351 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778935"];
3352 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778936"];
3353 [label="IsGenericType(container.ContainingType) 778937"];
3354 [label="param IsGenericType(NamedTypeSymbol toCheck) 778938"];
3355 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778939"];
3356 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778940"];
3357 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 778941"];
3358 [label="toCheck = toCheck.ContainingType; 778942"];
3359 [label="return false; 778943"];
3360 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778944"];
3361 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 778945"];
3362 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778946"];
3363 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 778947"];
3364 [label="param Translate(SyntaxNode syntaxNodeOpt) 778948"];
3365 [label="param Translate(DiagnosticBag diagnostics) 778949"];
3366 [label="param Translate(bool fromImplements = false) 778950"];
3367 [label="param Translate(bool needDeclaration = false) 778951"];
3368 [label="Debug.Assert(diagnostics != null); 778952"];
3369 [label="Debug.Assert(diagnostics != null); 778953"];
3370 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778954"];
3371 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778955"];
3372 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778956"];
3373 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778957"];
3374 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778958"];
3375 [label="object reference; 778959"];
3376 [label="Cci.INamedTypeReference typeRef; 778960"];
3377 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 778961"];
3378 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778962"];
3379 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778963"];
3380 [label="IsGenericType(container) 778964"];
3381 [label="param IsGenericType(NamedTypeSymbol toCheck) 778965"];
3382 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778966"];
3383 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778967"];
3384 [label="return false; 778968"];
3385 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778969"];
3386 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 778970"];
3387 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 778971"];
3388 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 778972"];
3389 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 778973"];
3390 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 778974"];
3391 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 778975"];
3392 [label="GetBoundReferenceManager(); 778976"];
3393 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 778977"];
3394 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 778978"];
3395 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 778979"];
3396 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 778980"];
3397 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 778981"];
3398 [label="bool typeIsGeneric = IsGenericType(container); 778982"];
3399 [label="IsGenericType(container) 778983"];
3400 [label="param IsGenericType(NamedTypeSymbol toCheck) 778984"];
3401 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778985"];
3402 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 778986"];
3403 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 778987"];
3404 [label="toCheck = toCheck.ContainingType; 778988"];
3405 [label="return false; 778989"];
3406 [label="bool typeIsGeneric = IsGenericType(container); 778990"];
3407 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778991"];
3408 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778992"];
3409 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 778993"];
3410 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 778994"];
3411 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778995"];
3412 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 778996"];
3413 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 778997"];
3414 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778998"];
3415 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 778999"];
3416 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 779000"];
3417 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 779001"];
3418 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 779002"];
3419 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 779003"];
3420 [label="param Translate(SyntaxNode syntaxNodeOpt) 779004"];
3421 [label="param Translate(DiagnosticBag diagnostics) 779005"];
3422 [label="param Translate(bool fromImplements = false) 779006"];
3423 [label="param Translate(bool needDeclaration = false) 779007"];
3424 [label="Debug.Assert(diagnostics != null); 779008"];
3425 [label="Debug.Assert(diagnostics != null); 779009"];
3426 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 779010"];
3427 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 779011"];
3428 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 779012"];
3429 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 779013"];
3430 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 779014"];
3431 [label="object reference; 779015"];
3432 [label="Cci.INamedTypeReference typeRef; 779016"];
3433 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 779017"];
3434 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 779018"];
3435 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 779019"];
3436 [label="IsGenericType(container) 779020"];
3437 [label="param IsGenericType(NamedTypeSymbol toCheck) 779021"];
3438 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 779022"];
3439 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 779023"];
3440 [label="return false; 779024"];
3441 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 779025"];
3442 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 779026"];
3443 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 779027"];
3444 [label="param MustBeWrapped(ParameterSymbol param) 779028"];
3445 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 779029"];
3446 [label="var container = param.ContainingSymbol; 779030"];
3447 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 779031"];
3448 [label="ContainerIsGeneric(container) 779032"];
3449 [label="param ContainerIsGeneric(Symbol container) 779033"];
3450 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 779034"];
3451 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 779035"];
3452 [label="IsGenericType(container.ContainingType) 779036"];
3453 [label="param IsGenericType(NamedTypeSymbol toCheck) 779037"];
3454 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 779038"];
3455 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 779039"];
3456 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 779040"];
3457 [label="toCheck = toCheck.ContainingType; 779041"];
3458 [label="return false; 779042"];
3459 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 779043"];
3460 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 779044"];
3461 [label="param MustBeWrapped(ParameterSymbol param) 779045"];
3462 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 779046"];
3463 [label="var container = param.ContainingSymbol; 779047"];
3464 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 779048"];
3465 [label="ContainerIsGeneric(container) 779049"];
3466 [label="param ContainerIsGeneric(Symbol container) 779050"];
3467 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 779051"];
3468 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 779052"];
3469 [label="IsGenericType(container.ContainingType) 779053"];
3470 [label="param IsGenericType(NamedTypeSymbol toCheck) 779054"];
3471 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 779055"];
3472 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 779056"];
3473 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 779057"];
3474 [label="toCheck = toCheck.ContainingType; 779058"];
3475 [label="return false; 779059"];
3476 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 779060"];
3477 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 779061"];
3478 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 779062"];
3479 [label="toCheck = toCheck.ContainingType; 779063"];
3480 [label="Debug.Assert(symbol.IsDefinition); 779064"];
3481 [label="GetBoundReferenceManager(); 779065"];
3482 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 779066"];
3483 [label="GetBoundReferenceManager(); 779067"];
3484 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 779068"];
3485 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 779069"];
3486 [label="param SynthesizeNullableAttributeIfNecessary(this) 779070"];
3487 [label="return this; 779071"];
3488 [label="GetBoundReferenceManager(); 779072"];
3489 [label="CustomAssert.True(emitResult.Success, 'Diagnostics: ' + string.Join(', ', emitResult.Diagnostics.Select(d => d.ToString()))); 779073"];
3490 [label="CustomAssert.True(emitResult.Success, 'Diagnostics: ' + string.Join(', ', emitResult.Diagnostics.Select(d => d.ToString()))); 779074"];
3491 [label="if (expectedWarnings != null)\n            {\n                emitResult.Diagnostics.Verify(expectedWarnings);\n            } 779075"];
3492 [label="if (expectedWarnings != null)\n            {\n                emitResult.Diagnostics.Verify(expectedWarnings);\n            } 779076"];
3493 [label="stream.Position = 0; 779077"];
3494 [label="stream.Position 779078"];
3495 [label="return stream; 779079"];
3496 [label="var metadataReader = ModuleMetadata.CreateFromStream(compilation.EmitToStream()).MetadataReader; 779080"];
3497 [label="var metadataReader = ModuleMetadata.CreateFromStream(compilation.EmitToStream()).MetadataReader; 779081"];
3498 [label="CustomAssert.Equal('v2.0.50727', metadataReader.MetadataVersion); 779082"];
3499 [label="CustomAssert.Equal('v2.0.50727', metadataReader.MetadataVersion); 779083"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 1;
13 -> 11;
13 -> 1;
14 -> 1;
15 -> 13;
15 -> 14;
16 -> 12;
16 -> 14;
17 -> 12;
17 -> 14;
18 -> 12;
18 -> 14;
19 -> 14;
20 -> 17;
20 -> 19;
20 -> 14;
21 -> 0;
21 -> 20;
22 -> 15;
22 -> 14;
23 -> 0;
23 -> 14;
24 -> 23;
24 -> 18;
24 -> 14;
25 -> 14;
26 -> 22;
26 -> 24;
26 -> 25;
26 -> 0;
26 -> 14;
27 -> 26;
27 -> 14;
28 -> 21;
28 -> 14;
29 -> 16;
29 -> 14;
30 -> 14;
31 -> 27;
31 -> 28;
31 -> 29;
31 -> 30;
31 -> 26;
31 -> 0;
31 -> 14;
32 -> 14;
33 -> 31;
33 -> 32;
34 -> 32;
35 -> 32;
36 -> 33;
36 -> 31;
36 -> 35;
36 -> 32;
37 -> 34;
37 -> 32;
38 -> 32;
39 -> 36;
39 -> 31;
39 -> 35;
39 -> 37;
39 -> 38;
39 -> 34;
39 -> 32;
40 -> 32;
41 -> 40;
41 -> 34;
41 -> 32;
42 -> 34;
42 -> 32;
43 -> 32;
44 -> 42;
44 -> 43;
44 -> 34;
44 -> 41;
44 -> 32;
45 -> 33;
45 -> 32;
46 -> 45;
46 -> 12;
46 -> 1;
47 -> 0;
49 -> 47;
49 -> 48;
50 -> 49;
51 -> 0;
53 -> 51;
53 -> 52;
55 -> 53;
55 -> 54;
56 -> 55;
57 -> 0;
57 -> 12;
57 -> 1;
58 -> 1;
59 -> 12;
59 -> 58;
60 -> 12;
60 -> 58;
61 -> 12;
61 -> 58;
62 -> 12;
62 -> 58;
63 -> 59;
63 -> 58;
64 -> 50;
64 -> 58;
65 -> 64;
65 -> 62;
65 -> 58;
66 -> 60;
66 -> 58;
67 -> 61;
67 -> 58;
68 -> 58;
69 -> 58;
70 -> 63;
70 -> 69;
71 -> 65;
71 -> 69;
72 -> 66;
72 -> 69;
73 -> 67;
73 -> 69;
74 -> 68;
74 -> 69;
75 -> 68;
75 -> 69;
76 -> 68;
76 -> 69;
77 -> 68;
77 -> 69;
78 -> 69;
79 -> 71;
79 -> 78;
79 -> 69;
80 -> 77;
80 -> 69;
81 -> 73;
81 -> 69;
82 -> 81;
82 -> 12;
82 -> 57;
82 -> 0;
82 -> 69;
83 -> 70;
83 -> 69;
84 -> 71;
84 -> 69;
85 -> 82;
85 -> 69;
86 -> 74;
86 -> 69;
87 -> 75;
87 -> 69;
88 -> 76;
88 -> 69;
89 -> 77;
89 -> 69;
90 -> 69;
91 -> 0;
91 -> 69;
92 -> 71;
92 -> 49;
92 -> 69;
93 -> 69;
94 -> 91;
94 -> 93;
95 -> 92;
95 -> 93;
96 -> 92;
96 -> 93;
97 -> 91;
97 -> 93;
98 -> 89;
98 -> 93;
99 -> 90;
99 -> 93;
100 -> 90;
100 -> 93;
101 -> 94;
101 -> 93;
102 -> 95;
102 -> 93;
103 -> 96;
103 -> 93;
104 -> 97;
104 -> 93;
105 -> 98;
105 -> 93;
106 -> 93;
107 -> 106;
107 -> 101;
107 -> 102;
107 -> 103;
107 -> 104;
107 -> 105;
107 -> 0;
107 -> 49;
107 -> 93;
108 -> 106;
108 -> 93;
109 -> 99;
109 -> 106;
109 -> 93;
110 -> 69;
111 -> 83;
111 -> 110;
112 -> 84;
112 -> 110;
113 -> 85;
113 -> 110;
114 -> 86;
114 -> 110;
115 -> 87;
115 -> 110;
116 -> 88;
116 -> 110;
117 -> 89;
117 -> 110;
118 -> 90;
118 -> 110;
119 -> 90;
119 -> 110;
120 -> 90;
120 -> 110;
121 -> 90;
121 -> 110;
122 -> 90;
122 -> 110;
123 -> 90;
123 -> 110;
124 -> 111;
124 -> 110;
125 -> 112;
125 -> 110;
126 -> 113;
126 -> 110;
127 -> 114;
127 -> 110;
128 -> 115;
128 -> 110;
129 -> 116;
129 -> 110;
130 -> 117;
130 -> 110;
131 -> 118;
131 -> 110;
132 -> 119;
132 -> 110;
133 -> 120;
133 -> 110;
134 -> 120;
134 -> 107;
134 -> 110;
135 -> 134;
135 -> 107;
135 -> 108;
135 -> 109;
135 -> 110;
136 -> 121;
136 -> 110;
137 -> 122;
137 -> 110;
138 -> 110;
139 -> 124;
139 -> 138;
140 -> 125;
140 -> 138;
141 -> 126;
141 -> 138;
142 -> 127;
142 -> 138;
143 -> 128;
143 -> 138;
144 -> 129;
144 -> 138;
145 -> 130;
145 -> 138;
146 -> 131;
146 -> 138;
147 -> 132;
147 -> 138;
148 -> 133;
148 -> 138;
149 -> 135;
149 -> 138;
150 -> 136;
150 -> 138;
151 -> 137;
151 -> 138;
152 -> 123;
152 -> 138;
153 -> 139;
153 -> 138;
154 -> 141;
154 -> 138;
155 -> 149;
155 -> 138;
156 -> 145;
156 -> 138;
157 -> 150;
157 -> 138;
158 -> 151;
158 -> 138;
159 -> 138;
160 -> 159;
160 -> 153;
160 -> 154;
160 -> 155;
160 -> 156;
160 -> 157;
160 -> 158;
160 -> 82;
160 -> 135;
160 -> 138;
161 -> 159;
161 -> 138;
162 -> 159;
162 -> 138;
163 -> 159;
163 -> 138;
164 -> 159;
164 -> 138;
165 -> 159;
165 -> 138;
166 -> 159;
166 -> 138;
167 -> 159;
167 -> 138;
168 -> 159;
168 -> 138;
169 -> 159;
169 -> 138;
170 -> 159;
170 -> 138;
171 -> 159;
171 -> 138;
172 -> 159;
172 -> 138;
173 -> 159;
173 -> 138;
174 -> 159;
174 -> 138;
175 -> 159;
175 -> 138;
176 -> 159;
176 -> 138;
177 -> 159;
177 -> 138;
178 -> 159;
178 -> 138;
179 -> 159;
179 -> 138;
180 -> 159;
180 -> 138;
181 -> 159;
181 -> 138;
182 -> 159;
182 -> 138;
183 -> 159;
183 -> 138;
184 -> 159;
184 -> 138;
185 -> 159;
185 -> 138;
186 -> 159;
186 -> 138;
187 -> 138;
188 -> 187;
188 -> 159;
188 -> 138;
189 -> 159;
189 -> 138;
190 -> 189;
190 -> 160;
190 -> 161;
190 -> 162;
190 -> 163;
190 -> 164;
190 -> 165;
190 -> 166;
190 -> 167;
190 -> 168;
190 -> 169;
190 -> 170;
190 -> 171;
190 -> 172;
190 -> 173;
190 -> 174;
190 -> 175;
190 -> 176;
190 -> 177;
190 -> 178;
190 -> 179;
190 -> 180;
190 -> 181;
190 -> 182;
190 -> 183;
190 -> 184;
190 -> 185;
190 -> 186;
190 -> 188;
190 -> 187;
190 -> 138;
191 -> 190;
191 -> 159;
191 -> 138;
192 -> 140;
192 -> 159;
192 -> 138;
193 -> 159;
193 -> 138;
194 -> 138;
195 -> 138;
196 -> 193;
196 -> 195;
197 -> 194;
197 -> 195;
198 -> 197;
198 -> 195;
199 -> 197;
199 -> 195;
200 -> 197;
200 -> 195;
201 -> 196;
201 -> 197;
201 -> 195;
202 -> 194;
202 -> 159;
202 -> 138;
203 -> 159;
203 -> 190;
203 -> 138;
204 -> 203;
204 -> 190;
204 -> 191;
204 -> 192;
204 -> 202;
204 -> 201;
204 -> 199;
204 -> 200;
204 -> 138;
205 -> 204;
205 -> 159;
205 -> 138;
206 -> 159;
206 -> 204;
206 -> 138;
207 -> 206;
207 -> 204;
207 -> 205;
207 -> 138;
208 -> 207;
208 -> 159;
208 -> 138;
209 -> 159;
209 -> 207;
209 -> 138;
210 -> 209;
210 -> 207;
210 -> 208;
210 -> 138;
211 -> 210;
211 -> 159;
211 -> 138;
212 -> 159;
212 -> 210;
212 -> 138;
213 -> 212;
213 -> 210;
213 -> 211;
213 -> 138;
214 -> 213;
214 -> 159;
214 -> 138;
215 -> 159;
215 -> 138;
216 -> 215;
216 -> 213;
216 -> 214;
216 -> 138;
217 -> 216;
217 -> 159;
217 -> 138;
218 -> 148;
218 -> 216;
218 -> 138;
219 -> 138;
220 -> 218;
220 -> 219;
221 -> 219;
222 -> 220;
222 -> 219;
223 -> 222;
223 -> 216;
223 -> 217;
223 -> 219;
224 -> 0;
224 -> 219;
225 -> 224;
225 -> 221;
225 -> 219;
226 -> 225;
226 -> 138;
227 -> 226;
227 -> 159;
227 -> 138;
228 -> 145;
228 -> 138;
229 -> 228;
230 -> 142;
230 -> 229;
230 -> 228;
231 -> 143;
231 -> 229;
231 -> 228;
232 -> 230;
232 -> 231;
232 -> 228;
233 -> 144;
233 -> 229;
233 -> 228;
234 -> 232;
234 -> 233;
234 -> 228;
235 -> 147;
235 -> 138;
236 -> 159;
236 -> 216;
236 -> 217;
236 -> 227;
236 -> 235;
237 -> 235;
238 -> 159;
238 -> 237;
239 -> 238;
239 -> 236;
239 -> 237;
240 -> 146;
240 -> 235;
241 -> 236;
241 -> 239;
241 -> 240;
241 -> 235;
242 -> 241;
242 -> 159;
242 -> 235;
243 -> 148;
243 -> 159;
243 -> 138;
244 -> 159;
244 -> 241;
244 -> 138;
245 -> 138;
246 -> 159;
246 -> 241;
246 -> 245;
246 -> 138;
247 -> 69;
248 -> 72;
248 -> 247;
248 -> 69;
249 -> 72;
249 -> 248;
250 -> 248;
251 -> 249;
251 -> 250;
252 -> 90;
252 -> 250;
253 -> 250;
254 -> 251;
254 -> 253;
254 -> 250;
255 -> 251;
255 -> 250;
256 -> 255;
256 -> 12;
256 -> 46;
256 -> 31;
256 -> 250;
257 -> 250;
258 -> 252;
258 -> 241;
258 -> 243;
258 -> 250;
259 -> 257;
259 -> 250;
260 -> 258;
260 -> 241;
260 -> 250;
261 -> 259;
261 -> 260;
261 -> 257;
261 -> 241;
261 -> 242;
261 -> 243;
261 -> 250;
262 -> 250;
263 -> 250;
264 -> 251;
264 -> 250;
265 -> 264;
265 -> 256;
265 -> 250;
266 -> 265;
267 -> 265;
268 -> 265;
269 -> 257;
269 -> 268;
269 -> 261;
269 -> 265;
270 -> 252;
270 -> 269;
270 -> 265;
271 -> 265;
272 -> 257;
272 -> 271;
272 -> 269;
272 -> 265;
273 -> 262;
273 -> 265;
273 -> 272;
274 -> 263;
274 -> 265;
275 -> 257;
275 -> 272;
275 -> 250;
276 -> 252;
276 -> 275;
276 -> 250;
277 -> 251;
277 -> 250;
278 -> 250;
279 -> 277;
279 -> 278;
280 -> 258;
280 -> 278;
281 -> 280;
281 -> 275;
281 -> 278;
282 -> 280;
282 -> 275;
282 -> 278;
283 -> 280;
283 -> 275;
283 -> 278;
284 -> 280;
284 -> 275;
284 -> 278;
285 -> 280;
285 -> 275;
285 -> 278;
286 -> 279;
286 -> 278;
287 -> 280;
287 -> 275;
287 -> 286;
287 -> 278;
288 -> 278;
289 -> 285;
289 -> 288;
289 -> 278;
290 -> 287;
290 -> 289;
291 -> 289;
292 -> 290;
292 -> 291;
293 -> 280;
293 -> 291;
294 -> 292;
294 -> 291;
295 -> 293;
295 -> 287;
295 -> 291;
296 -> 291;
297 -> 291;
298 -> 294;
298 -> 297;
299 -> 295;
299 -> 297;
300 -> 295;
300 -> 297;
301 -> 295;
301 -> 297;
302 -> 295;
302 -> 297;
303 -> 296;
303 -> 297;
304 -> 296;
304 -> 297;
305 -> 297;
305 -> 298;
305 -> 299;
305 -> 300;
305 -> 301;
305 -> 302;
305 -> 287;
306 -> 296;
306 -> 289;
307 -> 306;
307 -> 250;
308 -> 252;
308 -> 305;
308 -> 250;
309 -> 273;
309 -> 250;
310 -> 307;
310 -> 250;
311 -> 250;
312 -> 308;
312 -> 311;
313 -> 309;
313 -> 311;
314 -> 310;
314 -> 311;
315 -> 252;
315 -> 311;
316 -> 315;
316 -> 305;
316 -> 311;
317 -> 311;
318 -> 315;
318 -> 317;
319 -> 318;
319 -> 305;
319 -> 317;
320 -> 319;
320 -> 317;
321 -> 320;
321 -> 311;
322 -> 315;
322 -> 305;
322 -> 297;
322 -> 303;
322 -> 311;
323 -> 311;
324 -> 322;
324 -> 323;
325 -> 324;
325 -> 322;
325 -> 323;
326 -> 311;
327 -> 325;
327 -> 326;
328 -> 312;
328 -> 311;
329 -> 313;
329 -> 311;
330 -> 314;
330 -> 311;
331 -> 311;
332 -> 311;
333 -> 316;
333 -> 332;
334 -> 316;
334 -> 332;
335 -> 316;
335 -> 332;
336 -> 321;
336 -> 332;
337 -> 325;
337 -> 332;
338 -> 327;
338 -> 332;
339 -> 327;
339 -> 332;
340 -> 328;
340 -> 332;
341 -> 329;
341 -> 332;
342 -> 330;
342 -> 332;
343 -> 327;
343 -> 332;
344 -> 331;
344 -> 332;
345 -> 331;
345 -> 332;
346 -> 336;
346 -> 332;
347 -> 337;
347 -> 332;
348 -> 338;
348 -> 332;
349 -> 342;
349 -> 327;
349 -> 332;
350 -> 344;
350 -> 332;
351 -> 332;
352 -> 346;
352 -> 351;
353 -> 347;
353 -> 351;
354 -> 348;
354 -> 351;
355 -> 350;
355 -> 351;
356 -> 345;
356 -> 351;
357 -> 355;
357 -> 351;
358 -> 351;
359 -> 358;
359 -> 351;
360 -> 358;
360 -> 351;
361 -> 358;
361 -> 351;
362 -> 358;
362 -> 351;
363 -> 358;
363 -> 351;
364 -> 358;
364 -> 351;
365 -> 358;
365 -> 351;
366 -> 358;
366 -> 351;
367 -> 358;
367 -> 351;
368 -> 358;
368 -> 351;
369 -> 358;
369 -> 351;
370 -> 358;
370 -> 351;
371 -> 358;
371 -> 351;
372 -> 358;
372 -> 351;
373 -> 358;
373 -> 351;
374 -> 358;
374 -> 351;
375 -> 358;
375 -> 351;
376 -> 358;
376 -> 351;
377 -> 358;
377 -> 351;
378 -> 358;
378 -> 351;
379 -> 358;
379 -> 351;
380 -> 358;
380 -> 351;
381 -> 358;
381 -> 351;
382 -> 358;
382 -> 351;
383 -> 358;
383 -> 351;
384 -> 358;
384 -> 351;
385 -> 351;
386 -> 385;
386 -> 358;
386 -> 351;
387 -> 358;
387 -> 351;
388 -> 358;
388 -> 351;
389 -> 351;
390 -> 351;
391 -> 388;
391 -> 390;
392 -> 389;
392 -> 390;
393 -> 392;
393 -> 390;
394 -> 392;
394 -> 390;
395 -> 392;
395 -> 390;
396 -> 391;
396 -> 392;
396 -> 390;
397 -> 389;
397 -> 358;
397 -> 351;
398 -> 358;
398 -> 351;
399 -> 351;
400 -> 349;
400 -> 399;
401 -> 399;
402 -> 400;
402 -> 399;
403 -> 402;
403 -> 349;
404 -> 402;
405 -> 403;
405 -> 404;
406 -> 339;
406 -> 351;
407 -> 406;
408 -> 352;
408 -> 407;
408 -> 406;
409 -> 353;
409 -> 407;
409 -> 406;
410 -> 408;
410 -> 409;
410 -> 406;
411 -> 354;
411 -> 407;
411 -> 406;
412 -> 410;
412 -> 411;
412 -> 406;
413 -> 340;
413 -> 341;
414 -> 358;
414 -> 341;
415 -> 340;
415 -> 414;
415 -> 349;
415 -> 405;
415 -> 341;
416 -> 340;
416 -> 358;
416 -> 341;
417 -> 358;
417 -> 415;
417 -> 351;
418 -> 351;
419 -> 358;
419 -> 415;
419 -> 418;
419 -> 351;
420 -> 331;
420 -> 250;
421 -> 420;
421 -> 248;
422 -> 421;
422 -> 415;
422 -> 69;
423 -> 421;
423 -> 69;
424 -> 423;
424 -> 1;
425 -> 1;
426 -> 1;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 425;
429 -> 426;
430 -> 426;
431 -> 430;
431 -> 426;
432 -> 428;
432 -> 426;
433 -> 426;
434 -> 431;
434 -> 433;
434 -> 432;
434 -> 427;
434 -> 430;
434 -> 415;
434 -> 416;
434 -> 342;
434 -> 426;
435 -> 434;
435 -> 433;
436 -> 435;
436 -> 434;
436 -> 433;
437 -> 434;
437 -> 433;
438 -> 437;
438 -> 436;
438 -> 433;
439 -> 434;
439 -> 433;
440 -> 434;
440 -> 433;
441 -> 434;
441 -> 433;
442 -> 434;
442 -> 433;
443 -> 434;
443 -> 433;
444 -> 434;
444 -> 433;
445 -> 434;
445 -> 433;
446 -> 434;
446 -> 433;
447 -> 434;
447 -> 433;
448 -> 447;
448 -> 438;
448 -> 433;
449 -> 439;
449 -> 433;
450 -> 445;
450 -> 433;
451 -> 433;
452 -> 449;
452 -> 451;
453 -> 450;
453 -> 451;
454 -> 447;
454 -> 451;
455 -> 452;
455 -> 451;
456 -> 451;
457 -> 455;
457 -> 456;
458 -> 454;
458 -> 456;
459 -> 456;
460 -> 458;
460 -> 459;
461 -> 459;
462 -> 460;
462 -> 461;
463 -> 461;
464 -> 462;
464 -> 463;
465 -> 464;
465 -> 438;
465 -> 463;
466 -> 464;
466 -> 465;
467 -> 465;
468 -> 466;
468 -> 467;
469 -> 467;
470 -> 468;
470 -> 469;
471 -> 469;
472 -> 470;
472 -> 466;
472 -> 471;
473 -> 471;
474 -> 472;
474 -> 466;
474 -> 473;
474 -> 471;
475 -> 472;
475 -> 466;
475 -> 474;
476 -> 474;
477 -> 475;
477 -> 476;
478 -> 475;
478 -> 476;
479 -> 475;
479 -> 476;
480 -> 475;
480 -> 476;
481 -> 475;
481 -> 476;
482 -> 476;
483 -> 476;
484 -> 476;
485 -> 476;
486 -> 476;
487 -> 0;
487 -> 476;
488 -> 477;
488 -> 476;
489 -> 482;
489 -> 488;
490 -> 488;
491 -> 478;
491 -> 488;
492 -> 479;
492 -> 488;
493 -> 480;
493 -> 488;
494 -> 481;
494 -> 488;
495 -> 483;
495 -> 488;
496 -> 484;
496 -> 488;
497 -> 485;
497 -> 488;
498 -> 486;
498 -> 488;
499 -> 487;
499 -> 488;
500 -> 488;
501 -> 489;
501 -> 500;
502 -> 490;
502 -> 500;
503 -> 491;
503 -> 500;
504 -> 492;
504 -> 500;
505 -> 493;
505 -> 500;
506 -> 494;
506 -> 500;
507 -> 495;
507 -> 500;
508 -> 496;
508 -> 500;
509 -> 497;
509 -> 500;
510 -> 498;
510 -> 500;
511 -> 499;
511 -> 500;
512 -> 502;
512 -> 466;
512 -> 500;
513 -> 512;
513 -> 0;
513 -> 500;
514 -> 502;
514 -> 500;
515 -> 503;
515 -> 500;
516 -> 506;
516 -> 500;
517 -> 510;
517 -> 500;
518 -> 511;
518 -> 500;
519 -> 500;
520 -> 514;
520 -> 519;
521 -> 515;
521 -> 519;
522 -> 516;
522 -> 519;
523 -> 517;
523 -> 519;
524 -> 518;
524 -> 519;
525 -> 520;
525 -> 521;
525 -> 522;
525 -> 519;
526 -> 520;
526 -> 519;
527 -> 525;
527 -> 519;
528 -> 523;
528 -> 526;
528 -> 527;
528 -> 486;
528 -> 525;
528 -> 519;
529 -> 525;
529 -> 519;
530 -> 524;
530 -> 529;
530 -> 0;
530 -> 528;
530 -> 519;
531 -> 500;
532 -> 502;
532 -> 500;
533 -> 501;
533 -> 532;
533 -> 482;
533 -> 530;
533 -> 500;
534 -> 502;
534 -> 500;
535 -> 507;
535 -> 483;
535 -> 500;
536 -> 507;
536 -> 534;
536 -> 535;
536 -> 483;
536 -> 533;
536 -> 500;
537 -> 482;
537 -> 536;
537 -> 476;
538 -> 483;
538 -> 536;
538 -> 476;
539 -> 484;
539 -> 476;
540 -> 485;
540 -> 476;
541 -> 530;
541 -> 476;
542 -> 476;
543 -> 476;
544 -> 537;
544 -> 543;
545 -> 538;
545 -> 543;
546 -> 539;
546 -> 543;
547 -> 540;
547 -> 543;
548 -> 538;
548 -> 543;
549 -> 541;
549 -> 543;
550 -> 542;
550 -> 543;
551 -> 550;
551 -> 543;
552 -> 550;
552 -> 543;
553 -> 550;
553 -> 543;
554 -> 550;
554 -> 543;
555 -> 550;
555 -> 543;
556 -> 544;
556 -> 543;
557 -> 544;
557 -> 537;
557 -> 543;
558 -> 544;
558 -> 543;
559 -> 548;
559 -> 556;
559 -> 543;
560 -> 0;
560 -> 543;
561 -> 544;
561 -> 550;
561 -> 543;
562 -> 545;
562 -> 550;
562 -> 543;
563 -> 546;
563 -> 550;
563 -> 543;
564 -> 547;
564 -> 550;
564 -> 543;
565 -> 548;
565 -> 550;
565 -> 543;
566 -> 549;
566 -> 550;
566 -> 543;
567 -> 542;
567 -> 474;
568 -> 474;
569 -> 475;
569 -> 567;
569 -> 568;
569 -> 562;
569 -> 563;
569 -> 564;
569 -> 565;
569 -> 566;
569 -> 561;
569 -> 559;
569 -> 537;
569 -> 539;
569 -> 540;
569 -> 474;
570 -> 472;
570 -> 569;
570 -> 471;
571 -> 570;
571 -> 469;
572 -> 571;
572 -> 467;
573 -> 466;
573 -> 467;
574 -> 467;
575 -> 574;
576 -> 464;
576 -> 572;
576 -> 465;
577 -> 464;
577 -> 572;
577 -> 463;
578 -> 577;
578 -> 461;
579 -> 462;
579 -> 572;
579 -> 461;
580 -> 462;
580 -> 579;
580 -> 461;
581 -> 580;
581 -> 459;
582 -> 581;
582 -> 456;
583 -> 582;
583 -> 456;
584 -> 582;
584 -> 579;
584 -> 583;
585 -> 584;
585 -> 451;
586 -> 451;
587 -> 585;
587 -> 586;
587 -> 451;
588 -> 585;
588 -> 587;
589 -> 588;
589 -> 433;
590 -> 433;
591 -> 589;
591 -> 590;
591 -> 433;
592 -> 439;
592 -> 433;
593 -> 589;
593 -> 433;
594 -> 433;
595 -> 592;
595 -> 593;
595 -> 594;
595 -> 447;
595 -> 579;
595 -> 433;
596 -> 595;
596 -> 594;
597 -> 594;
598 -> 596;
598 -> 597;
599 -> 597;
600 -> 598;
600 -> 595;
600 -> 599;
601 -> 600;
601 -> 597;
602 -> 598;
602 -> 594;
603 -> 594;
604 -> 602;
604 -> 603;
605 -> 602;
605 -> 603;
606 -> 603;
607 -> 605;
607 -> 606;
608 -> 606;
609 -> 608;
610 -> 607;
610 -> 603;
611 -> 605;
611 -> 603;
612 -> 603;
613 -> 612;
614 -> 613;
615 -> 595;
615 -> 594;
616 -> 594;
617 -> 615;
617 -> 616;
618 -> 616;
619 -> 617;
619 -> 610;
619 -> 618;
620 -> 617;
620 -> 610;
620 -> 618;
621 -> 620;
621 -> 616;
622 -> 617;
622 -> 610;
622 -> 616;
623 -> 622;
623 -> 594;
624 -> 594;
625 -> 623;
625 -> 624;
626 -> 595;
626 -> 594;
627 -> 594;
628 -> 595;
628 -> 627;
628 -> 625;
628 -> 433;
629 -> 433;
630 -> 443;
630 -> 629;
630 -> 433;
631 -> 630;
632 -> 433;
633 -> 447;
633 -> 628;
633 -> 433;
634 -> 447;
634 -> 628;
634 -> 633;
635 -> 634;
635 -> 633;
636 -> 447;
636 -> 628;
636 -> 635;
637 -> 633;
638 -> 637;
638 -> 628;
639 -> 638;
639 -> 637;
640 -> 637;
640 -> 628;
640 -> 636;
641 -> 640;
641 -> 633;
642 -> 439;
642 -> 633;
643 -> 636;
643 -> 633;
644 -> 628;
644 -> 633;
645 -> 631;
645 -> 633;
646 -> 633;
647 -> 633;
648 -> 641;
648 -> 647;
649 -> 642;
649 -> 647;
650 -> 643;
650 -> 647;
651 -> 644;
651 -> 647;
652 -> 645;
652 -> 647;
653 -> 646;
653 -> 647;
654 -> 648;
654 -> 647;
655 -> 649;
655 -> 647;
656 -> 650;
656 -> 647;
657 -> 651;
657 -> 647;
658 -> 652;
658 -> 647;
659 -> 0;
659 -> 647;
660 -> 647;
661 -> 654;
661 -> 660;
662 -> 655;
662 -> 660;
663 -> 656;
663 -> 660;
664 -> 657;
664 -> 660;
665 -> 658;
665 -> 660;
666 -> 659;
666 -> 660;
667 -> 653;
667 -> 660;
668 -> 660;
669 -> 661;
669 -> 640;
669 -> 668;
669 -> 660;
670 -> 662;
670 -> 660;
671 -> 663;
671 -> 660;
672 -> 664;
672 -> 660;
673 -> 665;
673 -> 660;
674 -> 660;
675 -> 669;
675 -> 674;
676 -> 670;
676 -> 674;
677 -> 671;
677 -> 674;
678 -> 672;
678 -> 674;
679 -> 673;
679 -> 674;
680 -> 667;
680 -> 674;
681 -> 675;
681 -> 669;
681 -> 674;
682 -> 675;
682 -> 674;
683 -> 678;
683 -> 674;
684 -> 679;
684 -> 674;
685 -> 677;
685 -> 674;
686 -> 676;
686 -> 674;
687 -> 674;
688 -> 687;
689 -> 674;
690 -> 689;
690 -> 681;
690 -> 682;
690 -> 683;
690 -> 684;
690 -> 685;
690 -> 686;
690 -> 687;
690 -> 669;
690 -> 631;
690 -> 688;
690 -> 674;
691 -> 690;
691 -> 689;
692 -> 689;
693 -> 690;
693 -> 692;
693 -> 674;
694 -> 674;
695 -> 694;
695 -> 689;
695 -> 674;
696 -> 0;
696 -> 674;
697 -> 696;
697 -> 0;
697 -> 674;
698 -> 697;
698 -> 689;
698 -> 674;
699 -> 674;
700 -> 699;
700 -> 689;
700 -> 674;
701 -> 689;
701 -> 674;
702 -> 689;
702 -> 674;
703 -> 689;
703 -> 674;
704 -> 689;
704 -> 674;
705 -> 689;
705 -> 674;
706 -> 675;
706 -> 693;
706 -> 674;
707 -> 706;
707 -> 0;
707 -> 674;
708 -> 707;
708 -> 674;
709 -> 708;
709 -> 689;
709 -> 674;
710 -> 689;
710 -> 693;
710 -> 695;
710 -> 674;
711 -> 675;
711 -> 674;
712 -> 689;
712 -> 674;
713 -> 710;
713 -> 711;
713 -> 712;
713 -> 693;
713 -> 695;
713 -> 698;
713 -> 700;
713 -> 701;
713 -> 702;
713 -> 709;
713 -> 703;
713 -> 704;
713 -> 705;
713 -> 694;
713 -> 697;
713 -> 699;
713 -> 674;
714 -> 675;
714 -> 713;
714 -> 674;
715 -> 667;
715 -> 660;
716 -> 667;
716 -> 660;
717 -> 667;
717 -> 660;
718 -> 667;
718 -> 660;
719 -> 667;
719 -> 660;
720 -> 667;
720 -> 660;
721 -> 667;
721 -> 660;
722 -> 667;
722 -> 660;
723 -> 667;
723 -> 660;
724 -> 667;
724 -> 660;
725 -> 661;
725 -> 660;
726 -> 661;
726 -> 667;
726 -> 660;
727 -> 666;
727 -> 660;
728 -> 727;
728 -> 667;
728 -> 660;
729 -> 660;
730 -> 662;
730 -> 713;
730 -> 729;
730 -> 660;
731 -> 730;
731 -> 660;
732 -> 661;
732 -> 713;
732 -> 731;
733 -> 661;
733 -> 713;
733 -> 732;
733 -> 667;
733 -> 660;
734 -> 667;
734 -> 713;
734 -> 660;
735 -> 661;
735 -> 660;
736 -> 667;
736 -> 660;
737 -> 734;
737 -> 735;
737 -> 736;
737 -> 713;
737 -> 715;
737 -> 726;
737 -> 716;
737 -> 717;
737 -> 718;
737 -> 719;
737 -> 720;
737 -> 721;
737 -> 722;
737 -> 723;
737 -> 724;
737 -> 733;
737 -> 728;
737 -> 732;
737 -> 727;
737 -> 660;
738 -> 433;
739 -> 440;
739 -> 738;
739 -> 433;
740 -> 441;
740 -> 646;
740 -> 433;
741 -> 433;
742 -> 442;
742 -> 741;
742 -> 433;
743 -> 433;
744 -> 444;
744 -> 743;
744 -> 433;
745 -> 646;
745 -> 433;
746 -> 434;
746 -> 745;
746 -> 737;
746 -> 740;
746 -> 426;
747 -> 434;
747 -> 433;
748 -> 434;
748 -> 433;
749 -> 434;
749 -> 433;
750 -> 434;
750 -> 433;
751 -> 434;
751 -> 433;
752 -> 434;
752 -> 433;
753 -> 434;
753 -> 433;
754 -> 434;
754 -> 433;
755 -> 433;
756 -> 749;
756 -> 433;
757 -> 751;
757 -> 433;
758 -> 0;
758 -> 433;
759 -> 433;
760 -> 753;
760 -> 433;
761 -> 433;
762 -> 758;
762 -> 761;
763 -> 759;
763 -> 761;
764 -> 760;
764 -> 761;
765 -> 754;
765 -> 761;
766 -> 761;
767 -> 762;
767 -> 761;
768 -> 763;
768 -> 761;
769 -> 766;
769 -> 761;
770 -> 764;
770 -> 761;
771 -> 761;
772 -> 767;
772 -> 771;
773 -> 768;
773 -> 771;
774 -> 769;
774 -> 771;
775 -> 770;
775 -> 771;
776 -> 765;
776 -> 771;
777 -> 771;
778 -> 772;
778 -> 0;
778 -> 771;
779 -> 778;
779 -> 773;
779 -> 771;
780 -> 779;
781 -> 776;
781 -> 780;
782 -> 780;
783 -> 781;
783 -> 746;
783 -> 782;
784 -> 782;
785 -> 783;
785 -> 780;
786 -> 785;
786 -> 779;
787 -> 779;
788 -> 776;
788 -> 787;
789 -> 788;
789 -> 746;
789 -> 787;
790 -> 789;
790 -> 779;
791 -> 790;
792 -> 786;
792 -> 746;
792 -> 790;
793 -> 775;
793 -> 790;
794 -> 791;
794 -> 792;
794 -> 793;
794 -> 746;
794 -> 790;
795 -> 794;
795 -> 791;
796 -> 794;
796 -> 791;
797 -> 794;
797 -> 791;
798 -> 794;
798 -> 791;
799 -> 791;
800 -> 799;
800 -> 791;
801 -> 791;
802 -> 796;
802 -> 801;
803 -> 802;
803 -> 791;
804 -> 797;
804 -> 791;
805 -> 799;
805 -> 791;
806 -> 803;
806 -> 794;
806 -> 804;
806 -> 805;
806 -> 800;
806 -> 791;
807 -> 779;
808 -> 786;
808 -> 779;
809 -> 775;
809 -> 746;
809 -> 806;
809 -> 808;
810 -> 808;
810 -> 746;
810 -> 809;
811 -> 772;
811 -> 0;
811 -> 771;
812 -> 777;
812 -> 811;
813 -> 812;
813 -> 776;
813 -> 777;
813 -> 809;
813 -> 811;
814 -> 811;
815 -> 811;
816 -> 776;
816 -> 815;
817 -> 816;
817 -> 813;
817 -> 815;
818 -> 817;
818 -> 811;
819 -> 811;
820 -> 776;
820 -> 819;
821 -> 820;
821 -> 818;
821 -> 819;
822 -> 821;
822 -> 811;
823 -> 775;
823 -> 818;
823 -> 811;
824 -> 811;
825 -> 776;
825 -> 824;
826 -> 825;
826 -> 823;
826 -> 824;
827 -> 825;
827 -> 823;
827 -> 824;
828 -> 827;
828 -> 811;
829 -> 775;
829 -> 828;
829 -> 811;
830 -> 775;
830 -> 811;
831 -> 811;
832 -> 811;
833 -> 831;
833 -> 832;
834 -> 831;
834 -> 832;
835 -> 831;
835 -> 832;
836 -> 830;
836 -> 832;
837 -> 776;
837 -> 832;
838 -> 832;
839 -> 837;
839 -> 838;
840 -> 839;
840 -> 829;
840 -> 838;
841 -> 838;
842 -> 840;
842 -> 841;
843 -> 842;
843 -> 841;
844 -> 843;
844 -> 840;
844 -> 841;
845 -> 841;
846 -> 844;
846 -> 845;
847 -> 846;
847 -> 844;
847 -> 845;
848 -> 847;
848 -> 845;
849 -> 848;
849 -> 832;
850 -> 836;
850 -> 832;
851 -> 849;
851 -> 850;
851 -> 848;
851 -> 829;
851 -> 832;
852 -> 832;
853 -> 832;
854 -> 833;
854 -> 853;
854 -> 832;
855 -> 832;
856 -> 837;
856 -> 855;
857 -> 855;
858 -> 856;
858 -> 857;
859 -> 857;
860 -> 858;
860 -> 859;
861 -> 860;
861 -> 851;
861 -> 859;
862 -> 860;
862 -> 851;
862 -> 859;
863 -> 862;
863 -> 857;
864 -> 858;
864 -> 851;
864 -> 857;
865 -> 864;
865 -> 832;
866 -> 852;
866 -> 832;
867 -> 836;
867 -> 832;
868 -> 866;
868 -> 867;
868 -> 865;
868 -> 829;
868 -> 864;
868 -> 832;
869 -> 832;
870 -> 869;
871 -> 870;
872 -> 868;
872 -> 870;
873 -> 869;
874 -> 873;
875 -> 874;
876 -> 869;
877 -> 876;
878 -> 877;
879 -> 868;
879 -> 869;
880 -> 879;
880 -> 868;
880 -> 869;
881 -> 869;
882 -> 879;
882 -> 868;
882 -> 881;
882 -> 869;
883 -> 882;
884 -> 879;
884 -> 868;
884 -> 882;
885 -> 883;
885 -> 882;
886 -> 882;
887 -> 879;
887 -> 885;
887 -> 869;
888 -> 868;
888 -> 869;
889 -> 868;
889 -> 869;
890 -> 889;
890 -> 887;
890 -> 869;
891 -> 868;
891 -> 869;
892 -> 868;
892 -> 869;
893 -> 869;
894 -> 892;
894 -> 893;
895 -> 894;
895 -> 887;
895 -> 893;
896 -> 894;
896 -> 887;
896 -> 893;
897 -> 896;
897 -> 869;
898 -> 869;
899 -> 898;
899 -> 897;
899 -> 887;
899 -> 869;
900 -> 898;
900 -> 899;
901 -> 897;
901 -> 900;
901 -> 898;
902 -> 891;
902 -> 901;
902 -> 900;
903 -> 868;
903 -> 869;
904 -> 903;
904 -> 902;
904 -> 869;
905 -> 904;
905 -> 870;
906 -> 868;
906 -> 869;
907 -> 868;
907 -> 869;
908 -> 906;
908 -> 0;
908 -> 869;
909 -> 869;
910 -> 906;
910 -> 869;
911 -> 907;
911 -> 910;
911 -> 904;
911 -> 869;
912 -> 911;
913 -> 912;
914 -> 912;
914 -> 911;
915 -> 906;
915 -> 911;
916 -> 914;
916 -> 906;
916 -> 869;
917 -> 914;
917 -> 869;
918 -> 868;
918 -> 869;
919 -> 868;
919 -> 869;
920 -> 918;
920 -> 917;
920 -> 869;
921 -> 869;
922 -> 869;
923 -> 920;
923 -> 922;
924 -> 921;
924 -> 922;
925 -> 919;
925 -> 922;
926 -> 924;
926 -> 922;
927 -> 923;
927 -> 922;
928 -> 922;
929 -> 925;
929 -> 917;
929 -> 922;
930 -> 922;
931 -> 927;
931 -> 930;
932 -> 928;
932 -> 930;
933 -> 929;
933 -> 930;
934 -> 925;
934 -> 930;
935 -> 933;
935 -> 930;
936 -> 932;
936 -> 930;
937 -> 934;
937 -> 917;
937 -> 936;
938 -> 934;
938 -> 917;
938 -> 937;
938 -> 930;
939 -> 935;
939 -> 938;
939 -> 917;
939 -> 937;
939 -> 930;
940 -> 931;
940 -> 930;
941 -> 930;
942 -> 940;
942 -> 941;
943 -> 934;
943 -> 941;
944 -> 942;
944 -> 941;
945 -> 941;
946 -> 944;
946 -> 945;
947 -> 943;
947 -> 945;
948 -> 945;
949 -> 946;
949 -> 948;
949 -> 945;
950 -> 945;
951 -> 947;
951 -> 939;
951 -> 950;
952 -> 950;
953 -> 951;
953 -> 945;
954 -> 946;
954 -> 945;
955 -> 953;
955 -> 939;
955 -> 954;
955 -> 945;
956 -> 941;
957 -> 943;
957 -> 955;
957 -> 956;
958 -> 956;
959 -> 957;
959 -> 941;
960 -> 939;
960 -> 930;
961 -> 930;
962 -> 960;
962 -> 961;
962 -> 930;
963 -> 962;
964 -> 963;
964 -> 959;
965 -> 964;
965 -> 962;
966 -> 939;
966 -> 962;
967 -> 965;
967 -> 962;
968 -> 962;
969 -> 930;
970 -> 967;
970 -> 959;
970 -> 930;
971 -> 930;
972 -> 970;
972 -> 971;
972 -> 930;
973 -> 931;
973 -> 930;
974 -> 932;
974 -> 930;
975 -> 967;
975 -> 959;
975 -> 930;
976 -> 930;
977 -> 973;
977 -> 976;
978 -> 974;
978 -> 976;
979 -> 975;
979 -> 976;
980 -> 934;
980 -> 976;
981 -> 980;
981 -> 976;
982 -> 977;
982 -> 976;
983 -> 978;
983 -> 976;
984 -> 981;
984 -> 982;
984 -> 983;
984 -> 967;
984 -> 976;
985 -> 976;
986 -> 984;
986 -> 976;
987 -> 976;
988 -> 987;
989 -> 979;
989 -> 987;
990 -> 987;
991 -> 989;
991 -> 990;
991 -> 987;
992 -> 979;
992 -> 987;
993 -> 986;
993 -> 987;
994 -> 989;
994 -> 987;
995 -> 992;
995 -> 993;
995 -> 994;
995 -> 986;
995 -> 987;
996 -> 984;
996 -> 995;
997 -> 918;
997 -> 869;
998 -> 996;
998 -> 921;
999 -> 998;
999 -> 996;
999 -> 921;
1000 -> 999;
1001 -> 1000;
1001 -> 999;
1002 -> 999;
1003 -> 1001;
1003 -> 1002;
1004 -> 998;
1004 -> 1002;
1005 -> 1002;
1006 -> 1004;
1006 -> 1005;
1007 -> 1006;
1007 -> 1005;
1008 -> 1006;
1008 -> 1002;
1009 -> 1003;
1009 -> 1008;
1009 -> 1000;
1009 -> 1006;
1009 -> 1002;
1010 -> 1002;
1011 -> 1004;
1011 -> 1010;
1012 -> 1011;
1012 -> 1009;
1012 -> 1010;
1013 -> 1011;
1013 -> 1009;
1013 -> 1010;
1014 -> 1013;
1014 -> 1002;
1015 -> 1002;
1016 -> 1015;
1016 -> 1014;
1016 -> 1009;
1016 -> 1002;
1017 -> 1015;
1017 -> 1016;
1018 -> 1014;
1018 -> 1017;
1018 -> 1015;
1019 -> 999;
1020 -> 998;
1020 -> 999;
1021 -> 1020;
1021 -> 1018;
1021 -> 999;
1022 -> 999;
1023 -> 1000;
1023 -> 1021;
1023 -> 999;
1024 -> 998;
1024 -> 1023;
1024 -> 999;
1025 -> 1021;
1025 -> 999;
1026 -> 999;
1027 -> 998;
1027 -> 1024;
1027 -> 921;
1028 -> 996;
1028 -> 921;
1029 -> 921;
1030 -> 1028;
1030 -> 1029;
1031 -> 1029;
1032 -> 1031;
1033 -> 1030;
1033 -> 1027;
1033 -> 1032;
1034 -> 1030;
1034 -> 1027;
1034 -> 1032;
1035 -> 1034;
1035 -> 1031;
1036 -> 1030;
1036 -> 1027;
1036 -> 1031;
1037 -> 1036;
1037 -> 921;
1038 -> 921;
1039 -> 868;
1039 -> 869;
1040 -> 868;
1040 -> 869;
1041 -> 1039;
1041 -> 1037;
1041 -> 869;
1042 -> 869;
1043 -> 1041;
1043 -> 1042;
1044 -> 1041;
1044 -> 1042;
1045 -> 1040;
1045 -> 1042;
1046 -> 1042;
1047 -> 1045;
1047 -> 1046;
1048 -> 1046;
1049 -> 1047;
1049 -> 1048;
1049 -> 1037;
1049 -> 1046;
1050 -> 1049;
1050 -> 1046;
1051 -> 1050;
1051 -> 1042;
1052 -> 1044;
1052 -> 1042;
1053 -> 1043;
1053 -> 1052;
1053 -> 1049;
1053 -> 1037;
1053 -> 1042;
1054 -> 1042;
1055 -> 1045;
1055 -> 1054;
1056 -> 1055;
1056 -> 1053;
1056 -> 1054;
1057 -> 1042;
1058 -> 1056;
1058 -> 1051;
1058 -> 1042;
1059 -> 868;
1059 -> 869;
1060 -> 868;
1060 -> 869;
1061 -> 868;
1061 -> 869;
1062 -> 1060;
1062 -> 869;
1063 -> 1059;
1063 -> 869;
1064 -> 869;
1065 -> 869;
1066 -> 1063;
1066 -> 1065;
1067 -> 1064;
1067 -> 1065;
1068 -> 1061;
1068 -> 1065;
1069 -> 1067;
1069 -> 1065;
1070 -> 1066;
1070 -> 1065;
1071 -> 1065;
1072 -> 1070;
1072 -> 1071;
1073 -> 1068;
1073 -> 1071;
1074 -> 1072;
1074 -> 1071;
1075 -> 1071;
1076 -> 1074;
1076 -> 1075;
1077 -> 1073;
1077 -> 1075;
1078 -> 1075;
1079 -> 1076;
1079 -> 1078;
1079 -> 1075;
1080 -> 1075;
1081 -> 1080;
1082 -> 1076;
1082 -> 1075;
1083 -> 1071;
1084 -> 1083;
1085 -> 1065;
1086 -> 1065;
1087 -> 1058;
1087 -> 1065;
1088 -> 1065;
1089 -> 1087;
1089 -> 1088;
1089 -> 1065;
1090 -> 1086;
1090 -> 1065;
1091 -> 1087;
1091 -> 1090;
1091 -> 1058;
1091 -> 1065;
1092 -> 1091;
1093 -> 868;
1093 -> 869;
1094 -> 868;
1094 -> 869;
1095 -> 869;
1096 -> 1093;
1096 -> 1095;
1097 -> 1095;
1098 -> 1096;
1098 -> 1092;
1098 -> 1097;
1099 -> 1097;
1100 -> 1098;
1100 -> 869;
1101 -> 1094;
1101 -> 869;
1102 -> 1100;
1102 -> 1101;
1102 -> 869;
1103 -> 869;
1104 -> 1102;
1105 -> 1102;
1105 -> 906;
1105 -> 869;
1106 -> 868;
1106 -> 869;
1107 -> 868;
1107 -> 869;
1108 -> 1106;
1108 -> 869;
1109 -> 1108;
1109 -> 1102;
1109 -> 869;
1110 -> 1106;
1110 -> 1109;
1110 -> 869;
1111 -> 869;
1112 -> 1107;
1112 -> 1111;
1113 -> 1111;
1114 -> 1112;
1114 -> 1113;
1115 -> 1113;
1116 -> 1115;
1117 -> 1114;
1117 -> 1109;
1117 -> 1116;
1118 -> 1114;
1118 -> 1109;
1118 -> 1116;
1119 -> 1118;
1119 -> 1115;
1120 -> 1114;
1120 -> 1109;
1120 -> 1115;
1121 -> 1111;
1122 -> 1120;
1122 -> 869;
1123 -> 869;
1124 -> 1107;
1124 -> 1123;
1125 -> 1124;
1125 -> 1120;
1125 -> 1123;
1126 -> 1125;
1127 -> 1126;
1127 -> 1125;
1128 -> 1125;
1129 -> 1127;
1129 -> 1128;
1129 -> 1125;
1130 -> 1129;
1130 -> 1125;
1131 -> 1130;
1131 -> 1124;
1131 -> 1125;
1132 -> 1124;
1132 -> 1129;
1132 -> 1131;
1132 -> 1123;
1133 -> 1132;
1133 -> 869;
1134 -> 1133;
1135 -> 1106;
1135 -> 1134;
1135 -> 869;
1136 -> 1134;
1136 -> 1115;
1137 -> 1134;
1137 -> 869;
1138 -> 889;
1138 -> 1134;
1138 -> 869;
1139 -> 879;
1139 -> 1134;
1139 -> 869;
1140 -> 833;
1140 -> 832;
1141 -> 1140;
1142 -> 1141;
1142 -> 837;
1142 -> 1140;
1143 -> 1140;
1144 -> 1143;
1144 -> 837;
1144 -> 1140;
1145 -> 837;
1145 -> 1134;
1145 -> 1142;
1145 -> 1144;
1145 -> 832;
1146 -> 832;
1147 -> 835;
1147 -> 1146;
1147 -> 832;
1148 -> 833;
1148 -> 832;
1149 -> 834;
1149 -> 832;
1150 -> 836;
1150 -> 832;
1151 -> 832;
1152 -> 1148;
1152 -> 1151;
1153 -> 1149;
1153 -> 1151;
1154 -> 1150;
1154 -> 1151;
1155 -> 837;
1155 -> 1151;
1156 -> 1151;
1157 -> 1152;
1157 -> 1156;
1157 -> 1151;
1158 -> 1155;
1158 -> 1145;
1158 -> 1151;
1159 -> 1158;
1160 -> 1155;
1160 -> 1158;
1161 -> 1159;
1161 -> 1158;
1162 -> 1154;
1162 -> 1158;
1163 -> 1158;
1164 -> 1158;
1165 -> 1160;
1165 -> 1164;
1166 -> 1161;
1166 -> 1164;
1167 -> 1162;
1167 -> 1164;
1168 -> 1163;
1168 -> 1164;
1169 -> 1163;
1169 -> 1164;
1170 -> 1164;
1171 -> 1165;
1171 -> 1164;
1172 -> 1168;
1172 -> 1164;
1173 -> 1169;
1173 -> 1164;
1174 -> 1170;
1174 -> 1164;
1175 -> 1167;
1175 -> 1164;
1176 -> 1164;
1177 -> 1164;
1178 -> 1171;
1178 -> 1177;
1179 -> 1172;
1179 -> 1177;
1180 -> 1173;
1180 -> 1177;
1181 -> 1174;
1181 -> 1177;
1182 -> 1175;
1182 -> 1177;
1183 -> 1176;
1183 -> 1177;
1184 -> 1177;
1185 -> 1184;
1185 -> 1177;
1186 -> 1184;
1186 -> 1177;
1187 -> 1184;
1187 -> 1177;
1188 -> 1184;
1188 -> 1177;
1189 -> 1184;
1189 -> 1177;
1190 -> 1184;
1190 -> 1177;
1191 -> 1178;
1191 -> 1184;
1191 -> 1177;
1192 -> 1179;
1192 -> 1184;
1192 -> 1177;
1193 -> 1180;
1193 -> 1184;
1193 -> 1177;
1194 -> 1181;
1194 -> 1184;
1194 -> 1177;
1195 -> 1182;
1195 -> 1184;
1195 -> 1177;
1196 -> 0;
1196 -> 1177;
1197 -> 1196;
1197 -> 1184;
1197 -> 1177;
1198 -> 1177;
1199 -> 1184;
1199 -> 1198;
1200 -> 1198;
1201 -> 1199;
1201 -> 1184;
1201 -> 1186;
1201 -> 1192;
1201 -> 1200;
1201 -> 1198;
1202 -> 1198;
1203 -> 1199;
1203 -> 1184;
1203 -> 1185;
1203 -> 1191;
1203 -> 1202;
1204 -> 1203;
1204 -> 1184;
1204 -> 1196;
1204 -> 1202;
1205 -> 1201;
1205 -> 1204;
1205 -> 1184;
1205 -> 1196;
1205 -> 1198;
1206 -> 1205;
1206 -> 1177;
1207 -> 1206;
1208 -> 1207;
1208 -> 1184;
1208 -> 1206;
1209 -> 1164;
1210 -> 1165;
1210 -> 1209;
1211 -> 1210;
1211 -> 1196;
1211 -> 1209;
1212 -> 1210;
1212 -> 1196;
1212 -> 1209;
1213 -> 1212;
1213 -> 1209;
1214 -> 1210;
1214 -> 1196;
1214 -> 1209;
1215 -> 1214;
1215 -> 1164;
1216 -> 1215;
1216 -> 1176;
1216 -> 1214;
1216 -> 1184;
1216 -> 1185;
1216 -> 1191;
1216 -> 1186;
1216 -> 1192;
1216 -> 1187;
1216 -> 1193;
1216 -> 1188;
1216 -> 1194;
1216 -> 1189;
1216 -> 1197;
1216 -> 1190;
1216 -> 1208;
1216 -> 1195;
1216 -> 1163;
1216 -> 1170;
1216 -> 829;
1216 -> 1207;
1216 -> 1164;
1217 -> 1164;
1218 -> 1216;
1218 -> 1217;
1219 -> 1216;
1219 -> 1217;
1220 -> 1219;
1220 -> 1216;
1220 -> 1217;
1221 -> 1218;
1221 -> 1217;
1222 -> 1218;
1222 -> 1217;
1223 -> 1217;
1224 -> 1222;
1224 -> 1223;
1225 -> 1219;
1225 -> 1223;
1226 -> 1224;
1226 -> 1220;
1226 -> 0;
1226 -> 1223;
1227 -> 1223;
1228 -> 1224;
1228 -> 1220;
1228 -> 0;
1228 -> 1223;
1229 -> 1224;
1229 -> 1220;
1229 -> 0;
1229 -> 1228;
1230 -> 1224;
1230 -> 1220;
1230 -> 0;
1230 -> 1223;
1231 -> 1224;
1231 -> 1220;
1231 -> 0;
1231 -> 1223;
1232 -> 1224;
1232 -> 1220;
1232 -> 0;
1232 -> 1223;
1233 -> 1224;
1233 -> 1220;
1233 -> 0;
1233 -> 1223;
1234 -> 1224;
1234 -> 1220;
1234 -> 0;
1234 -> 1223;
1235 -> 1223;
1236 -> 1224;
1236 -> 1223;
1237 -> 1235;
1237 -> 1223;
1238 -> 1225;
1238 -> 1220;
1238 -> 1236;
1238 -> 1237;
1238 -> 1223;
1239 -> 1223;
1240 -> 1224;
1240 -> 1223;
1241 -> 1239;
1241 -> 1223;
1242 -> 1223;
1243 -> 1240;
1243 -> 1242;
1244 -> 1241;
1244 -> 1242;
1245 -> 1225;
1245 -> 1242;
1246 -> 1242;
1247 -> 1243;
1247 -> 1238;
1247 -> 1242;
1248 -> 1242;
1249 -> 1248;
1249 -> 1223;
1250 -> 1249;
1250 -> 1223;
1251 -> 1224;
1251 -> 1247;
1251 -> 0;
1251 -> 1250;
1252 -> 0;
1252 -> 1251;
1253 -> 1224;
1253 -> 1247;
1253 -> 0;
1253 -> 1223;
1254 -> 1253;
1254 -> 1223;
1255 -> 1252;
1255 -> 1254;
1256 -> 1255;
1256 -> 0;
1256 -> 1217;
1257 -> 1255;
1257 -> 1217;
1258 -> 1217;
1259 -> 1257;
1259 -> 1258;
1260 -> 1259;
1260 -> 1258;
1261 -> 1260;
1262 -> 1217;
1263 -> 1262;
1263 -> 1218;
1263 -> 1255;
1263 -> 1217;
1264 -> 1218;
1264 -> 1255;
1264 -> 1262;
1264 -> 1263;
1265 -> 1263;
1266 -> 1264;
1266 -> 1263;
1267 -> 1265;
1267 -> 1263;
1268 -> 1263;
1269 -> 1266;
1269 -> 1268;
1270 -> 1267;
1270 -> 1268;
1271 -> 1219;
1271 -> 1268;
1272 -> 1268;
1273 -> 1268;
1273 -> 1263;
1274 -> 1263;
1275 -> 1274;
1275 -> 1263;
1276 -> 1272;
1276 -> 1275;
1277 -> 1263;
1278 -> 1276;
1278 -> 1277;
1278 -> 1263;
1279 -> 1278;
1279 -> 1273;
1279 -> 1263;
1280 -> 1273;
1280 -> 1263;
1281 -> 1261;
1281 -> 1280;
1282 -> 1261;
1282 -> 1217;
1283 -> 1217;
1284 -> 1218;
1284 -> 1269;
1284 -> 1283;
1284 -> 1217;
1285 -> 1284;
1285 -> 1217;
1286 -> 1217;
1287 -> 1285;
1287 -> 1286;
1288 -> 1219;
1288 -> 1286;
1289 -> 1287;
1289 -> 1284;
1289 -> 0;
1289 -> 1286;
1290 -> 1286;
1291 -> 1287;
1291 -> 1284;
1291 -> 0;
1291 -> 1286;
1292 -> 1287;
1292 -> 1284;
1292 -> 0;
1292 -> 1291;
1293 -> 1287;
1293 -> 1284;
1293 -> 0;
1293 -> 1286;
1294 -> 1287;
1294 -> 1284;
1294 -> 0;
1294 -> 1286;
1295 -> 1287;
1295 -> 1284;
1295 -> 0;
1295 -> 1286;
1296 -> 1287;
1296 -> 1284;
1296 -> 0;
1296 -> 1286;
1297 -> 1287;
1297 -> 1284;
1297 -> 0;
1297 -> 1286;
1298 -> 1286;
1299 -> 1298;
1299 -> 1286;
1300 -> 1286;
1301 -> 1300;
1301 -> 1286;
1302 -> 1286;
1303 -> 1301;
1303 -> 1302;
1304 -> 1288;
1304 -> 1302;
1305 -> 1302;
1306 -> 1302;
1307 -> 1306;
1307 -> 1286;
1308 -> 1307;
1308 -> 1286;
1309 -> 1287;
1310 -> 1287;
1311 -> 1309;
1311 -> 1310;
1312 -> 1288;
1312 -> 1310;
1313 -> 1311;
1313 -> 1287;
1313 -> 0;
1313 -> 1310;
1314 -> 1311;
1314 -> 1287;
1314 -> 1310;
1315 -> 1310;
1316 -> 1314;
1316 -> 1315;
1316 -> 1310;
1317 -> 1314;
1317 -> 1310;
1318 -> 1310;
1319 -> 1317;
1319 -> 1318;
1320 -> 1312;
1320 -> 1318;
1321 -> 1319;
1321 -> 1287;
1321 -> 0;
1321 -> 1318;
1322 -> 1318;
1323 -> 1319;
1323 -> 1287;
1323 -> 0;
1323 -> 1318;
1324 -> 1319;
1324 -> 1287;
1324 -> 0;
1324 -> 1323;
1325 -> 1319;
1325 -> 1287;
1325 -> 0;
1325 -> 1318;
1326 -> 1319;
1326 -> 1287;
1326 -> 0;
1326 -> 1318;
1327 -> 1319;
1327 -> 1287;
1327 -> 0;
1327 -> 1318;
1328 -> 1319;
1328 -> 1287;
1328 -> 0;
1328 -> 1318;
1329 -> 1319;
1329 -> 1287;
1329 -> 0;
1329 -> 1318;
1330 -> 1320;
1330 -> 1287;
1330 -> 1319;
1330 -> 1318;
1331 -> 1330;
1332 -> 1287;
1333 -> 1331;
1333 -> 1332;
1334 -> 1333;
1334 -> 1332;
1335 -> 1334;
1336 -> 1217;
1337 -> 1335;
1337 -> 1336;
1338 -> 1218;
1338 -> 1330;
1338 -> 1217;
1339 -> 1217;
1340 -> 1338;
1340 -> 1339;
1341 -> 1338;
1341 -> 1339;
1342 -> 1341;
1342 -> 1338;
1342 -> 1339;
1343 -> 1340;
1343 -> 1339;
1344 -> 1339;
1345 -> 1343;
1345 -> 1344;
1346 -> 1341;
1346 -> 1344;
1347 -> 1345;
1347 -> 1342;
1347 -> 0;
1347 -> 1344;
1348 -> 1347;
1349 -> 1340;
1349 -> 1339;
1350 -> 1339;
1351 -> 1349;
1351 -> 1350;
1352 -> 1341;
1352 -> 1350;
1353 -> 1351;
1353 -> 1342;
1353 -> 0;
1353 -> 1350;
1354 -> 1350;
1355 -> 1351;
1355 -> 1342;
1355 -> 0;
1355 -> 1350;
1356 -> 1351;
1356 -> 1342;
1356 -> 1355;
1357 -> 1355;
1358 -> 1356;
1358 -> 1357;
1359 -> 1358;
1359 -> 1342;
1359 -> 0;
1359 -> 1357;
1360 -> 1357;
1361 -> 1358;
1361 -> 1342;
1361 -> 0;
1362 -> 1358;
1362 -> 1342;
1362 -> 0;
1362 -> 1357;
1363 -> 1358;
1363 -> 1342;
1363 -> 0;
1363 -> 1357;
1364 -> 1358;
1364 -> 1342;
1364 -> 0;
1364 -> 1357;
1365 -> 1358;
1365 -> 1342;
1365 -> 0;
1365 -> 1357;
1366 -> 1358;
1366 -> 1342;
1366 -> 0;
1366 -> 1357;
1367 -> 1358;
1368 -> 1339;
1369 -> 1367;
1369 -> 1368;
1370 -> 1369;
1370 -> 1368;
1371 -> 1370;
1372 -> 1339;
1373 -> 1341;
1373 -> 1372;
1374 -> 1372;
1375 -> 1373;
1375 -> 1358;
1375 -> 1374;
1375 -> 1372;
1376 -> 1372;
1377 -> 1373;
1377 -> 1358;
1377 -> 1376;
1378 -> 1375;
1378 -> 1339;
1379 -> 1340;
1379 -> 1378;
1380 -> 1378;
1381 -> 1379;
1381 -> 1380;
1382 -> 1341;
1382 -> 1380;
1383 -> 1381;
1383 -> 1358;
1383 -> 1380;
1384 -> 1383;
1385 -> 1382;
1385 -> 1383;
1386 -> 1378;
1387 -> 1164;
1388 -> 1176;
1388 -> 1387;
1389 -> 1388;
1389 -> 1385;
1389 -> 1387;
1390 -> 1387;
1391 -> 1389;
1391 -> 1390;
1391 -> 1387;
1392 -> 1387;
1393 -> 1389;
1393 -> 1392;
1393 -> 1385;
1393 -> 1387;
1394 -> 1393;
1395 -> 1164;
1396 -> 1170;
1396 -> 1164;
1397 -> 1396;
1397 -> 1394;
1397 -> 1164;
1398 -> 1155;
1398 -> 1394;
1398 -> 1158;
1399 -> 1159;
1399 -> 1158;
1400 -> 1398;
1400 -> 1399;
1400 -> 1394;
1400 -> 1158;
1401 -> 1155;
1401 -> 1400;
1401 -> 1151;
1402 -> 1155;
1402 -> 1400;
1402 -> 1151;
1403 -> 1145;
1403 -> 832;
1404 -> 1403;
1404 -> 1400;
1404 -> 832;
1405 -> 1402;
1405 -> 832;
1406 -> 811;
1407 -> 776;
1407 -> 1405;
1407 -> 1406;
1407 -> 811;
1408 -> 775;
1408 -> 1405;
1408 -> 771;
1409 -> 772;
1409 -> 0;
1409 -> 771;
1410 -> 774;
1410 -> 771;
1411 -> 777;
1411 -> 771;
1412 -> 775;
1412 -> 771;
1413 -> 1410;
1413 -> 1411;
1413 -> 1412;
1413 -> 776;
1413 -> 766;
1413 -> 1408;
1413 -> 771;
1414 -> 771;
1415 -> 761;
1416 -> 766;
1416 -> 1413;
1416 -> 761;
1417 -> 755;
1417 -> 433;
1418 -> 757;
1418 -> 1416;
1418 -> 1417;
1418 -> 760;
1418 -> 754;
1418 -> 746;
1418 -> 433;
1419 -> 755;
1419 -> 433;
1420 -> 747;
1420 -> 433;
1421 -> 749;
1421 -> 433;
1422 -> 748;
1422 -> 750;
1422 -> 1421;
1423 -> 1421;
1424 -> 754;
1424 -> 1421;
1425 -> 1420;
1425 -> 1421;
1426 -> 748;
1426 -> 1421;
1427 -> 750;
1427 -> 1421;
1428 -> 1418;
1428 -> 1421;
1429 -> 1423;
1429 -> 1421;
1430 -> 752;
1430 -> 1421;
1431 -> 753;
1431 -> 1421;
1432 -> 1421;
1433 -> 1424;
1433 -> 1432;
1434 -> 1425;
1434 -> 1432;
1435 -> 1426;
1435 -> 1432;
1436 -> 1427;
1436 -> 1432;
1437 -> 1428;
1437 -> 1432;
1438 -> 1429;
1438 -> 1432;
1439 -> 1430;
1439 -> 1432;
1440 -> 1431;
1440 -> 1432;
1441 -> 1432;
1442 -> 1433;
1442 -> 1441;
1442 -> 1432;
1443 -> 1432;
1444 -> 1438;
1444 -> 1443;
1444 -> 1432;
1445 -> 1432;
1446 -> 1433;
1446 -> 1445;
1447 -> 1446;
1447 -> 1418;
1447 -> 1445;
1448 -> 1447;
1448 -> 1432;
1449 -> 1432;
1450 -> 1432;
1451 -> 1439;
1451 -> 1432;
1452 -> 1433;
1452 -> 1451;
1453 -> 1434;
1453 -> 1451;
1454 -> 1437;
1454 -> 1451;
1455 -> 1438;
1455 -> 1451;
1456 -> 1440;
1456 -> 1451;
1457 -> 1451;
1458 -> 1452;
1458 -> 1457;
1459 -> 1453;
1459 -> 1457;
1460 -> 1454;
1460 -> 1457;
1461 -> 1455;
1461 -> 1457;
1462 -> 1456;
1462 -> 1457;
1463 -> 1462;
1463 -> 1457;
1464 -> 1457;
1465 -> 1463;
1465 -> 1464;
1466 -> 1458;
1466 -> 1464;
1467 -> 1464;
1468 -> 1466;
1468 -> 1418;
1468 -> 1467;
1468 -> 1464;
1469 -> 1468;
1470 -> 1466;
1470 -> 1468;
1471 -> 1468;
1472 -> 1470;
1472 -> 1471;
1473 -> 1468;
1474 -> 1473;
1474 -> 1470;
1475 -> 1474;
1475 -> 1468;
1476 -> 1475;
1477 -> 1475;
1478 -> 1477;
1478 -> 1475;
1479 -> 1475;
1480 -> 1476;
1480 -> 1475;
1481 -> 1480;
1482 -> 1481;
1482 -> 1480;
1483 -> 1470;
1483 -> 1480;
1484 -> 1465;
1484 -> 1480;
1485 -> 1481;
1485 -> 1480;
1486 -> 1480;
1487 -> 1483;
1487 -> 1486;
1488 -> 1484;
1488 -> 1486;
1489 -> 1485;
1489 -> 1486;
1490 -> 1466;
1490 -> 1486;
1491 -> 1486;
1492 -> 1486;
1493 -> 1486;
1494 -> 1486;
1495 -> 1490;
1495 -> 1494;
1496 -> 1495;
1496 -> 1486;
1497 -> 1486;
1498 -> 1490;
1498 -> 1497;
1499 -> 1498;
1499 -> 1497;
1500 -> 1498;
1500 -> 1486;
1501 -> 1486;
1502 -> 1490;
1502 -> 1501;
1503 -> 1502;
1503 -> 1498;
1503 -> 1501;
1504 -> 1501;
1505 -> 1503;
1505 -> 1504;
1506 -> 1505;
1506 -> 1503;
1506 -> 1504;
1507 -> 1504;
1508 -> 1506;
1508 -> 1507;
1509 -> 1507;
1510 -> 1508;
1510 -> 1509;
1511 -> 1510;
1511 -> 1509;
1512 -> 1510;
1512 -> 1507;
1513 -> 1506;
1513 -> 1507;
1514 -> 1507;
1515 -> 1513;
1515 -> 1514;
1516 -> 1515;
1516 -> 1512;
1516 -> 1514;
1517 -> 1516;
1517 -> 1507;
1518 -> 1517;
1518 -> 1486;
1519 -> 1486;
1520 -> 1496;
1520 -> 1519;
1520 -> 1486;
1521 -> 1520;
1522 -> 1492;
1522 -> 1520;
1523 -> 0;
1523 -> 1520;
1524 -> 1488;
1524 -> 1520;
1525 -> 1520;
1526 -> 1523;
1526 -> 1525;
1527 -> 1523;
1527 -> 1525;
1528 -> 1524;
1528 -> 1525;
1529 -> 1490;
1529 -> 1525;
1530 -> 1525;
1531 -> 1526;
1531 -> 1530;
1531 -> 1525;
1532 -> 1527;
1532 -> 0;
1532 -> 1525;
1533 -> 1529;
1533 -> 1525;
1534 -> 1527;
1534 -> 1525;
1535 -> 1526;
1535 -> 1525;
1536 -> 1528;
1536 -> 1525;
1537 -> 1525;
1538 -> 1525;
1539 -> 1533;
1539 -> 1538;
1540 -> 1534;
1540 -> 1538;
1541 -> 1535;
1541 -> 1538;
1542 -> 1536;
1542 -> 1538;
1543 -> 1537;
1543 -> 1538;
1544 -> 1539;
1544 -> 1538;
1545 -> 1540;
1545 -> 1538;
1546 -> 1542;
1546 -> 1538;
1547 -> 1538;
1548 -> 1544;
1548 -> 1547;
1549 -> 1545;
1549 -> 1547;
1550 -> 1546;
1550 -> 1547;
1551 -> 1543;
1551 -> 1547;
1552 -> 1551;
1552 -> 1547;
1553 -> 1551;
1553 -> 1547;
1554 -> 1551;
1554 -> 1547;
1555 -> 1551;
1555 -> 1547;
1556 -> 1551;
1556 -> 1547;
1557 -> 1547;
1558 -> 1557;
1558 -> 1551;
1558 -> 1547;
1559 -> 1548;
1559 -> 1551;
1559 -> 1547;
1560 -> 1549;
1560 -> 0;
1560 -> 1547;
1561 -> 1560;
1561 -> 1551;
1561 -> 1547;
1562 -> 1549;
1562 -> 0;
1562 -> 1547;
1563 -> 1562;
1563 -> 1551;
1563 -> 1547;
1564 -> 1549;
1564 -> 0;
1564 -> 1547;
1565 -> 1564;
1565 -> 1551;
1565 -> 1547;
1566 -> 1550;
1566 -> 1551;
1566 -> 1547;
1567 -> 1543;
1567 -> 1538;
1568 -> 1541;
1568 -> 1543;
1568 -> 1538;
1569 -> 1525;
1570 -> 1537;
1570 -> 1569;
1571 -> 1569;
1572 -> 1569;
1573 -> 1572;
1573 -> 1569;
1574 -> 1569;
1575 -> 1570;
1575 -> 1559;
1575 -> 1574;
1576 -> 1575;
1576 -> 1517;
1576 -> 1574;
1577 -> 1576;
1577 -> 1569;
1578 -> 1571;
1578 -> 1569;
1579 -> 1569;
1580 -> 1573;
1580 -> 1579;
1581 -> 1577;
1581 -> 1579;
1582 -> 1578;
1582 -> 1579;
1583 -> 1570;
1583 -> 1579;
1584 -> 1581;
1584 -> 1576;
1584 -> 0;
1584 -> 1579;
1585 -> 1583;
1585 -> 1561;
1585 -> 1584;
1586 -> 1581;
1586 -> 1579;
1587 -> 1580;
1587 -> 1586;
1587 -> 1572;
1587 -> 1576;
1587 -> 1579;
1588 -> 1581;
1588 -> 1587;
1588 -> 1579;
1589 -> 1588;
1590 -> 1583;
1590 -> 1565;
1590 -> 1589;
1591 -> 1580;
1591 -> 1590;
1592 -> 1589;
1592 -> 1590;
1593 -> 1582;
1593 -> 1590;
1594 -> 1590;
1595 -> 1591;
1595 -> 1594;
1596 -> 1592;
1596 -> 1594;
1597 -> 1593;
1597 -> 1594;
1598 -> 1596;
1598 -> 1587;
1598 -> 0;
1598 -> 1594;
1599 -> 1594;
1599 -> 1563;
1599 -> 1598;
1600 -> 1594;
1600 -> 1565;
1600 -> 1598;
1601 -> 1596;
1601 -> 1600;
1602 -> 1601;
1602 -> 1600;
1603 -> 1600;
1604 -> 1602;
1604 -> 1603;
1605 -> 1594;
1605 -> 1603;
1606 -> 1604;
1606 -> 1587;
1606 -> 1603;
1607 -> 1605;
1607 -> 1568;
1607 -> 1606;
1608 -> 1607;
1609 -> 1595;
1609 -> 1608;
1610 -> 1601;
1610 -> 1608;
1611 -> 1597;
1611 -> 1608;
1612 -> 1608;
1613 -> 1609;
1613 -> 1612;
1614 -> 1610;
1614 -> 1612;
1615 -> 1611;
1615 -> 1612;
1616 -> 1594;
1616 -> 1612;
1617 -> 1616;
1617 -> 1566;
1617 -> 746;
1617 -> 1607;
1617 -> 1612;
1618 -> 1614;
1618 -> 1612;
1619 -> 1613;
1619 -> 1618;
1619 -> 1617;
1619 -> 1612;
1620 -> 1613;
1620 -> 1612;
1621 -> 1612;
1622 -> 1620;
1622 -> 1621;
1623 -> 1616;
1623 -> 1621;
1624 -> 1621;
1625 -> 1622;
1625 -> 1619;
1625 -> 1624;
1625 -> 1621;
1626 -> 1621;
1627 -> 1622;
1627 -> 1619;
1627 -> 1626;
1627 -> 1621;
1628 -> 1621;
1629 -> 1627;
1629 -> 1628;
1630 -> 1623;
1630 -> 1628;
1631 -> 1629;
1631 -> 1628;
1632 -> 1628;
1633 -> 1632;
1633 -> 1628;
1634 -> 1630;
1634 -> 1558;
1634 -> 1631;
1634 -> 1633;
1634 -> 1557;
1634 -> 1627;
1634 -> 1628;
1635 -> 1634;
1636 -> 1635;
1636 -> 1628;
1637 -> 1621;
1638 -> 1636;
1638 -> 1637;
1638 -> 1621;
1639 -> 1621;
1640 -> 1623;
1640 -> 1559;
1640 -> 1639;
1641 -> 1640;
1641 -> 1634;
1641 -> 1639;
1642 -> 1640;
1642 -> 1634;
1642 -> 1639;
1643 -> 1642;
1643 -> 1621;
1644 -> 1621;
1645 -> 1644;
1645 -> 1622;
1645 -> 1634;
1645 -> 1621;
1646 -> 1643;
1646 -> 1645;
1647 -> 1622;
1647 -> 1644;
1647 -> 1634;
1647 -> 1645;
1648 -> 1645;
1649 -> 1646;
1649 -> 1648;
1650 -> 1647;
1650 -> 1648;
1651 -> 1623;
1651 -> 1648;
1652 -> 1648;
1653 -> 1649;
1653 -> 1652;
1653 -> 1648;
1654 -> 1650;
1654 -> 1647;
1654 -> 0;
1654 -> 1648;
1655 -> 1650;
1655 -> 1647;
1655 -> 1654;
1656 -> 1649;
1656 -> 1655;
1656 -> 1647;
1656 -> 1654;
1657 -> 1654;
1658 -> 1656;
1658 -> 1657;
1659 -> 1651;
1659 -> 1657;
1660 -> 1658;
1660 -> 1657;
1661 -> 1660;
1662 -> 1660;
1663 -> 1661;
1663 -> 1662;
1663 -> 1660;
1664 -> 1660;
1665 -> 1660;
1666 -> 1664;
1666 -> 1665;
1666 -> 1660;
1667 -> 1660;
1668 -> 1667;
1668 -> 1660;
1669 -> 1667;
1669 -> 1656;
1669 -> 1659;
1669 -> 1668;
1670 -> 1654;
1671 -> 1650;
1671 -> 1648;
1672 -> 1648;
1673 -> 1671;
1673 -> 1672;
1674 -> 1651;
1674 -> 1672;
1675 -> 1674;
1675 -> 1669;
1675 -> 1673;
1675 -> 1672;
1675 -> 1656;
1676 -> 1675;
1677 -> 1676;
1677 -> 1672;
1678 -> 1677;
1678 -> 1621;
1679 -> 1612;
1680 -> 1678;
1680 -> 1679;
1680 -> 1612;
1682 -> 1681;
1683 -> 1681;
1684 -> 1678;
1684 -> 1675;
1684 -> 1680;
1685 -> 1680;
1686 -> 1684;
1686 -> 1685;
1687 -> 1684;
1687 -> 1685;
1688 -> 1684;
1688 -> 1685;
1689 -> 1685;
1690 -> 1686;
1690 -> 1687;
1690 -> 1685;
1691 -> 1686;
1691 -> 1684;
1691 -> 1685;
1692 -> 1687;
1692 -> 1691;
1692 -> 1685;
1693 -> 1685;
1694 -> 1686;
1694 -> 1692;
1694 -> 1687;
1694 -> 1685;
1695 -> 1691;
1695 -> 1685;
1696 -> 1692;
1696 -> 1685;
1697 -> 1685;
1698 -> 1696;
1698 -> 1697;
1698 -> 1685;
1699 -> 1696;
1699 -> 1698;
1700 -> 1686;
1700 -> 1699;
1700 -> 1687;
1700 -> 1685;
1701 -> 1699;
1702 -> 1699;
1703 -> 1701;
1703 -> 1702;
1704 -> 1616;
1704 -> 1702;
1705 -> 1704;
1705 -> 1568;
1705 -> 1703;
1705 -> 1702;
1706 -> 1699;
1706 -> 1705;
1707 -> 1615;
1707 -> 1706;
1707 -> 1571;
1707 -> 1701;
1707 -> 1705;
1708 -> 1612;
1709 -> 1613;
1709 -> 1707;
1709 -> 1708;
1709 -> 1612;
1710 -> 1608;
1711 -> 1594;
1712 -> 1595;
1712 -> 1709;
1712 -> 1711;
1712 -> 1594;
1713 -> 1590;
1714 -> 1579;
1715 -> 1569;
1716 -> 1572;
1716 -> 1712;
1716 -> 1569;
1717 -> 1570;
1717 -> 1669;
1717 -> 1716;
1717 -> 1569;
1718 -> 1571;
1718 -> 1569;
1719 -> 1718;
1719 -> 1525;
1720 -> 1719;
1720 -> 1520;
1721 -> 1520;
1722 -> 1522;
1722 -> 1721;
1723 -> 1720;
1723 -> 1721;
1724 -> 1723;
1724 -> 1721;
1725 -> 1724;
1725 -> 1717;
1725 -> 1721;
1726 -> 1725;
1727 -> 1726;
1728 -> 1722;
1728 -> 1727;
1728 -> 1492;
1728 -> 1717;
1728 -> 1726;
1729 -> 1520;
1730 -> 1518;
1730 -> 1487;
1730 -> 1520;
1731 -> 1486;
1732 -> 1486;
1733 -> 1486;
1734 -> 1492;
1734 -> 1486;
1735 -> 1734;
1735 -> 1728;
1735 -> 1486;
1736 -> 1735;
1737 -> 1735;
1738 -> 1736;
1738 -> 1735;
1739 -> 1735;
1740 -> 1737;
1740 -> 1739;
1741 -> 1738;
1741 -> 1739;
1742 -> 1490;
1742 -> 1739;
1743 -> 1740;
1743 -> 1728;
1743 -> 1739;
1744 -> 1740;
1744 -> 1728;
1744 -> 1739;
1745 -> 1739;
1746 -> 1744;
1746 -> 1728;
1746 -> 0;
1746 -> 1739;
1747 -> 1744;
1747 -> 1739;
1748 -> 1740;
1748 -> 1747;
1748 -> 0;
1748 -> 1739;
1749 -> 1739;
1750 -> 1740;
1750 -> 1747;
1750 -> 1749;
1750 -> 1739;
1751 -> 1750;
1752 -> 1751;
1752 -> 1750;
1753 -> 1745;
1753 -> 1751;
1753 -> 1750;
1754 -> 1752;
1754 -> 1735;
1755 -> 1735;
1755 -> 1754;
1756 -> 1752;
1756 -> 1754;
1757 -> 1736;
1757 -> 1754;
1758 -> 1754;
1759 -> 1755;
1759 -> 1758;
1760 -> 1756;
1760 -> 1758;
1761 -> 1757;
1761 -> 1758;
1762 -> 1490;
1762 -> 1758;
1763 -> 1760;
1763 -> 1758;
1764 -> 1759;
1764 -> 1747;
1764 -> 1758;
1765 -> 1758;
1766 -> 1765;
1766 -> 1754;
1767 -> 1735;
1767 -> 1747;
1767 -> 1766;
1768 -> 1736;
1768 -> 1767;
1769 -> 1491;
1769 -> 1768;
1769 -> 1736;
1769 -> 1767;
1770 -> 1735;
1770 -> 1767;
1771 -> 1733;
1771 -> 1770;
1771 -> 1747;
1771 -> 1767;
1772 -> 1736;
1772 -> 1769;
1772 -> 1754;
1773 -> 1486;
1774 -> 1733;
1774 -> 1771;
1774 -> 1773;
1774 -> 1486;
1775 -> 0;
1775 -> 1774;
1776 -> 1774;
1777 -> 1731;
1777 -> 1776;
1777 -> 1774;
1778 -> 1486;
1779 -> 1733;
1779 -> 1771;
1779 -> 1778;
1779 -> 1486;
1780 -> 1521;
1780 -> 1779;
1781 -> 1732;
1781 -> 1780;
1782 -> 1486;
1783 -> 1486;
1784 -> 1733;
1784 -> 1771;
1784 -> 1783;
1784 -> 1486;
1785 -> 1733;
1785 -> 1784;
1786 -> 1785;
1787 -> 1784;
1788 -> 1733;
1788 -> 1786;
1788 -> 1787;
1788 -> 1784;
1789 -> 1788;
1790 -> 1731;
1790 -> 1486;
1791 -> 1733;
1791 -> 1789;
1791 -> 1486;
1792 -> 1732;
1792 -> 1781;
1792 -> 1486;
1793 -> 1789;
1793 -> 1486;
1794 -> 1492;
1794 -> 1791;
1794 -> 1486;
1795 -> 1491;
1795 -> 1772;
1795 -> 1486;
1797 -> 0;
1799 -> 1796;
1799 -> 1798;
1800 -> 1797;
1800 -> 1798;
1801 -> 1798;
1802 -> 1801;
1802 -> 1798;
1803 -> 1799;
1803 -> 1801;
1803 -> 1798;
1804 -> 1800;
1804 -> 1801;
1804 -> 1798;
1805 -> 1798;
1806 -> 1793;
1806 -> 1480;
1807 -> 1795;
1807 -> 1480;
1808 -> 1480;
1809 -> 1480;
1810 -> 1806;
1810 -> 1809;
1811 -> 1807;
1811 -> 1809;
1812 -> 1808;
1812 -> 1809;
1813 -> 1812;
1813 -> 1809;
1814 -> 1810;
1814 -> 1812;
1814 -> 1809;
1815 -> 1811;
1815 -> 1812;
1815 -> 1809;
1816 -> 1475;
1817 -> 1816;
1817 -> 1794;
1818 -> 1817;
1818 -> 1475;
1819 -> 1475;
1820 -> 1466;
1820 -> 1794;
1820 -> 1468;
1821 -> 1808;
1821 -> 1468;
1822 -> 1468;
1823 -> 1820;
1823 -> 1821;
1823 -> 1822;
1823 -> 1814;
1823 -> 1815;
1823 -> 1794;
1823 -> 1795;
1823 -> 1468;
1824 -> 1466;
1824 -> 1823;
1824 -> 1464;
1825 -> 1824;
1825 -> 1823;
1825 -> 1457;
1826 -> 1824;
1826 -> 1823;
1826 -> 1457;
1827 -> 1461;
1827 -> 1826;
1827 -> 1423;
1827 -> 1823;
1827 -> 1457;
1828 -> 1824;
1828 -> 1827;
1828 -> 1457;
1829 -> 1457;
1830 -> 1828;
1830 -> 1829;
1830 -> 1457;
1831 -> 1828;
1831 -> 1457;
1832 -> 1457;
1833 -> 1831;
1833 -> 1832;
1833 -> 1457;
1834 -> 1828;
1834 -> 1827;
1834 -> 1833;
1835 -> 1834;
1835 -> 1833;
1836 -> 1458;
1836 -> 1833;
1837 -> 1833;
1838 -> 1835;
1838 -> 1837;
1839 -> 1457;
1840 -> 1831;
1840 -> 1839;
1840 -> 1457;
1841 -> 1828;
1841 -> 1457;
1842 -> 1433;
1842 -> 1432;
1843 -> 1434;
1843 -> 1432;
1844 -> 1435;
1844 -> 1432;
1845 -> 1436;
1845 -> 1432;
1846 -> 1437;
1846 -> 1432;
1847 -> 1438;
1847 -> 1432;
1848 -> 1439;
1848 -> 1432;
1849 -> 1841;
1849 -> 1432;
1850 -> 1440;
1850 -> 1432;
1851 -> 1432;
1852 -> 1432;
1853 -> 1842;
1853 -> 1852;
1854 -> 1843;
1854 -> 1852;
1855 -> 1844;
1855 -> 1852;
1856 -> 1845;
1856 -> 1852;
1857 -> 1846;
1857 -> 1852;
1858 -> 1847;
1858 -> 1852;
1859 -> 1848;
1859 -> 1852;
1860 -> 1849;
1860 -> 1852;
1861 -> 1850;
1861 -> 1852;
1862 -> 1851;
1862 -> 1852;
1863 -> 1852;
1864 -> 1863;
1864 -> 1852;
1865 -> 1863;
1865 -> 1852;
1866 -> 1863;
1866 -> 1852;
1867 -> 1863;
1867 -> 1852;
1868 -> 1863;
1868 -> 1852;
1869 -> 1863;
1869 -> 1852;
1870 -> 1863;
1870 -> 1852;
1871 -> 1863;
1871 -> 1852;
1872 -> 1863;
1872 -> 1852;
1873 -> 1863;
1873 -> 1852;
1874 -> 1863;
1874 -> 1852;
1875 -> 1852;
1876 -> 1853;
1876 -> 1875;
1876 -> 1852;
1877 -> 1852;
1878 -> 1858;
1878 -> 1877;
1878 -> 1852;
1879 -> 1853;
1879 -> 1863;
1879 -> 1852;
1880 -> 1854;
1880 -> 1863;
1880 -> 1852;
1881 -> 1855;
1881 -> 1863;
1881 -> 1852;
1882 -> 1861;
1882 -> 1863;
1882 -> 1852;
1883 -> 1858;
1883 -> 1863;
1883 -> 1852;
1884 -> 1859;
1884 -> 1863;
1884 -> 1852;
1885 -> 1860;
1885 -> 1863;
1885 -> 1852;
1886 -> 1857;
1886 -> 1863;
1886 -> 1852;
1887 -> 1857;
1887 -> 1852;
1888 -> 1852;
1889 -> 1887;
1889 -> 1888;
1890 -> 1863;
1890 -> 1888;
1891 -> 1889;
1891 -> 1888;
1892 -> 1852;
1893 -> 1855;
1893 -> 1856;
1893 -> 1852;
1894 -> 1856;
1894 -> 1863;
1894 -> 1852;
1895 -> 1432;
1896 -> 1433;
1896 -> 1895;
1897 -> 1896;
1897 -> 1835;
1897 -> 1895;
1898 -> 1897;
1898 -> 1432;
1899 -> 1898;
1900 -> 1899;
1900 -> 1851;
1900 -> 1898;
1901 -> 1432;
1902 -> 1433;
1902 -> 1901;
1903 -> 1901;
1904 -> 1902;
1904 -> 1903;
1905 -> 1903;
1906 -> 1904;
1906 -> 1905;
1907 -> 1905;
1908 -> 1906;
1908 -> 1907;
1909 -> 1908;
1909 -> 1835;
1909 -> 1907;
1910 -> 1908;
1910 -> 1835;
1910 -> 1907;
1911 -> 1910;
1911 -> 1905;
1912 -> 1906;
1912 -> 1835;
1912 -> 1905;
1913 -> 1901;
1914 -> 1912;
1914 -> 1432;
1915 -> 1432;
1916 -> 1914;
1916 -> 1915;
1917 -> 1851;
1917 -> 1915;
1918 -> 1916;
1918 -> 1912;
1918 -> 1915;
1919 -> 1917;
1919 -> 1918;
1920 -> 1918;
1921 -> 1919;
1921 -> 1920;
1921 -> 1918;
1921 -> 1863;
1921 -> 1864;
1921 -> 1879;
1921 -> 1865;
1921 -> 1881;
1921 -> 1866;
1921 -> 1894;
1921 -> 1867;
1921 -> 1883;
1921 -> 1868;
1921 -> 1886;
1921 -> 1869;
1921 -> 1880;
1921 -> 1870;
1921 -> 1884;
1921 -> 1871;
1921 -> 1872;
1921 -> 1885;
1921 -> 1873;
1921 -> 1900;
1921 -> 1874;
1921 -> 1882;
1921 -> 746;
1921 -> 1899;
1922 -> 1921;
1922 -> 1920;
1923 -> 1921;
1923 -> 1920;
1924 -> 1921;
1924 -> 1920;
1925 -> 1924;
1925 -> 1921;
1925 -> 1920;
1926 -> 1922;
1926 -> 1920;
1927 -> 1920;
1928 -> 1925;
1928 -> 1927;
1929 -> 1926;
1929 -> 1927;
1930 -> 1927;
1931 -> 1928;
1931 -> 1930;
1931 -> 1927;
1932 -> 1920;
1933 -> 1924;
1933 -> 1921;
1933 -> 1920;
1934 -> 1920;
1935 -> 1924;
1935 -> 1933;
1935 -> 1934;
1936 -> 1935;
1936 -> 1920;
1937 -> 1922;
1937 -> 1936;
1938 -> 1936;
1939 -> 1937;
1939 -> 1938;
1940 -> 1924;
1940 -> 1938;
1941 -> 1938;
1942 -> 1940;
1942 -> 1933;
1942 -> 1938;
1943 -> 1942;
1943 -> 1936;
1944 -> 1943;
1944 -> 1936;
1945 -> 1920;
1946 -> 1921;
1946 -> 1945;
1946 -> 1944;
1946 -> 1918;
1947 -> 1432;
1948 -> 1432;
1949 -> 1851;
1949 -> 1948;
1950 -> 1949;
1950 -> 1946;
1950 -> 1948;
1951 -> 1948;
1952 -> 1950;
1952 -> 1951;
1952 -> 1948;
1953 -> 1948;
1954 -> 1953;
1954 -> 1948;
1955 -> 1950;
1955 -> 1954;
1955 -> 1946;
1955 -> 1948;
1956 -> 1955;
1957 -> 1432;
1958 -> 1432;
1959 -> 1434;
1959 -> 1958;
1959 -> 1432;
1960 -> 1438;
1960 -> 1959;
1961 -> 1959;
1962 -> 1960;
1962 -> 1961;
1963 -> 1434;
1963 -> 1961;
1964 -> 1963;
1964 -> 1956;
1964 -> 1961;
1965 -> 1964;
1965 -> 1959;
1966 -> 1965;
1966 -> 1959;
1967 -> 1438;
1967 -> 1959;
1968 -> 1959;
1969 -> 1966;
1969 -> 1968;
1970 -> 1967;
1970 -> 1968;
1971 -> 1851;
1971 -> 1968;
1972 -> 1969;
1972 -> 1968;
1973 -> 1959;
1974 -> 1438;
1974 -> 1959;
1975 -> 1959;
1976 -> 1974;
1976 -> 1975;
1977 -> 1434;
1977 -> 1975;
1978 -> 1975;
1979 -> 1976;
1979 -> 1975;
1980 -> 1975;
1981 -> 1979;
1981 -> 1980;
1982 -> 1977;
1982 -> 1980;
1983 -> 1980;
1984 -> 1982;
1984 -> 1983;
1985 -> 1983;
1986 -> 1985;
1986 -> 1984;
1986 -> 1983;
1987 -> 1983;
1988 -> 1984;
1988 -> 1987;
1989 -> 1988;
1989 -> 1956;
1989 -> 1986;
1989 -> 1987;
1990 -> 1989;
1990 -> 1983;
1991 -> 1990;
1991 -> 1980;
1992 -> 1980;
1993 -> 1982;
1993 -> 1992;
1994 -> 1993;
1994 -> 1989;
1994 -> 1992;
1995 -> 1994;
1995 -> 1980;
1996 -> 1995;
1997 -> 1991;
1997 -> 1996;
1997 -> 1995;
1998 -> 1997;
1999 -> 1975;
2000 -> 1978;
2000 -> 1975;
2001 -> 1977;
2001 -> 1994;
2001 -> 1975;
2002 -> 2000;
2002 -> 2001;
2002 -> 1978;
2002 -> 1994;
2002 -> 1975;
2003 -> 1978;
2003 -> 1975;
2004 -> 1977;
2004 -> 2002;
2004 -> 1975;
2005 -> 1978;
2005 -> 1975;
2006 -> 1977;
2006 -> 2004;
2006 -> 1975;
2007 -> 1978;
2007 -> 1975;
2008 -> 1977;
2008 -> 2006;
2008 -> 1975;
2009 -> 1978;
2009 -> 1975;
2010 -> 1977;
2010 -> 2008;
2010 -> 1975;
2011 -> 1978;
2011 -> 1975;
2012 -> 1977;
2012 -> 2010;
2012 -> 1975;
2013 -> 1978;
2013 -> 1975;
2014 -> 1977;
2014 -> 2012;
2014 -> 1975;
2015 -> 1978;
2015 -> 1975;
2016 -> 1977;
2016 -> 2014;
2016 -> 1975;
2017 -> 1978;
2017 -> 2016;
2017 -> 1975;
2018 -> 2017;
2018 -> 1959;
2019 -> 2018;
2019 -> 1959;
2020 -> 1438;
2020 -> 1959;
2021 -> 1959;
2022 -> 2019;
2022 -> 2021;
2023 -> 2020;
2023 -> 2021;
2024 -> 1851;
2024 -> 2021;
2025 -> 2022;
2025 -> 2021;
2026 -> 1959;
2027 -> 1959;
2028 -> 1433;
2028 -> 2027;
2029 -> 2028;
2029 -> 2016;
2029 -> 2027;
2030 -> 2029;
2030 -> 1959;
2031 -> 1851;
2031 -> 1959;
2032 -> 1434;
2032 -> 1959;
2033 -> 1438;
2033 -> 1959;
2034 -> 1959;
2035 -> 2030;
2035 -> 2034;
2036 -> 0;
2036 -> 2034;
2037 -> 2030;
2037 -> 2036;
2037 -> 0;
2037 -> 1959;
2038 -> 2030;
2038 -> 2034;
2039 -> 2034;
2040 -> 2030;
2040 -> 2039;
2040 -> 2037;
2040 -> 1959;
2041 -> 1959;
2042 -> 1851;
2042 -> 2041;
2043 -> 2042;
2043 -> 2040;
2043 -> 2041;
2044 -> 2041;
2045 -> 2043;
2045 -> 2044;
2045 -> 2041;
2046 -> 2041;
2047 -> 2046;
2047 -> 2041;
2048 -> 1959;
2049 -> 1434;
2049 -> 2043;
2049 -> 1959;
2050 -> 1959;
2051 -> 2049;
2051 -> 2050;
2051 -> 1959;
2052 -> 1432;
2053 -> 1434;
2053 -> 2052;
2053 -> 1432;
2054 -> 1851;
2054 -> 2043;
2054 -> 1434;
2054 -> 1432;
2055 -> 1432;
2056 -> 1433;
2056 -> 2055;
2057 -> 2056;
2057 -> 2043;
2057 -> 2055;
2058 -> 2057;
2058 -> 1432;
2059 -> 1432;
2060 -> 1439;
2060 -> 2059;
2060 -> 1432;
2061 -> 1433;
2061 -> 2060;
2062 -> 1438;
2062 -> 2060;
2063 -> 1440;
2063 -> 2060;
2064 -> 2060;
2065 -> 2061;
2065 -> 2064;
2066 -> 2062;
2066 -> 2064;
2067 -> 2063;
2067 -> 2064;
2068 -> 2064;
2069 -> 2065;
2069 -> 2068;
2070 -> 2068;
2071 -> 2069;
2071 -> 2070;
2072 -> 2070;
2073 -> 2071;
2073 -> 2072;
2074 -> 2073;
2074 -> 2058;
2074 -> 2072;
2075 -> 2073;
2075 -> 2058;
2075 -> 2072;
2076 -> 2075;
2076 -> 2070;
2077 -> 2071;
2077 -> 2058;
2077 -> 2070;
2078 -> 2077;
2078 -> 2064;
2079 -> 2067;
2079 -> 2064;
2080 -> 2079;
2080 -> 2078;
2080 -> 746;
2080 -> 2077;
2080 -> 2064;
2081 -> 2064;
2082 -> 2066;
2082 -> 2080;
2082 -> 2064;
2083 -> 2060;
2084 -> 2060;
2085 -> 1434;
2085 -> 2084;
2085 -> 2060;
2086 -> 1841;
2086 -> 2084;
2086 -> 2060;
2087 -> 2085;
2087 -> 2086;
2087 -> 2060;
2088 -> 2060;
2089 -> 1433;
2089 -> 2088;
2090 -> 2089;
2090 -> 2082;
2090 -> 2088;
2091 -> 2090;
2091 -> 2060;
2092 -> 1841;
2092 -> 2091;
2093 -> 1438;
2093 -> 2091;
2094 -> 2091;
2095 -> 2092;
2095 -> 2094;
2096 -> 2092;
2096 -> 2094;
2097 -> 2092;
2097 -> 2094;
2098 -> 2092;
2098 -> 2094;
2099 -> 2095;
2099 -> 2094;
2100 -> 2094;
2101 -> 2096;
2101 -> 2094;
2102 -> 2097;
2102 -> 2094;
2103 -> 2094;
2104 -> 2099;
2104 -> 2103;
2105 -> 2100;
2105 -> 2103;
2106 -> 2101;
2106 -> 2103;
2107 -> 2100;
2107 -> 2103;
2108 -> 2102;
2108 -> 2103;
2109 -> 2098;
2109 -> 2103;
2110 -> 2104;
2110 -> 2103;
2111 -> 2103;
2112 -> 2107;
2112 -> 2111;
2112 -> 2103;
2113 -> 2104;
2113 -> 2103;
2114 -> 2105;
2114 -> 2103;
2115 -> 2106;
2115 -> 2103;
2116 -> 2108;
2116 -> 2103;
2117 -> 2103;
2118 -> 2113;
2118 -> 2117;
2119 -> 2114;
2119 -> 2117;
2120 -> 2115;
2120 -> 2117;
2121 -> 2116;
2121 -> 2117;
2122 -> 2109;
2122 -> 2117;
2123 -> 2117;
2124 -> 2117;
2125 -> 2118;
2125 -> 2110;
2125 -> 2117;
2126 -> 2125;
2126 -> 2110;
2126 -> 2117;
2127 -> 2118;
2127 -> 2110;
2127 -> 2117;
2128 -> 2118;
2128 -> 2127;
2128 -> 2117;
2129 -> 2121;
2129 -> 2128;
2130 -> 2117;
2131 -> 2122;
2131 -> 2127;
2131 -> 2130;
2131 -> 2117;
2132 -> 2118;
2132 -> 2127;
2132 -> 2117;
2133 -> 2103;
2134 -> 2107;
2134 -> 2133;
2134 -> 2103;
2135 -> 2132;
2135 -> 2134;
2136 -> 1421;
2137 -> 1423;
2137 -> 1421;
2138 -> 2137;
2138 -> 2135;
2138 -> 1421;
2139 -> 1420;
2139 -> 2138;
2140 -> 1423;
2140 -> 2138;
2141 -> 2138;
2142 -> 2139;
2142 -> 2141;
2143 -> 2140;
2143 -> 2141;
2144 -> 754;
2144 -> 2141;
2145 -> 2144;
2145 -> 2138;
2145 -> 2141;
2146 -> 2144;
2146 -> 2138;
2146 -> 2141;
2147 -> 2138;
2148 -> 751;
2148 -> 1421;
2149 -> 1423;
2149 -> 1421;
2150 -> 753;
2150 -> 1421;
2151 -> 2148;
2151 -> 2149;
2151 -> 2150;
2151 -> 754;
2151 -> 2138;
2151 -> 746;
2151 -> 1421;
2152 -> 1421;
2153 -> 1418;
2153 -> 2151;
2153 -> 1421;
2154 -> 433;
2155 -> 434;
2155 -> 2154;
2155 -> 2151;
2155 -> 426;
2156 -> 434;
2156 -> 433;
2157 -> 434;
2157 -> 433;
2158 -> 434;
2158 -> 433;
2159 -> 434;
2159 -> 433;
2160 -> 434;
2160 -> 433;
2161 -> 434;
2161 -> 433;
2162 -> 434;
2162 -> 433;
2163 -> 433;
2164 -> 2156;
2164 -> 433;
2165 -> 2158;
2165 -> 433;
2166 -> 2163;
2166 -> 433;
2167 -> 2162;
2167 -> 2164;
2167 -> 2165;
2167 -> 2166;
2167 -> 2155;
2167 -> 2163;
2167 -> 433;
2168 -> 2156;
2168 -> 2167;
2168 -> 433;
2169 -> 433;
2170 -> 2162;
2170 -> 2169;
2171 -> 2169;
2172 -> 2170;
2172 -> 2171;
2173 -> 2172;
2173 -> 2167;
2173 -> 2171;
2174 -> 2172;
2174 -> 2167;
2174 -> 2171;
2175 -> 2174;
2175 -> 2169;
2176 -> 2170;
2176 -> 2167;
2176 -> 2169;
2177 -> 2176;
2177 -> 433;
2178 -> 433;
2179 -> 2163;
2179 -> 433;
2180 -> 433;
2181 -> 2179;
2181 -> 2180;
2182 -> 2162;
2182 -> 2180;
2183 -> 2180;
2184 -> 2182;
2184 -> 2183;
2185 -> 2183;
2186 -> 2184;
2186 -> 2185;
2187 -> 2186;
2187 -> 2177;
2187 -> 2185;
2188 -> 2186;
2188 -> 2177;
2188 -> 2185;
2189 -> 2188;
2189 -> 2183;
2190 -> 2184;
2190 -> 2177;
2190 -> 2183;
2191 -> 2190;
2191 -> 2180;
2192 -> 2180;
2193 -> 2192;
2193 -> 2191;
2193 -> 2190;
2193 -> 2180;
2194 -> 2180;
2195 -> 2194;
2195 -> 433;
2196 -> 2160;
2196 -> 433;
2197 -> 2163;
2197 -> 433;
2198 -> 2161;
2198 -> 433;
2199 -> 2196;
2199 -> 2197;
2199 -> 2198;
2199 -> 2162;
2199 -> 2190;
2199 -> 2155;
2199 -> 433;
2200 -> 433;
2201 -> 2161;
2201 -> 2155;
2201 -> 2199;
2201 -> 433;
2202 -> 433;
2203 -> 2159;
2203 -> 433;
2204 -> 433;
2209 -> 2206;
2209 -> 2205;
2210 -> 2207;
2210 -> 2205;
2211 -> 2208;
2211 -> 2205;
2212 -> 2205;
2213 -> 2162;
2213 -> 433;
2214 -> 2203;
2214 -> 433;
2215 -> 2157;
2215 -> 433;
2216 -> 2202;
2216 -> 433;
2217 -> 2161;
2217 -> 433;
2218 -> 433;
2219 -> 433;
2220 -> 2213;
2220 -> 2219;
2221 -> 2214;
2221 -> 2219;
2222 -> 2215;
2222 -> 2219;
2223 -> 2216;
2223 -> 2219;
2224 -> 2217;
2224 -> 2219;
2225 -> 2218;
2225 -> 2219;
2226 -> 2218;
2226 -> 2219;
2227 -> 2219;
2228 -> 2219;
2229 -> 2222;
2229 -> 2228;
2229 -> 2219;
2230 -> 2219;
2231 -> 2220;
2231 -> 2230;
2232 -> 2230;
2233 -> 2231;
2233 -> 2232;
2234 -> 2233;
2234 -> 2201;
2234 -> 2232;
2235 -> 2233;
2235 -> 2201;
2235 -> 2232;
2236 -> 2235;
2236 -> 2230;
2237 -> 2231;
2237 -> 2201;
2237 -> 2230;
2238 -> 2237;
2238 -> 2219;
2239 -> 2238;
2239 -> 2221;
2239 -> 2219;
2240 -> 2220;
2240 -> 2219;
2241 -> 2227;
2241 -> 2219;
2242 -> 2225;
2242 -> 2219;
2243 -> 2226;
2243 -> 2219;
2244 -> 2219;
2245 -> 2223;
2245 -> 2219;
2246 -> 2224;
2246 -> 2219;
2247 -> 2219;
2248 -> 2239;
2248 -> 2247;
2249 -> 2240;
2249 -> 2247;
2250 -> 2241;
2250 -> 2247;
2251 -> 2242;
2251 -> 2247;
2252 -> 2243;
2252 -> 2247;
2253 -> 2244;
2253 -> 2247;
2254 -> 2244;
2254 -> 2247;
2255 -> 2245;
2255 -> 2247;
2256 -> 2246;
2256 -> 2247;
2257 -> 2244;
2257 -> 2247;
2258 -> 2247;
2259 -> 2258;
2259 -> 2247;
2260 -> 2258;
2260 -> 2247;
2261 -> 2258;
2261 -> 2247;
2262 -> 2258;
2262 -> 2247;
2263 -> 2258;
2263 -> 2247;
2264 -> 2258;
2264 -> 2247;
2265 -> 2258;
2265 -> 2247;
2266 -> 2258;
2266 -> 2247;
2267 -> 2258;
2267 -> 2247;
2268 -> 2258;
2268 -> 2247;
2269 -> 2258;
2269 -> 2247;
2270 -> 2258;
2270 -> 2247;
2271 -> 2248;
2271 -> 2258;
2271 -> 2247;
2272 -> 2249;
2272 -> 2258;
2272 -> 2247;
2273 -> 2250;
2273 -> 2258;
2273 -> 2247;
2274 -> 2251;
2274 -> 2258;
2274 -> 2247;
2275 -> 2252;
2275 -> 2258;
2275 -> 2247;
2276 -> 2253;
2276 -> 2258;
2276 -> 2247;
2277 -> 2254;
2277 -> 2258;
2277 -> 2247;
2278 -> 2255;
2278 -> 2258;
2278 -> 2247;
2279 -> 2256;
2279 -> 2258;
2279 -> 2247;
2280 -> 2219;
2281 -> 2220;
2281 -> 2280;
2282 -> 2280;
2283 -> 2281;
2283 -> 2282;
2284 -> 2283;
2284 -> 2237;
2284 -> 2282;
2285 -> 2283;
2285 -> 2237;
2285 -> 2282;
2286 -> 2285;
2286 -> 2280;
2287 -> 2281;
2287 -> 2237;
2287 -> 2280;
2288 -> 2287;
2288 -> 2219;
2289 -> 2288;
2289 -> 2244;
2289 -> 2287;
2289 -> 2258;
2289 -> 2259;
2289 -> 2271;
2289 -> 2260;
2289 -> 2272;
2289 -> 2261;
2289 -> 2273;
2289 -> 2262;
2289 -> 2274;
2289 -> 2263;
2289 -> 2275;
2289 -> 2264;
2289 -> 2276;
2289 -> 2265;
2289 -> 2277;
2289 -> 2266;
2289 -> 2278;
2289 -> 2267;
2289 -> 2268;
2289 -> 2269;
2289 -> 2270;
2289 -> 2279;
2289 -> 2218;
2289 -> 2202;
2289 -> 2201;
2289 -> 2219;
2290 -> 2219;
2291 -> 2289;
2291 -> 2290;
2292 -> 2289;
2292 -> 2290;
2293 -> 2292;
2293 -> 2289;
2293 -> 2290;
2294 -> 2291;
2294 -> 2293;
2294 -> 2290;
2295 -> 2294;
2296 -> 2294;
2297 -> 2294;
2298 -> 2296;
2298 -> 2297;
2299 -> 2292;
2299 -> 2297;
2300 -> 2299;
2300 -> 2293;
2300 -> 2297;
2301 -> 2297;
2302 -> 2300;
2303 -> 2294;
2304 -> 2294;
2305 -> 2303;
2305 -> 2304;
2306 -> 2292;
2306 -> 2304;
2307 -> 2306;
2307 -> 2293;
2307 -> 2304;
2308 -> 2304;
2309 -> 2307;
2310 -> 2294;
2311 -> 2292;
2311 -> 2310;
2312 -> 2311;
2312 -> 2293;
2312 -> 2310;
2313 -> 2294;
2314 -> 2294;
2315 -> 2314;
2315 -> 2294;
2316 -> 2315;
2317 -> 2315;
2318 -> 2316;
2318 -> 2317;
2319 -> 2292;
2319 -> 2317;
2320 -> 2319;
2320 -> 2293;
2320 -> 2317;
2321 -> 2317;
2322 -> 2320;
2323 -> 2315;
2324 -> 2292;
2324 -> 2323;
2325 -> 2324;
2325 -> 2293;
2325 -> 2312;
2325 -> 2323;
2326 -> 2315;
2327 -> 2315;
2328 -> 2292;
2328 -> 2293;
2328 -> 2327;
2328 -> 2315;
2329 -> 2315;
2330 -> 2327;
2330 -> 2329;
2331 -> 2327;
2331 -> 2329;
2332 -> 2292;
2332 -> 2329;
2333 -> 2330;
2333 -> 2329;
2334 -> 2331;
2334 -> 2329;
2335 -> 2333;
2335 -> 2334;
2335 -> 2329;
2336 -> 2329;
2337 -> 2335;
2337 -> 2336;
2338 -> 2332;
2338 -> 2336;
2339 -> 2338;
2339 -> 2293;
2339 -> 2336;
2340 -> 2336;
2341 -> 2339;
2342 -> 2329;
2343 -> 2315;
2344 -> 2292;
2344 -> 2343;
2345 -> 2344;
2345 -> 2293;
2345 -> 2312;
2345 -> 2325;
2345 -> 2343;
2346 -> 2343;
2347 -> 2344;
2347 -> 2293;
2347 -> 2312;
2347 -> 2325;
2347 -> 2345;
2347 -> 2346;
2347 -> 2343;
2348 -> 2315;
2349 -> 2315;
2350 -> 2315;
2351 -> 2349;
2351 -> 2350;
2352 -> 2292;
2352 -> 2350;
2353 -> 2352;
2353 -> 2293;
2353 -> 2350;
2354 -> 2350;
2355 -> 2353;
2356 -> 2294;
2357 -> 2294;
2358 -> 2356;
2358 -> 2357;
2359 -> 2292;
2359 -> 2357;
2360 -> 2359;
2360 -> 2293;
2360 -> 2357;
2361 -> 2357;
2362 -> 2360;
2363 -> 2294;
2364 -> 2292;
2364 -> 2363;
2365 -> 2364;
2365 -> 2293;
2365 -> 2312;
2365 -> 2325;
2365 -> 2345;
2365 -> 2363;
2366 -> 2294;
2367 -> 2292;
2367 -> 2293;
2367 -> 2290;
2368 -> 2291;
2368 -> 2293;
2368 -> 2312;
2368 -> 2325;
2368 -> 2345;
2368 -> 2365;
2368 -> 2290;
2369 -> 2292;
2369 -> 2293;
2369 -> 2312;
2369 -> 2325;
2369 -> 2345;
2369 -> 2365;
2369 -> 2368;
2370 -> 2292;
2370 -> 2368;
2371 -> 2370;
2371 -> 2368;
2371 -> 2369;
2371 -> 2293;
2371 -> 2312;
2371 -> 2325;
2371 -> 2345;
2371 -> 2365;
2372 -> 2368;
2373 -> 2371;
2373 -> 2372;
2374 -> 2371;
2374 -> 2372;
2375 -> 2374;
2375 -> 2371;
2375 -> 2372;
2376 -> 2372;
2377 -> 2374;
2377 -> 2375;
2377 -> 2376;
2377 -> 2372;
2378 -> 2373;
2378 -> 2372;
2379 -> 2372;
2380 -> 2378;
2380 -> 2379;
2381 -> 2374;
2381 -> 2379;
2382 -> 2381;
2382 -> 2375;
2382 -> 2379;
2383 -> 2380;
2383 -> 2379;
2384 -> 2379;
2385 -> 2383;
2385 -> 2384;
2386 -> 2385;
2386 -> 2384;
2387 -> 2386;
2387 -> 2382;
2387 -> 2384;
2388 -> 2379;
2389 -> 2381;
2389 -> 2387;
2389 -> 2388;
2389 -> 2379;
2390 -> 2380;
2390 -> 2379;
2391 -> 2390;
2391 -> 2387;
2391 -> 2379;
2392 -> 2391;
2392 -> 2379;
2393 -> 2379;
2394 -> 2379;
2395 -> 2394;
2395 -> 2379;
2396 -> 2380;
2396 -> 2379;
2397 -> 2393;
2397 -> 2379;
2398 -> 2394;
2398 -> 2379;
2399 -> 2379;
2400 -> 2396;
2400 -> 2399;
2401 -> 2397;
2401 -> 2399;
2402 -> 2398;
2402 -> 2399;
2403 -> 2381;
2403 -> 2399;
2404 -> 0;
2404 -> 2399;
2405 -> 2399;
2406 -> 2399;
2407 -> 2400;
2407 -> 2391;
2407 -> 2399;
2408 -> 2407;
2408 -> 2391;
2409 -> 2408;
2409 -> 2404;
2409 -> 2407;
2410 -> 2409;
2410 -> 2407;
2411 -> 2407;
2412 -> 2403;
2412 -> 2411;
2412 -> 2407;
2413 -> 2412;
2413 -> 2407;
2414 -> 2399;
2415 -> 2406;
2415 -> 2414;
2415 -> 2399;
2416 -> 0;
2416 -> 2415;
2417 -> 2399;
2418 -> 2417;
2418 -> 2379;
2419 -> 2416;
2419 -> 0;
2419 -> 2379;
2420 -> 2410;
2420 -> 0;
2420 -> 2419;
2421 -> 2419;
2422 -> 2372;
2423 -> 2374;
2423 -> 2412;
2423 -> 2372;
2424 -> 2373;
2424 -> 2412;
2424 -> 2423;
2425 -> 2374;
2425 -> 2424;
2426 -> 2374;
2426 -> 2424;
2427 -> 2426;
2427 -> 2424;
2427 -> 2425;
2428 -> 2424;
2429 -> 2428;
2430 -> 2427;
2430 -> 2429;
2430 -> 2428;
2431 -> 2427;
2431 -> 2428;
2432 -> 2428;
2433 -> 2428;
2434 -> 2433;
2434 -> 2428;
2435 -> 2432;
2435 -> 2428;
2436 -> 2433;
2436 -> 2428;
2437 -> 0;
2437 -> 2428;
2438 -> 2428;
2439 -> 2428;
2440 -> 2427;
2441 -> 2440;
2441 -> 2437;
2441 -> 2427;
2442 -> 2441;
2442 -> 2427;
2443 -> 2427;
2444 -> 2428;
2445 -> 2439;
2445 -> 2444;
2445 -> 2428;
2446 -> 0;
2446 -> 2445;
2447 -> 2428;
2448 -> 2446;
2448 -> 0;
2448 -> 2428;
2449 -> 2442;
2449 -> 0;
2449 -> 2448;
2450 -> 2448;
2451 -> 2427;
2452 -> 2291;
2452 -> 2427;
2452 -> 2290;
2453 -> 2452;
2454 -> 2453;
2455 -> 2452;
2456 -> 2452;
2457 -> 2452;
2458 -> 2456;
2458 -> 2457;
2459 -> 2292;
2459 -> 2457;
2460 -> 2459;
2460 -> 2427;
2460 -> 2457;
2461 -> 2457;
2462 -> 2460;
2463 -> 2452;
2464 -> 2463;
2464 -> 2427;
2464 -> 2453;
2465 -> 2463;
2466 -> 2463;
2466 -> 2427;
2466 -> 2453;
2466 -> 2464;
2466 -> 2465;
2467 -> 2452;
2468 -> 2452;
2469 -> 2452;
2470 -> 2468;
2470 -> 2469;
2471 -> 2292;
2471 -> 2469;
2472 -> 2471;
2472 -> 2427;
2472 -> 2469;
2473 -> 2469;
2474 -> 2472;
2475 -> 2219;
2476 -> 2244;
2476 -> 2464;
2476 -> 2475;
2476 -> 2219;
2477 -> 2227;
2477 -> 2219;
2478 -> 2219;
2479 -> 2225;
2479 -> 2478;
2479 -> 2219;
2480 -> 2479;
2481 -> 2220;
2481 -> 2480;
2482 -> 2480;
2483 -> 2481;
2483 -> 2464;
2483 -> 2482;
2484 -> 2482;
2485 -> 2483;
2485 -> 2479;
2486 -> 2485;
2487 -> 2223;
2487 -> 2485;
2488 -> 2224;
2488 -> 2485;
2489 -> 2485;
2490 -> 2486;
2490 -> 2489;
2491 -> 2486;
2491 -> 2489;
2492 -> 2487;
2492 -> 2489;
2493 -> 2488;
2493 -> 2489;
2494 -> 2490;
2494 -> 2489;
2495 -> 2160;
2495 -> 433;
2496 -> 2202;
2496 -> 433;
2497 -> 2161;
2497 -> 433;
2498 -> 2495;
2498 -> 2496;
2498 -> 2497;
2498 -> 2162;
2498 -> 2494;
2498 -> 433;
2499 -> 433;
2500 -> 434;
2500 -> 433;
2501 -> 434;
2501 -> 433;
2502 -> 434;
2502 -> 433;
2503 -> 434;
2503 -> 433;
2504 -> 433;
2505 -> 2503;
2505 -> 2498;
2505 -> 2504;
2505 -> 433;
2506 -> 2500;
2506 -> 433;
2507 -> 433;
2508 -> 2506;
2508 -> 2507;
2509 -> 2503;
2509 -> 2507;
2510 -> 2507;
2511 -> 2509;
2511 -> 2498;
2511 -> 2510;
2511 -> 2507;
2512 -> 433;
2513 -> 434;
2513 -> 433;
2514 -> 433;
2515 -> 2513;
2515 -> 2514;
2516 -> 2514;
2517 -> 2515;
2517 -> 2516;
2518 -> 2498;
2518 -> 2514;
2519 -> 433;
2520 -> 434;
2520 -> 433;
2521 -> 433;
2522 -> 2520;
2522 -> 2521;
2523 -> 2521;
2524 -> 2522;
2524 -> 2523;
2525 -> 2498;
2525 -> 2521;
2526 -> 434;
2526 -> 433;
2527 -> 434;
2527 -> 433;
2528 -> 433;
2529 -> 2527;
2529 -> 2528;
2530 -> 2529;
2530 -> 2498;
2530 -> 2528;
2531 -> 2530;
2531 -> 433;
2532 -> 2531;
2532 -> 2498;
2532 -> 433;
2533 -> 2531;
2533 -> 433;
2534 -> 2527;
2534 -> 2498;
2534 -> 433;
2535 -> 2531;
2535 -> 2532;
2536 -> 2526;
2536 -> 2498;
2536 -> 2532;
2537 -> 2532;
2538 -> 2535;
2538 -> 2537;
2539 -> 2536;
2539 -> 2537;
2540 -> 2527;
2540 -> 2537;
2541 -> 2540;
2541 -> 2498;
2541 -> 2537;
2542 -> 2538;
2542 -> 2537;
2543 -> 2541;
2543 -> 2542;
2543 -> 2537;
2544 -> 2537;
2545 -> 2538;
2545 -> 2537;
2546 -> 2544;
2546 -> 2537;
2547 -> 2540;
2547 -> 2498;
2547 -> 2545;
2547 -> 2546;
2547 -> 2537;
2548 -> 2538;
2548 -> 2537;
2549 -> 2537;
2550 -> 2537;
2551 -> 2548;
2551 -> 2550;
2552 -> 2549;
2552 -> 2550;
2553 -> 2552;
2553 -> 2550;
2554 -> 2550;
2555 -> 2551;
2555 -> 2554;
2555 -> 2550;
2556 -> 2551;
2556 -> 2552;
2556 -> 2550;
2557 -> 2538;
2557 -> 2537;
2558 -> 2549;
2558 -> 2537;
2559 -> 2540;
2559 -> 2547;
2559 -> 2557;
2559 -> 2558;
2559 -> 2556;
2559 -> 2537;
2560 -> 2559;
2560 -> 2549;
2560 -> 2537;
2561 -> 2538;
2561 -> 2560;
2562 -> 2559;
2562 -> 2560;
2563 -> 2539;
2563 -> 2560;
2564 -> 2560;
2565 -> 2561;
2565 -> 2564;
2566 -> 2562;
2566 -> 2564;
2567 -> 2563;
2567 -> 2564;
2568 -> 2540;
2568 -> 2564;
2569 -> 2568;
2569 -> 2559;
2569 -> 2564;
2570 -> 2564;
2571 -> 2566;
2571 -> 2570;
2572 -> 2571;
2572 -> 2559;
2572 -> 2570;
2573 -> 2572;
2573 -> 2564;
2574 -> 2569;
2574 -> 2559;
2574 -> 2564;
2575 -> 2568;
2575 -> 2559;
2575 -> 0;
2575 -> 2564;
2576 -> 2573;
2576 -> 2559;
2576 -> 2564;
2577 -> 2575;
2577 -> 2576;
2577 -> 2564;
2578 -> 2565;
2578 -> 2559;
2578 -> 2564;
2579 -> 2565;
2579 -> 2559;
2579 -> 2564;
2580 -> 2564;
2581 -> 2568;
2581 -> 2559;
2581 -> 2580;
2581 -> 2564;
2582 -> 2560;
2583 -> 2537;
2584 -> 2538;
2584 -> 2559;
2584 -> 2583;
2584 -> 2537;
2585 -> 2559;
2585 -> 2537;
2586 -> 2559;
2586 -> 2537;
2587 -> 434;
2587 -> 2586;
2587 -> 2584;
2587 -> 426;
2588 -> 434;
2588 -> 433;
2589 -> 2588;
2589 -> 2587;
2589 -> 433;
2590 -> 434;
2590 -> 433;
2591 -> 434;
2591 -> 433;
2592 -> 2591;
2592 -> 2589;
2592 -> 433;
2593 -> 433;
2594 -> 2593;
2594 -> 2592;
2594 -> 2589;
2594 -> 433;
2595 -> 433;
2596 -> 434;
2596 -> 2595;
2596 -> 2589;
2596 -> 426;
2597 -> 434;
2597 -> 433;
2598 -> 434;
2598 -> 433;
2599 -> 2597;
2599 -> 2596;
2599 -> 433;
2600 -> 2598;
2600 -> 2596;
2600 -> 2599;
2601 -> 2597;
2601 -> 2599;
2602 -> 2599;
2603 -> 2600;
2603 -> 2602;
2604 -> 2601;
2604 -> 2602;
2605 -> 2598;
2605 -> 2602;
2606 -> 2603;
2606 -> 2596;
2606 -> 2602;
2607 -> 2606;
2608 -> 2603;
2608 -> 2596;
2608 -> 2606;
2609 -> 2606;
2610 -> 2609;
2610 -> 2608;
2610 -> 2596;
2610 -> 2606;
2611 -> 2604;
2611 -> 2596;
2611 -> 2606;
2612 -> 2605;
2612 -> 2596;
2612 -> 2611;
2613 -> 2603;
2613 -> 2606;
2614 -> 2607;
2614 -> 2606;
2615 -> 2606;
2616 -> 2607;
2616 -> 2614;
2616 -> 2606;
2617 -> 2614;
2617 -> 2602;
2618 -> 434;
2618 -> 2617;
2618 -> 2616;
2618 -> 2614;
2618 -> 426;
2619 -> 434;
2619 -> 433;
2620 -> 2619;
2620 -> 2618;
2620 -> 433;
2621 -> 434;
2621 -> 433;
2622 -> 434;
2622 -> 433;
2623 -> 2621;
2623 -> 2620;
2623 -> 433;
2624 -> 433;
2625 -> 2622;
2625 -> 2620;
2625 -> 2624;
2626 -> 2625;
2626 -> 433;
2627 -> 433;
2628 -> 434;
2628 -> 433;
2629 -> 434;
2629 -> 433;
2630 -> 2628;
2630 -> 2626;
2630 -> 433;
2631 -> 433;
2632 -> 2630;
2632 -> 2631;
2633 -> 2629;
2633 -> 2631;
2634 -> 2633;
2634 -> 2626;
2634 -> 2631;
2635 -> 2634;
2635 -> 433;
2636 -> 433;
2637 -> 434;
2637 -> 433;
2638 -> 434;
2638 -> 433;
2639 -> 2637;
2639 -> 2635;
2639 -> 433;
2640 -> 433;
2641 -> 2639;
2641 -> 2640;
2642 -> 2638;
2642 -> 2640;
2643 -> 2640;
2644 -> 2641;
2644 -> 2640;
2645 -> 2640;
2646 -> 2644;
2646 -> 2645;
2647 -> 2642;
2647 -> 2645;
2648 -> 2645;
2649 -> 2647;
2649 -> 2648;
2650 -> 2648;
2651 -> 2650;
2651 -> 2649;
2651 -> 2648;
2652 -> 2648;
2653 -> 2649;
2653 -> 2652;
2654 -> 2653;
2654 -> 2635;
2654 -> 2651;
2654 -> 2652;
2655 -> 2654;
2655 -> 2648;
2656 -> 2655;
2656 -> 2645;
2657 -> 2645;
2658 -> 2647;
2658 -> 2657;
2659 -> 2654;
2659 -> 2645;
2660 -> 2659;
2661 -> 2656;
2661 -> 2660;
2661 -> 2659;
2662 -> 2661;
2663 -> 2640;
2664 -> 2643;
2664 -> 2640;
2665 -> 2643;
2665 -> 2640;
2666 -> 2643;
2666 -> 2640;
2667 -> 2643;
2667 -> 2640;
2668 -> 2643;
2668 -> 2640;
2669 -> 2643;
2669 -> 2640;
2670 -> 2643;
2670 -> 2640;
2671 -> 2643;
2671 -> 2640;
2672 -> 2643;
2672 -> 2654;
2672 -> 2640;
2673 -> 2672;
2673 -> 433;
2674 -> 433;
2675 -> 434;
2675 -> 433;
2676 -> 434;
2676 -> 433;
2677 -> 433;
2678 -> 2676;
2678 -> 2673;
2678 -> 433;
2679 -> 2677;
2679 -> 2678;
2679 -> 2673;
2679 -> 433;
2680 -> 433;
2681 -> 2677;
2681 -> 2679;
2681 -> 2680;
2681 -> 433;
2682 -> 2677;
2682 -> 2679;
2682 -> 2681;
2683 -> 2682;
2683 -> 2681;
2684 -> 2683;
2684 -> 2682;
2684 -> 0;
2685 -> 2684;
2686 -> 2683;
2686 -> 2682;
2686 -> 2684;
2687 -> 434;
2687 -> 433;
2688 -> 434;
2688 -> 433;
2689 -> 2687;
2689 -> 433;
2690 -> 2687;
2690 -> 2685;
2690 -> 433;
2691 -> 433;
2692 -> 2688;
2692 -> 2691;
2693 -> 2691;
2694 -> 2692;
2694 -> 2693;
2695 -> 2693;
2696 -> 2694;
2696 -> 2695;
2697 -> 2695;
2698 -> 2696;
2698 -> 2697;
2699 -> 2685;
2699 -> 2695;
2700 -> 2691;
2701 -> 2685;
2701 -> 433;
2702 -> 433;
2703 -> 2688;
2703 -> 2702;
2704 -> 434;
2704 -> 433;
2705 -> 434;
2705 -> 433;
2706 -> 434;
2706 -> 433;
2707 -> 434;
2707 -> 433;
2708 -> 433;
2709 -> 2707;
2709 -> 2685;
2709 -> 2708;
2710 -> 2708;
2711 -> 2710;
2712 -> 2711;
2713 -> 2709;
2713 -> 2711;
2714 -> 2708;
2715 -> 2709;
2715 -> 433;
2716 -> 2715;
2716 -> 2704;
2716 -> 2709;
2716 -> 433;
2717 -> 433;
2718 -> 2717;
2718 -> 433;
2719 -> 2706;
2719 -> 2718;
2719 -> 2685;
2719 -> 2717;
2719 -> 2709;
2719 -> 433;
2720 -> 433;
2721 -> 2717;
2721 -> 2719;
2721 -> 433;
2722 -> 2721;
2723 -> 2717;
2723 -> 2721;
2723 -> 433;
2724 -> 2722;
2724 -> 433;
2725 -> 434;
2725 -> 2724;
2725 -> 2723;
2725 -> 426;
2726 -> 2687;
2726 -> 2725;
2726 -> 433;
2727 -> 2725;
2727 -> 2695;
2728 -> 2725;
2728 -> 433;
2729 -> 2725;
2729 -> 2711;
2730 -> 2725;
2730 -> 433;
2731 -> 2730;
2731 -> 2704;
2731 -> 2725;
2731 -> 433;
2732 -> 434;
2732 -> 433;
2733 -> 434;
2733 -> 433;
2734 -> 433;
2735 -> 434;
2735 -> 2734;
2735 -> 2725;
2735 -> 426;
2736 -> 434;
2736 -> 433;
2737 -> 434;
2737 -> 433;
2738 -> 2737;
2738 -> 433;
2739 -> 2736;
2739 -> 433;
2740 -> 2737;
2740 -> 2735;
2740 -> 433;
2741 -> 2738;
2741 -> 2739;
2741 -> 2740;
2741 -> 2737;
2741 -> 2735;
2741 -> 433;
2742 -> 433;
2743 -> 2741;
2743 -> 0;
2743 -> 2742;
2744 -> 2742;
2745 -> 2741;
2746 -> 2741;
2746 -> 2742;
2747 -> 2742;
2748 -> 2747;
2749 -> 2741;
2749 -> 2747;
2750 -> 2742;
2751 -> 2742;
2752 -> 434;
2752 -> 433;
2753 -> 434;
2753 -> 433;
2754 -> 434;
2754 -> 433;
2755 -> 434;
2755 -> 433;
2756 -> 434;
2756 -> 433;
2757 -> 434;
2757 -> 433;
2758 -> 2752;
2758 -> 433;
2759 -> 433;
2760 -> 2755;
2760 -> 2759;
2760 -> 433;
2761 -> 2752;
2761 -> 433;
2762 -> 2753;
2762 -> 433;
2763 -> 2754;
2763 -> 433;
2764 -> 2756;
2764 -> 433;
2765 -> 433;
2766 -> 2761;
2766 -> 2765;
2767 -> 2762;
2767 -> 2765;
2768 -> 2763;
2768 -> 2765;
2769 -> 2764;
2769 -> 2765;
2770 -> 2757;
2770 -> 2765;
2771 -> 2765;
2772 -> 2765;
2773 -> 2766;
2773 -> 2741;
2773 -> 2765;
2774 -> 2773;
2774 -> 2741;
2774 -> 2765;
2775 -> 2766;
2775 -> 2741;
2775 -> 2765;
2776 -> 2769;
2776 -> 2775;
2777 -> 2766;
2777 -> 2741;
2777 -> 2776;
2778 -> 2773;
2778 -> 2776;
2779 -> 2776;
2780 -> 2778;
2780 -> 2779;
2781 -> 2779;
2782 -> 2780;
2782 -> 2781;
2782 -> 2779;
2783 -> 2782;
2784 -> 2780;
2784 -> 2741;
2784 -> 2782;
2785 -> 2779;
2786 -> 2785;
2786 -> 2776;
2787 -> 2777;
2787 -> 2786;
2787 -> 2776;
2788 -> 2766;
2788 -> 2787;
2789 -> 2766;
2789 -> 2741;
2789 -> 2787;
2790 -> 2765;
2791 -> 2770;
2791 -> 2741;
2791 -> 2790;
2791 -> 2765;
2792 -> 433;
2793 -> 2755;
2793 -> 2792;
2793 -> 433;
2794 -> 434;
2794 -> 433;
2795 -> 434;
2795 -> 433;
2796 -> 434;
2796 -> 433;
2797 -> 434;
2797 -> 433;
2798 -> 433;
2799 -> 2796;
2799 -> 2798;
2799 -> 433;
2800 -> 2794;
2800 -> 2741;
2800 -> 433;
2801 -> 2794;
2801 -> 2800;
2802 -> 2795;
2802 -> 2800;
2803 -> 2796;
2803 -> 2800;
2804 -> 2800;
2805 -> 2800;
2806 -> 2801;
2806 -> 2805;
2807 -> 2802;
2807 -> 2805;
2808 -> 2803;
2808 -> 2805;
2809 -> 2804;
2809 -> 2805;
2810 -> 2804;
2810 -> 2805;
2811 -> 2797;
2811 -> 2805;
2812 -> 2806;
2812 -> 2741;
2812 -> 2805;
2813 -> 2805;
2814 -> 2808;
2814 -> 2813;
2814 -> 2805;
2815 -> 2806;
2815 -> 2812;
2815 -> 2805;
2816 -> 2806;
2816 -> 2812;
2816 -> 2815;
2817 -> 2806;
2817 -> 2812;
2817 -> 0;
2817 -> 2805;
2818 -> 2806;
2818 -> 2812;
2818 -> 2805;
2819 -> 2810;
2819 -> 2818;
2820 -> 2819;
2821 -> 2819;
2822 -> 2806;
2822 -> 2812;
2822 -> 2819;
2823 -> 2819;
2824 -> 2822;
2824 -> 2823;
2825 -> 2823;
2826 -> 2824;
2826 -> 2825;
2827 -> 2825;
2828 -> 2826;
2828 -> 2827;
2828 -> 2825;
2829 -> 2825;
2830 -> 2829;
2830 -> 2823;
2831 -> 2806;
2831 -> 2812;
2831 -> 2830;
2832 -> 2806;
2832 -> 2812;
2832 -> 2805;
2833 -> 2811;
2833 -> 2812;
2833 -> 2805;
2834 -> 2806;
2834 -> 2812;
2834 -> 2805;
2835 -> 434;
2835 -> 433;
2836 -> 434;
2836 -> 433;
2837 -> 434;
2837 -> 433;
2838 -> 434;
2838 -> 433;
2839 -> 434;
2839 -> 433;
2840 -> 434;
2840 -> 433;
2841 -> 433;
2842 -> 2837;
2842 -> 2841;
2842 -> 433;
2843 -> 2835;
2843 -> 2833;
2843 -> 433;
2844 -> 2835;
2844 -> 2833;
2844 -> 2843;
2845 -> 2835;
2845 -> 2833;
2845 -> 0;
2845 -> 433;
2846 -> 2835;
2846 -> 2833;
2846 -> 433;
2847 -> 2839;
2847 -> 2846;
2848 -> 2835;
2848 -> 2833;
2848 -> 433;
2849 -> 434;
2849 -> 433;
2850 -> 434;
2850 -> 433;
2851 -> 434;
2851 -> 433;
2852 -> 2851;
2852 -> 2833;
2852 -> 433;
2853 -> 2849;
2853 -> 433;
2854 -> 2852;
2854 -> 2853;
2854 -> 433;
2855 -> 433;
2856 -> 2849;
2856 -> 2855;
2856 -> 433;
2857 -> 433;
2858 -> 2849;
2858 -> 433;
2859 -> 2857;
2859 -> 433;
2860 -> 2851;
2860 -> 2833;
2860 -> 2858;
2860 -> 2859;
2860 -> 433;
2861 -> 2860;
2862 -> 2835;
2862 -> 2861;
2862 -> 433;
2863 -> 2835;
2863 -> 2861;
2863 -> 2862;
2864 -> 2835;
2864 -> 2861;
2864 -> 0;
2864 -> 433;
2865 -> 2835;
2865 -> 2861;
2865 -> 433;
2866 -> 2839;
2866 -> 2865;
2867 -> 2835;
2867 -> 2861;
2867 -> 433;
2868 -> 434;
2868 -> 433;
2869 -> 434;
2869 -> 433;
2870 -> 2868;
2870 -> 433;
2871 -> 433;
2872 -> 2870;
2872 -> 2871;
2872 -> 2861;
2872 -> 433;
2873 -> 2868;
2873 -> 433;
2874 -> 2873;
2874 -> 2861;
2874 -> 2872;
2874 -> 433;
2875 -> 433;
2876 -> 2874;
2876 -> 2875;
2877 -> 2876;
2877 -> 2874;
2877 -> 2875;
2878 -> 2876;
2878 -> 2874;
2878 -> 2877;
2879 -> 2878;
2879 -> 2877;
2880 -> 2877;
2881 -> 2879;
2881 -> 2880;
2882 -> 2881;
2882 -> 2874;
2882 -> 0;
2882 -> 2880;
2883 -> 2881;
2883 -> 2874;
2883 -> 2880;
2884 -> 2880;
2885 -> 2883;
2885 -> 2884;
2886 -> 2884;
2887 -> 2885;
2887 -> 2886;
2887 -> 2884;
2888 -> 2887;
2889 -> 2885;
2889 -> 2874;
2889 -> 2887;
2890 -> 2884;
2891 -> 2890;
2891 -> 2880;
2892 -> 2882;
2892 -> 2891;
2892 -> 2880;
2893 -> 2875;
2894 -> 2893;
2894 -> 433;
2895 -> 2874;
2895 -> 2894;
2895 -> 433;
2896 -> 2868;
2896 -> 433;
2897 -> 2895;
2897 -> 433;
2898 -> 433;
2899 -> 2897;
2899 -> 2898;
2900 -> 2899;
2900 -> 2897;
2900 -> 2898;
2901 -> 2899;
2901 -> 2897;
2901 -> 2900;
2902 -> 2901;
2902 -> 2900;
2903 -> 2900;
2904 -> 2902;
2904 -> 2903;
2905 -> 2904;
2905 -> 2897;
2905 -> 0;
2905 -> 2903;
2906 -> 2904;
2906 -> 2897;
2906 -> 2903;
2907 -> 2903;
2908 -> 2906;
2908 -> 2907;
2909 -> 2907;
2910 -> 2908;
2910 -> 2909;
2910 -> 2907;
2911 -> 2910;
2912 -> 2908;
2912 -> 2897;
2912 -> 2910;
2913 -> 2907;
2914 -> 2913;
2914 -> 2903;
2915 -> 2905;
2915 -> 2914;
2915 -> 2903;
2916 -> 2898;
2917 -> 2895;
2917 -> 433;
2918 -> 2868;
2918 -> 2917;
2919 -> 2917;
2920 -> 2918;
2920 -> 2919;
2920 -> 2861;
2920 -> 2897;
2920 -> 2917;
2921 -> 2795;
2921 -> 2920;
2922 -> 2796;
2922 -> 2920;
2923 -> 2921;
2923 -> 2920;
2924 -> 2922;
2924 -> 2920;
2925 -> 2920;
2926 -> 2920;
2927 -> 2920;
2928 -> 2924;
2928 -> 2927;
2928 -> 2920;
2929 -> 2920;
2930 -> 2920;
2930 -> 2929;
2931 -> 2920;
2931 -> 0;
2932 -> 2920;
2933 -> 2926;
2933 -> 2932;
2934 -> 2933;
2935 -> 2933;
2936 -> 2920;
2936 -> 2933;
2937 -> 2933;
2938 -> 2936;
2938 -> 2937;
2939 -> 2937;
2940 -> 2938;
2940 -> 2939;
2941 -> 2939;
2942 -> 2940;
2942 -> 2941;
2942 -> 2939;
2943 -> 2939;
2944 -> 2943;
2944 -> 2937;
2945 -> 2920;
2945 -> 2944;
2946 -> 2920;
2947 -> 434;
2947 -> 433;
2948 -> 434;
2948 -> 433;
2949 -> 434;
2949 -> 433;
2950 -> 2947;
2950 -> 2920;
2950 -> 433;
2951 -> 433;
2952 -> 2950;
2952 -> 2951;
2952 -> 433;
2953 -> 2948;
2953 -> 0;
2953 -> 2952;
2954 -> 2950;
2954 -> 2948;
2954 -> 2952;
2955 -> 2948;
2955 -> 0;
2955 -> 2954;
2956 -> 2795;
2956 -> 2954;
2957 -> 2796;
2957 -> 2954;
2958 -> 2956;
2958 -> 2954;
2959 -> 2957;
2959 -> 2954;
2960 -> 2954;
2961 -> 2954;
2962 -> 2954;
2963 -> 2959;
2963 -> 2962;
2963 -> 2954;
2964 -> 2954;
2965 -> 2954;
2965 -> 2964;
2966 -> 2954;
2966 -> 0;
2967 -> 2954;
2968 -> 2961;
2968 -> 2967;
2969 -> 2968;
2970 -> 2968;
2971 -> 2954;
2971 -> 2968;
2972 -> 2968;
2973 -> 2971;
2973 -> 2972;
2974 -> 2972;
2975 -> 2973;
2975 -> 2974;
2976 -> 2974;
2977 -> 2975;
2977 -> 2976;
2977 -> 2974;
2978 -> 2974;
2979 -> 2978;
2979 -> 2972;
2980 -> 2954;
2980 -> 2979;
2981 -> 2954;
2982 -> 2835;
2982 -> 2954;
2982 -> 433;
2983 -> 2835;
2983 -> 2954;
2983 -> 2982;
2984 -> 2835;
2984 -> 2954;
2984 -> 0;
2984 -> 433;
2985 -> 2835;
2985 -> 2954;
2985 -> 433;
2986 -> 2839;
2986 -> 2985;
2987 -> 2835;
2987 -> 2954;
2987 -> 433;
2988 -> 2851;
2988 -> 2954;
2988 -> 433;
2989 -> 2954;
2989 -> 2875;
2990 -> 2989;
2990 -> 2954;
2990 -> 2875;
2991 -> 2989;
2991 -> 2954;
2991 -> 2990;
2992 -> 2991;
2992 -> 2990;
2993 -> 2990;
2994 -> 2992;
2994 -> 2993;
2995 -> 2994;
2995 -> 2954;
2995 -> 0;
2995 -> 2993;
2996 -> 2994;
2996 -> 2954;
2996 -> 2993;
2997 -> 2993;
2998 -> 2996;
2998 -> 2997;
2999 -> 2997;
3000 -> 2998;
3000 -> 2999;
3000 -> 2997;
3001 -> 3000;
3002 -> 2998;
3002 -> 2954;
3002 -> 3000;
3003 -> 2997;
3004 -> 3003;
3004 -> 2993;
3005 -> 2995;
3005 -> 3004;
3005 -> 2993;
3006 -> 2954;
3006 -> 2898;
3007 -> 3006;
3007 -> 2954;
3007 -> 2898;
3008 -> 3006;
3008 -> 2954;
3008 -> 3007;
3009 -> 3008;
3009 -> 3007;
3010 -> 3007;
3011 -> 3009;
3011 -> 3010;
3012 -> 3011;
3012 -> 2954;
3012 -> 0;
3012 -> 3010;
3013 -> 3011;
3013 -> 2954;
3013 -> 3010;
3014 -> 3010;
3015 -> 3013;
3015 -> 3014;
3016 -> 3014;
3017 -> 3015;
3017 -> 3016;
3017 -> 3014;
3018 -> 3017;
3019 -> 3015;
3019 -> 2954;
3019 -> 3017;
3020 -> 3014;
3021 -> 3020;
3021 -> 3010;
3022 -> 3012;
3022 -> 3021;
3022 -> 3010;
3023 -> 2766;
3023 -> 2954;
3023 -> 2765;
3024 -> 3023;
3024 -> 2954;
3024 -> 2765;
3025 -> 2766;
3025 -> 2954;
3025 -> 2765;
3026 -> 2769;
3026 -> 3025;
3027 -> 2766;
3027 -> 2954;
3027 -> 3026;
3028 -> 3023;
3028 -> 3026;
3029 -> 3026;
3030 -> 3028;
3030 -> 3029;
3031 -> 3029;
3032 -> 3030;
3032 -> 3031;
3032 -> 3029;
3033 -> 3032;
3034 -> 3030;
3034 -> 2954;
3034 -> 3032;
3035 -> 3029;
3036 -> 3035;
3036 -> 3026;
3037 -> 3027;
3037 -> 3036;
3037 -> 3026;
3038 -> 2766;
3038 -> 3037;
3039 -> 2766;
3039 -> 2954;
3039 -> 3037;
3040 -> 2770;
3040 -> 2954;
3040 -> 2790;
3040 -> 2765;
3041 -> 2977;
3042 -> 2975;
3042 -> 2954;
3042 -> 2977;
3043 -> 434;
3043 -> 433;
3044 -> 3043;
3044 -> 2954;
3044 -> 433;
3045 -> 433;
3046 -> 2526;
3046 -> 3044;
3047 -> 3046;
3047 -> 3044;
3048 -> 3044;
3049 -> 3044;
3050 -> 2591;
3050 -> 3049;
3050 -> 433;
3051 -> 2593;
3051 -> 3050;
3051 -> 3049;
3051 -> 433;
3052 -> 434;
3052 -> 433;
3053 -> 3052;
3053 -> 433;
3054 -> 3053;
3054 -> 3052;
3054 -> 3049;
3054 -> 433;
3055 -> 433;
3056 -> 2621;
3056 -> 3054;
3056 -> 433;
3057 -> 2628;
3057 -> 3054;
3057 -> 433;
3058 -> 3057;
3058 -> 2631;
3059 -> 2637;
3059 -> 3054;
3059 -> 433;
3060 -> 3059;
3060 -> 2640;
3061 -> 3060;
3061 -> 2640;
3062 -> 3061;
3062 -> 2645;
3063 -> 3054;
3063 -> 2648;
3064 -> 3063;
3064 -> 2645;
3065 -> 3054;
3065 -> 2645;
3066 -> 3065;
3067 -> 3064;
3067 -> 3066;
3067 -> 3065;
3068 -> 3067;
3069 -> 2687;
3069 -> 3054;
3069 -> 433;
3070 -> 3054;
3070 -> 2695;
3071 -> 3054;
3071 -> 433;
3072 -> 3054;
3072 -> 2711;
3073 -> 3054;
3073 -> 433;
3074 -> 3073;
3074 -> 2704;
3074 -> 3054;
3074 -> 433;
3075 -> 2717;
3075 -> 3054;
3076 -> 3054;
3077 -> 2717;
3077 -> 3054;
3078 -> 3077;
3078 -> 3075;
3078 -> 3054;
3079 -> 3054;
3080 -> 3078;
3080 -> 3079;
3080 -> 3054;
3081 -> 2705;
3081 -> 3080;
3082 -> 3078;
3082 -> 3080;
3083 -> 3080;
3084 -> 3081;
3084 -> 3083;
3085 -> 3082;
3085 -> 3083;
3086 -> 2707;
3086 -> 3083;
3087 -> 3085;
3087 -> 3084;
3087 -> 3083;
3088 -> 3087;
3089 -> 2835;
3089 -> 3088;
3089 -> 433;
3090 -> 2835;
3090 -> 3088;
3090 -> 3089;
3091 -> 2835;
3091 -> 3088;
3091 -> 0;
3091 -> 433;
3092 -> 2835;
3092 -> 3088;
3092 -> 433;
3093 -> 2839;
3093 -> 3092;
3094 -> 3093;
3095 -> 3093;
3096 -> 2835;
3096 -> 3088;
3096 -> 3093;
3097 -> 3093;
3098 -> 3096;
3098 -> 3097;
3099 -> 3097;
3100 -> 3098;
3100 -> 3099;
3101 -> 3099;
3102 -> 3100;
3102 -> 3101;
3102 -> 3099;
3103 -> 3099;
3104 -> 3103;
3104 -> 3097;
3105 -> 2835;
3105 -> 3088;
3105 -> 3104;
3106 -> 2835;
3106 -> 3088;
3106 -> 433;
3107 -> 2851;
3107 -> 3088;
3107 -> 433;
3108 -> 2687;
3108 -> 3088;
3108 -> 433;
3109 -> 3088;
3109 -> 2695;
3110 -> 3088;
3110 -> 433;
3111 -> 3088;
3111 -> 2711;
3112 -> 3088;
3112 -> 433;
3113 -> 3112;
3113 -> 2704;
3113 -> 3088;
3113 -> 433;
3114 -> 2795;
3114 -> 3088;
3115 -> 2796;
3115 -> 3088;
3116 -> 3114;
3116 -> 3088;
3117 -> 3115;
3117 -> 3088;
3118 -> 3088;
3119 -> 3088;
3120 -> 3088;
3121 -> 3117;
3121 -> 3120;
3121 -> 3088;
3122 -> 3088;
3123 -> 3088;
3123 -> 3122;
3124 -> 3088;
3124 -> 0;
3125 -> 3088;
3126 -> 3119;
3126 -> 3125;
3127 -> 3126;
3128 -> 3126;
3129 -> 3088;
3129 -> 3126;
3130 -> 3126;
3131 -> 3129;
3131 -> 3130;
3132 -> 3130;
3133 -> 3131;
3133 -> 3132;
3134 -> 3132;
3135 -> 3133;
3135 -> 3134;
3135 -> 3132;
3136 -> 3132;
3137 -> 3136;
3137 -> 3130;
3138 -> 3088;
3138 -> 3137;
3139 -> 3088;
3140 -> 434;
3140 -> 433;
3141 -> 434;
3141 -> 433;
3142 -> 3141;
3142 -> 3088;
3142 -> 433;
3143 -> 3141;
3143 -> 3088;
3143 -> 433;
3144 -> 3143;
3145 -> 3141;
3145 -> 3144;
3146 -> 3145;
3146 -> 3088;
3146 -> 3144;
3147 -> 3144;
3148 -> 3145;
3148 -> 3088;
3148 -> 3144;
3149 -> 3146;
3149 -> 3088;
3149 -> 3148;
3150 -> 3148;
3151 -> 3150;
3151 -> 3149;
3151 -> 3088;
3151 -> 3148;
3152 -> 3145;
3152 -> 3088;
3152 -> 3144;
3153 -> 3144;
3154 -> 3146;
3154 -> 3088;
3154 -> 3153;
3155 -> 3154;
3155 -> 3144;
3156 -> 3146;
3156 -> 3144;
3157 -> 3147;
3157 -> 3144;
3158 -> 3144;
3159 -> 3156;
3159 -> 3158;
3160 -> 3157;
3160 -> 3158;
3161 -> 3158;
3162 -> 3161;
3162 -> 3158;
3163 -> 3159;
3163 -> 3088;
3163 -> 3158;
3164 -> 3160;
3164 -> 3158;
3165 -> 3158;
3166 -> 3162;
3166 -> 3165;
3167 -> 3163;
3167 -> 3165;
3168 -> 3164;
3168 -> 3165;
3169 -> 3165;
3170 -> 3167;
3170 -> 3169;
3170 -> 3165;
3171 -> 3158;
3172 -> 3158;
3173 -> 3159;
3173 -> 3163;
3173 -> 3172;
3174 -> 3173;
3174 -> 3158;
3175 -> 3161;
3175 -> 3174;
3176 -> 3159;
3176 -> 3163;
3176 -> 3174;
3177 -> 3160;
3177 -> 3174;
3178 -> 3174;
3179 -> 3175;
3179 -> 3178;
3180 -> 3176;
3180 -> 3178;
3181 -> 3177;
3181 -> 3178;
3182 -> 3178;
3183 -> 3180;
3183 -> 3182;
3183 -> 3178;
3184 -> 3174;
3185 -> 3161;
3185 -> 3158;
3186 -> 3185;
3186 -> 3144;
3187 -> 3147;
3187 -> 3144;
3188 -> 3187;
3188 -> 3143;
3189 -> 3188;
3189 -> 3141;
3189 -> 3143;
3190 -> 3143;
3191 -> 3141;
3191 -> 3176;
3191 -> 3189;
3191 -> 3187;
3191 -> 3190;
3191 -> 3143;
3192 -> 3141;
3192 -> 3176;
3192 -> 3189;
3192 -> 433;
3193 -> 434;
3193 -> 433;
3194 -> 434;
3194 -> 433;
3195 -> 434;
3195 -> 433;
3196 -> 3195;
3196 -> 3192;
3196 -> 433;
3197 -> 3196;
3197 -> 3192;
3197 -> 433;
3198 -> 433;
3199 -> 3198;
3199 -> 3197;
3199 -> 433;
3200 -> 434;
3200 -> 433;
3201 -> 0;
3201 -> 433;
3202 -> 434;
3202 -> 3201;
3202 -> 3192;
3202 -> 0;
3202 -> 426;
3203 -> 2835;
3203 -> 3202;
3203 -> 433;
3204 -> 2835;
3204 -> 3202;
3204 -> 3203;
3205 -> 2835;
3205 -> 3202;
3205 -> 0;
3205 -> 433;
3206 -> 2835;
3206 -> 3202;
3206 -> 433;
3207 -> 2839;
3207 -> 3206;
3208 -> 2835;
3208 -> 3202;
3208 -> 433;
3209 -> 2851;
3209 -> 3202;
3209 -> 433;
3210 -> 2795;
3210 -> 3202;
3211 -> 2796;
3211 -> 3202;
3212 -> 3210;
3212 -> 3202;
3213 -> 3211;
3213 -> 3202;
3214 -> 3202;
3215 -> 3202;
3216 -> 3202;
3217 -> 3213;
3217 -> 3216;
3217 -> 3202;
3218 -> 3202;
3219 -> 3202;
3219 -> 3218;
3220 -> 3202;
3220 -> 0;
3221 -> 3202;
3222 -> 3215;
3222 -> 3221;
3223 -> 3222;
3224 -> 3222;
3225 -> 3202;
3225 -> 3222;
3226 -> 3222;
3227 -> 3225;
3227 -> 3226;
3228 -> 3226;
3229 -> 3227;
3229 -> 3228;
3230 -> 3228;
3231 -> 3229;
3231 -> 3230;
3231 -> 3228;
3232 -> 3228;
3233 -> 3232;
3233 -> 3226;
3234 -> 3202;
3234 -> 3233;
3235 -> 3202;
3236 -> 2948;
3236 -> 0;
3236 -> 3202;
3237 -> 434;
3237 -> 433;
3238 -> 3237;
3238 -> 3202;
3238 -> 433;
3239 -> 434;
3239 -> 433;
3240 -> 3239;
3240 -> 3238;
3240 -> 433;
3241 -> 3141;
3241 -> 3240;
3241 -> 433;
3242 -> 2835;
3242 -> 3240;
3242 -> 433;
3243 -> 2835;
3243 -> 3240;
3243 -> 3242;
3244 -> 2835;
3244 -> 3240;
3244 -> 0;
3244 -> 433;
3245 -> 2835;
3245 -> 3240;
3245 -> 433;
3246 -> 2839;
3246 -> 3245;
3247 -> 2835;
3247 -> 3240;
3247 -> 433;
3248 -> 434;
3248 -> 433;
3249 -> 3248;
3249 -> 3240;
3249 -> 433;
3250 -> 0;
3250 -> 3249;
3251 -> 2795;
3251 -> 3250;
3252 -> 2796;
3252 -> 3250;
3253 -> 3251;
3253 -> 3250;
3254 -> 3252;
3254 -> 3250;
3255 -> 3250;
3256 -> 3250;
3257 -> 3250;
3258 -> 3254;
3258 -> 3257;
3258 -> 3250;
3259 -> 3250;
3260 -> 3250;
3260 -> 3259;
3261 -> 3250;
3261 -> 0;
3262 -> 3250;
3263 -> 3256;
3263 -> 3262;
3264 -> 3263;
3265 -> 3263;
3266 -> 3250;
3266 -> 3263;
3267 -> 3263;
3268 -> 3266;
3268 -> 3267;
3269 -> 3267;
3270 -> 3268;
3270 -> 3269;
3271 -> 3269;
3272 -> 3270;
3272 -> 3271;
3272 -> 3269;
3273 -> 3269;
3274 -> 3273;
3274 -> 3267;
3275 -> 3250;
3275 -> 3274;
3276 -> 3250;
3277 -> 2948;
3277 -> 0;
3277 -> 3250;
3278 -> 434;
3278 -> 433;
3279 -> 3278;
3279 -> 3250;
3279 -> 433;
3280 -> 2835;
3280 -> 3279;
3280 -> 433;
3281 -> 2835;
3281 -> 3279;
3281 -> 3280;
3282 -> 2835;
3282 -> 3279;
3282 -> 0;
3282 -> 433;
3283 -> 2835;
3283 -> 3279;
3283 -> 433;
3284 -> 2839;
3284 -> 3283;
3285 -> 3284;
3286 -> 3284;
3287 -> 2835;
3287 -> 3279;
3287 -> 3284;
3288 -> 3284;
3289 -> 3287;
3289 -> 3288;
3290 -> 3288;
3291 -> 3289;
3291 -> 3290;
3292 -> 3290;
3293 -> 3291;
3293 -> 3292;
3293 -> 3290;
3294 -> 3290;
3295 -> 3294;
3295 -> 3288;
3296 -> 2835;
3296 -> 3279;
3296 -> 3295;
3297 -> 2835;
3297 -> 3279;
3297 -> 433;
3298 -> 3248;
3298 -> 3279;
3299 -> 0;
3299 -> 3298;
3300 -> 2851;
3300 -> 3299;
3300 -> 433;
3301 -> 2835;
3301 -> 3299;
3301 -> 433;
3302 -> 2835;
3302 -> 3299;
3302 -> 3301;
3303 -> 2835;
3303 -> 3299;
3303 -> 0;
3303 -> 433;
3304 -> 2835;
3304 -> 3299;
3304 -> 433;
3305 -> 2839;
3305 -> 3304;
3306 -> 2835;
3306 -> 3299;
3306 -> 433;
3307 -> 3299;
3307 -> 0;
3307 -> 2742;
3308 -> 3299;
3309 -> 3299;
3309 -> 2742;
3310 -> 2766;
3310 -> 3299;
3310 -> 2765;
3311 -> 3310;
3311 -> 3299;
3311 -> 2765;
3312 -> 2766;
3312 -> 3299;
3312 -> 2765;
3313 -> 2769;
3313 -> 3312;
3314 -> 2766;
3314 -> 3299;
3314 -> 3313;
3315 -> 3310;
3315 -> 3313;
3316 -> 3313;
3317 -> 3315;
3317 -> 3316;
3318 -> 3316;
3319 -> 3317;
3319 -> 3318;
3319 -> 3316;
3320 -> 3319;
3321 -> 3317;
3321 -> 3299;
3321 -> 3319;
3322 -> 3316;
3323 -> 3322;
3323 -> 3313;
3324 -> 3314;
3324 -> 3323;
3324 -> 3313;
3325 -> 2766;
3325 -> 3324;
3326 -> 2766;
3326 -> 3299;
3326 -> 3324;
3327 -> 2770;
3327 -> 3299;
3327 -> 2790;
3327 -> 2765;
3328 -> 3299;
3328 -> 2875;
3329 -> 3328;
3329 -> 3299;
3329 -> 2875;
3330 -> 3328;
3330 -> 3299;
3330 -> 3329;
3331 -> 3330;
3331 -> 3329;
3332 -> 3329;
3333 -> 3331;
3333 -> 3332;
3334 -> 3333;
3334 -> 3299;
3334 -> 0;
3334 -> 3332;
3335 -> 3333;
3335 -> 3299;
3335 -> 3332;
3336 -> 3332;
3337 -> 3335;
3337 -> 3336;
3338 -> 3336;
3339 -> 3337;
3339 -> 3338;
3339 -> 3336;
3340 -> 3339;
3341 -> 3337;
3341 -> 3299;
3341 -> 3339;
3342 -> 3336;
3343 -> 3342;
3343 -> 3332;
3344 -> 3334;
3344 -> 3343;
3344 -> 3332;
3345 -> 3299;
3345 -> 2898;
3346 -> 3345;
3346 -> 3299;
3346 -> 2898;
3347 -> 3345;
3347 -> 3299;
3347 -> 3346;
3348 -> 3347;
3348 -> 3346;
3349 -> 3346;
3350 -> 3348;
3350 -> 3349;
3351 -> 3350;
3351 -> 3299;
3351 -> 0;
3351 -> 3349;
3352 -> 3350;
3352 -> 3299;
3352 -> 3349;
3353 -> 3349;
3354 -> 3352;
3354 -> 3353;
3355 -> 3353;
3356 -> 3354;
3356 -> 3355;
3356 -> 3353;
3357 -> 3356;
3358 -> 3354;
3358 -> 3299;
3358 -> 3356;
3359 -> 3353;
3360 -> 3359;
3360 -> 3349;
3361 -> 3351;
3361 -> 3360;
3361 -> 3349;
3362 -> 2795;
3362 -> 3299;
3363 -> 2796;
3363 -> 3299;
3364 -> 3362;
3364 -> 3299;
3365 -> 3363;
3365 -> 3299;
3366 -> 3299;
3367 -> 3299;
3368 -> 3299;
3369 -> 3365;
3369 -> 3368;
3369 -> 3299;
3370 -> 3299;
3371 -> 3299;
3371 -> 3370;
3372 -> 3299;
3372 -> 0;
3373 -> 3299;
3374 -> 3367;
3374 -> 3373;
3375 -> 3374;
3376 -> 3374;
3377 -> 3299;
3377 -> 3374;
3378 -> 3374;
3379 -> 3377;
3379 -> 3378;
3380 -> 3378;
3381 -> 3379;
3381 -> 3380;
3382 -> 3380;
3383 -> 3381;
3383 -> 3382;
3383 -> 3380;
3384 -> 3380;
3385 -> 3384;
3385 -> 3378;
3386 -> 3299;
3386 -> 3385;
3387 -> 3299;
3388 -> 2948;
3388 -> 0;
3388 -> 3299;
3389 -> 0;
3389 -> 3388;
3390 -> 3389;
3390 -> 2949;
3390 -> 3299;
3390 -> 3388;
3391 -> 3388;
3392 -> 3390;
3392 -> 3391;
3393 -> 2766;
3393 -> 3390;
3393 -> 2765;
3394 -> 3393;
3394 -> 3390;
3394 -> 2765;
3395 -> 2766;
3395 -> 3390;
3395 -> 2765;
3396 -> 2769;
3396 -> 3395;
3397 -> 2766;
3397 -> 3390;
3397 -> 3396;
3398 -> 3393;
3398 -> 3396;
3399 -> 3396;
3400 -> 3398;
3400 -> 3399;
3401 -> 3399;
3402 -> 3400;
3402 -> 3401;
3402 -> 3399;
3403 -> 3402;
3404 -> 3400;
3404 -> 3390;
3404 -> 3402;
3405 -> 3399;
3406 -> 3405;
3406 -> 3396;
3407 -> 3397;
3407 -> 3406;
3407 -> 3396;
3408 -> 2766;
3408 -> 3407;
3409 -> 2766;
3409 -> 3390;
3409 -> 3407;
3410 -> 2770;
3410 -> 3390;
3410 -> 2790;
3410 -> 2765;
3411 -> 2835;
3411 -> 3390;
3411 -> 433;
3412 -> 2835;
3412 -> 3390;
3412 -> 3411;
3413 -> 2835;
3413 -> 3390;
3413 -> 0;
3413 -> 433;
3414 -> 2835;
3414 -> 3390;
3414 -> 433;
3415 -> 2839;
3415 -> 3414;
3416 -> 2835;
3416 -> 3390;
3416 -> 433;
3417 -> 2851;
3417 -> 3390;
3417 -> 433;
3418 -> 2795;
3418 -> 3390;
3419 -> 2796;
3419 -> 3390;
3420 -> 3418;
3420 -> 3390;
3421 -> 3419;
3421 -> 3390;
3422 -> 3390;
3423 -> 3390;
3424 -> 3390;
3425 -> 3421;
3425 -> 3424;
3425 -> 3390;
3426 -> 3390;
3427 -> 3390;
3427 -> 3426;
3428 -> 3390;
3428 -> 0;
3429 -> 3390;
3430 -> 3423;
3430 -> 3429;
3431 -> 3430;
3432 -> 3430;
3433 -> 3390;
3433 -> 3430;
3434 -> 3430;
3435 -> 3433;
3435 -> 3434;
3436 -> 3434;
3437 -> 3435;
3437 -> 3436;
3438 -> 3436;
3439 -> 3437;
3439 -> 3438;
3439 -> 3436;
3440 -> 3436;
3441 -> 3440;
3441 -> 3434;
3442 -> 3390;
3442 -> 3441;
3443 -> 3390;
3444 -> 3390;
3444 -> 2875;
3445 -> 3444;
3445 -> 3390;
3445 -> 2875;
3446 -> 3444;
3446 -> 3390;
3446 -> 3445;
3447 -> 3446;
3447 -> 3445;
3448 -> 3445;
3449 -> 3447;
3449 -> 3448;
3450 -> 3449;
3450 -> 3390;
3450 -> 0;
3450 -> 3448;
3451 -> 3449;
3451 -> 3390;
3451 -> 3448;
3452 -> 3448;
3453 -> 3451;
3453 -> 3452;
3454 -> 3452;
3455 -> 3453;
3455 -> 3454;
3455 -> 3452;
3456 -> 3455;
3457 -> 3453;
3457 -> 3390;
3457 -> 3455;
3458 -> 3452;
3459 -> 3458;
3459 -> 3448;
3460 -> 3450;
3460 -> 3459;
3460 -> 3448;
3461 -> 3390;
3461 -> 2898;
3462 -> 3461;
3462 -> 3390;
3462 -> 2898;
3463 -> 3461;
3463 -> 3390;
3463 -> 3462;
3464 -> 3463;
3464 -> 3462;
3465 -> 3462;
3466 -> 3464;
3466 -> 3465;
3467 -> 3466;
3467 -> 3390;
3467 -> 0;
3467 -> 3465;
3468 -> 3466;
3468 -> 3390;
3468 -> 3465;
3469 -> 3465;
3470 -> 3468;
3470 -> 3469;
3471 -> 3469;
3472 -> 3470;
3472 -> 3471;
3472 -> 3469;
3473 -> 3472;
3474 -> 3470;
3474 -> 3390;
3474 -> 3472;
3475 -> 3469;
3476 -> 3475;
3476 -> 3465;
3477 -> 3467;
3477 -> 3476;
3477 -> 3465;
3478 -> 3439;
3479 -> 3437;
3479 -> 3390;
3479 -> 3439;
3480 -> 2687;
3480 -> 3390;
3480 -> 433;
3481 -> 3390;
3481 -> 2695;
3482 -> 3390;
3482 -> 433;
3483 -> 3390;
3483 -> 2711;
3484 -> 3390;
3484 -> 433;
3485 -> 3484;
3485 -> 2704;
3485 -> 3390;
3485 -> 433;
3486 -> 2707;
3486 -> 3390;
3487 -> 2851;
3487 -> 3417;
3488 -> 3487;
3488 -> 2521;
3489 -> 3487;
3489 -> 426;
3490 -> 426;
3491 -> 426;
3492 -> 429;
3492 -> 3491;
3492 -> 426;
3493 -> 426;
3494 -> 3493;
3494 -> 430;
3494 -> 426;
3495 -> 430;
3495 -> 426;
3496 -> 3495;
3496 -> 1;
3497 -> 3496;
3497 -> 425;
3497 -> 3487;
3497 -> 3494;
3497 -> 1;
3498 -> 1;
3499 -> 3497;
3499 -> 1;
}