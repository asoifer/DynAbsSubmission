digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 738456"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 738457"];
3 [label="param BindingTests(this) 738458"];
4 [label="'C' 738459"];
5 [label="DefaultTypeName = 'C' 738460"];
6 [label="'M' 738461"];
7 [label="DefaultMethodName = 'M' 738462"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 738463"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 738464"];
10 [label="param CompilingTestBase(this) 738465"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 738466"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 738467"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 738468"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 738469"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 738470"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 738471"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 738472"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 738473"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 738474"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 738475"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 738476"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 738477"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 738478"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 738479"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 738480"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 738481"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 738482"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 738483"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 738484"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 738485"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 738486"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 738487"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 738488"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 738489"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 738490"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 738491"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 738492"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 738493"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 738494"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 738495"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 738496"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 738497"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 738498"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 738499"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 738500"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 738501"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 738502"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 738503"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 738504"];
50 [label="LazyThreadSafetyMode.PublicationOnly 738505"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 738506"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 738507"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 738508"];
54 [label="LazyThreadSafetyMode.PublicationOnly 738509"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 738510"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 738511"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 738512"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 738513"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 738514"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 738515"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 738516"];
62 [label="LazyThreadSafetyMode.PublicationOnly 738517"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 738518"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 738519"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 738520"];
66 [label="LazyThreadSafetyMode.PublicationOnly 738521"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 738522"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 738523"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 738524"];
70 [label="LazyThreadSafetyMode.PublicationOnly 738525"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 738526"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 738527"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 738528"];
74 [label="LazyThreadSafetyMode.PublicationOnly 738529"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738530"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738531"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 738532"];
78 [label="LazyThreadSafetyMode.PublicationOnly 738533"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738534"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738535"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 738536"];
82 [label="LazyThreadSafetyMode.PublicationOnly 738537"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738538"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738539"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 738540"];
86 [label="LazyThreadSafetyMode.PublicationOnly 738541"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738542"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738543"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 738544"];
90 [label="LazyThreadSafetyMode.PublicationOnly 738545"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738546"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738547"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 738548"];
94 [label="LazyThreadSafetyMode.PublicationOnly 738549"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738550"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738551"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 738552"];
98 [label="LazyThreadSafetyMode.PublicationOnly 738553"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738554"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738555"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 738556"];
102 [label="LazyThreadSafetyMode.PublicationOnly 738557"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 738558"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 738559"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 738560"];
106 [label="LazyThreadSafetyMode.PublicationOnly 738561"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 738562"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 738563"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 738564"];
110 [label="LazyThreadSafetyMode.PublicationOnly 738565"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738566"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738567"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 738568"];
114 [label="LazyThreadSafetyMode.PublicationOnly 738569"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738570"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738571"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 738572"];
118 [label="LazyThreadSafetyMode.PublicationOnly 738573"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738574"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738575"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 738576"];
122 [label="LazyThreadSafetyMode.PublicationOnly 738577"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738578"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738579"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 738580"];
126 [label="LazyThreadSafetyMode.PublicationOnly 738581"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 738582"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 738583"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 738584"];
130 [label="LazyThreadSafetyMode.PublicationOnly 738585"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738586"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738587"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 738588"];
134 [label="LazyThreadSafetyMode.PublicationOnly 738589"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738590"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738591"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 738592"];
138 [label="LazyThreadSafetyMode.PublicationOnly 738593"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738594"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738595"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 738596"];
142 [label="LazyThreadSafetyMode.PublicationOnly 738597"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738598"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738599"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 738600"];
146 [label="LazyThreadSafetyMode.PublicationOnly 738601"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738602"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738603"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 738604"];
150 [label="LazyThreadSafetyMode.PublicationOnly 738605"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738606"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738607"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 738608"];
154 [label="LazyThreadSafetyMode.PublicationOnly 738609"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738610"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738611"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 738612"];
158 [label="LazyThreadSafetyMode.PublicationOnly 738613"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738614"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738615"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 738616"];
162 [label="LazyThreadSafetyMode.PublicationOnly 738617"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738618"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738619"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 738620"];
166 [label="LazyThreadSafetyMode.PublicationOnly 738621"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738622"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738623"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 738624"];
170 [label="LazyThreadSafetyMode.PublicationOnly 738625"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738626"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738627"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 738628"];
174 [label="LazyThreadSafetyMode.PublicationOnly 738629"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738630"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738631"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 738632"];
178 [label="LazyThreadSafetyMode.PublicationOnly 738633"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738634"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 738635"];
181 [label="@'R:\\Invalid.dll' 738636"];
182 [label="fullPath: @'R:\\Invalid.dll' 738637"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 738638"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 738639"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 738640"];
186 [label="MscorlibRef_v4_0_30316_17626 738641"];
187 [label="Net451.mscorlib 738642"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 738643"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 738644"];
190 [label="'/*<bind>*/' 738645"];
191 [label="StartString = '/*<bind>*/' 738646"];
192 [label="'/*</bind>*/' 738647"];
193 [label="EndString = '/*</bind>*/' 738648"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 738649"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 738650"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 738651"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 738652"];
198 [label="param CSharpTestBase(this) 738653"];
199 [label="param CommonTestBase(this) 738654"];
200 [label="param TestBase(this) 738655"];
201 [label="_temp 738656"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 738657"];
203 [label="param UseSiteErrorViaAliasTest06(this) 738658"];
204 [label="var testAssembly = CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ); 738659"];
205 [label="var testAssembly = CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ); 738660"];
206 [label="TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 738661"];
207 [label="param operator(string source) 738662"];
208 [label="source 738663"];
209 [label="new CSharpTestSource(source) 738664"];
210 [label="param CSharpTestSource(object value) 738665"];
211 [label="param CSharpTestSource(this) 738666"];
212 [label="Value 738667"];
213 [label="var testAssembly = CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ); 738668"];
214 [label="param CreateCompilation(CSharpTestSource source) 738669"];
215 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 738670"];
216 [label="param CreateCompilation(CSharpCompilationOptions options = null) 738671"];
217 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 738672"];
218 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 738673"];
219 [label="param CreateCompilation(string assemblyName = '') 738674"];
220 [label="param CreateCompilation(string sourceFileName = '') 738675"];
221 [label="param CreateCompilation(bool skipUsesIsNullable = false) 738676"];
222 [label="=> CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 738677"];
223 [label="source 738678"];
224 [label="targetFramework 738679"];
225 [label="references 738680"];
226 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 738681"];
227 [label="param GetReferences(TargetFramework tf) 738682"];
228 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 738683"];
229 [label="var references = GetReferences(tf); 738684"];
230 [label="GetReferences(tf) 738685"];
231 [label="param GetReferences(TargetFramework targetFramework) 738686"];
232 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 738687"];
233 [label="StandardReferences 738688"];
234 [label="RuntimeUtilities.IsCoreClrRuntime 738689"];
235 [label="Mscorlib46ExtendedReferences 738690"];
236 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 738691"];
237 [label="TestBase.ValueTupleRef 738692"];
238 [label="TestReferences.NetFx.ValueTuple.tuplelib 738693"];
239 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 738694"];
240 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 738695"];
241 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 738696"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 738697"];
243 [label="checkForDuplicateReferences(references, additionalReferences); 738698"];
244 [label="checkForDuplicateReferences(references, additionalReferences); 738699"];
245 [label="checkForDuplicateReferences(references, additionalReferences) 738700"];
246 [label="void checkForDuplicateReferences(ImmutableArray<MetadataReference> refer, IEnumerable<MetadataReference> additRef)\n            {\n                var nameSet = new HashSet<string>(getNames(refer), StringComparer.OrdinalIgnoreCase);\n                foreach (var r in additRef)\n                {\n                    if (refer.Contains(r))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display}');\n                    }\n\n                    var name = getName(r);\n                    if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    }\n                }\n            } 738701"];
247 [label="void checkForDuplicateReferences(ImmutableArray<MetadataReference> refer, IEnumerable<MetadataReference> additRef)\n            {\n                var nameSet = new HashSet<string>(getNames(refer), StringComparer.OrdinalIgnoreCase);\n                foreach (var r in additRef)\n                {\n                    if (refer.Contains(r))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display}');\n                    }\n\n                    var name = getName(r);\n                    if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    }\n                }\n            } 738702"];
248 [label="var nameSet = new HashSet<string>(getNames(refer), StringComparer.OrdinalIgnoreCase); 738703"];
249 [label="getNames(refer) 738704"];
250 [label="IEnumerable<string> getNames(IEnumerable<MetadataReference> e)\n            {\n                foreach (var r in e)\n                {\n                    var name = getName(r);\n                    if (name != null)\n                    {\n                        yield return name;\n                    }\n                }\n            } 738705"];
251 [label="foreach (var r in e)\n                {\n                    var name = getName(r);\n                    if (name != null)\n                    {\n                        yield return name;\n                    }\n                } 738706"];
252 [label="var name = getName(r); 738707"];
253 [label="getName(r) 738708"];
254 [label="string getName(MetadataReference m)\n            {\n                if (m is PortableExecutableReference p &&\n                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)\n                {\n                    try\n                    {\n                        var identity = assemblyMetadata.GetAssembly().Identity;\n                        return identity?.Name;\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        // Happens when a native image is incorrectly passed as a PE.\n                        return null;\n                    }\n                }\n\n                return null;\n            } 738709"];
255 [label="if (m is PortableExecutableReference p &&\n                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)\n                {\n                    try\n                    {\n                        var identity = assemblyMetadata.GetAssembly().Identity;\n                        return identity?.Name;\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        // Happens when a native image is incorrectly passed as a PE.\n                        return null;\n                    }\n                } 738710"];
256 [label="var identity = assemblyMetadata.GetAssembly().Identity; 738711"];
257 [label="return identity?.Name; 738712"];
258 [label="if (name != null)\n                    {\n                        yield return name;\n                    } 738713"];
259 [label="if (name != null)\n                    {\n                        yield return name;\n                    } 738714"];
260 [label="yield return name; 738715"];
261 [label="yield return name; 738716"];
262 [label="return identity?.Name; 738717"];
263 [label="if (name != null)\n                    {\n                        yield return name;\n                    } 738718"];
264 [label="if (name != null)\n                    {\n                        yield return name;\n                    } 738719"];
265 [label="yield return name; 738720"];
266 [label="if (name != null)\n                    {\n                        yield return name;\n                    } 738721"];
267 [label="yield return name; 738722"];
268 [label="var nameSet = new HashSet<string>(getNames(refer), StringComparer.OrdinalIgnoreCase); 738723"];
269 [label="foreach (var r in additRef)\n                {\n                    if (refer.Contains(r))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display}');\n                    }\n\n                    var name = getName(r);\n                    if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    }\n                } 738724"];
270 [label="if (refer.Contains(r))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display}');\n                    } 738725"];
271 [label="if (refer.Contains(r))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display}');\n                    } 738726"];
272 [label="var name = getName(r); 738727"];
273 [label="getName(r) 738728"];
274 [label="string getName(MetadataReference m)\n            {\n                if (m is PortableExecutableReference p &&\n                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)\n                {\n                    try\n                    {\n                        var identity = assemblyMetadata.GetAssembly().Identity;\n                        return identity?.Name;\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        // Happens when a native image is incorrectly passed as a PE.\n                        return null;\n                    }\n                }\n\n                return null;\n            } 738729"];
275 [label="if (m is PortableExecutableReference p &&\n                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)\n                {\n                    try\n                    {\n                        var identity = assemblyMetadata.GetAssembly().Identity;\n                        return identity?.Name;\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        // Happens when a native image is incorrectly passed as a PE.\n                        return null;\n                    }\n                } 738730"];
276 [label="if (m is PortableExecutableReference p &&\n                    p.GetMetadata() is AssemblyMetadata assemblyMetadata)\n                {\n                    try\n                    {\n                        var identity = assemblyMetadata.GetAssembly().Identity;\n                        return identity?.Name;\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        // Happens when a native image is incorrectly passed as a PE.\n                        return null;\n                    }\n                } 738731"];
277 [label="if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    } 738732"];
278 [label="if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    } 738733"];
279 [label="if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    } 738734"];
280 [label="if (name != null && !nameSet.Add(name))\n                    {\n                        throw new Exception($'Duplicate reference detected {r.Display} - {name}');\n                    } 738735"];
281 [label="checkForDuplicateReferences(references, additionalReferences); 738736"];
282 [label="return references.AddRange(additionalReferences); 738737"];
283 [label="return references.AddRange(additionalReferences); 738738"];
284 [label="options 738739"];
285 [label="parseOptions 738740"];
286 [label="assemblyName 738741"];
287 [label="sourceFileName 738742"];
288 [label="skipUsesIsNullable 738743"];
289 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 738744"];
290 [label="param CreateEmptyCompilation(CSharpTestSource source) 738745"];
291 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 738746"];
292 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 738747"];
293 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 738748"];
294 [label="param CreateEmptyCompilation(string assemblyName = '') 738749"];
295 [label="param CreateEmptyCompilation(string sourceFileName = '') 738750"];
296 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 738751"];
297 [label="source 738752"];
298 [label="references 738753"];
299 [label="options 738754"];
300 [label="parseOptions 738755"];
301 [label="assemblyName 738756"];
302 [label="sourceFileName 738757"];
303 [label="skipUsesIsNullable 738758"];
304 [label="null 738759"];
305 [label="experimentalFeature: null 738760"];
306 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 738761"];
307 [label="param CreateCompilationCore(CSharpTestSource source) 738762"];
308 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 738763"];
309 [label="param CreateCompilationCore(CSharpCompilationOptions options) 738764"];
310 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 738765"];
311 [label="param CreateCompilationCore(string assemblyName) 738766"];
312 [label="param CreateCompilationCore(string sourceFileName) 738767"];
313 [label="param CreateCompilationCore(bool skipUsesIsNullable) 738768"];
314 [label="param CreateCompilationCore(MessageID? experimentalFeature) 738769"];
315 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 738770"];
316 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 738771"];
317 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 738772"];
318 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 738773"];
319 [label="param GetSyntaxTrees(string sourceFileName = '') 738774"];
320 [label="param GetSyntaxTrees(this) 738775"];
321 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 738776"];
322 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 738777"];
323 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 738778"];
324 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 738779"];
325 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 738780"];
326 [label="param Parse(string text) 738781"];
327 [label="param Parse(string filename = '') 738782"];
328 [label="param Parse(CSharpParseOptions options = null) 738783"];
329 [label="param Parse(Encoding encoding = null) 738784"];
330 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 738785"];
331 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 738786"];
332 [label="kind: SourceCodeKind.Regular 738787"];
333 [label="documentationMode: DocumentationMode.Parse 738788"];
334 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 738789"];
335 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 738790"];
336 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 738791"];
337 [label="SourceCodeKind.Script 738792"];
338 [label="Regular.WithKind(SourceCodeKind.Script) 738793"];
339 [label="Script = Regular.WithKind(SourceCodeKind.Script) 738794"];
340 [label="LanguageVersion.CSharp6 738795"];
341 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 738796"];
342 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 738797"];
343 [label="LanguageVersion.CSharp7 738798"];
344 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 738799"];
345 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 738800"];
346 [label="LanguageVersion.CSharp7_1 738801"];
347 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 738802"];
348 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 738803"];
349 [label="LanguageVersion.CSharp7_2 738804"];
350 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 738805"];
351 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 738806"];
352 [label="LanguageVersion.CSharp7_3 738807"];
353 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 738808"];
354 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 738809"];
355 [label="LanguageVersion.Default 738810"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 738811"];
357 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 738812"];
358 [label="LanguageVersion.Preview 738813"];
359 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 738814"];
360 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 738815"];
361 [label="LanguageVersion.CSharp8 738816"];
362 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 738817"];
363 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 738818"];
364 [label="LanguageVersion.CSharp9 738819"];
365 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 738820"];
366 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 738821"];
367 [label="DocumentationMode.Diagnose 738822"];
368 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 738823"];
369 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 738824"];
370 [label="Regular 738825"];
371 [label="'UseLegacyStrongNameProvider' 738826"];
372 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 738827"];
373 [label="param WithFeature(this CSharpParseOptions options) 738828"];
374 [label="param WithFeature(string feature) 738829"];
375 [label="param WithFeature(string value = 'true') 738830"];
376 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 738831"];
377 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 738832"];
378 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 738833"];
379 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 738834"];
380 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 738835"];
381 [label="new[] { new KeyValuePair<string, string>(feature, value) } 738836"];
382 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 738837"];
383 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 738838"];
384 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 738839"];
385 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 738840"];
386 [label="1 738841"];
387 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 738842"];
388 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 738843"];
389 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 738844"];
390 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 738845"];
391 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 738846"];
392 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 738847"];
393 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 738848"];
394 [label="LanguageVersion.CSharp8 738849"];
395 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 738850"];
396 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 738851"];
397 [label="RegularWithExtendedPartialMethods = RegularPreview 738852"];
398 [label="new SmallDictionary<string, string> { } 738853"];
399 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 738854"];
400 [label="kind: SourceCodeKind.Regular 738855"];
401 [label="documentationMode: DocumentationMode.None 738856"];
402 [label="languageVersion: LanguageVersion.Preview 738857"];
403 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 738858"];
404 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 738859"];
405 [label="s_experimentalFeatures 738860"];
406 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 738861"];
407 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 738862"];
408 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 738863"];
409 [label="'testV7SwitchBinder' 738864"];
410 [label="'true' 738865"];
411 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 738866"];
412 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 738867"];
413 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 738868"];
414 [label="RegularWithoutRecursivePatterns = Regular7_3 738869"];
415 [label="RegularWithRecursivePatterns = Regular8 738870"];
416 [label="RegularWithoutPatternCombinators = Regular8 738871"];
417 [label="RegularWithPatternCombinators = RegularPreview 738872"];
418 [label="OutputKind.DynamicallyLinkedLibrary 738873"];
419 [label="OptimizationLevel.Release 738874"];
420 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 738875"];
421 [label="param CreateTestOptions(OutputKind outputKind) 738876"];
422 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738877"];
423 [label="param CreateTestOptions(bool allowUnsafe = false) 738878"];
424 [label="outputKind 738879"];
425 [label="optimizationLevel: optimizationLevel 738880"];
426 [label="warningLevel: Diagnostic.MaxWarningLevel 738881"];
427 [label="allowUnsafe: allowUnsafe 738882"];
428 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738883"];
429 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738884"];
430 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 738885"];
431 [label="OutputKind.ConsoleApplication 738886"];
432 [label="OptimizationLevel.Release 738887"];
433 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 738888"];
434 [label="param CreateTestOptions(OutputKind outputKind) 738889"];
435 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738890"];
436 [label="param CreateTestOptions(bool allowUnsafe = false) 738891"];
437 [label="outputKind 738892"];
438 [label="optimizationLevel: optimizationLevel 738893"];
439 [label="warningLevel: Diagnostic.MaxWarningLevel 738894"];
440 [label="allowUnsafe: allowUnsafe 738895"];
441 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738896"];
442 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738897"];
443 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 738898"];
444 [label="true 738899"];
445 [label="ReleaseDll.WithDebugPlusMode(true) 738900"];
446 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 738901"];
447 [label="true 738902"];
448 [label="ReleaseExe.WithDebugPlusMode(true) 738903"];
449 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 738904"];
450 [label="OutputKind.DynamicallyLinkedLibrary 738905"];
451 [label="OptimizationLevel.Debug 738906"];
452 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 738907"];
453 [label="param CreateTestOptions(OutputKind outputKind) 738908"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738909"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 738910"];
456 [label="outputKind 738911"];
457 [label="optimizationLevel: optimizationLevel 738912"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 738913"];
459 [label="allowUnsafe: allowUnsafe 738914"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738915"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738916"];
462 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 738917"];
463 [label="OutputKind.ConsoleApplication 738918"];
464 [label="OptimizationLevel.Debug 738919"];
465 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 738920"];
466 [label="param CreateTestOptions(OutputKind outputKind) 738921"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738922"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 738923"];
469 [label="outputKind 738924"];
470 [label="optimizationLevel: optimizationLevel 738925"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 738926"];
472 [label="allowUnsafe: allowUnsafe 738927"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738928"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738929"];
475 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 738930"];
476 [label="OutputKind.WindowsRuntimeMetadata 738931"];
477 [label="OptimizationLevel.Release 738932"];
478 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 738933"];
479 [label="param CreateTestOptions(OutputKind outputKind) 738934"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738935"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 738936"];
482 [label="outputKind 738937"];
483 [label="optimizationLevel: optimizationLevel 738938"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 738939"];
485 [label="allowUnsafe: allowUnsafe 738940"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738941"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738942"];
488 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 738943"];
489 [label="OutputKind.WindowsRuntimeMetadata 738944"];
490 [label="OptimizationLevel.Debug 738945"];
491 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 738946"];
492 [label="param CreateTestOptions(OutputKind outputKind) 738947"];
493 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738948"];
494 [label="param CreateTestOptions(bool allowUnsafe = false) 738949"];
495 [label="outputKind 738950"];
496 [label="optimizationLevel: optimizationLevel 738951"];
497 [label="warningLevel: Diagnostic.MaxWarningLevel 738952"];
498 [label="allowUnsafe: allowUnsafe 738953"];
499 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738954"];
500 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738955"];
501 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 738956"];
502 [label="OutputKind.NetModule 738957"];
503 [label="OptimizationLevel.Release 738958"];
504 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 738959"];
505 [label="param CreateTestOptions(OutputKind outputKind) 738960"];
506 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738961"];
507 [label="param CreateTestOptions(bool allowUnsafe = false) 738962"];
508 [label="outputKind 738963"];
509 [label="optimizationLevel: optimizationLevel 738964"];
510 [label="warningLevel: Diagnostic.MaxWarningLevel 738965"];
511 [label="allowUnsafe: allowUnsafe 738966"];
512 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738967"];
513 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738968"];
514 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 738969"];
515 [label="OutputKind.NetModule 738970"];
516 [label="OptimizationLevel.Debug 738971"];
517 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 738972"];
518 [label="param CreateTestOptions(OutputKind outputKind) 738973"];
519 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 738974"];
520 [label="param CreateTestOptions(bool allowUnsafe = false) 738975"];
521 [label="outputKind 738976"];
522 [label="optimizationLevel: optimizationLevel 738977"];
523 [label="warningLevel: Diagnostic.MaxWarningLevel 738978"];
524 [label="allowUnsafe: allowUnsafe 738979"];
525 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738980"];
526 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 738981"];
527 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 738982"];
528 [label="true 738983"];
529 [label="ReleaseDll.WithAllowUnsafe(true) 738984"];
530 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 738985"];
531 [label="true 738986"];
532 [label="ReleaseExe.WithAllowUnsafe(true) 738987"];
533 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 738988"];
534 [label="true 738989"];
535 [label="DebugDll.WithAllowUnsafe(true) 738990"];
536 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 738991"];
537 [label="true 738992"];
538 [label="DebugExe.WithAllowUnsafe(true) 738993"];
539 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 738994"];
540 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 738995"];
541 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 738996"];
542 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 738997"];
543 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 738998"];
544 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 738999"];
545 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 739000"];
546 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 739001"];
547 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 739002"];
548 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 739003"];
549 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 739004"];
550 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 739005"];
551 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 739006"];
552 [label="DebugInformationFormat.Pdb 739007"];
553 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 739008"];
554 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 739009"];
555 [label="options = TestOptions.Regular; 739010"];
556 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 739011"];
557 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 739012"];
558 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 739013"];
559 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 739014"];
560 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 739015"];
561 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 739016"];
562 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 739017"];
563 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 739018"];
564 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 739019"];
565 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 739020"];
566 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 739021"];
567 [label="param CheckSerializable(SyntaxTree tree) 739022"];
568 [label="var stream = new MemoryStream(); 739023"];
569 [label="var root = tree.GetRoot(); 739024"];
570 [label="var root = tree.GetRoot(); 739025"];
571 [label="root.SerializeTo(stream); 739026"];
572 [label="root.SerializeTo(stream); 739027"];
573 [label="root.SerializeTo(stream); 739028"];
574 [label="stream.Position = 0; 739029"];
575 [label="stream.Position 739030"];
576 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 739031"];
577 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 739032"];
578 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 739033"];
579 [label="return tree; 739034"];
580 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 739035"];
581 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 739036"];
582 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 739037"];
583 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 739038"];
584 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 739039"];
585 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 739040"];
586 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 739041"];
587 [label="hasTopLevelStatements 739042"];
588 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 739043"];
589 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 739044"];
590 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 739045"];
591 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 739046"];
592 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 739047"];
593 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 739048"];
594 [label="param ValidateIOperations(Func<Compilation> createCompilation) 739049"];
595 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 739050"];
596 [label="return; 739051"];
597 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 739052"];
598 [label="var compilation = createCompilationLambda(); 739053"];
599 [label="var compilation = createCompilationLambda(); 739054"];
600 [label="return Guid.NewGuid().ToString('D'); 739055"];
601 [label="var compilation = createCompilationLambda(); 739056"];
602 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 739057"];
603 [label="IsNullableEnabled(compilation) 739058"];
604 [label="param IsNullableEnabled(CSharpCompilation compilation) 739059"];
605 [label="var trees = compilation.SyntaxTrees; 739060"];
606 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 739061"];
607 [label="var options = (CSharpParseOptions)trees[0].Options; 739062"];
608 [label="var options = (CSharpParseOptions)trees[0].Options; 739063"];
609 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 739064"];
610 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 739065"];
611 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 739066"];
612 [label="return compilation; 739067"];
613 [label="var testAssembly = CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ); 739068"];
614 [label="Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1') 739069"];
615 [label="param Diagnostic(object code) 739070"];
616 [label="param Diagnostic(string squiggledText = null) 739071"];
617 [label="param Diagnostic(object[] arguments = null) 739072"];
618 [label="param Diagnostic(LinePosition? startLocation = null) 739073"];
619 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 739074"];
620 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739075"];
621 [label="param Diagnostic(bool isSuppressed = false) 739076"];
622 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739077"];
623 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739078"];
624 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739079"];
625 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739080"];
626 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739081"];
627 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739082"];
628 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739083"];
629 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 739084"];
630 [label="param Diagnostic(object code) 739085"];
631 [label="param Diagnostic(string squiggledText = null) 739086"];
632 [label="param Diagnostic(object[] arguments = null) 739087"];
633 [label="param Diagnostic(LinePosition? startLocation = null) 739088"];
634 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 739089"];
635 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739090"];
636 [label="param Diagnostic(bool isSuppressed = false) 739091"];
637 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 739092"];
638 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739093"];
639 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739094"];
640 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739095"];
641 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739096"];
642 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739097"];
643 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739098"];
644 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739099"];
645 [label="{ } 739100"];
646 [label="None = { } 739101"];
647 [label="null 739102"];
648 [label="Any = null 739103"];
649 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739104"];
650 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 739105"];
651 [label="param DiagnosticDescription(object code) 739106"];
652 [label="param DiagnosticDescription(bool isWarningAsError) 739107"];
653 [label="param DiagnosticDescription(string squiggledText) 739108"];
654 [label="param DiagnosticDescription(object[] arguments) 739109"];
655 [label="param DiagnosticDescription(LinePosition? startLocation) 739110"];
656 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 739111"];
657 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739112"];
658 [label="param DiagnosticDescription(Type errorCodeType = null) 739113"];
659 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739114"];
660 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739115"];
661 [label="param DiagnosticDescription(bool isSuppressed = false) 739116"];
662 [label="param DiagnosticDescription(this) 739117"];
663 [label="_code 739118"];
664 [label="_isWarningAsError 739119"];
665 [label="_isSuppressed 739120"];
666 [label="_squiggledText 739121"];
667 [label="_arguments 739122"];
668 [label="_startPosition 739123"];
669 [label="_argumentOrderDoesNotMatter 739124"];
670 [label="_errorCodeType 739125"];
671 [label="_ignoreArgumentsWhenComparing 739126"];
672 [label="_defaultSeverityOpt 739127"];
673 [label="_effectiveSeverityOpt 739128"];
674 [label="_syntaxPredicate 739129"];
675 [label="_showPredicate 739130"];
676 [label="_location 739131"];
677 [label="_argumentsAsStrings 739132"];
678 [label="_code 739133"];
679 [label="_isWarningAsError 739134"];
680 [label="_squiggledText 739135"];
681 [label="_arguments 739136"];
682 [label="_startPosition 739137"];
683 [label="_syntaxPredicate 739138"];
684 [label="_argumentOrderDoesNotMatter 739139"];
685 [label="_errorCodeType = errorCodeType ?? code.GetType(); 739140"];
686 [label="_errorCodeType 739141"];
687 [label="_defaultSeverityOpt 739142"];
688 [label="_effectiveSeverityOpt 739143"];
689 [label="_isSuppressed 739144"];
690 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739145"];
691 [label="var testAssembly = CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ); 739146"];
692 [label="Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null') 739147"];
693 [label="Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null') 739148"];
694 [label="param WithArguments(params object[] arguments) 739149"];
695 [label="param WithArguments(this) 739150"];
696 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739151"];
697 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739152"];
698 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739153"];
699 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739154"];
700 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739155"];
701 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739156"];
702 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739157"];
703 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739158"];
704 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739159"];
705 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739160"];
706 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739161"];
707 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 739162"];
708 [label="param DiagnosticDescription(object code) 739163"];
709 [label="param DiagnosticDescription(bool isWarningAsError) 739164"];
710 [label="param DiagnosticDescription(string squiggledText) 739165"];
711 [label="param DiagnosticDescription(object[] arguments) 739166"];
712 [label="param DiagnosticDescription(LinePosition? startLocation) 739167"];
713 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 739168"];
714 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739169"];
715 [label="param DiagnosticDescription(Type errorCodeType = null) 739170"];
716 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739171"];
717 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739172"];
718 [label="param DiagnosticDescription(bool isSuppressed = false) 739173"];
719 [label="param DiagnosticDescription(this) 739174"];
720 [label="_code 739175"];
721 [label="_isWarningAsError 739176"];
722 [label="_isSuppressed 739177"];
723 [label="_squiggledText 739178"];
724 [label="_arguments 739179"];
725 [label="_startPosition 739180"];
726 [label="_argumentOrderDoesNotMatter 739181"];
727 [label="_errorCodeType 739182"];
728 [label="_ignoreArgumentsWhenComparing 739183"];
729 [label="_defaultSeverityOpt 739184"];
730 [label="_effectiveSeverityOpt 739185"];
731 [label="_syntaxPredicate 739186"];
732 [label="_showPredicate 739187"];
733 [label="_location 739188"];
734 [label="_argumentsAsStrings 739189"];
735 [label="_arguments 739190"];
736 [label="_argumentOrderDoesNotMatter 739191"];
737 [label="var testAssembly = CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ); 739192"];
738 [label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b') 739193"];
739 [label="param Diagnostic(object code) 739194"];
740 [label="param Diagnostic(string squiggledText = null) 739195"];
741 [label="param Diagnostic(object[] arguments = null) 739196"];
742 [label="param Diagnostic(LinePosition? startLocation = null) 739197"];
743 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 739198"];
744 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739199"];
745 [label="param Diagnostic(bool isSuppressed = false) 739200"];
746 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739201"];
747 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739202"];
748 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739203"];
749 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739204"];
750 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739205"];
751 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739206"];
752 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739207"];
753 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 739208"];
754 [label="param Diagnostic(object code) 739209"];
755 [label="param Diagnostic(string squiggledText = null) 739210"];
756 [label="param Diagnostic(object[] arguments = null) 739211"];
757 [label="param Diagnostic(LinePosition? startLocation = null) 739212"];
758 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 739213"];
759 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739214"];
760 [label="param Diagnostic(bool isSuppressed = false) 739215"];
761 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 739216"];
762 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739217"];
763 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739218"];
764 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739219"];
765 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739220"];
766 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739221"];
767 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739222"];
768 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739223"];
769 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739224"];
770 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 739225"];
771 [label="param DiagnosticDescription(object code) 739226"];
772 [label="param DiagnosticDescription(bool isWarningAsError) 739227"];
773 [label="param DiagnosticDescription(string squiggledText) 739228"];
774 [label="param DiagnosticDescription(object[] arguments) 739229"];
775 [label="param DiagnosticDescription(LinePosition? startLocation) 739230"];
776 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 739231"];
777 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739232"];
778 [label="param DiagnosticDescription(Type errorCodeType = null) 739233"];
779 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739234"];
780 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739235"];
781 [label="param DiagnosticDescription(bool isSuppressed = false) 739236"];
782 [label="param DiagnosticDescription(this) 739237"];
783 [label="_code 739238"];
784 [label="_isWarningAsError 739239"];
785 [label="_isSuppressed 739240"];
786 [label="_squiggledText 739241"];
787 [label="_arguments 739242"];
788 [label="_startPosition 739243"];
789 [label="_argumentOrderDoesNotMatter 739244"];
790 [label="_errorCodeType 739245"];
791 [label="_ignoreArgumentsWhenComparing 739246"];
792 [label="_defaultSeverityOpt 739247"];
793 [label="_effectiveSeverityOpt 739248"];
794 [label="_syntaxPredicate 739249"];
795 [label="_showPredicate 739250"];
796 [label="_location 739251"];
797 [label="_argumentsAsStrings 739252"];
798 [label="_code 739253"];
799 [label="_isWarningAsError 739254"];
800 [label="_squiggledText 739255"];
801 [label="_arguments 739256"];
802 [label="_startPosition 739257"];
803 [label="_syntaxPredicate 739258"];
804 [label="_argumentOrderDoesNotMatter 739259"];
805 [label="_errorCodeType = errorCodeType ?? code.GetType(); 739260"];
806 [label="_errorCodeType 739261"];
807 [label="_defaultSeverityOpt 739262"];
808 [label="_effectiveSeverityOpt 739263"];
809 [label="_isSuppressed 739264"];
810 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739265"];
811 [label="var testAssembly = CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ); 739266"];
812 [label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b') 739267"];
813 [label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b') 739268"];
814 [label="param WithArguments(params object[] arguments) 739269"];
815 [label="param WithArguments(this) 739270"];
816 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739271"];
817 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739272"];
818 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739273"];
819 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739274"];
820 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739275"];
821 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739276"];
822 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739277"];
823 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739278"];
824 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739279"];
825 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739280"];
826 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739281"];
827 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 739282"];
828 [label="param DiagnosticDescription(object code) 739283"];
829 [label="param DiagnosticDescription(bool isWarningAsError) 739284"];
830 [label="param DiagnosticDescription(string squiggledText) 739285"];
831 [label="param DiagnosticDescription(object[] arguments) 739286"];
832 [label="param DiagnosticDescription(LinePosition? startLocation) 739287"];
833 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 739288"];
834 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739289"];
835 [label="param DiagnosticDescription(Type errorCodeType = null) 739290"];
836 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739291"];
837 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739292"];
838 [label="param DiagnosticDescription(bool isSuppressed = false) 739293"];
839 [label="param DiagnosticDescription(this) 739294"];
840 [label="_code 739295"];
841 [label="_isWarningAsError 739296"];
842 [label="_isSuppressed 739297"];
843 [label="_squiggledText 739298"];
844 [label="_arguments 739299"];
845 [label="_startPosition 739300"];
846 [label="_argumentOrderDoesNotMatter 739301"];
847 [label="_errorCodeType 739302"];
848 [label="_ignoreArgumentsWhenComparing 739303"];
849 [label="_defaultSeverityOpt 739304"];
850 [label="_effectiveSeverityOpt 739305"];
851 [label="_syntaxPredicate 739306"];
852 [label="_showPredicate 739307"];
853 [label="_location 739308"];
854 [label="_argumentsAsStrings 739309"];
855 [label="_arguments 739310"];
856 [label="_argumentOrderDoesNotMatter 739311"];
857 [label="var testAssembly = CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ); 739312"];
858 [label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a') 739313"];
859 [label="param Diagnostic(object code) 739314"];
860 [label="param Diagnostic(string squiggledText = null) 739315"];
861 [label="param Diagnostic(object[] arguments = null) 739316"];
862 [label="param Diagnostic(LinePosition? startLocation = null) 739317"];
863 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 739318"];
864 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739319"];
865 [label="param Diagnostic(bool isSuppressed = false) 739320"];
866 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739321"];
867 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739322"];
868 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739323"];
869 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739324"];
870 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739325"];
871 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739326"];
872 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739327"];
873 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 739328"];
874 [label="param Diagnostic(object code) 739329"];
875 [label="param Diagnostic(string squiggledText = null) 739330"];
876 [label="param Diagnostic(object[] arguments = null) 739331"];
877 [label="param Diagnostic(LinePosition? startLocation = null) 739332"];
878 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 739333"];
879 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 739334"];
880 [label="param Diagnostic(bool isSuppressed = false) 739335"];
881 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 739336"];
882 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739337"];
883 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739338"];
884 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739339"];
885 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739340"];
886 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739341"];
887 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739342"];
888 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739343"];
889 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 739344"];
890 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 739345"];
891 [label="param DiagnosticDescription(object code) 739346"];
892 [label="param DiagnosticDescription(bool isWarningAsError) 739347"];
893 [label="param DiagnosticDescription(string squiggledText) 739348"];
894 [label="param DiagnosticDescription(object[] arguments) 739349"];
895 [label="param DiagnosticDescription(LinePosition? startLocation) 739350"];
896 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 739351"];
897 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739352"];
898 [label="param DiagnosticDescription(Type errorCodeType = null) 739353"];
899 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739354"];
900 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739355"];
901 [label="param DiagnosticDescription(bool isSuppressed = false) 739356"];
902 [label="param DiagnosticDescription(this) 739357"];
903 [label="_code 739358"];
904 [label="_isWarningAsError 739359"];
905 [label="_isSuppressed 739360"];
906 [label="_squiggledText 739361"];
907 [label="_arguments 739362"];
908 [label="_startPosition 739363"];
909 [label="_argumentOrderDoesNotMatter 739364"];
910 [label="_errorCodeType 739365"];
911 [label="_ignoreArgumentsWhenComparing 739366"];
912 [label="_defaultSeverityOpt 739367"];
913 [label="_effectiveSeverityOpt 739368"];
914 [label="_syntaxPredicate 739369"];
915 [label="_showPredicate 739370"];
916 [label="_location 739371"];
917 [label="_argumentsAsStrings 739372"];
918 [label="_code 739373"];
919 [label="_isWarningAsError 739374"];
920 [label="_squiggledText 739375"];
921 [label="_arguments 739376"];
922 [label="_startPosition 739377"];
923 [label="_syntaxPredicate 739378"];
924 [label="_argumentOrderDoesNotMatter 739379"];
925 [label="_errorCodeType = errorCodeType ?? code.GetType(); 739380"];
926 [label="_errorCodeType 739381"];
927 [label="_defaultSeverityOpt 739382"];
928 [label="_effectiveSeverityOpt 739383"];
929 [label="_isSuppressed 739384"];
930 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 739385"];
931 [label="var testAssembly = CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ); 739386"];
932 [label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a') 739387"];
933 [label="Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a') 739388"];
934 [label="param WithArguments(params object[] arguments) 739389"];
935 [label="param WithArguments(this) 739390"];
936 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739391"];
937 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739392"];
938 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739393"];
939 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739394"];
940 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739395"];
941 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739396"];
942 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739397"];
943 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739398"];
944 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739399"];
945 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739400"];
946 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 739401"];
947 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 739402"];
948 [label="param DiagnosticDescription(object code) 739403"];
949 [label="param DiagnosticDescription(bool isWarningAsError) 739404"];
950 [label="param DiagnosticDescription(string squiggledText) 739405"];
951 [label="param DiagnosticDescription(object[] arguments) 739406"];
952 [label="param DiagnosticDescription(LinePosition? startLocation) 739407"];
953 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 739408"];
954 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 739409"];
955 [label="param DiagnosticDescription(Type errorCodeType = null) 739410"];
956 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 739411"];
957 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 739412"];
958 [label="param DiagnosticDescription(bool isSuppressed = false) 739413"];
959 [label="param DiagnosticDescription(this) 739414"];
960 [label="_code 739415"];
961 [label="_isWarningAsError 739416"];
962 [label="_isSuppressed 739417"];
963 [label="_squiggledText 739418"];
964 [label="_arguments 739419"];
965 [label="_startPosition 739420"];
966 [label="_argumentOrderDoesNotMatter 739421"];
967 [label="_errorCodeType 739422"];
968 [label="_ignoreArgumentsWhenComparing 739423"];
969 [label="_defaultSeverityOpt 739424"];
970 [label="_effectiveSeverityOpt 739425"];
971 [label="_syntaxPredicate 739426"];
972 [label="_showPredicate 739427"];
973 [label="_location 739428"];
974 [label="_argumentsAsStrings 739429"];
975 [label="_arguments 739430"];
976 [label="_argumentOrderDoesNotMatter 739431"];
977 [label="var testAssembly = CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ); 739432"];
978 [label="CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ) 739433"];
979 [label="CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ) 739434"];
980 [label="CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ) 739435"];
981 [label="CreateCompilation(\n@'\nusing ClassAlias = Class1;\npublic class Test\n{\n    ClassAlias a = null;\n    ClassAlias b = null;\n    ClassAlias m() { return null; }\n    void m2(ClassAlias p) { }\n}', references: new List<MetadataReference>() { TestReferences.SymbolsTests.NoPia.NoPIAGenericsAsm1 })\n.VerifyDiagnostics(\n    // (2,20): error CS1769: Type 'System.Collections.Generic.List<FooStruct>' from assembly 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null' cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type.\n    // using ClassAlias = Class1;\n    Diagnostic(ErrorCode.ERR_GenericsUsedAcrossAssemblies, 'Class1').WithArguments('System.Collections.Generic.List<FooStruct>', 'NoPIAGenerics1-Asm1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'),\n    // (6,16): warning CS0414: The field 'Test.b' is assigned but its value is never used\n    //     ClassAlias b = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'b').WithArguments('Test.b'),\n    // (5,16): warning CS0414: The field 'Test.a' is assigned but its value is never used\n    //     ClassAlias a = null;\n    Diagnostic(ErrorCode.WRN_UnreferencedFieldAssg, 'a').WithArguments('Test.a')\n            ) 739436"];
982 [label="param VerifyDiagnostics(this TCompilation c) 739437"];
983 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 739438"];
984 [label="var diagnostics = c.GetDiagnostics(); 739439"];
985 [label="null 739440"];
986 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 739441"];
987 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 739442"];
988 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 739443"];
989 [label="null 739444"];
990 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 739445"];
991 [label="param Imports(CSharpCompilation compilation) 739446"];
992 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 739447"];
993 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 739448"];
994 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 739449"];
995 [label="param Imports(DiagnosticBag diagnostics) 739450"];
996 [label="param Imports(this) 739451"];
997 [label="_compilation 739452"];
998 [label="_diagnostics 739453"];
999 [label="UsingAliases 739454"];
1000 [label="Debug.Assert(usingAliases != null); 739455"];
1001 [label="Debug.Assert(usingAliases != null); 739456"];
1002 [label="Debug.Assert(!usings.IsDefault); 739457"];
1003 [label="Debug.Assert(!externs.IsDefault); 739458"];
1004 [label="_compilation 739459"];
1005 [label="this.UsingAliases 739460"];
1006 [label="this.Usings 739461"];
1007 [label="_diagnostics 739462"];
1008 [label="this.ExternAliases 739463"];
1009 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 739464"];
1010 [label="var diagnostics = c.GetDiagnostics(); 739465"];
1011 [label="param FromGlobalUsings(CSharpCompilation compilation) 739466"];
1012 [label="var usings = compilation.Options.Usings; 739467"];
1013 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 739468"];
1014 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 739469"];
1015 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 739470"];
1016 [label="return Empty; 739471"];
1017 [label="var diagnostics = c.GetDiagnostics(); 739472"];
1018 [label="param Complete(CancellationToken cancellationToken) 739473"];
1019 [label="param Complete(this) 739474"];
1020 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 739475"];
1021 [label="cancellationToken.ThrowIfCancellationRequested(); 739476"];
1022 [label="var incompletePart = _state.NextIncompletePart; 739477"];
1023 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 739478"];
1024 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 739479"];
1025 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 739480"];
1026 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 739481"];
1027 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 739482"];
1028 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 739483"];
1029 [label="Validate() 739484"];
1030 [label="param Validate(this) 739485"];
1031 [label="if (this == Empty)\n            {\n                return;\n            } 739486"];
1032 [label="return; 739487"];
1033 [label="Validate(); 739488"];
1034 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 739489"];
1035 [label="return; 739490"];
1036 [label="param Includes(this BinderFlags self) 739491"];
1037 [label="param Includes(BinderFlags other) 739492"];
1038 [label="return (self & other) == other; 739493"];
1039 [label="var diagnostics = c.GetDiagnostics(); 739494"];
1040 [label="0 739495"];
1041 [label="ExternalScope = 0 739496"];
1042 [label="1 739497"];
1043 [label="TopLevelScope = 1 739498"];
1044 [label="2 739499"];
1045 [label="ValueKindInsignificantBits = 2 739500"];
1046 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 739501"];
1047 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 739502"];
1048 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 739503"];
1049 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 739504"];
1050 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 739505"];
1051 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 739506"];
1052 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 739507"];
1053 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 739508"];
1054 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 739509"];
1055 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 739510"];
1056 [label="10 739511"];
1057 [label="MaxParameterListsForErrorRecovery = 10 739512"];
1058 [label="'<>h__TransparentIdentifier' 739513"];
1059 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 739514"];
1060 [label="s => (MethodSymbol)s 739515"];
1061 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 739516"];
1062 [label="s => (PropertySymbol)s 739517"];
1063 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 739518"];
1064 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 739519"];
1065 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 739520"];
1066 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 739521"];
1067 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 739522"];
1068 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 739523"];
1069 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 739524"];
1070 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 739525"];
1071 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 739526"];
1072 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 739527"];
1073 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 739528"];
1074 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739529"];
1075 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739530"];
1076 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739531"];
1077 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739532"];
1078 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739533"];
1079 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 739534"];
1080 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 739535"];
1081 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 739536"];
1082 [label="param GetWellKnownTypeMember(WellKnownMember member) 739537"];
1083 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 739538"];
1084 [label="param GetWellKnownTypeMember(Location location = null) 739539"];
1085 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 739540"];
1086 [label="param GetWellKnownTypeMember(bool isOptional = false) 739541"];
1087 [label="Debug.Assert((syntax != null) ^ (location != null)); 739542"];
1088 [label="Debug.Assert((syntax != null) ^ (location != null)); 739543"];
1089 [label="Debug.Assert((syntax != null) ^ (location != null)); 739544"];
1090 [label="Debug.Assert((syntax != null) ^ (location != null)); 739545"];
1091 [label="DiagnosticInfo useSiteDiagnostic; 739546"];
1092 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 739547"];
1093 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 739548"];
1094 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 739549"];
1095 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 739550"];
1096 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 739551"];
1097 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 739552"];
1098 [label="param GetWellKnownTypeMember(WellKnownMember member) 739553"];
1099 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 739554"];
1100 [label="param GetWellKnownTypeMember(bool isOptional = false) 739555"];
1101 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 739556"];
1102 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 739557"];
1103 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 739558"];
1104 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739559"];
1105 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739560"];
1106 [label="Debug.Assert(symbol is object); 739561"];
1107 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 739562"];
1108 [label="isInternal = false; 739563"];
1109 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 739564"];
1110 [label="symbol = symbol.ContainingType; 739565"];
1111 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 739566"];
1112 [label="return true; 739567"];
1113 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 739568"];
1114 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739569"];
1115 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739570"];
1116 [label="Debug.Assert(symbol is object); 739571"];
1117 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 739572"];
1118 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 739573"];
1119 [label="symbol = symbol.ContainingType; 739574"];
1120 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 739575"];
1121 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 739576"];
1122 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 739577"];
1123 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 739578"];
1124 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 739579"];
1125 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 739580"];
1126 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 739581"];
1127 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739582"];
1128 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739583"];
1129 [label="Debug.Assert(symbol is object); 739584"];
1130 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 739585"];
1131 [label="isInternal = false; 739586"];
1132 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 739587"];
1133 [label="symbol = symbol.ContainingType; 739588"];
1134 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 739589"];
1135 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739590"];
1136 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739591"];
1137 [label="Debug.Assert(symbol is object); 739592"];
1138 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 739593"];
1139 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 739594"];
1140 [label="symbol = symbol.ContainingType; 739595"];
1141 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 739596"];
1142 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 739597"];
1143 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 739598"];
1144 [label="return memberSymbol; 739599"];
1145 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 739600"];
1146 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 739601"];
1147 [label="return memberSymbol; 739602"];
1148 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739603"];
1149 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739604"];
1150 [label="Debug.Assert(symbol is object); 739605"];
1151 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 739606"];
1152 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 739607"];
1153 [label="symbol = symbol.ContainingType; 739608"];
1154 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 739609"];
1155 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 739610"];
1156 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 739611"];
1157 [label="Debug.Assert(symbol is object); 739612"];
1158 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 739613"];
1159 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 739614"];
1160 [label="symbol = symbol.ContainingType; 739615"];
1161 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 739616"];
1162 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 739617"];
1163 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 739618"];
1164 [label="return memberSymbol; 739619"];
1165 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 739620"];
1166 [label="return memberSymbol; 739621"];
1167 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 739622"];
1168 [label="return memberSymbol; 739623"];
1169 [label="return memberSymbol; 739624"];
1170 [label="param BinderFactory(CSharpCompilation compilation) 739625"];
1171 [label="param BinderFactory(SyntaxTree syntaxTree) 739626"];
1172 [label="param BinderFactory(bool ignoreAccessibility) 739627"];
1173 [label="param BinderFactory(this) 739628"];
1174 [label="_binderCache 739629"];
1175 [label="_compilation 739630"];
1176 [label="_syntaxTree 739631"];
1177 [label="_buckStopsHereBinder 739632"];
1178 [label="_ignoreAccessibility 739633"];
1179 [label="_binderFactoryVisitorPool 739634"];
1180 [label="_compilation 739635"];
1181 [label="_syntaxTree 739636"];
1182 [label="_ignoreAccessibility 739637"];
1183 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 739638"];
1184 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 739639"];
1185 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 739640"];
1186 [label="_binderFactoryVisitorPool 739641"];
1187 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 739642"];
1188 [label="_binderCache 739643"];
1189 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 739644"];
1190 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 739645"];
1191 [label="new BuckStopsHereBinder(compilation) 739646"];
1192 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 739647"];
1193 [label="param BuckStopsHereBinder(this) 739648"];
1194 [label="compilation 739649"];
1195 [label="param BuckStopsHereBinder(this) 739650"];
1196 [label="param Binder(CSharpCompilation compilation) 739651"];
1197 [label="param Binder(this) 739652"];
1198 [label="internal CSharpCompilation Compilation { get; } 739653"];
1199 [label="Flags 739654"];
1200 [label="protected internal Binder? Next { get; } 739655"];
1201 [label="_lazyConversions 739656"];
1202 [label="_lazyOverloadResolution 739657"];
1203 [label="RoslynDebug.Assert(compilation != null); 739658"];
1204 [label="RoslynDebug.Assert(compilation != null); 739659"];
1205 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 739660"];
1206 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 739661"];
1207 [label="this.Flags 739662"];
1208 [label="this.Compilation 739663"];
1209 [label="_buckStopsHereBinder 739664"];
1210 [label="var diagnostics = c.GetDiagnostics(); 739665"];
1211 [label="param GetImportsBinder(CSharpSyntaxNode unit) 739666"];
1212 [label="param GetImportsBinder(bool inUsing = false) 739667"];
1213 [label="param GetImportsBinder(this) 739668"];
1214 [label="switch (unit.Kind())\n            {\n                case SyntaxKind.NamespaceDeclaration:\n                    {\n                        BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate();\n                        visitor.Initialize(0, null, null);\n                        Binder result = visitor.VisitNamespaceDeclaration((NamespaceDeclarationSyntax)unit, unit.SpanStart, inBody: true, inUsing: inUsing);\n                        _binderFactoryVisitorPool.Free(visitor);\n                        return result;\n                    }\n\n                case SyntaxKind.CompilationUnit:\n                    // imports are bound by the Script class binder:\n                    {\n                        BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate();\n                        visitor.Initialize(0, null, null);\n                        Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript);\n                        _binderFactoryVisitorPool.Free(visitor);\n                        return result;\n                    }\n\n                default:\n                    return null;\n            } 739669"];
1215 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 739670"];
1216 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 739671"];
1217 [label="param BinderFactoryVisitor(BinderFactory factory) 739672"];
1218 [label="param BinderFactoryVisitor(this) 739673"];
1219 [label="param BinderFactoryVisitor(this) 739674"];
1220 [label="_position 739675"];
1221 [label="_memberDeclarationOpt 739676"];
1222 [label="_memberOpt 739677"];
1223 [label="_factory 739678"];
1224 [label="_factory 739679"];
1225 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 739680"];
1226 [label="visitor.Initialize(0, null, null); 739681"];
1227 [label="visitor.Initialize(0, null, null) 739682"];
1228 [label="param Initialize(int position) 739683"];
1229 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 739684"];
1230 [label="param Initialize(Symbol memberOpt) 739685"];
1231 [label="param Initialize(this) 739686"];
1232 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 739687"];
1233 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 739688"];
1234 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 739689"];
1235 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 739690"];
1236 [label="_position 739691"];
1237 [label="_memberDeclarationOpt 739692"];
1238 [label="_memberOpt 739693"];
1239 [label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 739694"];
1240 [label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 739695"];
1241 [label="InScript 739696"];
1242 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 739697"];
1243 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 739698"];
1244 [label="Binder result = visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript); 739699"];
1245 [label="visitor.VisitCompilationUnit((CompilationUnitSyntax)unit, inUsing: inUsing, inScript: InScript) 739700"];
1246 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 739701"];
1247 [label="param VisitCompilationUnit(bool inUsing) 739702"];
1248 [label="param VisitCompilationUnit(bool inScript) 739703"];
1249 [label="param VisitCompilationUnit(this) 739704"];
1250 [label="syntaxTree 739705"];
1251 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 739706"];
1252 [label="return _factory._syntaxTree; 739707"];
1253 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 739708"];
1254 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 739709"];
1255 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 739710"];
1256 [label="inUsing 739711"];
1257 [label="inScript 739712"];
1258 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 739713"];
1259 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 739714"];
1260 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 739715"];
1261 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 739716"];
1262 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 739717"];
1263 [label="param CreateBinderCacheKey(NodeUsage usage) 739718"];
1264 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 739719"];
1265 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 739720"];
1266 [label="return new BinderCacheKey(node, usage); 739721"];
1267 [label="return new BinderCacheKey(node, usage); 739722"];
1268 [label="return new BinderCacheKey(node, usage); 739723"];
1269 [label="new BinderCacheKey(node, usage) 739724"];
1270 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 739725"];
1271 [label="param BinderCacheKey(NodeUsage usage) 739726"];
1272 [label="param BinderCacheKey(this) 739727"];
1273 [label="this.syntaxNode 739728"];
1274 [label="this.usage 739729"];
1275 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 739730"];
1276 [label="Binder result; 739731"];
1277 [label="binderCache 739732"];
1278 [label="get\n                {\n                    return _factory._binderCache;\n                } 739733"];
1279 [label="return _factory._binderCache; 739734"];
1280 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 739735"];
1281 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 739736"];
1282 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 739737"];
1283 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 739738"];
1284 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 739739"];
1285 [label="param GetHashCode(this) 739740"];
1286 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 739741"];
1287 [label="this.buckStopsHereBinder 739742"];
1288 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 739743"];
1289 [label="return _factory._buckStopsHereBinder; 739744"];
1290 [label="result = this.buckStopsHereBinder; 739745"];
1291 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 739746"];
1292 [label="compilation 739747"];
1293 [label="get\n                {\n                    return _factory._compilation;\n                } 739748"];
1294 [label="return _factory._compilation; 739749"];
1295 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 739750"];
1296 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 739751"];
1297 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 739752"];
1298 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 739753"];
1299 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 739754"];
1300 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 739755"];
1301 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 739756"];
1302 [label="param InContainerBinder(Binder next) 739757"];
1303 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 739758"];
1304 [label="param InContainerBinder(bool inUsing) 739759"];
1305 [label="param InContainerBinder(this) 739760"];
1306 [label="next 739761"];
1307 [label="param InContainerBinder(this) 739762"];
1308 [label="param Binder(Binder next) 739763"];
1309 [label="param Binder(this) 739764"];
1310 [label="param Binder(Conversions? conversions = null) 739765"];
1311 [label="RoslynDebug.Assert(next != null); 739766"];
1312 [label="RoslynDebug.Assert(next != null); 739767"];
1313 [label="Next 739768"];
1314 [label="this.Flags 739769"];
1315 [label="this.Compilation 739770"];
1316 [label="_lazyConversions 739771"];
1317 [label="_container 739772"];
1318 [label="_computeImports 739773"];
1319 [label="_lazyImports 739774"];
1320 [label="_lazyImportChain 739775"];
1321 [label="_lazyQuickAttributeChecker 739776"];
1322 [label="Debug.Assert((object)container != null); 739777"];
1323 [label="Debug.Assert((object)container != null); 739778"];
1324 [label="Debug.Assert(declarationSyntax != null); 739779"];
1325 [label="Debug.Assert(declarationSyntax != null); 739780"];
1326 [label="_container 739781"];
1327 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 739782"];
1328 [label="_computeImports 739783"];
1329 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 739784"];
1330 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 739785"];
1331 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 739786"];
1332 [label="_usingsSyntax 739787"];
1333 [label="compilation 739788"];
1334 [label="get\n                {\n                    return _factory._compilation;\n                } 739789"];
1335 [label="return _factory._compilation; 739790"];
1336 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 739791"];
1337 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 739792"];
1338 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 739793"];
1339 [label="binderCache 739794"];
1340 [label="return _factory._binderCache; 739795"];
1341 [label="binderCache.TryAdd(key, result); 739796"];
1342 [label="binderCache.TryAdd(key, result); 739797"];
1343 [label="binderCache.TryAdd(key, result); 739798"];
1344 [label="binderCache.TryAdd(key, result); 739799"];
1345 [label="binderCache.TryAdd(key, result); 739800"];
1346 [label="return result; 739801"];
1347 [label="_binderFactoryVisitorPool.Free(visitor); 739802"];
1348 [label="_binderFactoryVisitorPool.Free(visitor); 739803"];
1349 [label="return result; 739804"];
1350 [label="var diagnostics = c.GetDiagnostics(); 739805"];
1351 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 739806"];
1352 [label="param GetImports(this) 739807"];
1353 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 739808"];
1354 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 739809"];
1355 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 739810"];
1356 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 739811"];
1357 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 739812"];
1358 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 739813"];
1359 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 739814"];
1360 [label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 739815"];
1361 [label="param FromSyntax(InContainerBinder binder) 739816"];
1362 [label="param FromSyntax(ConsList<TypeSymbol> basesBeingResolved) 739817"];
1363 [label="param FromSyntax(bool inUsing) 739818"];
1364 [label="SyntaxList<UsingDirectiveSyntax> usingDirectives; 739819"];
1365 [label="usingDirectives 739820"];
1366 [label="SyntaxList<ExternAliasDirectiveSyntax> externAliasDirectives; 739821"];
1367 [label="externAliasDirectives 739822"];
1368 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n            {\n                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings;\n                externAliasDirectives = compilationUnit.Externs;\n            }\n            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n            {\n                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : namespaceDecl.Usings;\n                externAliasDirectives = namespaceDecl.Externs;\n            }\n            else\n            {\n                return Empty;\n            } 739823"];
1369 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 739824"];
1370 [label="inUsing 739825"];
1371 [label="compilationUnit.Usings 739826"];
1372 [label="usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings; 739827"];
1373 [label="externAliasDirectives = compilationUnit.Externs; 739828"];
1374 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 739829"];
1375 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 739830"];
1376 [label="var diagnostics = new DiagnosticBag(); 739831"];
1377 [label="var compilation = binder.Compilation; 739832"];
1378 [label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 739833"];
1379 [label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 739834"];
1380 [label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 739835"];
1381 [label="BuildExternAliases(externAliasDirectives, binder, diagnostics) 739836"];
1382 [label="param BuildExternAliases(SyntaxList<ExternAliasDirectiveSyntax> syntaxList) 739837"];
1383 [label="param BuildExternAliases(InContainerBinder binder) 739838"];
1384 [label="param BuildExternAliases(DiagnosticBag diagnostics) 739839"];
1385 [label="CSharpCompilation compilation = binder.Compilation; 739840"];
1386 [label="var builder = ArrayBuilder<AliasAndExternAliasDirective>.GetInstance(); 739841"];
1387 [label="foreach (ExternAliasDirectiveSyntax aliasSyntax in syntaxList)\n            {\n                compilation.RecordImport(aliasSyntax);\n\n                // Extern aliases not allowed in interactive submissions:\n                if (compilation.IsSubmission)\n                {\n                    diagnostics.Add(ErrorCode.ERR_ExternAliasNotAllowed, aliasSyntax.Location);\n                    continue;\n                }\n\n                // some n^2 action, but n should be very small.\n                foreach (var existingAlias in builder)\n                {\n                    if (existingAlias.Alias.Name == aliasSyntax.Identifier.ValueText)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_DuplicateAlias, existingAlias.Alias.Locations[0], existingAlias.Alias.Name);\n                        break;\n                    }\n                }\n\n                if (aliasSyntax.Identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                {\n                    diagnostics.Add(ErrorCode.ERR_GlobalExternAlias, aliasSyntax.Identifier.GetLocation());\n                }\n\n                builder.Add(new AliasAndExternAliasDirective(new AliasSymbol(binder, aliasSyntax), aliasSyntax));\n            } 739842"];
1388 [label="foreach (ExternAliasDirectiveSyntax aliasSyntax in syntaxList)\n            {\n                compilation.RecordImport(aliasSyntax);\n\n                // Extern aliases not allowed in interactive submissions:\n                if (compilation.IsSubmission)\n                {\n                    diagnostics.Add(ErrorCode.ERR_ExternAliasNotAllowed, aliasSyntax.Location);\n                    continue;\n                }\n\n                // some n^2 action, but n should be very small.\n                foreach (var existingAlias in builder)\n                {\n                    if (existingAlias.Alias.Name == aliasSyntax.Identifier.ValueText)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_DuplicateAlias, existingAlias.Alias.Locations[0], existingAlias.Alias.Name);\n                        break;\n                    }\n                }\n\n                if (aliasSyntax.Identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                {\n                    diagnostics.Add(ErrorCode.ERR_GlobalExternAlias, aliasSyntax.Identifier.GetLocation());\n                }\n\n                builder.Add(new AliasAndExternAliasDirective(new AliasSymbol(binder, aliasSyntax), aliasSyntax));\n            } 739843"];
1389 [label="return builder.ToImmutableAndFree(); 739844"];
1390 [label="var externAliases = BuildExternAliases(externAliasDirectives, binder, diagnostics); 739845"];
1391 [label="var usings = ArrayBuilder<NamespaceOrTypeAndUsingDirective>.GetInstance(); 739846"];
1392 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Builder usingAliases = null; 739847"];
1393 [label="if (usingDirectives.Count > 0)\n            {\n                // A binder that contains the extern aliases but not the usings. The resolution of the target of a using directive or alias \n                // should not make use of other peer usings.\n                Binder usingsBinder;\n                if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)\n                {\n                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);\n                }\n                else\n                {\n                    var imports = externAliases.Length == 0\n                        ? Empty\n                        : new Imports(\n                            compilation,\n                            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n                            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n                            externAliases,\n                            diagnostics: null);\n                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);\n                }\n\n                var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance<NamespaceOrTypeSymbol>();\n\n                foreach (var usingDirective in usingDirectives)\n                {\n                    compilation.RecordImport(usingDirective);\n\n                    if (usingDirective.Alias != null)\n                    {\n                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;\n                        Location location = usingDirective.Alias.Name.Location;\n\n                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);\n                        }\n\n                        if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        }\n\n                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);\n\n                        string identifierValueText = identifier.ValueText;\n                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        }\n                    }\n                    else\n                    {\n                        if (usingDirective.Name.IsMissing)\n                        {\n                            //don't try to lookup namespaces inserted by parser error recovery\n                            continue;\n                        }\n\n                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);\n                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;\n                        if (imported.Kind == SymbolKind.Namespace)\n                        {\n                            if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            }\n                        }\n                        else if (imported.Kind == SymbolKind.NamedType)\n                        {\n                            if (usingDirective.StaticKeyword == default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                var importedType = (NamedTypeSymbol)imported;\n                                if (uniqueUsings.Contains(importedType))\n                                {\n                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);\n                                }\n                                else\n                                {\n                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);\n\n                                    uniqueUsings.Add(importedType);\n                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));\n                                }\n                            }\n                        }\n                        else if (imported.Kind != SymbolKind.ErrorType)\n                        {\n                            // Do not report additional error if the symbol itself is erroneous.\n\n                            // error: '<symbol>' is a '<symbol kind>' but is used as 'type or namespace'\n                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,\n                                usingDirective.Name,\n                                imported.GetKindText(),\n                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());\n                        }\n                    }\n                }\n\n                uniqueUsings.Free();\n            } 739848"];
1394 [label="if (usingDirectives.Count > 0)\n            {\n                // A binder that contains the extern aliases but not the usings. The resolution of the target of a using directive or alias \n                // should not make use of other peer usings.\n                Binder usingsBinder;\n                if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)\n                {\n                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);\n                }\n                else\n                {\n                    var imports = externAliases.Length == 0\n                        ? Empty\n                        : new Imports(\n                            compilation,\n                            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n                            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n                            externAliases,\n                            diagnostics: null);\n                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);\n                }\n\n                var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance<NamespaceOrTypeSymbol>();\n\n                foreach (var usingDirective in usingDirectives)\n                {\n                    compilation.RecordImport(usingDirective);\n\n                    if (usingDirective.Alias != null)\n                    {\n                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;\n                        Location location = usingDirective.Alias.Name.Location;\n\n                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);\n                        }\n\n                        if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        }\n\n                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);\n\n                        string identifierValueText = identifier.ValueText;\n                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        }\n                    }\n                    else\n                    {\n                        if (usingDirective.Name.IsMissing)\n                        {\n                            //don't try to lookup namespaces inserted by parser error recovery\n                            continue;\n                        }\n\n                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);\n                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;\n                        if (imported.Kind == SymbolKind.Namespace)\n                        {\n                            if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            }\n                        }\n                        else if (imported.Kind == SymbolKind.NamedType)\n                        {\n                            if (usingDirective.StaticKeyword == default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                var importedType = (NamedTypeSymbol)imported;\n                                if (uniqueUsings.Contains(importedType))\n                                {\n                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);\n                                }\n                                else\n                                {\n                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);\n\n                                    uniqueUsings.Add(importedType);\n                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));\n                                }\n                            }\n                        }\n                        else if (imported.Kind != SymbolKind.ErrorType)\n                        {\n                            // Do not report additional error if the symbol itself is erroneous.\n\n                            // error: '<symbol>' is a '<symbol kind>' but is used as 'type or namespace'\n                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,\n                                usingDirective.Name,\n                                imported.GetKindText(),\n                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());\n                        }\n                    }\n                }\n\n                uniqueUsings.Free();\n            } 739849"];
1395 [label="Binder usingsBinder; 739850"];
1396 [label="if (declarationSyntax.SyntaxTree.Options.Kind != SourceCodeKind.Regular)\n                {\n                    usingsBinder = compilation.GetBinderFactory(declarationSyntax.SyntaxTree).GetImportsBinder(declarationSyntax, inUsing: true);\n                }\n                else\n                {\n                    var imports = externAliases.Length == 0\n                        ? Empty\n                        : new Imports(\n                            compilation,\n                            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n                            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n                            externAliases,\n                            diagnostics: null);\n                    usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports);\n                } 739851"];
1397 [label="var imports = externAliases.Length == 0\n                        ? Empty\n                        : new Imports(\n                            compilation,\n                            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n                            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n                            externAliases,\n                            diagnostics: null); 739852"];
1398 [label="var imports = externAliases.Length == 0\n                        ? Empty\n                        : new Imports(\n                            compilation,\n                            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n                            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n                            externAliases,\n                            diagnostics: null); 739853"];
1399 [label="externAliases.Length == 0 739854"];
1400 [label="binder.Container 739855"];
1401 [label="get\n            {\n                return _container;\n            } 739856"];
1402 [label="return _container; 739857"];
1403 [label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 739858"];
1404 [label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 739859"];
1405 [label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 739860"];
1406 [label="usingsBinder = new InContainerBinder(binder.Container, binder.Next, imports); 739861"];
1407 [label="new InContainerBinder(binder.Container, binder.Next, imports) 739862"];
1408 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 739863"];
1409 [label="param InContainerBinder(Binder next) 739864"];
1410 [label="param InContainerBinder(Imports imports = null) 739865"];
1411 [label="param InContainerBinder(this) 739866"];
1412 [label="next 739867"];
1413 [label="param InContainerBinder(this) 739868"];
1414 [label="param Binder(Binder next) 739869"];
1415 [label="RoslynDebug.Assert(next != null); 739870"];
1416 [label="RoslynDebug.Assert(next != null); 739871"];
1417 [label="_container 739872"];
1418 [label="_computeImports 739873"];
1419 [label="Debug.Assert((object)container != null || imports != null); 739874"];
1420 [label="Debug.Assert((object)container != null || imports != null); 739875"];
1421 [label="_container 739876"];
1422 [label="_lazyImports = imports ?? Imports.Empty; 739877"];
1423 [label="_lazyImports 739878"];
1424 [label="var uniqueUsings = SpecializedSymbolCollections.GetPooledSymbolHashSetInstance<NamespaceOrTypeSymbol>(); 739879"];
1425 [label="foreach (var usingDirective in usingDirectives)\n                {\n                    compilation.RecordImport(usingDirective);\n\n                    if (usingDirective.Alias != null)\n                    {\n                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;\n                        Location location = usingDirective.Alias.Name.Location;\n\n                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);\n                        }\n\n                        if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        }\n\n                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);\n\n                        string identifierValueText = identifier.ValueText;\n                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        }\n                    }\n                    else\n                    {\n                        if (usingDirective.Name.IsMissing)\n                        {\n                            //don't try to lookup namespaces inserted by parser error recovery\n                            continue;\n                        }\n\n                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);\n                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;\n                        if (imported.Kind == SymbolKind.Namespace)\n                        {\n                            if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            }\n                        }\n                        else if (imported.Kind == SymbolKind.NamedType)\n                        {\n                            if (usingDirective.StaticKeyword == default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                var importedType = (NamedTypeSymbol)imported;\n                                if (uniqueUsings.Contains(importedType))\n                                {\n                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);\n                                }\n                                else\n                                {\n                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);\n\n                                    uniqueUsings.Add(importedType);\n                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));\n                                }\n                            }\n                        }\n                        else if (imported.Kind != SymbolKind.ErrorType)\n                        {\n                            // Do not report additional error if the symbol itself is erroneous.\n\n                            // error: '<symbol>' is a '<symbol kind>' but is used as 'type or namespace'\n                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,\n                                usingDirective.Name,\n                                imported.GetKindText(),\n                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());\n                        }\n                    }\n                } 739880"];
1426 [label="compilation.RecordImport(usingDirective); 739881"];
1427 [label="compilation.RecordImport(usingDirective); 739882"];
1428 [label="if (usingDirective.Alias != null)\n                    {\n                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;\n                        Location location = usingDirective.Alias.Name.Location;\n\n                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);\n                        }\n\n                        if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        }\n\n                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);\n\n                        string identifierValueText = identifier.ValueText;\n                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        }\n                    }\n                    else\n                    {\n                        if (usingDirective.Name.IsMissing)\n                        {\n                            //don't try to lookup namespaces inserted by parser error recovery\n                            continue;\n                        }\n\n                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);\n                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;\n                        if (imported.Kind == SymbolKind.Namespace)\n                        {\n                            if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            }\n                        }\n                        else if (imported.Kind == SymbolKind.NamedType)\n                        {\n                            if (usingDirective.StaticKeyword == default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                var importedType = (NamedTypeSymbol)imported;\n                                if (uniqueUsings.Contains(importedType))\n                                {\n                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);\n                                }\n                                else\n                                {\n                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);\n\n                                    uniqueUsings.Add(importedType);\n                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));\n                                }\n                            }\n                        }\n                        else if (imported.Kind != SymbolKind.ErrorType)\n                        {\n                            // Do not report additional error if the symbol itself is erroneous.\n\n                            // error: '<symbol>' is a '<symbol kind>' but is used as 'type or namespace'\n                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,\n                                usingDirective.Name,\n                                imported.GetKindText(),\n                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());\n                        }\n                    } 739883"];
1429 [label="if (usingDirective.Alias != null)\n                    {\n                        SyntaxToken identifier = usingDirective.Alias.Name.Identifier;\n                        Location location = usingDirective.Alias.Name.Location;\n\n                        if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);\n                        }\n\n                        if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        }\n\n                        SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location);\n\n                        string identifierValueText = identifier.ValueText;\n                        if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        }\n                    }\n                    else\n                    {\n                        if (usingDirective.Name.IsMissing)\n                        {\n                            //don't try to lookup namespaces inserted by parser error recovery\n                            continue;\n                        }\n\n                        var declarationBinder = usingsBinder.WithAdditionalFlags(BinderFlags.SuppressConstraintChecks);\n                        var imported = declarationBinder.BindNamespaceOrTypeSymbol(usingDirective.Name, diagnostics, basesBeingResolved).NamespaceOrTypeSymbol;\n                        if (imported.Kind == SymbolKind.Namespace)\n                        {\n                            if (usingDirective.StaticKeyword != default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingType, usingDirective.Name.Location, imported);\n                            }\n                            else if (uniqueUsings.Contains(imported))\n                            {\n                                diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                uniqueUsings.Add(imported);\n                                usings.Add(new NamespaceOrTypeAndUsingDirective(imported, usingDirective));\n                            }\n                        }\n                        else if (imported.Kind == SymbolKind.NamedType)\n                        {\n                            if (usingDirective.StaticKeyword == default(SyntaxToken))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_BadUsingNamespace, usingDirective.Name.Location, imported);\n                            }\n                            else\n                            {\n                                var importedType = (NamedTypeSymbol)imported;\n                                if (uniqueUsings.Contains(importedType))\n                                {\n                                    diagnostics.Add(ErrorCode.WRN_DuplicateUsing, usingDirective.Name.Location, importedType);\n                                }\n                                else\n                                {\n                                    declarationBinder.ReportDiagnosticsIfObsolete(diagnostics, importedType, usingDirective.Name, hasBaseReceiver: false);\n\n                                    uniqueUsings.Add(importedType);\n                                    usings.Add(new NamespaceOrTypeAndUsingDirective(importedType, usingDirective));\n                                }\n                            }\n                        }\n                        else if (imported.Kind != SymbolKind.ErrorType)\n                        {\n                            // Do not report additional error if the symbol itself is erroneous.\n\n                            // error: '<symbol>' is a '<symbol kind>' but is used as 'type or namespace'\n                            diagnostics.Add(ErrorCode.ERR_BadSKknown, usingDirective.Name.Location,\n                                usingDirective.Name,\n                                imported.GetKindText(),\n                                MessageID.IDS_SK_TYPE_OR_NAMESPACE.Localize());\n                        }\n                    } 739884"];
1430 [label="SyntaxToken identifier = usingDirective.Alias.Name.Identifier; 739885"];
1431 [label="Location location = usingDirective.Alias.Name.Location; 739886"];
1432 [label="if (identifier.ContextualKind() == SyntaxKind.GlobalKeyword)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_GlobalAliasDefn, location);\n                        } 739887"];
1433 [label="if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        } 739888"];
1434 [label="if (usingDirective.StaticKeyword != default(SyntaxToken))\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoAliasHere, location);\n                        } 739889"];
1435 [label="SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location); 739890"];
1436 [label="SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location); 739891"];
1437 [label="SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location); 739892"];
1438 [label="SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location); 739893"];
1439 [label="SourceMemberContainerTypeSymbol.ReportTypeNamedRecord(identifier.Text, compilation, diagnostics, location); 739894"];
1440 [label="string identifierValueText = identifier.ValueText; 739895"];
1441 [label="if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        } 739896"];
1442 [label="if (usingAliases != null && usingAliases.ContainsKey(identifierValueText))\n                        {\n                            // Suppress diagnostics if we're already broken.\n                            if (!usingDirective.Name.IsMissing)\n                            {\n                                // The using alias '{0}' appeared previously in this namespace\n                                diagnostics.Add(ErrorCode.ERR_DuplicateAlias, location, identifierValueText);\n                            }\n                        }\n                        else\n                        {\n                            // an O(m*n) algorithm here but n (number of extern aliases) will likely be very small.\n                            foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            }\n\n                            if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            }\n\n                            // construct the alias sym with the binder for which we are building imports. That\n                            // way the alias target can make use of extern alias definitions.\n                            usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective));\n                        } 739897"];
1443 [label="foreach (var externAlias in externAliases)\n                            {\n                                if (externAlias.Alias.Name == identifierValueText)\n                                {\n                                    // The using alias '{0}' appeared previously in this namespace\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateAlias, usingDirective.Location, identifierValueText);\n                                    break;\n                                }\n                            } 739898"];
1444 [label="if (usingAliases == null)\n                            {\n                                usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>();\n                            } 739899"];
1445 [label="usingAliases = ImmutableDictionary.CreateBuilder<string, AliasAndUsingDirective>(); 739900"];
1446 [label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739901"];
1447 [label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739902"];
1448 [label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739903"];
1449 [label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739904"];
1450 [label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739905"];
1451 [label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739906"];
1452 [label="new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective) 739907"];
1453 [label="param AliasAndUsingDirective(AliasSymbol alias) 739908"];
1454 [label="param AliasAndUsingDirective(UsingDirectiveSyntax usingDirective) 739909"];
1455 [label="param AliasAndUsingDirective(this) 739910"];
1456 [label="this.Alias 739911"];
1457 [label="this.UsingDirective 739912"];
1458 [label="usingAliases.Add(identifierValueText, new AliasAndUsingDirective(new AliasSymbol(usingsBinder, usingDirective.Name, usingDirective.Alias), usingDirective)); 739913"];
1459 [label="uniqueUsings.Free(); 739914"];
1460 [label="if (diagnostics.IsEmptyWithoutResolution)\n            {\n                diagnostics = null;\n            } 739915"];
1461 [label="diagnostics = null; 739916"];
1462 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739917"];
1463 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739918"];
1464 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739919"];
1465 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739920"];
1466 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739921"];
1467 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739922"];
1468 [label="return new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics); 739923"];
1469 [label="new Imports(compilation, usingAliases.ToImmutableDictionaryOrEmpty(), usings.ToImmutableAndFree(), externAliases, diagnostics) 739924"];
1470 [label="param Imports(CSharpCompilation compilation) 739925"];
1471 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 739926"];
1472 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 739927"];
1473 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 739928"];
1474 [label="param Imports(DiagnosticBag diagnostics) 739929"];
1475 [label="param Imports(this) 739930"];
1476 [label="_compilation 739931"];
1477 [label="_diagnostics 739932"];
1478 [label="UsingAliases 739933"];
1479 [label="Debug.Assert(usingAliases != null); 739934"];
1480 [label="Debug.Assert(usingAliases != null); 739935"];
1481 [label="Debug.Assert(!usings.IsDefault); 739936"];
1482 [label="Debug.Assert(!externs.IsDefault); 739937"];
1483 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 739938"];
1484 [label="return _lazyImports; 739939"];
1485 [label="Validate() 739940"];
1486 [label="param Validate(this) 739941"];
1487 [label="if (this == Empty)\n            {\n                return;\n            } 739942"];
1488 [label="DiagnosticBag semanticDiagnostics = _compilation.DeclarationDiagnostics; 739943"];
1489 [label="alias.Alias.GetAliasTarget(basesBeingResolved: null); 739944"];
1490 [label="param WithAdditionalFlags(BinderFlags flags) 739945"];
1491 [label="param WithAdditionalFlags(this) 739946"];
1492 [label="return this.Flags.Includes(flags)\n                ? this\n                : new Binder(this, this.Flags | flags); 739947"];
1493 [label="return this.Flags.Includes(flags)\n                ? this\n                : new Binder(this, this.Flags | flags); 739948"];
1494 [label="this.Flags.Includes(flags) 739949"];
1495 [label="param Includes(this BinderFlags self) 739950"];
1496 [label="param Includes(BinderFlags other) 739951"];
1497 [label="return (self & other) == other; 739952"];
1498 [label="new Binder(this, this.Flags | flags) 739953"];
1499 [label="param Binder(Binder next) 739954"];
1500 [label="param Binder(BinderFlags flags) 739955"];
1501 [label="param Binder(this) 739956"];
1502 [label="RoslynDebug.Assert(next != null); 739957"];
1503 [label="RoslynDebug.Assert(next != null); 739958"];
1504 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 739959"];
1505 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 739960"];
1506 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 739961"];
1507 [label="param Includes(this BinderFlags self) 739962"];
1508 [label="param Includes(BinderFlags other) 739963"];
1509 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 739964"];
1510 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 739965"];
1511 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 739966"];
1512 [label="param Includes(this BinderFlags self) 739967"];
1513 [label="param Includes(BinderFlags other) 739968"];
1514 [label="Next 739969"];
1515 [label="this.Flags 739970"];
1516 [label="this.Compilation 739971"];
1517 [label="alias.Alias.GetAliasTarget(basesBeingResolved: null); 739972"];
1518 [label="param BindNamespaceOrTypeSymbol(ExpressionSyntax syntax) 739973"];
1519 [label="param BindNamespaceOrTypeSymbol(DiagnosticBag diagnostics) 739974"];
1520 [label="param BindNamespaceOrTypeSymbol(ConsList<TypeSymbol> basesBeingResolved = null) 739975"];
1521 [label="param BindNamespaceOrTypeSymbol(this) 739976"];
1522 [label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 739977"];
1523 [label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 739978"];
1524 [label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 739979"];
1525 [label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 739980"];
1526 [label="return BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null); 739981"];
1527 [label="BindNamespaceOrTypeSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null) 739982"];
1528 [label="param BindNamespaceOrTypeSymbol(ExpressionSyntax syntax) 739983"];
1529 [label="param BindNamespaceOrTypeSymbol(DiagnosticBag diagnostics) 739984"];
1530 [label="param BindNamespaceOrTypeSymbol(ConsList<TypeSymbol> basesBeingResolved) 739985"];
1531 [label="param BindNamespaceOrTypeSymbol(bool suppressUseSiteDiagnostics) 739986"];
1532 [label="param BindNamespaceOrTypeSymbol(this) 739987"];
1533 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 739988"];
1534 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 739989"];
1535 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 739990"];
1536 [label="var result = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 739991"];
1537 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 739992"];
1538 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 739993"];
1539 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 739994"];
1540 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 739995"];
1541 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 739996"];
1542 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 739997"];
1543 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 739998"];
1544 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 739999"];
1545 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 740000"];
1546 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 740001"];
1547 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 740002"];
1548 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 740003"];
1549 [label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 740004"];
1550 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 740005"];
1551 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 740006"];
1552 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 740007"];
1553 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 740008"];
1554 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 740009"];
1555 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 740010"];
1556 [label="var identifierValueText = node.Identifier.ValueText; 740011"];
1557 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 740012"];
1558 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740013"];
1559 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740014"];
1560 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740015"];
1561 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740016"];
1562 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740017"];
1563 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 740018"];
1564 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 740019"];
1565 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 740020"];
1566 [label="param CreateErrorIfLookupOnTypeParameter(string name) 740021"];
1567 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 740022"];
1568 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 740023"];
1569 [label="param CreateErrorIfLookupOnTypeParameter(this) 740024"];
1570 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 740025"];
1571 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 740026"];
1572 [label="return null; 740027"];
1573 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 740028"];
1574 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 740029"];
1575 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 740030"];
1576 [label="CreatePool() 740031"];
1577 [label="ObjectPool<LookupResult> pool = null; 740032"];
1578 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 740033"];
1579 [label="pool = new ObjectPool<LookupResult>(() => new LookupResult(pool), 128); 740034"];
1580 [label="return pool; 740035"];
1581 [label="s_poolInstance = CreatePool() 740036"];
1582 [label="LookupResult.GetInstance() 740037"];
1583 [label="var instance = s_poolInstance.Allocate(); 740038"];
1584 [label="var instance = s_poolInstance.Allocate(); 740039"];
1585 [label="var instance = s_poolInstance.Allocate(); 740040"];
1586 [label="param LookupResult(ObjectPool<LookupResult> pool) 740041"];
1587 [label="param LookupResult(this) 740042"];
1588 [label="_kind 740043"];
1589 [label="_symbolList 740044"];
1590 [label="_error 740045"];
1591 [label="_pool 740046"];
1592 [label="_pool 740047"];
1593 [label="_kind 740048"];
1594 [label="_symbolList = new ArrayBuilder<Symbol>(); 740049"];
1595 [label="_symbolList 740050"];
1596 [label="_error = null; 740051"];
1597 [label="_error 740052"];
1598 [label="var instance = s_poolInstance.Allocate(); 740053"];
1599 [label="instance.IsClear 740054"];
1600 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 740055"];
1601 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740056"];
1602 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740057"];
1603 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740058"];
1604 [label="Debug.Assert(instance.IsClear); 740059"];
1605 [label="return instance; 740060"];
1606 [label="var result = LookupResult.GetInstance(); 740061"];
1607 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 740062"];
1608 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 740063"];
1609 [label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 740064"];
1610 [label="param GetSimpleNameLookupOptions(NameSyntax node) 740065"];
1611 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 740066"];
1612 [label="if (SyntaxFacts.IsAttributeName(node))\n            {\n                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.\n                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.\n                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity\n                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled\n                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only\n                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.\n\n                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;\n            }\n            else\n            {\n                return LookupOptions.NamespacesOrTypesOnly;\n            } 740067"];
1613 [label="return LookupOptions.NamespacesOrTypesOnly; 740068"];
1614 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 740069"];
1615 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740070"];
1616 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740071"];
1617 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740072"];
1618 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740073"];
1619 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740074"];
1620 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740075"];
1621 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 740076"];
1622 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 740077"];
1623 [label="param LookupSymbolsSimpleName(LookupResult result) 740078"];
1624 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 740079"];
1625 [label="param LookupSymbolsSimpleName(string plainName) 740080"];
1626 [label="param LookupSymbolsSimpleName(int arity) 740081"];
1627 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 740082"];
1628 [label="param LookupSymbolsSimpleName(LookupOptions options) 740083"];
1629 [label="param LookupSymbolsSimpleName(bool diagnose) 740084"];
1630 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740085"];
1631 [label="param LookupSymbolsSimpleName(this) 740086"];
1632 [label="if (options.IsAttributeTypeLookup())\n            {\n                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 740087"];
1633 [label="options.IsAttributeTypeLookup() 740088"];
1634 [label="param IsAttributeTypeLookup(this LookupOptions options) 740089"];
1635 [label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 740090"];
1636 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740091"];
1637 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740092"];
1638 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740093"];
1639 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740094"];
1640 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740095"];
1641 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740096"];
1642 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740097"];
1643 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740098"];
1644 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 740099"];
1645 [label="param LookupSymbolsOrMembersInternal(LookupResult result) 740100"];
1646 [label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 740101"];
1647 [label="param LookupSymbolsOrMembersInternal(string name) 740102"];
1648 [label="param LookupSymbolsOrMembersInternal(int arity) 740103"];
1649 [label="param LookupSymbolsOrMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 740104"];
1650 [label="param LookupSymbolsOrMembersInternal(LookupOptions options) 740105"];
1651 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 740106"];
1652 [label="param LookupSymbolsOrMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740107"];
1653 [label="param LookupSymbolsOrMembersInternal(this) 740108"];
1654 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 740109"];
1655 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 740110"];
1656 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740111"];
1657 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740112"];
1658 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740113"];
1659 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740114"];
1660 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740115"];
1661 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740116"];
1662 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740117"];
1663 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 740118"];
1664 [label="param LookupSymbolsInternal(LookupResult result) 740119"];
1665 [label="param LookupSymbolsInternal(string name) 740120"];
1666 [label="param LookupSymbolsInternal(int arity) 740121"];
1667 [label="param LookupSymbolsInternal(ConsList<TypeSymbol> basesBeingResolved) 740122"];
1668 [label="param LookupSymbolsInternal(LookupOptions options) 740123"];
1669 [label="param LookupSymbolsInternal(bool diagnose) 740124"];
1670 [label="param LookupSymbolsInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740125"];
1671 [label="param LookupSymbolsInternal(this) 740126"];
1672 [label="result.IsClear 740127"];
1673 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 740128"];
1674 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740129"];
1675 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740130"];
1676 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740131"];
1677 [label="Debug.Assert(result.IsClear); 740132"];
1678 [label="Debug.Assert(options.AreValid()); 740133"];
1679 [label="options.AreValid() 740134"];
1680 [label="param AreValid(this LookupOptions options) 740135"];
1681 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 740136"];
1682 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 740137"];
1683 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 740138"];
1684 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 740139"];
1685 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 740140"];
1686 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 740141"];
1687 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 740142"];
1688 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 740143"];
1689 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 740144"];
1690 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 740145"];
1691 [label="return OnlyOneBitSet(onlyOptions); 740146"];
1692 [label="OnlyOneBitSet(onlyOptions) 740147"];
1693 [label="param OnlyOneBitSet(LookupOptions o) 740148"];
1694 [label="return (o & (o - 1)) == 0; 740149"];
1695 [label="return (o & (o - 1)) == 0; 740150"];
1696 [label="Binder binder = null; 740151"];
1697 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 740152"];
1698 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 740153"];
1699 [label="result.IsMultiViable 740154"];
1700 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 740155"];
1701 [label="Kind 740156"];
1702 [label="get\n            {\n                return _kind;\n            } 740157"];
1703 [label="return _kind; 740158"];
1704 [label="return Kind == LookupResultKind.Viable; 740159"];
1705 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 740160"];
1706 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 740161"];
1707 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 740162"];
1708 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 740163"];
1709 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740164"];
1710 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740165"];
1711 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740166"];
1712 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740167"];
1713 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740168"];
1714 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740169"];
1715 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740170"];
1716 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740171"];
1717 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 740172"];
1718 [label="param LookupSymbolsInSingleBinder(LookupResult result) 740173"];
1719 [label="param LookupSymbolsInSingleBinder(string name) 740174"];
1720 [label="param LookupSymbolsInSingleBinder(int arity) 740175"];
1721 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 740176"];
1722 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 740177"];
1723 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 740178"];
1724 [label="param LookupSymbolsInSingleBinder(bool diagnose) 740179"];
1725 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740180"];
1726 [label="param LookupSymbolsInSingleBinder(this) 740181"];
1727 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 740182"];
1728 [label="result.IsClear 740183"];
1729 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 740184"];
1730 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740185"];
1731 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740186"];
1732 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740187"];
1733 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 740188"];
1734 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 740189"];
1735 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 740190"];
1736 [label="param LookupSymbolsInSingleBinder(LookupResult result) 740191"];
1737 [label="param LookupSymbolsInSingleBinder(string name) 740192"];
1738 [label="param LookupSymbolsInSingleBinder(int arity) 740193"];
1739 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 740194"];
1740 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 740195"];
1741 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 740196"];
1742 [label="param LookupSymbolsInSingleBinder(bool diagnose) 740197"];
1743 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740198"];
1744 [label="param LookupSymbolsInSingleBinder(this) 740199"];
1745 [label="result.IsClear 740200"];
1746 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 740201"];
1747 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740202"];
1748 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740203"];
1749 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740204"];
1750 [label="Debug.Assert(result.IsClear); 740205"];
1751 [label="IsSubmissionClass 740206"];
1752 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 740207"];
1753 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 740208"];
1754 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 740209"];
1755 [label="var imports = GetImports(basesBeingResolved); 740210"];
1756 [label="GetImports(basesBeingResolved) 740211"];
1757 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 740212"];
1758 [label="param GetImports(this) 740213"];
1759 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 740214"];
1760 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 740215"];
1761 [label="var imports = GetImports(basesBeingResolved); 740216"];
1762 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 740217"];
1763 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 740218"];
1764 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 740219"];
1765 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 740220"];
1766 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740221"];
1767 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740222"];
1768 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740223"];
1769 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740224"];
1770 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740225"];
1771 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740226"];
1772 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740227"];
1773 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740228"];
1774 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740229"];
1775 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 740230"];
1776 [label="param LookupMembersInternal(LookupResult result) 740231"];
1777 [label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 740232"];
1778 [label="param LookupMembersInternal(string name) 740233"];
1779 [label="param LookupMembersInternal(int arity) 740234"];
1780 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 740235"];
1781 [label="param LookupMembersInternal(LookupOptions options) 740236"];
1782 [label="param LookupMembersInternal(Binder originalBinder) 740237"];
1783 [label="param LookupMembersInternal(bool diagnose) 740238"];
1784 [label="param LookupMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740239"];
1785 [label="param LookupMembersInternal(this) 740240"];
1786 [label="Debug.Assert(options.AreValid()); 740241"];
1787 [label="options.AreValid() 740242"];
1788 [label="param AreValid(this LookupOptions options) 740243"];
1789 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 740244"];
1790 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 740245"];
1791 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 740246"];
1792 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 740247"];
1793 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 740248"];
1794 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 740249"];
1795 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 740250"];
1796 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 740251"];
1797 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 740252"];
1798 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 740253"];
1799 [label="return OnlyOneBitSet(onlyOptions); 740254"];
1800 [label="OnlyOneBitSet(onlyOptions) 740255"];
1801 [label="param OnlyOneBitSet(LookupOptions o) 740256"];
1802 [label="return (o & (o - 1)) == 0; 740257"];
1803 [label="return (o & (o - 1)) == 0; 740258"];
1804 [label="Debug.Assert(arity >= 0); 740259"];
1805 [label="Debug.Assert(arity >= 0); 740260"];
1806 [label="if (nsOrType.IsNamespace)\n            {\n                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            } 740261"];
1807 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740262"];
1808 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740263"];
1809 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740264"];
1810 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740265"];
1811 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740266"];
1812 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740267"];
1813 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740268"];
1814 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740269"];
1815 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 740270"];
1816 [label="param LookupMembersInNamespace(LookupResult result) 740271"];
1817 [label="param LookupMembersInNamespace(NamespaceSymbol ns) 740272"];
1818 [label="param LookupMembersInNamespace(string name) 740273"];
1819 [label="param LookupMembersInNamespace(int arity) 740274"];
1820 [label="param LookupMembersInNamespace(LookupOptions options) 740275"];
1821 [label="param LookupMembersInNamespace(Binder originalBinder) 740276"];
1822 [label="param LookupMembersInNamespace(bool diagnose) 740277"];
1823 [label="param LookupMembersInNamespace(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740278"];
1824 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 740279"];
1825 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 740280"];
1826 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 740281"];
1827 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 740282"];
1828 [label="GetCandidateMembers(ns, name, options, originalBinder) 740283"];
1829 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 740284"];
1830 [label="param GetCandidateMembers(string name) 740285"];
1831 [label="param GetCandidateMembers(LookupOptions options) 740286"];
1832 [label="param GetCandidateMembers(Binder originalBinder) 740287"];
1833 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 740288"];
1834 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 740289"];
1835 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 740290"];
1836 [label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 740291"];
1837 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 740292"];
1838 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 740293"];
1839 [label="return nsOrType.GetMembers(name); 740294"];
1840 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 740295"];
1841 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 740296"];
1842 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 740297"];
1843 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 740298"];
1844 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 740299"];
1845 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 740300"];
1846 [label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 740301"];
1847 [label="param CheckViability(Symbol symbol) 740302"];
1848 [label="param CheckViability(int arity) 740303"];
1849 [label="param CheckViability(LookupOptions options) 740304"];
1850 [label="param CheckViability(TypeSymbol accessThroughType) 740305"];
1851 [label="param CheckViability(bool diagnose) 740306"];
1852 [label="param CheckViability(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740307"];
1853 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 740308"];
1854 [label="param CheckViability(this) 740309"];
1855 [label="bool inaccessibleViaQualifier; 740310"];
1856 [label="DiagnosticInfo diagInfo; 740311"];
1857 [label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias\n                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)\n                : symbol; 740312"];
1858 [label="symbol.Kind == SymbolKind.Alias 740313"];
1859 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740314"];
1860 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740315"];
1861 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740316"];
1862 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740317"];
1863 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740318"];
1864 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740319"];
1865 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740320"];
1866 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740321"];
1867 [label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 740322"];
1868 [label="param WrongArity(Symbol symbol) 740323"];
1869 [label="param WrongArity(int arity) 740324"];
1870 [label="param WrongArity(bool diagnose) 740325"];
1871 [label="param WrongArity(LookupOptions options) 740326"];
1872 [label="param WrongArity(out DiagnosticInfo diagInfo) 740327"];
1873 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 740328"];
1874 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 740329"];
1875 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 740330"];
1876 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 740331"];
1877 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 740332"];
1878 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 740333"];
1879 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 740334"];
1880 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 740335"];
1881 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 740336"];
1882 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 740337"];
1883 [label="options.IsAttributeTypeLookup() 740338"];
1884 [label="param IsAttributeTypeLookup(this LookupOptions options) 740339"];
1885 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 740340"];
1886 [label="diagInfo = null; 740341"];
1887 [label="return false; 740342"];
1888 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740343"];
1889 [label="InCref 740344"];
1890 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 740345"];
1891 [label="return this.Flags.Includes(BinderFlags.Cref); 740346"];
1892 [label="return this.Flags.Includes(BinderFlags.Cref); 740347"];
1893 [label="this.Flags.Includes(BinderFlags.Cref) 740348"];
1894 [label="param Includes(this BinderFlags self) 740349"];
1895 [label="param Includes(BinderFlags other) 740350"];
1896 [label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740351"];
1897 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740352"];
1898 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740353"];
1899 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740354"];
1900 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740355"];
1901 [label="InCref 740356"];
1902 [label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740357"];
1903 [label="InCref 740358"];
1904 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740359"];
1905 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740360"];
1906 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740361"];
1907 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740362"];
1908 [label="RefineAccessThroughType(options, accessThroughType) 740363"];
1909 [label="param RefineAccessThroughType(LookupOptions options) 740364"];
1910 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 740365"];
1911 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 740366"];
1912 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 740367"];
1913 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 740368"];
1914 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 740369"];
1915 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740370"];
1916 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740371"];
1917 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740372"];
1918 [label="this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved) 740373"];
1919 [label="param IsAccessible(Symbol symbol) 740374"];
1920 [label="param IsAccessible(TypeSymbol accessThroughType) 740375"];
1921 [label="param IsAccessible(out bool failedThroughTypeCheck) 740376"];
1922 [label="param IsAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740377"];
1923 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 740378"];
1924 [label="param IsAccessible(this) 740379"];
1925 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 740380"];
1926 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 740381"];
1927 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 740382"];
1928 [label="param Includes(this BinderFlags self) 740383"];
1929 [label="param Includes(BinderFlags other) 740384"];
1930 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740385"];
1931 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740386"];
1932 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740387"];
1933 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740388"];
1934 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740389"];
1935 [label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 740390"];
1936 [label="param IsAccessibleHelper(Symbol symbol) 740391"];
1937 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 740392"];
1938 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 740393"];
1939 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740394"];
1940 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 740395"];
1941 [label="param IsAccessibleHelper(this) 740396"];
1942 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740397"];
1943 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740398"];
1944 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740399"];
1945 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740400"];
1946 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740401"];
1947 [label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 740402"];
1948 [label="param IsAccessibleHelper(Symbol symbol) 740403"];
1949 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 740404"];
1950 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 740405"];
1951 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740406"];
1952 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 740407"];
1953 [label="param IsAccessibleHelper(this) 740408"];
1954 [label="var type = _container as NamedTypeSymbol; 740409"];
1955 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 740410"];
1956 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 740411"];
1957 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740412"];
1958 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740413"];
1959 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740414"];
1960 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740415"];
1961 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 740416"];
1962 [label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 740417"];
1963 [label="param IsAccessibleHelper(Symbol symbol) 740418"];
1964 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 740419"];
1965 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 740420"];
1966 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 740421"];
1967 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 740422"];
1968 [label="param IsAccessibleHelper(this) 740423"];
1969 [label="failedThroughTypeCheck = false; 740424"];
1970 [label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 740425"];
1971 [label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 740426"];
1972 [label="return IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics); 740427"];
1973 [label="IsSymbolAccessibleConditional(symbol, Compilation.Assembly, ref useSiteDiagnostics) 740428"];
1974 [label="param IsSymbolAccessibleConditional(Symbol symbol) 740429"];
1975 [label="param IsSymbolAccessibleConditional(AssemblySymbol within) 740430"];
1976 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 740431"];
1977 [label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 740432"];
1978 [label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 740433"];
1979 [label="return AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics); 740434"];
1980 [label="AccessCheck.IsSymbolAccessible(symbol, within, ref useSiteDiagnostics) 740435"];
1981 [label="param IsSymbolAccessible(Symbol symbol) 740436"];
1982 [label="param IsSymbolAccessible(AssemblySymbol within) 740437"];
1983 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740438"];
1984 [label="bool failedThroughTypeCheck; 740439"];
1985 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740440"];
1986 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740441"];
1987 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740442"];
1988 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740443"];
1989 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740444"];
1990 [label="return IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 740445"];
1991 [label="IsSymbolAccessibleCore(symbol, within, null, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics) 740446"];
1992 [label="param IsSymbolAccessibleCore(Symbol symbol) 740447"];
1993 [label="param IsSymbolAccessibleCore(Symbol within) 740448"];
1994 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 740449"];
1995 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 740450"];
1996 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 740451"];
1997 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740452"];
1998 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 740453"];
1999 [label="Debug.Assert((object)symbol != null); 740454"];
2000 [label="Debug.Assert((object)symbol != null); 740455"];
2001 [label="Debug.Assert((object)within != null); 740456"];
2002 [label="Debug.Assert((object)within != null); 740457"];
2003 [label="Debug.Assert(within.IsDefinition); 740458"];
2004 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 740459"];
2005 [label="failedThroughTypeCheck = false; 740460"];
2006 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 740461"];
2007 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 740462"];
2008 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 740463"];
2009 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 740464"];
2010 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 740465"];
2011 [label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 740466"];
2012 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 740467"];
2013 [label="param IsNamedTypeAccessible(Symbol within) 740468"];
2014 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 740469"];
2015 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 740470"];
2016 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 740471"];
2017 [label="Debug.Assert((object)type != null); 740472"];
2018 [label="Debug.Assert((object)type != null); 740473"];
2019 [label="var compilation = within.DeclaringCompilation; 740474"];
2020 [label="bool unused; 740475"];
2021 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 740476"];
2022 [label="var containingType = type.ContainingType; 740477"];
2023 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 740478"];
2024 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 740479"];
2025 [label="(object)containingType == null 740480"];
2026 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 740481"];
2027 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 740482"];
2028 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 740483"];
2029 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 740484"];
2030 [label="param IsNonNestedTypeAccessible(Symbol within) 740485"];
2031 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 740486"];
2032 [label="Debug.Assert((object)assembly != null); 740487"];
2033 [label="Debug.Assert((object)assembly != null); 740488"];
2034 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 740489"];
2035 [label="return true; 740490"];
2036 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740491"];
2037 [label="InCref 740492"];
2038 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740493"];
2039 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740494"];
2040 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740495"];
2041 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740496"];
2042 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740497"];
2043 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740498"];
2044 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740499"];
2045 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740500"];
2046 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740501"];
2047 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 740502"];
2048 [label="return LookupResult.Good(symbol); 740503"];
2049 [label="LookupResult.Good(symbol) 740504"];
2050 [label="param Good(Symbol symbol) 740505"];
2051 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 740506"];
2052 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 740507"];
2053 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 740508"];
2054 [label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 740509"];
2055 [label="param SingleLookupResult(LookupResultKind kind) 740510"];
2056 [label="param SingleLookupResult(Symbol symbol) 740511"];
2057 [label="param SingleLookupResult(DiagnosticInfo error) 740512"];
2058 [label="param SingleLookupResult(this) 740513"];
2059 [label="this.Kind 740514"];
2060 [label="this.Symbol 740515"];
2061 [label="this.Error 740516"];
2062 [label="return LookupResult.Good(symbol); 740517"];
2063 [label="result.MergeEqual(resultOfThisMember); 740518"];
2064 [label="result.MergeEqual(resultOfThisMember) 740519"];
2065 [label="param MergeEqual(SingleLookupResult result) 740520"];
2066 [label="param MergeEqual(this) 740521"];
2067 [label="Kind 740522"];
2068 [label="get\n            {\n                return _kind;\n            } 740523"];
2069 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 740524"];
2070 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 740525"];
2071 [label="Kind 740526"];
2072 [label="if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 740527"];
2073 [label="this.SetFrom(result); 740528"];
2074 [label="this.SetFrom(result) 740529"];
2075 [label="param SetFrom(SingleLookupResult other) 740530"];
2076 [label="param SetFrom(this) 740531"];
2077 [label="_kind 740532"];
2078 [label="_symbolList.Clear(); 740533"];
2079 [label="_symbolList.Add(other.Symbol); 740534"];
2080 [label="_symbolList.Add(other.Symbol); 740535"];
2081 [label="_error 740536"];
2082 [label="this.SetFrom(result); 740537"];
2083 [label="result.MergeEqual(resultOfThisMember); 740538"];
2084 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 740539"];
2085 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 740540"];
2086 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 740541"];
2087 [label="result.IsMultiViable 740542"];
2088 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 740543"];
2089 [label="return _kind; 740544"];
2090 [label="if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                } 740545"];
2091 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 740546"];
2092 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 740547"];
2093 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 740548"];
2094 [label="originalBinder.IsSemanticModelBinder 740549"];
2095 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 740550"];
2096 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 740551"];
2097 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 740552"];
2098 [label="this.Flags.Includes(BinderFlags.SemanticModel) 740553"];
2099 [label="param Includes(this BinderFlags self) 740554"];
2100 [label="param Includes(BinderFlags other) 740555"];
2101 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 740556"];
2102 [label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 740557"];
2103 [label="param IsUsingAlias(string name) 740558"];
2104 [label="param IsUsingAlias(bool callerIsSemanticModel) 740559"];
2105 [label="param IsUsingAlias(this) 740560"];
2106 [label="AliasAndUsingDirective node; 740561"];
2107 [label="node 740562"];
2108 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 740563"];
2109 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 740564"];
2110 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 740565"];
2111 [label="return false; 740566"];
2112 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 740567"];
2113 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 740568"];
2114 [label="return; 740569"];
2115 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 740570"];
2116 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 740571"];
2117 [label="binder = scope; 740572"];
2118 [label="return binder; 740573"];
2119 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 740574"];
2120 [label="diagnostics.Add(node, useSiteDiagnostics); 740575"];
2121 [label="diagnostics.Add(node, useSiteDiagnostics); 740576"];
2122 [label="diagnostics.Add(node, useSiteDiagnostics); 740577"];
2123 [label="diagnostics.Add(node, useSiteDiagnostics); 740578"];
2124 [label="Symbol bindingResult = null; 740579"];
2125 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 740580"];
2126 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 740581"];
2127 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 740582"];
2128 [label="IsViableType(result) 740583"];
2129 [label="param IsViableType(LookupResult result) 740584"];
2130 [label="result.IsMultiViable 740585"];
2131 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 740586"];
2132 [label="Kind 740587"];
2133 [label="get\n            {\n                return _kind;\n            } 740588"];
2134 [label="return _kind; 740589"];
2135 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 740590"];
2136 [label="result.Symbols 740591"];
2137 [label="get\n            {\n                return _symbolList;\n            } 740592"];
2138 [label="return _symbolList; 740593"];
2139 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 740594"];
2140 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 740595"];
2141 [label="return true; 740596"];
2142 [label="if (bindingResult is null)\n            {\n                bool wasError;\n\n                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);\n                if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n            } 740597"];
2143 [label="bool wasError; 740598"];
2144 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740599"];
2145 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740600"];
2146 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740601"];
2147 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740602"];
2148 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740603"];
2149 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740604"];
2150 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740605"];
2151 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740606"];
2152 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740607"];
2153 [label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 740608"];
2154 [label="param ResultSymbol(LookupResult result) 740609"];
2155 [label="param ResultSymbol(string simpleName) 740610"];
2156 [label="param ResultSymbol(int arity) 740611"];
2157 [label="param ResultSymbol(SyntaxNode where) 740612"];
2158 [label="param ResultSymbol(DiagnosticBag diagnostics) 740613"];
2159 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 740614"];
2160 [label="param ResultSymbol(out bool wasError) 740615"];
2161 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 740616"];
2162 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 740617"];
2163 [label="param ResultSymbol(this) 740618"];
2164 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740619"];
2165 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740620"];
2166 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740621"];
2167 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740622"];
2168 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740623"];
2169 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740624"];
2170 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740625"];
2171 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740626"];
2172 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 740627"];
2173 [label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 740628"];
2174 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 740629"];
2175 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 740630"];
2176 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 740631"];
2177 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 740632"];
2178 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 740633"];
2179 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 740634"];
2180 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 740635"];
2181 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 740636"];
2182 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 740637"];
2183 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 740638"];
2184 [label="Debug.Assert(where != null); 740639"];
2185 [label="Debug.Assert(where != null); 740640"];
2186 [label="Debug.Assert(diagnostics != null); 740641"];
2187 [label="Debug.Assert(diagnostics != null); 740642"];
2188 [label="result.Symbols 740643"];
2189 [label="get\n            {\n                return _symbolList;\n            } 740644"];
2190 [label="return _symbolList; 740645"];
2191 [label="var symbols = result.Symbols; 740646"];
2192 [label="wasError = false; 740647"];
2193 [label="result.IsMultiViable 740648"];
2194 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 740649"];
2195 [label="Kind 740650"];
2196 [label="get\n            {\n                return _kind;\n            } 740651"];
2197 [label="return _kind; 740652"];
2198 [label="if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                } 740653"];
2199 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 740654"];
2200 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 740655"];
2201 [label="var singleResult = symbols[0]; 740656"];
2202 [label="var singleType = singleResult as TypeSymbol; 740657"];
2203 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 740658"];
2204 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 740659"];
2205 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 740660"];
2206 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 740661"];
2207 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 740662"];
2208 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 740663"];
2209 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 740664"];
2210 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 740665"];
2211 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 740666"];
2212 [label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 740667"];
2213 [label="param ReportUseSiteDiagnostics(Symbol symbol) 740668"];
2214 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 740669"];
2215 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 740670"];
2216 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 740671"];
2217 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 740672"];
2218 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 740673"];
2219 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 740674"];
2220 [label="Debug.Assert(symbol is object); 740675"];
2221 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 740676"];
2222 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 740677"];
2223 [label="symbol = symbol.ContainingType; 740678"];
2224 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 740679"];
2225 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740680"];
2226 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740681"];
2227 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740682"];
2228 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740683"];
2229 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740684"];
2230 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 740685"];
2231 [label="return singleResult; 740686"];
2232 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 740687"];
2233 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 740688"];
2234 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 740689"];
2235 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 740690"];
2236 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 740691"];
2237 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 740692"];
2238 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 740693"];
2239 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 740694"];
2240 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 740695"];
2241 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 740696"];
2242 [label="param CheckRuntimeSupportForSymbolAccess(this) 740697"];
2243 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 740698"];
2244 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 740699"];
2245 [label="return symbol; 740700"];
2246 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 740701"];
2247 [label="result.Free() 740702"];
2248 [label="param Free(this) 740703"];
2249 [label="this.Clear() 740704"];
2250 [label="param Clear(this) 740705"];
2251 [label="_kind 740706"];
2252 [label="_symbolList.Clear(); 740707"];
2253 [label="_error = null; 740708"];
2254 [label="_error 740709"];
2255 [label="this.Clear(); 740710"];
2256 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 740711"];
2257 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 740712"];
2258 [label="_pool.Free(this); 740713"];
2259 [label="_pool.Free(this); 740714"];
2260 [label="result.Free(); 740715"];
2261 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 740716"];
2262 [label="AreNullableAnnotationsEnabled(node.Identifier) 740717"];
2263 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 740718"];
2264 [label="param AreNullableAnnotationsEnabled(this) 740719"];
2265 [label="RoslynDebug.Assert(token.SyntaxTree is object); 740720"];
2266 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 740721"];
2267 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 740722"];
2268 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 740723"];
2269 [label="param AreNullableAnnotationsEnabled(int position) 740724"];
2270 [label="param AreNullableAnnotationsEnabled(this) 740725"];
2271 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 740726"];
2272 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 740727"];
2273 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 740728"];
2274 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 740729"];
2275 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 740730"];
2276 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 740731"];
2277 [label="AreNullableAnnotationsGloballyEnabled() 740732"];
2278 [label="param AreNullableAnnotationsGloballyEnabled(this) 740733"];
2279 [label="RoslynDebug.Assert(Next is object); 740734"];
2280 [label="Next.AreNullableAnnotationsGloballyEnabled() 740735"];
2281 [label="param AreNullableAnnotationsGloballyEnabled(this) 740736"];
2282 [label="param AreNullableAnnotationsGloballyEnabled(this) 740737"];
2283 [label="GetGlobalAnnotationState() 740738"];
2284 [label="param GetGlobalAnnotationState(this) 740739"];
2285 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 740740"];
2286 [label="return false; 740741"];
2287 [label="return GetGlobalAnnotationState(); 740742"];
2288 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 740743"];
2289 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 740744"];
2290 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 740745"];
2291 [label="param CreateUnannotated(bool isNullableEnabled) 740746"];
2292 [label="param CreateUnannotated(Symbol symbol) 740747"];
2293 [label="if (symbol is null)\n                {\n                    return default;\n                } 740748"];
2294 [label="var type = symbol as TypeSymbol; 740749"];
2295 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 740750"];
2296 [label="type is null 740751"];
2297 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 740752"];
2298 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 740753"];
2299 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 740754"];
2300 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 740755"];
2301 [label="Debug.Assert(typeWithAnnotations.HasType); 740756"];
2302 [label="_typeWithAnnotations 740757"];
2303 [label="_symbol = null; 740758"];
2304 [label="_symbol 740759"];
2305 [label="_isNullableEnabled = false; 740760"];
2306 [label="_isNullableEnabled 740761"];
2307 [label="result.IsDefault 740762"];
2308 [label="=> !_typeWithAnnotations.HasType && _symbol is null 740763"];
2309 [label="!_typeWithAnnotations.HasType && _symbol is null 740764"];
2310 [label="Debug.Assert(!result.IsDefault); 740765"];
2311 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 740766"];
2312 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 740767"];
2313 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 740768"];
2314 [label="return UnwrapAlias(result, diagnostics, syntax, basesBeingResolved); 740769"];
2315 [label="UnwrapAlias(result, diagnostics, syntax, basesBeingResolved) 740770"];
2316 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 740771"];
2317 [label="param UnwrapAlias(DiagnosticBag diagnostics) 740772"];
2318 [label="param UnwrapAlias(SyntaxNode syntax) 740773"];
2319 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 740774"];
2320 [label="param UnwrapAlias(this) 740775"];
2321 [label="symbol.IsAlias 740776"];
2322 [label="=> _symbol?.Kind == SymbolKind.Alias 740777"];
2323 [label="_symbol 740778"];
2324 [label="_symbol?.Kind == SymbolKind.Alias 740779"];
2325 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 740780"];
2326 [label="return symbol; 740781"];
2327 [label="alias.Alias.GetAliasTarget(basesBeingResolved: null); 740782"];
2328 [label="=> Symbol as NamespaceOrTypeSymbol 740783"];
2329 [label="Symbol 740784"];
2330 [label="=> _symbol ?? TypeWithAnnotations.Type 740785"];
2331 [label="TypeWithAnnotations 740786"];
2332 [label="=> _typeWithAnnotations 740787"];
2333 [label="_typeWithAnnotations 740788"];
2334 [label="_symbol ?? TypeWithAnnotations.Type 740789"];
2335 [label="Symbol as NamespaceOrTypeSymbol 740790"];
2336 [label="semanticDiagnostics.AddRange(alias.Alias.AliasTargetDiagnostics); 740791"];
2337 [label="semanticDiagnostics.AddRange(alias.Alias.AliasTargetDiagnostics); 740792"];
2338 [label="alias.Alias.CheckConstraints(semanticDiagnostics); 740793"];
2339 [label="alias.Alias.CheckConstraints(semanticDiagnostics); 740794"];
2340 [label="alias.Alias.CheckConstraints(semanticDiagnostics); 740795"];
2341 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 740796"];
2342 [label="var merged = _container as MergedNamespaceSymbol; 740797"];
2343 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 740798"];
2344 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 740799"];
2345 [label="((object)merged != null) 740800"];
2346 [label="param TypeConversions(AssemblySymbol corLibrary) 740801"];
2347 [label="param TypeConversions(bool includeNullability = false) 740802"];
2348 [label="param TypeConversions(this) 740803"];
2349 [label="corLibrary 740804"];
2350 [label="0 740805"];
2351 [label="includeNullability 740806"];
2352 [label="null 740807"];
2353 [label="param TypeConversions(this) 740808"];
2354 [label="param TypeConversions(AssemblySymbol corLibrary) 740809"];
2355 [label="param TypeConversions(int currentRecursionDepth) 740810"];
2356 [label="param TypeConversions(bool includeNullability) 740811"];
2357 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 740812"];
2358 [label="param TypeConversions(this) 740813"];
2359 [label="50 740814"];
2360 [label="MaximumRecursionDepth = 50 740815"];
2361 [label="false 740816"];
2362 [label="F = false 740817"];
2363 [label="true 740818"];
2364 [label="T = true 740819"];
2365 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 740820"];
2366 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 740821"];
2367 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 740822"];
2368 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 740823"];
2369 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 740824"];
2370 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 740825"];
2371 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 740826"];
2372 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 740827"];
2373 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 740828"];
2374 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 740829"];
2375 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 740830"];
2376 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 740831"];
2377 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 740832"];
2378 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 740833"];
2379 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 740834"];
2380 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 740835"];
2381 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 740836"];
2382 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 740837"];
2383 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740838"];
2384 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740839"];
2385 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740840"];
2386 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740841"];
2387 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740842"];
2388 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 740843"];
2389 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 740844"];
2390 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 740845"];
2391 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 740846"];
2392 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 740847"];
2393 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 740848"];
2394 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 740849"];
2395 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 740850"];
2396 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 740851"];
2397 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 740852"];
2398 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 740853"];
2399 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740854"];
2400 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740855"];
2401 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740856"];
2402 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740857"];
2403 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740858"];
2404 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740859"];
2405 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740860"];
2406 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740861"];
2407 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740862"];
2408 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740863"];
2409 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740864"];
2410 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740865"];
2411 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740866"];
2412 [label="s_implicitNumericConversions =\n        {\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 740867"];
2413 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 740868"];
2414 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 740869"];
2415 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 740870"];
2416 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 740871"];
2417 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 740872"];
2418 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 740873"];
2419 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 740874"];
2420 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 740875"];
2421 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 740876"];
2422 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 740877"];
2423 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 740878"];
2424 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 740879"];
2425 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 740880"];
2426 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 740881"];
2427 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 740882"];
2428 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 740883"];
2429 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 740884"];
2430 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 740885"];
2431 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 740886"];
2432 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 740887"];
2433 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 740888"];
2434 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 740889"];
2435 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 740890"];
2436 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 740891"];
2437 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 740892"];
2438 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 740893"];
2439 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 740894"];
2440 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 740895"];
2441 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 740896"];
2442 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 740897"];
2443 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 740898"];
2444 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 740899"];
2445 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 740900"];
2446 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 740901"];
2447 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 740902"];
2448 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 740903"];
2449 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740904"];
2450 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740905"];
2451 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740906"];
2452 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740907"];
2453 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740908"];
2454 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740909"];
2455 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740910"];
2456 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740911"];
2457 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740912"];
2458 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740913"];
2459 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740914"];
2460 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740915"];
2461 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740916"];
2462 [label="s_explicitNumericConversions =\n        {\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 740917"];
2463 [label="corLibrary 740918"];
2464 [label="currentRecursionDepth 740919"];
2465 [label="includeNullability 740920"];
2466 [label="otherNullabilityOpt 740921"];
2467 [label="param TypeConversions(this) 740922"];
2468 [label="param ConversionsBase(AssemblySymbol corLibrary) 740923"];
2469 [label="param ConversionsBase(int currentRecursionDepth) 740924"];
2470 [label="param ConversionsBase(bool includeNullability) 740925"];
2471 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 740926"];
2472 [label="param ConversionsBase(this) 740927"];
2473 [label="corLibrary 740928"];
2474 [label="currentRecursionDepth 740929"];
2475 [label="IncludeNullability 740930"];
2476 [label="_lazyOtherNullability 740931"];
2477 [label="Debug.Assert((object)corLibrary != null); 740932"];
2478 [label="Debug.Assert((object)corLibrary != null); 740933"];
2479 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 740934"];
2480 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 740935"];
2481 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 740936"];
2482 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 740937"];
2483 [label="this.corLibrary 740938"];
2484 [label="this.currentRecursionDepth 740939"];
2485 [label="IncludeNullability 740940"];
2486 [label="_lazyOtherNullability 740941"];
2487 [label="alias.Alias.CheckConstraints(semanticDiagnostics); 740942"];
2488 [label="var corLibrary = _compilation.SourceAssembly.CorLibrary; 740943"];
2489 [label="var conversions = new TypeConversions(corLibrary); 740944"];
2490 [label="var conversions = new TypeConversions(corLibrary); 740945"];
2491 [label="new TypeConversions(corLibrary) 740946"];
2492 [label="param TypeConversions(AssemblySymbol corLibrary) 740947"];
2493 [label="param TypeConversions(bool includeNullability = false) 740948"];
2494 [label="param TypeConversions(this) 740949"];
2495 [label="0 740950"];
2496 [label="includeNullability 740951"];
2497 [label="null 740952"];
2498 [label="param TypeConversions(this) 740953"];
2499 [label="param TypeConversions(int currentRecursionDepth) 740954"];
2500 [label="param TypeConversions(bool includeNullability) 740955"];
2501 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 740956"];
2502 [label="param TypeConversions(this) 740957"];
2503 [label="currentRecursionDepth 740958"];
2504 [label="includeNullability 740959"];
2505 [label="otherNullabilityOpt 740960"];
2506 [label="param TypeConversions(this) 740961"];
2507 [label="param ConversionsBase(int currentRecursionDepth) 740962"];
2508 [label="param ConversionsBase(bool includeNullability) 740963"];
2509 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 740964"];
2510 [label="param ConversionsBase(this) 740965"];
2511 [label="corLibrary 740966"];
2512 [label="currentRecursionDepth 740967"];
2513 [label="IncludeNullability 740968"];
2514 [label="_lazyOtherNullability 740969"];
2515 [label="Debug.Assert((object)corLibrary != null); 740970"];
2516 [label="Debug.Assert((object)corLibrary != null); 740971"];
2517 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 740972"];
2518 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 740973"];
2519 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 740974"];
2520 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 740975"];
2521 [label="this.currentRecursionDepth 740976"];
2522 [label="IncludeNullability 740977"];
2523 [label="_lazyOtherNullability 740978"];
2524 [label="foreach (var @using in Usings)\n            {\n                // Check if `using static` directives meet constraints.\n                if (@using.NamespaceOrType.IsType)\n                {\n                    var typeSymbol = (TypeSymbol)@using.NamespaceOrType;\n                    // LAFHIS\n                    var location = (@using.UsingDirective != null ? @using.UsingDirective.Name.Location : null) ?? NoLocation.Singleton;\n                    typeSymbol.CheckAllConstraints(_compilation, conversions, location, semanticDiagnostics);\n                }\n            } 740979"];
2525 [label="foreach (var alias in ExternAliases)\n            {\n                alias.Alias.GetAliasTarget(null);\n                semanticDiagnostics.AddRange(alias.Alias.AliasTargetDiagnostics);\n            } 740980"];
2526 [label="if (_diagnostics != null && !_diagnostics.IsEmptyWithoutResolution)\n            {\n                semanticDiagnostics.AddRange(_diagnostics.AsEnumerable());\n            } 740981"];
2527 [label="if (_diagnostics != null && !_diagnostics.IsEmptyWithoutResolution)\n            {\n                semanticDiagnostics.AddRange(_diagnostics.AsEnumerable());\n            } 740982"];
2528 [label="Validate(); 740983"];
2529 [label="return; 740984"];
2530 [label="param GetBinder(SyntaxNode node) 740985"];
2531 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 740986"];
2532 [label="param GetBinder(Symbol memberOpt = null) 740987"];
2533 [label="param GetBinder(this) 740988"];
2534 [label="int position = node.SpanStart; 740989"];
2535 [label="InScript 740990"];
2536 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 740991"];
2537 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 740992"];
2538 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 740993"];
2539 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 740994"];
2540 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 740995"];
2541 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 740996"];
2542 [label="node = node.Parent; 740997"];
2543 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 740998"];
2544 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 740999"];
2545 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 741000"];
2546 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 741001"];
2547 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 741002"];
2548 [label="param GetBinder(SyntaxNode node) 741003"];
2549 [label="param GetBinder(int position) 741004"];
2550 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 741005"];
2551 [label="param GetBinder(Symbol memberOpt = null) 741006"];
2552 [label="param GetBinder(this) 741007"];
2553 [label="Debug.Assert(node != null); 741008"];
2554 [label="Debug.Assert(node != null); 741009"];
2555 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 741010"];
2556 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 741011"];
2557 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 741012"];
2558 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 741013"];
2559 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 741014"];
2560 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 741015"];
2561 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 741016"];
2562 [label="param Initialize(int position) 741017"];
2563 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 741018"];
2564 [label="param Initialize(Symbol memberOpt) 741019"];
2565 [label="param Initialize(this) 741020"];
2566 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 741021"];
2567 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 741022"];
2568 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 741023"];
2569 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 741024"];
2570 [label="_position 741025"];
2571 [label="_memberDeclarationOpt 741026"];
2572 [label="_memberOpt 741027"];
2573 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 741028"];
2574 [label="Binder result = visitor.Visit(node); 741029"];
2575 [label="visitor.Visit(node) 741030"];
2576 [label="param Visit(SyntaxNode node) 741031"];
2577 [label="param Visit(this) 741032"];
2578 [label="return VisitCore(node); 741033"];
2579 [label="VisitCore(node) 741034"];
2580 [label="param VisitCore(SyntaxNode node) 741035"];
2581 [label="param VisitCore(this) 741036"];
2582 [label="return ((CSharpSyntaxNode)node).Accept(this); 741037"];
2583 [label="return ((CSharpSyntaxNode)node).Accept(this); 741038"];
2584 [label="return ((CSharpSyntaxNode)node).Accept(this); 741039"];
2585 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 741040"];
2586 [label="param VisitClassDeclaration(this) 741041"];
2587 [label="return VisitTypeDeclarationCore(node); 741042"];
2588 [label="VisitTypeDeclarationCore(node) 741043"];
2589 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 741044"];
2590 [label="param VisitTypeDeclarationCore(this) 741045"];
2591 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 741046"];
2592 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 741047"];
2593 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 741048"];
2594 [label="NodeUsage extraInfo = NodeUsage.Normal; 741049"];
2595 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 741050"];
2596 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 741051"];
2597 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 741052"];
2598 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 741053"];
2599 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 741054"];
2600 [label="return VisitTypeDeclarationCore(parent, extraInfo); 741055"];
2601 [label="return VisitTypeDeclarationCore(parent, extraInfo); 741056"];
2602 [label="VisitTypeDeclarationCore(parent, extraInfo) 741057"];
2603 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 741058"];
2604 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 741059"];
2605 [label="param VisitTypeDeclarationCore(this) 741060"];
2606 [label="var key = CreateBinderCacheKey(parent, extraInfo); 741061"];
2607 [label="var key = CreateBinderCacheKey(parent, extraInfo); 741062"];
2608 [label="CreateBinderCacheKey(parent, extraInfo) 741063"];
2609 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 741064"];
2610 [label="param CreateBinderCacheKey(NodeUsage usage) 741065"];
2611 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 741066"];
2612 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 741067"];
2613 [label="return new BinderCacheKey(node, usage); 741068"];
2614 [label="new BinderCacheKey(node, usage) 741069"];
2615 [label="param BinderCacheKey(this) 741070"];
2616 [label="var key = CreateBinderCacheKey(parent, extraInfo); 741071"];
2617 [label="Binder resultBinder; 741072"];
2618 [label="binderCache 741073"];
2619 [label="get\n                {\n                    return _factory._binderCache;\n                } 741074"];
2620 [label="return _factory._binderCache; 741075"];
2621 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 741076"];
2622 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 741077"];
2623 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 741078"];
2624 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 741079"];
2625 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 741080"];
2626 [label="resultBinder = VisitCore(parent.Parent); 741081"];
2627 [label="VisitCore(parent.Parent) 741082"];
2628 [label="param VisitCore(SyntaxNode node) 741083"];
2629 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 741084"];
2630 [label="param VisitCompilationUnit(this) 741085"];
2631 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 741086"];
2632 [label="IsInUsing(parent) 741087"];
2633 [label="param IsInUsing(CSharpSyntaxNode containingNode) 741088"];
2634 [label="param IsInUsing(this) 741089"];
2635 [label="TextSpan containingSpan = containingNode.Span; 741090"];
2636 [label="SyntaxToken token; 741091"];
2637 [label="token 741092"];
2638 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 741093"];
2639 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 741094"];
2640 [label="token = containingNode.FindToken(_position); 741095"];
2641 [label="token = containingNode.FindToken(_position); 741096"];
2642 [label="var node = token.Parent; 741097"];
2643 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 741098"];
2644 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 741099"];
2645 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 741100"];
2646 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 741101"];
2647 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 741102"];
2648 [label="node = node.Parent; 741103"];
2649 [label="return false; 741104"];
2650 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 741105"];
2651 [label="InScript 741106"];
2652 [label="get\n                {\n                    return _factory.InScript;\n                } 741107"];
2653 [label="_factory.InScript 741108"];
2654 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 741109"];
2655 [label="return _factory.InScript; 741110"];
2656 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 741111"];
2657 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 741112"];
2658 [label="param VisitCompilationUnit(bool inUsing) 741113"];
2659 [label="param VisitCompilationUnit(bool inScript) 741114"];
2660 [label="param VisitCompilationUnit(this) 741115"];
2661 [label="syntaxTree 741116"];
2662 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 741117"];
2663 [label="return _factory._syntaxTree; 741118"];
2664 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 741119"];
2665 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 741120"];
2666 [label="inScript 741121"];
2667 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 741122"];
2668 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 741123"];
2669 [label="return _factory._binderCache; 741124"];
2670 [label="param Equals(BinderCacheKey other) 741125"];
2671 [label="param Equals(this) 741126"];
2672 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 741127"];
2673 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 741128"];
2674 [label="resultBinder.ContainingMemberOrLambda 741129"];
2675 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 741130"];
2676 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 741131"];
2677 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 741132"];
2678 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 741133"];
2679 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 741134"];
2680 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 741135"];
2681 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 741136"];
2682 [label="new InContainerBinder(typeSymbol, resultBinder) 741137"];
2683 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 741138"];
2684 [label="param InContainerBinder(Binder next) 741139"];
2685 [label="param InContainerBinder(Imports imports = null) 741140"];
2686 [label="param InContainerBinder(this) 741141"];
2687 [label="RoslynDebug.Assert(next != null); 741142"];
2688 [label="RoslynDebug.Assert(next != null); 741143"];
2689 [label="this.Flags 741144"];
2690 [label="this.Compilation 741145"];
2691 [label="_container 741146"];
2692 [label="Debug.Assert((object)container != null || imports != null); 741147"];
2693 [label="Debug.Assert((object)container != null || imports != null); 741148"];
2694 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 741149"];
2695 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 741150"];
2696 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 741151"];
2697 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 741152"];
2698 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 741153"];
2699 [label="param WithUnsafeRegionIfNecessary(this) 741154"];
2700 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 741155"];
2701 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 741156"];
2702 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 741157"];
2703 [label="param Includes(this BinderFlags self) 741158"];
2704 [label="param Includes(BinderFlags other) 741159"];
2705 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 741160"];
2706 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 741161"];
2707 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 741162"];
2708 [label="binderCache 741163"];
2709 [label="return _factory._binderCache; 741164"];
2710 [label="binderCache.TryAdd(key, resultBinder); 741165"];
2711 [label="binderCache.TryAdd(key, resultBinder); 741166"];
2712 [label="binderCache.TryAdd(key, resultBinder); 741167"];
2713 [label="binderCache.TryAdd(key, resultBinder); 741168"];
2714 [label="binderCache.TryAdd(key, resultBinder); 741169"];
2715 [label="return resultBinder; 741170"];
2716 [label="return ((CSharpSyntaxNode)node).Accept(this); 741171"];
2717 [label="_binderFactoryVisitorPool.Free(visitor); 741172"];
2718 [label="_binderFactoryVisitorPool.Free(visitor); 741173"];
2719 [label="return result; 741174"];
2720 [label="var diagnostics = c.GetDiagnostics(); 741175"];
2721 [label="Debug.Assert(node != null); 741176"];
2722 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 741177"];
2723 [label="container.AssertMemberExposure(memberOpt); 741178"];
2724 [label="container.AssertMemberExposure(memberOpt); 741179"];
2725 [label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 741180"];
2726 [label="param VisitMethodDeclaration(this) 741181"];
2727 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 741182"];
2728 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 741183"];
2729 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 741184"];
2730 [label="NodeUsage usage; 741185"];
2731 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 741186"];
2732 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 741187"];
2733 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 741188"];
2734 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 741189"];
2735 [label="usage = NodeUsage.Normal; 741190"];
2736 [label="var key = CreateBinderCacheKey(methodDecl, usage); 741191"];
2737 [label="var key = CreateBinderCacheKey(methodDecl, usage); 741192"];
2738 [label="CreateBinderCacheKey(methodDecl, usage) 741193"];
2739 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 741194"];
2740 [label="param CreateBinderCacheKey(NodeUsage usage) 741195"];
2741 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 741196"];
2742 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 741197"];
2743 [label="return new BinderCacheKey(node, usage); 741198"];
2744 [label="new BinderCacheKey(node, usage) 741199"];
2745 [label="param BinderCacheKey(this) 741200"];
2746 [label="var key = CreateBinderCacheKey(methodDecl, usage); 741201"];
2747 [label="Binder resultBinder; 741202"];
2748 [label="binderCache 741203"];
2749 [label="get\n                {\n                    return _factory._binderCache;\n                } 741204"];
2750 [label="return _factory._binderCache; 741205"];
2751 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 741206"];
2752 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 741207"];
2753 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 741208"];
2754 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 741209"];
2755 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 741210"];
2756 [label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 741211"];
2757 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 741212"];
2758 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 741213"];
2759 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 741214"];
2760 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 741215"];
2761 [label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 741216"];
2762 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 741217"];
2763 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 741218"];
2764 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 741219"];
2765 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 741220"];
2766 [label="SourceMemberMethodSymbol method = null; 741221"];
2767 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 741222"];
2768 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 741223"];
2769 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 741224"];
2770 [label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 741225"];
2771 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 741226"];
2772 [label="param WithUnsafeRegionIfNecessary(this) 741227"];
2773 [label="binderCache 741228"];
2774 [label="return _factory._binderCache; 741229"];
2775 [label="binderCache.TryAdd(key, resultBinder); 741230"];
2776 [label="binderCache.TryAdd(key, resultBinder); 741231"];
2777 [label="binderCache.TryAdd(key, resultBinder); 741232"];
2778 [label="binderCache.TryAdd(key, resultBinder); 741233"];
2779 [label="return resultBinder; 741234"];
2780 [label="return ((CSharpSyntaxNode)node).Accept(this); 741235"];
2781 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 741236"];
2782 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 741237"];
2783 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 741238"];
2784 [label="Debug.Assert((object)containing != null); 741239"];
2785 [label="Debug.Assert((object)containing != null); 741240"];
2786 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 741241"];
2787 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 741242"];
2788 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 741243"];
2789 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 741244"];
2790 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 741245"];
2791 [label="param BinderWithContainingMemberOrLambda(Binder next) 741246"];
2792 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 741247"];
2793 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 741248"];
2794 [label="param BinderWithContainingMemberOrLambda(this) 741249"];
2795 [label="next 741250"];
2796 [label="flags 741251"];
2797 [label="param BinderWithContainingMemberOrLambda(this) 741252"];
2798 [label="param Binder(Binder next) 741253"];
2799 [label="param Binder(BinderFlags flags) 741254"];
2800 [label="param Binder(this) 741255"];
2801 [label="internal CSharpCompilation Compilation { get; } 741256"];
2802 [label="Flags 741257"];
2803 [label="protected internal Binder? Next { get; } 741258"];
2804 [label="_lazyConversions 741259"];
2805 [label="_lazyOverloadResolution 741260"];
2806 [label="RoslynDebug.Assert(next != null); 741261"];
2807 [label="RoslynDebug.Assert(next != null); 741262"];
2808 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 741263"];
2809 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 741264"];
2810 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 741265"];
2811 [label="param Includes(this BinderFlags self) 741266"];
2812 [label="param Includes(BinderFlags other) 741267"];
2813 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 741268"];
2814 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 741269"];
2815 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 741270"];
2816 [label="param Includes(this BinderFlags self) 741271"];
2817 [label="param Includes(BinderFlags other) 741272"];
2818 [label="Next 741273"];
2819 [label="this.Flags 741274"];
2820 [label="this.Compilation 741275"];
2821 [label="_containingMemberOrLambda 741276"];
2822 [label="Debug.Assert(containingMemberOrLambda != null); 741277"];
2823 [label="Debug.Assert(containingMemberOrLambda != null); 741278"];
2824 [label="_containingMemberOrLambda 741279"];
2825 [label="var diagnostics = c.GetDiagnostics(); 741280"];
2826 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 741281"];
2827 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 741282"];
2828 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 741283"];
2829 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 741284"];
2830 [label="param ValidateParameterNameConflicts(this) 741285"];
2831 [label="PooledHashSet<string>? tpNames = null; 741286"];
2832 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 741287"];
2833 [label="PooledHashSet<string>? pNames = null; 741288"];
2834 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 741289"];
2835 [label="tpNames?.Free(); 741290"];
2836 [label="pNames?.Free(); 741291"];
2837 [label="param BindType(ExpressionSyntax syntax) 741292"];
2838 [label="param BindType(DiagnosticBag diagnostics) 741293"];
2839 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 741294"];
2840 [label="param BindType(bool suppressUseSiteDiagnostics = false) 741295"];
2841 [label="param BindType(this) 741296"];
2842 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 741297"];
2843 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 741298"];
2844 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 741299"];
2845 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 741300"];
2846 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 741301"];
2847 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 741302"];
2848 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 741303"];
2849 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 741304"];
2850 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 741305"];
2851 [label="param BindTypeOrAlias(this) 741306"];
2852 [label="Debug.Assert(diagnostics != null); 741307"];
2853 [label="Debug.Assert(diagnostics != null); 741308"];
2854 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741309"];
2855 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741310"];
2856 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741311"];
2857 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741312"];
2858 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741313"];
2859 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 741314"];
2860 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 741315"];
2861 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 741316"];
2862 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 741317"];
2863 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 741318"];
2864 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 741319"];
2865 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 741320"];
2866 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 741321"];
2867 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 741322"];
2868 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 741323"];
2869 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 741324"];
2870 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 741325"];
2871 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 741326"];
2872 [label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 741327"];
2873 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 741328"];
2874 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 741329"];
2875 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 741330"];
2876 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 741331"];
2877 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 741332"];
2878 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 741333"];
2879 [label="var identifierValueText = node.Identifier.ValueText; 741334"];
2880 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 741335"];
2881 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741336"];
2882 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741337"];
2883 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741338"];
2884 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741339"];
2885 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741340"];
2886 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 741341"];
2887 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 741342"];
2888 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 741343"];
2889 [label="param CreateErrorIfLookupOnTypeParameter(string name) 741344"];
2890 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 741345"];
2891 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 741346"];
2892 [label="param CreateErrorIfLookupOnTypeParameter(this) 741347"];
2893 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 741348"];
2894 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 741349"];
2895 [label="return null; 741350"];
2896 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 741351"];
2897 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 741352"];
2898 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 741353"];
2899 [label="LookupResult.GetInstance() 741354"];
2900 [label="var instance = s_poolInstance.Allocate(); 741355"];
2901 [label="instance.IsClear 741356"];
2902 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 741357"];
2903 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741358"];
2904 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741359"];
2905 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741360"];
2906 [label="Debug.Assert(instance.IsClear); 741361"];
2907 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 741362"];
2908 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 741363"];
2909 [label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 741364"];
2910 [label="param GetSimpleNameLookupOptions(NameSyntax node) 741365"];
2911 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 741366"];
2912 [label="if (SyntaxFacts.IsAttributeName(node))\n            {\n                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.\n                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.\n                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity\n                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled\n                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only\n                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.\n\n                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;\n            }\n            else\n            {\n                return LookupOptions.NamespacesOrTypesOnly;\n            } 741367"];
2913 [label="return LookupOptions.NamespacesOrTypesOnly; 741368"];
2914 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 741369"];
2915 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741370"];
2916 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741371"];
2917 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741372"];
2918 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741373"];
2919 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741374"];
2920 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 741375"];
2921 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 741376"];
2922 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 741377"];
2923 [label="param LookupSymbolsSimpleName(string plainName) 741378"];
2924 [label="param LookupSymbolsSimpleName(int arity) 741379"];
2925 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 741380"];
2926 [label="param LookupSymbolsSimpleName(LookupOptions options) 741381"];
2927 [label="param LookupSymbolsSimpleName(bool diagnose) 741382"];
2928 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741383"];
2929 [label="param LookupSymbolsSimpleName(this) 741384"];
2930 [label="if (options.IsAttributeTypeLookup())\n            {\n                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 741385"];
2931 [label="options.IsAttributeTypeLookup() 741386"];
2932 [label="param IsAttributeTypeLookup(this LookupOptions options) 741387"];
2933 [label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 741388"];
2934 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741389"];
2935 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741390"];
2936 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741391"];
2937 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741392"];
2938 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741393"];
2939 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741394"];
2940 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741395"];
2941 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 741396"];
2942 [label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 741397"];
2943 [label="param LookupSymbolsOrMembersInternal(string name) 741398"];
2944 [label="param LookupSymbolsOrMembersInternal(int arity) 741399"];
2945 [label="param LookupSymbolsOrMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 741400"];
2946 [label="param LookupSymbolsOrMembersInternal(LookupOptions options) 741401"];
2947 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 741402"];
2948 [label="param LookupSymbolsOrMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741403"];
2949 [label="param LookupSymbolsOrMembersInternal(this) 741404"];
2950 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 741405"];
2951 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 741406"];
2952 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741407"];
2953 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741408"];
2954 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741409"];
2955 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741410"];
2956 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741411"];
2957 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741412"];
2958 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 741413"];
2959 [label="param LookupSymbolsInternal(string name) 741414"];
2960 [label="param LookupSymbolsInternal(int arity) 741415"];
2961 [label="param LookupSymbolsInternal(ConsList<TypeSymbol> basesBeingResolved) 741416"];
2962 [label="param LookupSymbolsInternal(LookupOptions options) 741417"];
2963 [label="param LookupSymbolsInternal(bool diagnose) 741418"];
2964 [label="param LookupSymbolsInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741419"];
2965 [label="param LookupSymbolsInternal(this) 741420"];
2966 [label="result.IsClear 741421"];
2967 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 741422"];
2968 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741423"];
2969 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741424"];
2970 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741425"];
2971 [label="Debug.Assert(result.IsClear); 741426"];
2972 [label="Debug.Assert(options.AreValid()); 741427"];
2973 [label="options.AreValid() 741428"];
2974 [label="param AreValid(this LookupOptions options) 741429"];
2975 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 741430"];
2976 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 741431"];
2977 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 741432"];
2978 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 741433"];
2979 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 741434"];
2980 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 741435"];
2981 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 741436"];
2982 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 741437"];
2983 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 741438"];
2984 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 741439"];
2985 [label="return OnlyOneBitSet(onlyOptions); 741440"];
2986 [label="OnlyOneBitSet(onlyOptions) 741441"];
2987 [label="param OnlyOneBitSet(LookupOptions o) 741442"];
2988 [label="return (o & (o - 1)) == 0; 741443"];
2989 [label="return (o & (o - 1)) == 0; 741444"];
2990 [label="Binder binder = null; 741445"];
2991 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 741446"];
2992 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 741447"];
2993 [label="result.IsMultiViable 741448"];
2994 [label="Kind 741449"];
2995 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 741450"];
2996 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 741451"];
2997 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 741452"];
2998 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 741453"];
2999 [label="param LookupSymbolsInSingleBinder(LookupResult result) 741454"];
3000 [label="param LookupSymbolsInSingleBinder(string name) 741455"];
3001 [label="param LookupSymbolsInSingleBinder(int arity) 741456"];
3002 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 741457"];
3003 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 741458"];
3004 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 741459"];
3005 [label="param LookupSymbolsInSingleBinder(bool diagnose) 741460"];
3006 [label="param LookupSymbolsInSingleBinder(this) 741461"];
3007 [label="result.IsClear 741462"];
3008 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 741463"];
3009 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741464"];
3010 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741465"];
3011 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741466"];
3012 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 741467"];
3013 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 741468"];
3014 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 741469"];
3015 [label="param LookupSymbolsInSingleBinder(int arity) 741470"];
3016 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 741471"];
3017 [label="param LookupSymbolsInSingleBinder(bool diagnose) 741472"];
3018 [label="result.IsClear 741473"];
3019 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 741474"];
3020 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741475"];
3021 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741476"];
3022 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741477"];
3023 [label="Debug.Assert(result.IsClear); 741478"];
3024 [label="IsSubmissionClass 741479"];
3025 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 741480"];
3026 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 741481"];
3027 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 741482"];
3028 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 741483"];
3029 [label="param LookupMembersInternal(int arity) 741484"];
3030 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 741485"];
3031 [label="param LookupMembersInternal(bool diagnose) 741486"];
3032 [label="param LookupMembersInternal(this) 741487"];
3033 [label="Debug.Assert(options.AreValid()); 741488"];
3034 [label="options.AreValid() 741489"];
3035 [label="param AreValid(this LookupOptions options) 741490"];
3036 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 741491"];
3037 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 741492"];
3038 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 741493"];
3039 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 741494"];
3040 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 741495"];
3041 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 741496"];
3042 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 741497"];
3043 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 741498"];
3044 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 741499"];
3045 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 741500"];
3046 [label="return OnlyOneBitSet(onlyOptions); 741501"];
3047 [label="OnlyOneBitSet(onlyOptions) 741502"];
3048 [label="param OnlyOneBitSet(LookupOptions o) 741503"];
3049 [label="return (o & (o - 1)) == 0; 741504"];
3050 [label="return (o & (o - 1)) == 0; 741505"];
3051 [label="Debug.Assert(arity >= 0); 741506"];
3052 [label="Debug.Assert(arity >= 0); 741507"];
3053 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741508"];
3054 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741509"];
3055 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741510"];
3056 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741511"];
3057 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 741512"];
3058 [label="param LookupMembersInType(LookupResult result) 741513"];
3059 [label="param LookupMembersInType(TypeSymbol type) 741514"];
3060 [label="param LookupMembersInType(string name) 741515"];
3061 [label="param LookupMembersInType(int arity) 741516"];
3062 [label="param LookupMembersInType(ConsList<TypeSymbol> basesBeingResolved) 741517"];
3063 [label="param LookupMembersInType(LookupOptions options) 741518"];
3064 [label="param LookupMembersInType(Binder originalBinder) 741519"];
3065 [label="param LookupMembersInType(bool diagnose) 741520"];
3066 [label="param LookupMembersInType(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741521"];
3067 [label="param LookupMembersInType(this) 741522"];
3068 [label="switch (type.TypeKind)\n            {\n                case TypeKind.TypeParameter:\n                    this.LookupMembersInTypeParameter(result, (TypeParameterSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Interface:\n                    this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Class:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                case TypeKind.Delegate:\n                case TypeKind.Array:\n                case TypeKind.Dynamic:\n                    this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Submission:\n                    this.LookupMembersInSubmissions(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Error:\n                    LookupMembersInErrorType(result, (ErrorTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Pointer:\n                case TypeKind.FunctionPointer:\n                    result.Clear();\n                    break;\n\n                case TypeKind.Unknown:\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);\n            } 741523"];
3069 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741524"];
3070 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741525"];
3071 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741526"];
3072 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741527"];
3073 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741528"];
3074 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741529"];
3075 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741530"];
3076 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741531"];
3077 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741532"];
3078 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 741533"];
3079 [label="param LookupMembersInClass(LookupResult result) 741534"];
3080 [label="param LookupMembersInClass(TypeSymbol type) 741535"];
3081 [label="param LookupMembersInClass(string name) 741536"];
3082 [label="param LookupMembersInClass(int arity) 741537"];
3083 [label="param LookupMembersInClass(ConsList<TypeSymbol> basesBeingResolved) 741538"];
3084 [label="param LookupMembersInClass(LookupOptions options) 741539"];
3085 [label="param LookupMembersInClass(Binder originalBinder) 741540"];
3086 [label="param LookupMembersInClass(bool diagnose) 741541"];
3087 [label="param LookupMembersInClass(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741542"];
3088 [label="param LookupMembersInClass(this) 741543"];
3089 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741544"];
3090 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741545"];
3091 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741546"];
3092 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741547"];
3093 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741548"];
3094 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741549"];
3095 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741550"];
3096 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741551"];
3097 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741552"];
3098 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 741553"];
3099 [label="param LookupMembersInClass(LookupResult result) 741554"];
3100 [label="param LookupMembersInClass(TypeSymbol type) 741555"];
3101 [label="param LookupMembersInClass(string name) 741556"];
3102 [label="param LookupMembersInClass(int arity) 741557"];
3103 [label="param LookupMembersInClass(ConsList<TypeSymbol> basesBeingResolved) 741558"];
3104 [label="param LookupMembersInClass(LookupOptions options) 741559"];
3105 [label="param LookupMembersInClass(Binder originalBinder) 741560"];
3106 [label="param LookupMembersInClass(TypeSymbol accessThroughType) 741561"];
3107 [label="param LookupMembersInClass(bool diagnose) 741562"];
3108 [label="param LookupMembersInClass(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741563"];
3109 [label="param LookupMembersInClass(this) 741564"];
3110 [label="Debug.Assert((object)type != null); 741565"];
3111 [label="Debug.Assert((object)type != null); 741566"];
3112 [label="Debug.Assert(!type.IsInterfaceType() && type.TypeKind != TypeKind.TypeParameter); 741567"];
3113 [label="TypeSymbol currentType = type; 741568"];
3114 [label="LookupResult.GetInstance() 741569"];
3115 [label="_kind 741570"];
3116 [label="_symbolList 741571"];
3117 [label="_error 741572"];
3118 [label="_pool 741573"];
3119 [label="instance.IsClear 741574"];
3120 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 741575"];
3121 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741576"];
3122 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741577"];
3123 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741578"];
3124 [label="Debug.Assert(instance.IsClear); 741579"];
3125 [label="var tmp = LookupResult.GetInstance(); 741580"];
3126 [label="PooledHashSet<NamedTypeSymbol> visited = null; 741581"];
3127 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 741582"];
3128 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 741583"];
3129 [label="tmp.Clear() 741584"];
3130 [label="param Clear(this) 741585"];
3131 [label="tmp.Clear(); 741586"];
3132 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741587"];
3133 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741588"];
3134 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741589"];
3135 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741590"];
3136 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741591"];
3137 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741592"];
3138 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741593"];
3139 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741594"];
3140 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741595"];
3141 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741596"];
3142 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 741597"];
3143 [label="param LookupMembersWithoutInheritance(LookupResult result) 741598"];
3144 [label="param LookupMembersWithoutInheritance(TypeSymbol type) 741599"];
3145 [label="param LookupMembersWithoutInheritance(string name) 741600"];
3146 [label="param LookupMembersWithoutInheritance(int arity) 741601"];
3147 [label="param LookupMembersWithoutInheritance(LookupOptions options) 741602"];
3148 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 741603"];
3149 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 741604"];
3150 [label="param LookupMembersWithoutInheritance(bool diagnose) 741605"];
3151 [label="param LookupMembersWithoutInheritance(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741606"];
3152 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 741607"];
3153 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 741608"];
3154 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 741609"];
3155 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 741610"];
3156 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 741611"];
3157 [label="GetCandidateMembers(type, name, options, originalBinder) 741612"];
3158 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 741613"];
3159 [label="param GetCandidateMembers(string name) 741614"];
3160 [label="param GetCandidateMembers(LookupOptions options) 741615"];
3161 [label="param GetCandidateMembers(Binder originalBinder) 741616"];
3162 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 741617"];
3163 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 741618"];
3164 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 741619"];
3165 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 741620"];
3166 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741621"];
3167 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741622"];
3168 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741623"];
3169 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741624"];
3170 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741625"];
3171 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741626"];
3172 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 741627"];
3173 [label="param MergePrioritized(LookupResult other) 741628"];
3174 [label="param MergePrioritized(this) 741629"];
3175 [label="other.Kind 741630"];
3176 [label="get\n            {\n                return _kind;\n            } 741631"];
3177 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 741632"];
3178 [label="Kind 741633"];
3179 [label="get\n            {\n                return _kind;\n            } 741634"];
3180 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 741635"];
3181 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 741636"];
3182 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 741637"];
3183 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 741638"];
3184 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 741639"];
3185 [label="tmp.IsMultiViable 741640"];
3186 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 741641"];
3187 [label="return _kind; 741642"];
3188 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 741643"];
3189 [label="result.IsMultiViable 741644"];
3190 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 741645"];
3191 [label="return _kind; 741646"];
3192 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 741647"];
3193 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 741648"];
3194 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 741649"];
3195 [label="originalBinder.InCrefButNotParameterOrReturnType 741650"];
3196 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 741651"];
3197 [label="InCref 741652"];
3198 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 741653"];
3199 [label="return this.Flags.Includes(BinderFlags.Cref); 741654"];
3200 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 741655"];
3201 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 741656"];
3202 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 741657"];
3203 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 741658"];
3204 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 741659"];
3205 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 741660"];
3206 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 741661"];
3207 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 741662"];
3208 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 741663"];
3209 [label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 741664"];
3210 [label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 741665"];
3211 [label="tmp.Clear(); 741666"];
3212 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741667"];
3213 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741668"];
3214 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741669"];
3215 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741670"];
3216 [label="param LookupMembersWithoutInheritance(LookupResult result) 741671"];
3217 [label="param LookupMembersWithoutInheritance(int arity) 741672"];
3218 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 741673"];
3219 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 741674"];
3220 [label="param LookupMembersWithoutInheritance(bool diagnose) 741675"];
3221 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 741676"];
3222 [label="param GetCandidateMembers(Binder originalBinder) 741677"];
3223 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 741678"];
3224 [label="param MergePrioritized(LookupResult other) 741679"];
3225 [label="param MergePrioritized(this) 741680"];
3226 [label="other.Kind 741681"];
3227 [label="get\n            {\n                return _kind;\n            } 741682"];
3228 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 741683"];
3229 [label="Kind 741684"];
3230 [label="get\n            {\n                return _kind;\n            } 741685"];
3231 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 741686"];
3232 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 741687"];
3233 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 741688"];
3234 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 741689"];
3235 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 741690"];
3236 [label="tmp.IsMultiViable 741691"];
3237 [label="return _kind; 741692"];
3238 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 741693"];
3239 [label="result.IsMultiViable 741694"];
3240 [label="return _kind; 741695"];
3241 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 741696"];
3242 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 741697"];
3243 [label="originalBinder.InCrefButNotParameterOrReturnType 741698"];
3244 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 741699"];
3245 [label="InCref 741700"];
3246 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 741701"];
3247 [label="return this.Flags.Includes(BinderFlags.Cref); 741702"];
3248 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 741703"];
3249 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 741704"];
3250 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 741705"];
3251 [label="visited?.Free(); 741706"];
3252 [label="tmp.Free() 741707"];
3253 [label="param Free(this) 741708"];
3254 [label="_symbolList.Clear(); 741709"];
3255 [label="this.Clear(); 741710"];
3256 [label="tmp.Free(); 741711"];
3257 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 741712"];
3258 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 741713"];
3259 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741714"];
3260 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741715"];
3261 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741716"];
3262 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741717"];
3263 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741718"];
3264 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 741719"];
3265 [label="param LookupSymbol(Binder originalBinder) 741720"];
3266 [label="param LookupSymbol(LookupResult result) 741721"];
3267 [label="param LookupSymbol(string name) 741722"];
3268 [label="param LookupSymbol(int arity) 741723"];
3269 [label="param LookupSymbol(ConsList<TypeSymbol> basesBeingResolved) 741724"];
3270 [label="param LookupSymbol(LookupOptions options) 741725"];
3271 [label="param LookupSymbol(bool diagnose) 741726"];
3272 [label="param LookupSymbol(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741727"];
3273 [label="param LookupSymbol(this) 741728"];
3274 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741729"];
3275 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741730"];
3276 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741731"];
3277 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741732"];
3278 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741733"];
3279 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741734"];
3280 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741735"];
3281 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741736"];
3282 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 741737"];
3283 [label="param LookupSymbolInAliases(Binder originalBinder) 741738"];
3284 [label="param LookupSymbolInAliases(LookupResult result) 741739"];
3285 [label="param LookupSymbolInAliases(string name) 741740"];
3286 [label="param LookupSymbolInAliases(int arity) 741741"];
3287 [label="param LookupSymbolInAliases(ConsList<TypeSymbol> basesBeingResolved) 741742"];
3288 [label="param LookupSymbolInAliases(LookupOptions options) 741743"];
3289 [label="param LookupSymbolInAliases(bool diagnose) 741744"];
3290 [label="param LookupSymbolInAliases(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741745"];
3291 [label="param LookupSymbolInAliases(this) 741746"];
3292 [label="originalBinder.IsSemanticModelBinder 741747"];
3293 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 741748"];
3294 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 741749"];
3295 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 741750"];
3296 [label="this.Flags.Includes(BinderFlags.SemanticModel) 741751"];
3297 [label="param Includes(this BinderFlags self) 741752"];
3298 [label="param Includes(BinderFlags other) 741753"];
3299 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 741754"];
3300 [label="AliasAndUsingDirective alias; 741755"];
3301 [label="alias 741756"];
3302 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 741757"];
3303 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 741758"];
3304 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 741759"];
3305 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 741760"];
3306 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741761"];
3307 [label="result.IsMultiViable 741762"];
3308 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 741763"];
3309 [label="return _kind; 741764"];
3310 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 741765"];
3311 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 741766"];
3312 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 741767"];
3313 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 741768"];
3314 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741769"];
3315 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741770"];
3316 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741771"];
3317 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741772"];
3318 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741773"];
3319 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741774"];
3320 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741775"];
3321 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741776"];
3322 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741777"];
3323 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 741778"];
3324 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 741779"];
3325 [label="param LookupSymbolInUsings(Binder originalBinder) 741780"];
3326 [label="param LookupSymbolInUsings(LookupResult result) 741781"];
3327 [label="param LookupSymbolInUsings(string name) 741782"];
3328 [label="param LookupSymbolInUsings(int arity) 741783"];
3329 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 741784"];
3330 [label="param LookupSymbolInUsings(LookupOptions options) 741785"];
3331 [label="param LookupSymbolInUsings(bool diagnose) 741786"];
3332 [label="param LookupSymbolInUsings(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741787"];
3333 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 741788"];
3334 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 741789"];
3335 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 741790"];
3336 [label="param Includes(this BinderFlags self) 741791"];
3337 [label="param Includes(BinderFlags other) 741792"];
3338 [label="originalBinder.IsSemanticModelBinder 741793"];
3339 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 741794"];
3340 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 741795"];
3341 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 741796"];
3342 [label="this.Flags.Includes(BinderFlags.SemanticModel) 741797"];
3343 [label="param Includes(this BinderFlags self) 741798"];
3344 [label="param Includes(BinderFlags other) 741799"];
3345 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 741800"];
3346 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 741801"];
3347 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 741802"];
3348 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741803"];
3349 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741804"];
3350 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 741805"];
3351 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 741806"];
3352 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 741807"];
3353 [label="param LookupSymbolsInSingleBinder(int arity) 741808"];
3354 [label="param LookupSymbolsInSingleBinder(bool diagnose) 741809"];
3355 [label="result.IsClear 741810"];
3356 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 741811"];
3357 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741812"];
3358 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741813"];
3359 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 741814"];
3360 [label="Debug.Assert(result.IsClear); 741815"];
3361 [label="IsSubmissionClass 741816"];
3362 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 741817"];
3363 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 741818"];
3364 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 741819"];
3365 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 741820"];
3366 [label="param LookupMembersInternal(int arity) 741821"];
3367 [label="param LookupMembersInternal(bool diagnose) 741822"];
3368 [label="Debug.Assert(options.AreValid()); 741823"];
3369 [label="options.AreValid() 741824"];
3370 [label="param AreValid(this LookupOptions options) 741825"];
3371 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 741826"];
3372 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 741827"];
3373 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 741828"];
3374 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 741829"];
3375 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 741830"];
3376 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 741831"];
3377 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 741832"];
3378 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 741833"];
3379 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 741834"];
3380 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 741835"];
3381 [label="return OnlyOneBitSet(onlyOptions); 741836"];
3382 [label="OnlyOneBitSet(onlyOptions) 741837"];
3383 [label="param OnlyOneBitSet(LookupOptions o) 741838"];
3384 [label="return (o & (o - 1)) == 0; 741839"];
3385 [label="return (o & (o - 1)) == 0; 741840"];
3386 [label="Debug.Assert(arity >= 0); 741841"];
3387 [label="Debug.Assert(arity >= 0); 741842"];
3388 [label="param LookupMembersInNamespace(int arity) 741843"];
3389 [label="param LookupMembersInNamespace(bool diagnose) 741844"];
3390 [label="param GetCandidateMembers(Binder originalBinder) 741845"];
3391 [label="param LookupSymbol(Binder originalBinder) 741846"];
3392 [label="param LookupSymbol(LookupResult result) 741847"];
3393 [label="param LookupSymbol(int arity) 741848"];
3394 [label="param LookupSymbol(ConsList<TypeSymbol> basesBeingResolved) 741849"];
3395 [label="param LookupSymbol(LookupOptions options) 741850"];
3396 [label="param LookupSymbol(bool diagnose) 741851"];
3397 [label="param LookupSymbolInAliases(Binder originalBinder) 741852"];
3398 [label="param LookupSymbolInAliases(LookupResult result) 741853"];
3399 [label="param LookupSymbolInAliases(int arity) 741854"];
3400 [label="param LookupSymbolInAliases(ConsList<TypeSymbol> basesBeingResolved) 741855"];
3401 [label="param LookupSymbolInAliases(LookupOptions options) 741856"];
3402 [label="param LookupSymbolInAliases(bool diagnose) 741857"];
3403 [label="originalBinder.IsSemanticModelBinder 741858"];
3404 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 741859"];
3405 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 741860"];
3406 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 741861"];
3407 [label="this.Flags.Includes(BinderFlags.SemanticModel) 741862"];
3408 [label="param Includes(this BinderFlags self) 741863"];
3409 [label="param Includes(BinderFlags other) 741864"];
3410 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 741865"];
3411 [label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741866"];
3412 [label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741867"];
3413 [label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741868"];
3414 [label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741869"];
3415 [label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741870"];
3416 [label="var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved); 741871"];
3417 [label="originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved) 741872"];
3418 [label="param CheckViability(Symbol symbol) 741873"];
3419 [label="param CheckViability(int arity) 741874"];
3420 [label="param CheckViability(LookupOptions options) 741875"];
3421 [label="param CheckViability(TypeSymbol accessThroughType) 741876"];
3422 [label="param CheckViability(bool diagnose) 741877"];
3423 [label="param CheckViability(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741878"];
3424 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 741879"];
3425 [label="param CheckViability(this) 741880"];
3426 [label="bool inaccessibleViaQualifier; 741881"];
3427 [label="DiagnosticInfo diagInfo; 741882"];
3428 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 741883"];
3429 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 741884"];
3430 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 741885"];
3431 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 741886"];
3432 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 741887"];
3433 [label="param WrongArity(Symbol symbol) 741888"];
3434 [label="param WrongArity(int arity) 741889"];
3435 [label="param WrongArity(bool diagnose) 741890"];
3436 [label="param WrongArity(LookupOptions options) 741891"];
3437 [label="param WrongArity(out DiagnosticInfo diagInfo) 741892"];
3438 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 741893"];
3439 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 741894"];
3440 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 741895"];
3441 [label="diagInfo = null; 741896"];
3442 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 741897"];
3443 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 741898"];
3444 [label="RefineAccessThroughType(options, accessThroughType) 741899"];
3445 [label="param RefineAccessThroughType(LookupOptions options) 741900"];
3446 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 741901"];
3447 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 741902"];
3448 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 741903"];
3449 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 741904"];
3450 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 741905"];
3451 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 741906"];
3452 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 741907"];
3453 [label="param IsAccessible(TypeSymbol accessThroughType) 741908"];
3454 [label="param IsAccessible(out bool failedThroughTypeCheck) 741909"];
3455 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 741910"];
3456 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 741911"];
3457 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 741912"];
3458 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 741913"];
3459 [label="param Includes(this BinderFlags self) 741914"];
3460 [label="param Includes(BinderFlags other) 741915"];
3461 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 741916"];
3462 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 741917"];
3463 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 741918"];
3464 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 741919"];
3465 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 741920"];
3466 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 741921"];
3467 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 741922"];
3468 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 741923"];
3469 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 741924"];
3470 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 741925"];
3471 [label="this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics) 741926"];
3472 [label="param IsSymbolAccessibleConditional(Symbol symbol) 741927"];
3473 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 741928"];
3474 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 741929"];
3475 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 741930"];
3476 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 741931"];
3477 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 741932"];
3478 [label="param IsSymbolAccessibleConditional(this) 741933"];
3479 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 741934"];
3480 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 741935"];
3481 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 741936"];
3482 [label="param Includes(this BinderFlags self) 741937"];
3483 [label="param Includes(BinderFlags other) 741938"];
3484 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741939"];
3485 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741940"];
3486 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741941"];
3487 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741942"];
3488 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741943"];
3489 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 741944"];
3490 [label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 741945"];
3491 [label="param IsSymbolAccessible(Symbol symbol) 741946"];
3492 [label="param IsSymbolAccessible(NamedTypeSymbol within) 741947"];
3493 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 741948"];
3494 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 741949"];
3495 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741950"];
3496 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 741951"];
3497 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741952"];
3498 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741953"];
3499 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741954"];
3500 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741955"];
3501 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741956"];
3502 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741957"];
3503 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 741958"];
3504 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 741959"];
3505 [label="param IsSymbolAccessibleCore(Symbol symbol) 741960"];
3506 [label="param IsSymbolAccessibleCore(Symbol within) 741961"];
3507 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 741962"];
3508 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 741963"];
3509 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 741964"];
3510 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 741965"];
3511 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 741966"];
3512 [label="Debug.Assert((object)symbol != null); 741967"];
3513 [label="Debug.Assert((object)symbol != null); 741968"];
3514 [label="Debug.Assert((object)within != null); 741969"];
3515 [label="Debug.Assert((object)within != null); 741970"];
3516 [label="Debug.Assert(within.IsDefinition); 741971"];
3517 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 741972"];
3518 [label="failedThroughTypeCheck = false; 741973"];
3519 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 741974"];
3520 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 741975"];
3521 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 741976"];
3522 [label="param IsNamedTypeAccessible(Symbol within) 741977"];
3523 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 741978"];
3524 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 741979"];
3525 [label="Debug.Assert((object)type != null); 741980"];
3526 [label="var compilation = within.DeclaringCompilation; 741981"];
3527 [label="bool unused; 741982"];
3528 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 741983"];
3529 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 741984"];
3530 [label="param IsNonNestedTypeAccessible(Symbol within) 741985"];
3531 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 741986"];
3532 [label="Debug.Assert((object)assembly != null); 741987"];
3533 [label="Debug.Assert((object)assembly != null); 741988"];
3534 [label="if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                } 741989"];
3535 [label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel); 741990"];
3536 [label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel); 741991"];
3537 [label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel) 741992"];
3538 [label="param MarkImportDirective(CSharpSyntaxNode directive) 741993"];
3539 [label="param MarkImportDirective(bool callerIsSemanticModel) 741994"];
3540 [label="param MarkImportDirective(this) 741995"];
3541 [label="MarkImportDirective(_compilation, directive, callerIsSemanticModel); 741996"];
3542 [label="MarkImportDirective(_compilation, directive, callerIsSemanticModel); 741997"];
3543 [label="MarkImportDirective(_compilation, directive, callerIsSemanticModel); 741998"];
3544 [label="MarkImportDirective(_compilation, directive, callerIsSemanticModel) 741999"];
3545 [label="param MarkImportDirective(CSharpCompilation compilation) 742000"];
3546 [label="param MarkImportDirective(CSharpSyntaxNode directive) 742001"];
3547 [label="param MarkImportDirective(bool callerIsSemanticModel) 742002"];
3548 [label="Debug.Assert(compilation != null); 742003"];
3549 [label="Debug.Assert(compilation != null); 742004"];
3550 [label="if (directive != null && !callerIsSemanticModel)\n            {\n                compilation.MarkImportDirectiveAsUsed(directive);\n            } 742005"];
3551 [label="if (directive != null && !callerIsSemanticModel)\n            {\n                compilation.MarkImportDirectiveAsUsed(directive);\n            } 742006"];
3552 [label="if (directive != null && !callerIsSemanticModel)\n            {\n                compilation.MarkImportDirectiveAsUsed(directive);\n            } 742007"];
3553 [label="compilation.MarkImportDirectiveAsUsed(directive); 742008"];
3554 [label="compilation.MarkImportDirectiveAsUsed(directive); 742009"];
3555 [label="MarkImportDirective(_compilation, directive, callerIsSemanticModel); 742010"];
3556 [label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel); 742011"];
3557 [label="result.MergeEqual(res); 742012"];
3558 [label="result.MergeEqual(res) 742013"];
3559 [label="param MergeEqual(SingleLookupResult result) 742014"];
3560 [label="param MergeEqual(this) 742015"];
3561 [label="return _kind; 742016"];
3562 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 742017"];
3563 [label="result.MergeEqual(res); 742018"];
3564 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 742019"];
3565 [label="result.IsMultiViable 742020"];
3566 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 742021"];
3567 [label="return _kind; 742022"];
3568 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 742023"];
3569 [label="result.IsClear 742024"];
3570 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 742025"];
3571 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742026"];
3572 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 742027"];
3573 [label="binder = scope; 742028"];
3574 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 742029"];
3575 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 742030"];
3576 [label="return binder; 742031"];
3577 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 742032"];
3578 [label="diagnostics.Add(node, useSiteDiagnostics); 742033"];
3579 [label="diagnostics.Add(node, useSiteDiagnostics); 742034"];
3580 [label="diagnostics.Add(node, useSiteDiagnostics); 742035"];
3581 [label="Symbol bindingResult = null; 742036"];
3582 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 742037"];
3583 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 742038"];
3584 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 742039"];
3585 [label="IsViableType(result) 742040"];
3586 [label="param IsViableType(LookupResult result) 742041"];
3587 [label="result.IsMultiViable 742042"];
3588 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 742043"];
3589 [label="Kind 742044"];
3590 [label="return _kind; 742045"];
3591 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 742046"];
3592 [label="result.Symbols 742047"];
3593 [label="get\n            {\n                return _symbolList;\n            } 742048"];
3594 [label="return _symbolList; 742049"];
3595 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 742050"];
3596 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 742051"];
3597 [label="if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true; 742052"];
3598 [label="return true; 742053"];
3599 [label="if (bindingResult is null)\n            {\n                bool wasError;\n\n                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);\n                if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n            } 742054"];
3600 [label="bool wasError; 742055"];
3601 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742056"];
3602 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742057"];
3603 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742058"];
3604 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742059"];
3605 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742060"];
3606 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742061"];
3607 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742062"];
3608 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742063"];
3609 [label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 742064"];
3610 [label="param ResultSymbol(string simpleName) 742065"];
3611 [label="param ResultSymbol(int arity) 742066"];
3612 [label="param ResultSymbol(SyntaxNode where) 742067"];
3613 [label="param ResultSymbol(DiagnosticBag diagnostics) 742068"];
3614 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 742069"];
3615 [label="param ResultSymbol(out bool wasError) 742070"];
3616 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 742071"];
3617 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 742072"];
3618 [label="param ResultSymbol(this) 742073"];
3619 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742074"];
3620 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742075"];
3621 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742076"];
3622 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742077"];
3623 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742078"];
3624 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742079"];
3625 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742080"];
3626 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 742081"];
3627 [label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 742082"];
3628 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 742083"];
3629 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 742084"];
3630 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 742085"];
3631 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 742086"];
3632 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 742087"];
3633 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 742088"];
3634 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 742089"];
3635 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 742090"];
3636 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 742091"];
3637 [label="Debug.Assert(where != null); 742092"];
3638 [label="Debug.Assert(where != null); 742093"];
3639 [label="Debug.Assert(diagnostics != null); 742094"];
3640 [label="Debug.Assert(diagnostics != null); 742095"];
3641 [label="result.Symbols 742096"];
3642 [label="wasError = false; 742097"];
3643 [label="result.IsMultiViable 742098"];
3644 [label="Kind 742099"];
3645 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 742100"];
3646 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 742101"];
3647 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 742102"];
3648 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 742103"];
3649 [label="var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved); 742104"];
3650 [label="if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    } 742105"];
3651 [label="if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    } 742106"];
3652 [label="result.Free() 742107"];
3653 [label="this.Clear() 742108"];
3654 [label="_error = null; 742109"];
3655 [label="this.Clear(); 742110"];
3656 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 742111"];
3657 [label="result.Free(); 742112"];
3658 [label="AreNullableAnnotationsEnabled(node.Identifier) 742113"];
3659 [label="param AreNullableAnnotationsEnabled(this) 742114"];
3660 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 742115"];
3661 [label="param AreNullableAnnotationsEnabled(this) 742116"];
3662 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 742117"];
3663 [label="if (symbol is null)\n                {\n                    return default;\n                } 742118"];
3664 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) 742119"];
3665 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(Symbol symbol) 742120"];
3666 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(bool isNullableEnabled) 742121"];
3667 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 742122"];
3668 [label="Debug.Assert(!(symbol is TypeSymbol)); 742123"];
3669 [label="_typeWithAnnotations = default; 742124"];
3670 [label="_typeWithAnnotations 742125"];
3671 [label="_symbol 742126"];
3672 [label="_isNullableEnabled 742127"];
3673 [label="symbol.IsType 742128"];
3674 [label="=> !_typeWithAnnotations.IsDefault 742129"];
3675 [label="!_typeWithAnnotations.IsDefault 742130"];
3676 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 742131"];
3677 [label="symbol.IsAlias 742132"];
3678 [label="=> _symbol?.Kind == SymbolKind.Alias 742133"];
3679 [label="_symbol?.Kind == SymbolKind.Alias 742134"];
3680 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 742135"];
3681 [label="symbol.Symbol 742136"];
3682 [label="=> _symbol ?? TypeWithAnnotations.Type 742137"];
3683 [label="_symbol ?? TypeWithAnnotations.Type 742138"];
3684 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 742139"];
3685 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 742140"];
3686 [label="UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) 742141"];
3687 [label="param UnwrapAliasNoDiagnostics(Symbol symbol) 742142"];
3688 [label="param UnwrapAliasNoDiagnostics(ConsList<TypeSymbol> basesBeingResolved = null) 742143"];
3689 [label="if (symbol.Kind == SymbolKind.Alias)\n            {\n                return ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved);\n            } 742144"];
3690 [label="return ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved); 742145"];
3691 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 742146"];
3692 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 742147"];
3693 [label="symbol.IsType 742148"];
3694 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 742149"];
3695 [label="return symbol; 742150"];
3696 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 742151"];
3697 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 742152"];
3698 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 742153"];
3699 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 742154"];
3700 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 742155"];
3701 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 742156"];
3702 [label="param UnwrapAlias(DiagnosticBag diagnostics) 742157"];
3703 [label="param UnwrapAlias(SyntaxNode syntax) 742158"];
3704 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 742159"];
3705 [label="param UnwrapAlias(this) 742160"];
3706 [label="symbol.IsAlias 742161"];
3707 [label="=> _symbol?.Kind == SymbolKind.Alias 742162"];
3708 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 742163"];
3709 [label="AliasSymbol discarded; 742164"];
3710 [label="symbol.IsNullableEnabled 742165"];
3711 [label="get\n                {\n                    Debug.Assert(_symbol?.Kind == SymbolKind.Alias); // Not meaningful to use this property otherwise\n                    return _isNullableEnabled;\n                } 742166"];
3712 [label="Debug.Assert(_symbol?.Kind == SymbolKind.Alias); 742167"];
3713 [label="return _isNullableEnabled; 742168"];
3714 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742169"];
3715 [label="symbol.Symbol 742170"];
3716 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742171"];
3717 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742172"];
3718 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742173"];
3719 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742174"];
3720 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)); 742175"];
3721 [label="UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved) 742176"];
3722 [label="param UnwrapAlias(Symbol symbol) 742177"];
3723 [label="param UnwrapAlias(out AliasSymbol alias) 742178"];
3724 [label="param UnwrapAlias(DiagnosticBag diagnostics) 742179"];
3725 [label="param UnwrapAlias(SyntaxNode syntax) 742180"];
3726 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 742181"];
3727 [label="param UnwrapAlias(this) 742182"];
3728 [label="Debug.Assert(syntax != null); 742183"];
3729 [label="Debug.Assert(syntax != null); 742184"];
3730 [label="Debug.Assert(diagnostics != null); 742185"];
3731 [label="Debug.Assert(diagnostics != null); 742186"];
3732 [label="if (symbol.Kind == SymbolKind.Alias)\n            {\n                alias = (AliasSymbol)symbol;\n                var result = alias.GetAliasTarget(basesBeingResolved);\n                var type = result as TypeSymbol;\n                if ((object)type != null)\n                {\n                    // pass args in a value tuple to avoid allocating a closure\n                    var args = (this, diagnostics, syntax);\n                    type.VisitType((typePart, argTuple, isNested) =>\n                    {\n                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);\n                        return false;\n                    }, args);\n                }\n\n                return result;\n            } 742187"];
3733 [label="alias = (AliasSymbol)symbol; 742188"];
3734 [label="var result = alias.GetAliasTarget(basesBeingResolved); 742189"];
3735 [label="var result = alias.GetAliasTarget(basesBeingResolved); 742190"];
3736 [label="var type = result as TypeSymbol; 742191"];
3737 [label="if ((object)type != null)\n                {\n                    // pass args in a value tuple to avoid allocating a closure\n                    var args = (this, diagnostics, syntax);\n                    type.VisitType((typePart, argTuple, isNested) =>\n                    {\n                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);\n                        return false;\n                    }, args);\n                } 742192"];
3738 [label="if ((object)type != null)\n                {\n                    // pass args in a value tuple to avoid allocating a closure\n                    var args = (this, diagnostics, syntax);\n                    type.VisitType((typePart, argTuple, isNested) =>\n                    {\n                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);\n                        return false;\n                    }, args);\n                } 742193"];
3739 [label="var args = (this, diagnostics, syntax); 742194"];
3740 [label="this 742195"];
3741 [label="diagnostics 742196"];
3742 [label="syntax 742197"];
3743 [label="type.VisitType((typePart, argTuple, isNested) =>\n                    {\n                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);\n                        return false;\n                    }, args); 742198"];
3744 [label="type.VisitType((typePart, argTuple, isNested) =>\n                    {\n                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);\n                        return false;\n                    }, args); 742199"];
3745 [label="type.VisitType((typePart, argTuple, isNested) =>\n                    {\n                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);\n                        return false;\n                    }, args); 742200"];
3746 [label="type.VisitType((typePart, argTuple, isNested) =>\n                    {\n                        argTuple.Item1.ReportDiagnosticsIfObsolete(argTuple.diagnostics, typePart, argTuple.syntax, hasBaseReceiver: false);\n                        return false;\n                    }, args); 742201"];
3747 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742202"];
3748 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 742203"];
3749 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 742204"];
3750 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742205"];
3751 [label="param ReportDiagnosticsIfObsolete(this) 742206"];
3752 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 742207"];
3753 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 742208"];
3754 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 742209"];
3755 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 742210"];
3756 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 742211"];
3757 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742212"];
3758 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 742213"];
3759 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742214"];
3760 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742215"];
3761 [label="param ReportDiagnosticsIfObsolete(this) 742216"];
3762 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 742217"];
3763 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742218"];
3764 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742219"];
3765 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742220"];
3766 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742221"];
3767 [label="this.ContainingMemberOrLambda 742222"];
3768 [label="get { return _containingMemberOrLambda; } 742223"];
3769 [label="return _containingMemberOrLambda; 742224"];
3770 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742225"];
3771 [label="this.ContainingType 742226"];
3772 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 742227"];
3773 [label="this.ContainingMemberOrLambda 742228"];
3774 [label="get { return _containingMemberOrLambda; } 742229"];
3775 [label="return _containingMemberOrLambda; 742230"];
3776 [label="var member = this.ContainingMemberOrLambda; 742231"];
3777 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742232"];
3778 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742233"];
3779 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 742234"];
3780 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 742235"];
3781 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742236"];
3782 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742237"];
3783 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 742238"];
3784 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742239"];
3785 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 742240"];
3786 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742241"];
3787 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742242"];
3788 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 742243"];
3789 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 742244"];
3790 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 742245"];
3791 [label="RoslynDebug.Assert(symbol is object); 742246"];
3792 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 742247"];
3793 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 742248"];
3794 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 742249"];
3795 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 742250"];
3796 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 742251"];
3797 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 742252"];
3798 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 742253"];
3799 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 742254"];
3800 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 742255"];
3801 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 742256"];
3802 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 742257"];
3803 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 742258"];
3804 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 742259"];
3805 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 742260"];
3806 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 742261"];
3807 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 742262"];
3808 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 742263"];
3809 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 742264"];
3810 [label="RoslynDebug.Assert(diagnostics != null); 742265"];
3811 [label="RoslynDebug.Assert(diagnostics != null); 742266"];
3812 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 742267"];
3813 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 742268"];
3814 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 742269"];
3815 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 742270"];
3816 [label="DiagnosticInfo? info = null; 742271"];
3817 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 742272"];
3818 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 742273"];
3819 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 742274"];
3820 [label="return kind; 742275"];
3821 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 742276"];
3822 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 742277"];
3823 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742278"];
3824 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 742279"];
3825 [label="return result; 742280"];
3826 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved)) 742281"];
3827 [label="param CreateUnannotated(bool isNullableEnabled) 742282"];
3828 [label="param CreateUnannotated(Symbol symbol) 742283"];
3829 [label="if (symbol is null)\n                {\n                    return default;\n                } 742284"];
3830 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 742285"];
3831 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 742286"];
3832 [label="Debug.Assert(typeWithAnnotations.HasType); 742287"];
3833 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 742288"];
3834 [label="=> _typeWithAnnotations 742289"];
3835 [label="_typeWithAnnotations 742290"];
3836 [label="Debug.Assert(node != null); 742291"];
3837 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 742292"];
3838 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 742293"];
3839 [label="SourceMemberMethodSymbol method = null; 742294"];
3840 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 742295"];
3841 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 742296"];
3842 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 742297"];
3843 [label="param Includes(this BinderFlags self) 742298"];
3844 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 742299"];
3845 [label="param Includes(this BinderFlags self) 742300"];
3846 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 742301"];
3847 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 742302"];
3848 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 742303"];
3849 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 742304"];
3850 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 742305"];
3851 [label="param CreateErrorIfLookupOnTypeParameter(string name) 742306"];
3852 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 742307"];
3853 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 742308"];
3854 [label="param CreateErrorIfLookupOnTypeParameter(this) 742309"];
3855 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 742310"];
3856 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 742311"];
3857 [label="return null; 742312"];
3858 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 742313"];
3859 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 742314"];
3860 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 742315"];
3861 [label="instance.IsClear 742316"];
3862 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 742317"];
3863 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742318"];
3864 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742319"];
3865 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742320"];
3866 [label="Debug.Assert(instance.IsClear); 742321"];
3867 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 742322"];
3868 [label="param LookupSymbolsSimpleName(int arity) 742323"];
3869 [label="param LookupSymbolsSimpleName(bool diagnose) 742324"];
3870 [label="param LookupSymbolsOrMembersInternal(int arity) 742325"];
3871 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 742326"];
3872 [label="param LookupSymbolsInternal(int arity) 742327"];
3873 [label="param LookupSymbolsInternal(bool diagnose) 742328"];
3874 [label="result.IsClear 742329"];
3875 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 742330"];
3876 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742331"];
3877 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742332"];
3878 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742333"];
3879 [label="Debug.Assert(result.IsClear); 742334"];
3880 [label="Debug.Assert(options.AreValid()); 742335"];
3881 [label="options.AreValid() 742336"];
3882 [label="param AreValid(this LookupOptions options) 742337"];
3883 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 742338"];
3884 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 742339"];
3885 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 742340"];
3886 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 742341"];
3887 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 742342"];
3888 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742343"];
3889 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742344"];
3890 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742345"];
3891 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 742346"];
3892 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 742347"];
3893 [label="return OnlyOneBitSet(onlyOptions); 742348"];
3894 [label="OnlyOneBitSet(onlyOptions) 742349"];
3895 [label="param OnlyOneBitSet(LookupOptions o) 742350"];
3896 [label="return (o & (o - 1)) == 0; 742351"];
3897 [label="return (o & (o - 1)) == 0; 742352"];
3898 [label="param LookupSymbolsInSingleBinder(LookupResult result) 742353"];
3899 [label="param LookupSymbolsInSingleBinder(string name) 742354"];
3900 [label="param LookupSymbolsInSingleBinder(int arity) 742355"];
3901 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 742356"];
3902 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 742357"];
3903 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 742358"];
3904 [label="param LookupSymbolsInSingleBinder(bool diagnose) 742359"];
3905 [label="param LookupSymbolsInSingleBinder(this) 742360"];
3906 [label="result.IsClear 742361"];
3907 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 742362"];
3908 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742363"];
3909 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742364"];
3910 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742365"];
3911 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 742366"];
3912 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 742367"];
3913 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 742368"];
3914 [label="param LookupSymbolsInSingleBinder(int arity) 742369"];
3915 [label="param LookupSymbolsInSingleBinder(bool diagnose) 742370"];
3916 [label="result.IsClear 742371"];
3917 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 742372"];
3918 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742373"];
3919 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742374"];
3920 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742375"];
3921 [label="Debug.Assert(result.IsClear); 742376"];
3922 [label="IsSubmissionClass 742377"];
3923 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 742378"];
3924 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 742379"];
3925 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 742380"];
3926 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 742381"];
3927 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 742382"];
3928 [label="param LookupMembersInternal(int arity) 742383"];
3929 [label="param LookupMembersInternal(bool diagnose) 742384"];
3930 [label="Debug.Assert(options.AreValid()); 742385"];
3931 [label="options.AreValid() 742386"];
3932 [label="param AreValid(this LookupOptions options) 742387"];
3933 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 742388"];
3934 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 742389"];
3935 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 742390"];
3936 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 742391"];
3937 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 742392"];
3938 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742393"];
3939 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742394"];
3940 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742395"];
3941 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 742396"];
3942 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 742397"];
3943 [label="return OnlyOneBitSet(onlyOptions); 742398"];
3944 [label="OnlyOneBitSet(onlyOptions) 742399"];
3945 [label="param OnlyOneBitSet(LookupOptions o) 742400"];
3946 [label="return (o & (o - 1)) == 0; 742401"];
3947 [label="return (o & (o - 1)) == 0; 742402"];
3948 [label="Debug.Assert(arity >= 0); 742403"];
3949 [label="Debug.Assert(arity >= 0); 742404"];
3950 [label="param LookupMembersInType(int arity) 742405"];
3951 [label="param LookupMembersInType(Binder originalBinder) 742406"];
3952 [label="param LookupMembersInType(bool diagnose) 742407"];
3953 [label="param LookupMembersInClass(int arity) 742408"];
3954 [label="param LookupMembersInClass(Binder originalBinder) 742409"];
3955 [label="param LookupMembersInClass(bool diagnose) 742410"];
3956 [label="param LookupMembersInClass(int arity) 742411"];
3957 [label="param LookupMembersInClass(Binder originalBinder) 742412"];
3958 [label="param LookupMembersInClass(TypeSymbol accessThroughType) 742413"];
3959 [label="param LookupMembersInClass(bool diagnose) 742414"];
3960 [label="Debug.Assert((object)type != null); 742415"];
3961 [label="instance.IsClear 742416"];
3962 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 742417"];
3963 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742418"];
3964 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742419"];
3965 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742420"];
3966 [label="Debug.Assert(instance.IsClear); 742421"];
3967 [label="tmp.Clear(); 742422"];
3968 [label="param LookupMembersWithoutInheritance(LookupResult result) 742423"];
3969 [label="param LookupMembersWithoutInheritance(int arity) 742424"];
3970 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 742425"];
3971 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 742426"];
3972 [label="param LookupMembersWithoutInheritance(bool diagnose) 742427"];
3973 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 742428"];
3974 [label="param GetCandidateMembers(Binder originalBinder) 742429"];
3975 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 742430"];
3976 [label="param MergePrioritized(LookupResult other) 742431"];
3977 [label="param MergePrioritized(this) 742432"];
3978 [label="other.Kind 742433"];
3979 [label="get\n            {\n                return _kind;\n            } 742434"];
3980 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 742435"];
3981 [label="Kind 742436"];
3982 [label="get\n            {\n                return _kind;\n            } 742437"];
3983 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 742438"];
3984 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 742439"];
3985 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 742440"];
3986 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 742441"];
3987 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 742442"];
3988 [label="tmp.IsMultiViable 742443"];
3989 [label="return _kind; 742444"];
3990 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 742445"];
3991 [label="result.IsMultiViable 742446"];
3992 [label="return _kind; 742447"];
3993 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 742448"];
3994 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 742449"];
3995 [label="originalBinder.InCrefButNotParameterOrReturnType 742450"];
3996 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 742451"];
3997 [label="InCref 742452"];
3998 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 742453"];
3999 [label="return this.Flags.Includes(BinderFlags.Cref); 742454"];
4000 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 742455"];
4001 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 742456"];
4002 [label="tmp.Clear(); 742457"];
4003 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 742458"];
4004 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 742459"];
4005 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 742460"];
4006 [label="param LookupMembersWithoutInheritance(LookupResult result) 742461"];
4007 [label="param LookupMembersWithoutInheritance(int arity) 742462"];
4008 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 742463"];
4009 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 742464"];
4010 [label="param LookupMembersWithoutInheritance(bool diagnose) 742465"];
4011 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 742466"];
4012 [label="param GetCandidateMembers(Binder originalBinder) 742467"];
4013 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 742468"];
4014 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 742469"];
4015 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 742470"];
4016 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 742471"];
4017 [label="tmp.IsMultiViable 742472"];
4018 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 742473"];
4019 [label="result.IsMultiViable 742474"];
4020 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 742475"];
4021 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 742476"];
4022 [label="originalBinder.InCrefButNotParameterOrReturnType 742477"];
4023 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 742478"];
4024 [label="InCref 742479"];
4025 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 742480"];
4026 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 742481"];
4027 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 742482"];
4028 [label="visited?.Free(); 742483"];
4029 [label="this.Clear(); 742484"];
4030 [label="tmp.Free(); 742485"];
4031 [label="param LookupSymbol(int arity) 742486"];
4032 [label="param LookupSymbol(bool diagnose) 742487"];
4033 [label="param LookupSymbolInAliases(int arity) 742488"];
4034 [label="param LookupSymbolInAliases(bool diagnose) 742489"];
4035 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 742490"];
4036 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 742491"];
4037 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 742492"];
4038 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 742493"];
4039 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 742494"];
4040 [label="param LookupSymbolInUsings(Binder originalBinder) 742495"];
4041 [label="param LookupSymbolInUsings(LookupResult result) 742496"];
4042 [label="param LookupSymbolInUsings(string name) 742497"];
4043 [label="param LookupSymbolInUsings(int arity) 742498"];
4044 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 742499"];
4045 [label="param LookupSymbolInUsings(LookupOptions options) 742500"];
4046 [label="param LookupSymbolInUsings(bool diagnose) 742501"];
4047 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 742502"];
4048 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 742503"];
4049 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 742504"];
4050 [label="param Includes(this BinderFlags self) 742505"];
4051 [label="param Includes(BinderFlags other) 742506"];
4052 [label="originalBinder.IsSemanticModelBinder 742507"];
4053 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 742508"];
4054 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 742509"];
4055 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 742510"];
4056 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742511"];
4057 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742512"];
4058 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 742513"];
4059 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 742514"];
4060 [label="param LookupSymbolsInSingleBinder(int arity) 742515"];
4061 [label="param LookupSymbolsInSingleBinder(bool diagnose) 742516"];
4062 [label="result.IsClear 742517"];
4063 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 742518"];
4064 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742519"];
4065 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742520"];
4066 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742521"];
4067 [label="Debug.Assert(result.IsClear); 742522"];
4068 [label="IsSubmissionClass 742523"];
4069 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 742524"];
4070 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 742525"];
4071 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 742526"];
4072 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 742527"];
4073 [label="param LookupMembersInternal(int arity) 742528"];
4074 [label="param LookupMembersInternal(bool diagnose) 742529"];
4075 [label="Debug.Assert(options.AreValid()); 742530"];
4076 [label="options.AreValid() 742531"];
4077 [label="param AreValid(this LookupOptions options) 742532"];
4078 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 742533"];
4079 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 742534"];
4080 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 742535"];
4081 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 742536"];
4082 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 742537"];
4083 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742538"];
4084 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742539"];
4085 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742540"];
4086 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 742541"];
4087 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 742542"];
4088 [label="return OnlyOneBitSet(onlyOptions); 742543"];
4089 [label="OnlyOneBitSet(onlyOptions) 742544"];
4090 [label="param OnlyOneBitSet(LookupOptions o) 742545"];
4091 [label="return (o & (o - 1)) == 0; 742546"];
4092 [label="return (o & (o - 1)) == 0; 742547"];
4093 [label="Debug.Assert(arity >= 0); 742548"];
4094 [label="Debug.Assert(arity >= 0); 742549"];
4095 [label="param LookupMembersInNamespace(int arity) 742550"];
4096 [label="param LookupMembersInNamespace(bool diagnose) 742551"];
4097 [label="param GetCandidateMembers(Binder originalBinder) 742552"];
4098 [label="param LookupSymbol(int arity) 742553"];
4099 [label="param LookupSymbol(bool diagnose) 742554"];
4100 [label="param LookupSymbolInAliases(int arity) 742555"];
4101 [label="param LookupSymbolInAliases(bool diagnose) 742556"];
4102 [label="param CheckViability(int arity) 742557"];
4103 [label="param CheckViability(TypeSymbol accessThroughType) 742558"];
4104 [label="param CheckViability(bool diagnose) 742559"];
4105 [label="bool inaccessibleViaQualifier; 742560"];
4106 [label="DiagnosticInfo diagInfo; 742561"];
4107 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 742562"];
4108 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 742563"];
4109 [label="param WrongArity(Symbol symbol) 742564"];
4110 [label="param WrongArity(int arity) 742565"];
4111 [label="param WrongArity(bool diagnose) 742566"];
4112 [label="param WrongArity(LookupOptions options) 742567"];
4113 [label="param WrongArity(out DiagnosticInfo diagInfo) 742568"];
4114 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 742569"];
4115 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 742570"];
4116 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 742571"];
4117 [label="diagInfo = null; 742572"];
4118 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 742573"];
4119 [label="RefineAccessThroughType(options, accessThroughType) 742574"];
4120 [label="param RefineAccessThroughType(LookupOptions options) 742575"];
4121 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 742576"];
4122 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 742577"];
4123 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 742578"];
4124 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 742579"];
4125 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 742580"];
4126 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 742581"];
4127 [label="param IsAccessible(TypeSymbol accessThroughType) 742582"];
4128 [label="param IsAccessible(out bool failedThroughTypeCheck) 742583"];
4129 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 742584"];
4130 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 742585"];
4131 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 742586"];
4132 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 742587"];
4133 [label="param Includes(this BinderFlags self) 742588"];
4134 [label="param Includes(BinderFlags other) 742589"];
4135 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 742590"];
4136 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 742591"];
4137 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 742592"];
4138 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 742593"];
4139 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 742594"];
4140 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 742595"];
4141 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 742596"];
4142 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 742597"];
4143 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 742598"];
4144 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 742599"];
4145 [label="param IsSymbolAccessibleConditional(this) 742600"];
4146 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 742601"];
4147 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 742602"];
4148 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 742603"];
4149 [label="param Includes(this BinderFlags self) 742604"];
4150 [label="param Includes(BinderFlags other) 742605"];
4151 [label="param IsSymbolAccessible(NamedTypeSymbol within) 742606"];
4152 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 742607"];
4153 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 742608"];
4154 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 742609"];
4155 [label="param IsSymbolAccessibleCore(Symbol within) 742610"];
4156 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 742611"];
4157 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 742612"];
4158 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 742613"];
4159 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 742614"];
4160 [label="Debug.Assert((object)symbol != null); 742615"];
4161 [label="Debug.Assert((object)within != null); 742616"];
4162 [label="Debug.Assert((object)within != null); 742617"];
4163 [label="Debug.Assert(within.IsDefinition); 742618"];
4164 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 742619"];
4165 [label="failedThroughTypeCheck = false; 742620"];
4166 [label="param IsNamedTypeAccessible(Symbol within) 742621"];
4167 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 742622"];
4168 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 742623"];
4169 [label="Debug.Assert((object)type != null); 742624"];
4170 [label="var compilation = within.DeclaringCompilation; 742625"];
4171 [label="bool unused; 742626"];
4172 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 742627"];
4173 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 742628"];
4174 [label="param IsNonNestedTypeAccessible(Symbol within) 742629"];
4175 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 742630"];
4176 [label="Debug.Assert((object)assembly != null); 742631"];
4177 [label="Debug.Assert((object)assembly != null); 742632"];
4178 [label="Debug.Assert(compilation != null); 742633"];
4179 [label="return _kind; 742634"];
4180 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 742635"];
4181 [label="result.IsClear 742636"];
4182 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 742637"];
4183 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742638"];
4184 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 742639"];
4185 [label="binder = scope; 742640"];
4186 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 742641"];
4187 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 742642"];
4188 [label="return binder; 742643"];
4189 [label="diagnostics.Add(node, useSiteDiagnostics); 742644"];
4190 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 742645"];
4191 [label="IsViableType(result) 742646"];
4192 [label="param IsViableType(LookupResult result) 742647"];
4193 [label="result.IsMultiViable 742648"];
4194 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 742649"];
4195 [label="return _kind; 742650"];
4196 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 742651"];
4197 [label="result.Symbols 742652"];
4198 [label="get\n            {\n                return _symbolList;\n            } 742653"];
4199 [label="return _symbolList; 742654"];
4200 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 742655"];
4201 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 742656"];
4202 [label="if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true; 742657"];
4203 [label="return true; 742658"];
4204 [label="bool wasError; 742659"];
4205 [label="param ResultSymbol(string simpleName) 742660"];
4206 [label="param ResultSymbol(int arity) 742661"];
4207 [label="param ResultSymbol(out bool wasError) 742662"];
4208 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 742663"];
4209 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 742664"];
4210 [label="param ResultSymbol(this) 742665"];
4211 [label="Debug.Assert(where != null); 742666"];
4212 [label="Debug.Assert(where != null); 742667"];
4213 [label="Debug.Assert(diagnostics != null); 742668"];
4214 [label="Debug.Assert(diagnostics != null); 742669"];
4215 [label="wasError = false; 742670"];
4216 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 742671"];
4217 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 742672"];
4218 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 742673"];
4219 [label="this.Clear(); 742674"];
4220 [label="result.Free(); 742675"];
4221 [label="if (symbol is null)\n                {\n                    return default;\n                } 742676"];
4222 [label="Debug.Assert(!(symbol is TypeSymbol)); 742677"];
4223 [label="symbol.IsType 742678"];
4224 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 742679"];
4225 [label="AliasSymbol discarded; 742680"];
4226 [label="Debug.Assert(_symbol?.Kind == SymbolKind.Alias); 742681"];
4227 [label="param UnwrapAlias(out AliasSymbol alias) 742682"];
4228 [label="Debug.Assert(syntax != null); 742683"];
4229 [label="Debug.Assert(diagnostics != null); 742684"];
4230 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742685"];
4231 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 742686"];
4232 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742687"];
4233 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742688"];
4234 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742689"];
4235 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742690"];
4236 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742691"];
4237 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 742692"];
4238 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742693"];
4239 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742694"];
4240 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 742695"];
4241 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742696"];
4242 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742697"];
4243 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742698"];
4244 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 742699"];
4245 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 742700"];
4246 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 742701"];
4247 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 742702"];
4248 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 742703"];
4249 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 742704"];
4250 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 742705"];
4251 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 742706"];
4252 [label="RoslynDebug.Assert(diagnostics != null); 742707"];
4253 [label="RoslynDebug.Assert(diagnostics != null); 742708"];
4254 [label="DiagnosticInfo? info = null; 742709"];
4255 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 742710"];
4256 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 742711"];
4257 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 742712"];
4258 [label="return kind; 742713"];
4259 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 742714"];
4260 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 742715"];
4261 [label="if (symbol is null)\n                {\n                    return default;\n                } 742716"];
4262 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 742717"];
4263 [label="Debug.Assert(typeWithAnnotations.HasType); 742718"];
4264 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 742719"];
4265 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 742720"];
4266 [label="pNames = PooledHashSet<string>.GetInstance(); 742721"];
4267 [label="foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                } 742722"];
4268 [label="var name = p.Name; 742723"];
4269 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 742724"];
4270 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 742725"];
4271 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 742726"];
4272 [label="if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 742727"];
4273 [label="if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 742728"];
4274 [label="if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 742729"];
4275 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 742730"];
4276 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 742731"];
4277 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics) 742732"];
4278 [label="param ValidateDeclarationNameConflictsInScope(Symbol symbol) 742733"];
4279 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 742734"];
4280 [label="param ValidateDeclarationNameConflictsInScope(this) 742735"];
4281 [label="Location location = GetLocation(symbol); 742736"];
4282 [label="GetLocation(symbol) 742737"];
4283 [label="param GetLocation(Symbol symbol) 742738"];
4284 [label="var locations = symbol.Locations; 742739"];
4285 [label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 742740"];
4286 [label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 742741"];
4287 [label="locations.Length != 0 742742"];
4288 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 742743"];
4289 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 742744"];
4290 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 742745"];
4291 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 742746"];
4292 [label="ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics) 742747"];
4293 [label="param ValidateNameConflictsInScope(Symbol? symbol) 742748"];
4294 [label="param ValidateNameConflictsInScope(Location location) 742749"];
4295 [label="param ValidateNameConflictsInScope(string name) 742750"];
4296 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 742751"];
4297 [label="param ValidateNameConflictsInScope(this) 742752"];
4298 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 742753"];
4299 [label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 742754"];
4300 [label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 742755"];
4301 [label="for (Binder? binder = this; binder != null; binder = binder.Next)\n            {\n                // no local scopes enclose members\n                if (binder is InContainerBinder)\n                {\n                    return false;\n                }\n\n                var scope = binder as LocalScopeBinder;\n                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                }\n\n                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.\n                if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                }\n\n                if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                }\n            } 742756"];
4302 [label="for (Binder? binder = this; binder != null; binder = binder.Next)\n            {\n                // no local scopes enclose members\n                if (binder is InContainerBinder)\n                {\n                    return false;\n                }\n\n                var scope = binder as LocalScopeBinder;\n                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                }\n\n                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.\n                if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                }\n\n                if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                }\n            } 742757"];
4303 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 742758"];
4304 [label="var scope = binder as LocalScopeBinder; 742759"];
4305 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 742760"];
4306 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 742761"];
4307 [label="binder.IsNestedFunctionBinder 742762"];
4308 [label="=> false 742763"];
4309 [label="false 742764"];
4310 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 742765"];
4311 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 742766"];
4312 [label="binder.IsLastBinderWithinMember() 742767"];
4313 [label="param IsLastBinderWithinMember(this) 742768"];
4314 [label="this.ContainingMemberOrLambda 742769"];
4315 [label="get { return _containingMemberOrLambda; } 742770"];
4316 [label="return _containingMemberOrLambda; 742771"];
4317 [label="var containingMemberOrLambda = this.ContainingMemberOrLambda; 742772"];
4318 [label="switch (containingMemberOrLambda?.Kind)\n            {\n                case null:\n                case SymbolKind.NamedType:\n                case SymbolKind.Namespace:\n                    return true;\n                default:\n                    return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda;\n            } 742773"];
4319 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 742774"];
4320 [label=".ContainingMemberOrLambda 742775"];
4321 [label="_container 742776"];
4322 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 742777"];
4323 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 742778"];
4324 [label="return false; 742779"];
4325 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 742780"];
4326 [label="pNames?.Free(); 742781"];
4327 [label="return bindPredefined(syntax, diagnostics); 742782"];
4328 [label="return bindPredefined(syntax, diagnostics); 742783"];
4329 [label="bindPredefined(syntax, diagnostics) 742784"];
4330 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 742785"];
4331 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 742786"];
4332 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 742787"];
4333 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 742788"];
4334 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 742789"];
4335 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 742790"];
4336 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 742791"];
4337 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 742792"];
4338 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 742793"];
4339 [label="param BindPredefinedTypeSymbol(this) 742794"];
4340 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 742795"];
4341 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 742796"];
4342 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 742797"];
4343 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 742798"];
4344 [label="param GetSpecialType(SpecialType typeId) 742799"];
4345 [label="param GetSpecialType(DiagnosticBag diagnostics) 742800"];
4346 [label="param GetSpecialType(SyntaxNode node) 742801"];
4347 [label="param GetSpecialType(this) 742802"];
4348 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 742803"];
4349 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 742804"];
4350 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 742805"];
4351 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 742806"];
4352 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 742807"];
4353 [label="param GetSpecialType(CSharpCompilation compilation) 742808"];
4354 [label="param GetSpecialType(SpecialType typeId) 742809"];
4355 [label="param GetSpecialType(SyntaxNode node) 742810"];
4356 [label="param GetSpecialType(DiagnosticBag diagnostics) 742811"];
4357 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 742812"];
4358 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 742813"];
4359 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 742814"];
4360 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 742815"];
4361 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 742816"];
4362 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 742817"];
4363 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 742818"];
4364 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 742819"];
4365 [label="param ReportUseSiteDiagnostics(Symbol symbol) 742820"];
4366 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 742821"];
4367 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 742822"];
4368 [label="return typeSymbol; 742823"];
4369 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 742824"];
4370 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 742825"];
4371 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 742826"];
4372 [label="param AreNullableAnnotationsEnabled(this) 742827"];
4373 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 742828"];
4374 [label="type 742829"];
4375 [label="param operator(TypeWithAnnotations typeWithAnnotations) 742830"];
4376 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 742831"];
4377 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 742832"];
4378 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 742833"];
4379 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 742834"];
4380 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 742835"];
4381 [label="Debug.Assert(typeWithAnnotations.HasType); 742836"];
4382 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 742837"];
4383 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 742838"];
4384 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 742839"];
4385 [label="symbol.IsType 742840"];
4386 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 742841"];
4387 [label="symbol.TypeWithAnnotations 742842"];
4388 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 742843"];
4389 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 742844"];
4390 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 742845"];
4391 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 742846"];
4392 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 742847"];
4393 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 742848"];
4394 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742849"];
4395 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742850"];
4396 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742851"];
4397 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742852"];
4398 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742853"];
4399 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 742854"];
4400 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 742855"];
4401 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 742856"];
4402 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 742857"];
4403 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 742858"];
4404 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 742859"];
4405 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 742860"];
4406 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 742861"];
4407 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 742862"];
4408 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 742863"];
4409 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 742864"];
4410 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 742865"];
4411 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 742866"];
4412 [label="RoslynDebug.Assert(diagnostics != null); 742867"];
4413 [label="RoslynDebug.Assert(diagnostics != null); 742868"];
4414 [label="DiagnosticInfo? info = null; 742869"];
4415 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 742870"];
4416 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 742871"];
4417 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 742872"];
4418 [label="return kind; 742873"];
4419 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 742874"];
4420 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 742875"];
4421 [label="_symbol 742876"];
4422 [label="param TypeConversions(AssemblySymbol corLibrary) 742877"];
4423 [label="param TypeConversions(bool includeNullability = false) 742878"];
4424 [label="param TypeConversions(this) 742879"];
4425 [label="corLibrary 742880"];
4426 [label="0 742881"];
4427 [label="includeNullability 742882"];
4428 [label="null 742883"];
4429 [label="param TypeConversions(this) 742884"];
4430 [label="param TypeConversions(AssemblySymbol corLibrary) 742885"];
4431 [label="param TypeConversions(int currentRecursionDepth) 742886"];
4432 [label="param TypeConversions(bool includeNullability) 742887"];
4433 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 742888"];
4434 [label="param TypeConversions(this) 742889"];
4435 [label="corLibrary 742890"];
4436 [label="currentRecursionDepth 742891"];
4437 [label="includeNullability 742892"];
4438 [label="otherNullabilityOpt 742893"];
4439 [label="param TypeConversions(this) 742894"];
4440 [label="param ConversionsBase(AssemblySymbol corLibrary) 742895"];
4441 [label="param ConversionsBase(int currentRecursionDepth) 742896"];
4442 [label="param ConversionsBase(bool includeNullability) 742897"];
4443 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 742898"];
4444 [label="param ConversionsBase(this) 742899"];
4445 [label="corLibrary 742900"];
4446 [label="currentRecursionDepth 742901"];
4447 [label="IncludeNullability 742902"];
4448 [label="_lazyOtherNullability 742903"];
4449 [label="Debug.Assert((object)corLibrary != null); 742904"];
4450 [label="Debug.Assert((object)corLibrary != null); 742905"];
4451 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 742906"];
4452 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 742907"];
4453 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 742908"];
4454 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 742909"];
4455 [label="this.corLibrary 742910"];
4456 [label="this.currentRecursionDepth 742911"];
4457 [label="IncludeNullability 742912"];
4458 [label="_lazyOtherNullability 742913"];
4459 [label="Debug.Assert(node != null); 742914"];
4460 [label="param DefaultVisit(SyntaxNode parent) 742915"];
4461 [label="param DefaultVisit(this) 742916"];
4462 [label="return VisitCore(parent.Parent); 742917"];
4463 [label="VisitCore(parent.Parent) 742918"];
4464 [label="param VisitCore(SyntaxNode node) 742919"];
4465 [label="param VisitCore(this) 742920"];
4466 [label="return ((CSharpSyntaxNode)node).Accept(this); 742921"];
4467 [label="param VisitFieldDeclaration(FieldDeclarationSyntax parent) 742922"];
4468 [label="param VisitFieldDeclaration(this) 742923"];
4469 [label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 742924"];
4470 [label="VisitCore(parent.Parent) 742925"];
4471 [label="param VisitCore(SyntaxNode node) 742926"];
4472 [label="param VisitCore(this) 742927"];
4473 [label="return ((CSharpSyntaxNode)node).Accept(this); 742928"];
4474 [label="VisitTypeDeclarationCore(node) 742929"];
4475 [label="NodeUsage extraInfo = NodeUsage.Normal; 742930"];
4476 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 742931"];
4477 [label="VisitTypeDeclarationCore(parent, extraInfo) 742932"];
4478 [label="CreateBinderCacheKey(parent, extraInfo) 742933"];
4479 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 742934"];
4480 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 742935"];
4481 [label="return new BinderCacheKey(node, usage); 742936"];
4482 [label="new BinderCacheKey(node, usage) 742937"];
4483 [label="param BinderCacheKey(this) 742938"];
4484 [label="var key = CreateBinderCacheKey(parent, extraInfo); 742939"];
4485 [label="Binder resultBinder; 742940"];
4486 [label="binderCache 742941"];
4487 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 742942"];
4488 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 742943"];
4489 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 742944"];
4490 [label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 742945"];
4491 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 742946"];
4492 [label="param WithUnsafeRegionIfNecessary(this) 742947"];
4493 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 742948"];
4494 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 742949"];
4495 [label="param Includes(BinderFlags other) 742950"];
4496 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 742951"];
4497 [label="param Includes(this BinderFlags self) 742952"];
4498 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 742953"];
4499 [label="param Includes(this BinderFlags self) 742954"];
4500 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 742955"];
4501 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 742956"];
4502 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 742957"];
4503 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 742958"];
4504 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 742959"];
4505 [label="param CreateErrorIfLookupOnTypeParameter(string name) 742960"];
4506 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 742961"];
4507 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 742962"];
4508 [label="param CreateErrorIfLookupOnTypeParameter(this) 742963"];
4509 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 742964"];
4510 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 742965"];
4511 [label="return null; 742966"];
4512 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 742967"];
4513 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 742968"];
4514 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 742969"];
4515 [label="instance.IsClear 742970"];
4516 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 742971"];
4517 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742972"];
4518 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742973"];
4519 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742974"];
4520 [label="Debug.Assert(instance.IsClear); 742975"];
4521 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 742976"];
4522 [label="param LookupSymbolsSimpleName(bool diagnose) 742977"];
4523 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 742978"];
4524 [label="param LookupSymbolsInternal(bool diagnose) 742979"];
4525 [label="result.IsClear 742980"];
4526 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 742981"];
4527 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742982"];
4528 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742983"];
4529 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 742984"];
4530 [label="Debug.Assert(result.IsClear); 742985"];
4531 [label="Debug.Assert(options.AreValid()); 742986"];
4532 [label="options.AreValid() 742987"];
4533 [label="param AreValid(this LookupOptions options) 742988"];
4534 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 742989"];
4535 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 742990"];
4536 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 742991"];
4537 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 742992"];
4538 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 742993"];
4539 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742994"];
4540 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742995"];
4541 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 742996"];
4542 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 742997"];
4543 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 742998"];
4544 [label="return OnlyOneBitSet(onlyOptions); 742999"];
4545 [label="OnlyOneBitSet(onlyOptions) 743000"];
4546 [label="param OnlyOneBitSet(LookupOptions o) 743001"];
4547 [label="return (o & (o - 1)) == 0; 743002"];
4548 [label="return (o & (o - 1)) == 0; 743003"];
4549 [label="param LookupSymbolsInSingleBinder(LookupResult result) 743004"];
4550 [label="param LookupSymbolsInSingleBinder(string name) 743005"];
4551 [label="param LookupSymbolsInSingleBinder(int arity) 743006"];
4552 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 743007"];
4553 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 743008"];
4554 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 743009"];
4555 [label="param LookupSymbolsInSingleBinder(bool diagnose) 743010"];
4556 [label="param LookupSymbolsInSingleBinder(this) 743011"];
4557 [label="result.IsClear 743012"];
4558 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 743013"];
4559 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743014"];
4560 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743015"];
4561 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743016"];
4562 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 743017"];
4563 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 743018"];
4564 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 743019"];
4565 [label="param LookupSymbolsInSingleBinder(bool diagnose) 743020"];
4566 [label="result.IsClear 743021"];
4567 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 743022"];
4568 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743023"];
4569 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743024"];
4570 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743025"];
4571 [label="Debug.Assert(result.IsClear); 743026"];
4572 [label="IsSubmissionClass 743027"];
4573 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 743028"];
4574 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 743029"];
4575 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 743030"];
4576 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 743031"];
4577 [label="param LookupMembersInternal(int arity) 743032"];
4578 [label="param LookupMembersInternal(bool diagnose) 743033"];
4579 [label="Debug.Assert(options.AreValid()); 743034"];
4580 [label="options.AreValid() 743035"];
4581 [label="param AreValid(this LookupOptions options) 743036"];
4582 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 743037"];
4583 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 743038"];
4584 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 743039"];
4585 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 743040"];
4586 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 743041"];
4587 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743042"];
4588 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743043"];
4589 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743044"];
4590 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 743045"];
4591 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 743046"];
4592 [label="return OnlyOneBitSet(onlyOptions); 743047"];
4593 [label="OnlyOneBitSet(onlyOptions) 743048"];
4594 [label="param OnlyOneBitSet(LookupOptions o) 743049"];
4595 [label="return (o & (o - 1)) == 0; 743050"];
4596 [label="return (o & (o - 1)) == 0; 743051"];
4597 [label="Debug.Assert(arity >= 0); 743052"];
4598 [label="Debug.Assert(arity >= 0); 743053"];
4599 [label="param LookupMembersInType(int arity) 743054"];
4600 [label="param LookupMembersInType(Binder originalBinder) 743055"];
4601 [label="param LookupMembersInType(bool diagnose) 743056"];
4602 [label="param LookupMembersInClass(int arity) 743057"];
4603 [label="param LookupMembersInClass(Binder originalBinder) 743058"];
4604 [label="param LookupMembersInClass(bool diagnose) 743059"];
4605 [label="param LookupMembersInClass(int arity) 743060"];
4606 [label="param LookupMembersInClass(Binder originalBinder) 743061"];
4607 [label="param LookupMembersInClass(bool diagnose) 743062"];
4608 [label="Debug.Assert((object)type != null); 743063"];
4609 [label="tmp.Clear(); 743064"];
4610 [label="param LookupMembersWithoutInheritance(LookupResult result) 743065"];
4611 [label="param LookupMembersWithoutInheritance(int arity) 743066"];
4612 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 743067"];
4613 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 743068"];
4614 [label="param LookupMembersWithoutInheritance(bool diagnose) 743069"];
4615 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 743070"];
4616 [label="param GetCandidateMembers(Binder originalBinder) 743071"];
4617 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 743072"];
4618 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 743073"];
4619 [label="param MergePrioritized(LookupResult other) 743074"];
4620 [label="param MergePrioritized(this) 743075"];
4621 [label="other.Kind 743076"];
4622 [label="get\n            {\n                return _kind;\n            } 743077"];
4623 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743078"];
4624 [label="Kind 743079"];
4625 [label="get\n            {\n                return _kind;\n            } 743080"];
4626 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743081"];
4627 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743082"];
4628 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 743083"];
4629 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 743084"];
4630 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 743085"];
4631 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 743086"];
4632 [label="result.IsMultiViable 743087"];
4633 [label="return _kind; 743088"];
4634 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 743089"];
4635 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 743090"];
4636 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 743091"];
4637 [label="originalBinder.InCrefButNotParameterOrReturnType 743092"];
4638 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 743093"];
4639 [label="InCref 743094"];
4640 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 743095"];
4641 [label="return this.Flags.Includes(BinderFlags.Cref); 743096"];
4642 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 743097"];
4643 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 743098"];
4644 [label="tmp.Clear(); 743099"];
4645 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 743100"];
4646 [label="param LookupMembersWithoutInheritance(LookupResult result) 743101"];
4647 [label="param LookupMembersWithoutInheritance(int arity) 743102"];
4648 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 743103"];
4649 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 743104"];
4650 [label="param LookupMembersWithoutInheritance(bool diagnose) 743105"];
4651 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 743106"];
4652 [label="param GetCandidateMembers(Binder originalBinder) 743107"];
4653 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 743108"];
4654 [label="param MergePrioritized(LookupResult other) 743109"];
4655 [label="param MergePrioritized(this) 743110"];
4656 [label="other.Kind 743111"];
4657 [label="get\n            {\n                return _kind;\n            } 743112"];
4658 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743113"];
4659 [label="Kind 743114"];
4660 [label="get\n            {\n                return _kind;\n            } 743115"];
4661 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743116"];
4662 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743117"];
4663 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 743118"];
4664 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 743119"];
4665 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 743120"];
4666 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 743121"];
4667 [label="result.IsMultiViable 743122"];
4668 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 743123"];
4669 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 743124"];
4670 [label="originalBinder.InCrefButNotParameterOrReturnType 743125"];
4671 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 743126"];
4672 [label="InCref 743127"];
4673 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 743128"];
4674 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 743129"];
4675 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 743130"];
4676 [label="visited?.Free(); 743131"];
4677 [label="this.Clear(); 743132"];
4678 [label="tmp.Free(); 743133"];
4679 [label="param LookupSymbol(bool diagnose) 743134"];
4680 [label="param LookupSymbolInAliases(bool diagnose) 743135"];
4681 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 743136"];
4682 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 743137"];
4683 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 743138"];
4684 [label="param LookupSymbolInUsings(Binder originalBinder) 743139"];
4685 [label="param LookupSymbolInUsings(LookupResult result) 743140"];
4686 [label="param LookupSymbolInUsings(string name) 743141"];
4687 [label="param LookupSymbolInUsings(int arity) 743142"];
4688 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 743143"];
4689 [label="param LookupSymbolInUsings(LookupOptions options) 743144"];
4690 [label="param LookupSymbolInUsings(bool diagnose) 743145"];
4691 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 743146"];
4692 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 743147"];
4693 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 743148"];
4694 [label="param Includes(this BinderFlags self) 743149"];
4695 [label="param Includes(BinderFlags other) 743150"];
4696 [label="originalBinder.IsSemanticModelBinder 743151"];
4697 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 743152"];
4698 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 743153"];
4699 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 743154"];
4700 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743155"];
4701 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743156"];
4702 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 743157"];
4703 [label="result.IsClear 743158"];
4704 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 743159"];
4705 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743160"];
4706 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743161"];
4707 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743162"];
4708 [label="Debug.Assert(result.IsClear); 743163"];
4709 [label="IsSubmissionClass 743164"];
4710 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 743165"];
4711 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 743166"];
4712 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 743167"];
4713 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 743168"];
4714 [label="Debug.Assert(options.AreValid()); 743169"];
4715 [label="options.AreValid() 743170"];
4716 [label="param AreValid(this LookupOptions options) 743171"];
4717 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 743172"];
4718 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 743173"];
4719 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 743174"];
4720 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 743175"];
4721 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 743176"];
4722 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743177"];
4723 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743178"];
4724 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743179"];
4725 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 743180"];
4726 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 743181"];
4727 [label="return OnlyOneBitSet(onlyOptions); 743182"];
4728 [label="OnlyOneBitSet(onlyOptions) 743183"];
4729 [label="param OnlyOneBitSet(LookupOptions o) 743184"];
4730 [label="return (o & (o - 1)) == 0; 743185"];
4731 [label="return (o & (o - 1)) == 0; 743186"];
4732 [label="Debug.Assert(arity >= 0); 743187"];
4733 [label="param LookupMembersInNamespace(int arity) 743188"];
4734 [label="param LookupMembersInNamespace(bool diagnose) 743189"];
4735 [label="param GetCandidateMembers(Binder originalBinder) 743190"];
4736 [label="param LookupSymbol(bool diagnose) 743191"];
4737 [label="param LookupSymbolInAliases(bool diagnose) 743192"];
4738 [label="param CheckViability(int arity) 743193"];
4739 [label="param CheckViability(TypeSymbol accessThroughType) 743194"];
4740 [label="param CheckViability(bool diagnose) 743195"];
4741 [label="bool inaccessibleViaQualifier; 743196"];
4742 [label="DiagnosticInfo diagInfo; 743197"];
4743 [label="param WrongArity(Symbol symbol) 743198"];
4744 [label="param WrongArity(int arity) 743199"];
4745 [label="param WrongArity(bool diagnose) 743200"];
4746 [label="param WrongArity(LookupOptions options) 743201"];
4747 [label="param WrongArity(out DiagnosticInfo diagInfo) 743202"];
4748 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 743203"];
4749 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 743204"];
4750 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 743205"];
4751 [label="diagInfo = null; 743206"];
4752 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 743207"];
4753 [label="RefineAccessThroughType(options, accessThroughType) 743208"];
4754 [label="param RefineAccessThroughType(LookupOptions options) 743209"];
4755 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 743210"];
4756 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 743211"];
4757 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 743212"];
4758 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 743213"];
4759 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 743214"];
4760 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 743215"];
4761 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 743216"];
4762 [label="param IsAccessible(TypeSymbol accessThroughType) 743217"];
4763 [label="param IsAccessible(out bool failedThroughTypeCheck) 743218"];
4764 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 743219"];
4765 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 743220"];
4766 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 743221"];
4767 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 743222"];
4768 [label="param Includes(this BinderFlags self) 743223"];
4769 [label="param Includes(BinderFlags other) 743224"];
4770 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 743225"];
4771 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 743226"];
4772 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 743227"];
4773 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 743228"];
4774 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 743229"];
4775 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 743230"];
4776 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 743231"];
4777 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 743232"];
4778 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 743233"];
4779 [label="param IsSymbolAccessibleConditional(this) 743234"];
4780 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 743235"];
4781 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 743236"];
4782 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 743237"];
4783 [label="param Includes(this BinderFlags self) 743238"];
4784 [label="param Includes(BinderFlags other) 743239"];
4785 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 743240"];
4786 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 743241"];
4787 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 743242"];
4788 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 743243"];
4789 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 743244"];
4790 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 743245"];
4791 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 743246"];
4792 [label="Debug.Assert((object)symbol != null); 743247"];
4793 [label="Debug.Assert((object)within != null); 743248"];
4794 [label="Debug.Assert(within.IsDefinition); 743249"];
4795 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743250"];
4796 [label="failedThroughTypeCheck = false; 743251"];
4797 [label="param IsNamedTypeAccessible(Symbol within) 743252"];
4798 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 743253"];
4799 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743254"];
4800 [label="Debug.Assert((object)type != null); 743255"];
4801 [label="var compilation = within.DeclaringCompilation; 743256"];
4802 [label="bool unused; 743257"];
4803 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 743258"];
4804 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 743259"];
4805 [label="param IsNonNestedTypeAccessible(Symbol within) 743260"];
4806 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743261"];
4807 [label="Debug.Assert((object)assembly != null); 743262"];
4808 [label="Debug.Assert((object)assembly != null); 743263"];
4809 [label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel); 743264"];
4810 [label="Debug.Assert(compilation != null); 743265"];
4811 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 743266"];
4812 [label="result.IsClear 743267"];
4813 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 743268"];
4814 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743269"];
4815 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 743270"];
4816 [label="binder = scope; 743271"];
4817 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 743272"];
4818 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 743273"];
4819 [label="return binder; 743274"];
4820 [label="diagnostics.Add(node, useSiteDiagnostics); 743275"];
4821 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 743276"];
4822 [label="IsViableType(result) 743277"];
4823 [label="param IsViableType(LookupResult result) 743278"];
4824 [label="result.IsMultiViable 743279"];
4825 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 743280"];
4826 [label="return _kind; 743281"];
4827 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 743282"];
4828 [label="result.Symbols 743283"];
4829 [label="get\n            {\n                return _symbolList;\n            } 743284"];
4830 [label="return _symbolList; 743285"];
4831 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 743286"];
4832 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 743287"];
4833 [label="if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true; 743288"];
4834 [label="return true; 743289"];
4835 [label="bool wasError; 743290"];
4836 [label="param ResultSymbol(int arity) 743291"];
4837 [label="param ResultSymbol(out bool wasError) 743292"];
4838 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 743293"];
4839 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 743294"];
4840 [label="param ResultSymbol(this) 743295"];
4841 [label="Debug.Assert(where != null); 743296"];
4842 [label="Debug.Assert(where != null); 743297"];
4843 [label="Debug.Assert(diagnostics != null); 743298"];
4844 [label="Debug.Assert(diagnostics != null); 743299"];
4845 [label="wasError = false; 743300"];
4846 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 743301"];
4847 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 743302"];
4848 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 743303"];
4849 [label="result.Free(); 743304"];
4850 [label="if (symbol is null)\n                {\n                    return default;\n                } 743305"];
4851 [label="Debug.Assert(!(symbol is TypeSymbol)); 743306"];
4852 [label="Debug.Assert(_symbol?.Kind == SymbolKind.Alias); 743307"];
4853 [label="param UnwrapAlias(out AliasSymbol alias) 743308"];
4854 [label="Debug.Assert(syntax != null); 743309"];
4855 [label="Debug.Assert(diagnostics != null); 743310"];
4856 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 743311"];
4857 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743312"];
4858 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 743313"];
4859 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 743314"];
4860 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743315"];
4861 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 743316"];
4862 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 743317"];
4863 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 743318"];
4864 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 743319"];
4865 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 743320"];
4866 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743321"];
4867 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 743322"];
4868 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 743323"];
4869 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 743324"];
4870 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 743325"];
4871 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 743326"];
4872 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 743327"];
4873 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 743328"];
4874 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 743329"];
4875 [label="RoslynDebug.Assert(diagnostics != null); 743330"];
4876 [label="RoslynDebug.Assert(diagnostics != null); 743331"];
4877 [label="DiagnosticInfo? info = null; 743332"];
4878 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 743333"];
4879 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 743334"];
4880 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 743335"];
4881 [label="return kind; 743336"];
4882 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 743337"];
4883 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 743338"];
4884 [label="if (symbol is null)\n                {\n                    return default;\n                } 743339"];
4885 [label="Debug.Assert(typeWithAnnotations.HasType); 743340"];
4886 [label="Debug.Assert(node != null); 743341"];
4887 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 743342"];
4888 [label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 743343"];
4889 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 743344"];
4890 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 743345"];
4891 [label="param Includes(BinderFlags other) 743346"];
4892 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 743347"];
4893 [label="param Includes(this BinderFlags self) 743348"];
4894 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 743349"];
4895 [label="param Includes(this BinderFlags self) 743350"];
4896 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 743351"];
4897 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 743352"];
4898 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 743353"];
4899 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 743354"];
4900 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 743355"];
4901 [label="param CreateErrorIfLookupOnTypeParameter(string name) 743356"];
4902 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 743357"];
4903 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 743358"];
4904 [label="param CreateErrorIfLookupOnTypeParameter(this) 743359"];
4905 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 743360"];
4906 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 743361"];
4907 [label="return null; 743362"];
4908 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 743363"];
4909 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 743364"];
4910 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 743365"];
4911 [label="instance.IsClear 743366"];
4912 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 743367"];
4913 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743368"];
4914 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743369"];
4915 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743370"];
4916 [label="Debug.Assert(instance.IsClear); 743371"];
4917 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 743372"];
4918 [label="result.IsClear 743373"];
4919 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 743374"];
4920 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743375"];
4921 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743376"];
4922 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743377"];
4923 [label="Debug.Assert(result.IsClear); 743378"];
4924 [label="Debug.Assert(options.AreValid()); 743379"];
4925 [label="options.AreValid() 743380"];
4926 [label="param AreValid(this LookupOptions options) 743381"];
4927 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 743382"];
4928 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 743383"];
4929 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 743384"];
4930 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 743385"];
4931 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 743386"];
4932 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743387"];
4933 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743388"];
4934 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743389"];
4935 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 743390"];
4936 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 743391"];
4937 [label="return OnlyOneBitSet(onlyOptions); 743392"];
4938 [label="OnlyOneBitSet(onlyOptions) 743393"];
4939 [label="param OnlyOneBitSet(LookupOptions o) 743394"];
4940 [label="return (o & (o - 1)) == 0; 743395"];
4941 [label="return (o & (o - 1)) == 0; 743396"];
4942 [label="param LookupSymbolsInSingleBinder(LookupResult result) 743397"];
4943 [label="param LookupSymbolsInSingleBinder(string name) 743398"];
4944 [label="param LookupSymbolsInSingleBinder(int arity) 743399"];
4945 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 743400"];
4946 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 743401"];
4947 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 743402"];
4948 [label="param LookupSymbolsInSingleBinder(bool diagnose) 743403"];
4949 [label="param LookupSymbolsInSingleBinder(this) 743404"];
4950 [label="result.IsClear 743405"];
4951 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 743406"];
4952 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743407"];
4953 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743408"];
4954 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743409"];
4955 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 743410"];
4956 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 743411"];
4957 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 743412"];
4958 [label="result.IsClear 743413"];
4959 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 743414"];
4960 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743415"];
4961 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743416"];
4962 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743417"];
4963 [label="Debug.Assert(result.IsClear); 743418"];
4964 [label="IsSubmissionClass 743419"];
4965 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 743420"];
4966 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 743421"];
4967 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 743422"];
4968 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 743423"];
4969 [label="Debug.Assert(options.AreValid()); 743424"];
4970 [label="options.AreValid() 743425"];
4971 [label="param AreValid(this LookupOptions options) 743426"];
4972 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 743427"];
4973 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 743428"];
4974 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 743429"];
4975 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 743430"];
4976 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 743431"];
4977 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743432"];
4978 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743433"];
4979 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743434"];
4980 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 743435"];
4981 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 743436"];
4982 [label="return OnlyOneBitSet(onlyOptions); 743437"];
4983 [label="OnlyOneBitSet(onlyOptions) 743438"];
4984 [label="param OnlyOneBitSet(LookupOptions o) 743439"];
4985 [label="return (o & (o - 1)) == 0; 743440"];
4986 [label="return (o & (o - 1)) == 0; 743441"];
4987 [label="Debug.Assert(arity >= 0); 743442"];
4988 [label="param LookupMembersInType(Binder originalBinder) 743443"];
4989 [label="param LookupMembersInClass(Binder originalBinder) 743444"];
4990 [label="param LookupMembersInClass(Binder originalBinder) 743445"];
4991 [label="Debug.Assert((object)type != null); 743446"];
4992 [label="tmp.Clear(); 743447"];
4993 [label="param LookupMembersWithoutInheritance(LookupResult result) 743448"];
4994 [label="param LookupMembersWithoutInheritance(int arity) 743449"];
4995 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 743450"];
4996 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 743451"];
4997 [label="param LookupMembersWithoutInheritance(bool diagnose) 743452"];
4998 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 743453"];
4999 [label="param GetCandidateMembers(Binder originalBinder) 743454"];
5000 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 743455"];
5001 [label="param MergePrioritized(LookupResult other) 743456"];
5002 [label="param MergePrioritized(this) 743457"];
5003 [label="other.Kind 743458"];
5004 [label="get\n            {\n                return _kind;\n            } 743459"];
5005 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743460"];
5006 [label="Kind 743461"];
5007 [label="get\n            {\n                return _kind;\n            } 743462"];
5008 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743463"];
5009 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743464"];
5010 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 743465"];
5011 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 743466"];
5012 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 743467"];
5013 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 743468"];
5014 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 743469"];
5015 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 743470"];
5016 [label="originalBinder.InCrefButNotParameterOrReturnType 743471"];
5017 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 743472"];
5018 [label="InCref 743473"];
5019 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 743474"];
5020 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 743475"];
5021 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 743476"];
5022 [label="tmp.Clear(); 743477"];
5023 [label="param LookupMembersWithoutInheritance(LookupResult result) 743478"];
5024 [label="param LookupMembersWithoutInheritance(int arity) 743479"];
5025 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 743480"];
5026 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 743481"];
5027 [label="param LookupMembersWithoutInheritance(bool diagnose) 743482"];
5028 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 743483"];
5029 [label="param GetCandidateMembers(Binder originalBinder) 743484"];
5030 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 743485"];
5031 [label="param MergePrioritized(LookupResult other) 743486"];
5032 [label="param MergePrioritized(this) 743487"];
5033 [label="other.Kind 743488"];
5034 [label="get\n            {\n                return _kind;\n            } 743489"];
5035 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743490"];
5036 [label="Kind 743491"];
5037 [label="get\n            {\n                return _kind;\n            } 743492"];
5038 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743493"];
5039 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 743494"];
5040 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 743495"];
5041 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 743496"];
5042 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 743497"];
5043 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 743498"];
5044 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 743499"];
5045 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 743500"];
5046 [label="originalBinder.InCrefButNotParameterOrReturnType 743501"];
5047 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 743502"];
5048 [label="InCref 743503"];
5049 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 743504"];
5050 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 743505"];
5051 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 743506"];
5052 [label="visited?.Free(); 743507"];
5053 [label="this.Clear(); 743508"];
5054 [label="tmp.Free(); 743509"];
5055 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 743510"];
5056 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 743511"];
5057 [label="param LookupSymbolInUsings(Binder originalBinder) 743512"];
5058 [label="param LookupSymbolInUsings(LookupResult result) 743513"];
5059 [label="param LookupSymbolInUsings(string name) 743514"];
5060 [label="param LookupSymbolInUsings(int arity) 743515"];
5061 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 743516"];
5062 [label="param LookupSymbolInUsings(LookupOptions options) 743517"];
5063 [label="param LookupSymbolInUsings(bool diagnose) 743518"];
5064 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 743519"];
5065 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 743520"];
5066 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 743521"];
5067 [label="param Includes(this BinderFlags self) 743522"];
5068 [label="param Includes(BinderFlags other) 743523"];
5069 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 743524"];
5070 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 743525"];
5071 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743526"];
5072 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743527"];
5073 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 743528"];
5074 [label="result.IsClear 743529"];
5075 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 743530"];
5076 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743531"];
5077 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743532"];
5078 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743533"];
5079 [label="Debug.Assert(result.IsClear); 743534"];
5080 [label="IsSubmissionClass 743535"];
5081 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 743536"];
5082 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 743537"];
5083 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 743538"];
5084 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 743539"];
5085 [label="Debug.Assert(options.AreValid()); 743540"];
5086 [label="options.AreValid() 743541"];
5087 [label="param AreValid(this LookupOptions options) 743542"];
5088 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 743543"];
5089 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 743544"];
5090 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 743545"];
5091 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 743546"];
5092 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 743547"];
5093 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743548"];
5094 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743549"];
5095 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 743550"];
5096 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 743551"];
5097 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 743552"];
5098 [label="return OnlyOneBitSet(onlyOptions); 743553"];
5099 [label="OnlyOneBitSet(onlyOptions) 743554"];
5100 [label="param OnlyOneBitSet(LookupOptions o) 743555"];
5101 [label="return (o & (o - 1)) == 0; 743556"];
5102 [label="return (o & (o - 1)) == 0; 743557"];
5103 [label="Debug.Assert(arity >= 0); 743558"];
5104 [label="param LookupMembersInNamespace(int arity) 743559"];
5105 [label="param LookupMembersInNamespace(bool diagnose) 743560"];
5106 [label="param GetCandidateMembers(Binder originalBinder) 743561"];
5107 [label="param CheckViability(TypeSymbol accessThroughType) 743562"];
5108 [label="param CheckViability(bool diagnose) 743563"];
5109 [label="bool inaccessibleViaQualifier; 743564"];
5110 [label="DiagnosticInfo diagInfo; 743565"];
5111 [label="param WrongArity(Symbol symbol) 743566"];
5112 [label="param WrongArity(int arity) 743567"];
5113 [label="param WrongArity(bool diagnose) 743568"];
5114 [label="param WrongArity(LookupOptions options) 743569"];
5115 [label="param WrongArity(out DiagnosticInfo diagInfo) 743570"];
5116 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 743571"];
5117 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 743572"];
5118 [label="if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    } 743573"];
5119 [label="diagInfo = null; 743574"];
5120 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 743575"];
5121 [label="RefineAccessThroughType(options, accessThroughType) 743576"];
5122 [label="param RefineAccessThroughType(LookupOptions options) 743577"];
5123 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 743578"];
5124 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 743579"];
5125 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 743580"];
5126 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 743581"];
5127 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 743582"];
5128 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 743583"];
5129 [label="param IsAccessible(TypeSymbol accessThroughType) 743584"];
5130 [label="param IsAccessible(out bool failedThroughTypeCheck) 743585"];
5131 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 743586"];
5132 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 743587"];
5133 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 743588"];
5134 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 743589"];
5135 [label="param Includes(this BinderFlags self) 743590"];
5136 [label="param Includes(BinderFlags other) 743591"];
5137 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 743592"];
5138 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 743593"];
5139 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 743594"];
5140 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 743595"];
5141 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 743596"];
5142 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 743597"];
5143 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 743598"];
5144 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 743599"];
5145 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 743600"];
5146 [label="param IsSymbolAccessibleConditional(this) 743601"];
5147 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 743602"];
5148 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 743603"];
5149 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 743604"];
5150 [label="param Includes(this BinderFlags self) 743605"];
5151 [label="param Includes(BinderFlags other) 743606"];
5152 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 743607"];
5153 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 743608"];
5154 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 743609"];
5155 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 743610"];
5156 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 743611"];
5157 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 743612"];
5158 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 743613"];
5159 [label="Debug.Assert((object)symbol != null); 743614"];
5160 [label="Debug.Assert((object)within != null); 743615"];
5161 [label="Debug.Assert(within.IsDefinition); 743616"];
5162 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743617"];
5163 [label="failedThroughTypeCheck = false; 743618"];
5164 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 743619"];
5165 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743620"];
5166 [label="Debug.Assert((object)type != null); 743621"];
5167 [label="var compilation = within.DeclaringCompilation; 743622"];
5168 [label="bool unused; 743623"];
5169 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 743624"];
5170 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 743625"];
5171 [label="param IsNonNestedTypeAccessible(Symbol within) 743626"];
5172 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 743627"];
5173 [label="Debug.Assert((object)assembly != null); 743628"];
5174 [label="Debug.Assert((object)assembly != null); 743629"];
5175 [label="MarkImportDirective(alias.UsingDirective, callerIsSemanticModel); 743630"];
5176 [label="Debug.Assert(compilation != null); 743631"];
5177 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 743632"];
5178 [label="result.IsClear 743633"];
5179 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 743634"];
5180 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 743635"];
5181 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 743636"];
5182 [label="binder = scope; 743637"];
5183 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 743638"];
5184 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 743639"];
5185 [label="return binder; 743640"];
5186 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 743641"];
5187 [label="IsViableType(result) 743642"];
5188 [label="param IsViableType(LookupResult result) 743643"];
5189 [label="result.IsMultiViable 743644"];
5190 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 743645"];
5191 [label="return _kind; 743646"];
5192 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 743647"];
5193 [label="result.Symbols 743648"];
5194 [label="get\n            {\n                return _symbolList;\n            } 743649"];
5195 [label="return _symbolList; 743650"];
5196 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 743651"];
5197 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 743652"];
5198 [label="if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true; 743653"];
5199 [label="return true; 743654"];
5200 [label="bool wasError; 743655"];
5201 [label="param ResultSymbol(out bool wasError) 743656"];
5202 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 743657"];
5203 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 743658"];
5204 [label="param ResultSymbol(this) 743659"];
5205 [label="Debug.Assert(where != null); 743660"];
5206 [label="Debug.Assert(diagnostics != null); 743661"];
5207 [label="wasError = false; 743662"];
5208 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 743663"];
5209 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 743664"];
5210 [label="result.Free(); 743665"];
5211 [label="if (symbol is null)\n                {\n                    return default;\n                } 743666"];
5212 [label="Debug.Assert(!(symbol is TypeSymbol)); 743667"];
5213 [label="Debug.Assert(_symbol?.Kind == SymbolKind.Alias); 743668"];
5214 [label="param UnwrapAlias(out AliasSymbol alias) 743669"];
5215 [label="Debug.Assert(syntax != null); 743670"];
5216 [label="Debug.Assert(diagnostics != null); 743671"];
5217 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 743672"];
5218 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743673"];
5219 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 743674"];
5220 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743675"];
5221 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 743676"];
5222 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 743677"];
5223 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 743678"];
5224 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 743679"];
5225 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 743680"];
5226 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 743681"];
5227 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 743682"];
5228 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 743683"];
5229 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 743684"];
5230 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 743685"];
5231 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 743686"];
5232 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 743687"];
5233 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 743688"];
5234 [label="RoslynDebug.Assert(diagnostics != null); 743689"];
5235 [label="RoslynDebug.Assert(diagnostics != null); 743690"];
5236 [label="DiagnosticInfo? info = null; 743691"];
5237 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 743692"];
5238 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 743693"];
5239 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 743694"];
5240 [label="return kind; 743695"];
5241 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 743696"];
5242 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 743697"];
5243 [label="if (symbol is null)\n                {\n                    return default;\n                } 743698"];
5244 [label="Debug.Assert(typeWithAnnotations.HasType); 743699"];
5245 [label="null 743700"];
5246 [label="null 743701"];
5247 [label="new ConstantFieldsInProgress(null, null) 743702"];
5248 [label="param ConstantFieldsInProgress(SourceFieldSymbol fieldOpt) 743703"];
5249 [label="param ConstantFieldsInProgress(HashSet<SourceFieldSymbolWithSyntaxReference> dependencies) 743704"];
5250 [label="param ConstantFieldsInProgress(this) 743705"];
5251 [label="_fieldOpt 743706"];
5252 [label="_dependencies 743707"];
5253 [label="_fieldOpt 743708"];
5254 [label="_dependencies 743709"];
5255 [label="Empty = new ConstantFieldsInProgress(null, null) 743710"];
5256 [label="get { return (object)_fieldOpt == null; } 743711"];
5257 [label="return (object)_fieldOpt == null; 743712"];
5258 [label="return (object)_fieldOpt == null; 743713"];
5259 [label="diagnostics.Verify(expected); 743714"];
5260 [label="diagnostics.Verify(expected); 743715"];
5261 [label="diagnostics.Verify(expected) 743716"];
5262 [label="param Verify(this ImmutableArray<Diagnostic> actual) 743717"];
5263 [label="param Verify(params DiagnosticDescription[] expected) 743718"];
5264 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 743719"];
5265 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 743720"];
5266 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 743721"];
5267 [label="param Verify(this IEnumerable<Diagnostic> actual) 743722"];
5268 [label="param Verify(params DiagnosticDescription[] expected) 743723"];
5269 [label="Verify(actual, expected, errorCodeOnly: false); 743724"];
5270 [label="Verify(actual, expected, errorCodeOnly: false); 743725"];
5271 [label="Verify(actual, expected, errorCodeOnly: false); 743726"];
5272 [label="Verify(actual, expected, errorCodeOnly: false) 743727"];
5273 [label="param Verify(IEnumerable<Diagnostic> actual) 743728"];
5274 [label="param Verify(DiagnosticDescription[] expected) 743729"];
5275 [label="param Verify(bool errorCodeOnly) 743730"];
5276 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 743731"];
5277 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 743732"];
5278 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 743733"];
5279 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 743734"];
5280 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 743735"];
5281 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 743736"];
5282 [label="=> _defaultSeverityOpt 743737"];
5283 [label="_defaultSeverityOpt 743738"];
5284 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 743739"];
5285 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 743740"];
5286 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 743741"];
5287 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 743742"];
5288 [label="=> _effectiveSeverityOpt 743743"];
5289 [label="_effectiveSeverityOpt 743744"];
5290 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 743745"];
5291 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 743746"];
5292 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 743747"];
5293 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 743748"];
5294 [label="param DiagnosticDescription(Diagnostic d) 743749"];
5295 [label="param DiagnosticDescription(bool errorCodeOnly) 743750"];
5296 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 743751"];
5297 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 743752"];
5298 [label="param DiagnosticDescription(this) 743753"];
5299 [label="_code 743754"];
5300 [label="_isWarningAsError 743755"];
5301 [label="_isSuppressed 743756"];
5302 [label="_squiggledText 743757"];
5303 [label="_arguments 743758"];
5304 [label="_startPosition 743759"];
5305 [label="_argumentOrderDoesNotMatter 743760"];
5306 [label="_errorCodeType 743761"];
5307 [label="_defaultSeverityOpt 743762"];
5308 [label="_effectiveSeverityOpt 743763"];
5309 [label="_syntaxPredicate 743764"];
5310 [label="_code 743765"];
5311 [label="_isWarningAsError 743766"];
5312 [label="_isSuppressed 743767"];
5313 [label="_location 743768"];
5314 [label="includeDefaultSeverity 743769"];
5315 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 743770"];
5316 [label="_defaultSeverityOpt 743771"];
5317 [label="includeEffectiveSeverity 743772"];
5318 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 743773"];
5319 [label="_effectiveSeverityOpt 743774"];
5320 [label="DiagnosticWithInfo dinfo = null; 743775"];
5321 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 743776"];
5322 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 743777"];
5323 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 743778"];
5324 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 743779"];
5325 [label="dinfo = d as DiagnosticWithInfo; 743780"];
5326 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 743781"];
5327 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 743782"];
5328 [label="_errorCodeType 743783"];
5329 [label="_code 743784"];
5330 [label="_ignoreArgumentsWhenComparing 743785"];
5331 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 743786"];
5332 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 743787"];
5333 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 743788"];
5334 [label="_squiggledText 743789"];
5335 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 743790"];
5336 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 743791"];
5337 [label="_arguments 743792"];
5338 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 743793"];
5339 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 743794"];
5340 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 743795"];
5341 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 743796"];
5342 [label="_startPosition 743797"];
5343 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 743798"];
5344 [label="_code 743799"];
5345 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 743800"];
5346 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 743801"];
5347 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 743802"];
5348 [label="int index = unmatched.IndexOf(d); 743803"];
5349 [label="int index = unmatched.IndexOf(d); 743804"];
5350 [label="param Equals(object obj) 743805"];
5351 [label="param Equals(this) 743806"];
5352 [label="var d = obj as DiagnosticDescription; 743807"];
5353 [label="if (d == null)\n                return false; 743808"];
5354 [label="if (d == null)\n                return false; 743809"];
5355 [label="if (!_code.Equals(d._code))\n                return false; 743810"];
5356 [label="if (!_code.Equals(d._code))\n                return false; 743811"];
5357 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 743812"];
5358 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 743813"];
5359 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 743814"];
5360 [label="if (_squiggledText != d._squiggledText)\n                    return false; 743815"];
5361 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 743816"];
5362 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 743817"];
5363 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 743818"];
5364 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 743819"];
5365 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 743820"];
5366 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 743821"];
5367 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 743822"];
5368 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 743823"];
5369 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 743824"];
5370 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 743825"];
5371 [label="if (d._arguments == null)\n                    return false; 743826"];
5372 [label="GetArgumentsAsStrings() 743827"];
5373 [label="param GetArgumentsAsStrings(this) 743828"];
5374 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 743829"];
5375 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 743830"];
5376 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 743831"];
5377 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 743832"];
5378 [label="_argumentsAsStrings 743833"];
5379 [label="return _argumentsAsStrings; 743834"];
5380 [label="var args1 = GetArgumentsAsStrings(); 743835"];
5381 [label="d.GetArgumentsAsStrings() 743836"];
5382 [label="param GetArgumentsAsStrings(this) 743837"];
5383 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 743838"];
5384 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 743839"];
5385 [label="return _argumentsAsStrings; 743840"];
5386 [label="var args2 = d.GetArgumentsAsStrings(); 743841"];
5387 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 743842"];
5388 [label="if (!args1.SequenceEqual(args2))\n                        return false; 743843"];
5389 [label="if (!args1.SequenceEqual(args2))\n                        return false; 743844"];
5390 [label="if (!args1.SequenceEqual(args2))\n                        return false; 743845"];
5391 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 743846"];
5392 [label="return true; 743847"];
5393 [label="int index = unmatched.IndexOf(d); 743848"];
5394 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 743849"];
5395 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 743850"];
5396 [label="unmatched.RemoveAt(index); 743851"];
5397 [label="if (d == null)\n                return false; 743852"];
5398 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 743853"];
5399 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 743854"];
5400 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 743855"];
5401 [label="if (_squiggledText != d._squiggledText)\n                    return false; 743856"];
5402 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 743857"];
5403 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 743858"];
5404 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 743859"];
5405 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 743860"];
5406 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 743861"];
5407 [label="if (d._arguments == null)\n                    return false; 743862"];
5408 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 743863"];
5409 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 743864"];
5410 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 743865"];
5411 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 743866"];
5412 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 743867"];
5413 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 743868"];
5414 [label="DiagnosticDescription.GetAssertText(expected, actual) 743869"];
5415 [label="param GetAssertText(DiagnosticDescription[] expected) 743870"];
5416 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 743871"];
5417 [label="const int CSharp = 1; 743872"];
5418 [label="const int VisualBasic = 2; 743873"];
5419 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 743874"];
5420 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 743875"];
5421 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 743876"];
5422 [label="actual.Any() && actual.First() is CSDiagnostic 743877"];
5423 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 743878"];
5424 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 743879"];
5425 [label="int indentDepth = (language == CSharp) ? 4 : 1; 743880"];
5426 [label="(language == CSharp) 743881"];
5427 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 743882"];
5428 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 743883"];
5429 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 743884"];
5430 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 743885"];
5431 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 743886"];
5432 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 743887"];
5433 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 743888"];
5434 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 743889"];
5435 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 743890"];
5436 [label="IsSortedOrEmpty(expected) 743891"];
5437 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 743892"];
5438 [label="new LinePositionComparer() 743893"];
5439 [label="param LinePositionComparer(this) 743894"];
5440 [label="Instance = new LinePositionComparer() 743895"];
5441 [label="var comparer = LinePositionComparer.Instance; 743896"];
5442 [label="DiagnosticDescription last = null; 743897"];
5443 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 743898"];
5444 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 743899"];
5445 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 743900"];
5446 [label="return false; 743901"];
5447 [label="var assertText = new StringBuilder(); 743902"];
5448 [label="assertText.AppendLine(); 743903"];
5449 [label="int i; 743904"];
5450 [label="assertText.AppendLine('Expected:'); 743905"];
5451 [label="assertText.AppendLine('Expected:'); 743906"];
5452 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 743907"];
5453 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 743908"];
5454 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 743909"];
5455 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 743910"];
5456 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 743911"];
5457 [label="GetDiagnosticDescription(d, indentDepth) 743912"];
5458 [label="param GetDiagnosticDescription(DiagnosticDescription d) 743913"];
5459 [label="param GetDiagnosticDescription(int indentDepth) 743914"];
5460 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 743915"];
5461 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 743916"];
5462 [label="d.ToString() 743917"];
5463 [label="param ToString(this) 743918"];
5464 [label="var sb = new StringBuilder(); 743919"];
5465 [label="sb.Append('Diagnostic('); 743920"];
5466 [label="sb.Append('Diagnostic('); 743921"];
5467 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 743922"];
5468 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 743923"];
5469 [label="sb.Append(_errorCodeType.Name); 743924"];
5470 [label="sb.Append(_errorCodeType.Name); 743925"];
5471 [label="sb.Append('.'); 743926"];
5472 [label="sb.Append('.'); 743927"];
5473 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 743928"];
5474 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 743929"];
5475 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 743930"];
5476 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 743931"];
5477 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 743932"];
5478 [label="sb.Append(', \\''); 743933"];
5479 [label="sb.Append(', \\''); 743934"];
5480 [label="sb.Append(_squiggledText); 743935"];
5481 [label="sb.Append(_squiggledText); 743936"];
5482 [label="sb.Append('''); 743937"];
5483 [label="sb.Append('''); 743938"];
5484 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 743939"];
5485 [label="sb.Append(')'); 743940"];
5486 [label="sb.Append(')'); 743941"];
5487 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 743942"];
5488 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 743943"];
5489 [label="sb.Append('.WithArguments('); 743944"];
5490 [label="sb.Append('.WithArguments('); 743945"];
5491 [label="GetArgumentsAsStrings() 743946"];
5492 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 743947"];
5493 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 743948"];
5494 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 743949"];
5495 [label="sb.Append('\\''); 743950"];
5496 [label="sb.Append('\\''); 743951"];
5497 [label="sb.Append(argumentStrings.Current); 743952"];
5498 [label="sb.Append(argumentStrings.Current); 743953"];
5499 [label="sb.Append('\\''); 743954"];
5500 [label="sb.Append('\\''); 743955"];
5501 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 743956"];
5502 [label="sb.Append(', '); 743957"];
5503 [label="sb.Append(', '); 743958"];
5504 [label="sb.Append(')'); 743959"];
5505 [label="sb.Append(')'); 743960"];
5506 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 743961"];
5507 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 743962"];
5508 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 743963"];
5509 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 743964"];
5510 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 743965"];
5511 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 743966"];
5512 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 743967"];
5513 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 743968"];
5514 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 743969"];
5515 [label="return sb.ToString(); 743970"];
5516 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 743971"];
5517 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 743972"];
5518 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 743973"];
5519 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 743974"];
5520 [label="param GetDiagnosticDescription(int indentDepth) 743975"];
5521 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 743976"];
5522 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 743977"];
5523 [label="var sb = new StringBuilder(); 743978"];
5524 [label="sb.Append('Diagnostic('); 743979"];
5525 [label="sb.Append('Diagnostic('); 743980"];
5526 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 743981"];
5527 [label="sb.Append(_errorCodeType.Name); 743982"];
5528 [label="sb.Append(_errorCodeType.Name); 743983"];
5529 [label="sb.Append('.'); 743984"];
5530 [label="sb.Append('.'); 743985"];
5531 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 743986"];
5532 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 743987"];
5533 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 743988"];
5534 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 743989"];
5535 [label="sb.Append(', \\''); 743990"];
5536 [label="sb.Append(', \\''); 743991"];
5537 [label="sb.Append(_squiggledText); 743992"];
5538 [label="sb.Append(_squiggledText); 743993"];
5539 [label="sb.Append('''); 743994"];
5540 [label="sb.Append('''); 743995"];
5541 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 743996"];
5542 [label="sb.Append(')'); 743997"];
5543 [label="sb.Append(')'); 743998"];
5544 [label="sb.Append('.WithArguments('); 743999"];
5545 [label="sb.Append('.WithArguments('); 744000"];
5546 [label="sb.Append('\\''); 744001"];
5547 [label="sb.Append(argumentStrings.Current); 744002"];
5548 [label="sb.Append(argumentStrings.Current); 744003"];
5549 [label="sb.Append('\\''); 744004"];
5550 [label="sb.Append(')'); 744005"];
5551 [label="sb.Append(')'); 744006"];
5552 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 744007"];
5553 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 744008"];
5554 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 744009"];
5555 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 744010"];
5556 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 744011"];
5557 [label="return sb.ToString(); 744012"];
5558 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744013"];
5559 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744014"];
5560 [label="GetCommaSeparatedLines(assertText, expectedText); 744015"];
5561 [label="GetCommaSeparatedLines(assertText, expectedText); 744016"];
5562 [label="GetCommaSeparatedLines(assertText, expectedText) 744017"];
5563 [label="param GetCommaSeparatedLines(StringBuilder sb) 744018"];
5564 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 744019"];
5565 [label="int n = lines.Count; 744020"];
5566 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 744021"];
5567 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 744022"];
5568 [label="sb.Append(lines[i]); 744023"];
5569 [label="sb.Append(lines[i]); 744024"];
5570 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 744025"];
5571 [label="sb.Append(','); 744026"];
5572 [label="sb.Append(','); 744027"];
5573 [label="sb.AppendLine(); 744028"];
5574 [label="GetCommaSeparatedLines(assertText, expectedText); 744029"];
5575 [label="assertText.AppendLine('Actual:'); 744030"];
5576 [label="assertText.AppendLine('Actual:'); 744031"];
5577 [label="var actualText = ArrayBuilder<string>.GetInstance(); 744032"];
5578 [label="var e = actual.GetEnumerator(); 744033"];
5579 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 744034"];
5580 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 744035"];
5581 [label="Diagnostic d = e.Current; 744036"];
5582 [label="string message = d.ToString(); 744037"];
5583 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 744038"];
5584 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 744039"];
5585 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 744040"];
5586 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 744041"];
5587 [label="Indent(assertText, indentDepth); 744042"];
5588 [label="Indent(assertText, indentDepth); 744043"];
5589 [label="Indent(assertText, indentDepth) 744044"];
5590 [label="param Indent(StringBuilder sb) 744045"];
5591 [label="param Indent(int count) 744046"];
5592 [label="sb.Append(' ', 4 * count); 744047"];
5593 [label="sb.Append(' ', 4 * count); 744048"];
5594 [label="sb.Append(' ', 4 * count); 744049"];
5595 [label="Indent(assertText, indentDepth); 744050"];
5596 [label="assertText.Append('// '); 744051"];
5597 [label="assertText.Append('// '); 744052"];
5598 [label="assertText.AppendLine(d.ToString()); 744053"];
5599 [label="assertText.AppendLine(d.ToString()); 744054"];
5600 [label="var l = d.Location; 744055"];
5601 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 744056"];
5602 [label="Indent(assertText, indentDepth); 744057"];
5603 [label="Indent(assertText, indentDepth); 744058"];
5604 [label="Indent(assertText, indentDepth) 744059"];
5605 [label="param Indent(StringBuilder sb) 744060"];
5606 [label="param Indent(int count) 744061"];
5607 [label="sb.Append(' ', 4 * count); 744062"];
5608 [label="sb.Append(' ', 4 * count); 744063"];
5609 [label="sb.Append(' ', 4 * count); 744064"];
5610 [label="Indent(assertText, indentDepth); 744065"];
5611 [label="assertText.Append('// '); 744066"];
5612 [label="assertText.Append('// '); 744067"];
5613 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 744068"];
5614 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 744069"];
5615 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 744070"];
5616 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 744071"];
5617 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 744072"];
5618 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 744073"];
5619 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 744074"];
5620 [label="param DiagnosticDescription(Diagnostic d) 744075"];
5621 [label="param DiagnosticDescription(bool errorCodeOnly) 744076"];
5622 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 744077"];
5623 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 744078"];
5624 [label="param DiagnosticDescription(this) 744079"];
5625 [label="_code 744080"];
5626 [label="_isWarningAsError 744081"];
5627 [label="_isSuppressed 744082"];
5628 [label="_squiggledText 744083"];
5629 [label="_arguments 744084"];
5630 [label="_startPosition 744085"];
5631 [label="_errorCodeType 744086"];
5632 [label="_defaultSeverityOpt 744087"];
5633 [label="_effectiveSeverityOpt 744088"];
5634 [label="_code 744089"];
5635 [label="_isWarningAsError 744090"];
5636 [label="_isSuppressed 744091"];
5637 [label="_location 744092"];
5638 [label="DiagnosticWithInfo dinfo = null; 744093"];
5639 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 744094"];
5640 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 744095"];
5641 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 744096"];
5642 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 744097"];
5643 [label="var diffDescription = description; 744098"];
5644 [label="var idx = Array.IndexOf(expected, description); 744099"];
5645 [label="var idx = Array.IndexOf(expected, description); 744100"];
5646 [label="var idx = Array.IndexOf(expected, description); 744101"];
5647 [label="var idx = Array.IndexOf(expected, description); 744102"];
5648 [label="if (d == null)\n                return false; 744103"];
5649 [label="if (d == null)\n                return false; 744104"];
5650 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 744105"];
5651 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 744106"];
5652 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 744107"];
5653 [label="if (_squiggledText != d._squiggledText)\n                    return false; 744108"];
5654 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 744109"];
5655 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 744110"];
5656 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 744111"];
5657 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 744112"];
5658 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 744113"];
5659 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 744114"];
5660 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 744115"];
5661 [label="if (d._arguments == null)\n                    return false; 744116"];
5662 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 744117"];
5663 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 744118"];
5664 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 744119"];
5665 [label="diffDescription = expected[idx]; 744120"];
5666 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744121"];
5667 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744122"];
5668 [label="GetDiagnosticDescription(description, indentDepth) 744123"];
5669 [label="param GetDiagnosticDescription(DiagnosticDescription d) 744124"];
5670 [label="param GetDiagnosticDescription(int indentDepth) 744125"];
5671 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744126"];
5672 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744127"];
5673 [label="var sb = new StringBuilder(); 744128"];
5674 [label="sb.Append('Diagnostic('); 744129"];
5675 [label="sb.Append('Diagnostic('); 744130"];
5676 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 744131"];
5677 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 744132"];
5678 [label="sb.Append(_errorCodeType.Name); 744133"];
5679 [label="sb.Append(_errorCodeType.Name); 744134"];
5680 [label="sb.Append('.'); 744135"];
5681 [label="sb.Append('.'); 744136"];
5682 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744137"];
5683 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744138"];
5684 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 744139"];
5685 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 744140"];
5686 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 744141"];
5687 [label="sb.Append(', \\''); 744142"];
5688 [label="sb.Append(', \\''); 744143"];
5689 [label="sb.Append(_squiggledText); 744144"];
5690 [label="sb.Append(_squiggledText); 744145"];
5691 [label="sb.Append('''); 744146"];
5692 [label="sb.Append('''); 744147"];
5693 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 744148"];
5694 [label="sb.Append(')'); 744149"];
5695 [label="sb.Append(')'); 744150"];
5696 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 744151"];
5697 [label="sb.Append('.WithArguments('); 744152"];
5698 [label="sb.Append('.WithArguments('); 744153"];
5699 [label="sb.Append('\\''); 744154"];
5700 [label="sb.Append('\\''); 744155"];
5701 [label="sb.Append(argumentStrings.Current); 744156"];
5702 [label="sb.Append(argumentStrings.Current); 744157"];
5703 [label="sb.Append('\\''); 744158"];
5704 [label="sb.Append('\\''); 744159"];
5705 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 744160"];
5706 [label="sb.Append(', '); 744161"];
5707 [label="sb.Append(', '); 744162"];
5708 [label="sb.Append(')'); 744163"];
5709 [label="sb.Append(')'); 744164"];
5710 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 744165"];
5711 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 744166"];
5712 [label="sb.Append('.WithLocation('); 744167"];
5713 [label="sb.Append('.WithLocation('); 744168"];
5714 [label="sb.Append(_startPosition.Value.Line + 1); 744169"];
5715 [label="sb.Append(_startPosition.Value.Line + 1); 744170"];
5716 [label="sb.Append(', '); 744171"];
5717 [label="sb.Append(', '); 744172"];
5718 [label="sb.Append(_startPosition.Value.Character + 1); 744173"];
5719 [label="sb.Append(_startPosition.Value.Character + 1); 744174"];
5720 [label="sb.Append(')'); 744175"];
5721 [label="sb.Append(')'); 744176"];
5722 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 744177"];
5723 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 744178"];
5724 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 744179"];
5725 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 744180"];
5726 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 744181"];
5727 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 744182"];
5728 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 744183"];
5729 [label="return sb.ToString(); 744184"];
5730 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744185"];
5731 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744186"];
5732 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744187"];
5733 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744188"];
5734 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744189"];
5735 [label="GetDiagnosticDescription(diffDescription, indentDepth) 744190"];
5736 [label="param GetDiagnosticDescription(DiagnosticDescription d) 744191"];
5737 [label="param GetDiagnosticDescription(int indentDepth) 744192"];
5738 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744193"];
5739 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744194"];
5740 [label="var sb = new StringBuilder(); 744195"];
5741 [label="sb.Append('Diagnostic('); 744196"];
5742 [label="sb.Append('Diagnostic('); 744197"];
5743 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 744198"];
5744 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 744199"];
5745 [label="sb.Append(_errorCodeType.Name); 744200"];
5746 [label="sb.Append(_errorCodeType.Name); 744201"];
5747 [label="sb.Append('.'); 744202"];
5748 [label="sb.Append('.'); 744203"];
5749 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744204"];
5750 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744205"];
5751 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 744206"];
5752 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 744207"];
5753 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 744208"];
5754 [label="sb.Append(', \\''); 744209"];
5755 [label="sb.Append(', \\''); 744210"];
5756 [label="sb.Append(_squiggledText); 744211"];
5757 [label="sb.Append(_squiggledText); 744212"];
5758 [label="sb.Append('''); 744213"];
5759 [label="sb.Append('''); 744214"];
5760 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 744215"];
5761 [label="sb.Append(')'); 744216"];
5762 [label="sb.Append(')'); 744217"];
5763 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 744218"];
5764 [label="sb.Append('.WithArguments('); 744219"];
5765 [label="sb.Append('.WithArguments('); 744220"];
5766 [label="sb.Append('\\''); 744221"];
5767 [label="sb.Append('\\''); 744222"];
5768 [label="sb.Append(argumentStrings.Current); 744223"];
5769 [label="sb.Append(argumentStrings.Current); 744224"];
5770 [label="sb.Append('\\''); 744225"];
5771 [label="sb.Append('\\''); 744226"];
5772 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 744227"];
5773 [label="sb.Append(', '); 744228"];
5774 [label="sb.Append(', '); 744229"];
5775 [label="sb.Append(')'); 744230"];
5776 [label="sb.Append(')'); 744231"];
5777 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 744232"];
5778 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 744233"];
5779 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 744234"];
5780 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 744235"];
5781 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 744236"];
5782 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 744237"];
5783 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 744238"];
5784 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 744239"];
5785 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 744240"];
5786 [label="return sb.ToString(); 744241"];
5787 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744242"];
5788 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744243"];
5789 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744244"];
5790 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 744245"];
5791 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 744246"];
5792 [label="assertText.AppendLine(','); 744247"];
5793 [label="assertText.AppendLine(','); 744248"];
5794 [label="Indent(assertText, indentDepth); 744249"];
5795 [label="Indent(assertText, indentDepth); 744250"];
5796 [label="Indent(assertText, indentDepth) 744251"];
5797 [label="param Indent(StringBuilder sb) 744252"];
5798 [label="param Indent(int count) 744253"];
5799 [label="sb.Append(' ', 4 * count); 744254"];
5800 [label="sb.Append(' ', 4 * count); 744255"];
5801 [label="Indent(assertText, indentDepth); 744256"];
5802 [label="assertText.Append('// '); 744257"];
5803 [label="Indent(assertText, indentDepth); 744258"];
5804 [label="Indent(assertText, indentDepth); 744259"];
5805 [label="Indent(assertText, indentDepth) 744260"];
5806 [label="param Indent(StringBuilder sb) 744261"];
5807 [label="param Indent(int count) 744262"];
5808 [label="sb.Append(' ', 4 * count); 744263"];
5809 [label="sb.Append(' ', 4 * count); 744264"];
5810 [label="Indent(assertText, indentDepth); 744265"];
5811 [label="assertText.Append('// '); 744266"];
5812 [label="_code 744267"];
5813 [label="_isWarningAsError 744268"];
5814 [label="_isSuppressed 744269"];
5815 [label="_squiggledText 744270"];
5816 [label="_arguments 744271"];
5817 [label="_startPosition 744272"];
5818 [label="_errorCodeType 744273"];
5819 [label="_defaultSeverityOpt 744274"];
5820 [label="_effectiveSeverityOpt 744275"];
5821 [label="_code 744276"];
5822 [label="DiagnosticWithInfo dinfo = null; 744277"];
5823 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 744278"];
5824 [label="var diffDescription = description; 744279"];
5825 [label="if (d == null)\n                return false; 744280"];
5826 [label="return false; 744281"];
5827 [label="if (d == null)\n                return false; 744282"];
5828 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 744283"];
5829 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 744284"];
5830 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 744285"];
5831 [label="if (_squiggledText != d._squiggledText)\n                    return false; 744286"];
5832 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 744287"];
5833 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 744288"];
5834 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 744289"];
5835 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 744290"];
5836 [label="if (d._arguments == null)\n                    return false; 744291"];
5837 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 744292"];
5838 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744293"];
5839 [label="param GetDiagnosticDescription(int indentDepth) 744294"];
5840 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744295"];
5841 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744296"];
5842 [label="var sb = new StringBuilder(); 744297"];
5843 [label="sb.Append('Diagnostic('); 744298"];
5844 [label="sb.Append('Diagnostic('); 744299"];
5845 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 744300"];
5846 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 744301"];
5847 [label="sb.Append(_errorCodeType.Name); 744302"];
5848 [label="sb.Append(_errorCodeType.Name); 744303"];
5849 [label="sb.Append('.'); 744304"];
5850 [label="sb.Append('.'); 744305"];
5851 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744306"];
5852 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744307"];
5853 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 744308"];
5854 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 744309"];
5855 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 744310"];
5856 [label="sb.Append(', \\''); 744311"];
5857 [label="sb.Append(', \\''); 744312"];
5858 [label="sb.Append(_squiggledText); 744313"];
5859 [label="sb.Append(_squiggledText); 744314"];
5860 [label="sb.Append('''); 744315"];
5861 [label="sb.Append('''); 744316"];
5862 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 744317"];
5863 [label="sb.Append(')'); 744318"];
5864 [label="sb.Append(')'); 744319"];
5865 [label="sb.Append('.WithArguments('); 744320"];
5866 [label="sb.Append('.WithArguments('); 744321"];
5867 [label="sb.Append('\\''); 744322"];
5868 [label="sb.Append('\\''); 744323"];
5869 [label="sb.Append(argumentStrings.Current); 744324"];
5870 [label="sb.Append(argumentStrings.Current); 744325"];
5871 [label="sb.Append('\\''); 744326"];
5872 [label="sb.Append('\\''); 744327"];
5873 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 744328"];
5874 [label="sb.Append(')'); 744329"];
5875 [label="sb.Append(')'); 744330"];
5876 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 744331"];
5877 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 744332"];
5878 [label="sb.Append('.WithLocation('); 744333"];
5879 [label="sb.Append('.WithLocation('); 744334"];
5880 [label="sb.Append(_startPosition.Value.Line + 1); 744335"];
5881 [label="sb.Append(_startPosition.Value.Line + 1); 744336"];
5882 [label="sb.Append(', '); 744337"];
5883 [label="sb.Append(', '); 744338"];
5884 [label="sb.Append(_startPosition.Value.Character + 1); 744339"];
5885 [label="sb.Append(_startPosition.Value.Character + 1); 744340"];
5886 [label="sb.Append(')'); 744341"];
5887 [label="sb.Append(')'); 744342"];
5888 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 744343"];
5889 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 744344"];
5890 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 744345"];
5891 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 744346"];
5892 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 744347"];
5893 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 744348"];
5894 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 744349"];
5895 [label="return sb.ToString(); 744350"];
5896 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744351"];
5897 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744352"];
5898 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744353"];
5899 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744354"];
5900 [label="param GetDiagnosticDescription(int indentDepth) 744355"];
5901 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744356"];
5902 [label="sb.Append(_errorCodeType.Name); 744357"];
5903 [label="sb.Append(_errorCodeType.Name); 744358"];
5904 [label="sb.Append('.'); 744359"];
5905 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744360"];
5906 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744361"];
5907 [label="sb.Append(', \\''); 744362"];
5908 [label="sb.Append(_squiggledText); 744363"];
5909 [label="sb.Append(_squiggledText); 744364"];
5910 [label="sb.Append('''); 744365"];
5911 [label="sb.Append(')'); 744366"];
5912 [label="sb.Append('.WithArguments('); 744367"];
5913 [label="sb.Append('\\''); 744368"];
5914 [label="sb.Append(argumentStrings.Current); 744369"];
5915 [label="sb.Append('\\''); 744370"];
5916 [label="sb.Append(')'); 744371"];
5917 [label="return sb.ToString(); 744372"];
5918 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744373"];
5919 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744374"];
5920 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744375"];
5921 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 744376"];
5922 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 744377"];
5923 [label="assertText.AppendLine(','); 744378"];
5924 [label="Indent(assertText, indentDepth); 744379"];
5925 [label="Indent(assertText, indentDepth); 744380"];
5926 [label="Indent(assertText, indentDepth) 744381"];
5927 [label="param Indent(StringBuilder sb) 744382"];
5928 [label="param Indent(int count) 744383"];
5929 [label="sb.Append(' ', 4 * count); 744384"];
5930 [label="sb.Append(' ', 4 * count); 744385"];
5931 [label="Indent(assertText, indentDepth); 744386"];
5932 [label="assertText.Append('// '); 744387"];
5933 [label="Indent(assertText, indentDepth); 744388"];
5934 [label="Indent(assertText, indentDepth); 744389"];
5935 [label="Indent(assertText, indentDepth) 744390"];
5936 [label="param Indent(StringBuilder sb) 744391"];
5937 [label="param Indent(int count) 744392"];
5938 [label="sb.Append(' ', 4 * count); 744393"];
5939 [label="sb.Append(' ', 4 * count); 744394"];
5940 [label="Indent(assertText, indentDepth); 744395"];
5941 [label="assertText.Append('// '); 744396"];
5942 [label="_code 744397"];
5943 [label="_isWarningAsError 744398"];
5944 [label="_isSuppressed 744399"];
5945 [label="_squiggledText 744400"];
5946 [label="_arguments 744401"];
5947 [label="_startPosition 744402"];
5948 [label="_errorCodeType 744403"];
5949 [label="_defaultSeverityOpt 744404"];
5950 [label="_effectiveSeverityOpt 744405"];
5951 [label="_code 744406"];
5952 [label="DiagnosticWithInfo dinfo = null; 744407"];
5953 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 744408"];
5954 [label="var diffDescription = description; 744409"];
5955 [label="return false; 744410"];
5956 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 744411"];
5957 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 744412"];
5958 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 744413"];
5959 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 744414"];
5960 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 744415"];
5961 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 744416"];
5962 [label="if (d._arguments == null)\n                    return false; 744417"];
5963 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 744418"];
5964 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744419"];
5965 [label="param GetDiagnosticDescription(int indentDepth) 744420"];
5966 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744421"];
5967 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744422"];
5968 [label="var sb = new StringBuilder(); 744423"];
5969 [label="sb.Append('Diagnostic('); 744424"];
5970 [label="sb.Append('Diagnostic('); 744425"];
5971 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 744426"];
5972 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 744427"];
5973 [label="sb.Append(_errorCodeType.Name); 744428"];
5974 [label="sb.Append(_errorCodeType.Name); 744429"];
5975 [label="sb.Append('.'); 744430"];
5976 [label="sb.Append('.'); 744431"];
5977 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744432"];
5978 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744433"];
5979 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 744434"];
5980 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 744435"];
5981 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 744436"];
5982 [label="sb.Append(', \\''); 744437"];
5983 [label="sb.Append(', \\''); 744438"];
5984 [label="sb.Append(_squiggledText); 744439"];
5985 [label="sb.Append(_squiggledText); 744440"];
5986 [label="sb.Append('''); 744441"];
5987 [label="sb.Append('''); 744442"];
5988 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 744443"];
5989 [label="sb.Append(')'); 744444"];
5990 [label="sb.Append(')'); 744445"];
5991 [label="sb.Append('.WithArguments('); 744446"];
5992 [label="sb.Append('.WithArguments('); 744447"];
5993 [label="sb.Append('\\''); 744448"];
5994 [label="sb.Append('\\''); 744449"];
5995 [label="sb.Append(argumentStrings.Current); 744450"];
5996 [label="sb.Append(argumentStrings.Current); 744451"];
5997 [label="sb.Append('\\''); 744452"];
5998 [label="sb.Append('\\''); 744453"];
5999 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 744454"];
6000 [label="sb.Append(')'); 744455"];
6001 [label="sb.Append(')'); 744456"];
6002 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 744457"];
6003 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 744458"];
6004 [label="sb.Append('.WithLocation('); 744459"];
6005 [label="sb.Append('.WithLocation('); 744460"];
6006 [label="sb.Append(_startPosition.Value.Line + 1); 744461"];
6007 [label="sb.Append(_startPosition.Value.Line + 1); 744462"];
6008 [label="sb.Append(', '); 744463"];
6009 [label="sb.Append(', '); 744464"];
6010 [label="sb.Append(_startPosition.Value.Character + 1); 744465"];
6011 [label="sb.Append(_startPosition.Value.Character + 1); 744466"];
6012 [label="sb.Append(')'); 744467"];
6013 [label="sb.Append(')'); 744468"];
6014 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 744469"];
6015 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 744470"];
6016 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 744471"];
6017 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 744472"];
6018 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 744473"];
6019 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 744474"];
6020 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 744475"];
6021 [label="return sb.ToString(); 744476"];
6022 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744477"];
6023 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744478"];
6024 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 744479"];
6025 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744480"];
6026 [label="param GetDiagnosticDescription(int indentDepth) 744481"];
6027 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744482"];
6028 [label="sb.Append(_errorCodeType.Name); 744483"];
6029 [label="sb.Append(_errorCodeType.Name); 744484"];
6030 [label="sb.Append('.'); 744485"];
6031 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744486"];
6032 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 744487"];
6033 [label="sb.Append(', \\''); 744488"];
6034 [label="sb.Append(_squiggledText); 744489"];
6035 [label="sb.Append(_squiggledText); 744490"];
6036 [label="sb.Append('''); 744491"];
6037 [label="sb.Append(')'); 744492"];
6038 [label="sb.Append('.WithArguments('); 744493"];
6039 [label="sb.Append('\\''); 744494"];
6040 [label="sb.Append(argumentStrings.Current); 744495"];
6041 [label="sb.Append('\\''); 744496"];
6042 [label="sb.Append(')'); 744497"];
6043 [label="return sb.ToString(); 744498"];
6044 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744499"];
6045 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 744500"];
6046 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 744501"];
6047 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 744502"];
6048 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 744503"];
6049 [label="assertText.AppendLine(); 744504"];
6050 [label="assertText.AppendLine('Diff:'); 744505"];
6051 [label="assertText.AppendLine('Diff:'); 744506"];
6052 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 744507"];
6053 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 744508"];
6054 [label="new[] { '\\r', '\\n' } 744509"];
6055 [label="'\\r' 744510"];
6056 [label="'\\n' 744511"];
6057 [label="new[] { '\\r', '\\n' } 744512"];
6058 [label="new[] { '\\r', '\\n' } 744513"];
6059 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 744514"];
6060 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 744515"];
6061 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 744516"];
6062 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 744517"];
6063 [label="param DiffReport(IEnumerable<T> expected) 744518"];
6064 [label="param DiffReport(IEnumerable<T> actual) 744519"];
6065 [label="param DiffReport(string separator) 744520"];
6066 [label="param DiffReport(IEqualityComparer<T> comparer = null) 744521"];
6067 [label="param DiffReport(Func<T, string> toString = null) 744522"];
6068 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 744523"];
6069 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 744524"];
6070 [label="(comparer != null) 744525"];
6071 [label="EqualityComparer<T>.Default 744526"];
6072 [label="new LCS<T>(EqualityComparer<T>.Default) 744527"];
6073 [label="param LCS(IEqualityComparer<T> comparer) 744528"];
6074 [label="param LCS(this) 744529"];
6075 [label="1 744530"];
6076 [label="DeleteCost = 1 744531"];
6077 [label="1 744532"];
6078 [label="InsertCost = 1 744533"];
6079 [label="2 744534"];
6080 [label="UpdateCost = 2 744535"];
6081 [label="param LongestCommonSubsequence(this) 744536"];
6082 [label="_comparer 744537"];
6083 [label="_comparer 744538"];
6084 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 744539"];
6085 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 744540"];
6086 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 744541"];
6087 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 744542"];
6088 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 744543"];
6089 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 744544"];
6090 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 744545"];
6091 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 744546"];
6092 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 744547"];
6093 [label="lcs.CalculateDiff(expectedList, actualList, toString) 744548"];
6094 [label="param CalculateDiff(IList<T> sequenceA) 744549"];
6095 [label="param CalculateDiff(IList<T> sequenceB) 744550"];
6096 [label="param CalculateDiff(Func<T, string> toString) 744551"];
6097 [label="param CalculateDiff(this) 744552"];
6098 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 744553"];
6099 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 744554"];
6100 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 744555"];
6101 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 744556"];
6102 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 744557"];
6103 [label="param GetEdits(TSequence sequenceA) 744558"];
6104 [label="param GetEdits(int lengthA) 744559"];
6105 [label="param GetEdits(TSequence sequenceB) 744560"];
6106 [label="param GetEdits(int lengthB) 744561"];
6107 [label="param GetEdits(this) 744562"];
6108 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 744563"];
6109 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 744564"];
6110 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 744565"];
6111 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 744566"];
6112 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 744567"];
6113 [label="param ComputeCostMatrix(TSequence sequenceA) 744568"];
6114 [label="param ComputeCostMatrix(int lengthA) 744569"];
6115 [label="param ComputeCostMatrix(TSequence sequenceB) 744570"];
6116 [label="param ComputeCostMatrix(int lengthB) 744571"];
6117 [label="param ComputeCostMatrix(this) 744572"];
6118 [label="var la = lengthA + 1; 744573"];
6119 [label="var la = lengthA + 1; 744574"];
6120 [label="var lb = lengthB + 1; 744575"];
6121 [label="var lb = lengthB + 1; 744576"];
6122 [label="var d = new int[la, lb]; 744577"];
6123 [label="d[0, 0] = 0; 744578"];
6124 [label="d[0, 0] 744579"];
6125 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 744580"];
6126 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 744581"];
6127 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 744582"];
6128 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 744583"];
6129 [label="d[i, 0] 744584"];
6130 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 744585"];
6131 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 744586"];
6132 [label="d[0, j] = d[0, j - 1] + InsertCost; 744587"];
6133 [label="d[0, j] = d[0, j - 1] + InsertCost; 744588"];
6134 [label="d[0, j] 744589"];
6135 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 744590"];
6136 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 744591"];
6137 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 744592"];
6138 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 744593"];
6139 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 744594"];
6140 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 744595"];
6141 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 744596"];
6142 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 744597"];
6143 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 744598"];
6144 [label="param ItemsEqual(IList<T> sequenceA) 744599"];
6145 [label="param ItemsEqual(int indexA) 744600"];
6146 [label="param ItemsEqual(IList<T> sequenceB) 744601"];
6147 [label="param ItemsEqual(int indexB) 744602"];
6148 [label="param ItemsEqual(this) 744603"];
6149 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 744604"];
6150 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 744605"];
6151 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 744606"];
6152 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 744607"];
6153 [label="int m2 = d[i - 1, j] + DeleteCost; 744608"];
6154 [label="int m2 = d[i - 1, j] + DeleteCost; 744609"];
6155 [label="int m3 = d[i, j - 1] + InsertCost; 744610"];
6156 [label="int m3 = d[i, j - 1] + InsertCost; 744611"];
6157 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 744612"];
6158 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 744613"];
6159 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 744614"];
6160 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 744615"];
6161 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 744616"];
6162 [label="d[i, j] 744617"];
6163 [label="return d; 744618"];
6164 [label="int i = lengthA; 744619"];
6165 [label="int j = lengthB; 744620"];
6166 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 744621"];
6167 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 744622"];
6168 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 744623"];
6169 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 744624"];
6170 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 744625"];
6171 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 744626"];
6172 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 744627"];
6173 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 744628"];
6174 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 744629"];
6175 [label="i--; 744630"];
6176 [label="j--; 744631"];
6177 [label="yield return new Edit(EditKind.Update, i, j); 744632"];
6178 [label="yield return new Edit(EditKind.Update, i, j); 744633"];
6179 [label="yield return new Edit(EditKind.Update, i, j); 744634"];
6180 [label="yield return new Edit(EditKind.Update, i, j); 744635"];
6181 [label="new Edit(EditKind.Update, i, j) 744636"];
6182 [label="param Edit(EditKind kind) 744637"];
6183 [label="param Edit(int indexA) 744638"];
6184 [label="param Edit(int indexB) 744639"];
6185 [label="param Edit(this) 744640"];
6186 [label="this.Kind 744641"];
6187 [label="this.IndexA 744642"];
6188 [label="this.IndexB 744643"];
6189 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 744644"];
6190 [label="yield return new Edit(EditKind.Update, i, j); 744645"];
6191 [label="yield return new Edit(EditKind.Update, i, j); 744646"];
6192 [label="new Edit(EditKind.Update, i, j) 744647"];
6193 [label="param Edit(EditKind kind) 744648"];
6194 [label="param Edit(int indexA) 744649"];
6195 [label="param Edit(int indexB) 744650"];
6196 [label="param Edit(this) 744651"];
6197 [label="this.Kind 744652"];
6198 [label="this.IndexA 744653"];
6199 [label="this.IndexB 744654"];
6200 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 744655"];
6201 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 744656"];
6202 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 744657"];
6203 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 744658"];
6204 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 744659"];
6205 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 744660"];
6206 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 744661"];
6207 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 744662"];
6208 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 744663"];
6209 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 744664"];
6210 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 744665"];
6211 [label="actualText.Free(); 744666"];
6212 [label="expectedText.Free(); 744667"];
6213 [label="return assertText.ToString(); 744668"];
6214 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 744669"];
6215 [label="diagnostics.Verify(expected); 744670"];
6216 [label="VerifyAssemblyIds(c, diagnostics); 744671"];
6217 [label="VerifyAssemblyIds(c, diagnostics); 744672"];
6218 [label="VerifyAssemblyIds(c, diagnostics) 744673"];
6219 [label="param VerifyAssemblyIds(TCompilation c) 744674"];
6220 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 744675"];
6221 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 744676"];
6222 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 744677"];
6223 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 744678"];
6224 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 744679"];
6225 [label="CustomAssert.True(assemblyIds.IsEmpty); 744680"];
6226 [label="CustomAssert.True(assemblyIds.IsEmpty); 744681"];
6227 [label="VerifyAssemblyIds(c, diagnostics); 744682"];
6228 [label="return c; 744683"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 0;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 212;
214 -> 204;
215 -> 212;
215 -> 204;
216 -> 212;
216 -> 204;
217 -> 212;
217 -> 204;
218 -> 212;
218 -> 204;
219 -> 212;
219 -> 204;
220 -> 212;
220 -> 204;
221 -> 212;
221 -> 204;
222 -> 212;
222 -> 204;
223 -> 214;
223 -> 204;
224 -> 218;
224 -> 204;
225 -> 215;
225 -> 204;
226 -> 204;
227 -> 224;
227 -> 226;
228 -> 225;
228 -> 226;
229 -> 227;
229 -> 226;
230 -> 226;
231 -> 229;
231 -> 230;
232 -> 231;
232 -> 230;
233 -> 232;
234 -> 0;
234 -> 233;
235 -> 234;
236 -> 235;
237 -> 235;
238 -> 0;
238 -> 237;
239 -> 238;
239 -> 236;
239 -> 235;
240 -> 239;
240 -> 233;
241 -> 226;
242 -> 228;
242 -> 241;
242 -> 226;
243 -> 240;
243 -> 226;
244 -> 228;
244 -> 226;
245 -> 226;
246 -> 243;
246 -> 245;
247 -> 244;
247 -> 245;
248 -> 246;
248 -> 245;
249 -> 245;
250 -> 248;
250 -> 249;
251 -> 250;
251 -> 249;
252 -> 251;
253 -> 251;
254 -> 252;
254 -> 253;
255 -> 254;
255 -> 253;
256 -> 255;
257 -> 256;
257 -> 255;
258 -> 251;
259 -> 257;
259 -> 258;
259 -> 251;
260 -> 259;
261 -> 257;
261 -> 259;
262 -> 256;
263 -> 256;
264 -> 262;
264 -> 263;
264 -> 256;
265 -> 262;
265 -> 264;
266 -> 262;
267 -> 262;
267 -> 266;
268 -> 0;
268 -> 245;
269 -> 247;
269 -> 245;
270 -> 269;
271 -> 246;
271 -> 270;
271 -> 212;
271 -> 239;
271 -> 262;
271 -> 269;
272 -> 269;
273 -> 269;
274 -> 272;
274 -> 273;
275 -> 274;
275 -> 273;
276 -> 275;
276 -> 271;
276 -> 273;
277 -> 269;
278 -> 276;
278 -> 277;
278 -> 269;
279 -> 276;
279 -> 269;
280 -> 260;
280 -> 279;
280 -> 261;
280 -> 265;
280 -> 267;
280 -> 0;
280 -> 269;
281 -> 226;
282 -> 228;
282 -> 226;
283 -> 240;
283 -> 282;
283 -> 239;
283 -> 276;
283 -> 226;
284 -> 216;
284 -> 204;
285 -> 217;
285 -> 204;
286 -> 219;
286 -> 204;
287 -> 220;
287 -> 204;
288 -> 221;
288 -> 204;
289 -> 204;
290 -> 223;
290 -> 289;
291 -> 283;
291 -> 289;
292 -> 284;
292 -> 289;
293 -> 285;
293 -> 289;
294 -> 286;
294 -> 289;
295 -> 287;
295 -> 289;
296 -> 288;
296 -> 289;
297 -> 290;
297 -> 289;
298 -> 291;
298 -> 289;
299 -> 292;
299 -> 289;
300 -> 293;
300 -> 289;
301 -> 294;
301 -> 289;
302 -> 295;
302 -> 289;
303 -> 296;
303 -> 289;
304 -> 289;
305 -> 304;
305 -> 289;
306 -> 289;
307 -> 297;
307 -> 306;
308 -> 298;
308 -> 306;
309 -> 299;
309 -> 306;
310 -> 300;
310 -> 306;
311 -> 301;
311 -> 306;
312 -> 302;
312 -> 306;
313 -> 303;
313 -> 306;
314 -> 305;
314 -> 306;
315 -> 310;
315 -> 306;
316 -> 312;
316 -> 306;
317 -> 306;
318 -> 315;
318 -> 317;
319 -> 316;
319 -> 317;
320 -> 307;
320 -> 317;
321 -> 320;
321 -> 212;
321 -> 317;
322 -> 321;
323 -> 319;
323 -> 321;
324 -> 318;
324 -> 321;
325 -> 321;
326 -> 322;
326 -> 325;
327 -> 323;
327 -> 325;
328 -> 324;
328 -> 325;
329 -> 322;
329 -> 325;
330 -> 325;
331 -> 328;
331 -> 330;
331 -> 325;
332 -> 0;
333 -> 0;
335 -> 332;
335 -> 333;
335 -> 334;
336 -> 335;
337 -> 0;
338 -> 336;
338 -> 335;
338 -> 337;
339 -> 338;
340 -> 0;
341 -> 336;
341 -> 335;
341 -> 340;
342 -> 341;
343 -> 0;
344 -> 336;
344 -> 335;
344 -> 343;
345 -> 344;
346 -> 0;
347 -> 336;
347 -> 335;
347 -> 346;
348 -> 347;
349 -> 0;
350 -> 336;
350 -> 335;
350 -> 349;
351 -> 350;
352 -> 0;
353 -> 336;
353 -> 335;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 336;
356 -> 335;
356 -> 355;
357 -> 356;
358 -> 0;
359 -> 336;
359 -> 335;
359 -> 358;
360 -> 359;
361 -> 0;
362 -> 336;
362 -> 335;
362 -> 361;
363 -> 362;
364 -> 0;
365 -> 336;
365 -> 335;
365 -> 364;
366 -> 365;
367 -> 0;
368 -> 336;
368 -> 335;
368 -> 367;
369 -> 368;
370 -> 336;
373 -> 370;
373 -> 372;
374 -> 371;
374 -> 372;
375 -> 372;
376 -> 373;
376 -> 335;
376 -> 372;
377 -> 372;
378 -> 374;
378 -> 372;
379 -> 375;
379 -> 372;
380 -> 378;
380 -> 379;
380 -> 372;
381 -> 380;
381 -> 377;
381 -> 372;
382 -> 376;
382 -> 377;
382 -> 335;
382 -> 381;
382 -> 380;
382 -> 372;
383 -> 382;
384 -> 0;
385 -> 384;
387 -> 385;
387 -> 386;
388 -> 336;
388 -> 335;
388 -> 387;
389 -> 388;
390 -> 0;
391 -> 390;
392 -> 336;
392 -> 335;
392 -> 391;
393 -> 392;
394 -> 0;
395 -> 336;
395 -> 335;
395 -> 394;
396 -> 395;
397 -> 360;
399 -> 398;
400 -> 0;
401 -> 0;
402 -> 0;
404 -> 400;
404 -> 401;
404 -> 402;
404 -> 403;
405 -> 399;
406 -> 404;
406 -> 405;
406 -> 398;
407 -> 406;
411 -> 408;
411 -> 409;
411 -> 410;
412 -> 342;
412 -> 335;
412 -> 341;
412 -> 408;
412 -> 411;
413 -> 412;
414 -> 354;
415 -> 363;
416 -> 363;
417 -> 360;
418 -> 0;
419 -> 0;
421 -> 418;
421 -> 420;
422 -> 419;
422 -> 420;
423 -> 420;
424 -> 421;
424 -> 420;
425 -> 422;
425 -> 420;
426 -> 0;
426 -> 420;
427 -> 423;
427 -> 420;
428 -> 420;
429 -> 424;
429 -> 425;
429 -> 426;
429 -> 427;
429 -> 428;
429 -> 420;
430 -> 429;
431 -> 0;
432 -> 0;
434 -> 431;
434 -> 433;
435 -> 432;
435 -> 433;
436 -> 433;
437 -> 434;
437 -> 433;
438 -> 435;
438 -> 433;
439 -> 0;
439 -> 433;
440 -> 436;
440 -> 433;
441 -> 433;
442 -> 437;
442 -> 438;
442 -> 439;
442 -> 440;
442 -> 441;
442 -> 433;
443 -> 442;
445 -> 430;
445 -> 429;
445 -> 444;
446 -> 445;
448 -> 443;
448 -> 442;
448 -> 447;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
489 -> 0;
490 -> 0;
492 -> 489;
492 -> 491;
493 -> 490;
493 -> 491;
494 -> 491;
495 -> 492;
495 -> 491;
496 -> 493;
496 -> 491;
497 -> 0;
497 -> 491;
498 -> 494;
498 -> 491;
499 -> 491;
500 -> 495;
500 -> 496;
500 -> 497;
500 -> 498;
500 -> 499;
500 -> 491;
501 -> 500;
502 -> 0;
503 -> 0;
505 -> 502;
505 -> 504;
506 -> 503;
506 -> 504;
507 -> 504;
508 -> 505;
508 -> 504;
509 -> 506;
509 -> 504;
510 -> 0;
510 -> 504;
511 -> 507;
511 -> 504;
512 -> 504;
513 -> 508;
513 -> 509;
513 -> 510;
513 -> 511;
513 -> 512;
513 -> 504;
514 -> 513;
515 -> 0;
516 -> 0;
518 -> 515;
518 -> 517;
519 -> 516;
519 -> 517;
520 -> 517;
521 -> 518;
521 -> 517;
522 -> 519;
522 -> 517;
523 -> 0;
523 -> 517;
524 -> 520;
524 -> 517;
525 -> 517;
526 -> 521;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 517;
527 -> 526;
529 -> 430;
529 -> 429;
529 -> 528;
530 -> 529;
532 -> 443;
532 -> 442;
532 -> 531;
533 -> 532;
535 -> 462;
535 -> 461;
535 -> 534;
536 -> 535;
538 -> 475;
538 -> 474;
538 -> 537;
539 -> 538;
540 -> 0;
541 -> 430;
541 -> 429;
541 -> 540;
541 -> 0;
542 -> 541;
543 -> 0;
544 -> 443;
544 -> 442;
544 -> 543;
544 -> 0;
545 -> 544;
546 -> 0;
547 -> 514;
547 -> 513;
547 -> 546;
547 -> 0;
548 -> 547;
549 -> 0;
550 -> 462;
550 -> 461;
550 -> 549;
550 -> 0;
551 -> 550;
552 -> 0;
553 -> 0;
553 -> 552;
554 -> 553;
555 -> 336;
555 -> 331;
556 -> 326;
556 -> 325;
557 -> 0;
557 -> 325;
558 -> 557;
558 -> 329;
558 -> 325;
559 -> 325;
560 -> 556;
560 -> 558;
560 -> 559;
560 -> 0;
560 -> 325;
561 -> 560;
561 -> 325;
562 -> 555;
562 -> 325;
563 -> 327;
563 -> 325;
564 -> 325;
565 -> 561;
565 -> 562;
565 -> 563;
565 -> 564;
565 -> 560;
565 -> 335;
565 -> 325;
566 -> 325;
567 -> 565;
567 -> 566;
568 -> 566;
569 -> 566;
570 -> 567;
570 -> 565;
570 -> 569;
570 -> 566;
571 -> 568;
571 -> 566;
572 -> 566;
573 -> 570;
573 -> 565;
573 -> 569;
573 -> 571;
573 -> 572;
573 -> 568;
573 -> 566;
574 -> 566;
575 -> 574;
575 -> 568;
575 -> 566;
576 -> 568;
576 -> 566;
577 -> 566;
578 -> 576;
578 -> 577;
578 -> 568;
578 -> 575;
578 -> 566;
579 -> 567;
579 -> 566;
580 -> 579;
580 -> 322;
580 -> 321;
581 -> 322;
581 -> 306;
582 -> 306;
583 -> 309;
583 -> 582;
583 -> 306;
584 -> 581;
584 -> 583;
585 -> 583;
586 -> 584;
586 -> 585;
586 -> 322;
586 -> 580;
586 -> 565;
586 -> 583;
587 -> 586;
587 -> 583;
588 -> 430;
588 -> 587;
589 -> 0;
589 -> 306;
590 -> 314;
590 -> 306;
591 -> 311;
591 -> 581;
591 -> 308;
591 -> 588;
591 -> 306;
592 -> 591;
592 -> 306;
593 -> 306;
594 -> 592;
594 -> 593;
595 -> 0;
595 -> 593;
596 -> 595;
597 -> 306;
598 -> 591;
598 -> 322;
598 -> 580;
598 -> 565;
598 -> 283;
598 -> 429;
598 -> 306;
599 -> 306;
600 -> 599;
601 -> 598;
601 -> 600;
601 -> 306;
602 -> 601;
602 -> 306;
603 -> 306;
604 -> 602;
604 -> 603;
605 -> 604;
605 -> 601;
605 -> 603;
606 -> 605;
606 -> 601;
606 -> 603;
607 -> 603;
608 -> 605;
608 -> 607;
608 -> 601;
608 -> 603;
609 -> 0;
609 -> 603;
610 -> 608;
610 -> 609;
610 -> 603;
611 -> 313;
611 -> 610;
611 -> 306;
612 -> 601;
612 -> 306;
613 -> 212;
613 -> 612;
613 -> 610;
613 -> 1;
614 -> 1;
615 -> 205;
615 -> 614;
616 -> 204;
616 -> 614;
617 -> 204;
617 -> 614;
618 -> 204;
618 -> 614;
619 -> 204;
619 -> 614;
620 -> 204;
620 -> 614;
621 -> 204;
621 -> 614;
622 -> 615;
622 -> 614;
623 -> 616;
623 -> 614;
624 -> 617;
624 -> 614;
625 -> 618;
625 -> 614;
626 -> 619;
626 -> 614;
627 -> 620;
627 -> 614;
628 -> 621;
628 -> 614;
629 -> 614;
630 -> 622;
630 -> 629;
631 -> 623;
631 -> 629;
632 -> 624;
632 -> 629;
633 -> 625;
633 -> 629;
634 -> 626;
634 -> 629;
635 -> 627;
635 -> 629;
636 -> 628;
636 -> 629;
637 -> 630;
637 -> 629;
638 -> 630;
638 -> 629;
639 -> 629;
640 -> 631;
640 -> 629;
641 -> 632;
641 -> 629;
642 -> 633;
642 -> 629;
643 -> 634;
643 -> 629;
644 -> 635;
644 -> 629;
646 -> 645;
648 -> 647;
649 -> 636;
649 -> 629;
650 -> 629;
651 -> 638;
651 -> 650;
652 -> 639;
652 -> 650;
653 -> 640;
653 -> 650;
654 -> 641;
654 -> 650;
655 -> 642;
655 -> 650;
656 -> 643;
656 -> 650;
657 -> 644;
657 -> 650;
658 -> 638;
658 -> 650;
659 -> 649;
659 -> 650;
660 -> 639;
660 -> 650;
661 -> 639;
661 -> 650;
662 -> 639;
662 -> 650;
663 -> 662;
663 -> 650;
664 -> 662;
664 -> 650;
665 -> 662;
665 -> 650;
666 -> 662;
666 -> 650;
667 -> 662;
667 -> 650;
668 -> 662;
668 -> 650;
669 -> 662;
669 -> 650;
670 -> 662;
670 -> 650;
671 -> 662;
671 -> 650;
672 -> 662;
672 -> 650;
673 -> 662;
673 -> 650;
674 -> 662;
674 -> 650;
675 -> 662;
675 -> 650;
676 -> 662;
676 -> 650;
677 -> 662;
677 -> 650;
678 -> 651;
678 -> 662;
678 -> 650;
679 -> 652;
679 -> 662;
679 -> 650;
680 -> 653;
680 -> 662;
680 -> 650;
681 -> 654;
681 -> 662;
681 -> 650;
682 -> 655;
682 -> 662;
682 -> 650;
683 -> 656;
683 -> 662;
683 -> 650;
684 -> 657;
684 -> 662;
684 -> 650;
685 -> 658;
685 -> 650;
686 -> 685;
686 -> 662;
686 -> 650;
687 -> 659;
687 -> 662;
687 -> 650;
688 -> 660;
688 -> 662;
688 -> 650;
689 -> 661;
689 -> 662;
689 -> 650;
690 -> 639;
690 -> 614;
691 -> 690;
691 -> 1;
692 -> 204;
692 -> 1;
693 -> 1;
694 -> 204;
694 -> 693;
695 -> 691;
695 -> 693;
696 -> 695;
696 -> 678;
696 -> 693;
697 -> 695;
697 -> 679;
697 -> 693;
698 -> 695;
698 -> 680;
698 -> 693;
699 -> 694;
699 -> 693;
700 -> 695;
700 -> 682;
700 -> 693;
701 -> 695;
701 -> 683;
701 -> 693;
702 -> 693;
703 -> 695;
703 -> 686;
703 -> 693;
704 -> 695;
704 -> 687;
704 -> 693;
705 -> 695;
705 -> 688;
705 -> 693;
706 -> 695;
706 -> 689;
706 -> 693;
707 -> 693;
708 -> 696;
708 -> 707;
709 -> 697;
709 -> 707;
710 -> 698;
710 -> 707;
711 -> 699;
711 -> 707;
712 -> 700;
712 -> 707;
713 -> 701;
713 -> 707;
714 -> 702;
714 -> 707;
715 -> 703;
715 -> 707;
716 -> 704;
716 -> 707;
717 -> 705;
717 -> 707;
718 -> 706;
718 -> 707;
719 -> 702;
719 -> 707;
720 -> 719;
720 -> 707;
721 -> 719;
721 -> 707;
722 -> 719;
722 -> 707;
723 -> 719;
723 -> 707;
724 -> 719;
724 -> 707;
725 -> 719;
725 -> 707;
726 -> 719;
726 -> 707;
727 -> 719;
727 -> 707;
728 -> 719;
728 -> 707;
729 -> 719;
729 -> 707;
730 -> 719;
730 -> 707;
731 -> 719;
731 -> 707;
732 -> 719;
732 -> 707;
733 -> 719;
733 -> 707;
734 -> 719;
734 -> 707;
735 -> 711;
735 -> 719;
735 -> 707;
736 -> 714;
736 -> 719;
736 -> 707;
737 -> 702;
737 -> 1;
738 -> 1;
739 -> 205;
739 -> 738;
740 -> 204;
740 -> 738;
741 -> 204;
741 -> 738;
742 -> 204;
742 -> 738;
743 -> 204;
743 -> 738;
744 -> 204;
744 -> 738;
745 -> 204;
745 -> 738;
746 -> 739;
746 -> 738;
747 -> 740;
747 -> 738;
748 -> 741;
748 -> 738;
749 -> 742;
749 -> 738;
750 -> 743;
750 -> 738;
751 -> 744;
751 -> 738;
752 -> 745;
752 -> 738;
753 -> 738;
754 -> 746;
754 -> 753;
755 -> 747;
755 -> 753;
756 -> 748;
756 -> 753;
757 -> 749;
757 -> 753;
758 -> 750;
758 -> 753;
759 -> 751;
759 -> 753;
760 -> 752;
760 -> 753;
761 -> 754;
761 -> 753;
762 -> 754;
762 -> 753;
763 -> 753;
764 -> 755;
764 -> 753;
765 -> 756;
765 -> 753;
766 -> 757;
766 -> 753;
767 -> 758;
767 -> 753;
768 -> 759;
768 -> 753;
769 -> 760;
769 -> 753;
770 -> 753;
771 -> 762;
771 -> 770;
772 -> 763;
772 -> 770;
773 -> 764;
773 -> 770;
774 -> 765;
774 -> 770;
775 -> 766;
775 -> 770;
776 -> 767;
776 -> 770;
777 -> 768;
777 -> 770;
778 -> 762;
778 -> 770;
779 -> 769;
779 -> 770;
780 -> 763;
780 -> 770;
781 -> 763;
781 -> 770;
782 -> 763;
782 -> 770;
783 -> 782;
783 -> 770;
784 -> 782;
784 -> 770;
785 -> 782;
785 -> 770;
786 -> 782;
786 -> 770;
787 -> 782;
787 -> 770;
788 -> 782;
788 -> 770;
789 -> 782;
789 -> 770;
790 -> 782;
790 -> 770;
791 -> 782;
791 -> 770;
792 -> 782;
792 -> 770;
793 -> 782;
793 -> 770;
794 -> 782;
794 -> 770;
795 -> 782;
795 -> 770;
796 -> 782;
796 -> 770;
797 -> 782;
797 -> 770;
798 -> 771;
798 -> 782;
798 -> 770;
799 -> 772;
799 -> 782;
799 -> 770;
800 -> 773;
800 -> 782;
800 -> 770;
801 -> 774;
801 -> 782;
801 -> 770;
802 -> 775;
802 -> 782;
802 -> 770;
803 -> 776;
803 -> 782;
803 -> 770;
804 -> 777;
804 -> 782;
804 -> 770;
805 -> 778;
805 -> 770;
806 -> 805;
806 -> 782;
806 -> 770;
807 -> 779;
807 -> 782;
807 -> 770;
808 -> 780;
808 -> 782;
808 -> 770;
809 -> 781;
809 -> 782;
809 -> 770;
810 -> 763;
810 -> 738;
811 -> 810;
811 -> 1;
812 -> 204;
812 -> 1;
813 -> 1;
814 -> 204;
814 -> 813;
815 -> 811;
815 -> 813;
816 -> 815;
816 -> 798;
816 -> 813;
817 -> 815;
817 -> 799;
817 -> 813;
818 -> 815;
818 -> 800;
818 -> 813;
819 -> 814;
819 -> 813;
820 -> 815;
820 -> 802;
820 -> 813;
821 -> 815;
821 -> 803;
821 -> 813;
822 -> 813;
823 -> 815;
823 -> 806;
823 -> 813;
824 -> 815;
824 -> 807;
824 -> 813;
825 -> 815;
825 -> 808;
825 -> 813;
826 -> 815;
826 -> 809;
826 -> 813;
827 -> 813;
828 -> 816;
828 -> 827;
829 -> 817;
829 -> 827;
830 -> 818;
830 -> 827;
831 -> 819;
831 -> 827;
832 -> 820;
832 -> 827;
833 -> 821;
833 -> 827;
834 -> 822;
834 -> 827;
835 -> 823;
835 -> 827;
836 -> 824;
836 -> 827;
837 -> 825;
837 -> 827;
838 -> 826;
838 -> 827;
839 -> 822;
839 -> 827;
840 -> 839;
840 -> 827;
841 -> 839;
841 -> 827;
842 -> 839;
842 -> 827;
843 -> 839;
843 -> 827;
844 -> 839;
844 -> 827;
845 -> 839;
845 -> 827;
846 -> 839;
846 -> 827;
847 -> 839;
847 -> 827;
848 -> 839;
848 -> 827;
849 -> 839;
849 -> 827;
850 -> 839;
850 -> 827;
851 -> 839;
851 -> 827;
852 -> 839;
852 -> 827;
853 -> 839;
853 -> 827;
854 -> 839;
854 -> 827;
855 -> 831;
855 -> 839;
855 -> 827;
856 -> 834;
856 -> 839;
856 -> 827;
857 -> 822;
857 -> 1;
858 -> 1;
859 -> 205;
859 -> 858;
860 -> 204;
860 -> 858;
861 -> 204;
861 -> 858;
862 -> 204;
862 -> 858;
863 -> 204;
863 -> 858;
864 -> 204;
864 -> 858;
865 -> 204;
865 -> 858;
866 -> 859;
866 -> 858;
867 -> 860;
867 -> 858;
868 -> 861;
868 -> 858;
869 -> 862;
869 -> 858;
870 -> 863;
870 -> 858;
871 -> 864;
871 -> 858;
872 -> 865;
872 -> 858;
873 -> 858;
874 -> 866;
874 -> 873;
875 -> 867;
875 -> 873;
876 -> 868;
876 -> 873;
877 -> 869;
877 -> 873;
878 -> 870;
878 -> 873;
879 -> 871;
879 -> 873;
880 -> 872;
880 -> 873;
881 -> 874;
881 -> 873;
882 -> 874;
882 -> 873;
883 -> 873;
884 -> 875;
884 -> 873;
885 -> 876;
885 -> 873;
886 -> 877;
886 -> 873;
887 -> 878;
887 -> 873;
888 -> 879;
888 -> 873;
889 -> 880;
889 -> 873;
890 -> 873;
891 -> 882;
891 -> 890;
892 -> 883;
892 -> 890;
893 -> 884;
893 -> 890;
894 -> 885;
894 -> 890;
895 -> 886;
895 -> 890;
896 -> 887;
896 -> 890;
897 -> 888;
897 -> 890;
898 -> 882;
898 -> 890;
899 -> 889;
899 -> 890;
900 -> 883;
900 -> 890;
901 -> 883;
901 -> 890;
902 -> 883;
902 -> 890;
903 -> 902;
903 -> 890;
904 -> 902;
904 -> 890;
905 -> 902;
905 -> 890;
906 -> 902;
906 -> 890;
907 -> 902;
907 -> 890;
908 -> 902;
908 -> 890;
909 -> 902;
909 -> 890;
910 -> 902;
910 -> 890;
911 -> 902;
911 -> 890;
912 -> 902;
912 -> 890;
913 -> 902;
913 -> 890;
914 -> 902;
914 -> 890;
915 -> 902;
915 -> 890;
916 -> 902;
916 -> 890;
917 -> 902;
917 -> 890;
918 -> 891;
918 -> 902;
918 -> 890;
919 -> 892;
919 -> 902;
919 -> 890;
920 -> 893;
920 -> 902;
920 -> 890;
921 -> 894;
921 -> 902;
921 -> 890;
922 -> 895;
922 -> 902;
922 -> 890;
923 -> 896;
923 -> 902;
923 -> 890;
924 -> 897;
924 -> 902;
924 -> 890;
925 -> 898;
925 -> 890;
926 -> 925;
926 -> 902;
926 -> 890;
927 -> 899;
927 -> 902;
927 -> 890;
928 -> 900;
928 -> 902;
928 -> 890;
929 -> 901;
929 -> 902;
929 -> 890;
930 -> 883;
930 -> 858;
931 -> 930;
931 -> 1;
932 -> 204;
932 -> 1;
933 -> 1;
934 -> 204;
934 -> 933;
935 -> 931;
935 -> 933;
936 -> 935;
936 -> 918;
936 -> 933;
937 -> 935;
937 -> 919;
937 -> 933;
938 -> 935;
938 -> 920;
938 -> 933;
939 -> 934;
939 -> 933;
940 -> 935;
940 -> 922;
940 -> 933;
941 -> 935;
941 -> 923;
941 -> 933;
942 -> 933;
943 -> 935;
943 -> 926;
943 -> 933;
944 -> 935;
944 -> 927;
944 -> 933;
945 -> 935;
945 -> 928;
945 -> 933;
946 -> 935;
946 -> 929;
946 -> 933;
947 -> 933;
948 -> 936;
948 -> 947;
949 -> 937;
949 -> 947;
950 -> 938;
950 -> 947;
951 -> 939;
951 -> 947;
952 -> 940;
952 -> 947;
953 -> 941;
953 -> 947;
954 -> 942;
954 -> 947;
955 -> 943;
955 -> 947;
956 -> 944;
956 -> 947;
957 -> 945;
957 -> 947;
958 -> 946;
958 -> 947;
959 -> 942;
959 -> 947;
960 -> 959;
960 -> 947;
961 -> 959;
961 -> 947;
962 -> 959;
962 -> 947;
963 -> 959;
963 -> 947;
964 -> 959;
964 -> 947;
965 -> 959;
965 -> 947;
966 -> 959;
966 -> 947;
967 -> 959;
967 -> 947;
968 -> 959;
968 -> 947;
969 -> 959;
969 -> 947;
970 -> 959;
970 -> 947;
971 -> 959;
971 -> 947;
972 -> 959;
972 -> 947;
973 -> 959;
973 -> 947;
974 -> 959;
974 -> 947;
975 -> 951;
975 -> 959;
975 -> 947;
976 -> 954;
976 -> 959;
976 -> 947;
977 -> 942;
977 -> 1;
978 -> 737;
978 -> 204;
978 -> 1;
979 -> 857;
979 -> 204;
979 -> 1;
980 -> 977;
980 -> 204;
980 -> 1;
981 -> 1;
982 -> 613;
982 -> 981;
983 -> 204;
983 -> 981;
984 -> 981;
986 -> 0;
987 -> 0;
988 -> 0;
991 -> 985;
991 -> 990;
992 -> 986;
992 -> 990;
993 -> 987;
993 -> 990;
994 -> 988;
994 -> 990;
995 -> 989;
995 -> 990;
996 -> 990;
997 -> 996;
997 -> 990;
998 -> 996;
998 -> 990;
999 -> 996;
999 -> 990;
1000 -> 990;
1001 -> 992;
1001 -> 1000;
1001 -> 990;
1002 -> 993;
1002 -> 0;
1002 -> 990;
1003 -> 994;
1003 -> 0;
1003 -> 990;
1004 -> 991;
1004 -> 996;
1004 -> 990;
1005 -> 992;
1005 -> 996;
1005 -> 990;
1006 -> 993;
1006 -> 996;
1006 -> 990;
1007 -> 995;
1007 -> 996;
1007 -> 990;
1008 -> 994;
1008 -> 996;
1008 -> 990;
1009 -> 990;
1010 -> 984;
1010 -> 982;
1010 -> 613;
1010 -> 981;
1011 -> 1010;
1011 -> 984;
1012 -> 1011;
1012 -> 1010;
1012 -> 984;
1013 -> 984;
1014 -> 1012;
1014 -> 1010;
1014 -> 1013;
1014 -> 984;
1015 -> 1011;
1015 -> 1010;
1015 -> 1013;
1015 -> 984;
1016 -> 1009;
1016 -> 1014;
1017 -> 1010;
1017 -> 1016;
1017 -> 1004;
1017 -> 1007;
1017 -> 1005;
1017 -> 1006;
1017 -> 1008;
1017 -> 0;
1017 -> 981;
1018 -> 1010;
1018 -> 984;
1019 -> 1010;
1019 -> 984;
1020 -> 984;
1021 -> 1018;
1021 -> 1017;
1021 -> 1020;
1022 -> 1019;
1022 -> 1021;
1022 -> 1020;
1023 -> 1022;
1023 -> 1020;
1024 -> 0;
1024 -> 1023;
1025 -> 1022;
1025 -> 1020;
1026 -> 1018;
1026 -> 1020;
1027 -> 1019;
1027 -> 1024;
1027 -> 1025;
1027 -> 1026;
1027 -> 1020;
1028 -> 0;
1028 -> 1027;
1029 -> 1028;
1030 -> 1019;
1030 -> 1029;
1031 -> 1030;
1031 -> 1009;
1031 -> 1029;
1032 -> 1031;
1033 -> 1028;
1034 -> 0;
1034 -> 1028;
1035 -> 1034;
1036 -> 1010;
1036 -> 984;
1037 -> 1010;
1037 -> 984;
1038 -> 1036;
1038 -> 1037;
1038 -> 984;
1039 -> 1010;
1039 -> 1038;
1039 -> 1034;
1039 -> 981;
1041 -> 1040;
1043 -> 1042;
1045 -> 1044;
1048 -> 1047;
1049 -> 0;
1050 -> 0;
1051 -> 0;
1052 -> 1051;
1054 -> 1049;
1054 -> 1050;
1054 -> 1052;
1054 -> 1053;
1055 -> 1054;
1057 -> 1056;
1059 -> 1058;
1061 -> 1060;
1063 -> 1062;
1064 -> 1010;
1064 -> 984;
1065 -> 1010;
1065 -> 984;
1066 -> 1010;
1066 -> 984;
1067 -> 1010;
1067 -> 984;
1068 -> 1010;
1068 -> 984;
1069 -> 984;
1070 -> 1067;
1070 -> 1069;
1070 -> 984;
1071 -> 1068;
1071 -> 1069;
1071 -> 984;
1072 -> 1070;
1072 -> 1071;
1072 -> 984;
1073 -> 1065;
1073 -> 984;
1074 -> 1064;
1074 -> 984;
1075 -> 1065;
1075 -> 984;
1076 -> 1066;
1076 -> 984;
1077 -> 1067;
1077 -> 984;
1078 -> 1068;
1078 -> 984;
1079 -> 1073;
1079 -> 984;
1080 -> 984;
1081 -> 1074;
1081 -> 1080;
1082 -> 1075;
1082 -> 1080;
1083 -> 1076;
1083 -> 1080;
1084 -> 1077;
1084 -> 1080;
1085 -> 1078;
1085 -> 1080;
1086 -> 1079;
1086 -> 1080;
1087 -> 1080;
1088 -> 1085;
1088 -> 1087;
1088 -> 1080;
1089 -> 1084;
1089 -> 1087;
1089 -> 1080;
1090 -> 1088;
1090 -> 1089;
1090 -> 1080;
1091 -> 1080;
1092 -> 1081;
1092 -> 1080;
1093 -> 1082;
1093 -> 1080;
1094 -> 1091;
1094 -> 1080;
1095 -> 1086;
1095 -> 1080;
1096 -> 1080;
1097 -> 1092;
1097 -> 1096;
1098 -> 1093;
1098 -> 1096;
1099 -> 1094;
1099 -> 1096;
1100 -> 1095;
1100 -> 1096;
1101 -> 1098;
1101 -> 1096;
1102 -> 1101;
1102 -> 1097;
1102 -> 1039;
1102 -> 1096;
1103 -> 1096;
1104 -> 1102;
1104 -> 1103;
1105 -> 1102;
1105 -> 1103;
1106 -> 1104;
1106 -> 1103;
1107 -> 1104;
1107 -> 1102;
1107 -> 1103;
1108 -> 1103;
1109 -> 1104;
1109 -> 1102;
1109 -> 1103;
1110 -> 1104;
1110 -> 1102;
1110 -> 1103;
1111 -> 1110;
1111 -> 1103;
1112 -> 1103;
1113 -> 1108;
1113 -> 1112;
1113 -> 1096;
1114 -> 1108;
1114 -> 1103;
1115 -> 1108;
1115 -> 1103;
1116 -> 1114;
1116 -> 1103;
1117 -> 1114;
1117 -> 1103;
1118 -> 1114;
1118 -> 1103;
1119 -> 1114;
1119 -> 1103;
1120 -> 1119;
1120 -> 1103;
1121 -> 1119;
1121 -> 1120;
1122 -> 1097;
1122 -> 1101;
1122 -> 1102;
1122 -> 1112;
1122 -> 1096;
1123 -> 1096;
1124 -> 1122;
1124 -> 1123;
1124 -> 1096;
1125 -> 1122;
1125 -> 1124;
1126 -> 1124;
1127 -> 1125;
1127 -> 1126;
1128 -> 1125;
1128 -> 1126;
1129 -> 1127;
1129 -> 1126;
1130 -> 1127;
1130 -> 1125;
1130 -> 1126;
1131 -> 1126;
1132 -> 1127;
1132 -> 1125;
1132 -> 1126;
1133 -> 1127;
1133 -> 1125;
1133 -> 1126;
1134 -> 1133;
1134 -> 1126;
1135 -> 1131;
1135 -> 1126;
1136 -> 1131;
1136 -> 1126;
1137 -> 1135;
1137 -> 1126;
1138 -> 1135;
1138 -> 1126;
1139 -> 1135;
1139 -> 1126;
1140 -> 1135;
1140 -> 1126;
1141 -> 1140;
1141 -> 1126;
1142 -> 1124;
1143 -> 1126;
1143 -> 1142;
1143 -> 1124;
1144 -> 1122;
1144 -> 1096;
1145 -> 1080;
1146 -> 1126;
1146 -> 1145;
1146 -> 1080;
1147 -> 1144;
1147 -> 1080;
1148 -> 1126;
1148 -> 1103;
1149 -> 1126;
1149 -> 1103;
1150 -> 1148;
1150 -> 1103;
1151 -> 1148;
1151 -> 1126;
1151 -> 1103;
1152 -> 1148;
1152 -> 1126;
1152 -> 1103;
1153 -> 1148;
1153 -> 1126;
1153 -> 1103;
1154 -> 1153;
1154 -> 1103;
1155 -> 1131;
1156 -> 1131;
1157 -> 1155;
1157 -> 1131;
1158 -> 1155;
1158 -> 1131;
1159 -> 1155;
1159 -> 1131;
1160 -> 1155;
1160 -> 1131;
1161 -> 1160;
1161 -> 1131;
1162 -> 1126;
1163 -> 1131;
1163 -> 1162;
1163 -> 1126;
1164 -> 1126;
1164 -> 1096;
1165 -> 1131;
1165 -> 1145;
1165 -> 1080;
1166 -> 1164;
1166 -> 1080;
1167 -> 1131;
1168 -> 1131;
1168 -> 1096;
1169 -> 1168;
1169 -> 1080;
1170 -> 1010;
1170 -> 984;
1171 -> 1010;
1171 -> 984;
1172 -> 1010;
1172 -> 984;
1173 -> 1010;
1173 -> 984;
1174 -> 1173;
1174 -> 984;
1175 -> 1173;
1175 -> 984;
1176 -> 1173;
1176 -> 984;
1177 -> 1173;
1177 -> 984;
1178 -> 1173;
1178 -> 984;
1179 -> 1173;
1179 -> 984;
1180 -> 1170;
1180 -> 1173;
1180 -> 984;
1181 -> 1171;
1181 -> 1173;
1181 -> 984;
1182 -> 1172;
1182 -> 1173;
1182 -> 984;
1183 -> 1173;
1183 -> 984;
1184 -> 984;
1185 -> 1183;
1185 -> 1184;
1185 -> 1174;
1185 -> 1180;
1185 -> 1181;
1185 -> 1177;
1185 -> 1182;
1185 -> 1179;
1185 -> 1131;
1185 -> 984;
1186 -> 1185;
1186 -> 1173;
1186 -> 984;
1187 -> 984;
1188 -> 1187;
1188 -> 1173;
1188 -> 984;
1189 -> 1170;
1189 -> 984;
1190 -> 984;
1191 -> 984;
1192 -> 1189;
1192 -> 1191;
1193 -> 1190;
1193 -> 1191;
1194 -> 1192;
1194 -> 1191;
1195 -> 1191;
1196 -> 1194;
1196 -> 1195;
1197 -> 1193;
1197 -> 1195;
1198 -> 1197;
1198 -> 1195;
1199 -> 1197;
1199 -> 1195;
1200 -> 1197;
1200 -> 1195;
1201 -> 1197;
1201 -> 1195;
1202 -> 1197;
1202 -> 1195;
1203 -> 1195;
1204 -> 1196;
1204 -> 1203;
1204 -> 1195;
1205 -> 1197;
1205 -> 1195;
1206 -> 1205;
1206 -> 1198;
1206 -> 1199;
1206 -> 1200;
1206 -> 1201;
1206 -> 1202;
1206 -> 1195;
1207 -> 1196;
1207 -> 1185;
1207 -> 1186;
1207 -> 1188;
1207 -> 1197;
1207 -> 1195;
1208 -> 1196;
1208 -> 1197;
1208 -> 1195;
1209 -> 1190;
1209 -> 1173;
1209 -> 984;
1210 -> 1010;
1210 -> 1185;
1210 -> 1186;
1210 -> 1188;
1210 -> 1209;
1210 -> 1187;
1210 -> 1206;
1210 -> 1207;
1210 -> 1208;
1210 -> 981;
1211 -> 1010;
1211 -> 984;
1212 -> 1010;
1212 -> 984;
1213 -> 1010;
1213 -> 984;
1214 -> 1211;
1214 -> 1210;
1214 -> 984;
1215 -> 1213;
1215 -> 1214;
1216 -> 1214;
1217 -> 1215;
1217 -> 1216;
1218 -> 1215;
1218 -> 1216;
1219 -> 1216;
1220 -> 1219;
1220 -> 1216;
1221 -> 1219;
1221 -> 1216;
1222 -> 1219;
1222 -> 1216;
1223 -> 1219;
1223 -> 1216;
1224 -> 1217;
1224 -> 1219;
1224 -> 1216;
1225 -> 1215;
1225 -> 1219;
1225 -> 1220;
1225 -> 1221;
1225 -> 1222;
1225 -> 1223;
1225 -> 1224;
1225 -> 1214;
1226 -> 1214;
1227 -> 1214;
1228 -> 1226;
1228 -> 1227;
1229 -> 1226;
1229 -> 1227;
1230 -> 1226;
1230 -> 1227;
1231 -> 1225;
1231 -> 1227;
1232 -> 1227;
1233 -> 1229;
1233 -> 1232;
1233 -> 1227;
1234 -> 1230;
1234 -> 1232;
1234 -> 1227;
1235 -> 1233;
1235 -> 1234;
1235 -> 1227;
1236 -> 1228;
1236 -> 1231;
1236 -> 1227;
1237 -> 1229;
1237 -> 1231;
1237 -> 1227;
1238 -> 1230;
1238 -> 1231;
1238 -> 1227;
1239 -> 1211;
1239 -> 1214;
1240 -> 1212;
1240 -> 1214;
1241 -> 1214;
1242 -> 1213;
1242 -> 1241;
1243 -> 1242;
1243 -> 1225;
1243 -> 1236;
1243 -> 1237;
1243 -> 1238;
1243 -> 0;
1243 -> 1241;
1244 -> 1243;
1244 -> 1214;
1245 -> 1214;
1246 -> 1239;
1246 -> 1245;
1247 -> 1240;
1247 -> 1245;
1248 -> 1244;
1248 -> 1245;
1249 -> 1225;
1249 -> 1245;
1250 -> 1245;
1251 -> 1249;
1251 -> 1250;
1252 -> 1251;
1252 -> 1225;
1252 -> 1236;
1252 -> 1237;
1252 -> 1238;
1252 -> 1250;
1253 -> 1252;
1253 -> 1245;
1254 -> 1245;
1255 -> 1246;
1255 -> 1253;
1255 -> 1245;
1256 -> 1247;
1256 -> 1245;
1257 -> 1248;
1257 -> 1256;
1258 -> 0;
1258 -> 1257;
1259 -> 1246;
1259 -> 1245;
1260 -> 1258;
1260 -> 1245;
1261 -> 1245;
1262 -> 1259;
1262 -> 1261;
1263 -> 1260;
1263 -> 1261;
1264 -> 1263;
1264 -> 1261;
1265 -> 1261;
1266 -> 1262;
1266 -> 1261;
1267 -> 1263;
1267 -> 1261;
1268 -> 1261;
1269 -> 1261;
1270 -> 1266;
1270 -> 1269;
1271 -> 1267;
1271 -> 1269;
1272 -> 1268;
1272 -> 1269;
1273 -> 1270;
1273 -> 1272;
1273 -> 1269;
1274 -> 1271;
1274 -> 1272;
1274 -> 1269;
1275 -> 1268;
1275 -> 1245;
1276 -> 1245;
1277 -> 1245;
1278 -> 1249;
1278 -> 1277;
1279 -> 1278;
1279 -> 1225;
1279 -> 1236;
1279 -> 1237;
1279 -> 1238;
1279 -> 1277;
1280 -> 1279;
1280 -> 1245;
1281 -> 1275;
1281 -> 1245;
1282 -> 1276;
1282 -> 1245;
1283 -> 1281;
1283 -> 1282;
1283 -> 1280;
1283 -> 1273;
1283 -> 1274;
1283 -> 1225;
1283 -> 1236;
1283 -> 1237;
1283 -> 1238;
1283 -> 1245;
1284 -> 1245;
1285 -> 1283;
1285 -> 1284;
1286 -> 1285;
1286 -> 1283;
1286 -> 1284;
1287 -> 1286;
1288 -> 1249;
1288 -> 1287;
1289 -> 1288;
1289 -> 1286;
1289 -> 1287;
1290 -> 1289;
1290 -> 1286;
1291 -> 1248;
1291 -> 1286;
1292 -> 1291;
1293 -> 1249;
1293 -> 1292;
1294 -> 1293;
1294 -> 1286;
1294 -> 1292;
1295 -> 1294;
1295 -> 1291;
1296 -> 1290;
1296 -> 1291;
1297 -> 1246;
1297 -> 1291;
1298 -> 1247;
1298 -> 1291;
1299 -> 1291;
1300 -> 1291;
1301 -> 1295;
1301 -> 1300;
1302 -> 1296;
1302 -> 1300;
1303 -> 1297;
1303 -> 1300;
1304 -> 1298;
1304 -> 1300;
1305 -> 1299;
1305 -> 1300;
1306 -> 1302;
1306 -> 1300;
1307 -> 1300;
1308 -> 1306;
1308 -> 1307;
1309 -> 1305;
1309 -> 1307;
1310 -> 1307;
1311 -> 1307;
1312 -> 1308;
1312 -> 1311;
1312 -> 1307;
1313 -> 1308;
1313 -> 1309;
1313 -> 1307;
1314 -> 1308;
1314 -> 1286;
1314 -> 1309;
1314 -> 1307;
1315 -> 1308;
1315 -> 1286;
1315 -> 1309;
1315 -> 1307;
1316 -> 1310;
1316 -> 1309;
1316 -> 1307;
1317 -> 1305;
1317 -> 1300;
1318 -> 1305;
1318 -> 1300;
1319 -> 1305;
1319 -> 1300;
1320 -> 1305;
1320 -> 1300;
1321 -> 1305;
1321 -> 1300;
1322 -> 1300;
1323 -> 1301;
1323 -> 1322;
1323 -> 1300;
1324 -> 1300;
1325 -> 1303;
1325 -> 1324;
1325 -> 1300;
1326 -> 1301;
1326 -> 1305;
1326 -> 1300;
1327 -> 1303;
1327 -> 1305;
1327 -> 1304;
1327 -> 1300;
1328 -> 1327;
1328 -> 1305;
1328 -> 1300;
1329 -> 1304;
1329 -> 1300;
1330 -> 1303;
1330 -> 1286;
1330 -> 1329;
1331 -> 1303;
1331 -> 1330;
1332 -> 1331;
1332 -> 1330;
1332 -> 1305;
1333 -> 1291;
1334 -> 1249;
1334 -> 1333;
1335 -> 1334;
1335 -> 1330;
1335 -> 1333;
1336 -> 1335;
1336 -> 1291;
1337 -> 1246;
1337 -> 1291;
1338 -> 1291;
1339 -> 1286;
1340 -> 1339;
1340 -> 1336;
1341 -> 1340;
1341 -> 1286;
1342 -> 1275;
1342 -> 1286;
1343 -> 1299;
1343 -> 1286;
1344 -> 1342;
1344 -> 1343;
1344 -> 1341;
1344 -> 1273;
1344 -> 1274;
1344 -> 1315;
1344 -> 1314;
1344 -> 1313;
1344 -> 1316;
1344 -> 1309;
1344 -> 1326;
1344 -> 1328;
1344 -> 1319;
1344 -> 1320;
1344 -> 1321;
1344 -> 1332;
1344 -> 1336;
1344 -> 1327;
1344 -> 1330;
1344 -> 1286;
1345 -> 1286;
1346 -> 1299;
1346 -> 1245;
1347 -> 1225;
1347 -> 1214;
1348 -> 1213;
1348 -> 1344;
1348 -> 1347;
1348 -> 1214;
1349 -> 1346;
1349 -> 1214;
1350 -> 1010;
1350 -> 1349;
1350 -> 1348;
1350 -> 981;
1351 -> 1010;
1351 -> 984;
1352 -> 1010;
1352 -> 984;
1353 -> 984;
1354 -> 1352;
1354 -> 1350;
1354 -> 1353;
1354 -> 984;
1355 -> 984;
1356 -> 1352;
1356 -> 1350;
1356 -> 1355;
1356 -> 984;
1357 -> 1352;
1357 -> 1350;
1357 -> 1356;
1358 -> 1351;
1358 -> 1356;
1359 -> 1356;
1360 -> 1358;
1360 -> 1359;
1361 -> 1358;
1361 -> 1359;
1362 -> 1358;
1362 -> 1359;
1363 -> 1358;
1363 -> 1359;
1364 -> 1359;
1365 -> 1364;
1365 -> 1359;
1366 -> 1359;
1367 -> 1366;
1367 -> 1359;
1368 -> 1360;
1368 -> 1358;
1368 -> 1359;
1369 -> 1360;
1369 -> 1368;
1370 -> 1363;
1370 -> 1368;
1371 -> 1369;
1371 -> 1368;
1371 -> 1370;
1372 -> 1369;
1372 -> 1368;
1372 -> 1371;
1373 -> 1369;
1373 -> 1368;
1374 -> 1359;
1375 -> 1372;
1375 -> 1368;
1375 -> 1374;
1375 -> 1359;
1376 -> 1359;
1377 -> 1361;
1377 -> 1368;
1377 -> 1359;
1378 -> 1373;
1378 -> 1359;
1379 -> 1361;
1379 -> 1359;
1380 -> 1376;
1380 -> 1359;
1381 -> 1359;
1382 -> 1378;
1382 -> 1381;
1383 -> 1379;
1383 -> 1381;
1384 -> 1380;
1384 -> 1381;
1385 -> 1383;
1385 -> 1368;
1385 -> 1381;
1386 -> 1381;
1387 -> 1382;
1387 -> 1381;
1388 -> 1387;
1388 -> 1368;
1388 -> 1371;
1388 -> 1381;
1389 -> 1386;
1389 -> 1381;
1390 -> 1389;
1390 -> 1359;
1391 -> 1359;
1392 -> 1359;
1393 -> 1359;
1394 -> 1372;
1394 -> 1368;
1394 -> 1393;
1394 -> 1359;
1395 -> 1394;
1396 -> 1360;
1396 -> 1368;
1396 -> 1371;
1396 -> 0;
1396 -> 1394;
1397 -> 1396;
1398 -> 1390;
1398 -> 1389;
1398 -> 1397;
1398 -> 1396;
1399 -> 1398;
1399 -> 1396;
1400 -> 1396;
1401 -> 1361;
1401 -> 1400;
1402 -> 1401;
1402 -> 1368;
1402 -> 1400;
1403 -> 1402;
1403 -> 1396;
1404 -> 1361;
1404 -> 1368;
1404 -> 1396;
1405 -> 1399;
1405 -> 1396;
1406 -> 1396;
1407 -> 1396;
1408 -> 1403;
1408 -> 1407;
1409 -> 1404;
1409 -> 1407;
1410 -> 1405;
1410 -> 1407;
1411 -> 1406;
1411 -> 1407;
1412 -> 1409;
1412 -> 1407;
1413 -> 1407;
1414 -> 1412;
1414 -> 1413;
1415 -> 1413;
1416 -> 1414;
1416 -> 1415;
1416 -> 1413;
1417 -> 1411;
1417 -> 1407;
1418 -> 1411;
1418 -> 1407;
1419 -> 1407;
1420 -> 1408;
1420 -> 1419;
1420 -> 1407;
1421 -> 1408;
1421 -> 1411;
1421 -> 1407;
1422 -> 1410;
1422 -> 1407;
1423 -> 1422;
1423 -> 1411;
1423 -> 1407;
1424 -> 1394;
1425 -> 1372;
1425 -> 1394;
1426 -> 1425;
1427 -> 1377;
1427 -> 1426;
1427 -> 1368;
1427 -> 1371;
1427 -> 1425;
1428 -> 1425;
1429 -> 1425;
1429 -> 1427;
1429 -> 1428;
1430 -> 1425;
1430 -> 1427;
1430 -> 1429;
1431 -> 1425;
1431 -> 1427;
1431 -> 1429;
1432 -> 1430;
1432 -> 1429;
1433 -> 1429;
1434 -> 1425;
1434 -> 1432;
1434 -> 1433;
1434 -> 1429;
1435 -> 1430;
1435 -> 1427;
1435 -> 1429;
1436 -> 1377;
1436 -> 1429;
1437 -> 1376;
1437 -> 1429;
1438 -> 1431;
1438 -> 1429;
1439 -> 1435;
1439 -> 1436;
1439 -> 1437;
1439 -> 1438;
1439 -> 1432;
1439 -> 1376;
1439 -> 1429;
1440 -> 1430;
1440 -> 1427;
1440 -> 1429;
1441 -> 1429;
1442 -> 1392;
1442 -> 1441;
1442 -> 1429;
1443 -> 1390;
1443 -> 1442;
1444 -> 1442;
1445 -> 1444;
1446 -> 1440;
1446 -> 1442;
1447 -> 1406;
1447 -> 1442;
1448 -> 1425;
1448 -> 1439;
1448 -> 1442;
1449 -> 1447;
1449 -> 1448;
1449 -> 1414;
1449 -> 1411;
1449 -> 1421;
1449 -> 1418;
1449 -> 1423;
1449 -> 1439;
1449 -> 1442;
1450 -> 1425;
1450 -> 1442;
1451 -> 1442;
1452 -> 1442;
1453 -> 1449;
1453 -> 1452;
1454 -> 1450;
1454 -> 1452;
1455 -> 1451;
1455 -> 1452;
1456 -> 1453;
1456 -> 1455;
1456 -> 1452;
1457 -> 1454;
1457 -> 1455;
1457 -> 1452;
1458 -> 1445;
1458 -> 1446;
1458 -> 1451;
1458 -> 1456;
1458 -> 1457;
1458 -> 1449;
1458 -> 1442;
1459 -> 1424;
1459 -> 1394;
1460 -> 1376;
1460 -> 1458;
1460 -> 1359;
1461 -> 1460;
1462 -> 1377;
1462 -> 1359;
1463 -> 1445;
1463 -> 1359;
1464 -> 1463;
1464 -> 1458;
1464 -> 1359;
1465 -> 1391;
1465 -> 1359;
1466 -> 1390;
1466 -> 1359;
1467 -> 1461;
1467 -> 1359;
1468 -> 1359;
1469 -> 1359;
1470 -> 1462;
1470 -> 1469;
1471 -> 1464;
1471 -> 1469;
1472 -> 1465;
1472 -> 1469;
1473 -> 1466;
1473 -> 1469;
1474 -> 1467;
1474 -> 1469;
1475 -> 1468;
1475 -> 1469;
1476 -> 1475;
1476 -> 1469;
1477 -> 1475;
1477 -> 1469;
1478 -> 1475;
1478 -> 1469;
1479 -> 1469;
1480 -> 1471;
1480 -> 1479;
1480 -> 1469;
1481 -> 1472;
1481 -> 1465;
1481 -> 1469;
1482 -> 1473;
1482 -> 1389;
1482 -> 1469;
1483 -> 1358;
1483 -> 1468;
1483 -> 1464;
1483 -> 1470;
1483 -> 1474;
1483 -> 1471;
1483 -> 1472;
1483 -> 1473;
1483 -> 1465;
1483 -> 1391;
1483 -> 1389;
1483 -> 1386;
1483 -> 1356;
1484 -> 1352;
1484 -> 1483;
1484 -> 984;
1485 -> 1484;
1486 -> 1019;
1486 -> 1485;
1487 -> 1486;
1487 -> 1399;
1487 -> 1485;
1488 -> 1486;
1488 -> 1484;
1488 -> 1485;
1489 -> 1485;
1490 -> 1489;
1491 -> 1489;
1492 -> 1491;
1492 -> 1489;
1493 -> 1490;
1493 -> 1489;
1494 -> 1489;
1495 -> 1492;
1495 -> 1494;
1496 -> 1493;
1496 -> 1494;
1497 -> 1495;
1497 -> 1496;
1497 -> 1494;
1498 -> 1497;
1499 -> 1497;
1499 -> 1498;
1500 -> 1497;
1500 -> 1498;
1501 -> 1497;
1501 -> 1498;
1502 -> 1498;
1503 -> 1499;
1503 -> 1502;
1503 -> 1498;
1504 -> 1500;
1504 -> 1498;
1505 -> 0;
1505 -> 1498;
1506 -> 1498;
1507 -> 1504;
1507 -> 1506;
1508 -> 1505;
1508 -> 1506;
1509 -> 1500;
1509 -> 1498;
1510 -> 0;
1510 -> 1498;
1511 -> 1498;
1512 -> 1509;
1512 -> 1511;
1513 -> 1510;
1513 -> 1511;
1514 -> 1499;
1514 -> 1501;
1514 -> 1498;
1515 -> 1500;
1515 -> 1501;
1515 -> 1498;
1516 -> 1499;
1516 -> 1489;
1516 -> 1501;
1516 -> 1498;
1517 -> 1489;
1517 -> 1497;
1517 -> 1516;
1517 -> 1515;
1517 -> 1514;
1517 -> 1501;
1517 -> 1485;
1518 -> 1489;
1519 -> 1489;
1520 -> 1489;
1521 -> 1489;
1522 -> 1518;
1522 -> 1489;
1523 -> 1519;
1523 -> 1489;
1524 -> 1520;
1524 -> 1489;
1525 -> 1489;
1526 -> 1520;
1526 -> 1525;
1526 -> 1489;
1527 -> 1489;
1528 -> 1522;
1528 -> 1527;
1529 -> 1523;
1529 -> 1527;
1530 -> 1524;
1530 -> 1527;
1531 -> 1526;
1531 -> 1527;
1532 -> 1521;
1532 -> 1527;
1533 -> 1528;
1533 -> 1527;
1534 -> 1529;
1534 -> 1527;
1535 -> 1530;
1535 -> 1527;
1536 -> 1531;
1536 -> 1527;
1537 -> 1527;
1538 -> 1533;
1538 -> 1537;
1539 -> 1534;
1539 -> 1537;
1540 -> 1535;
1540 -> 1537;
1541 -> 1536;
1541 -> 1537;
1542 -> 1532;
1542 -> 1537;
1543 -> 1538;
1543 -> 1517;
1543 -> 1537;
1544 -> 1538;
1544 -> 1543;
1545 -> 1539;
1545 -> 1543;
1546 -> 1540;
1546 -> 1543;
1547 -> 1541;
1547 -> 1543;
1548 -> 1543;
1549 -> 1543;
1550 -> 1544;
1550 -> 1549;
1551 -> 1545;
1551 -> 1549;
1552 -> 1546;
1552 -> 1549;
1553 -> 1547;
1553 -> 1549;
1554 -> 1548;
1554 -> 1549;
1555 -> 1542;
1555 -> 1549;
1556 -> 1550;
1556 -> 1543;
1556 -> 1549;
1557 -> 1556;
1557 -> 1549;
1558 -> 1550;
1558 -> 1543;
1558 -> 1549;
1559 -> 1554;
1559 -> 1549;
1560 -> 1556;
1560 -> 1549;
1561 -> 1549;
1562 -> 1551;
1562 -> 1549;
1563 -> 1549;
1564 -> 1558;
1564 -> 1563;
1565 -> 1559;
1565 -> 1563;
1566 -> 1560;
1566 -> 1563;
1567 -> 1561;
1567 -> 1563;
1568 -> 1562;
1568 -> 1563;
1569 -> 1555;
1569 -> 1563;
1570 -> 1563;
1571 -> 1565;
1571 -> 1570;
1571 -> 1563;
1572 -> 1563;
1573 -> 1572;
1573 -> 1549;
1574 -> 1549;
1575 -> 1573;
1575 -> 1574;
1575 -> 1549;
1577 -> 1576;
1578 -> 1577;
1578 -> 1576;
1579 -> 1576;
1580 -> 1578;
1580 -> 1576;
1581 -> 1580;
1582 -> 1549;
1583 -> 1581;
1583 -> 1582;
1584 -> 1581;
1584 -> 1578;
1584 -> 1582;
1585 -> 1582;
1586 -> 1584;
1586 -> 1585;
1587 -> 1583;
1587 -> 1585;
1588 -> 1587;
1588 -> 1585;
1589 -> 1587;
1589 -> 1585;
1590 -> 1587;
1590 -> 1585;
1591 -> 1587;
1591 -> 1585;
1592 -> 1586;
1592 -> 1587;
1592 -> 1585;
1593 -> 0;
1593 -> 1587;
1593 -> 1585;
1594 -> 1585;
1595 -> 1594;
1595 -> 1587;
1595 -> 1585;
1596 -> 1585;
1597 -> 1596;
1597 -> 1587;
1597 -> 1585;
1598 -> 1584;
1598 -> 1583;
1598 -> 1593;
1598 -> 1595;
1598 -> 1597;
1598 -> 1592;
1598 -> 1594;
1598 -> 1582;
1599 -> 1582;
1600 -> 1598;
1600 -> 1599;
1601 -> 1600;
1601 -> 1598;
1601 -> 0;
1601 -> 1599;
1602 -> 1599;
1603 -> 1600;
1603 -> 1598;
1603 -> 1602;
1603 -> 1599;
1604 -> 1601;
1604 -> 1582;
1605 -> 1598;
1605 -> 1582;
1606 -> 1605;
1606 -> 1549;
1607 -> 1550;
1607 -> 1549;
1608 -> 1550;
1608 -> 1543;
1608 -> 1549;
1609 -> 1549;
1610 -> 1607;
1610 -> 1609;
1611 -> 1608;
1611 -> 1609;
1612 -> 1610;
1612 -> 1609;
1613 -> 0;
1613 -> 1612;
1614 -> 1549;
1615 -> 1606;
1615 -> 1549;
1616 -> 1554;
1616 -> 1549;
1617 -> 1556;
1617 -> 1549;
1618 -> 1549;
1619 -> 1552;
1619 -> 1549;
1620 -> 1613;
1620 -> 1549;
1621 -> 1614;
1621 -> 1549;
1622 -> 1549;
1623 -> 1615;
1623 -> 1622;
1624 -> 1616;
1624 -> 1622;
1625 -> 1617;
1625 -> 1622;
1626 -> 1618;
1626 -> 1622;
1627 -> 1619;
1627 -> 1622;
1628 -> 1620;
1628 -> 1622;
1629 -> 1618;
1629 -> 1622;
1630 -> 1621;
1630 -> 1622;
1631 -> 1555;
1631 -> 1622;
1632 -> 1628;
1632 -> 1622;
1633 -> 1622;
1634 -> 1632;
1634 -> 1633;
1635 -> 1634;
1635 -> 0;
1635 -> 1633;
1636 -> 1623;
1636 -> 1635;
1637 -> 1624;
1637 -> 1635;
1638 -> 1625;
1638 -> 1635;
1639 -> 1626;
1639 -> 1635;
1640 -> 1627;
1640 -> 1635;
1641 -> 1628;
1641 -> 1635;
1642 -> 1629;
1642 -> 1635;
1643 -> 1630;
1643 -> 1635;
1644 -> 1635;
1645 -> 1636;
1645 -> 1644;
1646 -> 1637;
1646 -> 1644;
1647 -> 1638;
1647 -> 1644;
1648 -> 1639;
1648 -> 1644;
1649 -> 1640;
1649 -> 1644;
1650 -> 1641;
1650 -> 1644;
1651 -> 1642;
1651 -> 1644;
1652 -> 1643;
1652 -> 1644;
1653 -> 1631;
1653 -> 1644;
1654 -> 1644;
1655 -> 1646;
1655 -> 1654;
1655 -> 1644;
1656 -> 1645;
1656 -> 1655;
1657 -> 1647;
1657 -> 1655;
1658 -> 1648;
1658 -> 1655;
1659 -> 1649;
1659 -> 1655;
1660 -> 1650;
1660 -> 1655;
1661 -> 1651;
1661 -> 1655;
1662 -> 1652;
1662 -> 1655;
1663 -> 1655;
1664 -> 1656;
1664 -> 1663;
1665 -> 1657;
1665 -> 1663;
1666 -> 1658;
1666 -> 1663;
1667 -> 1659;
1667 -> 1663;
1668 -> 1660;
1668 -> 1663;
1669 -> 1661;
1669 -> 1663;
1670 -> 1662;
1670 -> 1663;
1671 -> 1653;
1671 -> 1663;
1672 -> 1663;
1673 -> 1664;
1673 -> 1672;
1674 -> 1673;
1674 -> 1598;
1674 -> 0;
1674 -> 1672;
1675 -> 1672;
1676 -> 1673;
1676 -> 1598;
1676 -> 1675;
1676 -> 1672;
1677 -> 1674;
1677 -> 1663;
1678 -> 1668;
1678 -> 1663;
1679 -> 1663;
1680 -> 1678;
1680 -> 1679;
1681 -> 1680;
1681 -> 0;
1681 -> 1679;
1682 -> 1680;
1682 -> 0;
1682 -> 1679;
1683 -> 1679;
1684 -> 0;
1684 -> 1679;
1685 -> 1680;
1685 -> 1684;
1685 -> 1679;
1686 -> 0;
1686 -> 1679;
1687 -> 1680;
1687 -> 1686;
1687 -> 1679;
1688 -> 1679;
1689 -> 0;
1689 -> 1679;
1690 -> 1680;
1690 -> 1689;
1690 -> 1679;
1691 -> 1690;
1691 -> 1679;
1692 -> 1679;
1693 -> 1691;
1693 -> 1692;
1694 -> 1692;
1695 -> 1693;
1695 -> 1694;
1695 -> 1692;
1696 -> 1663;
1697 -> 1671;
1697 -> 1663;
1698 -> 1663;
1699 -> 1663;
1700 -> 1664;
1700 -> 1699;
1701 -> 1699;
1702 -> 1700;
1702 -> 1701;
1703 -> 1702;
1703 -> 1598;
1703 -> 1701;
1704 -> 1703;
1704 -> 1699;
1705 -> 1704;
1705 -> 1663;
1706 -> 1697;
1706 -> 1705;
1706 -> 1663;
1707 -> 1706;
1708 -> 1696;
1708 -> 1707;
1708 -> 1706;
1709 -> 1664;
1709 -> 1708;
1710 -> 1665;
1710 -> 1708;
1711 -> 1666;
1711 -> 1708;
1712 -> 1667;
1712 -> 1708;
1713 -> 1668;
1713 -> 1708;
1714 -> 1671;
1714 -> 1708;
1715 -> 1669;
1715 -> 1708;
1716 -> 1670;
1716 -> 1708;
1717 -> 1708;
1718 -> 1709;
1718 -> 1717;
1719 -> 1710;
1719 -> 1717;
1720 -> 1711;
1720 -> 1717;
1721 -> 1712;
1721 -> 1717;
1722 -> 1713;
1722 -> 1717;
1723 -> 1714;
1723 -> 1717;
1724 -> 1715;
1724 -> 1717;
1725 -> 1716;
1725 -> 1717;
1726 -> 1697;
1726 -> 1717;
1727 -> 1708;
1728 -> 1708;
1729 -> 1664;
1729 -> 1728;
1730 -> 1729;
1730 -> 1598;
1730 -> 0;
1730 -> 1728;
1731 -> 1728;
1732 -> 1729;
1732 -> 1598;
1732 -> 1731;
1732 -> 1728;
1733 -> 1730;
1733 -> 1708;
1734 -> 1668;
1734 -> 0;
1734 -> 1706;
1735 -> 1706;
1736 -> 1709;
1736 -> 1717;
1737 -> 1710;
1737 -> 1717;
1738 -> 1711;
1738 -> 1717;
1739 -> 1712;
1739 -> 1717;
1740 -> 1713;
1740 -> 1717;
1741 -> 1714;
1741 -> 1717;
1742 -> 1715;
1742 -> 1717;
1743 -> 1725;
1743 -> 1717;
1744 -> 1706;
1744 -> 1717;
1745 -> 1717;
1746 -> 1736;
1746 -> 1745;
1747 -> 1746;
1747 -> 1598;
1747 -> 0;
1747 -> 1745;
1748 -> 1745;
1749 -> 1746;
1749 -> 1598;
1749 -> 1748;
1749 -> 1745;
1750 -> 1747;
1750 -> 1717;
1751 -> 1717;
1752 -> 1744;
1752 -> 1751;
1753 -> 1752;
1753 -> 1612;
1753 -> 0;
1753 -> 1751;
1754 -> 1753;
1754 -> 1717;
1755 -> 1739;
1755 -> 1717;
1756 -> 1717;
1757 -> 1755;
1757 -> 1756;
1758 -> 1744;
1758 -> 1756;
1759 -> 1756;
1760 -> 1758;
1760 -> 1612;
1760 -> 1759;
1760 -> 1756;
1761 -> 1758;
1761 -> 1717;
1762 -> 1740;
1762 -> 0;
1762 -> 1717;
1763 -> 1717;
1764 -> 1744;
1764 -> 1612;
1764 -> 1763;
1764 -> 1717;
1765 -> 1762;
1765 -> 1764;
1765 -> 1717;
1766 -> 1736;
1766 -> 1765;
1767 -> 1744;
1767 -> 1612;
1767 -> 1765;
1768 -> 1737;
1768 -> 1765;
1769 -> 1738;
1769 -> 1765;
1770 -> 1739;
1770 -> 1765;
1771 -> 1740;
1771 -> 1765;
1772 -> 1741;
1772 -> 1765;
1773 -> 1742;
1773 -> 1765;
1774 -> 1743;
1774 -> 1765;
1775 -> 1765;
1776 -> 1766;
1776 -> 1775;
1777 -> 1767;
1777 -> 1775;
1778 -> 1768;
1778 -> 1775;
1779 -> 1769;
1779 -> 1775;
1780 -> 1770;
1780 -> 1775;
1781 -> 1771;
1781 -> 1775;
1782 -> 1772;
1782 -> 1775;
1783 -> 1773;
1783 -> 1775;
1784 -> 1774;
1784 -> 1775;
1785 -> 1744;
1785 -> 1775;
1786 -> 1781;
1786 -> 1775;
1787 -> 1775;
1788 -> 1786;
1788 -> 1787;
1789 -> 1788;
1789 -> 0;
1789 -> 1787;
1790 -> 1788;
1790 -> 0;
1790 -> 1787;
1791 -> 1787;
1792 -> 0;
1792 -> 1787;
1793 -> 1788;
1793 -> 1792;
1793 -> 1787;
1794 -> 0;
1794 -> 1787;
1795 -> 1788;
1795 -> 1794;
1795 -> 1787;
1796 -> 1787;
1797 -> 0;
1797 -> 1787;
1798 -> 1788;
1798 -> 1797;
1798 -> 1787;
1799 -> 1798;
1799 -> 1787;
1800 -> 1787;
1801 -> 1799;
1801 -> 1800;
1802 -> 1800;
1803 -> 1801;
1803 -> 1802;
1803 -> 1800;
1804 -> 1775;
1805 -> 1779;
1805 -> 1804;
1805 -> 1775;
1806 -> 1777;
1806 -> 1612;
1806 -> 1775;
1807 -> 1776;
1807 -> 1806;
1808 -> 1777;
1808 -> 1806;
1809 -> 1778;
1809 -> 1806;
1810 -> 1779;
1810 -> 1806;
1811 -> 1781;
1811 -> 1806;
1812 -> 1782;
1812 -> 1806;
1813 -> 1783;
1813 -> 1806;
1814 -> 1784;
1814 -> 1806;
1815 -> 1806;
1816 -> 1807;
1816 -> 1815;
1817 -> 1808;
1817 -> 1815;
1818 -> 1809;
1818 -> 1815;
1819 -> 1810;
1819 -> 1815;
1820 -> 1811;
1820 -> 1815;
1821 -> 1812;
1821 -> 1815;
1822 -> 1813;
1822 -> 1815;
1823 -> 1814;
1823 -> 1815;
1824 -> 1817;
1824 -> 1815;
1825 -> 1818;
1825 -> 1815;
1826 -> 1820;
1826 -> 1815;
1827 -> 1821;
1827 -> 1815;
1828 -> 1815;
1829 -> 1824;
1829 -> 1828;
1830 -> 1825;
1830 -> 1828;
1831 -> 1826;
1831 -> 1828;
1832 -> 1827;
1832 -> 1828;
1833 -> 1831;
1833 -> 0;
1833 -> 1828;
1834 -> 1828;
1835 -> 1833;
1835 -> 1829;
1835 -> 1828;
1836 -> 1829;
1836 -> 1612;
1836 -> 0;
1836 -> 1835;
1837 -> 1831;
1837 -> 0;
1837 -> 1836;
1838 -> 1836;
1839 -> 1830;
1839 -> 1837;
1840 -> 1839;
1840 -> 1815;
1841 -> 1840;
1842 -> 1819;
1842 -> 1840;
1843 -> 1820;
1843 -> 1840;
1844 -> 1822;
1844 -> 1840;
1845 -> 1823;
1845 -> 1840;
1846 -> 1840;
1847 -> 1841;
1847 -> 1846;
1848 -> 1842;
1848 -> 1846;
1849 -> 1843;
1849 -> 1846;
1850 -> 1841;
1850 -> 1846;
1851 -> 1844;
1851 -> 1846;
1852 -> 1845;
1852 -> 1846;
1853 -> 1841;
1853 -> 1846;
1854 -> 1821;
1854 -> 1846;
1855 -> 1846;
1856 -> 1846;
1857 -> 1847;
1857 -> 1612;
1857 -> 1839;
1857 -> 0;
1857 -> 1846;
1858 -> 1857;
1858 -> 1846;
1859 -> 1858;
1859 -> 1612;
1859 -> 1839;
1859 -> 1846;
1860 -> 1854;
1860 -> 1612;
1860 -> 1859;
1860 -> 1839;
1860 -> 1846;
1861 -> 1858;
1861 -> 1846;
1862 -> 1858;
1862 -> 1860;
1863 -> 1848;
1863 -> 1860;
1864 -> 1851;
1864 -> 1860;
1865 -> 1849;
1865 -> 1860;
1866 -> 1856;
1866 -> 1860;
1867 -> 1860;
1868 -> 1862;
1868 -> 1867;
1869 -> 1863;
1869 -> 1867;
1870 -> 1864;
1870 -> 1867;
1871 -> 1865;
1871 -> 1867;
1872 -> 1866;
1872 -> 1867;
1873 -> 1868;
1873 -> 1860;
1873 -> 1867;
1874 -> 1873;
1875 -> 1869;
1875 -> 1874;
1875 -> 1873;
1876 -> 1871;
1876 -> 0;
1876 -> 1873;
1877 -> 1875;
1877 -> 1876;
1877 -> 1873;
1878 -> 1868;
1878 -> 1877;
1879 -> 1878;
1879 -> 1860;
1879 -> 1877;
1880 -> 1878;
1880 -> 1877;
1881 -> 1878;
1881 -> 1860;
1881 -> 1869;
1881 -> 1877;
1882 -> 1871;
1882 -> 1877;
1883 -> 1877;
1884 -> 1882;
1884 -> 1883;
1885 -> 1881;
1885 -> 1884;
1885 -> 1877;
1886 -> 1867;
1887 -> 1867;
1888 -> 1887;
1888 -> 1860;
1889 -> 1888;
1890 -> 1854;
1890 -> 1889;
1891 -> 1890;
1891 -> 1860;
1891 -> 1889;
1892 -> 0;
1892 -> 1889;
1893 -> 1889;
1894 -> 1891;
1894 -> 1893;
1895 -> 1892;
1895 -> 1893;
1896 -> 1894;
1896 -> 1888;
1897 -> 1849;
1897 -> 0;
1897 -> 1896;
1898 -> 1896;
1899 -> 1849;
1899 -> 0;
1899 -> 1897;
1900 -> 1897;
1901 -> 1899;
1902 -> 1901;
1902 -> 1899;
1903 -> 1902;
1904 -> 1903;
1904 -> 1902;
1905 -> 1858;
1905 -> 1902;
1906 -> 1849;
1906 -> 1902;
1907 -> 1850;
1907 -> 1902;
1908 -> 1902;
1909 -> 1906;
1909 -> 1908;
1910 -> 1907;
1910 -> 1908;
1911 -> 1909;
1911 -> 0;
1911 -> 1908;
1912 -> 1908;
1913 -> 1911;
1913 -> 1908;
1914 -> 1910;
1914 -> 1913;
1915 -> 1855;
1915 -> 1902;
1916 -> 1852;
1916 -> 1902;
1917 -> 1853;
1917 -> 1902;
1918 -> 1902;
1919 -> 1905;
1919 -> 1918;
1920 -> 1914;
1920 -> 1918;
1921 -> 1915;
1921 -> 1918;
1922 -> 1916;
1922 -> 1918;
1923 -> 1917;
1923 -> 1918;
1924 -> 1854;
1924 -> 1918;
1925 -> 1924;
1925 -> 1860;
1925 -> 1918;
1926 -> 0;
1926 -> 1918;
1927 -> 1918;
1928 -> 1925;
1928 -> 1927;
1929 -> 1926;
1929 -> 1927;
1930 -> 1919;
1930 -> 1918;
1931 -> 1920;
1931 -> 1918;
1932 -> 1921;
1932 -> 1918;
1933 -> 1922;
1933 -> 1918;
1934 -> 1923;
1934 -> 1918;
1935 -> 1918;
1936 -> 1930;
1936 -> 1935;
1937 -> 1931;
1937 -> 1935;
1938 -> 1932;
1938 -> 1935;
1939 -> 1933;
1939 -> 1935;
1940 -> 1934;
1940 -> 1935;
1941 -> 1924;
1941 -> 1935;
1942 -> 1936;
1942 -> 1935;
1943 -> 1937;
1943 -> 1935;
1944 -> 1938;
1944 -> 1935;
1945 -> 1939;
1945 -> 1935;
1946 -> 1940;
1946 -> 1935;
1947 -> 1935;
1948 -> 1942;
1948 -> 1947;
1949 -> 1943;
1949 -> 1947;
1950 -> 1944;
1950 -> 1947;
1951 -> 1945;
1951 -> 1947;
1952 -> 1946;
1952 -> 1947;
1953 -> 1941;
1953 -> 1860;
1953 -> 1947;
1954 -> 1953;
1954 -> 1860;
1954 -> 1947;
1955 -> 1947;
1956 -> 1954;
1956 -> 1955;
1956 -> 1947;
1957 -> 1948;
1957 -> 1956;
1958 -> 1949;
1958 -> 1956;
1959 -> 1950;
1959 -> 1956;
1960 -> 1951;
1960 -> 1956;
1961 -> 1952;
1961 -> 1956;
1962 -> 1956;
1963 -> 1957;
1963 -> 1962;
1964 -> 1958;
1964 -> 1962;
1965 -> 1959;
1965 -> 1962;
1966 -> 1960;
1966 -> 1962;
1967 -> 1961;
1967 -> 1962;
1968 -> 1953;
1968 -> 1860;
1968 -> 1962;
1969 -> 1962;
1970 -> 1963;
1970 -> 1962;
1971 -> 1968;
1971 -> 1860;
1971 -> 1962;
1972 -> 1966;
1972 -> 1962;
1973 -> 1962;
1974 -> 1970;
1974 -> 1973;
1975 -> 1971;
1975 -> 1973;
1976 -> 1972;
1976 -> 1973;
1977 -> 1974;
1977 -> 1973;
1978 -> 1975;
1978 -> 1973;
1979 -> 1976;
1979 -> 1973;
1980 -> 1973;
1981 -> 1977;
1981 -> 1980;
1982 -> 1978;
1982 -> 1980;
1983 -> 1979;
1983 -> 1980;
1984 -> 1980;
1985 -> 1981;
1985 -> 1980;
1986 -> 1982;
1986 -> 1980;
1987 -> 1980;
1988 -> 1984;
1988 -> 1980;
1989 -> 1982;
1989 -> 1860;
1989 -> 1980;
1990 -> 1983;
1990 -> 1980;
1991 -> 1980;
1992 -> 1985;
1992 -> 1991;
1993 -> 1986;
1993 -> 1991;
1994 -> 1987;
1994 -> 1991;
1995 -> 1988;
1995 -> 1991;
1996 -> 1989;
1996 -> 1991;
1997 -> 1990;
1997 -> 1991;
1998 -> 1987;
1998 -> 1991;
1999 -> 1991;
2000 -> 1992;
2000 -> 1999;
2000 -> 1991;
2001 -> 1991;
2002 -> 1993;
2002 -> 2001;
2002 -> 1991;
2003 -> 1993;
2003 -> 1860;
2003 -> 1991;
2004 -> 1993;
2004 -> 1991;
2005 -> 1991;
2006 -> 1992;
2006 -> 1860;
2006 -> 1991;
2007 -> 1992;
2007 -> 2006;
2008 -> 1993;
2008 -> 2006;
2009 -> 1997;
2009 -> 2006;
2010 -> 1998;
2010 -> 2006;
2011 -> 2006;
2012 -> 2007;
2012 -> 2011;
2013 -> 2008;
2013 -> 2011;
2014 -> 2009;
2014 -> 2011;
2015 -> 2010;
2015 -> 2011;
2016 -> 2013;
2016 -> 2011;
2017 -> 2011;
2018 -> 2012;
2018 -> 2017;
2018 -> 2011;
2019 -> 2013;
2019 -> 1860;
2019 -> 2011;
2020 -> 2011;
2021 -> 2012;
2021 -> 1860;
2021 -> 2011;
2022 -> 2012;
2022 -> 1860;
2022 -> 2011;
2023 -> 2011;
2024 -> 2022;
2024 -> 2023;
2024 -> 2011;
2025 -> 2024;
2025 -> 2011;
2026 -> 2013;
2026 -> 2025;
2027 -> 2025;
2028 -> 2025;
2028 -> 2027;
2029 -> 2025;
2029 -> 2027;
2030 -> 2026;
2030 -> 2027;
2031 -> 2030;
2031 -> 2027;
2032 -> 2027;
2033 -> 2028;
2033 -> 2032;
2033 -> 2027;
2034 -> 2029;
2034 -> 2027;
2035 -> 2034;
2036 -> 1904;
2036 -> 2035;
2036 -> 1902;
2037 -> 2036;
2038 -> 2037;
2038 -> 2036;
2039 -> 1858;
2039 -> 2036;
2040 -> 1849;
2040 -> 0;
2040 -> 2038;
2041 -> 2038;
2042 -> 1849;
2042 -> 0;
2042 -> 2040;
2043 -> 2040;
2044 -> 1849;
2044 -> 0;
2044 -> 2042;
2045 -> 2042;
2046 -> 1849;
2046 -> 0;
2046 -> 2044;
2047 -> 2044;
2048 -> 1858;
2048 -> 2046;
2049 -> 2046;
2050 -> 2048;
2050 -> 2049;
2051 -> 0;
2051 -> 2049;
2052 -> 2050;
2052 -> 2049;
2053 -> 2049;
2054 -> 2049;
2055 -> 2051;
2055 -> 2054;
2056 -> 2052;
2056 -> 2054;
2057 -> 2053;
2057 -> 2054;
2058 -> 2053;
2058 -> 2054;
2059 -> 2055;
2059 -> 2058;
2059 -> 2054;
2060 -> 2056;
2060 -> 2058;
2060 -> 2054;
2061 -> 2057;
2061 -> 2058;
2061 -> 2054;
2062 -> 2053;
2062 -> 2046;
2063 -> 2062;
2063 -> 1840;
2064 -> 1840;
2065 -> 2063;
2065 -> 2064;
2066 -> 1816;
2066 -> 2064;
2067 -> 2064;
2068 -> 2066;
2068 -> 2067;
2069 -> 2068;
2069 -> 2064;
2070 -> 2069;
2070 -> 2065;
2070 -> 2059;
2070 -> 2064;
2071 -> 2070;
2072 -> 2071;
2072 -> 2070;
2073 -> 2065;
2073 -> 2072;
2074 -> 2072;
2075 -> 2073;
2075 -> 2074;
2076 -> 2066;
2076 -> 2074;
2077 -> 2075;
2077 -> 2059;
2077 -> 2076;
2077 -> 2074;
2078 -> 2076;
2078 -> 1598;
2078 -> 2077;
2078 -> 2074;
2079 -> 2075;
2079 -> 2060;
2079 -> 2074;
2080 -> 2076;
2080 -> 2078;
2080 -> 2079;
2080 -> 2039;
2080 -> 2074;
2081 -> 2075;
2081 -> 2061;
2081 -> 2076;
2081 -> 2074;
2082 -> 2072;
2083 -> 1840;
2084 -> 1840;
2084 -> 2080;
2084 -> 2081;
2084 -> 1815;
2085 -> 1806;
2086 -> 1765;
2087 -> 1765;
2088 -> 1736;
2088 -> 2087;
2089 -> 2088;
2089 -> 2080;
2089 -> 2087;
2090 -> 2089;
2090 -> 1765;
2091 -> 2090;
2092 -> 1738;
2092 -> 2091;
2092 -> 2090;
2093 -> 1737;
2093 -> 2090;
2094 -> 2090;
2095 -> 1741;
2095 -> 2094;
2096 -> 2095;
2096 -> 2080;
2096 -> 2094;
2097 -> 0;
2097 -> 2094;
2098 -> 2094;
2099 -> 2096;
2099 -> 2098;
2100 -> 2097;
2100 -> 2098;
2101 -> 2099;
2101 -> 2090;
2102 -> 2090;
2103 -> 2093;
2103 -> 2102;
2104 -> 2101;
2104 -> 2102;
2105 -> 1761;
2105 -> 2102;
2106 -> 2102;
2107 -> 2106;
2107 -> 2102;
2108 -> 2103;
2108 -> 2102;
2109 -> 2106;
2109 -> 2102;
2110 -> 2105;
2110 -> 2080;
2110 -> 2108;
2110 -> 2109;
2110 -> 2081;
2110 -> 2107;
2110 -> 2102;
2111 -> 2102;
2112 -> 2111;
2112 -> 2090;
2113 -> 2092;
2113 -> 2112;
2113 -> 2090;
2114 -> 2090;
2115 -> 1729;
2115 -> 2110;
2115 -> 0;
2115 -> 1728;
2116 -> 2115;
2116 -> 1708;
2117 -> 1706;
2117 -> 2116;
2118 -> 2117;
2118 -> 1663;
2119 -> 1635;
2120 -> 1551;
2120 -> 1549;
2121 -> 1550;
2121 -> 1549;
2122 -> 2014;
2122 -> 1549;
2123 -> 2120;
2123 -> 2121;
2123 -> 2122;
2123 -> 2110;
2123 -> 1549;
2124 -> 1549;
2125 -> 1549;
2126 -> 1554;
2126 -> 2125;
2126 -> 1549;
2127 -> 1606;
2127 -> 1549;
2128 -> 1549;
2129 -> 2127;
2129 -> 2128;
2130 -> 2128;
2131 -> 2129;
2131 -> 2130;
2132 -> 2130;
2133 -> 2131;
2133 -> 2132;
2134 -> 2133;
2134 -> 2123;
2134 -> 2132;
2135 -> 2134;
2135 -> 2128;
2136 -> 2128;
2137 -> 2129;
2137 -> 2136;
2138 -> 2137;
2138 -> 2123;
2138 -> 2136;
2139 -> 2138;
2139 -> 2128;
2140 -> 2139;
2140 -> 2123;
2141 -> 2140;
2142 -> 2124;
2142 -> 1549;
2143 -> 2142;
2144 -> 1606;
2144 -> 2142;
2145 -> 1556;
2145 -> 2142;
2146 -> 2142;
2147 -> 1550;
2147 -> 2142;
2148 -> 1551;
2148 -> 2142;
2149 -> 1553;
2149 -> 2142;
2150 -> 2143;
2150 -> 2142;
2151 -> 1554;
2151 -> 2142;
2152 -> 1613;
2152 -> 2142;
2153 -> 2142;
2154 -> 2144;
2154 -> 2153;
2155 -> 2145;
2155 -> 2153;
2156 -> 2146;
2156 -> 2153;
2157 -> 2147;
2157 -> 2153;
2158 -> 2148;
2158 -> 2153;
2159 -> 2149;
2159 -> 2153;
2160 -> 2150;
2160 -> 2153;
2161 -> 2151;
2161 -> 2153;
2162 -> 2152;
2162 -> 2153;
2163 -> 1555;
2163 -> 2153;
2164 -> 2154;
2164 -> 2153;
2165 -> 2155;
2165 -> 2153;
2166 -> 2156;
2166 -> 2153;
2167 -> 2157;
2167 -> 2153;
2168 -> 2158;
2168 -> 2153;
2169 -> 2159;
2169 -> 2153;
2170 -> 2160;
2170 -> 2153;
2171 -> 2161;
2171 -> 2153;
2172 -> 2162;
2172 -> 2153;
2173 -> 2153;
2174 -> 2164;
2174 -> 2173;
2175 -> 2165;
2175 -> 2173;
2176 -> 2166;
2176 -> 2173;
2177 -> 2167;
2177 -> 2173;
2178 -> 2168;
2178 -> 2173;
2179 -> 2169;
2179 -> 2173;
2180 -> 2170;
2180 -> 2173;
2181 -> 2171;
2181 -> 2173;
2182 -> 2172;
2182 -> 2173;
2183 -> 2163;
2183 -> 2173;
2184 -> 2173;
2185 -> 2177;
2185 -> 2184;
2185 -> 2173;
2186 -> 2173;
2187 -> 2178;
2187 -> 2186;
2187 -> 2173;
2188 -> 2173;
2189 -> 2174;
2189 -> 2188;
2190 -> 2189;
2190 -> 2123;
2190 -> 2188;
2191 -> 2190;
2191 -> 2173;
2192 -> 2173;
2193 -> 2173;
2194 -> 2174;
2194 -> 2193;
2195 -> 2193;
2196 -> 2194;
2196 -> 2195;
2197 -> 2196;
2197 -> 2123;
2197 -> 2195;
2198 -> 2197;
2198 -> 2173;
2199 -> 2198;
2200 -> 2191;
2200 -> 2123;
2200 -> 2199;
2200 -> 2198;
2201 -> 2200;
2202 -> 2201;
2202 -> 2200;
2203 -> 2200;
2204 -> 2202;
2204 -> 2203;
2204 -> 2200;
2205 -> 2202;
2205 -> 2201;
2205 -> 0;
2205 -> 2200;
2206 -> 2201;
2206 -> 0;
2206 -> 2204;
2207 -> 2206;
2207 -> 2183;
2207 -> 2201;
2207 -> 2204;
2208 -> 2179;
2208 -> 2204;
2209 -> 2201;
2209 -> 2208;
2210 -> 2178;
2210 -> 2208;
2211 -> 2177;
2211 -> 2208;
2212 -> 2208;
2213 -> 2209;
2213 -> 2212;
2214 -> 2210;
2214 -> 2212;
2215 -> 2211;
2215 -> 2212;
2216 -> 2213;
2216 -> 2201;
2216 -> 2212;
2217 -> 2212;
2218 -> 2216;
2218 -> 2217;
2219 -> 2216;
2219 -> 2217;
2220 -> 2218;
2220 -> 2217;
2221 -> 2218;
2221 -> 2216;
2221 -> 2217;
2222 -> 2218;
2222 -> 2216;
2222 -> 2217;
2223 -> 2218;
2223 -> 2216;
2223 -> 2217;
2224 -> 2223;
2224 -> 2217;
2225 -> 2212;
2226 -> 2216;
2226 -> 2225;
2226 -> 2212;
2227 -> 2216;
2227 -> 2212;
2228 -> 2214;
2228 -> 2212;
2229 -> 2215;
2229 -> 2216;
2229 -> 2212;
2230 -> 2227;
2230 -> 2228;
2230 -> 2229;
2230 -> 2216;
2230 -> 2212;
2231 -> 2201;
2231 -> 2200;
2232 -> 2231;
2232 -> 2230;
2232 -> 0;
2232 -> 2153;
2233 -> 2157;
2233 -> 2232;
2234 -> 2232;
2235 -> 2231;
2235 -> 2232;
2236 -> 2158;
2236 -> 2232;
2237 -> 2232;
2238 -> 2233;
2238 -> 2237;
2239 -> 2234;
2239 -> 2237;
2240 -> 2235;
2240 -> 2237;
2241 -> 2236;
2241 -> 2237;
2242 -> 2163;
2242 -> 2237;
2243 -> 2240;
2243 -> 2230;
2243 -> 2237;
2244 -> 2237;
2245 -> 2231;
2245 -> 2153;
2246 -> 2245;
2246 -> 2230;
2246 -> 0;
2246 -> 2142;
2247 -> 1549;
2248 -> 1606;
2248 -> 2247;
2249 -> 2247;
2250 -> 2248;
2250 -> 2249;
2251 -> 0;
2251 -> 2250;
2251 -> 2249;
2252 -> 2250;
2252 -> 2230;
2252 -> 2251;
2252 -> 2249;
2253 -> 2249;
2254 -> 2253;
2254 -> 2250;
2254 -> 2249;
2255 -> 2247;
2256 -> 2247;
2257 -> 2248;
2257 -> 2252;
2257 -> 2256;
2257 -> 2247;
2258 -> 2248;
2258 -> 2257;
2259 -> 2248;
2259 -> 2252;
2259 -> 2258;
2259 -> 2254;
2259 -> 2257;
2260 -> 1549;
2261 -> 1550;
2261 -> 2259;
2261 -> 1549;
2262 -> 1549;
2263 -> 2261;
2263 -> 2262;
2264 -> 1555;
2264 -> 2262;
2265 -> 2263;
2265 -> 2259;
2265 -> 2262;
2266 -> 2263;
2266 -> 2259;
2266 -> 2262;
2267 -> 2262;
2268 -> 2266;
2268 -> 2267;
2269 -> 2266;
2269 -> 2267;
2270 -> 2264;
2270 -> 2267;
2271 -> 2268;
2271 -> 2267;
2272 -> 2269;
2272 -> 2267;
2273 -> 2271;
2273 -> 2272;
2273 -> 2265;
2273 -> 2267;
2274 -> 2273;
2274 -> 2267;
2275 -> 2270;
2275 -> 2273;
2275 -> 2274;
2276 -> 0;
2276 -> 2274;
2277 -> 2274;
2278 -> 2270;
2278 -> 2277;
2279 -> 2278;
2279 -> 2275;
2279 -> 2277;
2280 -> 2277;
2281 -> 2278;
2281 -> 2279;
2281 -> 2280;
2282 -> 2281;
2282 -> 2280;
2283 -> 2280;
2284 -> 2282;
2284 -> 2283;
2285 -> 2284;
2285 -> 2281;
2285 -> 2283;
2286 -> 2285;
2287 -> 2286;
2287 -> 2280;
2288 -> 2287;
2288 -> 2280;
2289 -> 2245;
2289 -> 1549;
2290 -> 1549;
2291 -> 2288;
2291 -> 2290;
2292 -> 2289;
2292 -> 2290;
2293 -> 2292;
2293 -> 2290;
2294 -> 2292;
2294 -> 2290;
2295 -> 2294;
2295 -> 2290;
2296 -> 2295;
2296 -> 2290;
2297 -> 2291;
2297 -> 2296;
2298 -> 2296;
2299 -> 2297;
2299 -> 2298;
2300 -> 2296;
2300 -> 2298;
2301 -> 2299;
2301 -> 2297;
2301 -> 2298;
2302 -> 2299;
2302 -> 2300;
2302 -> 2298;
2303 -> 2298;
2304 -> 2303;
2304 -> 2300;
2304 -> 2298;
2305 -> 2298;
2306 -> 2305;
2306 -> 2300;
2306 -> 2298;
2307 -> 1527;
2308 -> 2296;
2308 -> 2307;
2309 -> 2308;
2309 -> 2302;
2309 -> 2297;
2309 -> 2307;
2310 -> 2309;
2310 -> 1527;
2311 -> 2296;
2311 -> 1527;
2312 -> 1529;
2312 -> 1527;
2313 -> 1528;
2313 -> 1527;
2314 -> 1530;
2314 -> 1527;
2315 -> 1527;
2316 -> 2311;
2316 -> 2315;
2317 -> 2312;
2317 -> 2315;
2318 -> 2313;
2318 -> 2315;
2319 -> 2314;
2319 -> 2315;
2320 -> 1532;
2320 -> 2315;
2321 -> 2315;
2322 -> 2316;
2322 -> 2321;
2323 -> 2322;
2323 -> 2304;
2323 -> 2321;
2324 -> 2323;
2324 -> 0;
2324 -> 2321;
2325 -> 2324;
2325 -> 2315;
2326 -> 2316;
2326 -> 2315;
2327 -> 1489;
2327 -> 2326;
2327 -> 2297;
2327 -> 2302;
2327 -> 2304;
2327 -> 2306;
2327 -> 1485;
2328 -> 1489;
2329 -> 1489;
2330 -> 2328;
2330 -> 2329;
2331 -> 2329;
2332 -> 2330;
2332 -> 2331;
2333 -> 2332;
2333 -> 2327;
2333 -> 2331;
2334 -> 2333;
2334 -> 2327;
2334 -> 2329;
2335 -> 2334;
2335 -> 1489;
2336 -> 1485;
2337 -> 1488;
2337 -> 2336;
2337 -> 1484;
2337 -> 1485;
2338 -> 1488;
2338 -> 1485;
2339 -> 2338;
2339 -> 2337;
2339 -> 1485;
2340 -> 1485;
2341 -> 2339;
2341 -> 2340;
2342 -> 2341;
2342 -> 2339;
2342 -> 2340;
2343 -> 2340;
2344 -> 2342;
2344 -> 2343;
2344 -> 2340;
2345 -> 2344;
2345 -> 2340;
2346 -> 2339;
2346 -> 2340;
2347 -> 2339;
2347 -> 2340;
2348 -> 2339;
2348 -> 2340;
2349 -> 2346;
2349 -> 2340;
2350 -> 2340;
2351 -> 2347;
2351 -> 2340;
2352 -> 2340;
2353 -> 2340;
2354 -> 2349;
2354 -> 2353;
2355 -> 2350;
2355 -> 2353;
2356 -> 2351;
2356 -> 2353;
2357 -> 2352;
2357 -> 2353;
2358 -> 2348;
2358 -> 2353;
2360 -> 2359;
2362 -> 2361;
2364 -> 2363;
2366 -> 2362;
2366 -> 2365;
2367 -> 2364;
2367 -> 2365;
2369 -> 2362;
2369 -> 2368;
2370 -> 2364;
2370 -> 2368;
2372 -> 2362;
2372 -> 2371;
2373 -> 2364;
2373 -> 2371;
2375 -> 2362;
2375 -> 2374;
2376 -> 2364;
2376 -> 2374;
2378 -> 2362;
2378 -> 2377;
2379 -> 2364;
2379 -> 2377;
2381 -> 2362;
2381 -> 2380;
2382 -> 2364;
2382 -> 2380;
2384 -> 2362;
2384 -> 2383;
2385 -> 2364;
2385 -> 2383;
2387 -> 2362;
2387 -> 2386;
2388 -> 2364;
2388 -> 2386;
2390 -> 2362;
2390 -> 2389;
2391 -> 2364;
2391 -> 2389;
2393 -> 2362;
2393 -> 2392;
2394 -> 2364;
2394 -> 2392;
2396 -> 2362;
2396 -> 2395;
2398 -> 2362;
2398 -> 2397;
2400 -> 2365;
2400 -> 2399;
2401 -> 2368;
2401 -> 2399;
2402 -> 2371;
2402 -> 2399;
2403 -> 2374;
2403 -> 2399;
2404 -> 2377;
2404 -> 2399;
2405 -> 2380;
2405 -> 2399;
2406 -> 2383;
2406 -> 2399;
2407 -> 2386;
2407 -> 2399;
2408 -> 2389;
2408 -> 2399;
2409 -> 2392;
2409 -> 2399;
2410 -> 2395;
2410 -> 2399;
2411 -> 2397;
2411 -> 2399;
2412 -> 2399;
2414 -> 2362;
2414 -> 2413;
2415 -> 2364;
2415 -> 2413;
2417 -> 2364;
2417 -> 2416;
2418 -> 2362;
2418 -> 2416;
2420 -> 2364;
2420 -> 2419;
2421 -> 2362;
2421 -> 2419;
2423 -> 2364;
2423 -> 2422;
2424 -> 2362;
2424 -> 2422;
2426 -> 2364;
2426 -> 2425;
2427 -> 2362;
2427 -> 2425;
2429 -> 2364;
2429 -> 2428;
2430 -> 2362;
2430 -> 2428;
2432 -> 2364;
2432 -> 2431;
2433 -> 2362;
2433 -> 2431;
2435 -> 2364;
2435 -> 2434;
2436 -> 2362;
2436 -> 2434;
2438 -> 2364;
2438 -> 2437;
2439 -> 2362;
2439 -> 2437;
2441 -> 2364;
2441 -> 2440;
2442 -> 2362;
2442 -> 2440;
2444 -> 2364;
2444 -> 2443;
2445 -> 2362;
2445 -> 2443;
2447 -> 2364;
2447 -> 2446;
2448 -> 2362;
2448 -> 2446;
2450 -> 2413;
2450 -> 2449;
2451 -> 2416;
2451 -> 2449;
2452 -> 2419;
2452 -> 2449;
2453 -> 2422;
2453 -> 2449;
2454 -> 2425;
2454 -> 2449;
2455 -> 2428;
2455 -> 2449;
2456 -> 2431;
2456 -> 2449;
2457 -> 2434;
2457 -> 2449;
2458 -> 2437;
2458 -> 2449;
2459 -> 2440;
2459 -> 2449;
2460 -> 2443;
2460 -> 2449;
2461 -> 2446;
2461 -> 2449;
2462 -> 2449;
2463 -> 2354;
2463 -> 2353;
2464 -> 2355;
2464 -> 2353;
2465 -> 2356;
2465 -> 2353;
2466 -> 2357;
2466 -> 2353;
2467 -> 2353;
2468 -> 2463;
2468 -> 2467;
2469 -> 2464;
2469 -> 2467;
2470 -> 2465;
2470 -> 2467;
2471 -> 2466;
2471 -> 2467;
2472 -> 2358;
2472 -> 2467;
2473 -> 2472;
2473 -> 2467;
2474 -> 2472;
2474 -> 2467;
2475 -> 2472;
2475 -> 2467;
2476 -> 2472;
2476 -> 2467;
2477 -> 2467;
2478 -> 2468;
2478 -> 2477;
2478 -> 2467;
2479 -> 2467;
2480 -> 2471;
2480 -> 2479;
2480 -> 2467;
2481 -> 2467;
2482 -> 2471;
2482 -> 2481;
2482 -> 2467;
2483 -> 2468;
2483 -> 2472;
2483 -> 2467;
2484 -> 2469;
2484 -> 2472;
2484 -> 2467;
2485 -> 2470;
2485 -> 2472;
2485 -> 2467;
2486 -> 2471;
2486 -> 2472;
2486 -> 2467;
2487 -> 2339;
2487 -> 2345;
2487 -> 2483;
2487 -> 2484;
2487 -> 2485;
2487 -> 2486;
2487 -> 1485;
2488 -> 1486;
2488 -> 2487;
2488 -> 1485;
2489 -> 2488;
2489 -> 1485;
2490 -> 1485;
2491 -> 1485;
2492 -> 2489;
2492 -> 2491;
2493 -> 2490;
2493 -> 2491;
2494 -> 2490;
2494 -> 2491;
2495 -> 2491;
2496 -> 2493;
2496 -> 2491;
2497 -> 2491;
2498 -> 2491;
2499 -> 2495;
2499 -> 2498;
2500 -> 2496;
2500 -> 2498;
2501 -> 2497;
2501 -> 2498;
2502 -> 2494;
2502 -> 2498;
2503 -> 2499;
2503 -> 2498;
2504 -> 2500;
2504 -> 2498;
2505 -> 2501;
2505 -> 2498;
2506 -> 2498;
2507 -> 2503;
2507 -> 2506;
2508 -> 2504;
2508 -> 2506;
2509 -> 2505;
2509 -> 2506;
2510 -> 2502;
2510 -> 2506;
2511 -> 2510;
2511 -> 2506;
2512 -> 2510;
2512 -> 2506;
2513 -> 2510;
2513 -> 2506;
2514 -> 2510;
2514 -> 2506;
2515 -> 2506;
2516 -> 2492;
2516 -> 2515;
2516 -> 2506;
2517 -> 2506;
2518 -> 2509;
2518 -> 2517;
2518 -> 2506;
2519 -> 2506;
2520 -> 2509;
2520 -> 2519;
2520 -> 2506;
2521 -> 2507;
2521 -> 2510;
2521 -> 2506;
2522 -> 2508;
2522 -> 2510;
2522 -> 2506;
2523 -> 2509;
2523 -> 2510;
2523 -> 2506;
2524 -> 1486;
2524 -> 2487;
2524 -> 1485;
2525 -> 1486;
2525 -> 2487;
2525 -> 1485;
2526 -> 1485;
2527 -> 1486;
2527 -> 2487;
2527 -> 2526;
2527 -> 1485;
2528 -> 1484;
2529 -> 2487;
2530 -> 1010;
2530 -> 984;
2531 -> 1010;
2531 -> 984;
2532 -> 1010;
2532 -> 984;
2533 -> 1010;
2533 -> 984;
2534 -> 2530;
2534 -> 2487;
2534 -> 984;
2535 -> 984;
2536 -> 2533;
2536 -> 2535;
2537 -> 2536;
2537 -> 2487;
2537 -> 0;
2537 -> 2535;
2538 -> 2537;
2538 -> 984;
2539 -> 984;
2540 -> 2530;
2540 -> 2487;
2540 -> 2539;
2540 -> 984;
2541 -> 2538;
2541 -> 2540;
2541 -> 984;
2542 -> 2530;
2542 -> 2487;
2542 -> 2541;
2543 -> 2542;
2543 -> 984;
2544 -> 2534;
2544 -> 984;
2545 -> 2531;
2545 -> 984;
2546 -> 2532;
2546 -> 984;
2547 -> 984;
2548 -> 2543;
2548 -> 2547;
2549 -> 2544;
2549 -> 2547;
2550 -> 2545;
2550 -> 2547;
2551 -> 2546;
2551 -> 2547;
2552 -> 2533;
2552 -> 2547;
2553 -> 2547;
2554 -> 2548;
2554 -> 2553;
2554 -> 2547;
2555 -> 2551;
2555 -> 2547;
2556 -> 2551;
2556 -> 2487;
2556 -> 2547;
2557 -> 2552;
2557 -> 2487;
2557 -> 2547;
2558 -> 2549;
2558 -> 2547;
2559 -> 2550;
2559 -> 2547;
2560 -> 2551;
2560 -> 2547;
2561 -> 2547;
2562 -> 2558;
2562 -> 2561;
2563 -> 2559;
2563 -> 2561;
2564 -> 2560;
2564 -> 2561;
2565 -> 2557;
2565 -> 2561;
2566 -> 2561;
2567 -> 2563;
2567 -> 2566;
2567 -> 2561;
2568 -> 2564;
2568 -> 2566;
2568 -> 2561;
2569 -> 2567;
2569 -> 2568;
2569 -> 2561;
2570 -> 2562;
2570 -> 2565;
2570 -> 2561;
2571 -> 2563;
2571 -> 2565;
2571 -> 2561;
2572 -> 2564;
2572 -> 2565;
2572 -> 2561;
2573 -> 2547;
2574 -> 2548;
2574 -> 2547;
2575 -> 2547;
2576 -> 2574;
2576 -> 2575;
2577 -> 2557;
2577 -> 2575;
2578 -> 2576;
2578 -> 2575;
2579 -> 2575;
2580 -> 2578;
2580 -> 2579;
2581 -> 2577;
2581 -> 2579;
2582 -> 2581;
2582 -> 2579;
2583 -> 2582;
2583 -> 2580;
2583 -> 2557;
2583 -> 2570;
2583 -> 2571;
2583 -> 2572;
2583 -> 2579;
2584 -> 2579;
2585 -> 2583;
2585 -> 2584;
2586 -> 2583;
2586 -> 2584;
2587 -> 2585;
2587 -> 2584;
2588 -> 2584;
2589 -> 2587;
2589 -> 2588;
2590 -> 2586;
2590 -> 2588;
2591 -> 2590;
2591 -> 2583;
2591 -> 2588;
2592 -> 2589;
2592 -> 2588;
2593 -> 2591;
2593 -> 2592;
2593 -> 2583;
2593 -> 2588;
2594 -> 1258;
2594 -> 2588;
2595 -> 2588;
2596 -> 2589;
2596 -> 2593;
2596 -> 2595;
2596 -> 2588;
2597 -> 2590;
2597 -> 2593;
2597 -> 2588;
2598 -> 2589;
2598 -> 2593;
2598 -> 2588;
2599 -> 0;
2599 -> 2596;
2600 -> 2589;
2600 -> 2588;
2601 -> 2599;
2601 -> 2588;
2602 -> 2588;
2603 -> 2600;
2603 -> 2602;
2604 -> 2601;
2604 -> 2602;
2605 -> 2590;
2605 -> 2602;
2606 -> 2603;
2606 -> 2602;
2607 -> 2604;
2607 -> 2602;
2608 -> 2602;
2609 -> 2606;
2609 -> 2608;
2610 -> 2607;
2610 -> 2608;
2611 -> 2610;
2611 -> 2608;
2612 -> 2608;
2613 -> 2608;
2614 -> 2608;
2615 -> 2613;
2615 -> 2614;
2616 -> 2613;
2616 -> 2602;
2617 -> 2602;
2618 -> 2602;
2619 -> 2605;
2619 -> 2618;
2620 -> 2619;
2620 -> 2597;
2620 -> 2618;
2621 -> 2620;
2621 -> 2602;
2622 -> 2616;
2622 -> 2602;
2623 -> 2617;
2623 -> 2602;
2624 -> 2622;
2624 -> 2623;
2624 -> 2621;
2624 -> 2609;
2624 -> 2610;
2624 -> 2597;
2624 -> 2602;
2625 -> 2602;
2626 -> 2603;
2626 -> 2624;
2627 -> 2624;
2628 -> 2626;
2628 -> 2627;
2629 -> 2628;
2629 -> 2627;
2630 -> 2628;
2630 -> 2627;
2631 -> 2629;
2631 -> 2627;
2632 -> 2627;
2633 -> 2631;
2633 -> 2632;
2634 -> 2630;
2634 -> 2632;
2635 -> 2633;
2635 -> 2628;
2635 -> 2632;
2636 -> 2632;
2637 -> 2636;
2637 -> 2632;
2638 -> 2633;
2638 -> 2628;
2638 -> 2632;
2639 -> 2634;
2639 -> 2638;
2639 -> 2635;
2639 -> 2628;
2640 -> 2634;
2640 -> 2638;
2640 -> 2639;
2641 -> 2639;
2642 -> 2640;
2642 -> 2632;
2643 -> 2632;
2644 -> 2642;
2644 -> 2643;
2644 -> 2632;
2645 -> 2642;
2645 -> 2633;
2645 -> 2632;
2646 -> 2642;
2646 -> 2644;
2647 -> 0;
2647 -> 2644;
2648 -> 2642;
2648 -> 2646;
2648 -> 2644;
2649 -> 2632;
2650 -> 2649;
2650 -> 2627;
2651 -> 2627;
2652 -> 2630;
2652 -> 2651;
2653 -> 2651;
2654 -> 2652;
2654 -> 2648;
2654 -> 2653;
2655 -> 2654;
2655 -> 2651;
2656 -> 2627;
2657 -> 2631;
2657 -> 2656;
2658 -> 2650;
2658 -> 2656;
2659 -> 2655;
2659 -> 2656;
2660 -> 2630;
2660 -> 2656;
2661 -> 2656;
2662 -> 2660;
2662 -> 2661;
2663 -> 2662;
2663 -> 2648;
2663 -> 2661;
2664 -> 2663;
2664 -> 2656;
2665 -> 2656;
2666 -> 2659;
2666 -> 2658;
2667 -> 2666;
2667 -> 2656;
2668 -> 2656;
2669 -> 2660;
2669 -> 2648;
2669 -> 2656;
2670 -> 2666;
2670 -> 2656;
2671 -> 2666;
2671 -> 2656;
2672 -> 2671;
2672 -> 2666;
2672 -> 2670;
2672 -> 2656;
2673 -> 2604;
2673 -> 2666;
2673 -> 2624;
2674 -> 2673;
2675 -> 2672;
2675 -> 2674;
2676 -> 2675;
2676 -> 2673;
2677 -> 2603;
2677 -> 2673;
2678 -> 2604;
2678 -> 0;
2678 -> 2673;
2679 -> 2676;
2679 -> 2678;
2680 -> 2672;
2680 -> 2678;
2681 -> 2678;
2682 -> 2678;
2683 -> 2679;
2683 -> 2682;
2684 -> 2680;
2684 -> 2682;
2685 -> 2681;
2685 -> 2682;
2686 -> 2681;
2686 -> 2682;
2687 -> 2682;
2688 -> 2684;
2688 -> 2687;
2688 -> 2682;
2689 -> 2684;
2689 -> 2676;
2689 -> 2686;
2689 -> 2682;
2690 -> 2684;
2690 -> 2676;
2690 -> 2686;
2690 -> 2682;
2691 -> 2686;
2691 -> 2682;
2692 -> 2682;
2693 -> 2683;
2693 -> 2692;
2693 -> 2682;
2694 -> 2678;
2695 -> 2603;
2695 -> 2676;
2695 -> 2694;
2695 -> 2678;
2696 -> 2603;
2696 -> 2676;
2696 -> 2624;
2697 -> 2624;
2698 -> 2696;
2698 -> 2697;
2699 -> 2681;
2699 -> 2697;
2700 -> 2699;
2700 -> 2689;
2700 -> 2697;
2701 -> 0;
2701 -> 2697;
2702 -> 2697;
2703 -> 2700;
2703 -> 2702;
2704 -> 2701;
2704 -> 2702;
2705 -> 2698;
2705 -> 2697;
2706 -> 2703;
2706 -> 2705;
2706 -> 2697;
2707 -> 2706;
2707 -> 2697;
2708 -> 2624;
2709 -> 2708;
2709 -> 2705;
2710 -> 2709;
2710 -> 2624;
2711 -> 2616;
2711 -> 2624;
2712 -> 2707;
2712 -> 2624;
2713 -> 2711;
2713 -> 2712;
2713 -> 2710;
2713 -> 2609;
2713 -> 2610;
2713 -> 2690;
2713 -> 2689;
2713 -> 2684;
2713 -> 2686;
2713 -> 2683;
2713 -> 2685;
2713 -> 2705;
2713 -> 2624;
2714 -> 2624;
2715 -> 2707;
2715 -> 2602;
2716 -> 2583;
2716 -> 2715;
2716 -> 2713;
2716 -> 2579;
2717 -> 2557;
2717 -> 2547;
2718 -> 2552;
2718 -> 2716;
2718 -> 2717;
2718 -> 2547;
2719 -> 2716;
2719 -> 2547;
2720 -> 1010;
2720 -> 2719;
2720 -> 2718;
2720 -> 981;
2721 -> 2720;
2721 -> 2553;
2721 -> 2547;
2722 -> 2551;
2722 -> 2720;
2722 -> 2547;
2723 -> 2551;
2723 -> 2722;
2724 -> 2722;
2725 -> 2723;
2725 -> 2584;
2726 -> 2723;
2726 -> 2584;
2727 -> 2726;
2727 -> 2723;
2727 -> 2584;
2728 -> 2725;
2728 -> 2584;
2729 -> 2727;
2729 -> 2728;
2729 -> 2723;
2729 -> 2584;
2730 -> 2584;
2731 -> 2726;
2731 -> 2729;
2731 -> 2584;
2732 -> 2725;
2732 -> 2584;
2733 -> 2726;
2733 -> 2731;
2734 -> 2725;
2734 -> 2731;
2735 -> 2666;
2735 -> 2733;
2736 -> 2725;
2736 -> 2584;
2737 -> 2735;
2737 -> 2584;
2738 -> 2584;
2739 -> 2736;
2739 -> 2738;
2740 -> 2737;
2740 -> 2738;
2741 -> 2740;
2741 -> 2738;
2742 -> 2738;
2743 -> 2738;
2744 -> 2738;
2745 -> 2743;
2745 -> 2744;
2746 -> 2743;
2746 -> 2584;
2747 -> 2584;
2748 -> 2584;
2749 -> 2726;
2749 -> 2748;
2750 -> 2749;
2750 -> 2733;
2750 -> 2748;
2751 -> 2750;
2751 -> 2584;
2752 -> 2746;
2752 -> 2584;
2753 -> 2747;
2753 -> 2584;
2754 -> 2752;
2754 -> 2753;
2754 -> 2751;
2754 -> 2739;
2754 -> 2740;
2754 -> 2733;
2754 -> 2584;
2755 -> 2584;
2756 -> 2725;
2756 -> 2754;
2757 -> 2754;
2758 -> 2756;
2758 -> 2757;
2758 -> 2754;
2759 -> 2756;
2759 -> 2758;
2760 -> 0;
2760 -> 2758;
2761 -> 2758;
2762 -> 2759;
2762 -> 2761;
2763 -> 2760;
2763 -> 2761;
2764 -> 2763;
2764 -> 2761;
2765 -> 2761;
2766 -> 2754;
2767 -> 2735;
2767 -> 2666;
2767 -> 2754;
2768 -> 2735;
2768 -> 0;
2768 -> 2754;
2769 -> 2725;
2769 -> 2762;
2769 -> 2754;
2770 -> 2754;
2771 -> 2769;
2771 -> 2770;
2772 -> 2762;
2772 -> 2770;
2773 -> 2754;
2774 -> 2773;
2774 -> 2771;
2775 -> 2774;
2775 -> 2754;
2776 -> 2746;
2776 -> 2754;
2777 -> 2771;
2777 -> 2754;
2778 -> 2754;
2779 -> 2771;
2779 -> 2584;
2780 -> 2723;
2780 -> 2779;
2780 -> 2775;
2780 -> 2579;
2781 -> 1010;
2781 -> 984;
2782 -> 1010;
2782 -> 984;
2783 -> 1010;
2783 -> 984;
2784 -> 984;
2785 -> 2782;
2785 -> 2784;
2785 -> 984;
2786 -> 2783;
2786 -> 984;
2787 -> 2783;
2787 -> 2780;
2787 -> 2781;
2787 -> 984;
2788 -> 2782;
2788 -> 984;
2789 -> 984;
2790 -> 984;
2791 -> 2786;
2791 -> 2790;
2792 -> 2787;
2792 -> 2790;
2793 -> 2788;
2793 -> 2790;
2794 -> 2789;
2794 -> 2790;
2795 -> 2791;
2795 -> 2790;
2796 -> 2792;
2796 -> 2790;
2797 -> 2790;
2798 -> 2795;
2798 -> 2797;
2799 -> 2796;
2799 -> 2797;
2800 -> 2794;
2800 -> 2797;
2801 -> 2800;
2801 -> 2797;
2802 -> 2800;
2802 -> 2797;
2803 -> 2800;
2803 -> 2797;
2804 -> 2800;
2804 -> 2797;
2805 -> 2800;
2805 -> 2797;
2806 -> 2797;
2807 -> 2798;
2807 -> 2806;
2807 -> 2797;
2808 -> 2799;
2808 -> 2797;
2809 -> 0;
2809 -> 2797;
2810 -> 2797;
2811 -> 2808;
2811 -> 2810;
2812 -> 2809;
2812 -> 2810;
2813 -> 2799;
2813 -> 2797;
2814 -> 0;
2814 -> 2797;
2815 -> 2797;
2816 -> 2813;
2816 -> 2815;
2817 -> 2814;
2817 -> 2815;
2818 -> 2798;
2818 -> 2800;
2818 -> 2797;
2819 -> 2799;
2819 -> 2800;
2819 -> 2797;
2820 -> 2798;
2820 -> 2780;
2820 -> 2800;
2820 -> 2797;
2821 -> 2794;
2821 -> 2790;
2822 -> 2790;
2823 -> 2793;
2823 -> 2822;
2823 -> 2790;
2824 -> 2793;
2824 -> 2794;
2824 -> 2790;
2825 -> 1010;
2825 -> 2789;
2825 -> 2780;
2825 -> 2820;
2825 -> 2819;
2825 -> 2818;
2825 -> 2804;
2825 -> 2805;
2825 -> 2824;
2825 -> 981;
2826 -> 1010;
2826 -> 984;
2827 -> 1010;
2827 -> 984;
2828 -> 1010;
2828 -> 984;
2829 -> 1010;
2829 -> 984;
2830 -> 1010;
2830 -> 984;
2831 -> 984;
2832 -> 2826;
2832 -> 2825;
2832 -> 984;
2833 -> 984;
2834 -> 2827;
2834 -> 2825;
2834 -> 984;
2835 -> 2831;
2835 -> 984;
2836 -> 2833;
2836 -> 984;
2837 -> 1010;
2837 -> 984;
2838 -> 1010;
2838 -> 984;
2839 -> 1010;
2839 -> 984;
2840 -> 1010;
2840 -> 984;
2841 -> 1010;
2841 -> 984;
2842 -> 2837;
2842 -> 984;
2843 -> 2838;
2843 -> 984;
2844 -> 2839;
2844 -> 984;
2845 -> 2840;
2845 -> 984;
2846 -> 984;
2847 -> 2842;
2847 -> 2846;
2848 -> 2843;
2848 -> 2846;
2849 -> 2844;
2849 -> 2846;
2850 -> 2845;
2850 -> 2846;
2851 -> 2841;
2851 -> 2846;
2852 -> 2846;
2853 -> 2848;
2853 -> 2852;
2853 -> 2846;
2854 -> 2847;
2854 -> 2846;
2855 -> 2848;
2855 -> 2846;
2856 -> 2849;
2856 -> 2846;
2857 -> 2846;
2858 -> 2849;
2858 -> 2857;
2858 -> 2846;
2859 -> 2858;
2859 -> 2850;
2859 -> 2846;
2860 -> 2846;
2861 -> 2854;
2861 -> 2860;
2862 -> 2855;
2862 -> 2860;
2863 -> 2856;
2863 -> 2860;
2864 -> 2859;
2864 -> 2860;
2865 -> 2851;
2865 -> 2860;
2866 -> 2861;
2866 -> 2825;
2866 -> 2860;
2867 -> 2861;
2867 -> 2866;
2868 -> 2862;
2868 -> 2866;
2869 -> 2863;
2869 -> 2866;
2870 -> 2864;
2870 -> 2866;
2871 -> 2866;
2872 -> 2866;
2873 -> 2867;
2873 -> 2872;
2874 -> 2868;
2874 -> 2872;
2875 -> 2869;
2875 -> 2872;
2876 -> 2870;
2876 -> 2872;
2877 -> 2871;
2877 -> 2872;
2878 -> 2865;
2878 -> 2872;
2879 -> 2873;
2879 -> 2866;
2879 -> 2872;
2880 -> 2879;
2880 -> 2872;
2881 -> 2873;
2881 -> 2866;
2881 -> 2872;
2882 -> 2877;
2882 -> 2872;
2883 -> 2879;
2883 -> 2872;
2884 -> 2872;
2885 -> 2874;
2885 -> 2872;
2886 -> 2872;
2887 -> 2881;
2887 -> 2886;
2888 -> 2882;
2888 -> 2886;
2889 -> 2883;
2889 -> 2886;
2890 -> 2884;
2890 -> 2886;
2891 -> 2885;
2891 -> 2886;
2892 -> 2878;
2892 -> 2886;
2893 -> 2886;
2894 -> 2888;
2894 -> 2893;
2894 -> 2886;
2895 -> 2886;
2896 -> 2895;
2896 -> 2872;
2897 -> 2872;
2898 -> 2896;
2898 -> 2897;
2898 -> 2872;
2899 -> 2872;
2900 -> 1581;
2900 -> 2335;
2900 -> 2899;
2901 -> 2899;
2902 -> 2900;
2902 -> 2901;
2903 -> 2902;
2903 -> 2900;
2903 -> 0;
2903 -> 2901;
2904 -> 2901;
2905 -> 2902;
2905 -> 2900;
2905 -> 2904;
2905 -> 2901;
2906 -> 2903;
2906 -> 2899;
2907 -> 2873;
2907 -> 2872;
2908 -> 2873;
2908 -> 2866;
2908 -> 2872;
2909 -> 2872;
2910 -> 2907;
2910 -> 2909;
2911 -> 2908;
2911 -> 2909;
2912 -> 2910;
2912 -> 2909;
2913 -> 0;
2913 -> 2912;
2914 -> 2872;
2915 -> 2877;
2915 -> 2872;
2916 -> 2879;
2916 -> 2872;
2917 -> 2872;
2918 -> 2875;
2918 -> 2872;
2919 -> 2913;
2919 -> 2872;
2920 -> 2914;
2920 -> 2872;
2921 -> 2872;
2922 -> 2915;
2922 -> 2921;
2923 -> 2916;
2923 -> 2921;
2924 -> 2917;
2924 -> 2921;
2925 -> 2918;
2925 -> 2921;
2926 -> 2919;
2926 -> 2921;
2927 -> 2917;
2927 -> 2921;
2928 -> 2920;
2928 -> 2921;
2929 -> 2878;
2929 -> 2921;
2930 -> 2926;
2930 -> 2921;
2931 -> 2921;
2932 -> 2930;
2932 -> 2931;
2933 -> 2932;
2933 -> 0;
2933 -> 2931;
2934 -> 2922;
2934 -> 2933;
2935 -> 2923;
2935 -> 2933;
2936 -> 2924;
2936 -> 2933;
2937 -> 2925;
2937 -> 2933;
2938 -> 2926;
2938 -> 2933;
2939 -> 2927;
2939 -> 2933;
2940 -> 2928;
2940 -> 2933;
2941 -> 2933;
2942 -> 2934;
2942 -> 2941;
2943 -> 2935;
2943 -> 2941;
2944 -> 2936;
2944 -> 2941;
2945 -> 2937;
2945 -> 2941;
2946 -> 2938;
2946 -> 2941;
2947 -> 2939;
2947 -> 2941;
2948 -> 2940;
2948 -> 2941;
2949 -> 2929;
2949 -> 2941;
2950 -> 2941;
2951 -> 2942;
2951 -> 2950;
2951 -> 2941;
2952 -> 2943;
2952 -> 2951;
2953 -> 2944;
2953 -> 2951;
2954 -> 2945;
2954 -> 2951;
2955 -> 2946;
2955 -> 2951;
2956 -> 2947;
2956 -> 2951;
2957 -> 2948;
2957 -> 2951;
2958 -> 2951;
2959 -> 2952;
2959 -> 2958;
2960 -> 2953;
2960 -> 2958;
2961 -> 2954;
2961 -> 2958;
2962 -> 2955;
2962 -> 2958;
2963 -> 2956;
2963 -> 2958;
2964 -> 2957;
2964 -> 2958;
2965 -> 2949;
2965 -> 2958;
2966 -> 2958;
2967 -> 2900;
2967 -> 2966;
2968 -> 2967;
2968 -> 2900;
2968 -> 0;
2968 -> 2966;
2969 -> 2966;
2970 -> 2967;
2970 -> 2900;
2970 -> 2969;
2970 -> 2966;
2971 -> 2968;
2971 -> 2958;
2972 -> 2962;
2972 -> 2958;
2973 -> 2958;
2974 -> 2972;
2974 -> 2973;
2975 -> 2974;
2975 -> 0;
2975 -> 2973;
2976 -> 2974;
2976 -> 0;
2976 -> 2973;
2977 -> 2973;
2978 -> 0;
2978 -> 2973;
2979 -> 2974;
2979 -> 2978;
2979 -> 2973;
2980 -> 0;
2980 -> 2973;
2981 -> 2974;
2981 -> 2980;
2981 -> 2973;
2982 -> 2973;
2983 -> 0;
2983 -> 2973;
2984 -> 2974;
2984 -> 2983;
2984 -> 2973;
2985 -> 2984;
2985 -> 2973;
2986 -> 2973;
2987 -> 2985;
2987 -> 2986;
2988 -> 2986;
2989 -> 2987;
2989 -> 2988;
2989 -> 2986;
2990 -> 2958;
2991 -> 2965;
2991 -> 2958;
2992 -> 2958;
2993 -> 2958;
2994 -> 2993;
2995 -> 2991;
2995 -> 2900;
2995 -> 2958;
2996 -> 2960;
2996 -> 2995;
2997 -> 2961;
2997 -> 2995;
2998 -> 2963;
2998 -> 2995;
2999 -> 2995;
3000 -> 2995;
3001 -> 2996;
3001 -> 2995;
3002 -> 2997;
3002 -> 2995;
3003 -> 2995;
3004 -> 2995;
3005 -> 2998;
3005 -> 2995;
3006 -> 2991;
3006 -> 2995;
3007 -> 2995;
3008 -> 2900;
3008 -> 3007;
3009 -> 3008;
3009 -> 2900;
3009 -> 0;
3009 -> 3007;
3010 -> 3007;
3011 -> 3008;
3011 -> 2900;
3011 -> 3010;
3011 -> 3007;
3012 -> 3009;
3012 -> 2995;
3013 -> 2962;
3013 -> 0;
3013 -> 2995;
3014 -> 2995;
3015 -> 2996;
3015 -> 2995;
3016 -> 2997;
3016 -> 2995;
3017 -> 2998;
3017 -> 2995;
3018 -> 2995;
3019 -> 2995;
3019 -> 3018;
3020 -> 3019;
3020 -> 2900;
3020 -> 0;
3020 -> 3018;
3021 -> 3018;
3022 -> 3019;
3022 -> 2900;
3022 -> 3021;
3022 -> 3018;
3023 -> 3020;
3023 -> 2995;
3024 -> 2995;
3025 -> 2995;
3025 -> 3024;
3026 -> 3025;
3026 -> 2912;
3026 -> 0;
3026 -> 3024;
3027 -> 3026;
3027 -> 2995;
3028 -> 2995;
3029 -> 3015;
3029 -> 2995;
3030 -> 3016;
3030 -> 2995;
3031 -> 3017;
3031 -> 2995;
3032 -> 2995;
3033 -> 2995;
3034 -> 2995;
3035 -> 3033;
3035 -> 3034;
3036 -> 3035;
3036 -> 0;
3036 -> 3034;
3037 -> 3035;
3037 -> 0;
3037 -> 3034;
3038 -> 3034;
3039 -> 0;
3039 -> 3034;
3040 -> 3035;
3040 -> 3039;
3040 -> 3034;
3041 -> 0;
3041 -> 3034;
3042 -> 3035;
3042 -> 3041;
3042 -> 3034;
3043 -> 3034;
3044 -> 0;
3044 -> 3034;
3045 -> 3035;
3045 -> 3044;
3045 -> 3034;
3046 -> 3045;
3046 -> 3034;
3047 -> 3034;
3048 -> 3046;
3048 -> 3047;
3049 -> 3047;
3050 -> 3048;
3050 -> 3049;
3050 -> 3047;
3051 -> 2995;
3052 -> 3029;
3052 -> 3051;
3052 -> 2995;
3053 -> 2995;
3054 -> 3029;
3054 -> 2995;
3055 -> 3030;
3055 -> 2995;
3056 -> 3031;
3056 -> 2995;
3057 -> 2995;
3058 -> 3053;
3058 -> 3057;
3059 -> 3053;
3059 -> 3057;
3060 -> 3053;
3060 -> 3057;
3061 -> 3054;
3061 -> 3057;
3062 -> 3055;
3062 -> 3057;
3063 -> 3053;
3063 -> 3057;
3064 -> 3053;
3064 -> 3057;
3065 -> 3056;
3065 -> 3057;
3066 -> 3053;
3066 -> 3057;
3067 -> 3032;
3067 -> 3057;
3068 -> 3059;
3068 -> 2912;
3068 -> 3057;
3069 -> 3058;
3069 -> 3068;
3070 -> 3059;
3070 -> 3068;
3071 -> 3060;
3071 -> 3068;
3072 -> 3061;
3072 -> 3068;
3073 -> 3062;
3073 -> 3068;
3074 -> 3063;
3074 -> 3068;
3075 -> 3064;
3075 -> 3068;
3076 -> 3065;
3076 -> 3068;
3077 -> 3066;
3077 -> 3068;
3078 -> 3068;
3079 -> 3069;
3079 -> 3078;
3080 -> 3070;
3080 -> 3078;
3081 -> 3071;
3081 -> 3078;
3082 -> 3072;
3082 -> 3078;
3083 -> 3073;
3083 -> 3078;
3084 -> 3074;
3084 -> 3078;
3085 -> 3075;
3085 -> 3078;
3086 -> 3076;
3086 -> 3078;
3087 -> 3077;
3087 -> 3078;
3088 -> 3067;
3088 -> 3078;
3089 -> 3079;
3089 -> 3078;
3090 -> 3080;
3090 -> 3078;
3091 -> 3081;
3091 -> 3078;
3092 -> 3082;
3092 -> 3078;
3093 -> 3083;
3093 -> 3078;
3094 -> 3084;
3094 -> 3078;
3095 -> 3085;
3095 -> 3078;
3096 -> 3086;
3096 -> 3078;
3097 -> 3087;
3097 -> 3078;
3098 -> 3078;
3099 -> 3089;
3099 -> 3098;
3100 -> 3090;
3100 -> 3098;
3101 -> 3091;
3101 -> 3098;
3102 -> 3092;
3102 -> 3098;
3103 -> 3093;
3103 -> 3098;
3104 -> 3094;
3104 -> 3098;
3105 -> 3095;
3105 -> 3098;
3106 -> 3090;
3106 -> 3098;
3107 -> 3096;
3107 -> 3098;
3108 -> 3097;
3108 -> 3098;
3109 -> 3088;
3109 -> 3098;
3110 -> 3098;
3111 -> 3100;
3111 -> 3110;
3111 -> 3098;
3112 -> 3100;
3112 -> 3098;
3113 -> 3100;
3113 -> 3098;
3114 -> 3098;
3115 -> 3114;
3116 -> 3114;
3117 -> 3114;
3118 -> 3114;
3119 -> 3114;
3120 -> 3114;
3120 -> 3119;
3121 -> 3120;
3121 -> 3114;
3121 -> 0;
3121 -> 3119;
3122 -> 3119;
3123 -> 3120;
3123 -> 3114;
3123 -> 3122;
3123 -> 3119;
3124 -> 3121;
3124 -> 3114;
3125 -> 3114;
3125 -> 3098;
3126 -> 3098;
3127 -> 3098;
3128 -> 3113;
3128 -> 3127;
3128 -> 3098;
3129 -> 3128;
3130 -> 3125;
3130 -> 3129;
3131 -> 3128;
3132 -> 3125;
3132 -> 3128;
3133 -> 3113;
3133 -> 3128;
3134 -> 3101;
3134 -> 3128;
3135 -> 3102;
3135 -> 3128;
3136 -> 3104;
3136 -> 3128;
3137 -> 3105;
3137 -> 3128;
3138 -> 3106;
3138 -> 3128;
3139 -> 3107;
3139 -> 3128;
3140 -> 3108;
3140 -> 3128;
3141 -> 3103;
3141 -> 3128;
3142 -> 3128;
3143 -> 3132;
3143 -> 3142;
3144 -> 3133;
3144 -> 3142;
3145 -> 3134;
3145 -> 3142;
3146 -> 3135;
3146 -> 3142;
3147 -> 3136;
3147 -> 3142;
3148 -> 3137;
3148 -> 3142;
3149 -> 3138;
3149 -> 3142;
3150 -> 3139;
3150 -> 3142;
3151 -> 3140;
3151 -> 3142;
3152 -> 3141;
3152 -> 3142;
3153 -> 3144;
3153 -> 3142;
3154 -> 3145;
3154 -> 3142;
3155 -> 3147;
3155 -> 3142;
3156 -> 3148;
3156 -> 3142;
3157 -> 3142;
3158 -> 3153;
3158 -> 3157;
3159 -> 3154;
3159 -> 3157;
3160 -> 3155;
3160 -> 3157;
3161 -> 3156;
3161 -> 3157;
3162 -> 3160;
3162 -> 3158;
3162 -> 3157;
3163 -> 3159;
3163 -> 3162;
3164 -> 3158;
3164 -> 3163;
3164 -> 3112;
3164 -> 3162;
3165 -> 3164;
3165 -> 3142;
3166 -> 3128;
3167 -> 3099;
3167 -> 3128;
3168 -> 3125;
3168 -> 3128;
3169 -> 3103;
3169 -> 3128;
3170 -> 3151;
3170 -> 3128;
3171 -> 3167;
3171 -> 3168;
3171 -> 3169;
3171 -> 3170;
3171 -> 3130;
3171 -> 3164;
3171 -> 3128;
3172 -> 3128;
3173 -> 3171;
3173 -> 3172;
3174 -> 3171;
3174 -> 3172;
3175 -> 3172;
3176 -> 3173;
3176 -> 3175;
3177 -> 3176;
3177 -> 3172;
3178 -> 3172;
3179 -> 3174;
3179 -> 3178;
3180 -> 3179;
3180 -> 3172;
3181 -> 3177;
3181 -> 3180;
3181 -> 3172;
3182 -> 3113;
3182 -> 3128;
3183 -> 3128;
3184 -> 3182;
3184 -> 3171;
3184 -> 3183;
3184 -> 3128;
3185 -> 3128;
3186 -> 3125;
3186 -> 3185;
3187 -> 3186;
3187 -> 3171;
3187 -> 3185;
3188 -> 3187;
3188 -> 3128;
3189 -> 3128;
3190 -> 3099;
3190 -> 3189;
3191 -> 3190;
3191 -> 3171;
3191 -> 3189;
3192 -> 3191;
3192 -> 3128;
3193 -> 3128;
3194 -> 3103;
3194 -> 3193;
3194 -> 3128;
3195 -> 3128;
3196 -> 3105;
3196 -> 3195;
3197 -> 3195;
3198 -> 3196;
3198 -> 3197;
3199 -> 3198;
3199 -> 3171;
3199 -> 3197;
3200 -> 3199;
3200 -> 3195;
3201 -> 3200;
3201 -> 3128;
3202 -> 3113;
3202 -> 3128;
3203 -> 3103;
3203 -> 3128;
3204 -> 3109;
3204 -> 3171;
3204 -> 3128;
3205 -> 3126;
3205 -> 3128;
3206 -> 3202;
3206 -> 3203;
3206 -> 3204;
3206 -> 3205;
3206 -> 3171;
3206 -> 3128;
3207 -> 3128;
3208 -> 3206;
3208 -> 3207;
3208 -> 3128;
3209 -> 3206;
3209 -> 3208;
3210 -> 3171;
3210 -> 3208;
3211 -> 3206;
3212 -> 3102;
3212 -> 3206;
3213 -> 3105;
3213 -> 3206;
3214 -> 3106;
3214 -> 3206;
3215 -> 3107;
3215 -> 3206;
3216 -> 3206;
3217 -> 3212;
3217 -> 3206;
3218 -> 3213;
3218 -> 3206;
3219 -> 3214;
3219 -> 3206;
3220 -> 3215;
3220 -> 3206;
3221 -> 3206;
3222 -> 3218;
3222 -> 3206;
3223 -> 3209;
3223 -> 3206;
3224 -> 3209;
3224 -> 3206;
3225 -> 3209;
3225 -> 3206;
3226 -> 3206;
3227 -> 3224;
3227 -> 3226;
3228 -> 3227;
3228 -> 3206;
3229 -> 3206;
3230 -> 3225;
3230 -> 3229;
3231 -> 3230;
3231 -> 3206;
3232 -> 3228;
3232 -> 3231;
3232 -> 3206;
3233 -> 3206;
3234 -> 3206;
3235 -> 3233;
3235 -> 3209;
3235 -> 3234;
3235 -> 3206;
3236 -> 3206;
3237 -> 3236;
3237 -> 3209;
3238 -> 3237;
3238 -> 3206;
3239 -> 3206;
3240 -> 3239;
3240 -> 3209;
3241 -> 3240;
3241 -> 3206;
3242 -> 3206;
3243 -> 3206;
3244 -> 3105;
3244 -> 3243;
3245 -> 3243;
3246 -> 3244;
3246 -> 3245;
3247 -> 3246;
3247 -> 3209;
3247 -> 3245;
3248 -> 3247;
3248 -> 3243;
3249 -> 3248;
3249 -> 3206;
3250 -> 3206;
3251 -> 3209;
3251 -> 3098;
3252 -> 3098;
3253 -> 3125;
3253 -> 3252;
3254 -> 3253;
3254 -> 3209;
3254 -> 3252;
3255 -> 3252;
3256 -> 3098;
3257 -> 3078;
3258 -> 3068;
3259 -> 2995;
3260 -> 3015;
3260 -> 2995;
3261 -> 3016;
3261 -> 2995;
3262 -> 3017;
3262 -> 2995;
3263 -> 3209;
3263 -> 2995;
3264 -> 2995;
3265 -> 3259;
3265 -> 3264;
3266 -> 3259;
3266 -> 3264;
3267 -> 3259;
3267 -> 3264;
3268 -> 3260;
3268 -> 3264;
3269 -> 3261;
3269 -> 3264;
3270 -> 3259;
3270 -> 3264;
3271 -> 3262;
3271 -> 3264;
3272 -> 3263;
3272 -> 3264;
3273 -> 2995;
3273 -> 3264;
3274 -> 3265;
3274 -> 3264;
3275 -> 3266;
3275 -> 3264;
3276 -> 3267;
3276 -> 3264;
3277 -> 3268;
3277 -> 3264;
3278 -> 3269;
3278 -> 3264;
3279 -> 3270;
3279 -> 3264;
3280 -> 3271;
3280 -> 3264;
3281 -> 3272;
3281 -> 3264;
3282 -> 3264;
3283 -> 3274;
3283 -> 3282;
3284 -> 3275;
3284 -> 3282;
3285 -> 3276;
3285 -> 3282;
3286 -> 3277;
3286 -> 3282;
3287 -> 3278;
3287 -> 3282;
3288 -> 3279;
3288 -> 3282;
3289 -> 3280;
3289 -> 3282;
3290 -> 3281;
3290 -> 3282;
3291 -> 3273;
3291 -> 3282;
3292 -> 3282;
3293 -> 3283;
3293 -> 3292;
3294 -> 3293;
3294 -> 3254;
3294 -> 3292;
3295 -> 0;
3295 -> 3292;
3296 -> 3292;
3297 -> 3294;
3297 -> 3296;
3298 -> 3295;
3298 -> 3296;
3299 -> 3297;
3299 -> 3282;
3300 -> 3282;
3301 -> 3300;
3301 -> 3282;
3302 -> 3285;
3302 -> 3282;
3303 -> 3300;
3303 -> 3282;
3304 -> 3291;
3304 -> 3254;
3304 -> 3302;
3304 -> 3303;
3304 -> 3301;
3304 -> 3282;
3305 -> 3291;
3305 -> 3304;
3305 -> 3282;
3306 -> 3264;
3307 -> 3264;
3308 -> 3266;
3308 -> 3307;
3309 -> 3308;
3309 -> 3304;
3309 -> 3307;
3310 -> 3309;
3310 -> 3264;
3311 -> 3270;
3311 -> 0;
3311 -> 3264;
3312 -> 3264;
3313 -> 3310;
3313 -> 3311;
3313 -> 3264;
3314 -> 3273;
3314 -> 3304;
3314 -> 3313;
3315 -> 3265;
3315 -> 3313;
3316 -> 3266;
3316 -> 3313;
3317 -> 3267;
3317 -> 3313;
3318 -> 3268;
3318 -> 3313;
3319 -> 3269;
3319 -> 3313;
3320 -> 3270;
3320 -> 3313;
3321 -> 3271;
3321 -> 3313;
3322 -> 3290;
3322 -> 3313;
3323 -> 3313;
3324 -> 3314;
3324 -> 3323;
3325 -> 3315;
3325 -> 3323;
3326 -> 3316;
3326 -> 3323;
3327 -> 3317;
3327 -> 3323;
3328 -> 3318;
3328 -> 3323;
3329 -> 3319;
3329 -> 3323;
3330 -> 3320;
3330 -> 3323;
3331 -> 3321;
3331 -> 3323;
3332 -> 3322;
3332 -> 3323;
3333 -> 3325;
3333 -> 3304;
3333 -> 3323;
3334 -> 0;
3334 -> 3323;
3335 -> 3323;
3336 -> 3333;
3336 -> 3335;
3337 -> 3334;
3337 -> 3335;
3338 -> 3323;
3339 -> 3325;
3339 -> 3338;
3340 -> 3339;
3340 -> 3304;
3340 -> 3338;
3341 -> 0;
3341 -> 3338;
3342 -> 3338;
3343 -> 3340;
3343 -> 3342;
3344 -> 3341;
3344 -> 3342;
3345 -> 3343;
3345 -> 3323;
3346 -> 3324;
3346 -> 3323;
3347 -> 3313;
3348 -> 3008;
3348 -> 3304;
3348 -> 0;
3348 -> 3007;
3349 -> 3008;
3349 -> 3304;
3349 -> 3010;
3349 -> 3007;
3350 -> 3348;
3350 -> 2995;
3351 -> 2960;
3351 -> 3304;
3352 -> 2963;
3352 -> 3304;
3353 -> 3351;
3353 -> 3304;
3354 -> 3352;
3354 -> 3304;
3355 -> 3304;
3356 -> 3304;
3356 -> 3355;
3357 -> 3356;
3357 -> 3304;
3357 -> 0;
3357 -> 3355;
3358 -> 3355;
3359 -> 3356;
3359 -> 3304;
3359 -> 3358;
3359 -> 3355;
3360 -> 3357;
3360 -> 3304;
3361 -> 3304;
3362 -> 3304;
3362 -> 3361;
3363 -> 3362;
3363 -> 3304;
3363 -> 0;
3363 -> 3361;
3364 -> 3363;
3364 -> 3304;
3365 -> 3304;
3366 -> 3353;
3366 -> 3304;
3367 -> 3354;
3367 -> 3304;
3368 -> 3304;
3369 -> 3304;
3370 -> 3368;
3370 -> 3369;
3371 -> 3370;
3371 -> 0;
3371 -> 3369;
3372 -> 3370;
3372 -> 0;
3372 -> 3369;
3373 -> 3369;
3374 -> 0;
3374 -> 3369;
3375 -> 3370;
3375 -> 3374;
3375 -> 3369;
3376 -> 0;
3376 -> 3369;
3377 -> 3370;
3377 -> 3376;
3377 -> 3369;
3378 -> 3369;
3379 -> 0;
3379 -> 3369;
3380 -> 3370;
3380 -> 3379;
3380 -> 3369;
3381 -> 3380;
3381 -> 3369;
3382 -> 3369;
3383 -> 3381;
3383 -> 3382;
3384 -> 3382;
3385 -> 3383;
3385 -> 3384;
3385 -> 3382;
3386 -> 3304;
3387 -> 3366;
3387 -> 3386;
3387 -> 3304;
3388 -> 3366;
3388 -> 3304;
3389 -> 3367;
3389 -> 3304;
3390 -> 3304;
3391 -> 3304;
3392 -> 3304;
3393 -> 3353;
3393 -> 3304;
3394 -> 3304;
3395 -> 3304;
3396 -> 3354;
3396 -> 3304;
3397 -> 3391;
3397 -> 3304;
3398 -> 3392;
3398 -> 3304;
3399 -> 3393;
3399 -> 3304;
3400 -> 3394;
3400 -> 3304;
3401 -> 3395;
3401 -> 3304;
3402 -> 3396;
3402 -> 3304;
3403 -> 3304;
3404 -> 3397;
3404 -> 3403;
3405 -> 3404;
3405 -> 3304;
3405 -> 3403;
3406 -> 0;
3406 -> 3403;
3407 -> 3403;
3408 -> 3405;
3408 -> 3407;
3409 -> 3406;
3409 -> 3407;
3410 -> 3408;
3410 -> 3304;
3411 -> 3391;
3412 -> 3399;
3412 -> 3391;
3413 -> 3401;
3413 -> 3391;
3414 -> 3402;
3414 -> 3391;
3415 -> 3332;
3415 -> 3391;
3416 -> 3400;
3416 -> 3391;
3417 -> 3391;
3418 -> 3411;
3418 -> 3417;
3419 -> 3412;
3419 -> 3417;
3420 -> 3413;
3420 -> 3417;
3421 -> 3411;
3421 -> 3417;
3422 -> 3414;
3422 -> 3417;
3423 -> 3415;
3423 -> 3417;
3424 -> 3416;
3424 -> 3417;
3425 -> 3397;
3425 -> 3417;
3426 -> 3417;
3427 -> 3417;
3428 -> 3425;
3428 -> 3424;
3428 -> 3417;
3429 -> 3419;
3429 -> 3428;
3430 -> 3422;
3430 -> 3428;
3431 -> 3420;
3431 -> 3428;
3432 -> 3427;
3432 -> 3428;
3433 -> 3428;
3434 -> 3429;
3434 -> 3428;
3435 -> 3430;
3435 -> 3428;
3436 -> 3431;
3436 -> 3428;
3437 -> 3432;
3437 -> 3428;
3438 -> 3433;
3438 -> 3428;
3439 -> 3438;
3440 -> 3434;
3440 -> 3439;
3440 -> 3438;
3441 -> 3428;
3442 -> 3420;
3442 -> 0;
3442 -> 3428;
3443 -> 3421;
3443 -> 3442;
3444 -> 3442;
3445 -> 3442;
3445 -> 3444;
3446 -> 3443;
3446 -> 3444;
3447 -> 3445;
3447 -> 0;
3447 -> 3444;
3448 -> 3444;
3449 -> 3447;
3449 -> 3444;
3450 -> 3446;
3450 -> 3449;
3451 -> 3426;
3451 -> 3442;
3452 -> 3423;
3452 -> 3442;
3453 -> 3450;
3453 -> 3442;
3454 -> 3451;
3454 -> 3442;
3455 -> 3442;
3456 -> 3442;
3456 -> 3428;
3457 -> 0;
3457 -> 3442;
3458 -> 3442;
3459 -> 3456;
3459 -> 3458;
3460 -> 3457;
3460 -> 3458;
3461 -> 3453;
3461 -> 3442;
3462 -> 3454;
3462 -> 3442;
3463 -> 3455;
3463 -> 3442;
3464 -> 3461;
3464 -> 3442;
3465 -> 3462;
3465 -> 3442;
3466 -> 3463;
3466 -> 3442;
3467 -> 3442;
3468 -> 3464;
3468 -> 3442;
3469 -> 3465;
3469 -> 3442;
3470 -> 3452;
3470 -> 3442;
3471 -> 3442;
3472 -> 3467;
3472 -> 3471;
3473 -> 3467;
3473 -> 3471;
3474 -> 3468;
3474 -> 3471;
3475 -> 3469;
3475 -> 3471;
3476 -> 3470;
3476 -> 3471;
3477 -> 3467;
3477 -> 3471;
3478 -> 3442;
3478 -> 3471;
3479 -> 3478;
3479 -> 3428;
3479 -> 3471;
3480 -> 0;
3480 -> 3471;
3481 -> 3471;
3482 -> 3479;
3482 -> 3481;
3483 -> 3480;
3483 -> 3481;
3484 -> 3472;
3484 -> 3471;
3485 -> 3473;
3485 -> 3471;
3486 -> 3474;
3486 -> 3471;
3487 -> 3475;
3487 -> 3471;
3488 -> 3476;
3488 -> 3471;
3489 -> 3477;
3489 -> 3471;
3490 -> 3471;
3491 -> 3484;
3491 -> 3490;
3492 -> 3485;
3492 -> 3490;
3493 -> 3486;
3493 -> 3490;
3494 -> 3487;
3494 -> 3490;
3495 -> 3488;
3495 -> 3490;
3496 -> 3489;
3496 -> 3490;
3497 -> 3491;
3497 -> 3490;
3498 -> 3492;
3498 -> 3490;
3499 -> 3493;
3499 -> 3490;
3500 -> 3494;
3500 -> 3490;
3501 -> 3492;
3501 -> 3428;
3501 -> 3490;
3502 -> 3495;
3502 -> 3490;
3503 -> 3496;
3503 -> 3490;
3504 -> 3490;
3505 -> 3497;
3505 -> 3504;
3506 -> 3498;
3506 -> 3504;
3507 -> 3499;
3507 -> 3504;
3508 -> 3500;
3508 -> 3504;
3509 -> 3501;
3509 -> 3504;
3510 -> 3502;
3510 -> 3504;
3511 -> 3503;
3511 -> 3504;
3512 -> 3504;
3513 -> 3505;
3513 -> 3512;
3513 -> 3504;
3514 -> 3504;
3515 -> 3506;
3515 -> 3514;
3515 -> 3504;
3516 -> 3506;
3516 -> 3428;
3516 -> 3504;
3517 -> 3506;
3517 -> 3504;
3518 -> 3504;
3519 -> 3506;
3519 -> 3505;
3520 -> 3510;
3520 -> 3505;
3521 -> 3511;
3521 -> 3505;
3522 -> 3519;
3522 -> 3505;
3523 -> 3521;
3523 -> 3505;
3524 -> 3522;
3524 -> 3505;
3525 -> 3505;
3526 -> 3522;
3526 -> 3428;
3526 -> 3505;
3527 -> 3505;
3528 -> 3505;
3528 -> 3428;
3529 -> 3505;
3530 -> 3522;
3530 -> 3505;
3531 -> 3530;
3531 -> 3505;
3532 -> 3505;
3533 -> 3529;
3533 -> 3532;
3533 -> 3505;
3534 -> 3505;
3534 -> 0;
3534 -> 3391;
3535 -> 3391;
3535 -> 3534;
3536 -> 3410;
3536 -> 3534;
3537 -> 3534;
3538 -> 3535;
3538 -> 3537;
3539 -> 3536;
3539 -> 3537;
3540 -> 3304;
3540 -> 3537;
3541 -> 3540;
3541 -> 3505;
3541 -> 3537;
3542 -> 3538;
3542 -> 3537;
3543 -> 3539;
3543 -> 3537;
3544 -> 3537;
3545 -> 3541;
3545 -> 3544;
3546 -> 3542;
3546 -> 3544;
3547 -> 3543;
3547 -> 3544;
3548 -> 3544;
3549 -> 3545;
3549 -> 3548;
3549 -> 3544;
3550 -> 3544;
3551 -> 3546;
3551 -> 3550;
3551 -> 3544;
3552 -> 3551;
3552 -> 3547;
3552 -> 3544;
3553 -> 3546;
3553 -> 3552;
3554 -> 3545;
3554 -> 3553;
3554 -> 3505;
3554 -> 3552;
3555 -> 3537;
3556 -> 3534;
3557 -> 3505;
3557 -> 3391;
3558 -> 3391;
3559 -> 3557;
3559 -> 3558;
3560 -> 3398;
3560 -> 3558;
3561 -> 3560;
3561 -> 3554;
3561 -> 3558;
3562 -> 3561;
3562 -> 3559;
3562 -> 3505;
3562 -> 3558;
3563 -> 3391;
3564 -> 3304;
3564 -> 3562;
3565 -> 3304;
3566 -> 3392;
3566 -> 3565;
3567 -> 3566;
3567 -> 3562;
3567 -> 3565;
3568 -> 3567;
3568 -> 3304;
3569 -> 3304;
3570 -> 2900;
3570 -> 3569;
3571 -> 3570;
3571 -> 3562;
3571 -> 0;
3571 -> 3569;
3572 -> 3571;
3572 -> 3304;
3573 -> 3304;
3573 -> 3572;
3574 -> 2962;
3574 -> 0;
3574 -> 3304;
3575 -> 3304;
3576 -> 3573;
3576 -> 2958;
3577 -> 2933;
3578 -> 2874;
3578 -> 2872;
3579 -> 2873;
3579 -> 2872;
3580 -> 3578;
3580 -> 3579;
3580 -> 3520;
3580 -> 3562;
3580 -> 2872;
3581 -> 2872;
3582 -> 2872;
3583 -> 2877;
3583 -> 3582;
3583 -> 2872;
3584 -> 2900;
3584 -> 2872;
3585 -> 2872;
3586 -> 3584;
3586 -> 3585;
3587 -> 3585;
3588 -> 3586;
3588 -> 3587;
3589 -> 3587;
3590 -> 3588;
3590 -> 3580;
3590 -> 3589;
3591 -> 3590;
3591 -> 3585;
3592 -> 3585;
3593 -> 3586;
3593 -> 3592;
3594 -> 3593;
3594 -> 3580;
3594 -> 3592;
3595 -> 3594;
3595 -> 3585;
3596 -> 3595;
3596 -> 3580;
3597 -> 3595;
3597 -> 3580;
3597 -> 0;
3597 -> 3596;
3598 -> 3597;
3599 -> 3581;
3599 -> 2872;
3600 -> 3599;
3601 -> 2879;
3601 -> 3599;
3602 -> 3599;
3603 -> 2873;
3603 -> 3599;
3604 -> 2874;
3604 -> 3599;
3605 -> 2876;
3605 -> 3599;
3606 -> 3600;
3606 -> 3599;
3607 -> 2877;
3607 -> 3599;
3608 -> 2913;
3608 -> 3599;
3609 -> 3599;
3610 -> 3601;
3610 -> 3609;
3611 -> 3602;
3611 -> 3609;
3612 -> 3603;
3612 -> 3609;
3613 -> 3604;
3613 -> 3609;
3614 -> 3605;
3614 -> 3609;
3615 -> 3606;
3615 -> 3609;
3616 -> 3607;
3616 -> 3609;
3617 -> 3608;
3617 -> 3609;
3618 -> 2878;
3618 -> 3609;
3619 -> 3610;
3619 -> 3609;
3620 -> 3611;
3620 -> 3609;
3621 -> 3612;
3621 -> 3609;
3622 -> 3613;
3622 -> 3609;
3623 -> 3614;
3623 -> 3609;
3624 -> 3615;
3624 -> 3609;
3625 -> 3616;
3625 -> 3609;
3626 -> 3617;
3626 -> 3609;
3627 -> 3609;
3628 -> 3619;
3628 -> 3627;
3629 -> 3620;
3629 -> 3627;
3630 -> 3621;
3630 -> 3627;
3631 -> 3622;
3631 -> 3627;
3632 -> 3623;
3632 -> 3627;
3633 -> 3624;
3633 -> 3627;
3634 -> 3625;
3634 -> 3627;
3635 -> 3626;
3635 -> 3627;
3636 -> 3618;
3636 -> 3627;
3637 -> 3627;
3638 -> 3630;
3638 -> 3637;
3638 -> 3627;
3639 -> 3627;
3640 -> 3631;
3640 -> 3639;
3640 -> 3627;
3641 -> 3627;
3642 -> 3627;
3643 -> 3627;
3644 -> 3643;
3645 -> 3580;
3645 -> 0;
3646 -> 3632;
3646 -> 3580;
3647 -> 3580;
3647 -> 3646;
3647 -> 0;
3647 -> 3609;
3648 -> 3580;
3648 -> 3646;
3648 -> 0;
3648 -> 3599;
3649 -> 2875;
3649 -> 3648;
3650 -> 3649;
3650 -> 0;
3650 -> 3648;
3651 -> 3649;
3651 -> 3648;
3652 -> 2872;
3653 -> 3652;
3654 -> 3653;
3655 -> 3652;
3656 -> 3652;
3657 -> 2872;
3658 -> 2872;
3659 -> 2878;
3659 -> 3658;
3660 -> 3658;
3661 -> 3659;
3661 -> 3660;
3662 -> 2872;
3663 -> 3580;
3663 -> 3662;
3664 -> 3580;
3665 -> 3580;
3665 -> 3664;
3666 -> 3651;
3666 -> 3664;
3667 -> 3580;
3667 -> 3664;
3668 -> 3665;
3668 -> 3664;
3669 -> 3664;
3670 -> 3669;
3670 -> 3667;
3670 -> 3664;
3671 -> 3665;
3671 -> 3667;
3671 -> 3664;
3672 -> 3666;
3672 -> 3667;
3672 -> 3664;
3673 -> 2846;
3674 -> 3580;
3674 -> 3673;
3675 -> 3674;
3675 -> 3670;
3675 -> 3669;
3675 -> 3673;
3676 -> 3675;
3676 -> 2846;
3677 -> 2846;
3678 -> 3580;
3678 -> 3677;
3679 -> 3678;
3679 -> 3671;
3679 -> 3651;
3679 -> 0;
3679 -> 3677;
3680 -> 3679;
3680 -> 2846;
3681 -> 2846;
3682 -> 3580;
3682 -> 3681;
3683 -> 3682;
3683 -> 3671;
3683 -> 3681;
3684 -> 3683;
3684 -> 2846;
3685 -> 2849;
3685 -> 2846;
3686 -> 2846;
3687 -> 3684;
3687 -> 3686;
3688 -> 3685;
3688 -> 3686;
3689 -> 3687;
3689 -> 3651;
3689 -> 0;
3689 -> 3686;
3690 -> 3688;
3690 -> 3689;
3691 -> 3680;
3691 -> 3690;
3691 -> 2846;
3692 -> 3676;
3692 -> 3691;
3692 -> 2846;
3693 -> 3692;
3694 -> 3693;
3694 -> 3692;
3695 -> 3580;
3695 -> 3692;
3696 -> 3695;
3696 -> 984;
3697 -> 2838;
3697 -> 984;
3698 -> 2837;
3698 -> 984;
3699 -> 2839;
3699 -> 984;
3700 -> 984;
3701 -> 3696;
3701 -> 3700;
3702 -> 3697;
3702 -> 3700;
3703 -> 3698;
3703 -> 3700;
3704 -> 3699;
3704 -> 3700;
3705 -> 2841;
3705 -> 3700;
3706 -> 3700;
3707 -> 3701;
3707 -> 3706;
3708 -> 3707;
3708 -> 3700;
3709 -> 3708;
3710 -> 3708;
3711 -> 3701;
3711 -> 3710;
3712 -> 3711;
3712 -> 3671;
3712 -> 3690;
3712 -> 0;
3712 -> 3710;
3713 -> 3711;
3713 -> 3672;
3713 -> 3710;
3714 -> 3713;
3714 -> 3708;
3715 -> 3708;
3716 -> 3715;
3716 -> 3708;
3717 -> 3709;
3717 -> 3708;
3718 -> 3702;
3718 -> 3708;
3719 -> 3703;
3719 -> 3708;
3720 -> 3704;
3720 -> 3708;
3721 -> 3708;
3722 -> 3716;
3722 -> 3721;
3723 -> 3717;
3723 -> 3721;
3724 -> 3718;
3724 -> 3721;
3725 -> 3719;
3725 -> 3721;
3726 -> 3720;
3726 -> 3721;
3727 -> 3705;
3727 -> 3721;
3728 -> 3721;
3729 -> 3725;
3729 -> 3728;
3729 -> 3721;
3730 -> 3721;
3731 -> 3724;
3731 -> 3730;
3731 -> 3721;
3732 -> 3722;
3732 -> 3690;
3732 -> 0;
3732 -> 3721;
3733 -> 3722;
3733 -> 3732;
3734 -> 3726;
3734 -> 3732;
3735 -> 3733;
3735 -> 3734;
3735 -> 3690;
3735 -> 3732;
3736 -> 3735;
3736 -> 3732;
3737 -> 3732;
3738 -> 3736;
3738 -> 3737;
3738 -> 3732;
3739 -> 3738;
3740 -> 3727;
3740 -> 3739;
3740 -> 3738;
3741 -> 3724;
3741 -> 3739;
3741 -> 3738;
3742 -> 3725;
3742 -> 3739;
3742 -> 3738;
3743 -> 3736;
3743 -> 3738;
3744 -> 3738;
3745 -> 3739;
3745 -> 3738;
3746 -> 3743;
3746 -> 3744;
3746 -> 3745;
3746 -> 3735;
3746 -> 3740;
3746 -> 3741;
3746 -> 3742;
3746 -> 3738;
3747 -> 3746;
3747 -> 3744;
3748 -> 3746;
3748 -> 3744;
3749 -> 3746;
3749 -> 3744;
3750 -> 3746;
3750 -> 3744;
3751 -> 3746;
3751 -> 3744;
3752 -> 3747;
3752 -> 3744;
3753 -> 3748;
3753 -> 3744;
3754 -> 3749;
3754 -> 3744;
3755 -> 3750;
3755 -> 3744;
3756 -> 3744;
3757 -> 3752;
3757 -> 3756;
3758 -> 3753;
3758 -> 3756;
3759 -> 3754;
3759 -> 3756;
3760 -> 3755;
3760 -> 3756;
3761 -> 3751;
3761 -> 3756;
3762 -> 3758;
3762 -> 3746;
3762 -> 3756;
3763 -> 3757;
3763 -> 3762;
3764 -> 3758;
3764 -> 3762;
3765 -> 3759;
3765 -> 3762;
3766 -> 3760;
3766 -> 3762;
3767 -> 3762;
3768 -> 3761;
3768 -> 3767;
3769 -> 3768;
3769 -> 3746;
3769 -> 3767;
3770 -> 3769;
3770 -> 3762;
3771 -> 3762;
3772 -> 3761;
3772 -> 3771;
3773 -> 3771;
3774 -> 3772;
3774 -> 3773;
3775 -> 3774;
3775 -> 3746;
3775 -> 3773;
3776 -> 3775;
3776 -> 3771;
3777 -> 3776;
3777 -> 3771;
3778 -> 3776;
3778 -> 3746;
3778 -> 0;
3778 -> 3771;
3779 -> 3776;
3779 -> 3771;
3780 -> 3776;
3780 -> 3746;
3780 -> 3771;
3781 -> 3780;
3781 -> 3762;
3782 -> 3761;
3782 -> 3746;
3782 -> 3762;
3783 -> 3762;
3784 -> 3763;
3784 -> 3783;
3785 -> 3764;
3785 -> 3783;
3786 -> 3765;
3786 -> 3783;
3787 -> 3766;
3787 -> 3783;
3788 -> 3770;
3788 -> 3783;
3789 -> 3781;
3789 -> 3783;
3790 -> 3782;
3790 -> 3783;
3791 -> 3785;
3791 -> 3783;
3792 -> 3785;
3792 -> 3791;
3792 -> 0;
3792 -> 3783;
3793 -> 3785;
3793 -> 3791;
3793 -> 0;
3793 -> 3783;
3794 -> 3785;
3794 -> 3783;
3795 -> 3789;
3795 -> 3783;
3796 -> 3794;
3796 -> 3795;
3796 -> 3791;
3796 -> 3783;
3797 -> 3787;
3797 -> 3783;
3798 -> 3797;
3798 -> 3783;
3799 -> 3784;
3799 -> 3783;
3800 -> 3796;
3800 -> 3783;
3801 -> 3786;
3801 -> 3783;
3802 -> 3788;
3802 -> 3783;
3803 -> 3790;
3803 -> 3783;
3804 -> 3783;
3805 -> 3799;
3805 -> 3804;
3806 -> 3800;
3806 -> 3804;
3807 -> 3801;
3807 -> 3804;
3808 -> 3802;
3808 -> 3804;
3809 -> 3803;
3809 -> 3804;
3810 -> 3804;
3811 -> 3805;
3811 -> 3810;
3811 -> 3804;
3812 -> 3806;
3812 -> 3804;
3813 -> 3808;
3813 -> 3804;
3814 -> 3804;
3815 -> 3812;
3815 -> 3813;
3815 -> 3814;
3815 -> 3796;
3815 -> 3804;
3816 -> 3804;
3817 -> 3815;
3817 -> 3804;
3818 -> 3804;
3819 -> 3816;
3819 -> 3818;
3819 -> 3804;
3820 -> 3815;
3820 -> 3804;
3821 -> 3820;
3821 -> 3783;
3822 -> 3797;
3822 -> 3821;
3823 -> 3762;
3824 -> 3744;
3825 -> 3735;
3825 -> 3732;
3826 -> 3708;
3827 -> 3714;
3827 -> 3826;
3828 -> 3825;
3828 -> 3826;
3829 -> 3828;
3829 -> 3826;
3830 -> 3827;
3830 -> 3828;
3831 -> 3830;
3831 -> 3828;
3831 -> 3815;
3832 -> 3831;
3832 -> 3828;
3833 -> 984;
3834 -> 3828;
3834 -> 3833;
3835 -> 3834;
3835 -> 3831;
3835 -> 3833;
3836 -> 3835;
3836 -> 2553;
3836 -> 2547;
3837 -> 3835;
3837 -> 2738;
3838 -> 3835;
3839 -> 3835;
3840 -> 3835;
3840 -> 2666;
3841 -> 3835;
3841 -> 0;
3842 -> 3835;
3842 -> 2797;
3843 -> 3842;
3843 -> 2810;
3844 -> 3835;
3844 -> 2797;
3845 -> 3844;
3845 -> 2815;
3846 -> 3835;
3847 -> 3835;
3848 -> 3835;
3849 -> 3847;
3849 -> 3848;
3850 -> 3847;
3850 -> 3848;
3851 -> 3847;
3851 -> 3848;
3852 -> 3847;
3852 -> 3848;
3853 -> 3847;
3853 -> 3848;
3854 -> 3835;
3854 -> 3848;
3855 -> 3848;
3856 -> 3850;
3856 -> 3855;
3856 -> 3848;
3857 -> 3848;
3858 -> 3857;
3858 -> 3835;
3859 -> 3835;
3860 -> 3858;
3860 -> 3859;
3860 -> 3835;
3861 -> 3835;
3862 -> 3835;
3862 -> 3861;
3863 -> 3862;
3863 -> 3835;
3863 -> 0;
3863 -> 3861;
3864 -> 3861;
3865 -> 3862;
3865 -> 3835;
3865 -> 3864;
3865 -> 3861;
3866 -> 3863;
3866 -> 3835;
3867 -> 3835;
3868 -> 3835;
3869 -> 3835;
3870 -> 3868;
3870 -> 3835;
3871 -> 3869;
3871 -> 3835;
3872 -> 3870;
3872 -> 3835;
3873 -> 3871;
3873 -> 3835;
3874 -> 3835;
3875 -> 3835;
3875 -> 3874;
3876 -> 3875;
3876 -> 3835;
3876 -> 0;
3876 -> 3874;
3877 -> 3874;
3878 -> 3875;
3878 -> 3835;
3878 -> 3877;
3878 -> 3874;
3879 -> 3876;
3879 -> 3835;
3880 -> 3870;
3880 -> 3835;
3881 -> 3835;
3882 -> 3880;
3882 -> 3881;
3883 -> 3882;
3883 -> 0;
3883 -> 3881;
3884 -> 3882;
3884 -> 0;
3884 -> 3881;
3885 -> 3881;
3886 -> 0;
3886 -> 3881;
3887 -> 3882;
3887 -> 3886;
3887 -> 3881;
3888 -> 0;
3888 -> 3881;
3889 -> 3882;
3889 -> 3888;
3889 -> 3881;
3890 -> 3881;
3891 -> 0;
3891 -> 3881;
3892 -> 3882;
3892 -> 3891;
3892 -> 3881;
3893 -> 3892;
3893 -> 3881;
3894 -> 3881;
3895 -> 3893;
3895 -> 3894;
3896 -> 3894;
3897 -> 3895;
3897 -> 3896;
3897 -> 3894;
3898 -> 3835;
3899 -> 3835;
3900 -> 3872;
3900 -> 3835;
3901 -> 3872;
3901 -> 3835;
3902 -> 3872;
3902 -> 3835;
3903 -> 3835;
3904 -> 3873;
3904 -> 3835;
3905 -> 3835;
3906 -> 3835;
3907 -> 3835;
3907 -> 3906;
3908 -> 3907;
3908 -> 3835;
3908 -> 0;
3908 -> 3906;
3909 -> 3906;
3910 -> 3907;
3910 -> 3835;
3910 -> 3909;
3910 -> 3906;
3911 -> 3908;
3911 -> 3835;
3912 -> 3870;
3912 -> 0;
3912 -> 3835;
3913 -> 3835;
3914 -> 3872;
3914 -> 3835;
3915 -> 3873;
3915 -> 3835;
3916 -> 3835;
3917 -> 3835;
3917 -> 3916;
3918 -> 3917;
3918 -> 3835;
3918 -> 0;
3918 -> 3916;
3919 -> 3916;
3920 -> 3917;
3920 -> 3835;
3920 -> 3919;
3920 -> 3916;
3921 -> 3918;
3921 -> 3835;
3922 -> 3835;
3923 -> 3835;
3923 -> 3922;
3924 -> 3923;
3924 -> 3835;
3924 -> 0;
3924 -> 3922;
3925 -> 3924;
3925 -> 3835;
3926 -> 3835;
3927 -> 3915;
3927 -> 3872;
3928 -> 3914;
3928 -> 3872;
3929 -> 3927;
3929 -> 3872;
3930 -> 3872;
3931 -> 3872;
3932 -> 3930;
3932 -> 3931;
3933 -> 3932;
3933 -> 0;
3933 -> 3931;
3934 -> 3932;
3934 -> 0;
3934 -> 3931;
3935 -> 3931;
3936 -> 0;
3936 -> 3931;
3937 -> 3932;
3937 -> 3936;
3937 -> 3931;
3938 -> 0;
3938 -> 3931;
3939 -> 3932;
3939 -> 3938;
3939 -> 3931;
3940 -> 3931;
3941 -> 0;
3941 -> 3931;
3942 -> 3932;
3942 -> 3941;
3942 -> 3931;
3943 -> 3942;
3943 -> 3931;
3944 -> 3931;
3945 -> 3943;
3945 -> 3944;
3946 -> 3944;
3947 -> 3945;
3947 -> 3946;
3947 -> 3944;
3948 -> 3872;
3949 -> 3928;
3949 -> 3948;
3949 -> 3872;
3950 -> 3928;
3950 -> 3872;
3951 -> 3928;
3951 -> 3872;
3952 -> 3929;
3952 -> 3872;
3953 -> 3950;
3953 -> 3872;
3954 -> 3951;
3954 -> 3872;
3955 -> 3952;
3955 -> 3872;
3956 -> 3953;
3956 -> 3872;
3957 -> 3954;
3957 -> 3872;
3958 -> 3872;
3959 -> 3955;
3959 -> 3872;
3960 -> 3872;
3961 -> 3872;
3962 -> 3872;
3962 -> 3961;
3963 -> 3962;
3963 -> 3872;
3963 -> 0;
3963 -> 3961;
3964 -> 3961;
3965 -> 3962;
3965 -> 3872;
3965 -> 3964;
3965 -> 3961;
3966 -> 3963;
3966 -> 3872;
3967 -> 3872;
3968 -> 3872;
3969 -> 3956;
3969 -> 3872;
3970 -> 3957;
3970 -> 3872;
3971 -> 3958;
3971 -> 3872;
3972 -> 3959;
3972 -> 3872;
3973 -> 3958;
3973 -> 3872;
3974 -> 3970;
3974 -> 3872;
3975 -> 3872;
3976 -> 3958;
3977 -> 3958;
3978 -> 3958;
3979 -> 3976;
3979 -> 3978;
3980 -> 3979;
3980 -> 3958;
3981 -> 3958;
3982 -> 3977;
3982 -> 3981;
3983 -> 3982;
3983 -> 3958;
3984 -> 3980;
3984 -> 3983;
3984 -> 3958;
3985 -> 3872;
3986 -> 3872;
3987 -> 3985;
3987 -> 3958;
3987 -> 3986;
3987 -> 3872;
3988 -> 3872;
3989 -> 3988;
3989 -> 3958;
3990 -> 3989;
3990 -> 3872;
3991 -> 3872;
3992 -> 3991;
3992 -> 3958;
3993 -> 3992;
3993 -> 3872;
3994 -> 3872;
3995 -> 3872;
3996 -> 3957;
3996 -> 3995;
3997 -> 3995;
3998 -> 3996;
3998 -> 3997;
3999 -> 3998;
3999 -> 3958;
3999 -> 3997;
4000 -> 3999;
4000 -> 3995;
4001 -> 4000;
4001 -> 3872;
4002 -> 3958;
4003 -> 3956;
4003 -> 3958;
4004 -> 3957;
4004 -> 3958;
4005 -> 3959;
4005 -> 3958;
4006 -> 3958;
4007 -> 4003;
4007 -> 3958;
4008 -> 4004;
4008 -> 3958;
4009 -> 3958;
4010 -> 4005;
4010 -> 3958;
4011 -> 3958;
4012 -> 4008;
4012 -> 3958;
4013 -> 3958;
4014 -> 3958;
4015 -> 3958;
4016 -> 4014;
4016 -> 3958;
4016 -> 4015;
4017 -> 3958;
4018 -> 4017;
4018 -> 3958;
4019 -> 3958;
4020 -> 4019;
4020 -> 3958;
4021 -> 3958;
4022 -> 3958;
4023 -> 3957;
4023 -> 4022;
4024 -> 4022;
4025 -> 4023;
4025 -> 4024;
4026 -> 4025;
4026 -> 4022;
4027 -> 4026;
4027 -> 3958;
4028 -> 3958;
4028 -> 3872;
4029 -> 3872;
4030 -> 3872;
4031 -> 3914;
4031 -> 3835;
4032 -> 3915;
4032 -> 3835;
4033 -> 4031;
4033 -> 3835;
4034 -> 4032;
4034 -> 3835;
4035 -> 3835;
4035 -> 3958;
4036 -> 3958;
4036 -> 3914;
4036 -> 3835;
4037 -> 4031;
4037 -> 4036;
4038 -> 4032;
4038 -> 4036;
4039 -> 4036;
4040 -> 4036;
4041 -> 4036;
4042 -> 4036;
4043 -> 4037;
4043 -> 4036;
4044 -> 4036;
4045 -> 4036;
4046 -> 4038;
4046 -> 4036;
4047 -> 4040;
4047 -> 3958;
4047 -> 4036;
4048 -> 0;
4048 -> 4036;
4049 -> 4036;
4050 -> 4047;
4050 -> 4049;
4051 -> 4048;
4051 -> 4049;
4052 -> 4036;
4053 -> 4040;
4053 -> 4052;
4054 -> 4053;
4054 -> 4036;
4055 -> 4039;
4055 -> 4036;
4056 -> 3907;
4056 -> 3958;
4056 -> 0;
4056 -> 3906;
4057 -> 3907;
4057 -> 3958;
4057 -> 3909;
4057 -> 3906;
4058 -> 4056;
4058 -> 3835;
4059 -> 3873;
4059 -> 3958;
4060 -> 3958;
4061 -> 4059;
4061 -> 3958;
4062 -> 3958;
4063 -> 3958;
4063 -> 4062;
4064 -> 4063;
4064 -> 3958;
4064 -> 0;
4064 -> 4062;
4065 -> 4062;
4066 -> 4063;
4066 -> 3958;
4066 -> 4065;
4066 -> 4062;
4067 -> 4064;
4067 -> 3958;
4068 -> 3958;
4069 -> 3958;
4069 -> 4068;
4070 -> 4069;
4070 -> 3958;
4070 -> 0;
4070 -> 4068;
4071 -> 4070;
4071 -> 3958;
4072 -> 3958;
4073 -> 4060;
4073 -> 3958;
4074 -> 4061;
4074 -> 3958;
4075 -> 4060;
4075 -> 3958;
4076 -> 3958;
4077 -> 4075;
4077 -> 4076;
4078 -> 4077;
4078 -> 0;
4078 -> 4076;
4079 -> 4077;
4079 -> 0;
4079 -> 4076;
4080 -> 4076;
4081 -> 0;
4081 -> 4076;
4082 -> 4077;
4082 -> 4081;
4082 -> 4076;
4083 -> 0;
4083 -> 4076;
4084 -> 4077;
4084 -> 4083;
4084 -> 4076;
4085 -> 4076;
4086 -> 0;
4086 -> 4076;
4087 -> 4077;
4087 -> 4086;
4087 -> 4076;
4088 -> 4087;
4088 -> 4076;
4089 -> 4076;
4090 -> 4088;
4090 -> 4089;
4091 -> 4089;
4092 -> 4090;
4092 -> 4091;
4092 -> 4089;
4093 -> 3958;
4094 -> 4073;
4094 -> 4093;
4094 -> 3958;
4095 -> 4073;
4095 -> 3958;
4096 -> 4074;
4096 -> 3958;
4097 -> 4073;
4097 -> 3958;
4098 -> 4060;
4098 -> 3958;
4099 -> 4061;
4099 -> 3958;
4100 -> 4098;
4100 -> 3958;
4101 -> 4099;
4101 -> 3958;
4102 -> 4100;
4102 -> 3958;
4103 -> 3958;
4104 -> 4101;
4104 -> 3958;
4105 -> 3958;
4106 -> 3958;
4107 -> 4104;
4107 -> 4100;
4108 -> 4106;
4108 -> 4100;
4109 -> 4100;
4110 -> 4102;
4110 -> 4100;
4111 -> 4107;
4111 -> 4100;
4112 -> 4100;
4113 -> 4108;
4113 -> 4100;
4114 -> 4109;
4114 -> 4100;
4115 -> 4114;
4116 -> 4110;
4116 -> 4115;
4116 -> 4114;
4117 -> 4100;
4118 -> 4103;
4118 -> 4100;
4119 -> 4100;
4120 -> 4100;
4120 -> 4119;
4121 -> 4118;
4121 -> 4119;
4122 -> 4120;
4122 -> 0;
4122 -> 4119;
4123 -> 4119;
4124 -> 4122;
4124 -> 4119;
4125 -> 4121;
4125 -> 4124;
4126 -> 4105;
4126 -> 4100;
4127 -> 4125;
4127 -> 4100;
4128 -> 4126;
4128 -> 4100;
4129 -> 4100;
4130 -> 4100;
4131 -> 0;
4131 -> 4100;
4132 -> 4100;
4133 -> 4130;
4133 -> 4132;
4134 -> 4131;
4134 -> 4132;
4135 -> 4127;
4135 -> 4100;
4136 -> 4128;
4136 -> 4100;
4137 -> 4129;
4137 -> 4100;
4138 -> 4135;
4138 -> 4100;
4139 -> 4136;
4139 -> 4100;
4140 -> 4137;
4140 -> 4100;
4141 -> 4100;
4142 -> 4138;
4142 -> 4100;
4143 -> 4139;
4143 -> 4100;
4144 -> 4100;
4145 -> 4100;
4146 -> 4145;
4146 -> 4100;
4147 -> 0;
4147 -> 4100;
4148 -> 4100;
4149 -> 4146;
4149 -> 4148;
4150 -> 4147;
4150 -> 4148;
4151 -> 4141;
4151 -> 4100;
4152 -> 4142;
4152 -> 4100;
4153 -> 4143;
4153 -> 4100;
4154 -> 4144;
4154 -> 4100;
4155 -> 4151;
4155 -> 4100;
4156 -> 4152;
4156 -> 4100;
4157 -> 4153;
4157 -> 4100;
4158 -> 4151;
4158 -> 4100;
4159 -> 4154;
4159 -> 4100;
4160 -> 4100;
4161 -> 4100;
4162 -> 4155;
4162 -> 4161;
4162 -> 4100;
4163 -> 4155;
4163 -> 4100;
4164 -> 4155;
4164 -> 4100;
4165 -> 4100;
4166 -> 4155;
4166 -> 4100;
4167 -> 4159;
4167 -> 4100;
4168 -> 4166;
4168 -> 4100;
4169 -> 4100;
4170 -> 4166;
4170 -> 4100;
4171 -> 4100;
4172 -> 4100;
4173 -> 4100;
4174 -> 4166;
4174 -> 4100;
4175 -> 4174;
4175 -> 4100;
4176 -> 4100;
4177 -> 4173;
4177 -> 4176;
4177 -> 4100;
4178 -> 4141;
4179 -> 4017;
4179 -> 4141;
4179 -> 3958;
4180 -> 3958;
4180 -> 4179;
4181 -> 3958;
4182 -> 3835;
4182 -> 4181;
4183 -> 4182;
4183 -> 4179;
4183 -> 0;
4183 -> 4181;
4184 -> 4183;
4184 -> 3958;
4185 -> 3958;
4185 -> 4184;
4186 -> 3870;
4186 -> 0;
4186 -> 3958;
4187 -> 3958;
4188 -> 4185;
4188 -> 3835;
4189 -> 3835;
4189 -> 4155;
4189 -> 4179;
4190 -> 3835;
4191 -> 3835;
4192 -> 4190;
4192 -> 4191;
4193 -> 4191;
4194 -> 4192;
4194 -> 4193;
4195 -> 4194;
4195 -> 4189;
4195 -> 4193;
4196 -> 4195;
4196 -> 4191;
4197 -> 4191;
4198 -> 4192;
4198 -> 4197;
4199 -> 4198;
4199 -> 4189;
4199 -> 4197;
4200 -> 4199;
4200 -> 4191;
4201 -> 4200;
4201 -> 4189;
4202 -> 4200;
4202 -> 4189;
4202 -> 0;
4202 -> 4201;
4203 -> 4202;
4204 -> 3835;
4205 -> 3835;
4206 -> 3835;
4207 -> 4204;
4207 -> 3835;
4208 -> 4204;
4208 -> 3835;
4209 -> 4204;
4209 -> 3835;
4210 -> 3835;
4211 -> 3835;
4212 -> 4205;
4212 -> 4211;
4212 -> 3835;
4213 -> 3835;
4214 -> 4205;
4214 -> 4213;
4214 -> 3835;
4215 -> 3835;
4216 -> 4189;
4216 -> 0;
4217 -> 4205;
4217 -> 4189;
4218 -> 4189;
4218 -> 4217;
4218 -> 0;
4218 -> 3835;
4219 -> 3835;
4220 -> 3835;
4221 -> 4189;
4221 -> 3835;
4222 -> 4189;
4223 -> 4217;
4224 -> 4223;
4224 -> 4217;
4225 -> 4217;
4226 -> 4217;
4226 -> 4189;
4226 -> 0;
4227 -> 4225;
4227 -> 4217;
4228 -> 4217;
4229 -> 4217;
4230 -> 4217;
4231 -> 4217;
4232 -> 4217;
4233 -> 4230;
4233 -> 4217;
4234 -> 4231;
4234 -> 4217;
4235 -> 4232;
4235 -> 4217;
4236 -> 4234;
4236 -> 4230;
4237 -> 4235;
4237 -> 4230;
4238 -> 4230;
4239 -> 4230;
4239 -> 4217;
4239 -> 0;
4240 -> 4230;
4241 -> 4233;
4241 -> 4230;
4242 -> 4236;
4242 -> 4230;
4243 -> 4237;
4243 -> 4230;
4244 -> 4233;
4244 -> 4230;
4245 -> 4230;
4245 -> 0;
4246 -> 4230;
4246 -> 0;
4247 -> 4243;
4247 -> 4230;
4248 -> 4247;
4248 -> 4230;
4249 -> 4241;
4249 -> 4230;
4250 -> 4242;
4250 -> 4230;
4251 -> 4244;
4251 -> 4230;
4252 -> 4230;
4253 -> 4249;
4253 -> 4252;
4253 -> 4230;
4254 -> 4230;
4255 -> 4230;
4256 -> 4230;
4257 -> 4254;
4257 -> 4256;
4257 -> 4230;
4258 -> 4230;
4259 -> 4258;
4259 -> 4230;
4260 -> 4247;
4260 -> 4259;
4261 -> 4225;
4261 -> 4217;
4262 -> 4225;
4262 -> 4230;
4263 -> 4262;
4263 -> 4225;
4264 -> 2826;
4264 -> 4262;
4264 -> 984;
4265 -> 2827;
4265 -> 4262;
4265 -> 984;
4266 -> 4265;
4267 -> 2827;
4267 -> 4265;
4268 -> 4267;
4268 -> 4262;
4269 -> 4268;
4269 -> 4267;
4270 -> 4267;
4271 -> 2831;
4271 -> 4270;
4271 -> 4267;
4272 -> 4268;
4272 -> 4267;
4273 -> 4266;
4273 -> 4272;
4273 -> 4267;
4274 -> 2828;
4274 -> 4273;
4275 -> 4267;
4275 -> 4274;
4276 -> 2829;
4276 -> 4274;
4277 -> 4274;
4278 -> 4275;
4278 -> 4277;
4279 -> 4276;
4279 -> 4277;
4280 -> 2830;
4280 -> 4277;
4281 -> 4278;
4281 -> 4277;
4282 -> 4277;
4283 -> 4281;
4283 -> 4282;
4284 -> 4283;
4284 -> 4262;
4284 -> 4282;
4285 -> 4282;
4286 -> 4284;
4286 -> 4262;
4286 -> 4285;
4286 -> 4282;
4287 -> 4286;
4287 -> 4282;
4288 -> 4278;
4288 -> 4277;
4289 -> 4287;
4289 -> 4277;
4290 -> 4278;
4290 -> 4262;
4290 -> 4287;
4290 -> 4277;
4291 -> 4279;
4291 -> 4277;
4292 -> 4277;
4293 -> 4288;
4293 -> 4292;
4294 -> 4289;
4294 -> 4292;
4295 -> 4290;
4295 -> 4292;
4296 -> 4291;
4296 -> 4292;
4297 -> 4280;
4297 -> 4292;
4298 -> 4295;
4298 -> 4292;
4299 -> 4297;
4299 -> 4287;
4299 -> 4292;
4300 -> 0;
4300 -> 4292;
4301 -> 4297;
4301 -> 4292;
4302 -> 4292;
4303 -> 4301;
4304 -> 4301;
4305 -> 4304;
4305 -> 4301;
4306 -> 4301;
4307 -> 4301;
4308 -> 4301;
4308 -> 4307;
4309 -> 4307;
4310 -> 4309;
4310 -> 4301;
4311 -> 4299;
4311 -> 4310;
4311 -> 4301;
4312 -> 4301;
4313 -> 4301;
4313 -> 4312;
4314 -> 4312;
4315 -> 4313;
4315 -> 4314;
4316 -> 4315;
4316 -> 4299;
4316 -> 4314;
4317 -> 4316;
4317 -> 4312;
4318 -> 4317;
4318 -> 4299;
4318 -> 4312;
4319 -> 4317;
4319 -> 4299;
4319 -> 0;
4319 -> 4318;
4320 -> 4318;
4321 -> 4320;
4321 -> 4299;
4322 -> 4321;
4322 -> 4318;
4323 -> 4322;
4323 -> 4301;
4324 -> 4323;
4325 -> 4324;
4325 -> 4277;
4326 -> 4266;
4326 -> 4273;
4326 -> 984;
4327 -> 2861;
4327 -> 4321;
4328 -> 2862;
4328 -> 4321;
4329 -> 4321;
4330 -> 4327;
4330 -> 4329;
4331 -> 4328;
4331 -> 4329;
4332 -> 2865;
4332 -> 4329;
4333 -> 4330;
4333 -> 4329;
4334 -> 4333;
4334 -> 4329;
4335 -> 4331;
4335 -> 4329;
4336 -> 4329;
4337 -> 4334;
4337 -> 4336;
4338 -> 4335;
4338 -> 4336;
4339 -> 4332;
4339 -> 4336;
4340 -> 4337;
4340 -> 4321;
4340 -> 4336;
4341 -> 4338;
4341 -> 4336;
4342 -> 4337;
4342 -> 4336;
4343 -> 4336;
4344 -> 4340;
4344 -> 4343;
4345 -> 4341;
4345 -> 4343;
4346 -> 4342;
4346 -> 4343;
4347 -> 4339;
4347 -> 4343;
4348 -> 4347;
4348 -> 4340;
4348 -> 4343;
4349 -> 4344;
4349 -> 4343;
4350 -> 4346;
4350 -> 4343;
4351 -> 4345;
4351 -> 4343;
4352 -> 4343;
4353 -> 4348;
4353 -> 4352;
4354 -> 4349;
4354 -> 4352;
4355 -> 4350;
4355 -> 4352;
4356 -> 4351;
4356 -> 4352;
4357 -> 4354;
4357 -> 4352;
4358 -> 4353;
4358 -> 4357;
4358 -> 4340;
4358 -> 4352;
4359 -> 4352;
4360 -> 4358;
4360 -> 4359;
4360 -> 4352;
4361 -> 4358;
4361 -> 4352;
4362 -> 4356;
4362 -> 4352;
4363 -> 4355;
4363 -> 4352;
4364 -> 4352;
4365 -> 4361;
4365 -> 4364;
4366 -> 4362;
4366 -> 4364;
4367 -> 4363;
4367 -> 4364;
4368 -> 4358;
4368 -> 4352;
4369 -> 4333;
4369 -> 4365;
4369 -> 4329;
4370 -> 4329;
4371 -> 4369;
4371 -> 4370;
4372 -> 4332;
4372 -> 4370;
4373 -> 4368;
4373 -> 4329;
4374 -> 4329;
4375 -> 4373;
4375 -> 4374;
4376 -> 4375;
4376 -> 4374;
4377 -> 4374;
4378 -> 4374;
4379 -> 4376;
4379 -> 4378;
4380 -> 4377;
4380 -> 4378;
4381 -> 4379;
4381 -> 4378;
4382 -> 4377;
4382 -> 4329;
4383 -> 4329;
4384 -> 4371;
4384 -> 4382;
4384 -> 4383;
4384 -> 4379;
4384 -> 4380;
4384 -> 4329;
4385 -> 4384;
4386 -> 4385;
4386 -> 4384;
4387 -> 4386;
4388 -> 4387;
4388 -> 4386;
4389 -> 2851;
4389 -> 4386;
4390 -> 2847;
4390 -> 4386;
4391 -> 2848;
4391 -> 4386;
4392 -> 4386;
4393 -> 4388;
4393 -> 4392;
4394 -> 4388;
4394 -> 4392;
4395 -> 4388;
4395 -> 4392;
4396 -> 4393;
4396 -> 4392;
4397 -> 4394;
4397 -> 4392;
4398 -> 4388;
4399 -> 4388;
4399 -> 0;
4400 -> 4388;
4401 -> 4395;
4401 -> 4388;
4402 -> 4396;
4402 -> 4388;
4403 -> 4397;
4403 -> 4388;
4404 -> 4388;
4405 -> 4388;
4405 -> 0;
4406 -> 4388;
4406 -> 0;
4407 -> 4403;
4407 -> 4388;
4408 -> 4407;
4408 -> 4388;
4409 -> 4401;
4409 -> 4388;
4410 -> 4402;
4410 -> 4388;
4411 -> 4404;
4411 -> 4388;
4412 -> 4388;
4413 -> 4409;
4413 -> 4412;
4413 -> 4388;
4414 -> 4388;
4415 -> 4388;
4416 -> 4388;
4417 -> 4414;
4417 -> 4416;
4417 -> 4388;
4418 -> 4388;
4419 -> 4418;
4419 -> 4388;
4420 -> 4407;
4420 -> 4419;
4421 -> 4384;
4421 -> 3706;
4422 -> 1010;
4422 -> 984;
4423 -> 1010;
4423 -> 984;
4424 -> 1010;
4424 -> 984;
4425 -> 4422;
4425 -> 984;
4426 -> 984;
4427 -> 4423;
4427 -> 984;
4428 -> 984;
4429 -> 984;
4430 -> 4425;
4430 -> 4429;
4431 -> 4426;
4431 -> 4429;
4432 -> 4427;
4432 -> 4429;
4433 -> 4428;
4433 -> 4429;
4434 -> 4424;
4434 -> 4429;
4435 -> 4430;
4435 -> 4429;
4436 -> 4431;
4436 -> 4429;
4437 -> 4432;
4437 -> 4429;
4438 -> 4433;
4438 -> 4429;
4439 -> 4429;
4440 -> 4435;
4440 -> 4439;
4441 -> 4436;
4441 -> 4439;
4442 -> 4437;
4442 -> 4439;
4443 -> 4438;
4443 -> 4439;
4444 -> 4434;
4444 -> 4439;
4445 -> 4444;
4445 -> 4439;
4446 -> 4444;
4446 -> 4439;
4447 -> 4444;
4447 -> 4439;
4448 -> 4444;
4448 -> 4439;
4449 -> 4439;
4450 -> 4440;
4450 -> 4449;
4450 -> 4439;
4451 -> 4439;
4452 -> 4443;
4452 -> 4451;
4452 -> 4439;
4453 -> 4439;
4454 -> 4443;
4454 -> 4453;
4454 -> 4439;
4455 -> 4440;
4455 -> 4444;
4455 -> 4439;
4456 -> 4441;
4456 -> 4444;
4456 -> 4439;
4457 -> 4442;
4457 -> 4444;
4457 -> 4439;
4458 -> 4443;
4458 -> 4444;
4458 -> 4439;
4459 -> 4388;
4459 -> 2553;
4459 -> 2547;
4460 -> 4388;
4460 -> 2584;
4461 -> 4388;
4461 -> 2584;
4462 -> 4460;
4462 -> 4388;
4462 -> 2584;
4463 -> 2584;
4464 -> 4462;
4464 -> 4463;
4465 -> 4461;
4465 -> 4463;
4466 -> 4465;
4466 -> 4464;
4466 -> 4388;
4466 -> 4463;
4467 -> 4466;
4467 -> 4463;
4468 -> 4466;
4468 -> 4463;
4469 -> 4467;
4469 -> 4466;
4469 -> 4463;
4470 -> 4463;
4471 -> 4469;
4471 -> 4470;
4472 -> 4468;
4472 -> 4470;
4473 -> 4472;
4473 -> 4471;
4473 -> 4466;
4473 -> 4470;
4474 -> 4470;
4475 -> 2666;
4475 -> 4474;
4476 -> 4474;
4477 -> 4474;
4478 -> 4477;
4479 -> 4473;
4479 -> 4478;
4480 -> 4478;
4481 -> 4478;
4482 -> 4478;
4483 -> 4481;
4483 -> 4482;
4484 -> 4481;
4484 -> 4477;
4485 -> 4477;
4486 -> 4477;
4487 -> 4484;
4487 -> 4477;
4488 -> 4485;
4488 -> 4477;
4489 -> 4477;
4490 -> 4463;
4491 -> 4473;
4491 -> 4490;
4492 -> 4473;
4492 -> 4490;
4493 -> 0;
4493 -> 4490;
4494 -> 4490;
4495 -> 4493;
4495 -> 4494;
4496 -> 4492;
4496 -> 2797;
4497 -> 4496;
4497 -> 2810;
4498 -> 4492;
4498 -> 2797;
4499 -> 4498;
4499 -> 2815;
4500 -> 4492;
4501 -> 4492;
4502 -> 4492;
4503 -> 4501;
4503 -> 4502;
4504 -> 4501;
4504 -> 4502;
4505 -> 4501;
4505 -> 4502;
4506 -> 4501;
4506 -> 4502;
4507 -> 4501;
4507 -> 4502;
4508 -> 4492;
4508 -> 4502;
4509 -> 4502;
4510 -> 4504;
4510 -> 4509;
4510 -> 4502;
4511 -> 4502;
4512 -> 4511;
4512 -> 4492;
4513 -> 4492;
4514 -> 4512;
4514 -> 4513;
4514 -> 4492;
4515 -> 4492;
4516 -> 4492;
4516 -> 4515;
4517 -> 4516;
4517 -> 4492;
4517 -> 0;
4517 -> 4515;
4518 -> 4515;
4519 -> 4516;
4519 -> 4492;
4519 -> 4518;
4519 -> 4515;
4520 -> 4517;
4520 -> 4492;
4521 -> 4492;
4522 -> 4492;
4523 -> 4522;
4523 -> 4492;
4524 -> 4523;
4524 -> 4492;
4525 -> 4492;
4526 -> 4492;
4526 -> 4525;
4527 -> 4526;
4527 -> 4492;
4527 -> 0;
4527 -> 4525;
4528 -> 4525;
4529 -> 4526;
4529 -> 4492;
4529 -> 4528;
4529 -> 4525;
4530 -> 4527;
4530 -> 4492;
4531 -> 4492;
4532 -> 4492;
4533 -> 4531;
4533 -> 4532;
4534 -> 4533;
4534 -> 0;
4534 -> 4532;
4535 -> 4533;
4535 -> 0;
4535 -> 4532;
4536 -> 4532;
4537 -> 0;
4537 -> 4532;
4538 -> 4533;
4538 -> 4537;
4538 -> 4532;
4539 -> 0;
4539 -> 4532;
4540 -> 4533;
4540 -> 4539;
4540 -> 4532;
4541 -> 4532;
4542 -> 0;
4542 -> 4532;
4543 -> 4533;
4543 -> 4542;
4543 -> 4532;
4544 -> 4543;
4544 -> 4532;
4545 -> 4532;
4546 -> 4544;
4546 -> 4545;
4547 -> 4545;
4548 -> 4546;
4548 -> 4547;
4548 -> 4545;
4549 -> 4492;
4550 -> 4492;
4551 -> 4492;
4552 -> 4492;
4553 -> 4492;
4554 -> 4492;
4555 -> 4524;
4555 -> 4492;
4556 -> 4492;
4557 -> 4492;
4558 -> 4492;
4558 -> 4557;
4559 -> 4558;
4559 -> 4492;
4559 -> 0;
4559 -> 4557;
4560 -> 4557;
4561 -> 4558;
4561 -> 4492;
4561 -> 4560;
4561 -> 4557;
4562 -> 4559;
4562 -> 4492;
4563 -> 4492;
4563 -> 0;
4564 -> 4492;
4565 -> 4524;
4565 -> 4492;
4566 -> 4492;
4567 -> 4492;
4567 -> 4566;
4568 -> 4567;
4568 -> 4492;
4568 -> 0;
4568 -> 4566;
4569 -> 4566;
4570 -> 4567;
4570 -> 4492;
4570 -> 4569;
4570 -> 4566;
4571 -> 4568;
4571 -> 4492;
4572 -> 4492;
4573 -> 4492;
4573 -> 4572;
4574 -> 4573;
4574 -> 4492;
4574 -> 0;
4574 -> 4572;
4575 -> 4574;
4575 -> 4492;
4576 -> 4492;
4577 -> 4492;
4578 -> 4565;
4578 -> 4492;
4579 -> 4492;
4580 -> 4492;
4581 -> 4579;
4581 -> 4580;
4582 -> 4581;
4582 -> 0;
4582 -> 4580;
4583 -> 4581;
4583 -> 0;
4583 -> 4580;
4584 -> 4580;
4585 -> 0;
4585 -> 4580;
4586 -> 4581;
4586 -> 4585;
4586 -> 4580;
4587 -> 0;
4587 -> 4580;
4588 -> 4581;
4588 -> 4587;
4588 -> 4580;
4589 -> 4580;
4590 -> 0;
4590 -> 4580;
4591 -> 4581;
4591 -> 4590;
4591 -> 4580;
4592 -> 4591;
4592 -> 4580;
4593 -> 4580;
4594 -> 4592;
4594 -> 4593;
4595 -> 4593;
4596 -> 4594;
4596 -> 4595;
4596 -> 4593;
4597 -> 4492;
4598 -> 4577;
4598 -> 4597;
4598 -> 4492;
4599 -> 4577;
4599 -> 4492;
4600 -> 4577;
4600 -> 4492;
4601 -> 4578;
4601 -> 4492;
4602 -> 4599;
4602 -> 4492;
4603 -> 4600;
4603 -> 4492;
4604 -> 4601;
4604 -> 4492;
4605 -> 4602;
4605 -> 4492;
4606 -> 4603;
4606 -> 4492;
4607 -> 4604;
4607 -> 4492;
4608 -> 4492;
4609 -> 4492;
4610 -> 4492;
4611 -> 4605;
4611 -> 4492;
4612 -> 4606;
4612 -> 4492;
4613 -> 4492;
4614 -> 4607;
4614 -> 4492;
4615 -> 4605;
4615 -> 4492;
4616 -> 4612;
4616 -> 4492;
4617 -> 4605;
4617 -> 4492;
4618 -> 4492;
4618 -> 4602;
4618 -> 4607;
4618 -> 4605;
4619 -> 4618;
4619 -> 4492;
4620 -> 4618;
4620 -> 4492;
4621 -> 4492;
4622 -> 4619;
4622 -> 4621;
4623 -> 4622;
4623 -> 4492;
4624 -> 4492;
4625 -> 4620;
4625 -> 4624;
4626 -> 4625;
4626 -> 4492;
4627 -> 4623;
4627 -> 4626;
4627 -> 4492;
4628 -> 4492;
4629 -> 4492;
4630 -> 4628;
4630 -> 4618;
4630 -> 4629;
4630 -> 4492;
4631 -> 4618;
4631 -> 4492;
4632 -> 4492;
4633 -> 4632;
4633 -> 4618;
4634 -> 4633;
4634 -> 4492;
4635 -> 4492;
4636 -> 4602;
4636 -> 4635;
4636 -> 4492;
4637 -> 4492;
4638 -> 4606;
4638 -> 4637;
4639 -> 4637;
4640 -> 4638;
4640 -> 4639;
4641 -> 4640;
4641 -> 4618;
4641 -> 4639;
4642 -> 4641;
4642 -> 4637;
4643 -> 4642;
4643 -> 4492;
4644 -> 4618;
4645 -> 4606;
4645 -> 4618;
4646 -> 4618;
4647 -> 4618;
4648 -> 4645;
4648 -> 4618;
4649 -> 4618;
4650 -> 4618;
4651 -> 4618;
4652 -> 4648;
4652 -> 4618;
4653 -> 4618;
4654 -> 4618;
4655 -> 4618;
4656 -> 4618;
4657 -> 4654;
4657 -> 4656;
4658 -> 4657;
4658 -> 4618;
4659 -> 4618;
4660 -> 4655;
4660 -> 4659;
4661 -> 4660;
4661 -> 4618;
4662 -> 4658;
4662 -> 4661;
4662 -> 4618;
4663 -> 4618;
4664 -> 4618;
4665 -> 4663;
4665 -> 4618;
4665 -> 4664;
4666 -> 4618;
4667 -> 4618;
4668 -> 4667;
4668 -> 4618;
4669 -> 4618;
4670 -> 4618;
4671 -> 4606;
4671 -> 4670;
4672 -> 4670;
4673 -> 4671;
4673 -> 4672;
4674 -> 4673;
4674 -> 4670;
4675 -> 4674;
4675 -> 4618;
4676 -> 4618;
4676 -> 4492;
4677 -> 4492;
4678 -> 4492;
4679 -> 4565;
4679 -> 4492;
4680 -> 4679;
4680 -> 4492;
4681 -> 4492;
4681 -> 4618;
4682 -> 4679;
4682 -> 4633;
4683 -> 4633;
4684 -> 4633;
4685 -> 4633;
4686 -> 4633;
4687 -> 4633;
4688 -> 4633;
4689 -> 4633;
4690 -> 4682;
4690 -> 4633;
4691 -> 4684;
4691 -> 4618;
4691 -> 4633;
4692 -> 0;
4692 -> 4633;
4693 -> 4633;
4694 -> 4691;
4694 -> 4693;
4695 -> 4692;
4695 -> 4693;
4696 -> 4633;
4697 -> 4684;
4697 -> 4696;
4698 -> 4697;
4698 -> 4633;
4699 -> 4683;
4699 -> 4633;
4700 -> 4558;
4700 -> 4618;
4700 -> 0;
4700 -> 4557;
4701 -> 4558;
4701 -> 4618;
4701 -> 4560;
4701 -> 4557;
4702 -> 4700;
4702 -> 4492;
4703 -> 4633;
4704 -> 4633;
4704 -> 4703;
4705 -> 4704;
4705 -> 4618;
4705 -> 0;
4705 -> 4703;
4706 -> 4703;
4707 -> 4704;
4707 -> 4618;
4707 -> 4706;
4707 -> 4703;
4708 -> 4705;
4708 -> 4633;
4709 -> 4633;
4710 -> 4633;
4710 -> 4709;
4711 -> 4710;
4711 -> 4618;
4711 -> 0;
4711 -> 4709;
4712 -> 4711;
4712 -> 4633;
4713 -> 4633;
4714 -> 4633;
4715 -> 4633;
4716 -> 4714;
4716 -> 4715;
4717 -> 4716;
4717 -> 0;
4717 -> 4715;
4718 -> 4716;
4718 -> 0;
4718 -> 4715;
4719 -> 4715;
4720 -> 0;
4720 -> 4715;
4721 -> 4716;
4721 -> 4720;
4721 -> 4715;
4722 -> 0;
4722 -> 4715;
4723 -> 4716;
4723 -> 4722;
4723 -> 4715;
4724 -> 4715;
4725 -> 0;
4725 -> 4715;
4726 -> 4716;
4726 -> 4725;
4726 -> 4715;
4727 -> 4726;
4727 -> 4715;
4728 -> 4715;
4729 -> 4727;
4729 -> 4728;
4730 -> 4728;
4731 -> 4729;
4731 -> 4730;
4731 -> 4728;
4732 -> 4633;
4733 -> 4633;
4734 -> 4633;
4735 -> 4633;
4736 -> 4633;
4737 -> 4736;
4737 -> 4633;
4738 -> 4633;
4739 -> 4633;
4740 -> 4737;
4740 -> 4633;
4741 -> 4633;
4742 -> 4633;
4743 -> 4633;
4744 -> 4738;
4744 -> 4633;
4745 -> 4740;
4745 -> 4633;
4746 -> 4738;
4746 -> 4633;
4747 -> 4742;
4747 -> 4633;
4748 -> 4743;
4748 -> 4633;
4749 -> 4748;
4750 -> 4744;
4750 -> 4749;
4750 -> 4748;
4751 -> 4633;
4752 -> 4739;
4752 -> 4738;
4753 -> 4738;
4754 -> 4738;
4754 -> 4753;
4755 -> 4752;
4755 -> 4753;
4756 -> 4754;
4756 -> 0;
4756 -> 4753;
4757 -> 4753;
4758 -> 4756;
4758 -> 4753;
4759 -> 4755;
4759 -> 4758;
4760 -> 4741;
4760 -> 4738;
4761 -> 4737;
4761 -> 4738;
4762 -> 4759;
4762 -> 4738;
4763 -> 4760;
4763 -> 4738;
4764 -> 4738;
4765 -> 4738;
4765 -> 4633;
4766 -> 0;
4766 -> 4738;
4767 -> 4738;
4768 -> 4765;
4768 -> 4767;
4769 -> 4766;
4769 -> 4767;
4770 -> 4762;
4770 -> 4738;
4771 -> 4763;
4771 -> 4738;
4772 -> 4764;
4772 -> 4738;
4773 -> 4770;
4773 -> 4738;
4774 -> 4771;
4774 -> 4738;
4775 -> 4772;
4775 -> 4738;
4776 -> 4773;
4776 -> 4738;
4777 -> 4774;
4777 -> 4738;
4778 -> 4738;
4779 -> 4738;
4780 -> 4779;
4780 -> 4633;
4780 -> 4738;
4781 -> 0;
4781 -> 4738;
4782 -> 4738;
4783 -> 4780;
4783 -> 4782;
4784 -> 4781;
4784 -> 4782;
4785 -> 4776;
4785 -> 4738;
4786 -> 4777;
4786 -> 4738;
4787 -> 4778;
4787 -> 4738;
4788 -> 4785;
4788 -> 4738;
4789 -> 4786;
4789 -> 4738;
4790 -> 4738;
4791 -> 4787;
4791 -> 4738;
4792 -> 4738;
4793 -> 4738;
4794 -> 4738;
4794 -> 4633;
4795 -> 4738;
4796 -> 4738;
4797 -> 4738;
4798 -> 4791;
4798 -> 4738;
4799 -> 4797;
4799 -> 4738;
4800 -> 4738;
4801 -> 4797;
4801 -> 4633;
4801 -> 4738;
4802 -> 4738;
4803 -> 4738;
4803 -> 4633;
4804 -> 4738;
4805 -> 4797;
4805 -> 4738;
4806 -> 4805;
4806 -> 4738;
4807 -> 4738;
4808 -> 4804;
4808 -> 4807;
4808 -> 4738;
4809 -> 4696;
4809 -> 4797;
4810 -> 4797;
4811 -> 4633;
4811 -> 4809;
4812 -> 4633;
4813 -> 4492;
4813 -> 4812;
4814 -> 4813;
4814 -> 4809;
4814 -> 0;
4814 -> 4812;
4815 -> 4814;
4815 -> 4633;
4816 -> 4618;
4816 -> 4815;
4817 -> 4492;
4817 -> 0;
4817 -> 4633;
4818 -> 4633;
4819 -> 4816;
4819 -> 4492;
4820 -> 4492;
4820 -> 4761;
4820 -> 4809;
4821 -> 4492;
4822 -> 4492;
4823 -> 4821;
4823 -> 4822;
4824 -> 4822;
4825 -> 4823;
4825 -> 4824;
4826 -> 4825;
4826 -> 4820;
4826 -> 4824;
4827 -> 4826;
4827 -> 4822;
4828 -> 4822;
4829 -> 4823;
4829 -> 4828;
4830 -> 4829;
4830 -> 4820;
4830 -> 4828;
4831 -> 4830;
4831 -> 4822;
4832 -> 4831;
4832 -> 4820;
4833 -> 4831;
4833 -> 4820;
4833 -> 0;
4833 -> 4832;
4834 -> 4833;
4835 -> 4492;
4836 -> 4492;
4837 -> 4835;
4837 -> 4492;
4838 -> 4835;
4838 -> 4492;
4839 -> 4835;
4839 -> 4492;
4840 -> 4492;
4841 -> 4492;
4842 -> 4836;
4842 -> 4841;
4842 -> 4492;
4843 -> 4492;
4844 -> 4836;
4844 -> 4843;
4844 -> 4492;
4845 -> 4492;
4846 -> 4820;
4846 -> 0;
4847 -> 4836;
4847 -> 4820;
4848 -> 4820;
4848 -> 4847;
4848 -> 0;
4848 -> 4492;
4849 -> 4492;
4850 -> 4820;
4850 -> 4492;
4851 -> 4820;
4852 -> 4847;
4852 -> 4820;
4852 -> 0;
4853 -> 4847;
4854 -> 4847;
4855 -> 4847;
4856 -> 4847;
4857 -> 4847;
4858 -> 4847;
4859 -> 4856;
4859 -> 4847;
4860 -> 4857;
4860 -> 4847;
4861 -> 4847;
4862 -> 4847;
4862 -> 0;
4863 -> 4847;
4864 -> 4858;
4864 -> 4847;
4865 -> 4859;
4865 -> 4847;
4866 -> 4860;
4866 -> 4847;
4867 -> 4858;
4867 -> 4847;
4868 -> 4858;
4868 -> 0;
4868 -> 4847;
4869 -> 4858;
4869 -> 0;
4869 -> 4847;
4870 -> 4866;
4870 -> 4847;
4871 -> 4870;
4871 -> 4847;
4872 -> 4864;
4872 -> 4847;
4873 -> 4865;
4873 -> 4847;
4874 -> 4867;
4874 -> 4847;
4875 -> 4847;
4876 -> 4872;
4876 -> 4875;
4876 -> 4847;
4877 -> 4847;
4878 -> 4864;
4878 -> 4847;
4879 -> 4847;
4880 -> 4877;
4880 -> 4879;
4880 -> 4847;
4881 -> 4864;
4881 -> 4847;
4882 -> 4881;
4882 -> 4847;
4883 -> 4870;
4883 -> 4882;
4884 -> 4847;
4885 -> 4864;
4885 -> 4847;
4886 -> 4864;
4886 -> 2553;
4886 -> 2547;
4887 -> 4864;
4887 -> 4478;
4888 -> 4470;
4889 -> 0;
4889 -> 4888;
4890 -> 4888;
4891 -> 4889;
4891 -> 4890;
4892 -> 4864;
4892 -> 2797;
4893 -> 4892;
4893 -> 2810;
4894 -> 4864;
4894 -> 2797;
4895 -> 4894;
4895 -> 2815;
4896 -> 4864;
4897 -> 4864;
4898 -> 4864;
4899 -> 4897;
4899 -> 4898;
4900 -> 4897;
4900 -> 4898;
4901 -> 4897;
4901 -> 4898;
4902 -> 4897;
4902 -> 4898;
4903 -> 4897;
4903 -> 4898;
4904 -> 4864;
4904 -> 4898;
4905 -> 4898;
4906 -> 4900;
4906 -> 4905;
4906 -> 4898;
4907 -> 4898;
4908 -> 4907;
4908 -> 4864;
4909 -> 4864;
4910 -> 4908;
4910 -> 4909;
4910 -> 4864;
4911 -> 4864;
4912 -> 4864;
4912 -> 4911;
4913 -> 4912;
4913 -> 4864;
4913 -> 0;
4913 -> 4911;
4914 -> 4911;
4915 -> 4912;
4915 -> 4864;
4915 -> 4914;
4915 -> 4911;
4916 -> 4913;
4916 -> 4864;
4917 -> 4864;
4918 -> 4864;
4919 -> 4864;
4919 -> 4918;
4920 -> 4919;
4920 -> 4864;
4920 -> 0;
4920 -> 4918;
4921 -> 4918;
4922 -> 4919;
4922 -> 4864;
4922 -> 4921;
4922 -> 4918;
4923 -> 4920;
4923 -> 4864;
4924 -> 4864;
4925 -> 4864;
4926 -> 4924;
4926 -> 4925;
4927 -> 4926;
4927 -> 0;
4927 -> 4925;
4928 -> 4926;
4928 -> 0;
4928 -> 4925;
4929 -> 4925;
4930 -> 0;
4930 -> 4925;
4931 -> 4926;
4931 -> 4930;
4931 -> 4925;
4932 -> 0;
4932 -> 4925;
4933 -> 4926;
4933 -> 4932;
4933 -> 4925;
4934 -> 4925;
4935 -> 0;
4935 -> 4925;
4936 -> 4926;
4936 -> 4935;
4936 -> 4925;
4937 -> 4936;
4937 -> 4925;
4938 -> 4925;
4939 -> 4937;
4939 -> 4938;
4940 -> 4938;
4941 -> 4939;
4941 -> 4940;
4941 -> 4938;
4942 -> 4864;
4943 -> 4864;
4944 -> 4864;
4945 -> 4864;
4946 -> 4864;
4947 -> 4864;
4948 -> 4864;
4949 -> 4864;
4950 -> 4864;
4951 -> 4864;
4951 -> 4950;
4952 -> 4951;
4952 -> 4864;
4952 -> 0;
4952 -> 4950;
4953 -> 4950;
4954 -> 4951;
4954 -> 4864;
4954 -> 4953;
4954 -> 4950;
4955 -> 4952;
4955 -> 4864;
4956 -> 4864;
4956 -> 0;
4957 -> 4864;
4958 -> 4864;
4959 -> 4864;
4959 -> 4958;
4960 -> 4959;
4960 -> 4864;
4960 -> 0;
4960 -> 4958;
4961 -> 4958;
4962 -> 4959;
4962 -> 4864;
4962 -> 4961;
4962 -> 4958;
4963 -> 4960;
4963 -> 4864;
4964 -> 4864;
4965 -> 4864;
4965 -> 4964;
4966 -> 4965;
4966 -> 4864;
4966 -> 0;
4966 -> 4964;
4967 -> 4966;
4967 -> 4864;
4968 -> 4864;
4969 -> 4864;
4970 -> 4864;
4971 -> 4969;
4971 -> 4970;
4972 -> 4971;
4972 -> 0;
4972 -> 4970;
4973 -> 4971;
4973 -> 0;
4973 -> 4970;
4974 -> 4970;
4975 -> 0;
4975 -> 4970;
4976 -> 4971;
4976 -> 4975;
4976 -> 4970;
4977 -> 0;
4977 -> 4970;
4978 -> 4971;
4978 -> 4977;
4978 -> 4970;
4979 -> 4970;
4980 -> 0;
4980 -> 4970;
4981 -> 4971;
4981 -> 4980;
4981 -> 4970;
4982 -> 4981;
4982 -> 4970;
4983 -> 4970;
4984 -> 4982;
4984 -> 4983;
4985 -> 4983;
4986 -> 4984;
4986 -> 4985;
4986 -> 4983;
4987 -> 4864;
4988 -> 4864;
4989 -> 4988;
4989 -> 4864;
4990 -> 4989;
4990 -> 4864;
4991 -> 4864;
4992 -> 4864;
4993 -> 4864;
4994 -> 4864;
4995 -> 4990;
4995 -> 4864;
4996 -> 4864;
4997 -> 4990;
4997 -> 4864;
4998 -> 4864;
4999 -> 4995;
4999 -> 4864;
5000 -> 4864;
5001 -> 4990;
5001 -> 4864;
5002 -> 4990;
5002 -> 4864;
5003 -> 4864;
5004 -> 5001;
5004 -> 5003;
5005 -> 5004;
5005 -> 4864;
5006 -> 4864;
5007 -> 5002;
5007 -> 5006;
5008 -> 5007;
5008 -> 4864;
5009 -> 5005;
5009 -> 5008;
5009 -> 4864;
5010 -> 4864;
5011 -> 4864;
5012 -> 5010;
5012 -> 4990;
5012 -> 5011;
5012 -> 4864;
5013 -> 4990;
5013 -> 4864;
5014 -> 4990;
5014 -> 4864;
5015 -> 4864;
5016 -> 4864;
5017 -> 4990;
5017 -> 5016;
5018 -> 5016;
5019 -> 5017;
5019 -> 5018;
5020 -> 5019;
5020 -> 5016;
5021 -> 5020;
5021 -> 4864;
5022 -> 4990;
5023 -> 4990;
5024 -> 4990;
5025 -> 4990;
5026 -> 4990;
5027 -> 4990;
5028 -> 4990;
5029 -> 5025;
5029 -> 4990;
5030 -> 5025;
5030 -> 4990;
5031 -> 4990;
5032 -> 4990;
5033 -> 4990;
5034 -> 5031;
5034 -> 5033;
5035 -> 5034;
5035 -> 4990;
5036 -> 4990;
5037 -> 5032;
5037 -> 5036;
5038 -> 5037;
5038 -> 4990;
5039 -> 5035;
5039 -> 5038;
5039 -> 4990;
5040 -> 4990;
5041 -> 4990;
5042 -> 5040;
5042 -> 4990;
5042 -> 5041;
5043 -> 4990;
5044 -> 4990;
5045 -> 4990;
5046 -> 4990;
5047 -> 4990;
5047 -> 5046;
5048 -> 5046;
5049 -> 5047;
5049 -> 5048;
5050 -> 5049;
5050 -> 5046;
5051 -> 5050;
5051 -> 4990;
5052 -> 4990;
5052 -> 4864;
5053 -> 4864;
5054 -> 4864;
5055 -> 4864;
5055 -> 4990;
5056 -> 4990;
5057 -> 4990;
5058 -> 4990;
5059 -> 4990;
5060 -> 4990;
5061 -> 4990;
5062 -> 4990;
5063 -> 4990;
5064 -> 5057;
5064 -> 4990;
5065 -> 0;
5065 -> 4990;
5066 -> 4990;
5067 -> 5064;
5067 -> 5066;
5068 -> 5065;
5068 -> 5066;
5069 -> 5057;
5069 -> 4990;
5070 -> 5056;
5070 -> 4990;
5071 -> 4951;
5071 -> 4990;
5071 -> 0;
5071 -> 4950;
5072 -> 4951;
5072 -> 4990;
5072 -> 4953;
5072 -> 4950;
5073 -> 5071;
5073 -> 4864;
5074 -> 4990;
5075 -> 4990;
5075 -> 5074;
5076 -> 5075;
5076 -> 4990;
5076 -> 0;
5076 -> 5074;
5077 -> 5074;
5078 -> 5075;
5078 -> 4990;
5078 -> 5077;
5078 -> 5074;
5079 -> 5076;
5079 -> 4990;
5080 -> 4990;
5081 -> 4990;
5081 -> 5080;
5082 -> 5081;
5082 -> 4990;
5082 -> 0;
5082 -> 5080;
5083 -> 5082;
5083 -> 4990;
5084 -> 4990;
5085 -> 4990;
5086 -> 4990;
5087 -> 5085;
5087 -> 5086;
5088 -> 5087;
5088 -> 0;
5088 -> 5086;
5089 -> 5087;
5089 -> 0;
5089 -> 5086;
5090 -> 5086;
5091 -> 0;
5091 -> 5086;
5092 -> 5087;
5092 -> 5091;
5092 -> 5086;
5093 -> 0;
5093 -> 5086;
5094 -> 5087;
5094 -> 5093;
5094 -> 5086;
5095 -> 5086;
5096 -> 0;
5096 -> 5086;
5097 -> 5087;
5097 -> 5096;
5097 -> 5086;
5098 -> 5097;
5098 -> 5086;
5099 -> 5086;
5100 -> 5098;
5100 -> 5099;
5101 -> 5099;
5102 -> 5100;
5102 -> 5101;
5102 -> 5099;
5103 -> 4990;
5104 -> 4990;
5105 -> 4990;
5106 -> 4990;
5107 -> 4990;
5108 -> 4990;
5109 -> 4990;
5110 -> 4990;
5111 -> 4990;
5112 -> 4990;
5113 -> 5108;
5113 -> 4990;
5114 -> 5108;
5114 -> 4990;
5115 -> 5110;
5115 -> 4990;
5116 -> 5111;
5116 -> 4990;
5117 -> 5116;
5118 -> 5112;
5118 -> 5117;
5118 -> 5116;
5119 -> 4990;
5120 -> 5107;
5120 -> 5108;
5121 -> 5108;
5122 -> 5108;
5122 -> 5121;
5123 -> 5120;
5123 -> 5121;
5124 -> 5122;
5124 -> 0;
5124 -> 5121;
5125 -> 5121;
5126 -> 5124;
5126 -> 5121;
5127 -> 5123;
5127 -> 5126;
5128 -> 5109;
5128 -> 5108;
5129 -> 5127;
5129 -> 5108;
5130 -> 5128;
5130 -> 5108;
5131 -> 5108;
5132 -> 5108;
5132 -> 4990;
5133 -> 0;
5133 -> 5108;
5134 -> 5108;
5135 -> 5132;
5135 -> 5134;
5136 -> 5133;
5136 -> 5134;
5137 -> 5129;
5137 -> 5108;
5138 -> 5130;
5138 -> 5108;
5139 -> 5131;
5139 -> 5108;
5140 -> 5137;
5140 -> 5108;
5141 -> 5138;
5141 -> 5108;
5142 -> 5139;
5142 -> 5108;
5143 -> 5140;
5143 -> 5108;
5144 -> 5141;
5144 -> 5108;
5145 -> 5108;
5146 -> 5108;
5147 -> 5146;
5147 -> 4990;
5147 -> 5108;
5148 -> 0;
5148 -> 5108;
5149 -> 5108;
5150 -> 5147;
5150 -> 5149;
5151 -> 5148;
5151 -> 5149;
5152 -> 5143;
5152 -> 5108;
5153 -> 5144;
5153 -> 5108;
5154 -> 5145;
5154 -> 5108;
5155 -> 5152;
5155 -> 5108;
5156 -> 5153;
5156 -> 5108;
5157 -> 5108;
5158 -> 5154;
5158 -> 5108;
5159 -> 5108;
5160 -> 5108;
5161 -> 5108;
5161 -> 4990;
5162 -> 5108;
5163 -> 5108;
5164 -> 5158;
5164 -> 5108;
5165 -> 5108;
5166 -> 5108;
5167 -> 5108;
5167 -> 4990;
5168 -> 5108;
5169 -> 5108;
5169 -> 4990;
5170 -> 5108;
5171 -> 5108;
5172 -> 5171;
5172 -> 5108;
5173 -> 5108;
5174 -> 5170;
5174 -> 5173;
5174 -> 5108;
5175 -> 5057;
5175 -> 5145;
5176 -> 5145;
5177 -> 4990;
5177 -> 5175;
5178 -> 4990;
5179 -> 4864;
5179 -> 5178;
5180 -> 5179;
5180 -> 5175;
5180 -> 0;
5180 -> 5178;
5181 -> 5180;
5181 -> 4990;
5182 -> 4990;
5182 -> 5181;
5183 -> 4864;
5183 -> 0;
5183 -> 4990;
5184 -> 4990;
5185 -> 5182;
5185 -> 4864;
5186 -> 4864;
5187 -> 4864;
5188 -> 5186;
5188 -> 5187;
5189 -> 5187;
5190 -> 5188;
5190 -> 5189;
5191 -> 5190;
5191 -> 5175;
5191 -> 5189;
5192 -> 5191;
5192 -> 5187;
5193 -> 5187;
5194 -> 5188;
5194 -> 5193;
5195 -> 5194;
5195 -> 5175;
5195 -> 5193;
5196 -> 5195;
5196 -> 5187;
5197 -> 5196;
5197 -> 5175;
5198 -> 5196;
5198 -> 5175;
5198 -> 0;
5198 -> 5197;
5199 -> 5198;
5200 -> 4864;
5201 -> 5200;
5201 -> 4864;
5202 -> 5200;
5202 -> 4864;
5203 -> 5200;
5203 -> 4864;
5204 -> 4864;
5205 -> 4864;
5206 -> 4864;
5207 -> 4864;
5208 -> 5175;
5208 -> 0;
5209 -> 5175;
5209 -> 0;
5209 -> 4864;
5210 -> 4864;
5211 -> 5175;
5211 -> 4864;
5212 -> 5175;
5213 -> 5175;
5213 -> 0;
5214 -> 5175;
5215 -> 5175;
5216 -> 5175;
5217 -> 5175;
5218 -> 5175;
5219 -> 5217;
5219 -> 5175;
5220 -> 5218;
5220 -> 5175;
5221 -> 5175;
5222 -> 5175;
5222 -> 0;
5223 -> 5175;
5224 -> 5219;
5224 -> 5175;
5225 -> 5220;
5225 -> 5175;
5226 -> 5175;
5227 -> 5175;
5227 -> 0;
5228 -> 5175;
5228 -> 0;
5229 -> 5225;
5229 -> 5175;
5230 -> 5229;
5230 -> 5175;
5231 -> 5175;
5232 -> 5224;
5232 -> 5175;
5233 -> 5226;
5233 -> 5175;
5234 -> 5175;
5235 -> 5231;
5235 -> 5234;
5235 -> 5175;
5236 -> 5175;
5237 -> 5175;
5238 -> 5175;
5239 -> 5236;
5239 -> 5238;
5239 -> 5175;
5240 -> 5175;
5241 -> 5240;
5241 -> 5175;
5242 -> 5229;
5242 -> 5241;
5243 -> 5175;
5244 -> 5175;
5248 -> 5245;
5248 -> 5247;
5249 -> 5246;
5249 -> 5247;
5250 -> 5247;
5251 -> 5250;
5251 -> 5247;
5252 -> 5250;
5252 -> 5247;
5253 -> 5248;
5253 -> 5250;
5253 -> 5247;
5254 -> 5249;
5254 -> 5250;
5254 -> 5247;
5255 -> 5247;
5256 -> 1010;
5256 -> 984;
5257 -> 984;
5258 -> 5256;
5258 -> 5175;
5258 -> 5257;
5258 -> 984;
5259 -> 5258;
5259 -> 981;
5260 -> 983;
5260 -> 981;
5261 -> 981;
5262 -> 5259;
5262 -> 5261;
5263 -> 5260;
5263 -> 5261;
5264 -> 5262;
5264 -> 5261;
5265 -> 5263;
5265 -> 5261;
5266 -> 5261;
5267 -> 5264;
5267 -> 5266;
5268 -> 5265;
5268 -> 5266;
5269 -> 5267;
5269 -> 5266;
5270 -> 5268;
5270 -> 5266;
5271 -> 5266;
5272 -> 5266;
5273 -> 5269;
5273 -> 5272;
5274 -> 5270;
5274 -> 5272;
5275 -> 5271;
5275 -> 5272;
5276 -> 5272;
5277 -> 5274;
5277 -> 5276;
5277 -> 5272;
5278 -> 5274;
5278 -> 5272;
5279 -> 5278;
5279 -> 204;
5279 -> 978;
5279 -> 979;
5279 -> 980;
5279 -> 708;
5279 -> 709;
5279 -> 718;
5279 -> 710;
5279 -> 735;
5279 -> 712;
5279 -> 736;
5279 -> 715;
5279 -> 728;
5279 -> 716;
5279 -> 717;
5279 -> 713;
5279 -> 732;
5279 -> 733;
5279 -> 734;
5279 -> 828;
5279 -> 829;
5279 -> 838;
5279 -> 830;
5279 -> 855;
5279 -> 832;
5279 -> 856;
5279 -> 835;
5279 -> 848;
5279 -> 836;
5279 -> 837;
5279 -> 833;
5279 -> 852;
5279 -> 853;
5279 -> 854;
5279 -> 948;
5279 -> 949;
5279 -> 958;
5279 -> 950;
5279 -> 975;
5279 -> 952;
5279 -> 976;
5279 -> 955;
5279 -> 968;
5279 -> 956;
5279 -> 957;
5279 -> 953;
5279 -> 972;
5279 -> 973;
5279 -> 974;
5279 -> 932;
5279 -> 692;
5279 -> 638;
5279 -> 812;
5279 -> 762;
5279 -> 882;
5279 -> 5272;
5280 -> 5272;
5281 -> 5278;
5281 -> 5280;
5281 -> 204;
5281 -> 978;
5281 -> 979;
5281 -> 980;
5281 -> 708;
5281 -> 709;
5281 -> 718;
5281 -> 710;
5281 -> 735;
5281 -> 712;
5281 -> 736;
5281 -> 715;
5281 -> 728;
5281 -> 716;
5281 -> 717;
5281 -> 713;
5281 -> 732;
5281 -> 733;
5281 -> 734;
5281 -> 828;
5281 -> 829;
5281 -> 838;
5281 -> 830;
5281 -> 855;
5281 -> 832;
5281 -> 856;
5281 -> 835;
5281 -> 848;
5281 -> 836;
5281 -> 837;
5281 -> 833;
5281 -> 852;
5281 -> 853;
5281 -> 854;
5281 -> 948;
5281 -> 949;
5281 -> 958;
5281 -> 950;
5281 -> 975;
5281 -> 952;
5281 -> 976;
5281 -> 955;
5281 -> 968;
5281 -> 956;
5281 -> 957;
5281 -> 953;
5281 -> 972;
5281 -> 973;
5281 -> 974;
5281 -> 932;
5281 -> 692;
5281 -> 638;
5281 -> 812;
5281 -> 762;
5281 -> 882;
5281 -> 5272;
5282 -> 5281;
5282 -> 5280;
5283 -> 5282;
5283 -> 5281;
5283 -> 5280;
5284 -> 5274;
5284 -> 5272;
5285 -> 5284;
5285 -> 5283;
5285 -> 5272;
5286 -> 5272;
5287 -> 5284;
5287 -> 5286;
5287 -> 5283;
5287 -> 5272;
5288 -> 5287;
5288 -> 5286;
5289 -> 5288;
5289 -> 5287;
5289 -> 5286;
5290 -> 5273;
5290 -> 5272;
5291 -> 5275;
5291 -> 5283;
5291 -> 5289;
5291 -> 5272;
5292 -> 5290;
5292 -> 5291;
5292 -> 5272;
5293 -> 5272;
5294 -> 5292;
5294 -> 5293;
5295 -> 5292;
5295 -> 5293;
5296 -> 5292;
5296 -> 5293;
5297 -> 5292;
5297 -> 5293;
5298 -> 5292;
5298 -> 5293;
5299 -> 5298;
5299 -> 5293;
5300 -> 5298;
5300 -> 5293;
5301 -> 5298;
5301 -> 5293;
5302 -> 5298;
5302 -> 5293;
5303 -> 5298;
5303 -> 5293;
5304 -> 5298;
5304 -> 5293;
5305 -> 5298;
5305 -> 5293;
5306 -> 5298;
5306 -> 5293;
5307 -> 5298;
5307 -> 5293;
5308 -> 5298;
5308 -> 5293;
5309 -> 5298;
5309 -> 5293;
5310 -> 5294;
5310 -> 5292;
5310 -> 5298;
5310 -> 5293;
5311 -> 5294;
5311 -> 5292;
5311 -> 5298;
5311 -> 5293;
5312 -> 5294;
5312 -> 5292;
5312 -> 5298;
5312 -> 5293;
5313 -> 5294;
5313 -> 5292;
5313 -> 5298;
5313 -> 5293;
5314 -> 5296;
5314 -> 5293;
5315 -> 5314;
5316 -> 5315;
5316 -> 5298;
5316 -> 5293;
5317 -> 5297;
5317 -> 5293;
5318 -> 5317;
5319 -> 5318;
5319 -> 5298;
5319 -> 5293;
5320 -> 5293;
5321 -> 5293;
5322 -> 5294;
5322 -> 5292;
5322 -> 5321;
5322 -> 5293;
5323 -> 5294;
5323 -> 5292;
5323 -> 5293;
5324 -> 0;
5324 -> 5293;
5325 -> 5294;
5325 -> 5322;
5326 -> 5322;
5327 -> 5325;
5327 -> 5326;
5327 -> 5322;
5328 -> 5325;
5328 -> 5323;
5328 -> 5298;
5328 -> 5327;
5329 -> 5294;
5329 -> 5323;
5329 -> 5298;
5329 -> 5327;
5330 -> 5295;
5330 -> 5298;
5330 -> 5293;
5331 -> 5298;
5331 -> 5330;
5331 -> 5293;
5332 -> 5298;
5332 -> 5313;
5332 -> 5323;
5332 -> 5331;
5333 -> 5332;
5334 -> 5333;
5334 -> 5298;
5334 -> 5332;
5335 -> 5331;
5336 -> 5325;
5336 -> 5335;
5336 -> 5331;
5337 -> 5325;
5337 -> 5333;
5337 -> 5298;
5337 -> 5336;
5338 -> 5331;
5339 -> 5298;
5339 -> 5337;
5339 -> 5338;
5339 -> 5331;
5340 -> 5298;
5340 -> 5337;
5340 -> 5333;
5340 -> 5338;
5340 -> 5331;
5341 -> 5298;
5341 -> 5313;
5341 -> 5333;
5341 -> 5293;
5342 -> 5341;
5342 -> 5298;
5342 -> 5293;
5343 -> 5292;
5343 -> 5341;
5343 -> 5329;
5343 -> 5311;
5343 -> 5312;
5343 -> 5334;
5343 -> 5337;
5343 -> 5342;
5343 -> 5305;
5343 -> 5328;
5343 -> 5330;
5343 -> 5316;
5343 -> 5319;
5343 -> 5309;
5343 -> 5298;
5343 -> 5313;
5343 -> 5272;
5344 -> 5294;
5344 -> 5343;
5344 -> 5298;
5344 -> 5293;
5345 -> 5298;
5345 -> 5343;
5345 -> 5338;
5345 -> 5331;
5346 -> 5274;
5346 -> 5272;
5347 -> 5346;
5347 -> 5289;
5347 -> 5272;
5348 -> 5347;
5349 -> 5348;
5349 -> 5343;
5349 -> 5289;
5349 -> 5347;
5350 -> 5349;
5350 -> 5348;
5351 -> 5349;
5351 -> 5348;
5352 -> 5350;
5352 -> 5348;
5353 -> 5348;
5354 -> 5352;
5354 -> 5353;
5354 -> 5348;
5355 -> 5352;
5355 -> 5349;
5355 -> 5348;
5356 -> 5351;
5356 -> 5349;
5356 -> 5355;
5356 -> 5348;
5357 -> 5351;
5357 -> 5356;
5357 -> 5352;
5357 -> 5348;
5358 -> 5351;
5358 -> 5356;
5358 -> 5352;
5358 -> 5348;
5359 -> 5351;
5359 -> 5356;
5359 -> 5348;
5360 -> 5351;
5360 -> 5356;
5360 -> 5352;
5360 -> 5359;
5361 -> 5348;
5362 -> 5351;
5362 -> 5356;
5362 -> 5361;
5362 -> 5348;
5363 -> 5362;
5364 -> 5348;
5365 -> 5351;
5365 -> 5356;
5365 -> 5364;
5365 -> 5348;
5366 -> 5348;
5367 -> 5352;
5367 -> 5356;
5367 -> 5366;
5367 -> 5348;
5368 -> 5351;
5368 -> 5356;
5368 -> 5352;
5368 -> 5348;
5369 -> 5348;
5370 -> 5351;
5370 -> 5356;
5370 -> 5369;
5370 -> 5348;
5371 -> 5370;
5372 -> 5370;
5373 -> 5351;
5373 -> 5372;
5374 -> 5372;
5375 -> 5373;
5375 -> 5356;
5375 -> 5374;
5375 -> 5372;
5376 -> 5373;
5376 -> 5356;
5376 -> 5375;
5377 -> 5375;
5378 -> 5376;
5378 -> 5373;
5378 -> 5375;
5379 -> 5373;
5379 -> 5356;
5379 -> 5378;
5379 -> 5372;
5380 -> 5379;
5380 -> 5370;
5381 -> 5370;
5382 -> 5352;
5382 -> 5381;
5383 -> 5381;
5384 -> 5382;
5384 -> 5356;
5384 -> 5378;
5384 -> 5383;
5384 -> 5381;
5385 -> 5382;
5385 -> 5356;
5385 -> 5378;
5385 -> 5384;
5385 -> 5381;
5386 -> 5385;
5386 -> 5370;
5387 -> 5351;
5387 -> 5356;
5387 -> 5352;
5387 -> 5370;
5388 -> 5380;
5388 -> 5387;
5389 -> 5386;
5389 -> 5387;
5390 -> 5388;
5390 -> 5389;
5390 -> 5356;
5390 -> 5378;
5390 -> 5384;
5390 -> 5376;
5390 -> 5377;
5390 -> 5387;
5391 -> 5351;
5391 -> 5390;
5391 -> 5352;
5391 -> 5348;
5392 -> 5348;
5393 -> 5349;
5393 -> 5392;
5393 -> 5390;
5393 -> 5347;
5394 -> 5347;
5395 -> 5393;
5395 -> 5394;
5395 -> 5347;
5396 -> 5393;
5396 -> 5395;
5397 -> 5396;
5398 -> 5396;
5399 -> 5396;
5400 -> 5396;
5401 -> 5396;
5401 -> 5400;
5402 -> 5396;
5403 -> 5402;
5404 -> 5396;
5405 -> 5396;
5406 -> 5396;
5407 -> 5396;
5408 -> 5396;
5409 -> 5272;
5410 -> 5343;
5410 -> 5396;
5410 -> 5409;
5410 -> 5272;
5411 -> 5272;
5412 -> 5274;
5412 -> 5272;
5413 -> 5273;
5413 -> 5272;
5414 -> 5272;
5415 -> 5412;
5415 -> 5414;
5416 -> 5413;
5416 -> 5414;
5417 -> 5414;
5418 -> 5414;
5419 -> 5416;
5419 -> 5414;
5420 -> 5419;
5420 -> 5396;
5420 -> 5414;
5421 -> 5396;
5421 -> 5414;
5422 -> 5420;
5422 -> 5414;
5423 -> 5417;
5423 -> 5422;
5424 -> 5423;
5424 -> 5414;
5425 -> 5423;
5425 -> 5414;
5426 -> 5425;
5426 -> 5414;
5427 -> 5415;
5427 -> 5414;
5428 -> 5427;
5428 -> 5396;
5428 -> 5414;
5429 -> 5414;
5430 -> 5427;
5430 -> 5429;
5430 -> 5396;
5430 -> 5414;
5431 -> 5415;
5431 -> 5414;
5432 -> 5431;
5432 -> 5430;
5432 -> 5414;
5433 -> 5414;
5434 -> 5431;
5434 -> 5433;
5434 -> 5430;
5434 -> 5414;
5435 -> 5415;
5435 -> 5414;
5436 -> 5414;
5437 -> 5435;
5437 -> 5436;
5439 -> 5438;
5440 -> 5438;
5441 -> 5440;
5441 -> 5436;
5442 -> 5436;
5443 -> 5437;
5443 -> 5436;
5444 -> 5443;
5444 -> 5434;
5444 -> 5436;
5445 -> 5444;
5446 -> 5445;
5447 -> 5414;
5448 -> 5447;
5448 -> 5414;
5449 -> 5414;
5450 -> 5414;
5451 -> 5447;
5451 -> 5450;
5451 -> 5448;
5451 -> 5414;
5452 -> 5414;
5453 -> 5415;
5453 -> 5414;
5454 -> 5453;
5454 -> 5434;
5454 -> 5414;
5455 -> 5454;
5456 -> 5426;
5456 -> 5454;
5457 -> 5454;
5458 -> 5455;
5458 -> 5457;
5459 -> 5456;
5459 -> 5457;
5460 -> 5457;
5461 -> 5460;
5461 -> 5459;
5461 -> 5457;
5462 -> 5457;
5463 -> 5458;
5463 -> 5462;
5464 -> 5462;
5465 -> 5462;
5466 -> 5464;
5466 -> 5465;
5466 -> 5462;
5467 -> 5462;
5468 -> 5463;
5468 -> 5434;
5468 -> 5467;
5468 -> 5462;
5469 -> 5463;
5469 -> 5434;
5469 -> 5468;
5470 -> 5464;
5470 -> 5469;
5470 -> 5466;
5470 -> 5468;
5471 -> 5468;
5472 -> 5464;
5472 -> 5471;
5472 -> 5470;
5472 -> 5468;
5473 -> 5463;
5473 -> 5434;
5473 -> 5468;
5474 -> 5464;
5474 -> 5473;
5474 -> 5472;
5474 -> 5468;
5475 -> 5462;
5476 -> 5463;
5476 -> 5434;
5476 -> 5475;
5476 -> 5462;
5477 -> 5476;
5478 -> 5477;
5479 -> 5464;
5479 -> 5478;
5479 -> 5474;
5479 -> 5477;
5480 -> 5463;
5480 -> 5434;
5480 -> 5477;
5481 -> 5464;
5481 -> 5480;
5481 -> 5479;
5481 -> 5477;
5482 -> 5476;
5483 -> 5464;
5483 -> 5482;
5483 -> 5481;
5483 -> 5476;
5484 -> 5463;
5484 -> 5434;
5484 -> 5462;
5485 -> 5462;
5486 -> 5464;
5486 -> 5485;
5486 -> 5483;
5486 -> 5462;
5487 -> 5462;
5488 -> 5463;
5488 -> 5434;
5488 -> 5487;
5488 -> 5462;
5489 -> 5488;
5490 -> 5464;
5490 -> 5489;
5490 -> 5486;
5490 -> 5488;
5491 -> 5488;
5492 -> 5491;
5492 -> 5488;
5493 -> 5488;
5494 -> 5492;
5494 -> 5488;
5495 -> 5494;
5496 -> 5464;
5496 -> 5495;
5496 -> 5490;
5496 -> 5494;
5497 -> 5492;
5497 -> 5494;
5498 -> 5464;
5498 -> 5497;
5498 -> 5496;
5498 -> 5494;
5499 -> 5494;
5500 -> 5464;
5500 -> 5499;
5500 -> 5498;
5500 -> 5494;
5501 -> 5494;
5502 -> 5501;
5503 -> 5464;
5503 -> 5502;
5503 -> 5500;
5503 -> 5501;
5504 -> 5488;
5505 -> 5464;
5505 -> 5504;
5505 -> 5503;
5505 -> 5488;
5506 -> 5462;
5507 -> 5463;
5507 -> 5494;
5507 -> 5506;
5507 -> 5462;
5508 -> 5463;
5508 -> 5494;
5508 -> 5462;
5509 -> 5462;
5510 -> 5463;
5510 -> 5494;
5510 -> 5509;
5510 -> 5462;
5511 -> 5462;
5512 -> 5463;
5512 -> 5494;
5512 -> 5511;
5512 -> 5462;
5513 -> 5462;
5514 -> 5463;
5514 -> 5494;
5514 -> 5513;
5514 -> 5462;
5515 -> 5464;
5515 -> 5505;
5515 -> 5462;
5516 -> 5515;
5516 -> 5457;
5517 -> 5461;
5517 -> 5516;
5517 -> 5457;
5518 -> 5452;
5518 -> 5517;
5518 -> 5454;
5519 -> 5426;
5519 -> 5494;
5520 -> 5519;
5520 -> 5494;
5521 -> 5494;
5522 -> 5521;
5522 -> 5520;
5522 -> 5494;
5523 -> 5494;
5524 -> 5494;
5525 -> 5523;
5525 -> 5524;
5525 -> 5494;
5526 -> 5494;
5527 -> 5494;
5527 -> 5526;
5528 -> 5523;
5528 -> 5527;
5528 -> 5525;
5528 -> 5526;
5529 -> 5526;
5530 -> 5523;
5530 -> 5529;
5530 -> 5528;
5530 -> 5526;
5531 -> 5494;
5531 -> 5526;
5532 -> 5523;
5532 -> 5531;
5532 -> 5530;
5532 -> 5526;
5533 -> 5494;
5534 -> 5533;
5535 -> 5534;
5536 -> 5523;
5536 -> 5535;
5536 -> 5532;
5536 -> 5534;
5537 -> 5494;
5537 -> 5534;
5538 -> 5523;
5538 -> 5537;
5538 -> 5536;
5538 -> 5534;
5539 -> 5533;
5540 -> 5523;
5540 -> 5539;
5540 -> 5538;
5540 -> 5533;
5541 -> 5494;
5542 -> 5494;
5543 -> 5523;
5543 -> 5542;
5543 -> 5540;
5543 -> 5494;
5544 -> 5494;
5545 -> 5523;
5545 -> 5544;
5545 -> 5543;
5545 -> 5494;
5546 -> 5523;
5546 -> 5495;
5546 -> 5545;
5546 -> 5494;
5547 -> 5494;
5548 -> 5523;
5548 -> 5547;
5548 -> 5546;
5548 -> 5494;
5549 -> 5523;
5549 -> 5499;
5549 -> 5548;
5549 -> 5494;
5550 -> 5494;
5551 -> 5523;
5551 -> 5550;
5551 -> 5549;
5551 -> 5494;
5552 -> 5494;
5553 -> 5494;
5554 -> 5494;
5555 -> 5494;
5556 -> 5494;
5557 -> 5523;
5557 -> 5551;
5557 -> 5494;
5558 -> 5557;
5558 -> 5494;
5559 -> 5522;
5559 -> 5558;
5559 -> 5494;
5560 -> 5447;
5560 -> 5414;
5561 -> 5452;
5561 -> 5414;
5562 -> 5414;
5563 -> 5560;
5563 -> 5562;
5564 -> 5561;
5564 -> 5562;
5565 -> 5564;
5565 -> 5518;
5565 -> 5562;
5566 -> 5562;
5567 -> 5566;
5567 -> 5565;
5567 -> 5562;
5568 -> 5564;
5568 -> 5566;
5568 -> 5518;
5568 -> 5567;
5569 -> 5563;
5569 -> 5568;
5569 -> 5451;
5569 -> 5567;
5570 -> 5567;
5571 -> 5570;
5572 -> 5563;
5572 -> 5571;
5572 -> 5569;
5572 -> 5570;
5573 -> 5563;
5573 -> 5572;
5573 -> 5567;
5574 -> 5414;
5575 -> 5414;
5576 -> 5447;
5576 -> 5575;
5576 -> 5573;
5576 -> 5414;
5577 -> 5414;
5578 -> 5416;
5578 -> 5494;
5578 -> 5414;
5579 -> 5414;
5580 -> 5578;
5580 -> 5414;
5581 -> 5578;
5581 -> 5580;
5582 -> 5581;
5582 -> 5580;
5583 -> 5582;
5583 -> 5580;
5584 -> 5580;
5585 -> 5580;
5586 -> 5424;
5586 -> 5580;
5587 -> 5447;
5587 -> 5586;
5588 -> 5426;
5588 -> 5586;
5589 -> 5586;
5590 -> 5587;
5590 -> 5589;
5591 -> 5588;
5591 -> 5589;
5592 -> 5589;
5593 -> 5592;
5593 -> 5591;
5593 -> 5589;
5594 -> 5590;
5594 -> 5592;
5594 -> 5593;
5594 -> 5576;
5594 -> 5589;
5595 -> 5586;
5596 -> 5586;
5597 -> 5447;
5597 -> 5596;
5597 -> 5594;
5597 -> 5586;
5598 -> 5581;
5598 -> 5582;
5598 -> 5586;
5599 -> 5447;
5599 -> 5598;
5599 -> 5597;
5599 -> 5586;
5600 -> 5581;
5600 -> 5598;
5600 -> 5586;
5601 -> 5600;
5601 -> 5598;
5601 -> 5586;
5602 -> 5447;
5602 -> 5601;
5603 -> 5426;
5603 -> 5601;
5604 -> 5601;
5605 -> 5602;
5605 -> 5604;
5606 -> 5603;
5606 -> 5604;
5607 -> 5604;
5608 -> 5607;
5608 -> 5606;
5608 -> 5604;
5609 -> 5605;
5609 -> 5607;
5609 -> 5608;
5609 -> 5599;
5609 -> 5604;
5610 -> 5601;
5611 -> 5601;
5612 -> 5447;
5612 -> 5611;
5612 -> 5609;
5612 -> 5601;
5613 -> 5601;
5614 -> 5447;
5614 -> 5613;
5614 -> 5612;
5614 -> 5601;
5615 -> 5581;
5615 -> 5580;
5616 -> 5580;
5617 -> 5428;
5617 -> 5580;
5618 -> 5432;
5618 -> 5580;
5619 -> 5580;
5620 -> 5615;
5620 -> 5619;
5621 -> 5616;
5621 -> 5619;
5622 -> 5617;
5622 -> 5619;
5623 -> 5618;
5623 -> 5619;
5624 -> 5616;
5624 -> 5619;
5625 -> 5624;
5625 -> 5619;
5626 -> 5624;
5626 -> 5619;
5627 -> 5624;
5627 -> 5619;
5628 -> 5624;
5628 -> 5619;
5629 -> 5624;
5629 -> 5619;
5630 -> 5624;
5630 -> 5619;
5631 -> 5624;
5631 -> 5619;
5632 -> 5624;
5632 -> 5619;
5633 -> 5624;
5633 -> 5619;
5634 -> 5620;
5634 -> 5613;
5634 -> 5624;
5634 -> 5619;
5635 -> 5620;
5635 -> 5613;
5635 -> 5624;
5635 -> 5619;
5636 -> 5620;
5636 -> 5613;
5636 -> 5624;
5636 -> 5619;
5637 -> 5620;
5637 -> 5613;
5637 -> 5624;
5637 -> 5619;
5638 -> 5619;
5639 -> 5620;
5639 -> 5613;
5639 -> 5619;
5640 -> 5624;
5641 -> 5624;
5641 -> 5639;
5641 -> 5640;
5642 -> 5624;
5642 -> 5639;
5642 -> 5637;
5642 -> 5640;
5643 -> 5616;
5643 -> 5580;
5644 -> 5415;
5644 -> 5580;
5645 -> 5616;
5645 -> 5580;
5646 -> 5644;
5646 -> 5645;
5646 -> 5637;
5646 -> 5639;
5646 -> 5635;
5646 -> 5636;
5646 -> 5624;
5646 -> 5621;
5646 -> 5622;
5646 -> 5623;
5646 -> 5580;
5647 -> 5580;
5648 -> 5647;
5649 -> 5646;
5649 -> 5648;
5649 -> 5647;
5650 -> 5646;
5650 -> 5647;
5651 -> 5646;
5651 -> 5647;
5652 -> 5646;
5652 -> 5647;
5653 -> 5646;
5653 -> 5652;
5654 -> 5647;
5655 -> 5646;
5655 -> 5654;
5655 -> 5647;
5656 -> 5647;
5657 -> 5646;
5657 -> 5656;
5657 -> 5647;
5658 -> 5647;
5659 -> 5646;
5659 -> 5658;
5659 -> 5647;
5660 -> 5646;
5660 -> 5647;
5661 -> 5646;
5662 -> 5646;
5662 -> 5647;
5663 -> 5580;
5664 -> 5646;
5664 -> 5663;
5664 -> 5580;
5665 -> 5415;
5665 -> 5646;
5665 -> 5664;
5666 -> 5616;
5666 -> 5580;
5667 -> 5426;
5667 -> 5580;
5668 -> 5580;
5669 -> 5666;
5669 -> 5668;
5670 -> 5667;
5670 -> 5668;
5671 -> 5668;
5672 -> 5671;
5672 -> 5670;
5672 -> 5668;
5673 -> 5668;
5674 -> 5668;
5675 -> 5673;
5675 -> 5674;
5675 -> 5668;
5676 -> 5668;
5677 -> 5669;
5677 -> 5646;
5677 -> 5676;
5677 -> 5668;
5678 -> 5669;
5678 -> 5646;
5678 -> 5677;
5679 -> 5673;
5679 -> 5678;
5679 -> 5675;
5679 -> 5677;
5680 -> 5677;
5681 -> 5673;
5681 -> 5680;
5681 -> 5679;
5681 -> 5677;
5682 -> 5669;
5682 -> 5646;
5682 -> 5677;
5683 -> 5673;
5683 -> 5682;
5683 -> 5681;
5683 -> 5677;
5684 -> 5668;
5685 -> 5669;
5685 -> 5646;
5685 -> 5684;
5685 -> 5668;
5686 -> 5685;
5687 -> 5686;
5688 -> 5673;
5688 -> 5687;
5688 -> 5683;
5688 -> 5686;
5689 -> 5669;
5689 -> 5646;
5689 -> 5686;
5690 -> 5673;
5690 -> 5689;
5690 -> 5688;
5690 -> 5686;
5691 -> 5685;
5692 -> 5673;
5692 -> 5691;
5692 -> 5690;
5692 -> 5685;
5693 -> 5669;
5693 -> 5646;
5693 -> 5668;
5694 -> 5668;
5695 -> 5673;
5695 -> 5694;
5695 -> 5692;
5695 -> 5668;
5696 -> 5669;
5696 -> 5646;
5696 -> 5668;
5697 -> 5696;
5698 -> 5673;
5698 -> 5697;
5698 -> 5695;
5698 -> 5696;
5699 -> 5696;
5700 -> 5673;
5700 -> 5699;
5700 -> 5698;
5700 -> 5696;
5701 -> 5696;
5702 -> 5673;
5702 -> 5701;
5702 -> 5700;
5702 -> 5696;
5703 -> 5696;
5704 -> 5673;
5704 -> 5703;
5704 -> 5702;
5704 -> 5696;
5705 -> 5696;
5706 -> 5705;
5707 -> 5673;
5707 -> 5706;
5707 -> 5704;
5707 -> 5705;
5708 -> 5696;
5709 -> 5673;
5709 -> 5708;
5709 -> 5707;
5709 -> 5696;
5710 -> 5668;
5711 -> 5669;
5711 -> 5696;
5711 -> 5710;
5711 -> 5668;
5712 -> 5711;
5713 -> 5673;
5713 -> 5712;
5713 -> 5709;
5713 -> 5711;
5714 -> 5711;
5715 -> 5673;
5715 -> 5714;
5715 -> 5713;
5715 -> 5711;
5716 -> 5711;
5717 -> 5673;
5717 -> 5716;
5717 -> 5715;
5717 -> 5711;
5718 -> 5711;
5719 -> 5673;
5719 -> 5718;
5719 -> 5717;
5719 -> 5711;
5720 -> 5711;
5721 -> 5673;
5721 -> 5720;
5721 -> 5719;
5721 -> 5711;
5722 -> 5669;
5722 -> 5696;
5722 -> 5668;
5723 -> 5668;
5724 -> 5669;
5724 -> 5696;
5724 -> 5723;
5724 -> 5668;
5725 -> 5668;
5726 -> 5669;
5726 -> 5696;
5726 -> 5725;
5726 -> 5668;
5727 -> 5668;
5728 -> 5669;
5728 -> 5696;
5728 -> 5727;
5728 -> 5668;
5729 -> 5673;
5729 -> 5721;
5729 -> 5668;
5730 -> 5729;
5730 -> 5668;
5731 -> 5672;
5731 -> 5730;
5731 -> 5668;
5732 -> 5447;
5732 -> 5731;
5732 -> 5614;
5732 -> 5580;
5733 -> 5665;
5733 -> 5580;
5734 -> 5426;
5734 -> 5580;
5735 -> 5580;
5736 -> 5733;
5736 -> 5735;
5737 -> 5734;
5737 -> 5735;
5738 -> 5735;
5739 -> 5738;
5739 -> 5737;
5739 -> 5735;
5740 -> 5735;
5741 -> 5735;
5742 -> 5740;
5742 -> 5741;
5742 -> 5735;
5743 -> 5735;
5744 -> 5736;
5744 -> 5696;
5744 -> 5743;
5744 -> 5735;
5745 -> 5736;
5745 -> 5696;
5745 -> 5744;
5746 -> 5740;
5746 -> 5745;
5746 -> 5742;
5746 -> 5744;
5747 -> 5744;
5748 -> 5740;
5748 -> 5747;
5748 -> 5746;
5748 -> 5744;
5749 -> 5736;
5749 -> 5696;
5749 -> 5744;
5750 -> 5740;
5750 -> 5749;
5750 -> 5748;
5750 -> 5744;
5751 -> 5735;
5752 -> 5736;
5752 -> 5696;
5752 -> 5751;
5752 -> 5735;
5753 -> 5752;
5754 -> 5753;
5755 -> 5740;
5755 -> 5754;
5755 -> 5750;
5755 -> 5753;
5756 -> 5736;
5756 -> 5696;
5756 -> 5753;
5757 -> 5740;
5757 -> 5756;
5757 -> 5755;
5757 -> 5753;
5758 -> 5752;
5759 -> 5740;
5759 -> 5758;
5759 -> 5757;
5759 -> 5752;
5760 -> 5736;
5760 -> 5696;
5760 -> 5735;
5761 -> 5735;
5762 -> 5740;
5762 -> 5761;
5762 -> 5759;
5762 -> 5735;
5763 -> 5736;
5763 -> 5696;
5763 -> 5735;
5764 -> 5763;
5765 -> 5740;
5765 -> 5764;
5765 -> 5762;
5765 -> 5763;
5766 -> 5763;
5767 -> 5740;
5767 -> 5766;
5767 -> 5765;
5767 -> 5763;
5768 -> 5763;
5769 -> 5740;
5769 -> 5768;
5769 -> 5767;
5769 -> 5763;
5770 -> 5763;
5771 -> 5740;
5771 -> 5770;
5771 -> 5769;
5771 -> 5763;
5772 -> 5763;
5773 -> 5772;
5774 -> 5740;
5774 -> 5773;
5774 -> 5771;
5774 -> 5772;
5775 -> 5763;
5776 -> 5740;
5776 -> 5775;
5776 -> 5774;
5776 -> 5763;
5777 -> 5735;
5778 -> 5736;
5778 -> 5763;
5778 -> 5777;
5778 -> 5735;
5779 -> 5736;
5779 -> 5763;
5779 -> 5735;
5780 -> 5735;
5781 -> 5736;
5781 -> 5763;
5781 -> 5780;
5781 -> 5735;
5782 -> 5735;
5783 -> 5736;
5783 -> 5763;
5783 -> 5782;
5783 -> 5735;
5784 -> 5735;
5785 -> 5736;
5785 -> 5763;
5785 -> 5784;
5785 -> 5735;
5786 -> 5740;
5786 -> 5776;
5786 -> 5735;
5787 -> 5786;
5787 -> 5735;
5788 -> 5739;
5788 -> 5787;
5788 -> 5735;
5789 -> 5577;
5789 -> 5788;
5789 -> 5580;
5790 -> 5763;
5791 -> 5763;
5792 -> 5791;
5793 -> 5447;
5793 -> 5792;
5793 -> 5732;
5793 -> 5791;
5794 -> 5447;
5794 -> 5763;
5795 -> 5426;
5795 -> 5763;
5796 -> 5763;
5797 -> 5794;
5797 -> 5796;
5798 -> 5795;
5798 -> 5796;
5799 -> 5796;
5800 -> 5799;
5800 -> 5798;
5800 -> 5796;
5801 -> 5763;
5802 -> 5763;
5803 -> 5447;
5803 -> 5763;
5804 -> 5426;
5804 -> 5763;
5805 -> 5763;
5806 -> 5803;
5806 -> 5805;
5807 -> 5804;
5807 -> 5805;
5808 -> 5805;
5809 -> 5808;
5809 -> 5807;
5809 -> 5805;
5810 -> 5763;
5811 -> 5763;
5812 -> 5763;
5813 -> 5763;
5814 -> 5763;
5815 -> 5763;
5816 -> 5763;
5817 -> 5763;
5818 -> 5763;
5819 -> 5763;
5820 -> 5763;
5821 -> 5763;
5822 -> 5763;
5823 -> 5763;
5824 -> 5763;
5825 -> 5763;
5826 -> 5763;
5827 -> 5826;
5828 -> 5826;
5829 -> 5826;
5830 -> 5826;
5831 -> 5826;
5831 -> 5830;
5832 -> 5826;
5833 -> 5826;
5834 -> 5826;
5835 -> 5826;
5836 -> 5826;
5837 -> 5826;
5838 -> 5426;
5838 -> 5763;
5839 -> 5838;
5839 -> 5763;
5840 -> 5763;
5841 -> 5840;
5841 -> 5839;
5841 -> 5763;
5842 -> 5763;
5843 -> 5763;
5844 -> 5842;
5844 -> 5843;
5844 -> 5763;
5845 -> 5763;
5846 -> 5763;
5846 -> 5826;
5846 -> 5845;
5847 -> 5763;
5847 -> 5826;
5847 -> 5846;
5848 -> 5842;
5848 -> 5847;
5848 -> 5844;
5848 -> 5846;
5849 -> 5846;
5850 -> 5842;
5850 -> 5849;
5850 -> 5848;
5850 -> 5846;
5851 -> 5763;
5851 -> 5826;
5851 -> 5846;
5852 -> 5842;
5852 -> 5851;
5852 -> 5850;
5852 -> 5846;
5853 -> 5763;
5854 -> 5763;
5854 -> 5826;
5854 -> 5853;
5855 -> 5854;
5856 -> 5855;
5857 -> 5842;
5857 -> 5856;
5857 -> 5852;
5857 -> 5855;
5858 -> 5763;
5858 -> 5826;
5858 -> 5855;
5859 -> 5842;
5859 -> 5858;
5859 -> 5857;
5859 -> 5855;
5860 -> 5854;
5861 -> 5842;
5861 -> 5860;
5861 -> 5859;
5861 -> 5854;
5862 -> 5763;
5862 -> 5826;
5863 -> 5763;
5864 -> 5842;
5864 -> 5863;
5864 -> 5861;
5864 -> 5763;
5865 -> 5826;
5866 -> 5842;
5866 -> 5865;
5866 -> 5864;
5866 -> 5826;
5867 -> 5826;
5868 -> 5842;
5868 -> 5867;
5868 -> 5866;
5868 -> 5826;
5869 -> 5826;
5870 -> 5842;
5870 -> 5869;
5870 -> 5868;
5870 -> 5826;
5871 -> 5826;
5872 -> 5842;
5872 -> 5871;
5872 -> 5870;
5872 -> 5826;
5873 -> 5826;
5874 -> 5826;
5875 -> 5842;
5875 -> 5874;
5875 -> 5872;
5875 -> 5826;
5876 -> 5763;
5877 -> 5763;
5877 -> 5826;
5877 -> 5876;
5878 -> 5877;
5879 -> 5842;
5879 -> 5878;
5879 -> 5875;
5879 -> 5877;
5880 -> 5877;
5881 -> 5842;
5881 -> 5880;
5881 -> 5879;
5881 -> 5877;
5882 -> 5877;
5883 -> 5842;
5883 -> 5882;
5883 -> 5881;
5883 -> 5877;
5884 -> 5877;
5885 -> 5842;
5885 -> 5884;
5885 -> 5883;
5885 -> 5877;
5886 -> 5877;
5887 -> 5842;
5887 -> 5886;
5887 -> 5885;
5887 -> 5877;
5888 -> 5763;
5888 -> 5826;
5889 -> 5763;
5890 -> 5763;
5890 -> 5826;
5890 -> 5889;
5891 -> 5763;
5892 -> 5763;
5892 -> 5826;
5892 -> 5891;
5893 -> 5763;
5894 -> 5763;
5894 -> 5826;
5894 -> 5893;
5895 -> 5842;
5895 -> 5887;
5895 -> 5763;
5896 -> 5895;
5896 -> 5763;
5897 -> 5841;
5897 -> 5896;
5897 -> 5763;
5898 -> 5447;
5898 -> 5897;
5898 -> 5793;
5898 -> 5763;
5899 -> 5426;
5899 -> 5763;
5900 -> 5899;
5900 -> 5763;
5901 -> 5840;
5901 -> 5900;
5901 -> 5763;
5902 -> 5826;
5902 -> 5846;
5903 -> 5842;
5903 -> 5902;
5903 -> 5844;
5903 -> 5846;
5904 -> 5842;
5904 -> 5849;
5904 -> 5903;
5904 -> 5846;
5905 -> 5826;
5905 -> 5846;
5906 -> 5842;
5906 -> 5905;
5906 -> 5904;
5906 -> 5846;
5907 -> 5842;
5907 -> 5856;
5907 -> 5906;
5907 -> 5855;
5908 -> 5826;
5908 -> 5855;
5909 -> 5842;
5909 -> 5908;
5909 -> 5907;
5909 -> 5855;
5910 -> 5842;
5910 -> 5860;
5910 -> 5909;
5910 -> 5854;
5911 -> 5842;
5911 -> 5863;
5911 -> 5910;
5911 -> 5763;
5912 -> 5842;
5912 -> 5865;
5912 -> 5911;
5912 -> 5826;
5913 -> 5842;
5913 -> 5867;
5913 -> 5912;
5913 -> 5826;
5914 -> 5842;
5914 -> 5869;
5914 -> 5913;
5914 -> 5826;
5915 -> 5842;
5915 -> 5871;
5915 -> 5914;
5915 -> 5826;
5916 -> 5842;
5916 -> 5874;
5916 -> 5915;
5916 -> 5826;
5917 -> 5842;
5917 -> 5916;
5917 -> 5763;
5918 -> 5917;
5918 -> 5763;
5919 -> 5901;
5919 -> 5918;
5919 -> 5763;
5920 -> 5577;
5920 -> 5919;
5920 -> 5789;
5920 -> 5763;
5921 -> 5826;
5922 -> 5826;
5923 -> 5922;
5924 -> 5447;
5924 -> 5826;
5925 -> 5426;
5925 -> 5826;
5926 -> 5826;
5927 -> 5924;
5927 -> 5926;
5928 -> 5925;
5928 -> 5926;
5929 -> 5926;
5930 -> 5929;
5930 -> 5928;
5930 -> 5926;
5931 -> 5826;
5932 -> 5826;
5933 -> 5447;
5933 -> 5826;
5934 -> 5426;
5934 -> 5826;
5935 -> 5826;
5936 -> 5933;
5936 -> 5935;
5937 -> 5934;
5937 -> 5935;
5938 -> 5935;
5939 -> 5938;
5939 -> 5937;
5939 -> 5935;
5940 -> 5826;
5941 -> 5826;
5942 -> 5826;
5943 -> 5826;
5944 -> 5826;
5945 -> 5826;
5946 -> 5826;
5947 -> 5826;
5948 -> 5826;
5949 -> 5826;
5950 -> 5826;
5951 -> 5826;
5952 -> 5826;
5953 -> 5826;
5954 -> 5826;
5955 -> 5831;
5956 -> 5826;
5956 -> 5955;
5957 -> 5826;
5957 -> 5955;
5958 -> 5826;
5958 -> 5955;
5958 -> 5832;
5959 -> 5826;
5959 -> 5955;
5959 -> 5833;
5960 -> 5826;
5960 -> 5955;
5960 -> 5834;
5961 -> 5826;
5961 -> 5955;
5962 -> 5955;
5963 -> 5826;
5963 -> 5955;
5964 -> 5426;
5964 -> 5826;
5965 -> 5964;
5965 -> 5826;
5966 -> 5826;
5967 -> 5966;
5967 -> 5965;
5967 -> 5826;
5968 -> 5826;
5969 -> 5826;
5970 -> 5968;
5970 -> 5969;
5970 -> 5826;
5971 -> 5826;
5972 -> 5826;
5972 -> 5955;
5972 -> 5971;
5973 -> 5826;
5973 -> 5955;
5973 -> 5972;
5974 -> 5968;
5974 -> 5973;
5974 -> 5970;
5974 -> 5972;
5975 -> 5972;
5976 -> 5968;
5976 -> 5975;
5976 -> 5974;
5976 -> 5972;
5977 -> 5826;
5977 -> 5955;
5977 -> 5972;
5978 -> 5968;
5978 -> 5977;
5978 -> 5976;
5978 -> 5972;
5979 -> 5826;
5980 -> 5826;
5980 -> 5955;
5980 -> 5979;
5981 -> 5980;
5982 -> 5981;
5983 -> 5968;
5983 -> 5982;
5983 -> 5978;
5983 -> 5981;
5984 -> 5826;
5984 -> 5955;
5984 -> 5981;
5985 -> 5968;
5985 -> 5984;
5985 -> 5983;
5985 -> 5981;
5986 -> 5980;
5987 -> 5968;
5987 -> 5986;
5987 -> 5985;
5987 -> 5980;
5988 -> 5826;
5988 -> 5955;
5989 -> 5826;
5990 -> 5968;
5990 -> 5989;
5990 -> 5987;
5990 -> 5826;
5991 -> 5955;
5992 -> 5968;
5992 -> 5991;
5992 -> 5990;
5992 -> 5955;
5993 -> 5955;
5994 -> 5968;
5994 -> 5993;
5994 -> 5992;
5994 -> 5955;
5995 -> 5955;
5996 -> 5968;
5996 -> 5995;
5996 -> 5994;
5996 -> 5955;
5997 -> 5955;
5998 -> 5968;
5998 -> 5997;
5998 -> 5996;
5998 -> 5955;
5999 -> 5955;
6000 -> 5955;
6001 -> 5968;
6001 -> 6000;
6001 -> 5998;
6001 -> 5955;
6002 -> 5826;
6003 -> 5826;
6003 -> 5955;
6003 -> 6002;
6004 -> 6003;
6005 -> 5968;
6005 -> 6004;
6005 -> 6001;
6005 -> 6003;
6006 -> 6003;
6007 -> 5968;
6007 -> 6006;
6007 -> 6005;
6007 -> 6003;
6008 -> 6003;
6009 -> 5968;
6009 -> 6008;
6009 -> 6007;
6009 -> 6003;
6010 -> 6003;
6011 -> 5968;
6011 -> 6010;
6011 -> 6009;
6011 -> 6003;
6012 -> 6003;
6013 -> 5968;
6013 -> 6012;
6013 -> 6011;
6013 -> 6003;
6014 -> 5826;
6014 -> 5955;
6015 -> 5826;
6016 -> 5826;
6016 -> 5955;
6016 -> 6015;
6017 -> 5826;
6018 -> 5826;
6018 -> 5955;
6018 -> 6017;
6019 -> 5826;
6020 -> 5826;
6020 -> 5955;
6020 -> 6019;
6021 -> 5968;
6021 -> 6013;
6021 -> 5826;
6022 -> 6021;
6022 -> 5826;
6023 -> 5967;
6023 -> 6022;
6023 -> 5826;
6024 -> 5447;
6024 -> 6023;
6024 -> 5898;
6024 -> 5826;
6025 -> 5426;
6025 -> 5826;
6026 -> 6025;
6026 -> 5826;
6027 -> 5966;
6027 -> 6026;
6027 -> 5826;
6028 -> 5955;
6028 -> 5972;
6029 -> 5968;
6029 -> 6028;
6029 -> 5970;
6029 -> 5972;
6030 -> 5968;
6030 -> 5975;
6030 -> 6029;
6030 -> 5972;
6031 -> 5955;
6031 -> 5972;
6032 -> 5968;
6032 -> 6031;
6032 -> 6030;
6032 -> 5972;
6033 -> 5968;
6033 -> 5982;
6033 -> 6032;
6033 -> 5981;
6034 -> 5955;
6034 -> 5981;
6035 -> 5968;
6035 -> 6034;
6035 -> 6033;
6035 -> 5981;
6036 -> 5968;
6036 -> 5986;
6036 -> 6035;
6036 -> 5980;
6037 -> 5968;
6037 -> 5989;
6037 -> 6036;
6037 -> 5826;
6038 -> 5968;
6038 -> 5991;
6038 -> 6037;
6038 -> 5955;
6039 -> 5968;
6039 -> 5993;
6039 -> 6038;
6039 -> 5955;
6040 -> 5968;
6040 -> 5995;
6040 -> 6039;
6040 -> 5955;
6041 -> 5968;
6041 -> 5997;
6041 -> 6040;
6041 -> 5955;
6042 -> 5968;
6042 -> 6000;
6042 -> 6041;
6042 -> 5955;
6043 -> 5968;
6043 -> 6042;
6043 -> 5826;
6044 -> 6043;
6044 -> 5826;
6045 -> 6027;
6045 -> 6044;
6045 -> 5826;
6046 -> 5577;
6046 -> 6045;
6046 -> 5920;
6046 -> 5826;
6047 -> 5414;
6048 -> 5826;
6048 -> 6047;
6048 -> 5414;
6049 -> 5447;
6049 -> 6024;
6049 -> 6048;
6050 -> 5414;
6051 -> 5447;
6051 -> 6050;
6051 -> 6049;
6051 -> 5414;
6052 -> 5452;
6052 -> 5414;
6053 -> 5577;
6053 -> 5414;
6057 -> 6055;
6057 -> 6054;
6058 -> 6056;
6058 -> 6054;
6059 -> 6054;
6060 -> 0;
6060 -> 5414;
6061 -> 5414;
6062 -> 5414;
6063 -> 6052;
6063 -> 6062;
6064 -> 6053;
6064 -> 6062;
6065 -> 6060;
6065 -> 6062;
6066 -> 6061;
6066 -> 6062;
6067 -> 6061;
6067 -> 6062;
6068 -> 6062;
6069 -> 6066;
6069 -> 6068;
6069 -> 6062;
6070 -> 6069;
6070 -> 6062;
6071 -> 0;
6073 -> 6071;
6073 -> 6072;
6074 -> 6072;
6076 -> 6075;
6078 -> 6077;
6080 -> 6079;
6081 -> 6074;
6082 -> 6074;
6082 -> 6072;
6083 -> 6073;
6083 -> 6074;
6083 -> 6072;
6084 -> 6072;
6085 -> 6062;
6086 -> 6085;
6086 -> 6067;
6086 -> 6062;
6087 -> 6063;
6087 -> 6062;
6088 -> 6064;
6088 -> 6062;
6089 -> 6065;
6089 -> 6062;
6090 -> 6087;
6090 -> 6062;
6091 -> 6088;
6091 -> 6062;
6092 -> 6086;
6092 -> 6062;
6093 -> 6062;
6094 -> 6090;
6094 -> 6093;
6095 -> 6091;
6095 -> 6093;
6096 -> 6092;
6096 -> 6093;
6097 -> 6070;
6097 -> 6093;
6098 -> 6094;
6098 -> 6093;
6099 -> 6094;
6099 -> 6087;
6099 -> 6093;
6100 -> 6095;
6100 -> 6093;
6101 -> 6095;
6101 -> 6088;
6101 -> 6093;
6102 -> 6093;
6103 -> 6098;
6103 -> 6102;
6104 -> 6099;
6104 -> 6102;
6105 -> 6100;
6105 -> 6102;
6106 -> 6101;
6106 -> 6102;
6107 -> 6097;
6107 -> 6102;
6108 -> 6103;
6108 -> 6102;
6109 -> 6104;
6109 -> 6102;
6110 -> 6105;
6110 -> 6102;
6111 -> 6106;
6111 -> 6102;
6112 -> 6102;
6113 -> 6108;
6113 -> 6112;
6114 -> 6109;
6114 -> 6112;
6115 -> 6110;
6115 -> 6112;
6116 -> 6111;
6116 -> 6112;
6117 -> 6107;
6117 -> 6112;
6118 -> 6112;
6119 -> 6114;
6119 -> 6118;
6119 -> 6112;
6120 -> 6112;
6121 -> 6116;
6121 -> 6120;
6121 -> 6112;
6122 -> 6119;
6122 -> 6121;
6122 -> 6112;
6123 -> 6112;
6124 -> 6123;
6124 -> 6122;
6124 -> 6112;
6125 -> 6112;
6126 -> 6125;
6126 -> 6114;
6126 -> 6112;
6127 -> 6126;
6128 -> 6122;
6128 -> 6124;
6128 -> 6127;
6128 -> 6126;
6129 -> 6128;
6129 -> 6125;
6129 -> 6127;
6129 -> 6122;
6129 -> 6126;
6130 -> 6112;
6131 -> 6130;
6131 -> 6116;
6131 -> 6112;
6132 -> 6131;
6133 -> 6122;
6133 -> 6124;
6133 -> 6129;
6133 -> 6132;
6133 -> 6131;
6134 -> 6133;
6134 -> 6132;
6134 -> 6130;
6134 -> 6122;
6134 -> 6131;
6135 -> 6112;
6136 -> 6135;
6136 -> 6114;
6136 -> 6112;
6137 -> 6136;
6138 -> 6137;
6138 -> 6116;
6138 -> 6136;
6139 -> 6138;
6140 -> 6122;
6140 -> 6124;
6140 -> 6129;
6140 -> 6134;
6140 -> 6139;
6140 -> 6138;
6141 -> 6113;
6141 -> 6138;
6142 -> 6115;
6142 -> 6138;
6143 -> 6138;
6144 -> 6141;
6144 -> 6143;
6145 -> 6139;
6145 -> 6143;
6146 -> 6142;
6146 -> 6143;
6147 -> 6139;
6147 -> 6143;
6148 -> 6117;
6148 -> 6143;
6149 -> 6144;
6149 -> 6087;
6149 -> 6145;
6149 -> 6143;
6150 -> 6146;
6150 -> 6088;
6150 -> 6147;
6150 -> 6143;
6151 -> 6148;
6151 -> 0;
6151 -> 6149;
6151 -> 6150;
6151 -> 6087;
6151 -> 6088;
6151 -> 6143;
6152 -> 6140;
6152 -> 6151;
6152 -> 6138;
6153 -> 6138;
6154 -> 6122;
6154 -> 6124;
6154 -> 6129;
6154 -> 6134;
6154 -> 6153;
6154 -> 6137;
6154 -> 6138;
6155 -> 6138;
6156 -> 6122;
6156 -> 6124;
6156 -> 6129;
6156 -> 6134;
6156 -> 6135;
6156 -> 6155;
6156 -> 6138;
6157 -> 6152;
6157 -> 6138;
6158 -> 6154;
6158 -> 6138;
6159 -> 6157;
6159 -> 6158;
6159 -> 6138;
6160 -> 6156;
6160 -> 6138;
6161 -> 6159;
6161 -> 6160;
6161 -> 6138;
6162 -> 6161;
6162 -> 6135;
6162 -> 6137;
6162 -> 6122;
6162 -> 6138;
6163 -> 6122;
6163 -> 6112;
6164 -> 6104;
6164 -> 6102;
6165 -> 6106;
6165 -> 6102;
6166 -> 6102;
6167 -> 6164;
6167 -> 6166;
6167 -> 6102;
6168 -> 6165;
6168 -> 6166;
6168 -> 6102;
6169 -> 6167;
6169 -> 6168;
6169 -> 6102;
6170 -> 6163;
6170 -> 6122;
6170 -> 6124;
6170 -> 6129;
6170 -> 6134;
6170 -> 6162;
6170 -> 6164;
6170 -> 6165;
6170 -> 6169;
6171 -> 6169;
6172 -> 6163;
6172 -> 6122;
6172 -> 6124;
6172 -> 6129;
6172 -> 6134;
6172 -> 6162;
6172 -> 6171;
6172 -> 6165;
6172 -> 6169;
6173 -> 6163;
6173 -> 6122;
6173 -> 6124;
6173 -> 6129;
6173 -> 6134;
6173 -> 6162;
6173 -> 6164;
6173 -> 6165;
6173 -> 6172;
6174 -> 6172;
6175 -> 6164;
6175 -> 6174;
6176 -> 6165;
6176 -> 6174;
6177 -> 6174;
6178 -> 0;
6178 -> 6174;
6179 -> 6175;
6179 -> 6174;
6180 -> 6176;
6180 -> 6174;
6181 -> 6174;
6182 -> 6178;
6182 -> 6181;
6183 -> 6179;
6183 -> 6181;
6184 -> 6180;
6184 -> 6181;
6185 -> 6177;
6185 -> 6181;
6186 -> 6182;
6186 -> 6185;
6186 -> 6181;
6187 -> 6183;
6187 -> 6185;
6187 -> 6181;
6188 -> 6184;
6188 -> 6185;
6188 -> 6181;
6189 -> 6175;
6189 -> 6176;
6189 -> 6102;
6190 -> 0;
6190 -> 6189;
6191 -> 6189;
6192 -> 6189;
6193 -> 6190;
6193 -> 6192;
6194 -> 6191;
6194 -> 6192;
6195 -> 6191;
6195 -> 6192;
6196 -> 6191;
6196 -> 6192;
6197 -> 6193;
6197 -> 6196;
6197 -> 6192;
6198 -> 6194;
6198 -> 6196;
6198 -> 6192;
6199 -> 6195;
6199 -> 6196;
6199 -> 6192;
6200 -> 6102;
6201 -> 6189;
6201 -> 6200;
6201 -> 6102;
6202 -> 6102;
6203 -> 6189;
6203 -> 6202;
6203 -> 6102;
6204 -> 6177;
6204 -> 6191;
6204 -> 6186;
6204 -> 6187;
6204 -> 6188;
6204 -> 6197;
6204 -> 6198;
6204 -> 6199;
6204 -> 6093;
6205 -> 6204;
6206 -> 6205;
6207 -> 6095;
6207 -> 6088;
6207 -> 6151;
6207 -> 6204;
6207 -> 6205;
6208 -> 6096;
6208 -> 6207;
6208 -> 6085;
6208 -> 6205;
6209 -> 6089;
6209 -> 6206;
6209 -> 6062;
6210 -> 5447;
6210 -> 6209;
6210 -> 6051;
6210 -> 5414;
6211 -> 5577;
6211 -> 6046;
6211 -> 5414;
6212 -> 5452;
6212 -> 5568;
6212 -> 5414;
6213 -> 5447;
6213 -> 6210;
6213 -> 5414;
6214 -> 5261;
6215 -> 981;
6216 -> 982;
6216 -> 981;
6217 -> 5258;
6217 -> 981;
6218 -> 981;
6219 -> 6216;
6219 -> 6218;
6220 -> 6217;
6220 -> 6218;
6221 -> 6220;
6221 -> 6218;
6222 -> 6221;
6222 -> 5258;
6222 -> 5955;
6223 -> 6219;
6223 -> 6222;
6223 -> 5955;
6223 -> 6221;
6224 -> 6221;
6224 -> 6223;
6225 -> 6224;
6225 -> 6223;
6226 -> 6224;
6227 -> 981;
6228 -> 982;
6228 -> 981;
}