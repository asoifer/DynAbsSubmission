<?xml version="1.0" encoding="utf-8"?>
<DirectedGraph Title="DG" xmlns="http://schemas.microsoft.com/vs/2009/dgml">
<Nodes>
<Node Id="EXTERNAL" Label="EXTERNAL" />
<Node Id="25014:[387..448).1" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 695050" />
<Node Id="25014:[390..448).1" Label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 695051" />
<Node Id="28001:[588..156578).1" Label="param BindingTests(this) 695052" />
<Node Id="21002:[790..793).1" Label="'C' 695053" />
<Node Id="21002:[772..793).1" Label="DefaultTypeName = 'C' 695054" />
<Node Id="21002:[845..848).1" Label="'M' 695055" />
<Node Id="21002:[825..848).1" Label="DefaultMethodName = 'M' 695056" />
<Node Id="21002:[3243..25375).1" Label="@'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 695057" />
<Node Id="21002:[3098..25375).1" Label="LINQ =
        #region the string LINQ defines a complete LINQ API called List1$T$ (for instance method) and List2$T$ (for extension methods)
 @'using System;
using System.Text;

public delegate R Func1$in T1, out R$(T1 arg1);
public delegate R Func1$in T1, in T2, out R$(T1 arg1, T2 arg2);

public class List1$T$
{
    internal T[] data;
    internal int length;

    public List1(params T[] args)
    {
        this.data = (T[])args.Clone();
        this.length = data.Length;
    }

    public List1()
    {
        this.data = new T[0];
        this.length = 0;
    }

    public int Length { get { return length; } }

    //public T this[int index] { get { return this.data[index]; } }
    public T Get(int index) { return this.data[index]; }

    public virtual void Add(T t)
    {
        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
        data[length++] = t;
    }

    public override string ToString()
    {
        StringBuilder builder = new StringBuilder();
        builder.Append('[');
        for (int i = 0; i $ Length; i++)
        {
            if (i != 0) builder.Append(',').Append(' ');
            builder.Append(data[i]);
        }
        builder.Append(']');
        return builder.ToString();
    }

    public List1$E$ Cast$E$()
    {
        E[] data = new E[Length];
        for (int i = 0; i $ Length; i++)
            data[i] = (E)(object)this.data[i];
        return new List1$E$(data);
    }

    public List1$T$ Where(Func1$T, bool$ predicate)
    {
        List1$T$ result = new List1$T$();
        for (int i = 0; i $ Length; i++)
        {
            T datum = this.data[i];
            if (predicate(datum)) result.Add(datum);
        }
        return result;
    }

    public List1$U$ Select$U$(Func1$T, U$ selector)
    {
        int length = this.Length;
        U[] data = new U[length];
        for (int i = 0; i $ length; i++) data[i] = selector(this.data[i]);
        return new List1$U$(data);
    }

    public List1$V$ SelectMany$U, V$(Func1$T, List1$U$$ selector, Func1$T, U, V$ resultSelector)
    {
        List1$V$ result = new List1$V$();
        int length = this.Length;
        for (int i = 0; i $ length; i++)
        {
            T t = this.data[i];
            List1$U$ selected = selector(t);
            int ulength = selected.Length;
            for (int j = 0; j $ ulength; j++)
            {
                U u = selected.data[j];
                V v = resultSelector(t, u);
                result.Add(v);
            }
        }

        return result;
    }

    public List1$V$ Join$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, U, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                for (int k = 0; k $ row.u.Length; k++)
                {
                    U u = row.u.Get(k);
                    V v = resultSelector(t, u);
                    result.Add(v);
                }
            }
        }
        return result;
    }

    class Joined$K, T2, U$
    {
        public Joined(K k)
        {
            this.k = k;
            this.t = new List1$T2$();
            this.u = new List1$U$();
        }
        public readonly K k;
        public readonly List1$T2$ t;
        public readonly List1$U$ u;
    }

    public List1$V$ GroupJoin$U, K, V$(List1$U$ inner, Func1$T, K$ outerKeyselector,
        Func1$U, K$ innerKeyselector, Func1$T, List1$U$, V$ resultSelector)
    {
        List1$Joined$K, T, U$$ joined = new List1$Joined$K, T, U$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = outerKeyselector(t);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.t.Add(t);
        }
        for (int i = 0; i $ inner.Length; i++)
        {
            U u = inner.Get(i);
            K k = innerKeyselector(u);
            Joined$K, T, U$ row = null;
            for (int j = 0; j $ joined.Length; j++)
            {
                if (joined.Get(j).k.Equals(k))
                {
                    row = joined.Get(j);
                    break;
                }
            }
            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
            row.u.Add(u);
        }
        List1$V$ result = new List1$V$();
        for (int i = 0; i $ joined.Length; i++)
        {
            Joined$K, T, U$ row = joined.Get(i);
            for (int j = 0; j $ row.t.Length; j++)
            {
                T t = row.t.Get(j);
                V v = resultSelector(t, row.u);
                result.Add(v);
            }
        }
        return result;
    }

    public OrderedList1$T$ OrderBy$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenBy(Keyselector);
        return result;
    }

    public OrderedList1$T$ OrderByDescending$K$(Func1$T, K$ Keyselector)
    {
        OrderedList1$T$ result = new OrderedList1$T$(this);
        result.ThenByDescending(Keyselector);
        return result;
    }

    public List1$Group1$K, T$$ GroupBy$K$(Func1$T, K$ Keyselector)
    {
        List1$Group1$K, T$$ result = new List1$Group1$K, T$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, T$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, T$(k));
            }
            Group1.Add(t);
        }
        return result;
    }

    public List1$Group1$K, E$$ GroupBy$K, E$(Func1$T, K$ Keyselector,
        Func1$T, E$ elementSelector)
    {
        List1$Group1$K, E$$ result = new List1$Group1$K, E$$();
        for (int i = 0; i $ Length; i++)
        {
            T t = this.Get(i);
            K k = Keyselector(t);
            Group1$K, E$ Group1 = null;
            for (int j = 0; j $ result.Length; j++)
            {
                if (result.Get(j).Key.Equals(k))
                {
                    Group1 = result.Get(j);
                    break;
                }
            }
            if (Group1 == null)
            {
                result.Add(Group1 = new Group1$K, E$(k));
            }
            Group1.Add(elementSelector(t));
        }
        return result;
    }
}

public class OrderedList1$T$ : List1$T$
{
    private List1$Keys1$ Keys1;

    public override void Add(T t)
    {
        throw new NotSupportedException();
    }

    internal OrderedList1(List1$T$ list)
    {
        Keys1 = new List1$Keys1$();
        for (int i = 0; i $ list.Length; i++)
        {
            base.Add(list.Get(i));
            Keys1.Add(new Keys1());
        }
    }

    public OrderedList1$T$ ThenBy$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add((IComparable)o);
        }
        Sort();
        return this;
    }

    class ReverseOrder : IComparable
    {
        IComparable c;
        public ReverseOrder(IComparable c)
        {
            this.c = c;
        }
        public int CompareTo(object o)
        {
            ReverseOrder other = (ReverseOrder)o;
            return other.c.CompareTo(this.c);
        }
        public override string ToString()
        {
            return String.Empty + '-' + c;
        }
    }

    public OrderedList1$T$ ThenByDescending$K$(Func1$T, K$ Keyselector)
    {
        for (int i = 0; i $ Length; i++)
        {
            object o = Keyselector(this.Get(i)); // work around bug 8405
            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));
        }
        Sort();
        return this;
    }

    void Sort()
    {
        Array.Sort(this.Keys1.data, this.data, 0, Length);
    }
}

class Keys1 : List1$IComparable$, IComparable
{
    public int CompareTo(object o)
    {
        Keys1 other = (Keys1)o;
        for (int i = 0; i $ Length; i++)
        {
            int c = this.Get(i).CompareTo(other.Get(i));
            if (c != 0) return c;
        }
        return 0;
    }
}

public class Group1$K, T$ : List1$T$
{
    public Group1(K k, params T[] data)
        : base(data)
    {
        this.Key = k;
    }

    public K Key { get; private set; }

    public override string ToString()
    {
        return Key + String.Empty + ':' + base.ToString();
    }
}

//public delegate R Func2$in T1, out R$(T1 arg1);
//public delegate R Func2$in T1, in T2, out R$(T1 arg1, T2 arg2);
//
//public class List2$T$
//{
//    internal T[] data;
//    internal int length;
//
//    public List2(params T[] args)
//    {
//        this.data = (T[])args.Clone();
//        this.length = data.Length;
//    }
//
//    public List2()
//    {
//        this.data = new T[0];
//        this.length = 0;
//    }
//
//    public int Length { get { return length; } }
//
//    //public T this[int index] { get { return this.data[index]; } }
//    public T Get(int index) { return this.data[index]; }
//
//    public virtual void Add(T t)
//    {
//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);
//        data[length++] = t;
//    }
//
//    public override string ToString()
//    {
//        StringBuilder builder = new StringBuilder();
//        builder.Append('[');
//        for (int i = 0; i $ Length; i++)
//        {
//            if (i != 0) builder.Append(',').Append(' ');
//            builder.Append(data[i]);
//        }
//        builder.Append(']');
//        return builder.ToString();
//    }
//
//}
//
//public class OrderedList2$T$ : List2$T$
//{
//    internal List2$Keys2$ Keys2;
//
//    public override void Add(T t)
//    {
//        throw new NotSupportedException();
//    }
//
//    internal OrderedList2(List2$T$ list)
//    {
//        Keys2 = new List2$Keys2$();
//        for (int i = 0; i $ list.Length; i++)
//        {
//            base.Add(list.Get(i));
//            Keys2.Add(new Keys2());
//        }
//    }
//
//    internal void Sort()
//    {
//        Array.Sort(this.Keys2.data, this.data, 0, Length);
//    }
//}
//
//class Keys2 : List2$IComparable$, IComparable
//{
//    public int CompareTo(object o)
//    {
//        Keys2 other = (Keys2)o;
//        for (int i = 0; i $ Length; i++)
//        {
//            int c = this.Get(i).CompareTo(other.Get(i));
//            if (c != 0) return c;
//        }
//        return 0;
//    }
//}
//
//public class Group2$K, T$ : List2$T$
//{
//    public Group2(K k, params T[] data)
//        : base(data)
//    {
//        this.Key = k;
//    }
//
//    public K Key { get; private set; }
//
//    public override string ToString()
//    {
//        return Key + String.Empty + ':' + base.ToString();
//    }
//}
//
//public static class Extensions2
//{
//
//    public static List2$E$ Cast$T, E$(this List2$T$ _this)
//    {
//        E[] data = new E[_this.Length];
//        for (int i = 0; i $ _this.Length; i++)
//            data[i] = (E)(object)_this.data[i];
//        return new List2$E$(data);
//    }
//
//    public static List2$T$ Where$T$(this List2$T$ _this, Func2$T, bool$ predicate)
//    {
//        List2$T$ result = new List2$T$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T datum = _this.data[i];
//            if (predicate(datum)) result.Add(datum);
//        }
//        return result;
//    }
//
//    public static List2$U$ Select$T,U$(this List2$T$ _this, Func2$T, U$ selector)
//    {
//        int length = _this.Length;
//        U[] data = new U[length];
//        for (int i = 0; i $ length; i++) data[i] = selector(_this.data[i]);
//        return new List2$U$(data);
//    }
//
//    public static List2$V$ SelectMany$T, U, V$(this List2$T$ _this, Func2$T, List2$U$$ selector, Func2$T, U, V$ resultSelector)
//    {
//        List2$V$ result = new List2$V$();
//        int length = _this.Length;
//        for (int i = 0; i $ length; i++)
//        {
//            T t = _this.data[i];
//            List2$U$ selected = selector(t);
//            int ulength = selected.Length;
//            for (int j = 0; j $ ulength; j++)
//            {
//                U u = selected.data[j];
//                V v = resultSelector(t, u);
//                result.Add(v);
//            }
//        }
//
//        return result;
//    }
//
//    public static List2$V$ Join$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, U, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                for (int k = 0; k $ row.u.Length; k++)
//                {
//                    U u = row.u.Get(k);
//                    V v = resultSelector(t, u);
//                    result.Add(v);
//                }
//            }
//        }
//        return result;
//    }
//
//    class Joined$K, T2, U$
//    {
//        public Joined(K k)
//        {
//            this.k = k;
//            this.t = new List2$T2$();
//            this.u = new List2$U$();
//        }
//        public readonly K k;
//        public readonly List2$T2$ t;
//        public readonly List2$U$ u;
//    }
//
//    public static List2$V$ GroupJoin$T, U, K, V$(this List2$T$ _this, List2$U$ inner, Func2$T, K$ outerKeyselector,
//        Func2$U, K$ innerKeyselector, Func2$T, List2$U$, V$ resultSelector)
//    {
//        List2$Joined$K, T, U$$ joined = new List2$Joined$K, T, U$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = outerKeyselector(t);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.t.Add(t);
//        }
//        for (int i = 0; i $ inner.Length; i++)
//        {
//            U u = inner.Get(i);
//            K k = innerKeyselector(u);
//            Joined$K, T, U$ row = null;
//            for (int j = 0; j $ joined.Length; j++)
//            {
//                if (joined.Get(j).k.Equals(k))
//                {
//                    row = joined.Get(j);
//                    break;
//                }
//            }
//            if (row == null) joined.Add(row = new Joined$K, T, U$(k));
//            row.u.Add(u);
//        }
//        List2$V$ result = new List2$V$();
//        for (int i = 0; i $ joined.Length; i++)
//        {
//            Joined$K, T, U$ row = joined.Get(i);
//            for (int j = 0; j $ row.t.Length; j++)
//            {
//                T t = row.t.Get(j);
//                V v = resultSelector(t, row.u);
//                result.Add(v);
//            }
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenBy(Keyselector);
//        return result;
//    }
//
//    public static OrderedList2$T$ OrderByDescending$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        OrderedList2$T$ result = new OrderedList2$T$(_this);
//        result.ThenByDescending(Keyselector);
//        return result;
//    }
//
//    public static List2$Group2$K, T$$ GroupBy$T, K$(this List2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        List2$Group2$K, T$$ result = new List2$Group2$K, T$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, T$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, T$(k));
//            }
//            Group2.Add(t);
//        }
//        return result;
//    }
//
//    public static List2$Group2$K, E$$ GroupBy$T, K, E$(this List2$T$ _this, Func2$T, K$ Keyselector,
//        Func2$T, E$ elementSelector)
//    {
//        List2$Group2$K, E$$ result = new List2$Group2$K, E$$();
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            T t = _this.Get(i);
//            K k = Keyselector(t);
//            Group2$K, E$ Group2 = null;
//            for (int j = 0; j $ result.Length; j++)
//            {
//                if (result.Get(j).Key.Equals(k))
//                {
//                    Group2 = result.Get(j);
//                    break;
//                }
//            }
//            if (Group2 == null)
//            {
//                result.Add(Group2 = new Group2$K, E$(k));
//            }
//            Group2.Add(elementSelector(t));
//        }
//        return result;
//    }
//
//    public static OrderedList2$T$ ThenBy$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add((IComparable)o);
//        }
//        _this.Sort();
//        return _this;
//    }
//
//    class ReverseOrder : IComparable
//    {
//        IComparable c;
//        public ReverseOrder(IComparable c)
//        {
//            this.c = c;
//        }
//        public int CompareTo(object o)
//        {
//            ReverseOrder other = (ReverseOrder)o;
//            return other.c.CompareTo(this.c);
//        }
//        public override string ToString()
//        {
//            return String.Empty + '-' + c;
//        }
//    }
//
//    public static OrderedList2$T$ ThenByDescending$T, K$(this OrderedList2$T$ _this, Func2$T, K$ Keyselector)
//    {
//        for (int i = 0; i $ _this.Length; i++)
//        {
//            object o = Keyselector(_this.Get(i)); // work around bug 8405
//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));
//        }
//        _this.Sort();
//        return _this;
//    }
//
//}
' 695058" />
<Node Id="21002:[678..25421).1" Label="param CompilingTestBase(this) 695059" />
<Node Id="21003:[1338..2835).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 695060" />
<Node Id="21003:[1308..2835).1" Label="NullableAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents
                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type
                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it
                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents
                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents
                   AllowMultiple = false)]
    public class NullableAttribute : Attribute
    {
        public NullableAttribute(byte transformFlag) { }
        public NullableAttribute(byte[] transformFlags)
        {
        }
    }
}
' 695061" />
<Node Id="21003:[2908..3440).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 695062" />
<Node Id="21003:[2871..3440).1" Label="NullableContextAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Delegate |
        AttributeTargets.Interface |
        AttributeTargets.Method |
        AttributeTargets.Struct,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NullableContextAttribute : Attribute
    {
        public readonly byte Flag;
        public NullableContextAttribute(byte flag)
        {
            Flag = flag;
        }
    }
}' 695063" />
<Node Id="21003:[3516..3915).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 695064" />
<Node Id="21003:[3476..3915).1" Label="NullablePublicOnlyAttributeDefinition = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]
    public sealed class NullablePublicOnlyAttribute : Attribute
    {
        public readonly bool IncludesInternals;
        public NullablePublicOnlyAttribute(bool includesInternals)
        {
            IncludesInternals = includesInternals;
        }
    }
}' 695065" />
<Node Id="21003:[4223..4448).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 695066" />
<Node Id="21003:[4192..4448).1" Label="AllowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class AllowNullAttribute : Attribute
    {
    }
}' 695067" />
<Node Id="21003:[4518..4746).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 695068" />
<Node Id="21003:[4484..4746).1" Label="DisallowNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]
    public sealed class DisallowNullAttribute : Attribute
    {
    }
}' 695069" />
<Node Id="21003:[4813..5071).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 695070" />
<Node Id="21003:[4782..5071).1" Label="MaybeNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class MaybeNullAttribute : Attribute
    {
    }
}
' 695071" />
<Node Id="21003:[5142..5397).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 695072" />
<Node Id="21003:[5107..5397).1" Label="MaybeNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class MaybeNullWhenAttribute : Attribute
    {
        public MaybeNullWhenAttribute(bool when) { }
    }
}
' 695073" />
<Node Id="21003:[5462..5718).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 695074" />
<Node Id="21003:[5433..5718).1" Label="NotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]
    public sealed class NotNullAttribute : Attribute
    {
    }
}
' 695075" />
<Node Id="21003:[5787..6038).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 695076" />
<Node Id="21003:[5754..6038).1" Label="NotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public sealed class NotNullWhenAttribute : Attribute
    {
        public NotNullWhenAttribute(bool when) { }
    }
}
' 695077" />
<Node Id="21003:[6109..6460).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 695078" />
<Node Id="21003:[6074..6460).1" Label="MemberNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullAttribute : Attribute
    {
        public MemberNotNullAttribute(params string[] members) { }
        public MemberNotNullAttribute(string member) { }
    }
}
' 695079" />
<Node Id="21003:[6535..6920).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 695080" />
<Node Id="21003:[6496..6920).1" Label="MemberNotNullWhenAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]
    public sealed class MemberNotNullWhenAttribute : Attribute
    {
        public MemberNotNullWhenAttribute(bool when, params string[] members) { }
        public MemberNotNullWhenAttribute(bool when, string member) { }
    }
}
' 695081" />
<Node Id="21003:[6993..7250).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 695082" />
<Node Id="21003:[6956..7250).1" Label="DoesNotReturnIfAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class DoesNotReturnIfAttribute : Attribute
    {
        public DoesNotReturnIfAttribute(bool condition) { }
    }
}
' 695083" />
<Node Id="21003:[7321..7557).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 695084" />
<Node Id="21003:[7286..7557).1" Label="DoesNotReturnAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class DoesNotReturnAttribute : Attribute
    {
        public DoesNotReturnAttribute() { }
    }
}
' 695085" />
<Node Id="21003:[7631..7980).1" Label="@'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 695086" />
<Node Id="21003:[7593..7980).1" Label="NotNullIfNotNullAttributeDefinition = @'
namespace System.Diagnostics.CodeAnalysis
{
    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
    public sealed class NotNullIfNotNullAttribute : Attribute
    {
        public NotNullIfNotNullAttribute(string parameterName) { }
    }
}
' 695087" />
<Node Id="21003:[8047..8155).1" Label="@'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 695088" />
<Node Id="21003:[8016..8155).1" Label="IsExternalInitTypeDefinition = @'
namespace System.Runtime.CompilerServices
{
    public static class IsExternalInit
    {
    }
}
' 695089" />
<Node Id="21003:[8220..8359).1" Label="@'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 695090" />
<Node Id="21003:[8191..8359).1" Label="IAsyncDisposableDefinition = @'
namespace System
{
    public interface IAsyncDisposable
    {
       System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 695091" />
<Node Id="21003:[8415..20279).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 695092" />
<Node Id="21003:[8395..20279).1" Label="AsyncStreamsTypes = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]
    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute
    {
        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)
        {
        }
    }
}

#nullable disable

namespace System.Threading.Tasks.Sources
{
    using System.Diagnostics;
    using System.Runtime.ExceptionServices;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Auto)]
    public struct ManualResetValueTaskSourceCore$TResult$
    {
        private Action$object$ _continuation;
        private object _continuationState;
        private ExecutionContext _executionContext;
        private object _capturedContext;
        private bool _completed;
        private TResult _result;
        private ExceptionDispatchInfo _error;
        private short _version;

        /// $summary$Gets or sets whether to force continuations to run asynchronously.$/summary$
        /// $remarks$Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.$/remarks$
        public bool RunContinuationsAsynchronously { get; set; }

        /// $summary$Resets to prepare for the next operation.$/summary$
        public void Reset()
        {
            // Reset/update state for the next use/await of this instance.
            _version++;
            _completed = false;
            _result = default;
            _error = null;
            _executionContext = null;
            _capturedContext = null;
            _continuation = null;
            _continuationState = null;
        }

        public void SetResult(TResult result)
        {
            _result = result;
            SignalCompletion();
        }

        public void SetException(Exception error)
        {
            _error = ExceptionDispatchInfo.Capture(error);
            SignalCompletion();
        }

        public short Version =$ _version;

        public ValueTaskSourceStatus GetStatus(short token)
        {
            ValidateToken(token);
            return
                !_completed ? ValueTaskSourceStatus.Pending :
                _error == null ? ValueTaskSourceStatus.Succeeded :
                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :
                ValueTaskSourceStatus.Faulted;
        }

        public TResult GetResult(short token)
        {
            ValidateToken(token);
            if (!_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }

            _error?.Throw();
            return _result;
        }

        public void OnCompleted(Action$object$ continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)
        {
            if (continuation == null)
            {
                throw new ArgumentNullException(nameof(continuation));
            }
            ValidateToken(token);

            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)
            {
                _executionContext = ExecutionContext.Capture();
            }

            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)
            {
                SynchronizationContext sc = SynchronizationContext.Current;
                if (sc != null && sc.GetType() != typeof(SynchronizationContext))
                {
                    _capturedContext = sc;
                }
                else
                {
                    TaskScheduler ts = TaskScheduler.Current;
                    if (ts != TaskScheduler.Default)
                    {
                        _capturedContext = ts;
                    }
                }
            }

            // We need to set the continuation state before we swap in the delegate, so that
            // if there's a race between this and SetResult/Exception and SetResult/Exception
            // sees the _continuation as non-null, it'll be able to invoke it with the state
            // stored here.  However, this also means that if this is used incorrectly (e.g.
            // awaited twice concurrently), _continuationState might get erroneously overwritten.
            // To minimize the chances of that, we check preemptively whether _continuation
            // is already set to something other than the completion sentinel.

            object oldContinuation = _continuation;
            if (oldContinuation == null)
            {
                _continuationState = state;
                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);
            }

            if (oldContinuation != null)
            {
                // Operation already completed, so we need to queue the supplied callback.
                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))
                {
                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
                }

                switch (_capturedContext)
                {
                    case null:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                        break;

                    case SynchronizationContext sc:
                        sc.Post(s =$
                        {
                            var tuple = (Tuple$Action$object$, object$)s;
                            tuple.Item1(tuple.Item2);
                        }, Tuple.Create(continuation, state));
                        break;

                    case TaskScheduler ts:
                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                        break;
                }
            }
        }

        private void ValidateToken(short token)
        {
            if (token != _version)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
        }

        private void SignalCompletion()
        {
            if (_completed)
            {
                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();
            }
            _completed = true;

            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)
            {
                if (_executionContext != null)
                {
                    ExecutionContext.Run(
                        _executionContext,
                        s =$ ((ManualResetValueTaskSourceCore$TResult$)s).InvokeContinuation(),
                        this);
                }
                else
                {
                    InvokeContinuation();
                }
            }
        }

        private void InvokeContinuation()
        {
            switch (_capturedContext)
            {
                case null:
                    if (RunContinuationsAsynchronously)
                    {
                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);
                    }
                    else
                    {
                        _continuation(_continuationState);
                    }
                    break;

                case SynchronizationContext sc:
                    sc.Post(s =$
                    {
                        var state = (Tuple$Action$object$, object$)s;
                        state.Item1(state.Item2);
                    }, Tuple.Create(_continuation, _continuationState));
                    break;

                case TaskScheduler ts:
                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);
                    break;
            }
        }
    }

    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication
    {
        internal static void ThrowInvalidOperationException() =$ throw new InvalidOperationException();

        internal static readonly Action$object$ s_sentinel = CompletionSentinel;
        private static void CompletionSentinel(object _) // named method to aid debugging
        {
            Debug.Fail(''The sentinel delegate should never be invoked.'');
            ThrowInvalidOperationException();
        }
    }
}

namespace System.Runtime.CompilerServices
{
    using System.Runtime.InteropServices;

    /// $summary$Represents a builder for asynchronous iterators.$/summary$
    [StructLayout(LayoutKind.Auto)]
    public struct AsyncIteratorMethodBuilder
    {
        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating
        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as
        // most of the logic is shared.  However, in the future this could be changed and
        // optimized.  For example, we do need to allocate an object (once) to flow state like
        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by
        // allocating a Task-derived object.  We could optimize this further by removing
        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations
        // related to it, so we'd need to replicate all of those optimizations (e.g. storing
        // that box object directly into a Task's continuation field).

        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly

        public static AsyncIteratorMethodBuilder Create() =$
            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void MoveNext$TStateMachine$(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.Start(ref stateMachine);

        public void AwaitOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);

        public void AwaitUnsafeOnCompleted$TAwaiter, TStateMachine$(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine =$
            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);

        /// $summary$Marks iteration as being completed, whether successfully or otherwise.$/summary$
        public void Complete() =$ _methodBuilder.SetResult();
    }
}
' 695093" />
<Node Id="21003:[20353..20617).1" Label="@'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 695094" />
<Node Id="21003:[20315..20617).1" Label="EnumeratorCancellationAttributeType = @'
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]
    public class EnumeratorCancellationAttribute : Attribute
    {
        public EnumeratorCancellationAttribute() { }
    }
}
' 695095" />
<Node Id="21003:[20689..21473).1" Label="@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 695096" />
<Node Id="21003:[20653..21473).1" Label="NativeIntegerAttributeDefinition =
@'using System.Collections.Generic;
namespace System.Runtime.CompilerServices
{
    [System.AttributeUsage(
        AttributeTargets.Class |
        AttributeTargets.Event |
        AttributeTargets.Field |
        AttributeTargets.GenericParameter |
        AttributeTargets.Parameter |
        AttributeTargets.Property |
        AttributeTargets.ReturnValue,
        AllowMultiple = false,
        Inherited = false)]
    public sealed class NativeIntegerAttribute : Attribute
    {
        public NativeIntegerAttribute()
        {
            TransformFlags = new[] { true };
        }
        public NativeIntegerAttribute(bool[] flags)
        {
            TransformFlags = flags;
        }
        public readonly IList$bool$ TransformFlags;
    }
}' 695097" />
<Node Id="25004:[2227..2317).1" Label="() =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 695098" />
<Node Id="25004:[2332..2368).1" Label="LazyThreadSafetyMode.PublicationOnly 695099" />
<Node Id="25004:[2183..2369).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 695100" />
<Node Id="25004:[2155..2369).1" Label="s_lazyDefaultVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 695101" />
<Node Id="25004:[2602..2696).1" Label="() =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 695102" />
<Node Id="25004:[2711..2747).1" Label="LazyThreadSafetyMode.PublicationOnly 695103" />
<Node Id="25004:[2558..2748).1" Label="new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 695104" />
<Node Id="25004:[2531..2748).1" Label="s_lazyLatestVbReferences = new Lazy$MetadataReference[]$(
            () =$ new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },
            LazyThreadSafetyMode.PublicationOnly) 695105" />
<Node Id="25004:[2914..2947).1" Label="RuntimeUtilities.IsCoreClrRuntime 695106" />
<Node Id="25004:[3094..3171).1" Label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 695107" />
<Node Id="25004:[3077..3172).1" Label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 695108" />
<Node Id="25004:[2894..3172).1" Label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime
            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')
            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 695109" />
<Node Id="25004:[3490..5167).1" Label="() =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            } 695110" />
<Node Id="25004:[5182..5218).1" Label="LazyThreadSafetyMode.PublicationOnly 695111" />
<Node Id="25004:[3446..5219).1" Label="new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 695112" />
<Node Id="25004:[3432..5219).1" Label="s_winRtRefs = new Lazy$MetadataReference[]$(
            () =$
            {
                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');

                var windowsruntime =
                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');

                var runtime =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');

                var objectModel =
                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');

                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).
                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');

                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).
                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');

                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.
                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');

                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');

                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };
            },
            LazyThreadSafetyMode.PublicationOnly) 695113" />
<Node Id="25004:[5576..5645).1" Label="() =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 695114" />
<Node Id="25004:[5660..5696).1" Label="LazyThreadSafetyMode.PublicationOnly 695115" />
<Node Id="25004:[5532..5697).1" Label="new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 695116" />
<Node Id="25004:[5508..5697).1" Label="s_portableRefsMinimal = new Lazy$MetadataReference[]$(
            () =$ new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },
            LazyThreadSafetyMode.PublicationOnly) 695117" />
<Node Id="25004:[6321..6439).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 695118" />
<Node Id="25004:[6458..6494).1" Label="LazyThreadSafetyMode.PublicationOnly 695119" />
<Node Id="25004:[6275..6495).1" Label="new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 695120" />
<Node Id="25004:[6244..6495).1" Label="s_systemCoreRef =
            new Lazy$MetadataReference$(
                () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),
                LazyThreadSafetyMode.PublicationOnly) 695121" />
<Node Id="25004:[6714..6838).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 695122" />
<Node Id="25004:[6853..6889).1" Label="LazyThreadSafetyMode.PublicationOnly 695123" />
<Node Id="25004:[6672..6890).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695124" />
<Node Id="25004:[6637..6890).1" Label="s_systemCoreRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695125" />
<Node Id="25004:[7130..7249).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 695126" />
<Node Id="25004:[7264..7300).1" Label="LazyThreadSafetyMode.PublicationOnly 695127" />
<Node Id="25004:[7088..7301).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695128" />
<Node Id="25004:[7066..7301).1" Label="s_systemCoreRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695129" />
<Node Id="25004:[7532..7667).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 695130" />
<Node Id="25004:[7682..7718).1" Label="LazyThreadSafetyMode.PublicationOnly 695131" />
<Node Id="25004:[7490..7719).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695132" />
<Node Id="25004:[7464..7719).1" Label="s_systemWindowsFormsRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695133" />
<Node Id="25004:[7940..8064).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 695134" />
<Node Id="25004:[8079..8115).1" Label="LazyThreadSafetyMode.PublicationOnly 695135" />
<Node Id="25004:[7898..8116).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695136" />
<Node Id="25004:[7877..8116).1" Label="s_systemDrawingRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695137" />
<Node Id="25004:[8324..8442).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 695138" />
<Node Id="25004:[8457..8493).1" Label="LazyThreadSafetyMode.PublicationOnly 695139" />
<Node Id="25004:[8282..8494).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695140" />
<Node Id="25004:[8264..8494).1" Label="s_systemDataRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695141" />
<Node Id="25004:[8694..8807).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 695142" />
<Node Id="25004:[8822..8858).1" Label="LazyThreadSafetyMode.PublicationOnly 695143" />
<Node Id="25004:[8652..8859).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695144" />
<Node Id="25004:[8636..8859).1" Label="s_mscorlibRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695145" />
<Node Id="25004:[9063..9214).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 695146" />
<Node Id="25004:[9229..9265).1" Label="LazyThreadSafetyMode.PublicationOnly 695147" />
<Node Id="25004:[9021..9266).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695148" />
<Node Id="25004:[8997..9266).1" Label="s_mscorlibRefPortable = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695149" />
<Node Id="25004:[9478..10389).1" Label="() =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            } 695150" />
<Node Id="25004:[10404..10440).1" Label="LazyThreadSafetyMode.PublicationOnly 695151" />
<Node Id="25004:[9436..10441).1" Label="new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 695152" />
<Node Id="25004:[9420..10441).1" Label="s_aacorlibRef = new Lazy$MetadataReference$(
            () =$
            {
                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;
                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);

                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);

                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);

                Stream dllStream = new MemoryStream();
                var emitResult = compilation.Emit(dllStream);
                if (!emitResult.Success)
                {
                    emitResult.Diagnostics.Verify();
                }
                dllStream.Seek(0, SeekOrigin.Begin);

                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');
            },
            LazyThreadSafetyMode.PublicationOnly) 695153" />
<Node Id="25004:[10811..10967).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri') 695154" />
<Node Id="25004:[10982..11018).1" Label="LazyThreadSafetyMode.PublicationOnly 695155" />
<Node Id="25004:[10769..11019).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 695156" />
<Node Id="25004:[10749..11019).1" Label="s_mscorlibRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\FxReferenceAssembliesUri'),
            LazyThreadSafetyMode.PublicationOnly) 695157" />
<Node Id="25004:[11415..11589).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 695158" />
<Node Id="25004:[11604..11640).1" Label="LazyThreadSafetyMode.PublicationOnly 695159" />
<Node Id="25004:[11373..11641).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695160" />
<Node Id="25004:[11345..11641).1" Label="s_mscorlibRef_silverlight = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695161" />
<Node Id="25004:[12432..12560).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 695162" />
<Node Id="25004:[12575..12611).1" Label="LazyThreadSafetyMode.PublicationOnly 695163" />
<Node Id="25004:[12390..12612).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695164" />
<Node Id="25004:[12369..12612).1" Label="s_desktopCSharpRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695165" />
<Node Id="25004:[12815..12944).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 695166" />
<Node Id="25004:[12959..12995).1" Label="LazyThreadSafetyMode.PublicationOnly 695167" />
<Node Id="25004:[12773..12996).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695168" />
<Node Id="25004:[12760..12996).1" Label="s_std20Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695169" />
<Node Id="25004:[13204..13343).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 695170" />
<Node Id="25004:[13358..13394).1" Label="LazyThreadSafetyMode.PublicationOnly 695171" />
<Node Id="25004:[13162..13395).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695172" />
<Node Id="25004:[13138..13395).1" Label="s_46NetStandardFacade = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695173" />
<Node Id="25004:[13621..13796).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 695174" />
<Node Id="25004:[13811..13847).1" Label="LazyThreadSafetyMode.PublicationOnly 695175" />
<Node Id="25004:[13579..13848).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 695176" />
<Node Id="25004:[13551..13848).1" Label="s_systemDynamicRuntimeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),
            LazyThreadSafetyMode.PublicationOnly) 695177" />
<Node Id="25004:[14066..14175).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 695178" />
<Node Id="25004:[14190..14226).1" Label="LazyThreadSafetyMode.PublicationOnly 695179" />
<Node Id="25004:[14024..14227).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695180" />
<Node Id="25004:[14010..14227).1" Label="s_systemRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695181" />
<Node Id="25004:[14421..14531).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 695182" />
<Node Id="25004:[14546..14582).1" Label="LazyThreadSafetyMode.PublicationOnly 695183" />
<Node Id="25004:[14379..14583).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695184" />
<Node Id="25004:[14361..14583).1" Label="s_systemRef_v46 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695185" />
<Node Id="25004:[14798..14913).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 695186" />
<Node Id="25004:[14928..14964).1" Label="LazyThreadSafetyMode.PublicationOnly 695187" />
<Node Id="25004:[14756..14965).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695188" />
<Node Id="25004:[14725..14965).1" Label="s_systemRef_v4_0_30319_17929 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695189" />
<Node Id="25004:[15193..15301).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 695190" />
<Node Id="25004:[15316..15352).1" Label="LazyThreadSafetyMode.PublicationOnly 695191" />
<Node Id="25004:[15151..15353).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695192" />
<Node Id="25004:[15133..15353).1" Label="s_systemRef_v20 = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695193" />
<Node Id="25004:[15554..15670).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 695194" />
<Node Id="25004:[15685..15721).1" Label="LazyThreadSafetyMode.PublicationOnly 695195" />
<Node Id="25004:[15512..15722).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695196" />
<Node Id="25004:[15495..15722).1" Label="s_systemXmlRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695197" />
<Node Id="25004:[15925..16050).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 695198" />
<Node Id="25004:[16065..16101).1" Label="LazyThreadSafetyMode.PublicationOnly 695199" />
<Node Id="25004:[15883..16102).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695200" />
<Node Id="25004:[15862..16102).1" Label="s_systemXmlLinqRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695201" />
<Node Id="25004:[16314..16416).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 695202" />
<Node Id="25004:[16431..16467).1" Label="LazyThreadSafetyMode.PublicationOnly 695203" />
<Node Id="25004:[16272..16468).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695204" />
<Node Id="25004:[16250..16468).1" Label="s_mscorlibFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695205" />
<Node Id="25004:[16687..16800).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 695206" />
<Node Id="25004:[16815..16851).1" Label="LazyThreadSafetyMode.PublicationOnly 695207" />
<Node Id="25004:[16645..16852).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695208" />
<Node Id="25004:[16618..16852).1" Label="s_systemRuntimeFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695209" />
<Node Id="25004:[17083..17200).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 695210" />
<Node Id="25004:[17215..17251).1" Label="LazyThreadSafetyMode.PublicationOnly 695211" />
<Node Id="25004:[17041..17252).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695212" />
<Node Id="25004:[17012..17252).1" Label="s_systemThreadingFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695213" />
<Node Id="25004:[17497..17625).1" Label="() =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 695214" />
<Node Id="25004:[17640..17676).1" Label="LazyThreadSafetyMode.PublicationOnly 695215" />
<Node Id="25004:[17455..17677).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695216" />
<Node Id="25004:[17421..17677).1" Label="s_systemThreadingTasksFacadeRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695217" />
<Node Id="25004:[17911..18059).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 695218" />
<Node Id="25004:[18074..18110).1" Label="LazyThreadSafetyMode.PublicationOnly 695219" />
<Node Id="25004:[17869..18111).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695220" />
<Node Id="25004:[17850..18111).1" Label="s_mscorlibPP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695221" />
<Node Id="25004:[18321..18481).1" Label="() =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 695222" />
<Node Id="25004:[18496..18532).1" Label="LazyThreadSafetyMode.PublicationOnly 695223" />
<Node Id="25004:[18279..18533).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695224" />
<Node Id="25004:[18255..18533).1" Label="s_systemRuntimePP7Ref = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695225" />
<Node Id="25004:[18754..18880).1" Label="() =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 695226" />
<Node Id="25004:[18895..18931).1" Label="LazyThreadSafetyMode.PublicationOnly 695227" />
<Node Id="25004:[18712..18932).1" Label="new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695228" />
<Node Id="25004:[18687..18932).1" Label="s_FSharpTestLibraryRef = new Lazy$MetadataReference$(
            () =$ AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),
            LazyThreadSafetyMode.PublicationOnly) 695229" />
<Node Id="25004:[19130..19147).1" Label="@'R:\Invalid.dll' 695230" />
<Node Id="25004:[19120..19147).1" Label="fullPath: @'R:\Invalid.dll' 695231" />
<Node Id="25004:[19094..19148).1" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 695232" />
<Node Id="25004:[19094..19148).5" Label="new TestMetadataReference(fullPath: @'R:\Invalid.dll') 695233" />
<Node Id="25004:[19081..19148).1" Label="InvalidRef = new TestMetadataReference(fullPath: @'R:\Invalid.dll') 695234" />
<Node Id="21003:[51329..51357).1" Label="MscorlibRef_v4_0_30316_17626 695235" />
<Node Id="25004:[10673..10688).1" Label="Net451.mscorlib 695236" />
<Node Id="21003:[51307..51358).1" Label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 695237" />
<Node Id="21003:[51292..51358).1" Label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 695238" />
<Node Id="21003:[56538..56550).1" Label="'/*$bind$*/' 695239" />
<Node Id="21003:[56524..56550).1" Label="StartString = '/*$bind$*/' 695240" />
<Node Id="21003:[56596..56609).1" Label="'/*$/bind$*/' 695241" />
<Node Id="21003:[56584..56609).1" Label="EndString = '/*$/bind$*/' 695242" />
<Node Id="21003:[92394..99056).1" Label="@'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 695243" />
<Node Id="21003:[92381..99056).1" Label="SpanSource = @'
namespace System
    {
        public readonly ref struct Span$T$
        {
            private readonly T[] arr;

            public ref T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 1;
            public int Length { get; }

            unsafe public Span(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public Span(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly Span$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(Span$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator Span$T$(T[] array) =$ new Span$T$(array);
        }

        public readonly ref struct ReadOnlySpan$T$
        {
            private readonly T[] arr;

            public ref readonly T this[int i] =$ ref arr[i];
            public override int GetHashCode() =$ 2;
            public int Length { get; }

            unsafe public ReadOnlySpan(void* pointer, int length)
            {
                this.arr = Helpers.ToArray$T$(pointer, length);
                this.Length = length;
            }

            public ReadOnlySpan(T[] arr)
            {
                this.arr = arr;
                this.Length = arr.Length;
            }

            public void CopyTo(Span$T$ other) { }

            /// $summary$Gets an enumerator for this span.$/summary$
            public Enumerator GetEnumerator() =$ new Enumerator(this);

            /// $summary$Enumerates the elements of a $see cref=''Span{T}''/$.$/summary$
            public ref struct Enumerator
            {
                /// $summary$The span being enumerated.$/summary$
                private readonly ReadOnlySpan$T$ _span;
                /// $summary$The next index to yield.$/summary$
                private int _index;

                /// $summary$Initialize the enumerator.$/summary$
                /// $param name=''span''$The span to enumerate.$/param$
                internal Enumerator(ReadOnlySpan$T$ span)
                {
                    _span = span;
                    _index = -1;
                }

                /// $summary$Advances the enumerator to the next element of the span.$/summary$
                public bool MoveNext()
                {
                    int index = _index + 1;
                    if (index $ _span.Length)
                    {
                        _index = index;
                        return true;
                    }

                    return false;
                }

                /// $summary$Gets the element at the current position of the enumerator.$/summary$
                public ref readonly T Current
                {
                    get =$ ref _span[_index];
                }
            }

            public static implicit operator ReadOnlySpan$T$(T[] array) =$ array == null ? default : new ReadOnlySpan$T$(array);

            public static implicit operator ReadOnlySpan$T$(string stringValue) =$ string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan$T$((T[])(object)stringValue.ToCharArray());
        }

        public readonly ref struct SpanLike$T$
        {
            public readonly Span$T$ field;
        }

        public enum Color: sbyte
        {
            Red,
            Green,
            Blue
        }

        public static unsafe class Helpers
        {
            public static T[] ToArray$T$(void* ptr, int count)
            {
                if (ptr == null)
                {
                    return null;
                }

                if (typeof(T) == typeof(int))
                {
                    var arr = new int[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((int*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(byte))
                {
                    var arr = new byte[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((byte*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(char))
                {
                    var arr = new char[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((char*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                if (typeof(T) == typeof(Color))
                {
                    var arr = new Color[count];
                    for(int i = 0; i $ count; i++)
                    {
                        arr[i] = ((Color*)ptr)[i];
                    }

                    return (T[])(object)arr;
                }

                throw new Exception(''add a case for: '' + typeof(T));
            }
        }
    }' 695244" />
<Node Id="21003:[101764..102290).1" Label="@'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 695245" />
<Node Id="21003:[101743..102290).1" Label="s_IAsyncEnumerable = @'
namespace System.Collections.Generic
{
    public interface IAsyncEnumerable$out T$
    {
        IAsyncEnumerator$T$ GetAsyncEnumerator(System.Threading.CancellationToken token = default);
    }

    public interface IAsyncEnumerator$out T$ : System.IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask$bool$ MoveNextAsync();
        T Current { get; }
    }
}
namespace System
{
    public interface IAsyncDisposable
    {
        System.Threading.Tasks.ValueTask DisposeAsync();
    }
}
' 695246" />
<Node Id="21003:[1215..102298).1" Label="param CSharpTestBase(this) 695247" />
<Node Id="25015:[917..26825).1" Label="param CommonTestBase(this) 695248" />
<Node Id="25004:[926..968).1" Label="param TestBase(this) 695249" />
<Node Id="25004:[908..913).1" Label="_temp 695250" />
<Node Id="25014:[387..448).372" Label="=$ Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 695251" />
<Node Id="28001:[73650..74048).1" Label="param NamespaceQualifiedGenericTypeName(this) 695252" />
<Node Id="28001:[73830..73977).1" Label="var source =
@'namespace N
{
    public class A$T$
    {
        public static T F;
    }
}
class B
{
    static int G = N.A$int$.F;
}'; 695253" />
<Node Id="28001:[73991..74037).1" Label="CreateCompilation(source).VerifyDiagnostics(); 695254" />
<Node Id="28001:[74009..74015).1" Label="source 695255" />
<Node Id="21004:[2251..2264).1" Label="param operator(string source) 695256" />
<Node Id="21004:[2290..2296).1" Label="source 695257" />
<Node Id="21004:[2269..2297).1" Label="new CSharpTestSource(source) 695258" />
<Node Id="21004:[839..851).1" Label="param CSharpTestSource(object value) 695259" />
<Node Id="21004:[814..902).1" Label="param CSharpTestSource(this) 695260" />
<Node Id="21004:[877..882).1" Label="Value 695261" />
<Node Id="28001:[73991..74037).2" Label="CreateCompilation(source).VerifyDiagnostics(); 695262" />
<Node Id="28001:[73991..74037).4" Label="CreateCompilation(source).VerifyDiagnostics(); 695263" />
<Node Id="28001:[73991..74016).1" Label="CreateCompilation(source) 695264" />
<Node Id="21003:[44736..44759).1" Label="param CreateCompilation(CSharpTestSource source) 695265" />
<Node Id="21003:[44774..44822).1" Label="param CreateCompilation(IEnumerable$MetadataReference$ references = null) 695266" />
<Node Id="21003:[44837..44876).1" Label="param CreateCompilation(CSharpCompilationOptions options = null) 695267" />
<Node Id="21003:[44891..44929).1" Label="param CreateCompilation(CSharpParseOptions parseOptions = null) 695268" />
<Node Id="21003:[44944..45002).1" Label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 695269" />
<Node Id="21003:[45017..45041).1" Label="param CreateCompilation(string assemblyName = '') 695270" />
<Node Id="21003:[45056..45082).1" Label="param CreateCompilation(string sourceFileName = '') 695271" />
<Node Id="21003:[45097..45128).1" Label="param CreateCompilation(bool skipUsesIsNullable = false) 695272" />
<Node Id="21003:[45156..45162).1" Label="source 695273" />
<Node Id="21003:[45198..45213).1" Label="targetFramework 695274" />
<Node Id="21003:[45215..45225).1" Label="references 695275" />
<Node Id="21003:[45164..45226).1" Label="TargetFrameworkUtil.GetReferences(targetFramework, references) 695276" />
<Node Id="25005:[9600..9618).1" Label="param GetReferences(TargetFramework tf) 695277" />
<Node Id="25005:[9620..9671).1" Label="param GetReferences(IEnumerable$MetadataReference$ additionalReferences) 695278" />
<Node Id="25005:[9697..9732).1" Label="var references = GetReferences(tf); 695279" />
<Node Id="25005:[9714..9731).1" Label="GetReferences(tf) 695280" />
<Node Id="25005:[7569..7600).1" Label="param GetReferences(TargetFramework targetFramework) 695281" />
<Node Id="25005:[7605..9525).1" Label="targetFramework switch
        {
            TargetFramework.Empty =$ ImmutableArray$MetadataReference$.Empty,
            TargetFramework.Mscorlib40 =$ Mscorlib40References,
            TargetFramework.Mscorlib40Extended =$ Mscorlib40ExtendedReferences,
            TargetFramework.Mscorlib40AndSystemCore =$ Mscorlib40andSystemCoreReferences,
            TargetFramework.Mscorlib40AndVBRuntime =$ Mscorlib40andVBRuntimeReferences,
            TargetFramework.Mscorlib45 =$ Mscorlib45References,
            TargetFramework.Mscorlib45Extended =$ Mscorlib45ExtendedReferences,
            TargetFramework.Mscorlib45AndCSharp =$ Mscorlib45AndCSharpReferences,
            TargetFramework.Mscorlib45AndVBRuntime =$ Mscorlib45AndVBRuntimeReferences,
            TargetFramework.Mscorlib46 =$ Mscorlib46References,
            TargetFramework.Mscorlib46Extended =$ Mscorlib46ExtendedReferences,
            TargetFramework.Mscorlib461 =$ Mscorlib46References,
            TargetFramework.Mscorlib461Extended =$ Mscorlib461ExtendedReferences,
            TargetFramework.NetStandard20 =$ NetStandard20References,
            TargetFramework.NetCoreApp =$ NetCoreAppReferences,
            TargetFramework.WinRT =$ WinRTReferences,
            TargetFramework.Standard =$ StandardReferences,
            TargetFramework.StandardLatest =$ StandardLatestReferences,
            TargetFramework.StandardAndCSharp =$ StandardAndCSharpReferences,
            TargetFramework.StandardAndVBRuntime =$ StandardAndVBRuntimeReferences,
            TargetFramework.StandardCompat =$ StandardCompatReferences,
            TargetFramework.DefaultVb =$ DefaultVbReferences,
            TargetFramework.Minimal =$ MinimalReferences,
            TargetFramework.MinimalAsync =$ MinimalAsyncReferences,
            _ =$ throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),
        } 695282" />
<Node Id="25005:[8889..8907).1" Label="StandardReferences 695283" />
<Node Id="25005:[6208..6241).1" Label="RuntimeUtilities.IsCoreClrRuntime 695284" />
<Node Id="25005:[6270..6298).1" Label="Mscorlib46ExtendedReferences 695285" />
<Node Id="25005:[4543..4693).1" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 695286" />
<Node Id="25005:[4648..4670).1" Label="TestBase.ValueTupleRef 695287" />
<Node Id="25004:[12011..12051).1" Label="TestReferences.NetFx.ValueTuple.tuplelib 695288" />
<Node Id="25005:[4543..4693).7" Label="ImmutableArray.Create$MetadataReference$(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 695289" />
<Node Id="25005:[6208..6298).1" Label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 695290" />
<Node Id="25005:[9746..9845).1" Label="if (additionalReferences == null)
            {
                return references;
            } 695291" />
<Node Id="25005:[9746..9845).2" Label="if (additionalReferences == null)
            {
                return references;
            } 695292" />
<Node Id="25005:[9812..9830).1" Label="return references; 695293" />
<Node Id="21003:[45228..45235).1" Label="options 695294" />
<Node Id="21003:[45237..45249).1" Label="parseOptions 695295" />
<Node Id="21003:[45251..45263).1" Label="assemblyName 695296" />
<Node Id="21003:[45265..45279).1" Label="sourceFileName 695297" />
<Node Id="21003:[45281..45299).1" Label="skipUsesIsNullable 695298" />
<Node Id="21003:[45133..45300).1" Label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 695299" />
<Node Id="21003:[45382..45405).1" Label="param CreateEmptyCompilation(CSharpTestSource source) 695300" />
<Node Id="21003:[45420..45468).1" Label="param CreateEmptyCompilation(IEnumerable$MetadataReference$ references = null) 695301" />
<Node Id="21003:[45483..45522).1" Label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 695302" />
<Node Id="21003:[45537..45575).1" Label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 695303" />
<Node Id="21003:[45590..45614).1" Label="param CreateEmptyCompilation(string assemblyName = '') 695304" />
<Node Id="21003:[45629..45655).1" Label="param CreateEmptyCompilation(string sourceFileName = '') 695305" />
<Node Id="21003:[45670..45701).1" Label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 695306" />
<Node Id="21003:[45728..45734).1" Label="source 695307" />
<Node Id="21003:[45736..45746).1" Label="references 695308" />
<Node Id="21003:[45748..45755).1" Label="options 695309" />
<Node Id="21003:[45757..45769).1" Label="parseOptions 695310" />
<Node Id="21003:[45771..45783).1" Label="assemblyName 695311" />
<Node Id="21003:[45785..45799).1" Label="sourceFileName 695312" />
<Node Id="21003:[45801..45819).1" Label="skipUsesIsNullable 695313" />
<Node Id="21003:[45842..45846).1" Label="null 695314" />
<Node Id="21003:[45821..45846).1" Label="experimentalFeature: null 695315" />
<Node Id="21003:[45706..45847).1" Label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 695316" />
<Node Id="21003:[45929..45952).1" Label="param CreateCompilationCore(CSharpTestSource source) 695317" />
<Node Id="21003:[45967..46008).1" Label="param CreateCompilationCore(IEnumerable$MetadataReference$ references) 695318" />
<Node Id="21003:[46023..46055).1" Label="param CreateCompilationCore(CSharpCompilationOptions options) 695319" />
<Node Id="21003:[46070..46101).1" Label="param CreateCompilationCore(CSharpParseOptions parseOptions) 695320" />
<Node Id="21003:[46116..46135).1" Label="param CreateCompilationCore(string assemblyName) 695321" />
<Node Id="21003:[46150..46171).1" Label="param CreateCompilationCore(string sourceFileName) 695322" />
<Node Id="21003:[46186..46209).1" Label="param CreateCompilationCore(bool skipUsesIsNullable) 695323" />
<Node Id="21003:[46224..46254).1" Label="param CreateCompilationCore(MessageID? experimentalFeature) 695324" />
<Node Id="21003:[46280..46350).1" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 695325" />
<Node Id="21003:[46280..46350).2" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 695326" />
<Node Id="21003:[46298..46349).1" Label="source.GetSyntaxTrees(parseOptions, sourceFileName) 695327" />
<Node Id="21004:[949..980).1" Label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 695328" />
<Node Id="21004:[982..1008).1" Label="param GetSyntaxTrees(string sourceFileName = '') 695329" />
<Node Id="21004:[914..2190).1" Label="param GetSyntaxTrees(this) 695330" />
<Node Id="21004:[1034..2179).1" Label="switch (Value)
            {
                case string source:
                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };
                case string[] sources:
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return CSharpTestBase.Parse(parseOptions, sources);
                case SyntaxTree tree:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return new[] { tree };
                case SyntaxTree[] trees:
                    Debug.Assert(parseOptions == null);
                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));
                    return trees;
                case CSharpTestSource[] testSources:
                    return testSources.SelectMany(s =$ s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();
                case null:
                    return Array.Empty$SyntaxTree$();
                default:
                    throw new Exception($'Unexpected value: {Value}');
            } 695331" />
<Node Id="21004:[1122..1208).1" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 695332" />
<Node Id="21004:[1122..1208).3" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 695333" />
<Node Id="21004:[1122..1208).4" Label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 695334" />
<Node Id="21004:[1137..1205).1" Label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 695335" />
<Node Id="21003:[34078..34089).1" Label="param Parse(string text) 695336" />
<Node Id="21003:[34091..34111).1" Label="param Parse(string filename = '') 695337" />
<Node Id="21003:[34113..34146).1" Label="param Parse(CSharpParseOptions options = null) 695338" />
<Node Id="21003:[34148..34172).1" Label="param Parse(Encoding encoding = null) 695339" />
<Node Id="21003:[34198..34304).1" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 695340" />
<Node Id="21003:[34198..34304).2" Label="if ((object)options == null)
            {
                options = TestOptions.Regular;
            } 695341" />
<Node Id="21010:[590..618).1" Label="kind: SourceCodeKind.Regular 695342" />
<Node Id="21010:[620..662).1" Label="documentationMode: DocumentationMode.Parse 695343" />
<Node Id="21010:[567..663).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 695344" />
<Node Id="21010:[567..663).5" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 695345" />
<Node Id="21010:[557..663).1" Label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 695346" />
<Node Id="21010:[742..763).1" Label="SourceCodeKind.Script 695347" />
<Node Id="21010:[725..764).1" Label="Regular.WithKind(SourceCodeKind.Script) 695348" />
<Node Id="21010:[716..764).1" Label="Script = Regular.WithKind(SourceCodeKind.Script) 695349" />
<Node Id="21010:[856..879).1" Label="LanguageVersion.CSharp6 695350" />
<Node Id="21010:[828..880).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 695351" />
<Node Id="21010:[817..880).1" Label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 695352" />
<Node Id="21010:[972..995).1" Label="LanguageVersion.CSharp7 695353" />
<Node Id="21010:[944..996).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 695354" />
<Node Id="21010:[933..996).1" Label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 695355" />
<Node Id="21010:[1090..1115).1" Label="LanguageVersion.CSharp7_1 695356" />
<Node Id="21010:[1062..1116).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 695357" />
<Node Id="21010:[1049..1116).1" Label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 695358" />
<Node Id="21010:[1210..1235).1" Label="LanguageVersion.CSharp7_2 695359" />
<Node Id="21010:[1182..1236).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 695360" />
<Node Id="21010:[1169..1236).1" Label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 695361" />
<Node Id="21010:[1330..1355).1" Label="LanguageVersion.CSharp7_3 695362" />
<Node Id="21010:[1302..1356).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 695363" />
<Node Id="21010:[1289..1356).1" Label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 695364" />
<Node Id="21010:[1454..1477).1" Label="LanguageVersion.Default 695365" />
<Node Id="21010:[1426..1478).1" Label="Regular.WithLanguageVersion(LanguageVersion.Default) 695366" />
<Node Id="21010:[1409..1478).1" Label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 695367" />
<Node Id="21010:[1576..1599).1" Label="LanguageVersion.Preview 695368" />
<Node Id="21010:[1548..1600).1" Label="Regular.WithLanguageVersion(LanguageVersion.Preview) 695369" />
<Node Id="21010:[1531..1600).1" Label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 695370" />
<Node Id="21010:[1692..1715).1" Label="LanguageVersion.CSharp8 695371" />
<Node Id="21010:[1664..1716).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 695372" />
<Node Id="21010:[1653..1716).1" Label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 695373" />
<Node Id="21010:[1808..1831).1" Label="LanguageVersion.CSharp9 695374" />
<Node Id="21010:[1780..1832).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 695375" />
<Node Id="21010:[1769..1832).1" Label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 695376" />
<Node Id="21010:[1950..1976).1" Label="DocumentationMode.Diagnose 695377" />
<Node Id="21010:[1920..1977).1" Label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 695378" />
<Node Id="21010:[1885..1977).1" Label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 695379" />
<Node Id="21010:[2060..2067).1" Label="Regular 695380" />
<Node Id="21010:[2080..2109).1" Label="'UseLegacyStrongNameProvider' 695381" />
<Node Id="21010:[2060..2110).1" Label="Regular.WithFeature('UseLegacyStrongNameProvider') 695382" />
<Node Id="21010:[7783..7814).1" Label="param WithFeature(this CSharpParseOptions options) 695383" />
<Node Id="21010:[7816..7830).1" Label="param WithFeature(string feature) 695384" />
<Node Id="21010:[7832..7853).1" Label="param WithFeature(string value = 'true') 695385" />
<Node Id="21010:[7879..7992).1" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 695386" />
<Node Id="21010:[7879..7992).2" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 695387" />
<Node Id="21010:[7879..7992).3" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 695388" />
<Node Id="21010:[7879..7992).4" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 695389" />
<Node Id="21010:[7879..7992).5" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 695390" />
<Node Id="21010:[7931..7989).1" Label="new[] { new KeyValuePair$string, string$(feature, value) } 695391" />
<Node Id="21010:[7879..7992).9" Label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair$string, string$(feature, value) })); 695392" />
<Node Id="21010:[2030..2110).1" Label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 695393" />
<Node Id="21010:[2227..2274).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates 695394" />
<Node Id="21010:[2227..2292).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 695395" />
<Node Id="21010:[2295..2296).1" Label="1 695396" />
<Node Id="21010:[2227..2296).1" Label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 695397" />
<Node Id="21010:[2199..2297).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 695398" />
<Node Id="21010:[2163..2297).1" Label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 695399" />
<Node Id="21010:[2401..2450).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides 695400" />
<Node Id="21010:[2401..2468).1" Label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 695401" />
<Node Id="21010:[2373..2469).1" Label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 695402" />
<Node Id="21010:[2350..2469).1" Label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 695403" />
<Node Id="21010:[2576..2599).1" Label="LanguageVersion.CSharp8 695404" />
<Node Id="21010:[2548..2600).1" Label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 695405" />
<Node Id="21010:[2522..2600).1" Label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 695406" />
<Node Id="21010:[2655..2705).1" Label="RegularWithExtendedPartialMethods = RegularPreview 695407" />
<Node Id="21010:[2799..2838).1" Label="new SmallDictionary$string, string$ { } 695408" />
<Node Id="21010:[2774..2838).1" Label="s_experimentalFeatures = new SmallDictionary$string, string$ { } 695409" />
<Node Id="21010:[2954..2982).1" Label="kind: SourceCodeKind.Regular 695410" />
<Node Id="21010:[2984..3025).1" Label="documentationMode: DocumentationMode.None 695411" />
<Node Id="21010:[3027..3067).1" Label="languageVersion: LanguageVersion.Preview 695412" />
<Node Id="21010:[2931..3068).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 695413" />
<Node Id="21010:[2931..3068).3" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 695414" />
<Node Id="21010:[3082..3104).1" Label="s_experimentalFeatures 695415" />
<Node Id="21010:[2931..3105).1" Label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 695416" />
<Node Id="21010:[2891..3105).1" Label="ExperimentalParseOptions =
            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 695417" />
<Node Id="21010:[3487..3556).1" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 695418" />
<Node Id="21010:[3524..3544).1" Label="'testV7SwitchBinder' 695419" />
<Node Id="21010:[3546..3552).1" Label="'true' 695420" />
<Node Id="21010:[3487..3556).2" Label="new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } } 695421" />
<Node Id="21010:[3465..3557).1" Label="Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 695422" />
<Node Id="21010:[3436..3557).1" Label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary$string, string$() { { 'testV7SwitchBinder', 'true' } }) 695423" />
<Node Id="21010:[3612..3656).1" Label="RegularWithoutRecursivePatterns = Regular7_3 695424" />
<Node Id="21010:[3709..3748).1" Label="RegularWithRecursivePatterns = Regular8 695425" />
<Node Id="21010:[3801..3844).1" Label="RegularWithoutPatternCombinators = Regular8 695426" />
<Node Id="21010:[3897..3943).1" Label="RegularWithPatternCombinators = RegularPreview 695427" />
<Node Id="21010:[4035..4070).1" Label="OutputKind.DynamicallyLinkedLibrary 695428" />
<Node Id="21010:[4072..4097).1" Label="OptimizationLevel.Release 695429" />
<Node Id="21010:[4017..4098).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 695430" />
<Node Id="21010:[10204..10225).1" Label="param CreateTestOptions(OutputKind outputKind) 695431" />
<Node Id="21010:[10227..10262).1" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695432" />
<Node Id="21010:[10264..10288).1" Label="param CreateTestOptions(bool allowUnsafe = false) 695433" />
<Node Id="21010:[10335..10345).1" Label="outputKind 695434" />
<Node Id="21010:[10347..10383).1" Label="optimizationLevel: optimizationLevel 695435" />
<Node Id="21010:[10385..10425).1" Label="warningLevel: Diagnostic.MaxWarningLevel 695436" />
<Node Id="21010:[10427..10451).1" Label="allowUnsafe: allowUnsafe 695437" />
<Node Id="21010:[10306..10452).1" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695438" />
<Node Id="21010:[10306..10452).47" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695439" />
<Node Id="21010:[4004..4098).1" Label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 695440" />
<Node Id="21010:[4188..4217).1" Label="OutputKind.ConsoleApplication 695441" />
<Node Id="21010:[4219..4244).1" Label="OptimizationLevel.Release 695442" />
<Node Id="21010:[4170..4245).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 695443" />
<Node Id="21010:[10204..10225).2" Label="param CreateTestOptions(OutputKind outputKind) 695444" />
<Node Id="21010:[10227..10262).2" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695445" />
<Node Id="21010:[10264..10288).2" Label="param CreateTestOptions(bool allowUnsafe = false) 695446" />
<Node Id="21010:[10335..10345).2" Label="outputKind 695447" />
<Node Id="21010:[10347..10383).2" Label="optimizationLevel: optimizationLevel 695448" />
<Node Id="21010:[10385..10425).2" Label="warningLevel: Diagnostic.MaxWarningLevel 695449" />
<Node Id="21010:[10427..10451).2" Label="allowUnsafe: allowUnsafe 695450" />
<Node Id="21010:[10306..10452).49" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695451" />
<Node Id="21010:[10306..10452).95" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695452" />
<Node Id="21010:[4157..4245).1" Label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 695453" />
<Node Id="21010:[4353..4357).1" Label="true 695454" />
<Node Id="21010:[4324..4358).1" Label="ReleaseDll.WithDebugPlusMode(true) 695455" />
<Node Id="21010:[4306..4358).1" Label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 695456" />
<Node Id="21010:[4466..4470).1" Label="true 695457" />
<Node Id="21010:[4437..4471).1" Label="ReleaseExe.WithDebugPlusMode(true) 695458" />
<Node Id="21010:[4419..4471).1" Label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 695459" />
<Node Id="21010:[4561..4596).1" Label="OutputKind.DynamicallyLinkedLibrary 695460" />
<Node Id="21010:[4598..4621).1" Label="OptimizationLevel.Debug 695461" />
<Node Id="21010:[4543..4622).1" Label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 695462" />
<Node Id="21010:[10204..10225).3" Label="param CreateTestOptions(OutputKind outputKind) 695463" />
<Node Id="21010:[10227..10262).3" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695464" />
<Node Id="21010:[10264..10288).3" Label="param CreateTestOptions(bool allowUnsafe = false) 695465" />
<Node Id="21010:[10335..10345).3" Label="outputKind 695466" />
<Node Id="21010:[10347..10383).3" Label="optimizationLevel: optimizationLevel 695467" />
<Node Id="21010:[10385..10425).3" Label="warningLevel: Diagnostic.MaxWarningLevel 695468" />
<Node Id="21010:[10427..10451).3" Label="allowUnsafe: allowUnsafe 695469" />
<Node Id="21010:[10306..10452).97" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695470" />
<Node Id="21010:[10306..10452).143" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695471" />
<Node Id="21010:[4532..4622).1" Label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 695472" />
<Node Id="21010:[4710..4739).1" Label="OutputKind.ConsoleApplication 695473" />
<Node Id="21010:[4741..4764).1" Label="OptimizationLevel.Debug 695474" />
<Node Id="21010:[4692..4765).1" Label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 695475" />
<Node Id="21010:[10204..10225).4" Label="param CreateTestOptions(OutputKind outputKind) 695476" />
<Node Id="21010:[10227..10262).4" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695477" />
<Node Id="21010:[10264..10288).4" Label="param CreateTestOptions(bool allowUnsafe = false) 695478" />
<Node Id="21010:[10335..10345).4" Label="outputKind 695479" />
<Node Id="21010:[10347..10383).4" Label="optimizationLevel: optimizationLevel 695480" />
<Node Id="21010:[10385..10425).4" Label="warningLevel: Diagnostic.MaxWarningLevel 695481" />
<Node Id="21010:[10427..10451).4" Label="allowUnsafe: allowUnsafe 695482" />
<Node Id="21010:[10306..10452).145" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695483" />
<Node Id="21010:[10306..10452).191" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695484" />
<Node Id="21010:[4681..4765).1" Label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 695485" />
<Node Id="21010:[4859..4892).1" Label="OutputKind.WindowsRuntimeMetadata 695486" />
<Node Id="21010:[4894..4919).1" Label="OptimizationLevel.Release 695487" />
<Node Id="21010:[4841..4920).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 695488" />
<Node Id="21010:[10204..10225).5" Label="param CreateTestOptions(OutputKind outputKind) 695489" />
<Node Id="21010:[10227..10262).5" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695490" />
<Node Id="21010:[10264..10288).5" Label="param CreateTestOptions(bool allowUnsafe = false) 695491" />
<Node Id="21010:[10335..10345).5" Label="outputKind 695492" />
<Node Id="21010:[10347..10383).5" Label="optimizationLevel: optimizationLevel 695493" />
<Node Id="21010:[10385..10425).5" Label="warningLevel: Diagnostic.MaxWarningLevel 695494" />
<Node Id="21010:[10427..10451).5" Label="allowUnsafe: allowUnsafe 695495" />
<Node Id="21010:[10306..10452).193" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695496" />
<Node Id="21010:[10306..10452).239" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695497" />
<Node Id="21010:[4826..4920).1" Label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 695498" />
<Node Id="21010:[5010..5043).1" Label="OutputKind.WindowsRuntimeMetadata 695499" />
<Node Id="21010:[5045..5068).1" Label="OptimizationLevel.Debug 695500" />
<Node Id="21010:[4992..5069).1" Label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 695501" />
<Node Id="21010:[10204..10225).6" Label="param CreateTestOptions(OutputKind outputKind) 695502" />
<Node Id="21010:[10227..10262).6" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695503" />
<Node Id="21010:[10264..10288).6" Label="param CreateTestOptions(bool allowUnsafe = false) 695504" />
<Node Id="21010:[10335..10345).6" Label="outputKind 695505" />
<Node Id="21010:[10347..10383).6" Label="optimizationLevel: optimizationLevel 695506" />
<Node Id="21010:[10385..10425).6" Label="warningLevel: Diagnostic.MaxWarningLevel 695507" />
<Node Id="21010:[10427..10451).6" Label="allowUnsafe: allowUnsafe 695508" />
<Node Id="21010:[10306..10452).241" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695509" />
<Node Id="21010:[10306..10452).287" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695510" />
<Node Id="21010:[4979..5069).1" Label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 695511" />
<Node Id="21010:[5164..5184).1" Label="OutputKind.NetModule 695512" />
<Node Id="21010:[5186..5211).1" Label="OptimizationLevel.Release 695513" />
<Node Id="21010:[5146..5212).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 695514" />
<Node Id="21010:[10204..10225).7" Label="param CreateTestOptions(OutputKind outputKind) 695515" />
<Node Id="21010:[10227..10262).7" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695516" />
<Node Id="21010:[10264..10288).7" Label="param CreateTestOptions(bool allowUnsafe = false) 695517" />
<Node Id="21010:[10335..10345).7" Label="outputKind 695518" />
<Node Id="21010:[10347..10383).7" Label="optimizationLevel: optimizationLevel 695519" />
<Node Id="21010:[10385..10425).7" Label="warningLevel: Diagnostic.MaxWarningLevel 695520" />
<Node Id="21010:[10427..10451).7" Label="allowUnsafe: allowUnsafe 695521" />
<Node Id="21010:[10306..10452).289" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695522" />
<Node Id="21010:[10306..10452).335" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695523" />
<Node Id="21010:[5130..5212).1" Label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 695524" />
<Node Id="21010:[5303..5323).1" Label="OutputKind.NetModule 695525" />
<Node Id="21010:[5325..5348).1" Label="OptimizationLevel.Debug 695526" />
<Node Id="21010:[5285..5349).1" Label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 695527" />
<Node Id="21010:[10204..10225).8" Label="param CreateTestOptions(OutputKind outputKind) 695528" />
<Node Id="21010:[10227..10262).8" Label="param CreateTestOptions(OptimizationLevel optimizationLevel) 695529" />
<Node Id="21010:[10264..10288).8" Label="param CreateTestOptions(bool allowUnsafe = false) 695530" />
<Node Id="21010:[10335..10345).8" Label="outputKind 695531" />
<Node Id="21010:[10347..10383).8" Label="optimizationLevel: optimizationLevel 695532" />
<Node Id="21010:[10385..10425).8" Label="warningLevel: Diagnostic.MaxWarningLevel 695533" />
<Node Id="21010:[10427..10451).8" Label="allowUnsafe: allowUnsafe 695534" />
<Node Id="21010:[10306..10452).337" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695535" />
<Node Id="21010:[10306..10452).383" Label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 695536" />
<Node Id="21010:[5271..5349).1" Label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 695537" />
<Node Id="21010:[5456..5460).1" Label="true 695538" />
<Node Id="21010:[5429..5461).1" Label="ReleaseDll.WithAllowUnsafe(true) 695539" />
<Node Id="21010:[5410..5461).1" Label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 695540" />
<Node Id="21010:[5566..5570).1" Label="true 695541" />
<Node Id="21010:[5539..5571).1" Label="ReleaseExe.WithAllowUnsafe(true) 695542" />
<Node Id="21010:[5520..5571).1" Label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 695543" />
<Node Id="21010:[5674..5678).1" Label="true 695544" />
<Node Id="21010:[5649..5679).1" Label="DebugDll.WithAllowUnsafe(true) 695545" />
<Node Id="21010:[5632..5679).1" Label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 695546" />
<Node Id="21010:[5780..5784).1" Label="true 695547" />
<Node Id="21010:[5755..5785).1" Label="DebugExe.WithAllowUnsafe(true) 695548" />
<Node Id="21010:[5738..5785).1" Label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 695549" />
<Node Id="21010:[5900..5951).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 695550" />
<Node Id="21010:[5866..5952).1" Label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695551" />
<Node Id="21010:[5846..5952).1" Label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695552" />
<Node Id="21010:[6065..6116).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 695553" />
<Node Id="21010:[6031..6117).1" Label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695554" />
<Node Id="21010:[6011..6117).1" Label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695555" />
<Node Id="21010:[6236..6287).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 695556" />
<Node Id="21010:[6199..6288).1" Label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695557" />
<Node Id="21010:[6176..6288).1" Label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695558" />
<Node Id="21010:[6397..6448).1" Label="SigningTestHelpers.DefaultDesktopStrongNameProvider 695559" />
<Node Id="21010:[6365..6449).1" Label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695560" />
<Node Id="21010:[6347..6449).1" Label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 695561" />
<Node Id="21010:[6560..6586).1" Label="DebugInformationFormat.Pdb 695562" />
<Node Id="21010:[6513..6587).1" Label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 695563" />
<Node Id="21010:[6497..6587).1" Label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 695564" />
<Node Id="21003:[34259..34289).1" Label="options = TestOptions.Regular; 695565" />
<Node Id="21003:[34320..34386).1" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 695566" />
<Node Id="21003:[34320..34386).2" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 695567" />
<Node Id="21003:[34320..34386).3" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 695568" />
<Node Id="21003:[34320..34386).5" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 695569" />
<Node Id="21003:[34320..34386).7" Label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 695570" />
<Node Id="21003:[34400..34487).1" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 695571" />
<Node Id="21003:[34400..34487).2" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 695572" />
<Node Id="21003:[34400..34487).3" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 695573" />
<Node Id="21003:[34400..34487).4" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 695574" />
<Node Id="21003:[34400..34487).6" Label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 695575" />
<Node Id="21003:[34407..34486).1" Label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 695576" />
<Node Id="21003:[34554..34569).1" Label="param CheckSerializable(SyntaxTree tree) 695577" />
<Node Id="21003:[34595..34627).1" Label="var stream = new MemoryStream(); 695578" />
<Node Id="21003:[34641..34667).1" Label="var root = tree.GetRoot(); 695579" />
<Node Id="21003:[34641..34667).3" Label="var root = tree.GetRoot(); 695580" />
<Node Id="21003:[34681..34706).1" Label="root.SerializeTo(stream); 695581" />
<Node Id="21003:[34681..34706).2" Label="root.SerializeTo(stream); 695582" />
<Node Id="21003:[34681..34706).4" Label="root.SerializeTo(stream); 695583" />
<Node Id="21003:[34720..34740).1" Label="stream.Position = 0; 695584" />
<Node Id="21003:[34720..34735).1" Label="stream.Position 695585" />
<Node Id="21003:[34754..34818).1" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 695586" />
<Node Id="21003:[34754..34818).2" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 695587" />
<Node Id="21003:[34754..34818).4" Label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 695588" />
<Node Id="21003:[34832..34844).1" Label="return tree; 695589" />
<Node Id="21004:[1129..1207).1" Label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 695590" />
<Node Id="21003:[46280..46350).3" Label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 695591" />
<Node Id="21003:[46366..46650).1" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 695592" />
<Node Id="21003:[46366..46650).2" Label="if (options == null)
            {
                bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any());

                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;
            } 695593" />
<Node Id="21003:[46419..46533).1" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 695594" />
<Node Id="21003:[46419..46533).2" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 695595" />
<Node Id="21003:[46419..46533).4" Label="bool hasTopLevelStatements = syntaxTrees.Any(s =$ s.GetRoot().ChildNodes().OfType$GlobalStatementSyntax$().Any()); 695596" />
<Node Id="21003:[46563..46584).1" Label="hasTopLevelStatements 695597" />
<Node Id="21003:[46553..46635).1" Label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 695598" />
<Node Id="21003:[46755..46872).1" Label="if (Debugger.IsAttached)
            {
                options = options.WithConcurrentBuild(false);
            } 695599" />
<Node Id="21003:[46888..47066).1" Label="if (experimentalFeature.HasValue)
            {
                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);
            } 695600" />
<Node Id="21003:[47082..47319).1" Label="Func$CSharpCompilation$ createCompilationLambda = () =$ CSharpCompilation.Create(
                assemblyName == '' ? GetUniqueName() : assemblyName,
                syntaxTrees,
                references,
                options); 695601" />
<Node Id="21003:[47333..47400).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 695602" />
<Node Id="21003:[47333..47399).1" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 695603" />
<Node Id="25006:[11552..11587).1" Label="param ValidateIOperations(Func$Compilation$ createCompilation) 695604" />
<Node Id="25006:[11613..11696).1" Label="if (!EnableVerifyIOperation)
            {
                return;
            } 695605" />
<Node Id="25006:[11674..11681).1" Label="return; 695606" />
<Node Id="21003:[47333..47400).2" Label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 695607" />
<Node Id="21003:[47414..47458).1" Label="var compilation = createCompilationLambda(); 695608" />
<Node Id="21003:[47414..47458).2" Label="var compilation = createCompilationLambda(); 695609" />
<Node Id="25004:[1041..1077).1" Label="return Guid.NewGuid().ToString('D'); 695610" />
<Node Id="21003:[47414..47458).4" Label="var compilation = createCompilationLambda(); 695611" />
<Node Id="21003:[47689..47930).1" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 695612" />
<Node Id="21003:[47717..47747).1" Label="IsNullableEnabled(compilation) 695613" />
<Node Id="21003:[48025..48054).1" Label="param IsNullableEnabled(CSharpCompilation compilation) 695614" />
<Node Id="21003:[48175..48211).1" Label="var trees = compilation.SyntaxTrees; 695615" />
<Node Id="21003:[48225..48313).1" Label="if (trees.IsDefaultOrEmpty)
            {
                return false;
            } 695616" />
<Node Id="21003:[48327..48378).1" Label="var options = (CSharpParseOptions)trees[0].Options; 695617" />
<Node Id="21003:[48327..48378).2" Label="var options = (CSharpParseOptions)trees[0].Options; 695618" />
<Node Id="21003:[48392..48469).1" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 695619" />
<Node Id="21003:[48392..48469).2" Label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 695620" />
<Node Id="21003:[47689..47930).3" Label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))
            {
                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray$string$.Empty);
            } 695621" />
<Node Id="21003:[47944..47963).1" Label="return compilation; 695622" />
<Node Id="28001:[73991..74036).1" Label="CreateCompilation(source).VerifyDiagnostics() 695623" />
<Node Id="25002:[4263..4282).1" Label="param VerifyDiagnostics(this TCompilation c) 695624" />
<Node Id="25002:[4284..4323).1" Label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 695625" />
<Node Id="25002:[4395..4432).1" Label="var diagnostics = c.GetDiagnostics(); 695626" />
<Node Id="10345:[956..960).1" Label="null 695627" />
<Node Id="10345:[975..1032).1" Label="ImmutableDictionary$string, AliasAndUsingDirective$.Empty 695628" />
<Node Id="10345:[1047..1101).1" Label="ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty 695629" />
<Node Id="10345:[1116..1166).1" Label="ImmutableArray$AliasAndExternAliasDirective$.Empty 695630" />
<Node Id="10345:[1181..1185).1" Label="null 695631" />
<Node Id="10345:[930..1186).1" Label="new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 695632" />
<Node Id="10345:[1753..1782).1" Label="param Imports(CSharpCompilation compilation) 695633" />
<Node Id="10345:[1797..1861).1" Label="param Imports(ImmutableDictionary$string, AliasAndUsingDirective$ usingAliases) 695634" />
<Node Id="10345:[1876..1931).1" Label="param Imports(ImmutableArray$NamespaceOrTypeAndUsingDirective$ usings) 695635" />
<Node Id="10345:[1946..1998).1" Label="param Imports(ImmutableArray$AliasAndExternAliasDirective$ externs) 695636" />
<Node Id="10345:[2013..2038).1" Label="param Imports(DiagnosticBag diagnostics) 695637" />
<Node Id="10345:[1723..2412).1" Label="param Imports(this) 695638" />
<Node Id="10345:[1234..1246).1" Label="_compilation 695639" />
<Node Id="10345:[1288..1300).1" Label="_diagnostics 695640" />
<Node Id="10345:[1531..1543).1" Label="UsingAliases 695641" />
<Node Id="10345:[2064..2099).1" Label="Debug.Assert(usingAliases != null); 695642" />
<Node Id="10345:[2064..2099).2" Label="Debug.Assert(usingAliases != null); 695643" />
<Node Id="10345:[2113..2145).1" Label="Debug.Assert(!usings.IsDefault); 695644" />
<Node Id="10345:[2159..2192).1" Label="Debug.Assert(!externs.IsDefault); 695645" />
<Node Id="10345:[2208..2220).1" Label="_compilation 695646" />
<Node Id="10345:[2249..2266).1" Label="this.UsingAliases 695647" />
<Node Id="10345:[2296..2307).1" Label="this.Usings 695648" />
<Node Id="10345:[2331..2343).1" Label="_diagnostics 695649" />
<Node Id="10345:[2372..2390).1" Label="this.ExternAliases 695650" />
<Node Id="10345:[922..1186).1" Label="Empty = new Imports(
            null,
            ImmutableDictionary$string, AliasAndUsingDirective$.Empty,
            ImmutableArray$NamespaceOrTypeAndUsingDirective$.Empty,
            ImmutableArray$AliasAndExternAliasDirective$.Empty,
            null) 695651" />
<Node Id="25002:[4395..4432).3" Label="var diagnostics = c.GetDiagnostics(); 695652" />
<Node Id="10345:[13089..13118).1" Label="param FromGlobalUsings(CSharpCompilation compilation) 695653" />
<Node Id="10345:[13144..13184).1" Label="var usings = compilation.Options.Usings; 695654" />
<Node Id="10345:[13200..13326).1" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 695655" />
<Node Id="10345:[13200..13326).2" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 695656" />
<Node Id="10345:[13200..13326).4" Label="if (usings.Length == 0 && compilation.PreviousSubmission == null)
            {
                return Empty;
            } 695657" />
<Node Id="10345:[13298..13311).1" Label="return Empty; 695658" />
<Node Id="25002:[4395..4432).6" Label="var diagnostics = c.GetDiagnostics(); 695659" />
<Node Id="10345:[24530..24565).1" Label="param Complete(CancellationToken cancellationToken) 695660" />
<Node Id="10345:[24507..26254).1" Label="param Complete(this) 695661" />
<Node Id="10345:[24591..26243).1" Label="while (true)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var incompletePart = _state.NextIncompletePart;
                switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                }

                _state.SpinWaitComplete(incompletePart, cancellationToken);
            } 695662" />
<Node Id="10345:[24636..24685).1" Label="cancellationToken.ThrowIfCancellationRequested(); 695663" />
<Node Id="10345:[24703..24750).1" Label="var incompletePart = _state.NextIncompletePart; 695664" />
<Node Id="10345:[24768..26149).1" Label="switch (incompletePart)
                {
                    case CompletionPart.StartValidatingImports:
                        {
                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            }
                        }
                        break;

                    case CompletionPart.FinishValidatingImports:
                        // some other thread has started validating imports (otherwise we would be in the case above) so
                        // we just wait for it to both finish and report the diagnostics.
                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));
                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);
                        break;

                    case CompletionPart.None:
                        return;

                    default:
                        // any other values are completion parts intended for other kinds of symbols
                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);
                        break;
                } 695665" />
<Node Id="10345:[26025..26098).1" Label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 695666" />
<Node Id="10345:[26169..26228).1" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 695667" />
<Node Id="10345:[26169..26228).2" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 695668" />
<Node Id="10345:[26169..26228).3" Label="_state.SpinWaitComplete(incompletePart, cancellationToken); 695669" />
<Node Id="10345:[24932..25204).1" Label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))
                            {
                                Validate();
                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);
                            } 695670" />
<Node Id="10345:[25064..25074).1" Label="Validate() 695671" />
<Node Id="10345:[26266..28173).1" Label="param Validate(this) 695672" />
<Node Id="10345:[26314..26387).1" Label="if (this == Empty)
            {
                return;
            } 695673" />
<Node Id="10345:[26365..26372).1" Label="return; 695674" />
<Node Id="10345:[25064..25075).1" Label="Validate(); 695675" />
<Node Id="10345:[25109..25173).1" Label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 695676" />
<Node Id="10345:[25858..25865).1" Label="return; 695677" />
<Node Id="10298:[471..492).1" Label="param Includes(this BinderFlags self) 695678" />
<Node Id="10298:[494..511).1" Label="param Includes(BinderFlags other) 695679" />
<Node Id="10298:[537..568).1" Label="return (self & other) == other; 695680" />
<Node Id="25002:[4395..4432).10" Label="var diagnostics = c.GetDiagnostics(); 695681" />
<Node Id="10292:[1720..1721).1" Label="0 695682" />
<Node Id="10292:[1704..1721).1" Label="ExternalScope = 0 695683" />
<Node Id="10292:[1768..1769).1" Label="1 695684" />
<Node Id="10292:[1752..1769).1" Label="TopLevelScope = 1 695685" />
<Node Id="10292:[1992..1993).1" Label="2 695686" />
<Node Id="10292:[1963..1993).1" Label="ValueKindInsignificantBits = 2 695687" />
<Node Id="10292:[2032..2129).1" Label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 $$ ValueKindInsignificantBits) - 1)) 695688" />
<Node Id="10306:[388969..389344).1" Label="property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 695689" />
<Node Id="10306:[388923..389344).1" Label="s_isIndexedPropertyWithNonOptionalArguments = property =$
            {
                if (property.IsIndexer || !property.IsIndexedProperty)
                {
                    return false;
                }

                Debug.Assert(property.ParameterCount $ 0);
                var parameter = property.Parameters[0];
                return !parameter.IsOptional && !parameter.IsParams;
            } 695690" />
<Node Id="10306:[389480..389543).1" Label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 695691" />
<Node Id="10306:[389562..389646).1" Label="memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType 695692" />
<Node Id="10306:[389708..389839).1" Label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 695693" />
<Node Id="10306:[389665..389839).1" Label="miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 695694" />
<Node Id="10306:[389438..389840).1" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 695695" />
<Node Id="10306:[389438..389840).17" Label="new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 695696" />
<Node Id="10306:[389401..389840).1" Label="s_propertyGroupFormat =
            new SymbolDisplayFormat(
                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,
                memberOptions:
                    SymbolDisplayMemberOptions.IncludeContainingType,
                miscellaneousOptions:
                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |
                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 695697" />
<Node Id="10310:[84494..84496).1" Label="10 695698" />
<Node Id="10310:[84458..84496).1" Label="MaxParameterListsForErrorRecovery = 10 695699" />
<Node Id="10316:[802..830).1" Label="'$$h__TransparentIdentifier' 695700" />
<Node Id="10316:[772..830).1" Label="transparentIdentifierPrefix = '$$h__TransparentIdentifier' 695701" />
<Node Id="10319:[69643..69663).1" Label="s =$ (MethodSymbol)s 695702" />
<Node Id="10319:[69620..69663).1" Label="s_toMethodSymbolFunc = s =$ (MethodSymbol)s 695703" />
<Node Id="10319:[69752..69774).1" Label="s =$ (PropertySymbol)s 695704" />
<Node Id="10319:[69727..69774).1" Label="s_toPropertySymbolFunc = s =$ (PropertySymbol)s 695705" />
<Node Id="10286:[30925..30954).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 695706" />
<Node Id="10286:[30969..31000).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 695707" />
<Node Id="10286:[31015..31040).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 695708" />
<Node Id="10286:[31055..31080).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 695709" />
<Node Id="10286:[31095..31126).1" Label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 695710" />
<Node Id="10286:[31152..31210).1" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 695711" />
<Node Id="10286:[31152..31210).2" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 695712" />
<Node Id="10286:[31152..31210).4" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 695713" />
<Node Id="10286:[31152..31210).5" Label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 695714" />
<Node Id="10286:[31515..31598).1" Label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 695715" />
<Node Id="10286:[31614..31710).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695716" />
<Node Id="10286:[31614..31710).2" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695717" />
<Node Id="10286:[31614..31710).3" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695718" />
<Node Id="10286:[31614..31710).4" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695719" />
<Node Id="10286:[31614..31710).5" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695720" />
<Node Id="10286:[31614..31710).6" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 695721" />
<Node Id="10286:[31614..31709).1" Label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 695722" />
<Node Id="10319:[80080..80109).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 695723" />
<Node Id="10319:[80111..80133).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 695724" />
<Node Id="10319:[80135..80160).1" Label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 695725" />
<Node Id="10319:[80162..80186).1" Label="param GetWellKnownTypeMember(Location location = null) 695726" />
<Node Id="10319:[80188..80212).1" Label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 695727" />
<Node Id="10319:[80214..80237).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 695728" />
<Node Id="10319:[80263..80315).1" Label="Debug.Assert((syntax != null) ^ (location != null)); 695729" />
<Node Id="10319:[80263..80315).2" Label="Debug.Assert((syntax != null) ^ (location != null)); 695730" />
<Node Id="10319:[80263..80315).4" Label="Debug.Assert((syntax != null) ^ (location != null)); 695731" />
<Node Id="10319:[80263..80315).5" Label="Debug.Assert((syntax != null) ^ (location != null)); 695732" />
<Node Id="10319:[80331..80364).1" Label="DiagnosticInfo useSiteDiagnostic; 695733" />
<Node Id="10319:[80378..80479).1" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 695734" />
<Node Id="10319:[80378..80479).2" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 695735" />
<Node Id="10319:[80378..80479).3" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 695736" />
<Node Id="10319:[80378..80479).4" Label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 695737" />
<Node Id="10319:[80400..80478).1" Label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 695738" />
<Node Id="10319:[80843..80872).1" Label="param GetWellKnownTypeMember(CSharpCompilation compilation) 695739" />
<Node Id="10319:[80874..80896).1" Label="param GetWellKnownTypeMember(WellKnownMember member) 695740" />
<Node Id="10319:[80898..80931).1" Label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 695741" />
<Node Id="10319:[80933..80956).1" Label="param GetWellKnownTypeMember(bool isOptional = false) 695742" />
<Node Id="10319:[80982..81047).1" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 695743" />
<Node Id="10319:[80982..81047).2" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 695744" />
<Node Id="10319:[80982..81047).3" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 695745" />
<Node Id="10060:[2841..2854).1" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695746" />
<Node Id="10060:[2856..2875).1" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695747" />
<Node Id="10060:[2901..2932).1" Label="Debug.Assert(symbol is object); 695748" />
<Node Id="10060:[2948..3467).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 695749" />
<Node Id="10060:[3483..3502).1" Label="isInternal = false; 695750" />
<Node Id="10060:[3553..4223).1" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 695751" />
<Node Id="10060:[4243..4274).1" Label="symbol = symbol.ContainingType; 695752" />
<Node Id="10060:[3518..4328).1" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 695753" />
<Node Id="10060:[4344..4356).1" Label="return true; 695754" />
<Node Id="10319:[80982..81047).8" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 695755" />
<Node Id="10060:[2841..2854).2" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695756" />
<Node Id="10060:[2856..2875).2" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695757" />
<Node Id="10060:[2901..2932).3" Label="Debug.Assert(symbol is object); 695758" />
<Node Id="10060:[2948..3467).2" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 695759" />
<Node Id="10060:[3553..4223).2" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 695760" />
<Node Id="10060:[4243..4274).2" Label="symbol = symbol.ContainingType; 695761" />
<Node Id="10060:[3518..4328).2" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 695762" />
<Node Id="10060:[3553..4223).3" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 695763" />
<Node Id="10319:[80982..81047).15" Label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 695764" />
<Node Id="10319:[81063..82500).1" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 695765" />
<Node Id="10319:[81063..82500).2" Label="if ((object)memberSymbol != null)
            {
                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();
                if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                }
            }
            else if (!isOptional)
            {
                // member is missing
                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);
                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);
            }
            else
            {
                diagnosticInfo = null;
            } 695766" />
<Node Id="10319:[81129..81207).1" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 695767" />
<Node Id="10319:[81129..81207).2" Label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 695768" />
<Node Id="10060:[2841..2854).4" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695769" />
<Node Id="10060:[2856..2875).4" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695770" />
<Node Id="10060:[2901..2932).7" Label="Debug.Assert(symbol is object); 695771" />
<Node Id="10060:[2948..3467).4" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 695772" />
<Node Id="10060:[3483..3502).7" Label="isInternal = false; 695773" />
<Node Id="10060:[3553..4223).6" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 695774" />
<Node Id="10060:[4243..4274).6" Label="symbol = symbol.ContainingType; 695775" />
<Node Id="10060:[3518..4328).6" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 695776" />
<Node Id="10060:[2841..2854).5" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695777" />
<Node Id="10060:[2856..2875).5" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695778" />
<Node Id="10060:[2901..2932).9" Label="Debug.Assert(symbol is object); 695779" />
<Node Id="10060:[2948..3467).5" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 695780" />
<Node Id="10060:[3553..4223).7" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 695781" />
<Node Id="10060:[4243..4274).7" Label="symbol = symbol.ContainingType; 695782" />
<Node Id="10060:[3518..4328).7" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 695783" />
<Node Id="10319:[81225..82039).1" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 695784" />
<Node Id="10319:[81225..82039).2" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 695785" />
<Node Id="10319:[82516..82536).1" Label="return memberSymbol; 695786" />
<Node Id="10319:[80495..80738).1" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 695787" />
<Node Id="10319:[80495..80738).2" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 695788" />
<Node Id="10319:[80754..80774).1" Label="return memberSymbol; 695789" />
<Node Id="10060:[2841..2854).9" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695790" />
<Node Id="10060:[2856..2875).9" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695791" />
<Node Id="10060:[2901..2932).17" Label="Debug.Assert(symbol is object); 695792" />
<Node Id="10060:[2948..3467).9" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 695793" />
<Node Id="10060:[3553..4223).11" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 695794" />
<Node Id="10060:[4243..4274).11" Label="symbol = symbol.ContainingType; 695795" />
<Node Id="10060:[3518..4328).11" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 695796" />
<Node Id="10060:[2841..2854).10" Label="param IsEffectivelyPublicOrInternal(Symbol symbol) 695797" />
<Node Id="10060:[2856..2875).10" Label="param IsEffectivelyPublicOrInternal(out bool isInternal) 695798" />
<Node Id="10060:[2901..2932).19" Label="Debug.Assert(symbol is object); 695799" />
<Node Id="10060:[2948..3467).10" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Event:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Property:
                    break;
                case SymbolKind.TypeParameter:
                    symbol = symbol.ContainingSymbol;
                    break;
                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 695800" />
<Node Id="10060:[3553..4223).12" Label="switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                } 695801" />
<Node Id="10060:[4243..4274).12" Label="symbol = symbol.ContainingType; 695802" />
<Node Id="10060:[3518..4328).12" Label="do
            {
                switch (symbol.DeclaredAccessibility)
                {
                    case Accessibility.Public:
                    case Accessibility.Protected:
                    case Accessibility.ProtectedOrInternal:
                        break;
                    case Accessibility.Internal:
                    case Accessibility.ProtectedAndInternal:
                        isInternal = true;
                        break;
                    case Accessibility.Private:
                        return false;
                    default:
                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);
                }

                symbol = symbol.ContainingType;
            }
            while (symbol is object); 695803" />
<Node Id="10319:[81225..82039).4" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 695804" />
<Node Id="10319:[81225..82039).5" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 695805" />
<Node Id="10319:[82516..82536).2" Label="return memberSymbol; 695806" />
<Node Id="10319:[80495..80738).5" Label="if (useSiteDiagnostic != null)
            {
                // report the diagnostic only for non-optional members:
                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);
            } 695807" />
<Node Id="10319:[80754..80774).2" Label="return memberSymbol; 695808" />
<Node Id="10319:[81225..82039).7" Label="if (diagnosticInfo != null)
                {
                    // Dev11 reports use-site diagnostics even for optional symbols that are found.
                    // We decided to silently ignore bad optional symbols.

                    // Report errors only for non-optional members:
                    if (isOptional)
                    {
                        var severity = diagnosticInfo.Severity;

                        // ignore warnings:
                        diagnosticInfo = null;

                        // if the member is optional and bad for whatever reason ignore it:
                        if (severity == DiagnosticSeverity.Error)
                        {
                            return null;
                        }
                    }
                } 695809" />
<Node Id="10319:[82516..82536).3" Label="return memberSymbol; 695810" />
<Node Id="10319:[80754..80774).3" Label="return memberSymbol; 695811" />
<Node Id="10076:[4437..4452).1" Label="param GetBinder(SyntaxNode node) 695812" />
<Node Id="10076:[4454..4498).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 695813" />
<Node Id="10076:[4500..4523).1" Label="param GetBinder(Symbol memberOpt = null) 695814" />
<Node Id="10076:[4411..5059).1" Label="param GetBinder(this) 695815" />
<Node Id="10076:[4549..4579).1" Label="int position = node.SpanStart; 695816" />
<Node Id="10076:[4821..4829).1" Label="InScript 695817" />
<Node Id="10076:[3592..3700).1" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 695818" />
<Node Id="10076:[3628..3685).1" Label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 695819" />
<Node Id="10076:[4815..4966).1" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 695820" />
<Node Id="10076:[4815..4966).3" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 695821" />
<Node Id="10076:[4815..4966).4" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 695822" />
<Node Id="10076:[4815..4966).5" Label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)
            {
                node = node.Parent;
            } 695823" />
<Node Id="10076:[4932..4951).1" Label="node = node.Parent; 695824" />
<Node Id="10076:[4982..5048).1" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 695825" />
<Node Id="10076:[4982..5048).2" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 695826" />
<Node Id="10076:[4982..5048).3" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 695827" />
<Node Id="10076:[4982..5048).4" Label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 695828" />
<Node Id="10076:[4989..5047).1" Label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 695829" />
<Node Id="10076:[5097..5112).1" Label="param GetBinder(SyntaxNode node) 695830" />
<Node Id="10076:[5114..5126).1" Label="param GetBinder(int position) 695831" />
<Node Id="10076:[5128..5172).1" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 695832" />
<Node Id="10076:[5174..5197).1" Label="param GetBinder(Symbol memberOpt = null) 695833" />
<Node Id="10076:[5071..5759).1" Label="param GetBinder(this) 695834" />
<Node Id="10076:[5223..5250).1" Label="Debug.Assert(node != null); 695835" />
<Node Id="10076:[5223..5250).2" Label="Debug.Assert(node != null); 695836" />
<Node Id="10076:[5277..5448).1" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 695837" />
<Node Id="10076:[5277..5448).2" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 695838" />
<Node Id="10076:[5470..5538).1" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 695839" />
<Node Id="10076:[5470..5538).3" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 695840" />
<Node Id="10077:[909..930).1" Label="param BinderFactoryVisitor(BinderFactory factory) 695841" />
<Node Id="10077:[879..998).1" Label="param BinderFactoryVisitor(this) 695842" />
<Node Id="10077:[879..998).2" Label="param BinderFactoryVisitor(this) 695843" />
<Node Id="10077:[698..707).1" Label="_position 695844" />
<Node Id="10077:[747..768).1" Label="_memberDeclarationOpt 695845" />
<Node Id="10077:[798..808).1" Label="_memberOpt 695846" />
<Node Id="10077:[854..862).1" Label="_factory 695847" />
<Node Id="10077:[964..972).1" Label="_factory 695848" />
<Node Id="10076:[5470..5538).4" Label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 695849" />
<Node Id="10076:[5552..5614).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 695850" />
<Node Id="10076:[5552..5614).2" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 695851" />
<Node Id="10076:[5552..5614).3" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 695852" />
<Node Id="10076:[5552..5613).1" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 695853" />
<Node Id="10077:[1039..1051).1" Label="param Initialize(int position) 695854" />
<Node Id="10077:[1053..1090).1" Label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 695855" />
<Node Id="10077:[1092..1108).1" Label="param Initialize(Symbol memberOpt) 695856" />
<Node Id="10077:[1014..1370).1" Label="param Initialize(this) 695857" />
<Node Id="10077:[1142..1210).1" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 695858" />
<Node Id="10077:[1142..1210).2" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 695859" />
<Node Id="10077:[1142..1210).4" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 695860" />
<Node Id="10077:[1142..1210).5" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 695861" />
<Node Id="10077:[1230..1239).1" Label="_position 695862" />
<Node Id="10077:[1269..1290).1" Label="_memberDeclarationOpt 695863" />
<Node Id="10077:[1332..1342).1" Label="_memberOpt 695864" />
<Node Id="10076:[5552..5614).4" Label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 695865" />
<Node Id="10076:[5628..5664).1" Label="Binder result = visitor.Visit(node); 695866" />
<Node Id="10076:[5644..5663).1" Label="visitor.Visit(node) 695867" />
<Node Id="10077:[2693..2708).1" Label="param Visit(SyntaxNode node) 695868" />
<Node Id="10077:[2664..2780).1" Label="param Visit(this) 695869" />
<Node Id="10077:[2742..2765).1" Label="return VisitCore(node); 695870" />
<Node Id="10077:[2749..2764).1" Label="VisitCore(node) 695871" />
<Node Id="10077:[2877..2892).1" Label="param VisitCore(SyntaxNode node) 695872" />
<Node Id="10077:[2852..2986).1" Label="param VisitCore(this) 695873" />
<Node Id="10077:[2926..2971).1" Label="return ((CSharpSyntaxNode)node).Accept(this); 695874" />
<Node Id="10077:[2926..2971).2" Label="return ((CSharpSyntaxNode)node).Accept(this); 695875" />
<Node Id="10077:[2926..2971).3" Label="return ((CSharpSyntaxNode)node).Accept(this); 695876" />
<Node Id="10077:[2398..2415).1" Label="param DefaultVisit(SyntaxNode parent) 695877" />
<Node Id="10077:[2362..2496).1" Label="param DefaultVisit(this) 695878" />
<Node Id="10077:[2449..2481).1" Label="return VisitCore(parent.Parent); 695879" />
<Node Id="10077:[2456..2480).1" Label="VisitCore(parent.Parent) 695880" />
<Node Id="10077:[2877..2892).2" Label="param VisitCore(SyntaxNode node) 695881" />
<Node Id="10077:[2852..2986).2" Label="param VisitCore(this) 695882" />
<Node Id="10077:[2926..2971).5" Label="return ((CSharpSyntaxNode)node).Accept(this); 695883" />
<Node Id="10077:[34617..34644).1" Label="param VisitClassDeclaration(ClassDeclarationSyntax node) 695884" />
<Node Id="10077:[34572..34731).1" Label="param VisitClassDeclaration(this) 695885" />
<Node Id="10077:[34678..34716).1" Label="return VisitTypeDeclarationCore(node); 695886" />
<Node Id="10077:[34685..34715).1" Label="VisitTypeDeclarationCore(node) 695887" />
<Node Id="10077:[31025..31053).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 695888" />
<Node Id="10077:[30985..32417).1" Label="param VisitTypeDeclarationCore(this) 695889" />
<Node Id="10077:[31087..31238).1" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 695890" />
<Node Id="10077:[31087..31238).2" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 695891" />
<Node Id="10077:[31087..31238).3" Label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 695892" />
<Node Id="10077:[31258..31297).1" Label="NodeUsage extraInfo = NodeUsage.Normal; 695893" />
<Node Id="10077:[31490..32331).1" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 695894" />
<Node Id="10077:[31490..32331).2" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 695895" />
<Node Id="10077:[31490..32331).6" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 695896" />
<Node Id="10077:[31490..32331).7" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 695897" />
<Node Id="10077:[31936..32331).1" Label="if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 695898" />
<Node Id="10077:[31936..32331).2" Label="if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 695899" />
<Node Id="10077:[32037..32089).1" Label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 695900" />
<Node Id="10077:[32351..32402).1" Label="return VisitTypeDeclarationCore(parent, extraInfo); 695901" />
<Node Id="10077:[32351..32402).2" Label="return VisitTypeDeclarationCore(parent, extraInfo); 695902" />
<Node Id="10077:[32358..32401).1" Label="VisitTypeDeclarationCore(parent, extraInfo) 695903" />
<Node Id="10077:[32474..32502).1" Label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 695904" />
<Node Id="10077:[32504..32523).1" Label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 695905" />
<Node Id="10077:[32433..34556).1" Label="param VisitTypeDeclarationCore(this) 695906" />
<Node Id="10077:[32557..32607).1" Label="var key = CreateBinderCacheKey(parent, extraInfo); 695907" />
<Node Id="10077:[32557..32607).2" Label="var key = CreateBinderCacheKey(parent, extraInfo); 695908" />
<Node Id="10077:[32567..32606).1" Label="CreateBinderCacheKey(parent, extraInfo) 695909" />
<Node Id="10077:[44159..44180).1" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 695910" />
<Node Id="10077:[44182..44197).1" Label="param CreateBinderCacheKey(NodeUsage usage) 695911" />
<Node Id="10077:[44231..44317).1" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 695912" />
<Node Id="10077:[44231..44317).3" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 695913" />
<Node Id="10077:[44335..44374).1" Label="return new BinderCacheKey(node, usage); 695914" />
<Node Id="10077:[44335..44374).2" Label="return new BinderCacheKey(node, usage); 695915" />
<Node Id="10077:[44335..44374).3" Label="return new BinderCacheKey(node, usage); 695916" />
<Node Id="10077:[44342..44373).1" Label="new BinderCacheKey(node, usage) 695917" />
<Node Id="10076:[875..902).1" Label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 695918" />
<Node Id="10076:[904..919).1" Label="param BinderCacheKey(NodeUsage usage) 695919" />
<Node Id="10076:[853..1034).1" Label="param BinderCacheKey(this) 695920" />
<Node Id="10076:[953..968).1" Label="this.syntaxNode 695921" />
<Node Id="10076:[1000..1010).1" Label="this.usage 695922" />
<Node Id="10077:[32557..32607).3" Label="var key = CreateBinderCacheKey(parent, extraInfo); 695923" />
<Node Id="10077:[32627..32647).1" Label="Binder resultBinder; 695924" />
<Node Id="10077:[32670..32681).1" Label="binderCache 695925" />
<Node Id="10077:[2066..2158).1" Label="get
                {
                    return _factory._binderCache;
                } 695926" />
<Node Id="10077:[2110..2139).1" Label="return _factory._binderCache; 695927" />
<Node Id="10077:[32665..34501).1" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 695928" />
<Node Id="10077:[32665..34501).2" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 695929" />
<Node Id="10077:[32665..34501).3" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 695930" />
<Node Id="10077:[32665..34501).4" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 695931" />
<Node Id="10077:[32665..34501).5" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 695932" />
<Node Id="10076:[1241..1380).1" Label="param GetHashCode(this) 695933" />
<Node Id="10076:[1307..1365).1" Label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 695934" />
<Node Id="10077:[33226..33266).1" Label="resultBinder = VisitCore(parent.Parent); 695935" />
<Node Id="10077:[33241..33265).1" Label="VisitCore(parent.Parent) 695936" />
<Node Id="10077:[2877..2892).3" Label="param VisitCore(SyntaxNode node) 695937" />
<Node Id="10077:[35299..35332).1" Label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 695938" />
<Node Id="10077:[35250..35934).1" Label="param VisitNamespaceDeclaration(this) 695939" />
<Node Id="10077:[35366..35522).1" Label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 695940" />
<Node Id="10077:[35366..35522).2" Label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 695941" />
<Node Id="10077:[35366..35522).3" Label="if (!LookupPosition.IsInNamespaceDeclaration(_position, parent))
                {
                    return VisitCore(parent.Parent);
                } 695942" />
<Node Id="10077:[35674..35777).1" Label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 695943" />
<Node Id="10077:[35674..35777).2" Label="bool inBody = LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken); 695944" />
<Node Id="10077:[35797..35830).1" Label="bool inUsing = IsInUsing(parent); 695945" />
<Node Id="10077:[35812..35829).1" Label="IsInUsing(parent) 695946" />
<Node Id="10077:[44823..44854).1" Label="param IsInUsing(CSharpSyntaxNode containingNode) 695947" />
<Node Id="10077:[44800..46356).1" Label="param IsInUsing(this) 695948" />
<Node Id="10077:[44888..44934).1" Label="TextSpan containingSpan = containingNode.Span; 695949" />
<Node Id="10077:[44954..44972).1" Label="SyntaxToken token; 695950" />
<Node Id="10077:[44966..44971).1" Label="token 695951" />
<Node Id="10077:[44990..45616).1" Label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)
                {
                    // This occurs at EOF
                    token = containingNode.GetLastToken();
                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());
                }
                else if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 695952" />
<Node Id="10077:[44990..45616).3" Label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)
                {
                    // This occurs at EOF
                    token = containingNode.GetLastToken();
                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());
                }
                else if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 695953" />
<Node Id="10077:[45331..45616).1" Label="if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 695954" />
<Node Id="10077:[45553..45597).1" Label="token = containingNode.FindToken(_position); 695955" />
<Node Id="10077:[45553..45597).2" Label="token = containingNode.FindToken(_position); 695956" />
<Node Id="10077:[45636..45660).1" Label="var node = token.Parent; 695957" />
<Node Id="10077:[45678..46310).1" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 695958" />
<Node Id="10077:[45678..46310).2" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 695959" />
<Node Id="10077:[45678..46310).3" Label="while (node != null && node != containingNode)
                {
                    // ACASEY: the restriction that we're only interested in children
                    // of containingNode (vs descendants) seems to be required for cases like
                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name
                    // within a using directive.
                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    }

                    node = node.Parent;
                } 695960" />
<Node Id="10077:[46088..46248).1" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 695961" />
<Node Id="10077:[46088..46248).2" Label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)
                    {
                        return true;
                    } 695962" />
<Node Id="10077:[46272..46291).1" Label="node = node.Parent; 695963" />
<Node Id="10077:[46328..46341).1" Label="return false; 695964" />
<Node Id="10077:[35797..35830).2" Label="bool inUsing = IsInUsing(parent); 695965" />
<Node Id="10077:[35850..35919).1" Label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 695966" />
<Node Id="10077:[35850..35919).2" Label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 695967" />
<Node Id="10077:[35850..35919).3" Label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 695968" />
<Node Id="10077:[35850..35919).4" Label="return VisitNamespaceDeclaration(parent, _position, inBody, inUsing); 695969" />
<Node Id="10077:[35857..35918).1" Label="VisitNamespaceDeclaration(parent, _position, inBody, inUsing) 695970" />
<Node Id="10077:[35992..36025).1" Label="param VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) 695971" />
<Node Id="10077:[36027..36039).1" Label="param VisitNamespaceDeclaration(int position) 695972" />
<Node Id="10077:[36041..36052).1" Label="param VisitNamespaceDeclaration(bool inBody) 695973" />
<Node Id="10077:[36054..36066).1" Label="param VisitNamespaceDeclaration(bool inUsing) 695974" />
<Node Id="10077:[35950..37866).1" Label="param VisitNamespaceDeclaration(this) 695975" />
<Node Id="10077:[36100..36154).1" Label="Debug.Assert(!inUsing || inBody, 'inUsing =$ inBody'); 695976" />
<Node Id="10077:[36100..36154).3" Label="Debug.Assert(!inUsing || inBody, 'inUsing =$ inBody'); 695977" />
<Node Id="10077:[36190..36197).1" Label="inUsing 695978" />
<Node Id="10077:[36229..36235).1" Label="inBody 695979" />
<Node Id="10077:[36174..36282).1" Label="var extraInfo = inUsing ? NodeUsage.NamespaceUsings : (inBody ? NodeUsage.NamespaceBody : NodeUsage.Normal); 695980" />
<Node Id="10077:[36330..36380).1" Label="var key = CreateBinderCacheKey(parent, extraInfo); 695981" />
<Node Id="10077:[36330..36380).2" Label="var key = CreateBinderCacheKey(parent, extraInfo); 695982" />
<Node Id="10077:[36340..36379).1" Label="CreateBinderCacheKey(parent, extraInfo) 695983" />
<Node Id="10077:[44159..44180).2" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 695984" />
<Node Id="10077:[44182..44197).2" Label="param CreateBinderCacheKey(NodeUsage usage) 695985" />
<Node Id="10077:[44231..44317).9" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 695986" />
<Node Id="10077:[44231..44317).11" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 695987" />
<Node Id="10077:[36330..36380).3" Label="var key = CreateBinderCacheKey(parent, extraInfo); 695988" />
<Node Id="10077:[36400..36414).1" Label="Binder result; 695989" />
<Node Id="10077:[36437..36448).1" Label="binderCache 695990" />
<Node Id="10077:[2066..2158).2" Label="get
                {
                    return _factory._binderCache;
                } 695991" />
<Node Id="10077:[2110..2139).2" Label="return _factory._binderCache; 695992" />
<Node Id="10077:[36432..37817).1" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    Binder outer;
                    var container = parent.Parent;

                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    }

                    if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    }

                    binderCache.TryAdd(key, result);
                } 695993" />
<Node Id="10077:[36432..37817).2" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    Binder outer;
                    var container = parent.Parent;

                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    }

                    if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    }

                    binderCache.TryAdd(key, result);
                } 695994" />
<Node Id="10077:[36432..37817).3" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    Binder outer;
                    var container = parent.Parent;

                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    }

                    if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    }

                    binderCache.TryAdd(key, result);
                } 695995" />
<Node Id="10077:[36432..37817).4" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    Binder outer;
                    var container = parent.Parent;

                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    }

                    if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    }

                    binderCache.TryAdd(key, result);
                } 695996" />
<Node Id="10077:[36432..37817).5" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    Binder outer;
                    var container = parent.Parent;

                    if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    }

                    if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    }

                    binderCache.TryAdd(key, result);
                } 695997" />
<Node Id="10077:[36519..36532).1" Label="Binder outer; 695998" />
<Node Id="10077:[36554..36584).1" Label="var container = parent.Parent; 695999" />
<Node Id="10077:[36612..36620).1" Label="InScript 696000" />
<Node Id="10077:[2243..2331).1" Label="get
                {
                    return _factory.InScript;
                } 696001" />
<Node Id="10077:[2294..2311).1" Label="_factory.InScript 696002" />
<Node Id="10076:[3592..3700).2" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 696003" />
<Node Id="10077:[2287..2312).1" Label="return _factory.InScript; 696004" />
<Node Id="10077:[36608..37330).1" Label="if (InScript && container.Kind() == SyntaxKind.CompilationUnit)
                    {
                        // Although namespaces are not allowed in script code we still bind them so that we don't report useless errors.
                        // A namespace in script code is not bound within the scope of a Script class, 
                        // but still within scope of compilation unit extern aliases and usings.
                        outer = VisitCompilationUnit((CompilationUnitSyntax)container, inUsing: false, inScript: false);
                    }
                    else
                    {
                        outer = _factory.GetBinder(parent.Parent, position);
                    } 696005" />
<Node Id="10077:[37255..37307).1" Label="outer = _factory.GetBinder(parent.Parent, position); 696006" />
<Node Id="10077:[37255..37307).2" Label="outer = _factory.GetBinder(parent.Parent, position); 696007" />
<Node Id="10077:[37255..37307).3" Label="outer = _factory.GetBinder(parent.Parent, position); 696008" />
<Node Id="10077:[37263..37306).1" Label="_factory.GetBinder(parent.Parent, position) 696009" />
<Node Id="10076:[5097..5112).2" Label="param GetBinder(SyntaxNode node) 696010" />
<Node Id="10076:[5114..5126).2" Label="param GetBinder(int position) 696011" />
<Node Id="10076:[5128..5172).2" Label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 696012" />
<Node Id="10076:[5174..5197).2" Label="param GetBinder(Symbol memberOpt = null) 696013" />
<Node Id="10076:[5223..5250).5" Label="Debug.Assert(node != null); 696014" />
<Node Id="10076:[5223..5250).6" Label="Debug.Assert(node != null); 696015" />
<Node Id="10076:[5277..5448).5" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 696016" />
<Node Id="10077:[1142..1210).8" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 696017" />
<Node Id="10077:[1142..1210).9" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 696018" />
<Node Id="10077:[1142..1210).11" Label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 696019" />
<Node Id="10077:[39020..39048).1" Label="param VisitCompilationUnit(CompilationUnitSyntax parent) 696020" />
<Node Id="10077:[38976..39245).1" Label="param VisitCompilationUnit(this) 696021" />
<Node Id="10077:[39082..39230).1" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 696022" />
<Node Id="10077:[39170..39187).1" Label="IsInUsing(parent) 696023" />
<Node Id="10077:[44823..44854).2" Label="param IsInUsing(CSharpSyntaxNode containingNode) 696024" />
<Node Id="10077:[44800..46356).2" Label="param IsInUsing(this) 696025" />
<Node Id="10077:[44954..44972).2" Label="SyntaxToken token; 696026" />
<Node Id="10077:[44966..44971).34" Label="token 696027" />
<Node Id="10077:[45331..45616).5" Label="if (_position $ containingSpan.Start || _position $ containingSpan.End) //NB: $ not $=
                {
                    return false;
                }
                else
                {
                    token = containingNode.FindToken(_position);
                } 696028" />
<Node Id="10077:[39082..39230).3" Label="return VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript); 696029" />
<Node Id="10077:[39220..39228).1" Label="InScript 696030" />
<Node Id="10077:[2243..2331).2" Label="get
                {
                    return _factory.InScript;
                } 696031" />
<Node Id="10076:[3592..3700).3" Label="get
            {
                return _syntaxTree.Options.Kind == SourceCodeKind.Script;
            } 696032" />
<Node Id="10077:[39089..39229).1" Label="VisitCompilationUnit(
                    parent,
                    inUsing: IsInUsing(parent),
                    inScript: InScript) 696033" />
<Node Id="10077:[39298..39335).1" Label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 696034" />
<Node Id="10077:[39337..39349).1" Label="param VisitCompilationUnit(bool inUsing) 696035" />
<Node Id="10077:[39351..39364).1" Label="param VisitCompilationUnit(bool inScript) 696036" />
<Node Id="10077:[39261..44091).1" Label="param VisitCompilationUnit(this) 696037" />
<Node Id="10077:[39421..39431).1" Label="syntaxTree 696038" />
<Node Id="10077:[1641..1732).1" Label="get
                {
                    return _factory._syntaxTree;
                } 696039" />
<Node Id="10077:[1685..1713).1" Label="return _factory._syntaxTree; 696040" />
<Node Id="10077:[39398..39590).1" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 696041" />
<Node Id="10077:[39398..39590).2" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 696042" />
<Node Id="10077:[39398..39590).5" Label="if (compilationUnit != syntaxTree.GetRoot())
                {
                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');
                } 696043" />
<Node Id="10077:[39626..39633).1" Label="inUsing 696044" />
<Node Id="10077:[39766..39774).1" Label="inScript 696045" />
<Node Id="10077:[39610..39829).1" Label="var extraInfo = inUsing
                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)
                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 696046" />
<Node Id="10077:[39877..39936).1" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 696047" />
<Node Id="10077:[39877..39936).2" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 696048" />
<Node Id="10077:[39887..39935).1" Label="CreateBinderCacheKey(compilationUnit, extraInfo) 696049" />
<Node Id="10077:[44159..44180).3" Label="param CreateBinderCacheKey(CSharpSyntaxNode node) 696050" />
<Node Id="10077:[44182..44197).3" Label="param CreateBinderCacheKey(NodeUsage usage) 696051" />
<Node Id="10077:[44231..44317).17" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 696052" />
<Node Id="10077:[44231..44317).19" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 696053" />
<Node Id="10077:[39877..39936).3" Label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 696054" />
<Node Id="10077:[39956..39970).1" Label="Binder result; 696055" />
<Node Id="10077:[39993..40004).1" Label="binderCache 696056" />
<Node Id="10077:[2066..2158).3" Label="get
                {
                    return _factory._binderCache;
                } 696057" />
<Node Id="10077:[2110..2139).3" Label="return _factory._binderCache; 696058" />
<Node Id="10077:[39988..44042).1" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 696059" />
<Node Id="10077:[39988..44042).2" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 696060" />
<Node Id="10077:[39988..44042).3" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 696061" />
<Node Id="10077:[39988..44042).4" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 696062" />
<Node Id="10077:[39988..44042).5" Label="if (!binderCache.TryGetValue(key, out result))
                {
                    result = this.buckStopsHereBinder;

                    if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    }

                    binderCache.TryAdd(key, result);
                } 696063" />
<Node Id="10077:[40084..40108).1" Label="this.buckStopsHereBinder 696064" />
<Node Id="10077:[1843..1943).1" Label="get
                {
                    return _factory._buckStopsHereBinder;
                } 696065" />
<Node Id="10077:[1887..1924).1" Label="return _factory._buckStopsHereBinder; 696066" />
<Node Id="10077:[40075..40109).1" Label="result = this.buckStopsHereBinder; 696067" />
<Node Id="10077:[40133..43967).1" Label="if (inScript)
                    {
                        Debug.Assert((object)compilation.ScriptClass != null);

                        //
                        // Binder chain in script/interactive code:
                        //
                        // + global imports
                        //   + current and previous submission imports (except using aliases)
                        //     + global namespace
                        //       + host object members
                        //         + previous submissions and corresponding using aliases
                        //           + script class members and using aliases
                        //

                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);
                        if (!isSubmissionTree)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);
                        }

                        // This is declared here so it can be captured.  It's initialized below.
                        InContainerBinder scriptClassBinder = null;

                        if (inUsing)
                        {
                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);
                        }
                        else
                        {
                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);

                            // NB: This binder has a full Imports object, but only the non-alias imports are
                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).
                            // Note: #loaded trees don't consume previous submission imports.
                            result = compilation.PreviousSubmission == null || !isSubmissionTree
                                ? new InContainerBinder(result, basesBeingResolved =$ scriptClassBinder.GetImports(basesBeingResolved))
                                : new InContainerBinder(result, basesBeingResolved =$
                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));
                        }

                        result = new InContainerBinder(compilation.GlobalNamespace, result);

                        if (compilation.HostObjectType != null)
                        {
                            result = new HostObjectModelBinder(result);
                        }

                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);
                        result = scriptClassBinder;
                    }
                    else
                    {
                        //
                        // Binder chain in regular code:
                        //
                        // + global namespace with top-level imports
                        // 
                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);

                        if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        }
                    } 696068" />
<Node Id="10077:[43302..43313).1" Label="compilation 696069" />
<Node Id="10077:[1456..1548).1" Label="get
                {
                    return _factory._compilation;
                } 696070" />
<Node Id="10077:[1500..1529).1" Label="return _factory._compilation; 696071" />
<Node Id="10077:[43271..43374).1" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 696072" />
<Node Id="10077:[43271..43374).3" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 696073" />
<Node Id="10077:[43271..43374).4" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 696074" />
<Node Id="10077:[43271..43374).5" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 696075" />
<Node Id="10077:[43271..43374).6" Label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 696076" />
<Node Id="10077:[43280..43373).1" Label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 696077" />
<Node Id="10346:[1426..1457).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 696078" />
<Node Id="10346:[1459..1470).1" Label="param InContainerBinder(Binder next) 696079" />
<Node Id="10346:[1472..1506).1" Label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 696080" />
<Node Id="10346:[1508..1520).1" Label="param InContainerBinder(bool inUsing) 696081" />
<Node Id="10346:[1399..2435).1" Label="param InContainerBinder(this) 696082" />
<Node Id="10346:[1542..1546).1" Label="next 696083" />
<Node Id="10346:[1399..2435).2" Label="param InContainerBinder(this) 696084" />
<Node Id="10286:[1247..1258).1" Label="param Binder(Binder next) 696085" />
<Node Id="10286:[1231..1520).1" Label="param Binder(this) 696086" />
<Node Id="10286:[1260..1291).1" Label="param Binder(Conversions? conversions = null) 696087" />
<Node Id="10286:[726..773).1" Label="internal CSharpCompilation Compilation { get; } 696088" />
<Node Id="10286:[815..820).1" Label="Flags 696089" />
<Node Id="10286:[2975..3015).1" Label="protected internal Binder? Next { get; } 696090" />
<Node Id="10286:[17802..17818).1" Label="_lazyConversions 696091" />
<Node Id="10286:[18200..18223).1" Label="_lazyOverloadResolution 696092" />
<Node Id="10286:[1317..1350).1" Label="RoslynDebug.Assert(next != null); 696093" />
<Node Id="10286:[1317..1350).2" Label="RoslynDebug.Assert(next != null); 696094" />
<Node Id="10286:[1364..1368).1" Label="Next 696095" />
<Node Id="10286:[1390..1400).1" Label="this.Flags 696096" />
<Node Id="10286:[1428..1444).1" Label="this.Compilation 696097" />
<Node Id="10286:[1478..1494).1" Label="_lazyConversions 696098" />
<Node Id="10346:[858..868).1" Label="_container 696099" />
<Node Id="10346:[932..947).1" Label="_computeImports 696100" />
<Node Id="10346:[974..986).1" Label="_lazyImports 696101" />
<Node Id="10346:[1017..1033).1" Label="_lazyImportChain 696102" />
<Node Id="10346:[1074..1100).1" Label="_lazyQuickAttributeChecker 696103" />
<Node Id="10346:[1572..1612).1" Label="Debug.Assert((object)container != null); 696104" />
<Node Id="10346:[1572..1612).2" Label="Debug.Assert((object)container != null); 696105" />
<Node Id="10346:[1626..1666).1" Label="Debug.Assert(declarationSyntax != null); 696106" />
<Node Id="10346:[1626..1666).2" Label="Debug.Assert(declarationSyntax != null); 696107" />
<Node Id="10346:[1682..1692).1" Label="_container 696108" />
<Node Id="10346:[1719..1832).1" Label="_computeImports = basesBeingResolved =$ Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 696109" />
<Node Id="10346:[1719..1734).1" Label="_computeImports 696110" />
<Node Id="10346:[1848..2424).1" Label="if (!inUsing)
            {
                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                }
            } 696111" />
<Node Id="10346:[1894..2409).1" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 696112" />
<Node Id="10346:[1994..2057).1" Label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 696113" />
<Node Id="10346:[2079..2092).1" Label="_usingsSyntax 696114" />
<Node Id="10077:[43503..43514).1" Label="compilation 696115" />
<Node Id="10077:[1456..1548).2" Label="get
                {
                    return _factory._compilation;
                } 696116" />
<Node Id="10077:[1500..1529).2" Label="return _factory._compilation; 696117" />
<Node Id="10077:[43402..43944).1" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 696118" />
<Node Id="10077:[43402..43944).3" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 696119" />
<Node Id="10077:[43402..43944).4" Label="if (!inUsing &&
                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)
                        {
                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);
                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));
                        } 696120" />
<Node Id="10077:[43991..44002).1" Label="binderCache 696121" />
<Node Id="10077:[2110..2139).4" Label="return _factory._binderCache; 696122" />
<Node Id="10077:[43991..44023).1" Label="binderCache.TryAdd(key, result); 696123" />
<Node Id="10077:[43991..44023).2" Label="binderCache.TryAdd(key, result); 696124" />
<Node Id="10077:[43991..44023).3" Label="binderCache.TryAdd(key, result); 696125" />
<Node Id="10077:[43991..44023).4" Label="binderCache.TryAdd(key, result); 696126" />
<Node Id="10077:[43991..44023).5" Label="binderCache.TryAdd(key, result); 696127" />
<Node Id="10076:[1089..1109).1" Label="param Equals(BinderCacheKey other) 696128" />
<Node Id="10076:[1050..1225).1" Label="param Equals(this) 696129" />
<Node Id="10076:[1143..1210).1" Label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 696130" />
<Node Id="10077:[44062..44076).1" Label="return result; 696131" />
<Node Id="10077:[2926..2971).14" Label="return ((CSharpSyntaxNode)node).Accept(this); 696132" />
<Node Id="10076:[5678..5718).1" Label="_binderFactoryVisitorPool.Free(visitor); 696133" />
<Node Id="10076:[5678..5718).2" Label="_binderFactoryVisitorPool.Free(visitor); 696134" />
<Node Id="10076:[5734..5748).1" Label="return result; 696135" />
<Node Id="10077:[37354..37742).1" Label="if (!inBody)
                    {
                        // not between the curlies
                        result = outer;
                    }
                    else
                    {
                        // if between the curlies, members are in scope
                        result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing);
                    } 696136" />
<Node Id="10077:[37653..37719).1" Label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 696137" />
<Node Id="10077:[37653..37719).2" Label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 696138" />
<Node Id="10077:[37653..37719).3" Label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 696139" />
<Node Id="10077:[37653..37719).4" Label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 696140" />
<Node Id="10077:[37662..37718).1" Label="MakeNamespaceBinder(parent, parent.Name, outer, inUsing) 696141" />
<Node Id="10077:[37917..37938).1" Label="param MakeNamespaceBinder(CSharpSyntaxNode node) 696142" />
<Node Id="10077:[37940..37955).1" Label="param MakeNamespaceBinder(NameSyntax name) 696143" />
<Node Id="10077:[37957..37969).1" Label="param MakeNamespaceBinder(Binder outer) 696144" />
<Node Id="10077:[37971..37983).1" Label="param MakeNamespaceBinder(bool inUsing) 696145" />
<Node Id="10077:[37882..38960).1" Label="param MakeNamespaceBinder(this) 696146" />
<Node Id="10077:[38017..38044).1" Label="QualifiedNameSyntax dotted; 696147" />
<Node Id="10077:[38062..38295).1" Label="while ((dotted = name as QualifiedNameSyntax) != null)
                {
                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);
                    name = dotted.Right;
                } 696148" />
<Node Id="10077:[38062..38295).2" Label="while ((dotted = name as QualifiedNameSyntax) != null)
                {
                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);
                    name = dotted.Right;
                } 696149" />
<Node Id="10077:[38062..38295).3" Label="while ((dotted = name as QualifiedNameSyntax) != null)
                {
                    outer = MakeNamespaceBinder(dotted.Left, dotted.Left, outer, inUsing: false);
                    name = dotted.Right;
                } 696150" />
<Node Id="10077:[38315..38347).1" Label="NamespaceOrTypeSymbol container; 696151" />
<Node Id="10077:[38367..38713).1" Label="if (outer is InContainerBinder inContainerBinder)
                {
                    container = inContainerBinder.Container;
                }
                else
                {
                    Debug.Assert(outer is SimpleProgramUnitBinder);
                    container = outer.Compilation.GlobalNamespace;
                } 696152" />
<Node Id="10077:[38469..38496).1" Label="inContainerBinder.Container 696153" />
<Node Id="10346:[3331..3400).1" Label="get
            {
                return _container;
            } 696154" />
<Node Id="10346:[3367..3385).1" Label="return _container; 696155" />
<Node Id="10077:[38457..38497).1" Label="container = inContainerBinder.Container; 696156" />
<Node Id="10077:[38733..38808).1" Label="NamespaceSymbol ns = ((NamespaceSymbol)container).GetNestedNamespace(name); 696157" />
<Node Id="10077:[38733..38808).2" Label="NamespaceSymbol ns = ((NamespaceSymbol)container).GetNestedNamespace(name); 696158" />
<Node Id="10077:[38826..38863).1" Label="if ((object)ns == null) return outer; 696159" />
<Node Id="10077:[38826..38863).2" Label="if ((object)ns == null) return outer; 696160" />
<Node Id="10077:[38881..38945).1" Label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 696161" />
<Node Id="10077:[38881..38945).2" Label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 696162" />
<Node Id="10077:[38881..38945).3" Label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 696163" />
<Node Id="10077:[38881..38945).4" Label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 696164" />
<Node Id="10077:[38881..38945).5" Label="return new InContainerBinder(ns, outer, node, inUsing: inUsing); 696165" />
<Node Id="10077:[38888..38944).1" Label="new InContainerBinder(ns, outer, node, inUsing: inUsing) 696166" />
<Node Id="10346:[1426..1457).2" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 696167" />
<Node Id="10346:[1459..1470).2" Label="param InContainerBinder(Binder next) 696168" />
<Node Id="10346:[1472..1506).2" Label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 696169" />
<Node Id="10346:[1508..1520).2" Label="param InContainerBinder(bool inUsing) 696170" />
<Node Id="10346:[1399..2435).3" Label="param InContainerBinder(this) 696171" />
<Node Id="10346:[1399..2435).4" Label="param InContainerBinder(this) 696172" />
<Node Id="10286:[1231..1520).2" Label="param Binder(this) 696173" />
<Node Id="10286:[1260..1291).2" Label="param Binder(Conversions? conversions = null) 696174" />
<Node Id="10286:[726..773).2" Label="internal CSharpCompilation Compilation { get; } 696175" />
<Node Id="10286:[815..820).2" Label="Flags 696176" />
<Node Id="10286:[2975..3015).2" Label="protected internal Binder? Next { get; } 696177" />
<Node Id="10286:[17802..17818).2" Label="_lazyConversions 696178" />
<Node Id="10286:[18200..18223).2" Label="_lazyOverloadResolution 696179" />
<Node Id="10286:[1317..1350).5" Label="RoslynDebug.Assert(next != null); 696180" />
<Node Id="10286:[1317..1350).6" Label="RoslynDebug.Assert(next != null); 696181" />
<Node Id="10286:[1390..1400).2" Label="this.Flags 696182" />
<Node Id="10286:[1428..1444).2" Label="this.Compilation 696183" />
<Node Id="10286:[1478..1494).2" Label="_lazyConversions 696184" />
<Node Id="10346:[858..868).2" Label="_container 696185" />
<Node Id="10346:[932..947).2" Label="_computeImports 696186" />
<Node Id="10346:[974..986).2" Label="_lazyImports 696187" />
<Node Id="10346:[1017..1033).2" Label="_lazyImportChain 696188" />
<Node Id="10346:[1074..1100).2" Label="_lazyQuickAttributeChecker 696189" />
<Node Id="10346:[1572..1612).5" Label="Debug.Assert((object)container != null); 696190" />
<Node Id="10346:[1572..1612).6" Label="Debug.Assert((object)container != null); 696191" />
<Node Id="10346:[1626..1666).5" Label="Debug.Assert(declarationSyntax != null); 696192" />
<Node Id="10346:[1626..1666).6" Label="Debug.Assert(declarationSyntax != null); 696193" />
<Node Id="10346:[1719..1832).2" Label="_computeImports = basesBeingResolved =$ Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 696194" />
<Node Id="10346:[1719..1734).2" Label="_computeImports 696195" />
<Node Id="10346:[1848..2424).2" Label="if (!inUsing)
            {
                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                }
            } 696196" />
<Node Id="10346:[1894..2409).4" Label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)
                {
                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;
                    _usingsSyntax = compilationUnit.Usings;
                }
                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 696197" />
<Node Id="10346:[2160..2409).1" Label="if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)
                {
                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;
                    _usingsSyntax = namespaceDecl.Usings;
                } 696198" />
<Node Id="10346:[2265..2331).1" Label="var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax; 696199" />
<Node Id="10346:[2353..2366).1" Label="_usingsSyntax 696200" />
<Node Id="10077:[37653..37719).5" Label="result = MakeNamespaceBinder(parent, parent.Name, outer, inUsing); 696201" />
<Node Id="10077:[37766..37777).1" Label="binderCache 696202" />
<Node Id="10077:[2110..2139).5" Label="return _factory._binderCache; 696203" />
<Node Id="10077:[37766..37798).1" Label="binderCache.TryAdd(key, result); 696204" />
<Node Id="10077:[37766..37798).2" Label="binderCache.TryAdd(key, result); 696205" />
<Node Id="10077:[37766..37798).3" Label="binderCache.TryAdd(key, result); 696206" />
<Node Id="10077:[37766..37798).4" Label="binderCache.TryAdd(key, result); 696207" />
<Node Id="10077:[37766..37798).5" Label="binderCache.TryAdd(key, result); 696208" />
<Node Id="10077:[37837..37851).1" Label="return result; 696209" />
<Node Id="10077:[2926..2971).18" Label="return ((CSharpSyntaxNode)node).Accept(this); 696210" />
<Node Id="10077:[33290..34322).1" Label="if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    } 696211" />
<Node Id="10077:[33414..33451).1" Label="resultBinder.ContainingMemberOrLambda 696212" />
<Node Id="10346:[7369..7588).1" Label="get
            {
                var merged = _container as MergedNamespaceSymbol;
                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;
            } 696213" />
<Node Id="10346:[7405..7454).1" Label="var merged = _container as MergedNamespaceSymbol; 696214" />
<Node Id="10346:[7472..7573).1" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 696215" />
<Node Id="10346:[7472..7573).2" Label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 696216" />
<Node Id="10346:[7479..7503).1" Label="((object)merged != null) 696217" />
<Node Id="10346:[7562..7572).1" Label="_container 696218" />
<Node Id="10077:[33373..33481).1" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 696219" />
<Node Id="10077:[33373..33481).2" Label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 696220" />
<Node Id="10077:[33509..34299).1" Label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        } 696221" />
<Node Id="10077:[33969..34032).1" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 696222" />
<Node Id="10077:[33969..34032).2" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 696223" />
<Node Id="10077:[33969..34032).3" Label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 696224" />
<Node Id="10077:[33984..34031).1" Label="new InContainerBinder(typeSymbol, resultBinder) 696225" />
<Node Id="10346:[2571..2602).1" Label="param InContainerBinder(NamespaceOrTypeSymbol container) 696226" />
<Node Id="10346:[2604..2615).1" Label="param InContainerBinder(Binder next) 696227" />
<Node Id="10346:[2617..2639).1" Label="param InContainerBinder(Imports imports = null) 696228" />
<Node Id="10346:[2544..2854).1" Label="param InContainerBinder(this) 696229" />
<Node Id="10346:[2661..2665).1" Label="next 696230" />
<Node Id="10346:[2544..2854).2" Label="param InContainerBinder(this) 696231" />
<Node Id="10286:[1247..1258).3" Label="param Binder(Binder next) 696232" />
<Node Id="10286:[1231..1520).3" Label="param Binder(this) 696233" />
<Node Id="10286:[1260..1291).3" Label="param Binder(Conversions? conversions = null) 696234" />
<Node Id="10286:[726..773).3" Label="internal CSharpCompilation Compilation { get; } 696235" />
<Node Id="10286:[815..820).3" Label="Flags 696236" />
<Node Id="10286:[2975..3015).3" Label="protected internal Binder? Next { get; } 696237" />
<Node Id="10286:[17802..17818).3" Label="_lazyConversions 696238" />
<Node Id="10286:[18200..18223).3" Label="_lazyOverloadResolution 696239" />
<Node Id="10286:[1317..1350).9" Label="RoslynDebug.Assert(next != null); 696240" />
<Node Id="10286:[1317..1350).10" Label="RoslynDebug.Assert(next != null); 696241" />
<Node Id="10286:[1390..1400).3" Label="this.Flags 696242" />
<Node Id="10286:[1428..1444).3" Label="this.Compilation 696243" />
<Node Id="10286:[1478..1494).3" Label="_lazyConversions 696244" />
<Node Id="10346:[858..868).3" Label="_container 696245" />
<Node Id="10346:[932..947).3" Label="_computeImports 696246" />
<Node Id="10346:[974..986).3" Label="_lazyImports 696247" />
<Node Id="10346:[1017..1033).3" Label="_lazyImportChain 696248" />
<Node Id="10346:[1074..1100).3" Label="_lazyQuickAttributeChecker 696249" />
<Node Id="10346:[2691..2750).1" Label="Debug.Assert((object)container != null || imports != null); 696250" />
<Node Id="10346:[2691..2750).2" Label="Debug.Assert((object)container != null || imports != null); 696251" />
<Node Id="10346:[2766..2776).1" Label="_container 696252" />
<Node Id="10346:[2803..2843).1" Label="_lazyImports = imports ?? Imports.Empty; 696253" />
<Node Id="10346:[2803..2843).2" Label="_lazyImports = imports ?? Imports.Empty; 696254" />
<Node Id="10346:[2803..2815).1" Label="_lazyImports 696255" />
<Node Id="10077:[34064..34272).1" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 696256" />
<Node Id="10077:[34064..34272).2" Label="if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            } 696257" />
<Node Id="10077:[34166..34241).1" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 696258" />
<Node Id="10077:[34166..34241).2" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 696259" />
<Node Id="10077:[34166..34241).3" Label="resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder); 696260" />
<Node Id="10077:[34181..34240).1" Label="new WithClassTypeParametersBinder(typeSymbol, resultBinder) 696261" />
<Node Id="10376:[838..863).1" Label="param WithClassTypeParametersBinder(NamedTypeSymbol container) 696262" />
<Node Id="10376:[865..876).1" Label="param WithClassTypeParametersBinder(Binder next) 696263" />
<Node Id="10376:[799..1016).1" Label="param WithClassTypeParametersBinder(this) 696264" />
<Node Id="10376:[898..902).1" Label="next 696265" />
<Node Id="10376:[799..1016).2" Label="param WithClassTypeParametersBinder(this) 696266" />
<Node Id="10382:[520..531).1" Label="param WithTypeParametersBinder(Binder next) 696267" />
<Node Id="10382:[486..580).1" Label="param WithTypeParametersBinder(this) 696268" />
<Node Id="10382:[553..557).1" Label="next 696269" />
<Node Id="10382:[486..580).2" Label="param WithTypeParametersBinder(this) 696270" />
<Node Id="10286:[1247..1258).4" Label="param Binder(Binder next) 696271" />
<Node Id="10286:[726..773).4" Label="internal CSharpCompilation Compilation { get; } 696272" />
<Node Id="10286:[815..820).4" Label="Flags 696273" />
<Node Id="10286:[2975..3015).4" Label="protected internal Binder? Next { get; } 696274" />
<Node Id="10286:[17802..17818).4" Label="_lazyConversions 696275" />
<Node Id="10286:[1317..1350).13" Label="RoslynDebug.Assert(next != null); 696276" />
<Node Id="10286:[1317..1350).14" Label="RoslynDebug.Assert(next != null); 696277" />
<Node Id="10286:[1390..1400).4" Label="this.Flags 696278" />
<Node Id="10286:[1428..1444).4" Label="this.Compilation 696279" />
<Node Id="10376:[691..701).1" Label="_namedType 696280" />
<Node Id="10376:[765..786).1" Label="_lazyTypeParameterMap 696281" />
<Node Id="10376:[928..968).1" Label="Debug.Assert((object)container != null); 696282" />
<Node Id="10376:[928..968).2" Label="Debug.Assert((object)container != null); 696283" />
<Node Id="10376:[982..992).1" Label="_namedType 696284" />
<Node Id="10077:[34346..34420).1" Label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 696285" />
<Node Id="10077:[34361..34419).1" Label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 696286" />
<Node Id="10307:[3496..3521).1" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 696287" />
<Node Id="10307:[3452..3756).1" Label="param WithUnsafeRegionIfNecessary(this) 696288" />
<Node Id="10307:[3547..3745).1" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 696289" />
<Node Id="10307:[3547..3745).2" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 696290" />
<Node Id="10307:[3555..3600).1" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 696291" />
<Node Id="10298:[471..492).7" Label="param Includes(this BinderFlags self) 696292" />
<Node Id="10298:[494..511).7" Label="param Includes(BinderFlags other) 696293" />
<Node Id="10307:[3547..3745).4" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 696294" />
<Node Id="10307:[3547..3745).7" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 696295" />
<Node Id="10307:[3554..3645).1" Label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 696296" />
<Node Id="10077:[34444..34455).1" Label="binderCache 696297" />
<Node Id="10077:[2110..2139).6" Label="return _factory._binderCache; 696298" />
<Node Id="10077:[34444..34482).1" Label="binderCache.TryAdd(key, resultBinder); 696299" />
<Node Id="10077:[34444..34482).2" Label="binderCache.TryAdd(key, resultBinder); 696300" />
<Node Id="10077:[34444..34482).3" Label="binderCache.TryAdd(key, resultBinder); 696301" />
<Node Id="10077:[34444..34482).4" Label="binderCache.TryAdd(key, resultBinder); 696302" />
<Node Id="10077:[34444..34482).5" Label="binderCache.TryAdd(key, resultBinder); 696303" />
<Node Id="10077:[34521..34541).1" Label="return resultBinder; 696304" />
<Node Id="10077:[2926..2971).22" Label="return ((CSharpSyntaxNode)node).Accept(this); 696305" />
<Node Id="10076:[5678..5718).3" Label="_binderFactoryVisitorPool.Free(visitor); 696306" />
<Node Id="10302:[16344..16385).1" Label="param GetDefaultTypeParameterConstraintClauses(TypeParameterListSyntax typeParameterList) 696307" />
<Node Id="10302:[16248..16799).1" Label="param GetDefaultTypeParameterConstraintClauses(this) 696308" />
<Node Id="10302:[16411..16517).1" Label="var builder = ArrayBuilder$TypeParameterConstraintClause$.GetInstance(typeParameterList.Parameters.Count); 696309" />
<Node Id="10302:[16533..16736).1" Label="foreach (TypeParameterSyntax typeParameterSyntax in typeParameterList.Parameters)
            {
                builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax));
            } 696310" />
<Node Id="10302:[16647..16721).1" Label="builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax)); 696311" />
<Node Id="10302:[16659..16719).1" Label="GetDefaultTypeParameterConstraintClause(typeParameterSyntax) 696312" />
<Node Id="10302:[16889..16928).1" Label="param GetDefaultTypeParameterConstraintClause(TypeParameterSyntax typeParameterSyntax) 696313" />
<Node Id="10302:[16930..16956).1" Label="param GetDefaultTypeParameterConstraintClause(bool isForOverride = false) 696314" />
<Node Id="10302:[16811..17185).1" Label="param GetDefaultTypeParameterConstraintClause(this) 696315" />
<Node Id="10302:[16982..17174).1" Label="return isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) ? TypeParameterConstraintClause.Empty : TypeParameterConstraintClause.ObliviousNullabilityIfReferenceType; 696316" />
<Node Id="10302:[17006..17067).1" Label="AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) 696317" />
<Node Id="10286:[10010..10027).1" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 696318" />
<Node Id="10286:[9966..10197).1" Label="param AreNullableAnnotationsEnabled(this) 696319" />
<Node Id="10286:[10053..10100).1" Label="RoslynDebug.Assert(token.SyntaxTree is object); 696320" />
<Node Id="10286:[10114..10186).1" Label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 696321" />
<Node Id="10286:[10121..10185).1" Label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 696322" />
<Node Id="10286:[9073..9094).1" Label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 696323" />
<Node Id="10286:[9096..9108).1" Label="param AreNullableAnnotationsEnabled(int position) 696324" />
<Node Id="10286:[9029..9954).1" Label="param AreNullableAnnotationsEnabled(this) 696325" />
<Node Id="10286:[9134..9189).1" Label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 696326" />
<Node Id="10286:[9203..9282).1" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 696327" />
<Node Id="10286:[9203..9282).2" Label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 696328" />
<Node Id="10286:[9305..9942).1" Label="context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            } 696329" />
<Node Id="10286:[9298..9943).1" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 696330" />
<Node Id="10286:[9298..9943).2" Label="return context.AnnotationsState switch
            {
                Syntax.NullableContextState.State.Enabled =$ true,
                Syntax.NullableContextState.State.Disabled =$ false,
                Syntax.NullableContextState.State.ExplicitlyRestored =$ GetGlobalAnnotationState(),
                Syntax.NullableContextState.State.Unknown =$
                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)
                    && AreNullableAnnotationsGloballyEnabled(),
                _ =$ throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)
            }; 696331" />
<Node Id="10286:[9798..9837).1" Label="AreNullableAnnotationsGloballyEnabled() 696332" />
<Node Id="10286:[10465..10663).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 696333" />
<Node Id="10286:[10551..10586).1" Label="RoslynDebug.Assert(Next is object); 696334" />
<Node Id="10286:[10607..10651).1" Label="Next.AreNullableAnnotationsGloballyEnabled() 696335" />
<Node Id="10286:[10465..10663).2" Label="param AreNullableAnnotationsGloballyEnabled(this) 696336" />
<Node Id="10325:[4462..4594).1" Label="param AreNullableAnnotationsGloballyEnabled(this) 696337" />
<Node Id="10325:[4556..4582).1" Label="GetGlobalAnnotationState() 696338" />
<Node Id="10286:[10675..11259).1" Label="param GetGlobalAnnotationState(this) 696339" />
<Node Id="10286:[10741..11248).1" Label="switch (Compilation.Options.NullableContextOptions)
            {
                case NullableContextOptions.Enable:
                case NullableContextOptions.Annotations:
                    return true;

                case NullableContextOptions.Disable:
                case NullableContextOptions.Warnings:
                    return false;

                default:
                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);
            } 696340" />
<Node Id="10286:[11085..11098).1" Label="return false; 696341" />
<Node Id="10325:[4549..4583).1" Label="return GetGlobalAnnotationState(); 696342" />
<Node Id="10286:[10600..10652).1" Label="return Next.AreNullableAnnotationsGloballyEnabled(); 696343" />
<Node Id="10302:[16982..17174).3" Label="return isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) ? TypeParameterConstraintClause.Empty : TypeParameterConstraintClause.ObliviousNullabilityIfReferenceType; 696344" />
<Node Id="10302:[16989..17067).1" Label="isForOverride || AreNullableAnnotationsEnabled(typeParameterSyntax.Identifier) 696345" />
<Node Id="10302:[16647..16721).6" Label="builder.Add(GetDefaultTypeParameterConstraintClause(typeParameterSyntax)); 696346" />
<Node Id="10302:[16752..16788).1" Label="return builder.ToImmutableAndFree(); 696347" />
<Node Id="10076:[5223..5250).10" Label="Debug.Assert(node != null); 696348" />
<Node Id="10076:[5277..5448).10" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 696349" />
<Node Id="10077:[31258..31297).2" Label="NodeUsage extraInfo = NodeUsage.Normal; 696350" />
<Node Id="10077:[44231..44317).25" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 696351" />
<Node Id="10077:[34685..34715).3" Label="VisitTypeDeclarationCore(node) 696352" />
<Node Id="10077:[31258..31297).3" Label="NodeUsage extraInfo = NodeUsage.Normal; 696353" />
<Node Id="10077:[31490..32331).31" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 696354" />
<Node Id="10077:[31842..31894).1" Label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 696355" />
<Node Id="10077:[32358..32401).3" Label="VisitTypeDeclarationCore(parent, extraInfo) 696356" />
<Node Id="10077:[32567..32606).3" Label="CreateBinderCacheKey(parent, extraInfo) 696357" />
<Node Id="10077:[44231..44317).33" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 696358" />
<Node Id="10077:[44231..44317).35" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 696359" />
<Node Id="10077:[44335..44374).19" Label="return new BinderCacheKey(node, usage); 696360" />
<Node Id="10077:[44342..44373).5" Label="new BinderCacheKey(node, usage) 696361" />
<Node Id="10076:[853..1034).5" Label="param BinderCacheKey(this) 696362" />
<Node Id="10077:[32557..32607).11" Label="var key = CreateBinderCacheKey(parent, extraInfo); 696363" />
<Node Id="10077:[32627..32647).3" Label="Binder resultBinder; 696364" />
<Node Id="10077:[32670..32681).3" Label="binderCache 696365" />
<Node Id="10077:[32665..34501).23" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 696366" />
<Node Id="10077:[32665..34501).24" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 696367" />
<Node Id="10077:[32665..34501).26" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 696368" />
<Node Id="10845:[522..547).1" Label="param TypeConversions(AssemblySymbol corLibrary) 696369" />
<Node Id="10845:[549..580).1" Label="param TypeConversions(bool includeNullability = false) 696370" />
<Node Id="10845:[499..728).1" Label="param TypeConversions(this) 696371" />
<Node Id="10845:[602..612).1" Label="corLibrary 696372" />
<Node Id="10845:[637..638).1" Label="0 696373" />
<Node Id="10845:[660..678).1" Label="includeNullability 696374" />
<Node Id="10845:[701..705).1" Label="null 696375" />
<Node Id="10845:[499..728).2" Label="param TypeConversions(this) 696376" />
<Node Id="10845:[764..789).1" Label="param TypeConversions(AssemblySymbol corLibrary) 696377" />
<Node Id="10845:[791..816).1" Label="param TypeConversions(int currentRecursionDepth) 696378" />
<Node Id="10845:[818..841).1" Label="param TypeConversions(bool includeNullability) 696379" />
<Node Id="10845:[843..878).1" Label="param TypeConversions(TypeConversions otherNullabilityOpt) 696380" />
<Node Id="10845:[740..997).1" Label="param TypeConversions(this) 696381" />
<Node Id="10845:[900..910).1" Label="corLibrary 696382" />
<Node Id="10845:[912..933).1" Label="currentRecursionDepth 696383" />
<Node Id="10845:[935..953).1" Label="includeNullability 696384" />
<Node Id="10845:[955..974).1" Label="otherNullabilityOpt 696385" />
<Node Id="10845:[740..997).2" Label="param TypeConversions(this) 696386" />
<Node Id="10843:[1173..1198).1" Label="param ConversionsBase(AssemblySymbol corLibrary) 696387" />
<Node Id="10843:[1200..1225).1" Label="param ConversionsBase(int currentRecursionDepth) 696388" />
<Node Id="10843:[1227..1250).1" Label="param ConversionsBase(bool includeNullability) 696389" />
<Node Id="10843:[1252..1287).1" Label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 696390" />
<Node Id="10843:[1147..1833).1" Label="param ConversionsBase(this) 696391" />
<Node Id="10843:[734..744).1" Label="corLibrary 696392" />
<Node Id="10843:[778..799).1" Label="currentRecursionDepth 696393" />
<Node Id="10843:[835..853).1" Label="IncludeNullability 696394" />
<Node Id="10843:[1113..1134).1" Label="_lazyOtherNullability 696395" />
<Node Id="10843:[1313..1354).1" Label="Debug.Assert((object)corLibrary != null); 696396" />
<Node Id="10843:[1313..1354).2" Label="Debug.Assert((object)corLibrary != null); 696397" />
<Node Id="10843:[1368..1474).1" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 696398" />
<Node Id="10843:[1368..1474).2" Label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 696399" />
<Node Id="10843:[1488..1600).1" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 696400" />
<Node Id="10843:[1488..1600).2" Label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 696401" />
<Node Id="10843:[1616..1631).1" Label="this.corLibrary 696402" />
<Node Id="10843:[1659..1685).1" Label="this.currentRecursionDepth 696403" />
<Node Id="10843:[1724..1742).1" Label="IncludeNullability 696404" />
<Node Id="10843:[1778..1799).1" Label="_lazyOtherNullability 696405" />
<Node Id="25002:[4395..4432).37" Label="var diagnostics = c.GetDiagnostics(); 696406" />
<Node Id="10076:[5223..5250).18" Label="Debug.Assert(node != null); 696407" />
<Node Id="10076:[5277..5448).18" Label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })
            {
                container.AssertMemberExposure(memberOpt);
            } 696408" />
<Node Id="10077:[15216..15245).1" Label="param VisitFieldDeclaration(FieldDeclarationSyntax parent) 696409" />
<Node Id="10077:[15171..15372).1" Label="param VisitFieldDeclaration(this) 696410" />
<Node Id="10077:[15279..15357).1" Label="return VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers); 696411" />
<Node Id="10077:[15286..15310).1" Label="VisitCore(parent.Parent) 696412" />
<Node Id="10077:[2877..2892).10" Label="param VisitCore(SyntaxNode node) 696413" />
<Node Id="10077:[2852..2986).10" Label="param VisitCore(this) 696414" />
<Node Id="10077:[2926..2971).57" Label="return ((CSharpSyntaxNode)node).Accept(this); 696415" />
<Node Id="10077:[34685..34715).4" Label="VisitTypeDeclarationCore(node) 696416" />
<Node Id="10077:[31258..31297).4" Label="NodeUsage extraInfo = NodeUsage.Normal; 696417" />
<Node Id="10077:[31490..32331).43" Label="if (parent.OpenBraceToken != default &&
                    parent.CloseBraceToken != default &&
                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||
                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsInTypeParameterList(_position, parent))
                {
                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;
                }
                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))
                {
                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;
                } 696418" />
<Node Id="10077:[32358..32401).4" Label="VisitTypeDeclarationCore(parent, extraInfo) 696419" />
<Node Id="10077:[32567..32606).4" Label="CreateBinderCacheKey(parent, extraInfo) 696420" />
<Node Id="10077:[44231..44317).41" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 696421" />
<Node Id="10077:[44231..44317).43" Label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) $= 1, 'Not a flags enum.'); 696422" />
<Node Id="10077:[44335..44374).23" Label="return new BinderCacheKey(node, usage); 696423" />
<Node Id="10077:[44342..44373).6" Label="new BinderCacheKey(node, usage) 696424" />
<Node Id="10076:[853..1034).6" Label="param BinderCacheKey(this) 696425" />
<Node Id="10077:[32557..32607).15" Label="var key = CreateBinderCacheKey(parent, extraInfo); 696426" />
<Node Id="10077:[32627..32647).4" Label="Binder resultBinder; 696427" />
<Node Id="10077:[32670..32681).4" Label="binderCache 696428" />
<Node Id="10077:[32665..34501).35" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 696429" />
<Node Id="10077:[32665..34501).36" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 696430" />
<Node Id="10077:[32665..34501).38" Label="if (!binderCache.TryGetValue(key, out resultBinder))
                {
                    // if node is in the optional type parameter list, then members and type parameters are in scope 
                    //     (needed when binding attributes applied to type parameters).
                    // if node is in the base clause, type parameters are in scope.
                    // if node is in the body, then members and type parameters are in scope.

                    // a binder for the body of the type enclosing this type
                    resultBinder = VisitCore(parent.Parent);

                    if (extraInfo != NodeUsage.Normal)
                    {
                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);

                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)
                        {
                            // even though there could be no type parameter, we need this binder 
                            // for its 'IsAccessible'
                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                        }
                        else
                        {
                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);

                            if (parent.TypeParameterList != null)
                            {
                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);
                            }
                        }
                    }

                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);

                    binderCache.TryAdd(key, resultBinder);
                } 696431" />
<Node Id="10077:[15286..15356).1" Label="VisitCore(parent.Parent).WithUnsafeRegionIfNecessary(parent.Modifiers) 696432" />
<Node Id="10307:[3496..3521).2" Label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 696433" />
<Node Id="10307:[3452..3756).2" Label="param WithUnsafeRegionIfNecessary(this) 696434" />
<Node Id="10307:[3547..3745).11" Label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))
                ? this
                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 696435" />
<Node Id="10307:[3555..3600).2" Label="this.Flags.Includes(BinderFlags.UnsafeRegion) 696436" />
<Node Id="10298:[494..511).8" Label="param Includes(BinderFlags other) 696437" />
<Node Id="10307:[3228..3245).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 696438" />
<Node Id="10307:[3247..3264).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 696439" />
<Node Id="10307:[3165..3440).1" Label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 696440" />
<Node Id="10307:[3290..3331).1" Label="Debug.Assert((object)containing != null); 696441" />
<Node Id="10307:[3290..3331).2" Label="Debug.Assert((object)containing != null); 696442" />
<Node Id="10307:[3345..3429).1" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 696443" />
<Node Id="10307:[3345..3429).2" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 696444" />
<Node Id="10307:[3345..3429).4" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 696445" />
<Node Id="10307:[3345..3429).5" Label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 696446" />
<Node Id="10307:[3352..3428).1" Label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 696447" />
<Node Id="10307:[1072..1083).1" Label="param BinderWithContainingMemberOrLambda(Binder next) 696448" />
<Node Id="10307:[1085..1102).1" Label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 696449" />
<Node Id="10307:[1104..1135).1" Label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 696450" />
<Node Id="10307:[1028..1341).1" Label="param BinderWithContainingMemberOrLambda(this) 696451" />
<Node Id="10307:[1161..1165).1" Label="next 696452" />
<Node Id="10307:[1167..1172).1" Label="flags 696453" />
<Node Id="10307:[1028..1341).2" Label="param BinderWithContainingMemberOrLambda(this) 696454" />
<Node Id="10286:[1549..1560).1" Label="param Binder(Binder next) 696455" />
<Node Id="10286:[1562..1579).1" Label="param Binder(BinderFlags flags) 696456" />
<Node Id="10286:[1532..2083).1" Label="param Binder(this) 696457" />
<Node Id="10286:[726..773).5" Label="internal CSharpCompilation Compilation { get; } 696458" />
<Node Id="10286:[815..820).5" Label="Flags 696459" />
<Node Id="10286:[2975..3015).5" Label="protected internal Binder? Next { get; } 696460" />
<Node Id="10286:[17802..17818).5" Label="_lazyConversions 696461" />
<Node Id="10286:[18200..18223).5" Label="_lazyOverloadResolution 696462" />
<Node Id="10286:[1605..1638).1" Label="RoslynDebug.Assert(next != null); 696463" />
<Node Id="10286:[1605..1638).2" Label="RoslynDebug.Assert(next != null); 696464" />
<Node Id="10286:[1688..1781).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 696465" />
<Node Id="10286:[1688..1781).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 696466" />
<Node Id="10286:[1708..1779).1" Label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 696467" />
<Node Id="10298:[471..492).9" Label="param Includes(this BinderFlags self) 696468" />
<Node Id="10298:[494..511).9" Label="param Includes(BinderFlags other) 696469" />
<Node Id="10286:[1820..1963).1" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 696470" />
<Node Id="10286:[1820..1963).2" Label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 696471" />
<Node Id="10286:[1840..1888).1" Label="flags.Includes(BinderFlags.InNestedFinallyBlock) 696472" />
<Node Id="10298:[471..492).10" Label="param Includes(this BinderFlags self) 696473" />
<Node Id="10298:[494..511).10" Label="param Includes(BinderFlags other) 696474" />
<Node Id="10286:[1977..1981).1" Label="Next 696475" />
<Node Id="10286:[2003..2013).1" Label="this.Flags 696476" />
<Node Id="10286:[2036..2052).1" Label="this.Compilation 696477" />
<Node Id="10307:[683..708).1" Label="_containingMemberOrLambda 696478" />
<Node Id="10307:[1206..1253).1" Label="Debug.Assert(containingMemberOrLambda != null); 696479" />
<Node Id="10307:[1206..1253).2" Label="Debug.Assert(containingMemberOrLambda != null); 696480" />
<Node Id="10307:[1273..1298).1" Label="_containingMemberOrLambda 696481" />
<Node Id="25002:[4395..4432).43" Label="var diagnostics = c.GetDiagnostics(); 696482" />
<Node Id="10319:[13685..13708).1" Label="param BindType(ExpressionSyntax syntax) 696483" />
<Node Id="10319:[13710..13735).1" Label="param BindType(DiagnosticBag diagnostics) 696484" />
<Node Id="10319:[13737..13783).1" Label="param BindType(ConsList$TypeSymbol$ basesBeingResolved = null) 696485" />
<Node Id="10319:[13785..13824).1" Label="param BindType(bool suppressUseSiteDiagnostics = false) 696486" />
<Node Id="10319:[13647..14061).1" Label="param BindType(this) 696487" />
<Node Id="10319:[13850..13948).1" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 696488" />
<Node Id="10319:[13850..13948).2" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 696489" />
<Node Id="10319:[13850..13948).3" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 696490" />
<Node Id="10319:[13850..13948).4" Label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 696491" />
<Node Id="10319:[13863..13947).1" Label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 696492" />
<Node Id="10319:[14931..14954).1" Label="param BindTypeOrAlias(ExpressionSyntax syntax) 696493" />
<Node Id="10319:[14956..14981).1" Label="param BindTypeOrAlias(DiagnosticBag diagnostics) 696494" />
<Node Id="10319:[14983..15029).1" Label="param BindTypeOrAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 696495" />
<Node Id="10319:[15031..15070).1" Label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 696496" />
<Node Id="10319:[14862..16302).1" Label="param BindTypeOrAlias(this) 696497" />
<Node Id="10319:[15096..15130).1" Label="Debug.Assert(diagnostics != null); 696498" />
<Node Id="10319:[15096..15130).2" Label="Debug.Assert(diagnostics != null); 696499" />
<Node Id="10319:[15146..15291).1" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696500" />
<Node Id="10319:[15146..15291).2" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696501" />
<Node Id="10319:[15146..15291).3" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696502" />
<Node Id="10319:[15146..15291).4" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696503" />
<Node Id="10319:[15146..15291).5" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696504" />
<Node Id="10319:[15146..15291).6" Label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 696505" />
<Node Id="10319:[15159..15290).1" Label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 696506" />
<Node Id="10319:[20002..20025).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 696507" />
<Node Id="10319:[20027..20052).1" Label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 696508" />
<Node Id="10319:[20054..20093).1" Label="param BindNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 696509" />
<Node Id="10319:[20095..20126).1" Label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 696510" />
<Node Id="10319:[19916..30085).1" Label="param BindNamespaceOrTypeOrAliasSymbol(this) 696511" />
<Node Id="10319:[20152..24647).1" Label="switch (syntax.Kind())
            {
                case SyntaxKind.NullableType:
                    return bindNullable(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.PredefinedType:
                    return bindPredefined(syntax, diagnostics);

                case SyntaxKind.IdentifierName:
                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);

                case SyntaxKind.GenericName:
                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);

                case SyntaxKind.AliasQualifiedName:
                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);

                case SyntaxKind.QualifiedName:
                    {
                        var node = (QualifiedNameSyntax)syntax;
                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.SimpleMemberAccessExpression:
                    {
                        var node = (MemberAccessExpressionSyntax)syntax;
                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                case SyntaxKind.ArrayType:
                    {
                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);
                    }

                case SyntaxKind.PointerType:
                    return bindPointer(syntax, diagnostics, basesBeingResolved);

                case SyntaxKind.FunctionPointerType:
                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;
                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)
                    {
                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;
                        var asterisk = functionPointerTypeSyntax.AsteriskToken;
                        RoslynDebug.Assert(@delegate.SyntaxTree is object);
                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));
                    }

                    return TypeWithAnnotations.Create(
                        FunctionPointerTypeSymbol.CreateFromSource(
                            functionPointerTypeSyntax,
                            this,
                            diagnostics,
                            basesBeingResolved,
                            suppressUseSiteDiagnostics));

                case SyntaxKind.OmittedTypeArgument:
                    {
                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);
                    }

                case SyntaxKind.TupleType:
                    {
                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;
                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));
                    }

                case SyntaxKind.RefType:
                    {
                        // ref needs to be handled by the caller
                        var refTypeSyntax = (RefTypeSyntax)syntax;
                        var refToken = refTypeSyntax.RefKeyword;
                        if (!syntax.HasErrors)
                        {
                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());
                        }

                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);
                    }

                default:
                    {
                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind
                        // is attempted to be bound as a type pattern.
                        return createErrorType(syntax);
                    }
            } 696512" />
<Node Id="10319:[20508..20675).1" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 696513" />
<Node Id="10319:[20508..20675).2" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 696514" />
<Node Id="10319:[20508..20675).3" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 696515" />
<Node Id="10319:[20508..20675).4" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 696516" />
<Node Id="10319:[20508..20675).5" Label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 696517" />
<Node Id="10319:[20515..20674).1" Label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 696518" />
<Node Id="10319:[41849..41874).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 696519" />
<Node Id="10319:[41889..41914).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 696520" />
<Node Id="10319:[41929..41968).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList$TypeSymbol$ basesBeingResolved) 696521" />
<Node Id="10319:[41983..42014).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 696522" />
<Node Id="10319:[42029..42063).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 696523" />
<Node Id="10319:[41732..45579).1" Label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 696524" />
<Node Id="10319:[42089..42141).1" Label="var identifierValueText = node.Identifier.ValueText; 696525" />
<Node Id="10319:[42478..42805).1" Label="if (string.IsNullOrWhiteSpace(identifierValueText))
            {
                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(
                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,
                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));
            } 696526" />
<Node Id="10319:[42821..42938).1" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696527" />
<Node Id="10319:[42821..42938).2" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696528" />
<Node Id="10319:[42821..42938).3" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696529" />
<Node Id="10319:[42821..42938).4" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696530" />
<Node Id="10319:[42821..42938).6" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696531" />
<Node Id="10319:[42839..42937).1" Label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 696532" />
<Node Id="10319:[63849..63870).1" Label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 696533" />
<Node Id="10319:[63885..63919).1" Label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 696534" />
<Node Id="10319:[63934..63945).1" Label="param CreateErrorIfLookupOnTypeParameter(string name) 696535" />
<Node Id="10319:[63960..63969).1" Label="param CreateErrorIfLookupOnTypeParameter(int arity) 696536" />
<Node Id="10319:[63984..64009).1" Label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 696537" />
<Node Id="10319:[63768..64484).1" Label="param CreateErrorIfLookupOnTypeParameter(this) 696538" />
<Node Id="10319:[64035..64445).1" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 696539" />
<Node Id="10319:[64035..64445).2" Label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))
            {
                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);
                diagnostics.Add(diagnosticInfo, node.Location);
                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);
            } 696540" />
<Node Id="10319:[64461..64473).1" Label="return null; 696541" />
<Node Id="10319:[42821..42938).7" Label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 696542" />
<Node Id="10319:[42952..43079).1" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 696543" />
<Node Id="10319:[42952..43079).2" Label="if ((object)errorResult != null)
            {
                return TypeWithAnnotations.Create(errorResult);
            } 696544" />
<Node Id="10354:[10826..10838).1" Label="CreatePool() 696545" />
<Node Id="10354:[10975..11012).1" Label="ObjectPool$LookupResult$ pool = null; 696546" />
<Node Id="10354:[11026..11097).1" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 696547" />
<Node Id="10354:[11026..11097).3" Label="pool = new ObjectPool$LookupResult$(() =$ new LookupResult(pool), 128); 696548" />
<Node Id="10354:[11142..11154).1" Label="return pool; 696549" />
<Node Id="10354:[10809..10838).1" Label="s_poolInstance = CreatePool() 696550" />
<Node Id="10319:[43108..43134).1" Label="LookupResult.GetInstance() 696551" />
<Node Id="10354:[11244..11285).1" Label="var instance = s_poolInstance.Allocate(); 696552" />
<Node Id="10354:[11244..11285).2" Label="var instance = s_poolInstance.Allocate(); 696553" />
<Node Id="10354:[11244..11285).3" Label="var instance = s_poolInstance.Allocate(); 696554" />
<Node Id="10354:[3419..3448).1" Label="param LookupResult(ObjectPool$LookupResult$ pool) 696555" />
<Node Id="10354:[3398..3626).1" Label="param LookupResult(this) 696556" />
<Node Id="10354:[3068..3073).1" Label="_kind 696557" />
<Node Id="10354:[3200..3211).1" Label="_symbolList 696558" />
<Node Id="10354:[3319..3325).1" Label="_error 696559" />
<Node Id="10354:[3380..3385).1" Label="_pool 696560" />
<Node Id="10354:[3474..3479).1" Label="_pool 696561" />
<Node Id="10354:[3501..3506).1" Label="_kind 696562" />
<Node Id="10354:[3546..3587).1" Label="_symbolList = new ArrayBuilder$Symbol$(); 696563" />
<Node Id="10354:[3546..3557).1" Label="_symbolList 696564" />
<Node Id="10354:[3601..3615).1" Label="_error = null; 696565" />
<Node Id="10354:[3601..3607).1" Label="_error 696566" />
<Node Id="10354:[11244..11285).4" Label="var instance = s_poolInstance.Allocate(); 696567" />
<Node Id="10354:[11312..11328).1" Label="instance.IsClear 696568" />
<Node Id="10354:[3684..3818).1" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 696569" />
<Node Id="10354:[3720..3803).1" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696570" />
<Node Id="10354:[3720..3803).2" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696571" />
<Node Id="10354:[3720..3803).3" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696572" />
<Node Id="10354:[11299..11330).1" Label="Debug.Assert(instance.IsClear); 696573" />
<Node Id="10354:[11344..11360).1" Label="return instance; 696574" />
<Node Id="10319:[43095..43135).1" Label="var result = LookupResult.GetInstance(); 696575" />
<Node Id="10319:[43149..43246).1" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 696576" />
<Node Id="10319:[43149..43246).2" Label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 696577" />
<Node Id="10319:[43173..43245).1" Label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 696578" />
<Node Id="10319:[50313..50328).1" Label="param GetSimpleNameLookupOptions(NameSyntax node) 696579" />
<Node Id="10319:[50330..50355).1" Label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 696580" />
<Node Id="10319:[50381..51340).1" Label="if (SyntaxFacts.IsAttributeName(node))
            {
                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.
                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.
                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity
                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled
                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only
                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.

                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;
            }
            else
            {
                return LookupOptions.NamespacesOrTypesOnly;
            } 696581" />
<Node Id="10319:[51282..51325).1" Label="return LookupOptions.NamespacesOrTypesOnly; 696582" />
<Node Id="10319:[43262..43312).1" Label="HashSet$DiagnosticInfo$ useSiteDiagnostics = null; 696583" />
<Node Id="10319:[43326..43490).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696584" />
<Node Id="10319:[43326..43490).2" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696585" />
<Node Id="10319:[43326..43490).3" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696586" />
<Node Id="10319:[43326..43490).4" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696587" />
<Node Id="10319:[43326..43490).6" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696588" />
<Node Id="10319:[43326..43490).7" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696589" />
<Node Id="10319:[43326..43490).10" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 696590" />
<Node Id="10319:[43326..43489).1" Label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 696591" />
<Node Id="10312:[994..1013).1" Label="param LookupSymbolsSimpleName(LookupResult result) 696592" />
<Node Id="10312:[1028..1062).1" Label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 696593" />
<Node Id="10312:[1077..1093).1" Label="param LookupSymbolsSimpleName(string plainName) 696594" />
<Node Id="10312:[1108..1117).1" Label="param LookupSymbolsSimpleName(int arity) 696595" />
<Node Id="10312:[1132..1171).1" Label="param LookupSymbolsSimpleName(ConsList$TypeSymbol$ basesBeingResolved) 696596" />
<Node Id="10312:[1186..1207).1" Label="param LookupSymbolsSimpleName(LookupOptions options) 696597" />
<Node Id="10312:[1222..1235).1" Label="param LookupSymbolsSimpleName(bool diagnose) 696598" />
<Node Id="10312:[1250..1296).1" Label="param LookupSymbolsSimpleName(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 696599" />
<Node Id="10312:[942..1750).1" Label="param LookupSymbolsSimpleName(this) 696600" />
<Node Id="10312:[1322..1739).1" Label="if (options.IsAttributeTypeLookup())
            {
                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            } 696601" />
<Node Id="10312:[1326..1357).1" Label="options.IsAttributeTypeLookup() 696602" />
<Node Id="10353:[7504..7530).1" Label="param IsAttributeTypeLookup(this LookupOptions options) 696603" />
<Node Id="10353:[7556..7642).1" Label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 696604" />
<Node Id="10312:[1585..1724).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696605" />
<Node Id="10312:[1585..1724).2" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696606" />
<Node Id="10312:[1585..1724).3" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696607" />
<Node Id="10312:[1585..1724).4" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696608" />
<Node Id="10312:[1585..1724).5" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696609" />
<Node Id="10312:[1585..1724).6" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696610" />
<Node Id="10312:[1585..1724).7" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696611" />
<Node Id="10312:[1585..1724).8" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696612" />
<Node Id="10312:[1585..1723).1" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 696613" />
<Node Id="10312:[5721..5740).1" Label="param LookupSymbolsOrMembersInternal(LookupResult result) 696614" />
<Node Id="10312:[5755..5789).1" Label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 696615" />
<Node Id="10312:[5804..5815).1" Label="param LookupSymbolsOrMembersInternal(string name) 696616" />
<Node Id="10312:[5830..5839).1" Label="param LookupSymbolsOrMembersInternal(int arity) 696617" />
<Node Id="10312:[5854..5893).1" Label="param LookupSymbolsOrMembersInternal(ConsList$TypeSymbol$ basesBeingResolved) 696618" />
<Node Id="10312:[5908..5929).1" Label="param LookupSymbolsOrMembersInternal(LookupOptions options) 696619" />
<Node Id="10312:[5944..5957).1" Label="param LookupSymbolsOrMembersInternal(bool diagnose) 696620" />
<Node Id="10312:[5972..6018).1" Label="param LookupSymbolsOrMembersInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 696621" />
<Node Id="10312:[5663..6444).1" Label="param LookupSymbolsOrMembersInternal(this) 696622" />
<Node Id="10312:[6044..6433).1" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 696623" />
<Node Id="10312:[6044..6433).2" Label="if ((object)qualifierOpt == null)
            {
                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);
            }
            else
            {
                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
            } 696624" />
<Node Id="10312:[6110..6221).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696625" />
<Node Id="10312:[6110..6221).2" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696626" />
<Node Id="10312:[6110..6221).3" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696627" />
<Node Id="10312:[6110..6221).4" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696628" />
<Node Id="10312:[6110..6221).5" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696629" />
<Node Id="10312:[6110..6221).6" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696630" />
<Node Id="10312:[6110..6221).7" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696631" />
<Node Id="10312:[6110..6220).1" Label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 696632" />
<Node Id="10312:[3696..3715).1" Label="param LookupSymbolsInternal(LookupResult result) 696633" />
<Node Id="10312:[3717..3728).1" Label="param LookupSymbolsInternal(string name) 696634" />
<Node Id="10312:[3730..3739).1" Label="param LookupSymbolsInternal(int arity) 696635" />
<Node Id="10312:[3741..3780).1" Label="param LookupSymbolsInternal(ConsList$TypeSymbol$ basesBeingResolved) 696636" />
<Node Id="10312:[3782..3803).1" Label="param LookupSymbolsInternal(LookupOptions options) 696637" />
<Node Id="10312:[3805..3818).1" Label="param LookupSymbolsInternal(bool diagnose) 696638" />
<Node Id="10312:[3820..3866).1" Label="param LookupSymbolsInternal(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 696639" />
<Node Id="10312:[3645..5112).1" Label="param LookupSymbolsInternal(this) 696640" />
<Node Id="10312:[3905..3919).1" Label="result.IsClear 696641" />
<Node Id="10354:[3684..3818).2" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 696642" />
<Node Id="10354:[3720..3803).9" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696643" />
<Node Id="10354:[3720..3803).10" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696644" />
<Node Id="10354:[3720..3803).11" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696645" />
<Node Id="10312:[3892..3921).1" Label="Debug.Assert(result.IsClear); 696646" />
<Node Id="10312:[3935..3968).1" Label="Debug.Assert(options.AreValid()); 696647" />
<Node Id="10312:[3948..3966).1" Label="options.AreValid() 696648" />
<Node Id="10353:[4698..4724).1" Label="param AreValid(this LookupOptions options) 696649" />
<Node Id="10353:[4750..4847).1" Label="if (options == LookupOptions.Default)
            {
                return true;
            } 696650" />
<Node Id="10353:[4863..5000).1" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 696651" />
<Node Id="10353:[4863..5000).2" Label="if ((options & LookupOptions.LabelsOnly) != 0)
            {
                return options == LookupOptions.LabelsOnly;
            } 696652" />
<Node Id="10353:[5079..5183).1" Label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 696653" />
<Node Id="10353:[5197..5323).1" Label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)
            {
                return false;
            } 696654" />
<Node Id="10353:[5485..5759).1" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 696655" />
<Node Id="10353:[5485..5759).2" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 696656" />
<Node Id="10353:[5485..5759).3" Label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&
                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)
            {
                return false;
            } 696657" />
<Node Id="10353:[5775..5979).1" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 696658" />
<Node Id="10353:[5775..5979).3" Label="LookupOptions onlyOptions = options &
                (LookupOptions.NamespaceAliasesOnly
                 | LookupOptions.NamespacesOrTypesOnly
                 | LookupOptions.AllMethodsOnArityZero); 696659" />
<Node Id="10353:[5995..6029).1" Label="return OnlyOneBitSet(onlyOptions); 696660" />
<Node Id="10353:[6002..6028).1" Label="OnlyOneBitSet(onlyOptions) 696661" />
<Node Id="10353:[6343..6358).1" Label="param OnlyOneBitSet(LookupOptions o) 696662" />
<Node Id="10353:[6384..6410).1" Label="return (o & (o - 1)) == 0; 696663" />
<Node Id="10353:[6384..6410).2" Label="return (o & (o - 1)) == 0; 696664" />
<Node Id="10312:[3984..4005).1" Label="Binder binder = null; 696665" />
<Node Id="10312:[4019..5073).1" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 696666" />
<Node Id="10312:[4019..5073).2" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 696667" />
<Node Id="10312:[4060..4080).1" Label="result.IsMultiViable 696668" />
<Node Id="10354:[4919..5009).1" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 696669" />
<Node Id="10354:[4962..4966).1" Label="Kind 696670" />
<Node Id="10354:[4058..4122).1" Label="get
            {
                return _kind;
            } 696671" />
<Node Id="10354:[4094..4107).1" Label="return _kind; 696672" />
<Node Id="10354:[4955..4994).1" Label="return Kind == LookupResultKind.Viable; 696673" />
<Node Id="10312:[4019..5073).4" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 696674" />
<Node Id="10312:[4019..5073).5" Label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)
            {
                if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                }

                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                }
            } 696675" />
<Node Id="10312:[4134..4806).1" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 696676" />
<Node Id="10312:[4134..4806).2" Label="if (binder != null)
                {
                    var tmp = LookupResult.GetInstance();
                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    result.MergeEqual(tmp);
                    tmp.Free();
                }
                else
                {
                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);
                    if (!result.IsClear)
                    {
                        binder = scope;
                    }
                } 696677" />
<Node Id="10312:[4534..4658).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696678" />
<Node Id="10312:[4534..4658).2" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696679" />
<Node Id="10312:[4534..4658).3" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696680" />
<Node Id="10312:[4534..4658).4" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696681" />
<Node Id="10312:[4534..4658).5" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696682" />
<Node Id="10312:[4534..4658).6" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696683" />
<Node Id="10312:[4534..4658).7" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696684" />
<Node Id="10312:[4534..4658).8" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696685" />
<Node Id="10312:[4534..4657).1" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 696686" />
<Node Id="10312:[5188..5207).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 696687" />
<Node Id="10312:[5209..5220).1" Label="param LookupSymbolsInSingleBinder(string name) 696688" />
<Node Id="10312:[5222..5231).1" Label="param LookupSymbolsInSingleBinder(int arity) 696689" />
<Node Id="10312:[5233..5272).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 696690" />
<Node Id="10312:[5274..5295).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 696691" />
<Node Id="10312:[5297..5318).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 696692" />
<Node Id="10312:[5320..5333).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 696693" />
<Node Id="10312:[5335..5381).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 696694" />
<Node Id="10312:[5124..5404).1" Label="param LookupSymbolsInSingleBinder(this) 696695" />
<Node Id="10312:[4534..4658).9" Label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 696696" />
<Node Id="10312:[4685..4699).1" Label="result.IsClear 696697" />
<Node Id="10354:[3684..3818).3" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 696698" />
<Node Id="10354:[3720..3803).17" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696699" />
<Node Id="10354:[3720..3803).18" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696700" />
<Node Id="10354:[3720..3803).19" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696701" />
<Node Id="10312:[4680..4787).1" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 696702" />
<Node Id="10312:[4826..5058).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 696703" />
<Node Id="10312:[4826..5058).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())
                {
                    // Labels declared outside of a member are not visible inside.
                    break;
                } 696704" />
<Node Id="10382:[1340..1359).1" Label="param LookupSymbolsInSingleBinder(LookupResult result) 696705" />
<Node Id="10382:[1361..1372).1" Label="param LookupSymbolsInSingleBinder(string name) 696706" />
<Node Id="10382:[1374..1383).1" Label="param LookupSymbolsInSingleBinder(int arity) 696707" />
<Node Id="10382:[1385..1424).1" Label="param LookupSymbolsInSingleBinder(ConsList$TypeSymbol$ basesBeingResolved) 696708" />
<Node Id="10382:[1426..1447).1" Label="param LookupSymbolsInSingleBinder(LookupOptions options) 696709" />
<Node Id="10382:[1449..1470).1" Label="param LookupSymbolsInSingleBinder(Binder originalBinder) 696710" />
<Node Id="10382:[1472..1485).1" Label="param LookupSymbolsInSingleBinder(bool diagnose) 696711" />
<Node Id="10382:[1487..1533).1" Label="param LookupSymbolsInSingleBinder(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 696712" />
<Node Id="10382:[1275..1939).1" Label="param LookupSymbolsInSingleBinder(this) 696713" />
<Node Id="10382:[1572..1586).1" Label="result.IsClear 696714" />
<Node Id="10354:[3684..3818).4" Label="get
            {
                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;
            } 696715" />
<Node Id="10354:[3720..3803).25" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696716" />
<Node Id="10354:[3720..3803).26" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696717" />
<Node Id="10354:[3720..3803).27" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696718" />
<Node Id="10382:[1559..1588).1" Label="Debug.Assert(result.IsClear); 696719" />
<Node Id="10382:[1619..1629).1" Label="LookupMask 696720" />
<Node Id="10382:[913..1046).1" Label="get
            {
                return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember;
            } 696721" />
<Node Id="10382:[949..1031).1" Label="return LookupOptions.NamespaceAliasesOnly | LookupOptions.MustBeInvocableIfMember; 696722" />
<Node Id="10382:[1604..1691).1" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 696723" />
<Node Id="10382:[1604..1691).2" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 696724" />
<Node Id="10382:[1604..1691).3" Label="if ((options & LookupMask) != 0)
            {
                return;
            } 696725" />
<Node Id="10382:[1737..1753).1" Label="TypeParameterMap 696726" />
<Node Id="10376:[1542..2071).1" Label="get
            {
                if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                }
                return _lazyTypeParameterMap;
            } 696727" />
<Node Id="10376:[1578..2009).1" Label="if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                } 696728" />
<Node Id="10376:[1578..2009).2" Label="if (_lazyTypeParameterMap == null)
                {
                    var result = new MultiDictionary$string, TypeParameterSymbol$();
                    foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    }
                    Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null);
                } 696729" />
<Node Id="10376:[1653..1717).1" Label="var result = new MultiDictionary$string, TypeParameterSymbol$(); 696730" />
<Node Id="10376:[1739..1899).1" Label="foreach (TypeParameterSymbol tps in _namedType.TypeParameters)
                    {
                        result.Add(tps.Name, tps);
                    } 696731" />
<Node Id="10376:[1850..1876).1" Label="result.Add(tps.Name, tps); 696732" />
<Node Id="10376:[1850..1876).2" Label="result.Add(tps.Name, tps); 696733" />
<Node Id="10376:[1850..1876).3" Label="result.Add(tps.Name, tps); 696734" />
<Node Id="10376:[1921..1990).1" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 696735" />
<Node Id="10376:[1921..1990).2" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 696736" />
<Node Id="10376:[1921..1990).3" Label="Interlocked.CompareExchange(ref _lazyTypeParameterMap, result, null); 696737" />
<Node Id="10376:[2027..2056).1" Label="return _lazyTypeParameterMap; 696738" />
<Node Id="10382:[1707..1928).1" Label="foreach (var typeParameter in TypeParameterMap[name])
            {
                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));
            } 696739" />
<Node Id="10382:[1707..1928).2" Label="foreach (var typeParameter in TypeParameterMap[name])
            {
                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));
            } 696740" />
<Node Id="10382:[1793..1913).1" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 696741" />
<Node Id="10382:[1793..1913).2" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 696742" />
<Node Id="10382:[1793..1913).3" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 696743" />
<Node Id="10382:[1793..1913).6" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 696744" />
<Node Id="10382:[1793..1913).7" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)); 696745" />
<Node Id="10382:[1811..1911).1" Label="originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics) 696746" />
<Node Id="10312:[63424..63437).1" Label="param CheckViability(Symbol symbol) 696747" />
<Node Id="10312:[63439..63448).1" Label="param CheckViability(int arity) 696748" />
<Node Id="10312:[63450..63471).1" Label="param CheckViability(LookupOptions options) 696749" />
<Node Id="10312:[63473..63501).1" Label="param CheckViability(TypeSymbol accessThroughType) 696750" />
<Node Id="10312:[63503..63516).1" Label="param CheckViability(bool diagnose) 696751" />
<Node Id="10312:[63518..63564).1" Label="param CheckViability(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 696752" />
<Node Id="10312:[63566..63612).1" Label="param CheckViability(ConsList$TypeSymbol$ basesBeingResolved = null) 696753" />
<Node Id="10312:[63381..70761).1" Label="param CheckViability(this) 696754" />
<Node Id="10312:[63638..63668).1" Label="bool inaccessibleViaQualifier; 696755" />
<Node Id="10312:[63682..63706).1" Label="DiagnosticInfo diagInfo; 696756" />
<Node Id="10312:[63859..64015).1" Label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias
                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)
                : symbol; 696757" />
<Node Id="10312:[63881..63912).1" Label="symbol.Kind == SymbolKind.Alias 696758" />
<Node Id="10312:[64121..69285).1" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696759" />
<Node Id="10312:[64121..69285).2" Label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())
            {
                return LookupResult.Empty();
            }
            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696760" />
<Node Id="10312:[64353..69285).1" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696761" />
<Node Id="10312:[64353..69285).2" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696762" />
<Node Id="10312:[64353..69285).3" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696763" />
<Node Id="10312:[64353..69285).4" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696764" />
<Node Id="10312:[64353..69285).5" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696765" />
<Node Id="10312:[64357..64415).1" Label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 696766" />
<Node Id="10312:[80978..80991).1" Label="param WrongArity(Symbol symbol) 696767" />
<Node Id="10312:[80993..81002).1" Label="param WrongArity(int arity) 696768" />
<Node Id="10312:[81004..81017).1" Label="param WrongArity(bool diagnose) 696769" />
<Node Id="10312:[81019..81040).1" Label="param WrongArity(LookupOptions options) 696770" />
<Node Id="10312:[81042..81069).1" Label="param WrongArity(out DiagnosticInfo diagInfo) 696771" />
<Node Id="10312:[81095..84034).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)
                    {
                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;
                        // non-declared types only appear as using aliases (aliases are arity 0)
                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));
                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)
                        {
                            if (namedType.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                case SymbolKind.Method:
                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)
                    {
                        MethodSymbol method = (MethodSymbol)symbol;
                        if (method.Arity != arity)
                        {
                            if (method.Arity == 0)
                            {
                                // The non-generic {1} '{0}' cannot be used with type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;
                            }
                            else
                            {
                                // Using the generic {1} '{0}' requires {2} type arguments
                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;
                            }
                            return true;
                        }
                    }
                    break;

                default:
                    if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    }
                    break;
            } 696772" />
<Node Id="10312:[83750..83991).1" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 696773" />
<Node Id="10312:[83750..83991).2" Label="if (arity != 0)
                    {
                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;
                        return true;
                    } 696774" />
<Node Id="10312:[84050..84066).1" Label="diagInfo = null; 696775" />
<Node Id="10312:[84080..84093).1" Label="return false; 696776" />
<Node Id="10312:[64353..69285).6" Label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))
            {
                return LookupResult.WrongArity(symbol, diagInfo);
            }
            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696777" />
<Node Id="10312:[64537..64543).1" Label="InCref 696778" />
<Node Id="10306:[3196..3249).1" Label="get { return this.Flags.Includes(BinderFlags.Cref); } 696779" />
<Node Id="10306:[3202..3247).1" Label="return this.Flags.Includes(BinderFlags.Cref); 696780" />
<Node Id="10306:[3202..3247).2" Label="return this.Flags.Includes(BinderFlags.Cref); 696781" />
<Node Id="10306:[3209..3246).1" Label="this.Flags.Includes(BinderFlags.Cref) 696782" />
<Node Id="10298:[471..492).11" Label="param Includes(this BinderFlags self) 696783" />
<Node Id="10298:[494..511).11" Label="param Includes(BinderFlags other) 696784" />
<Node Id="10312:[64532..69285).1" Label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)
            {
                // Strictly speaking, this test should actually check CanBeReferencedByName.
                // However, we don't want to pay that cost in cases where the lookup is based
                // on a provided name.  As a result, we skip the character check here and let
                // SemanticModel.LookupNames filter out invalid names before returning.

                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696785" />
<Node Id="10312:[65229..69285).1" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696786" />
<Node Id="10312:[65229..69285).2" Label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))
            {
                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);
            }
            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696787" />
<Node Id="10312:[65474..69285).1" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696788" />
<Node Id="10312:[65474..69285).2" Label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0
                && IsNonInvocableMember(unwrappedSymbol))
            {
                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);
            }
            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696789" />
<Node Id="10312:[65730..65736).1" Label="InCref 696790" />
<Node Id="10312:[65726..69285).1" Label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))
            {
                var unwrappedSymbols = ImmutableArray.Create$Symbol$(unwrappedSymbol);
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray$Location$.Empty) : null;
                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696791" />
<Node Id="10312:[66182..66188).1" Label="InCref 696792" />
<Node Id="10312:[66177..69285).1" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696793" />
<Node Id="10312:[66177..69285).2" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696794" />
<Node Id="10312:[66177..69285).3" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696795" />
<Node Id="10312:[66177..69285).4" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696796" />
<Node Id="10312:[66291..66342).1" Label="RefineAccessThroughType(options, accessThroughType) 696797" />
<Node Id="10312:[75301..75322).1" Label="param RefineAccessThroughType(LookupOptions options) 696798" />
<Node Id="10312:[75324..75352).1" Label="param RefineAccessThroughType(TypeSymbol accessThroughType) 696799" />
<Node Id="10312:[75735..75866).1" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 696800" />
<Node Id="10312:[75735..75866).2" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 696801" />
<Node Id="10312:[75742..75804).1" Label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 696802" />
<Node Id="10312:[75735..75866).4" Label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)
                ? null
                : accessThroughType; 696803" />
<Node Id="10312:[66177..69285).7" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696804" />
<Node Id="10312:[66177..69285).8" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696805" />
<Node Id="10312:[66177..69285).9" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696806" />
<Node Id="10312:[66215..66540).1" Label="this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved) 696807" />
<Node Id="10312:[77528..77541).1" Label="param IsAccessible(Symbol symbol) 696808" />
<Node Id="10312:[77543..77571).1" Label="param IsAccessible(TypeSymbol accessThroughType) 696809" />
<Node Id="10312:[77573..77604).1" Label="param IsAccessible(out bool failedThroughTypeCheck) 696810" />
<Node Id="10312:[77606..77652).1" Label="param IsAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 696811" />
<Node Id="10312:[77654..77700).1" Label="param IsAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 696812" />
<Node Id="10312:[77501..78044).1" Label="param IsAccessible(this) 696813" />
<Node Id="10312:[77726..77892).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 696814" />
<Node Id="10312:[77726..77892).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 696815" />
<Node Id="10312:[77730..77782).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 696816" />
<Node Id="10298:[471..492).14" Label="param Includes(this BinderFlags self) 696817" />
<Node Id="10298:[494..511).14" Label="param Includes(BinderFlags other) 696818" />
<Node Id="10312:[77908..78033).1" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696819" />
<Node Id="10312:[77908..78033).2" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696820" />
<Node Id="10312:[77908..78033).3" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696821" />
<Node Id="10312:[77908..78033).4" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696822" />
<Node Id="10312:[77908..78033).5" Label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696823" />
<Node Id="10312:[77915..78032).1" Label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 696824" />
<Node Id="10312:[78387..78400).1" Label="param IsAccessibleHelper(Symbol symbol) 696825" />
<Node Id="10312:[78402..78430).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 696826" />
<Node Id="10312:[78432..78463).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 696827" />
<Node Id="10312:[78465..78511).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 696828" />
<Node Id="10312:[78513..78552).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 696829" />
<Node Id="10312:[78346..78783).1" Label="param IsAccessibleHelper(this) 696830" />
<Node Id="10312:[78642..78772).1" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696831" />
<Node Id="10312:[78642..78772).2" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696832" />
<Node Id="10312:[78642..78772).3" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696833" />
<Node Id="10312:[78642..78772).4" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696834" />
<Node Id="10312:[78642..78772).5" Label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696835" />
<Node Id="10312:[78649..78771).1" Label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 696836" />
<Node Id="10376:[1070..1083).1" Label="param IsAccessibleHelper(Symbol symbol) 696837" />
<Node Id="10376:[1085..1113).1" Label="param IsAccessibleHelper(TypeSymbol accessThroughType) 696838" />
<Node Id="10376:[1115..1146).1" Label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 696839" />
<Node Id="10376:[1148..1194).1" Label="param IsAccessibleHelper(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 696840" />
<Node Id="10376:[1196..1235).1" Label="param IsAccessibleHelper(ConsList$TypeSymbol$ basesBeingResolved) 696841" />
<Node Id="10376:[1028..1425).1" Label="param IsAccessibleHelper(this) 696842" />
<Node Id="10376:[1261..1414).1" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696843" />
<Node Id="10376:[1261..1414).2" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696844" />
<Node Id="10376:[1261..1414).3" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696845" />
<Node Id="10376:[1261..1414).4" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696846" />
<Node Id="10376:[1261..1414).5" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696847" />
<Node Id="10376:[1261..1414).6" Label="return this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696848" />
<Node Id="10376:[1268..1413).1" Label="this.IsSymbolAccessibleConditional(symbol, _namedType, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 696849" />
<Node Id="10286:[30070..30083).1" Label="param IsSymbolAccessibleConditional(Symbol symbol) 696850" />
<Node Id="10286:[30098..30120).1" Label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 696851" />
<Node Id="10286:[30135..30160).1" Label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 696852" />
<Node Id="10286:[30175..30206).1" Label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 696853" />
<Node Id="10286:[30221..30268).1" Label="param IsSymbolAccessibleConditional(ref HashSet$DiagnosticInfo$? useSiteDiagnostics) 696854" />
<Node Id="10286:[30283..30330).1" Label="param IsSymbolAccessibleConditional(ConsList$TypeSymbol$? basesBeingResolved = null) 696855" />
<Node Id="10286:[30012..30691).1" Label="param IsSymbolAccessibleConditional(this) 696856" />
<Node Id="10286:[30356..30522).1" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 696857" />
<Node Id="10286:[30356..30522).2" Label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))
            {
                failedThroughTypeCheck = false;
                return true;
            } 696858" />
<Node Id="10286:[30360..30412).1" Label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 696859" />
<Node Id="10298:[471..492).15" Label="param Includes(this BinderFlags self) 696860" />
<Node Id="10298:[494..511).15" Label="param Includes(BinderFlags other) 696861" />
<Node Id="10286:[30538..30680).1" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696862" />
<Node Id="10286:[30538..30680).2" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696863" />
<Node Id="10286:[30538..30680).3" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696864" />
<Node Id="10286:[30538..30680).4" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696865" />
<Node Id="10286:[30538..30680).5" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696866" />
<Node Id="10286:[30538..30680).6" Label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 696867" />
<Node Id="10286:[30545..30679).1" Label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 696868" />
<Node Id="10060:[2108..2121).1" Label="param IsSymbolAccessible(Symbol symbol) 696869" />
<Node Id="10060:[2136..2158).1" Label="param IsSymbolAccessible(NamedTypeSymbol within) 696870" />
<Node Id="10060:[2173..2198).1" Label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 696871" />
<Node Id="10060:[2213..2244).1" Label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 696872" />
<Node Id="10060:[2259..2305).1" Label="param IsSymbolAccessible(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 696873" />
<Node Id="10060:[2320..2366).1" Label="param IsSymbolAccessible(ConsList$TypeSymbol$ basesBeingResolved = null) 696874" />
<Node Id="10060:[2392..2555).1" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696875" />
<Node Id="10060:[2392..2555).2" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696876" />
<Node Id="10060:[2392..2555).3" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696877" />
<Node Id="10060:[2392..2555).4" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696878" />
<Node Id="10060:[2392..2555).5" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696879" />
<Node Id="10060:[2392..2555).6" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696880" />
<Node Id="10060:[2392..2555).7" Label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 696881" />
<Node Id="10060:[2399..2554).1" Label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 696882" />
<Node Id="10060:[5593..5606).1" Label="param IsSymbolAccessibleCore(Symbol symbol) 696883" />
<Node Id="10060:[5621..5634).1" Label="param IsSymbolAccessibleCore(Symbol within) 696884" />
<Node Id="10060:[5691..5716).1" Label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 696885" />
<Node Id="10060:[5731..5762).1" Label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 696886" />
<Node Id="10060:[5777..5806).1" Label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 696887" />
<Node Id="10060:[5821..5867).1" Label="param IsSymbolAccessibleCore(ref HashSet$DiagnosticInfo$ useSiteDiagnostics) 696888" />
<Node Id="10060:[5882..5928).1" Label="param IsSymbolAccessibleCore(ConsList$TypeSymbol$ basesBeingResolved = null) 696889" />
<Node Id="10060:[5954..5991).1" Label="Debug.Assert((object)symbol != null); 696890" />
<Node Id="10060:[5954..5991).2" Label="Debug.Assert((object)symbol != null); 696891" />
<Node Id="10060:[6005..6042).1" Label="Debug.Assert((object)within != null); 696892" />
<Node Id="10060:[6005..6042).2" Label="Debug.Assert((object)within != null); 696893" />
<Node Id="10060:[6056..6090).1" Label="Debug.Assert(within.IsDefinition); 696894" />
<Node Id="10060:[6104..6172).1" Label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 696895" />
<Node Id="10060:[6188..6219).1" Label="failedThroughTypeCheck = false; 696896" />
<Node Id="10060:[6235..9907).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.ArrayType:
                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.PointerType:
                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.NamedType:
                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Alias:
                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.Discard:
                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);

                case SymbolKind.FunctionPointerType:
                    var funcPtr = (FunctionPointerTypeSymbol)symbol;
                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                    {
                        return false;
                    }

                    foreach (var param in funcPtr.Signature.Parameters)
                    {
                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))
                        {
                            return false;
                        }
                    }

                    return true;

                case SymbolKind.ErrorType:
                    // Always assume that error types are accessible.
                    return true;

                case SymbolKind.TypeParameter:
                case SymbolKind.Parameter:
                case SymbolKind.Local:
                case SymbolKind.Label:
                case SymbolKind.Namespace:
                case SymbolKind.DynamicType:
                case SymbolKind.Assembly:
                case SymbolKind.NetModule:
                case SymbolKind.RangeVariable:
                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:
                    // These types of symbols are always accessible (if visible).
                    return true;

                case SymbolKind.Method:
                case SymbolKind.Property:
                case SymbolKind.Event:
                case SymbolKind.Field:
                    if (!symbol.RequiresInstanceReceiver())
                    {
                        // static members aren't accessed 'through' an 'instance' of any type.  So we
                        // null out the 'through' instance here.  This ensures that we'll understand
                        // accessing protected statics properly.
                        throughTypeOpt = null;
                    }

                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);

                default:
                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);
            } 696897" />
<Node Id="10060:[8992..9004).1" Label="return true; 696898" />
<Node Id="10312:[66177..69285).11" Label="if (!InCref &&
                     !this.IsAccessible(unwrappedSymbol,
                                        RefineAccessThroughType(options, accessThroughType),
                                        out inaccessibleViaQualifier,
                                        ref useSiteDiagnostics,
                                        basesBeingResolved))
            {
                if (!diagnose)
                {
                    diagInfo = null;
                }
                else if (inaccessibleViaQualifier)
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);
                }
                else if (IsBadIvtSpecification())
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));
                }
                else
                {
                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create$Symbol$(unwrappedSymbol), additionalLocations: ImmutableArray$Location$.Empty);
                }

                return LookupResult.Inaccessible(symbol, diagInfo);
            }
            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696899" />
<Node Id="10312:[67587..67593).1" Label="InCref 696900" />
<Node Id="10312:[67582..69285).1" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696901" />
<Node Id="10312:[67582..69285).2" Label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())
            {
                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;
                return LookupResult.NotReferencable(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696902" />
<Node Id="10312:[67858..69285).1" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696903" />
<Node Id="10312:[67858..69285).2" Label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696904" />
<Node Id="10312:[68183..69285).1" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696905" />
<Node Id="10312:[68183..69285).2" Label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;
                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);
            }
            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696906" />
<Node Id="10312:[68512..69285).1" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696907" />
<Node Id="10312:[68512..69285).2" Label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;
                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);
            }
            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696908" />
<Node Id="10312:[68882..69285).1" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696909" />
<Node Id="10312:[68882..69285).2" Label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)
            {
                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;
                return LookupResult.NotLabel(symbol, diagInfo);
            }
            else
            {
                return LookupResult.Good(symbol);
            } 696910" />
<Node Id="10312:[69237..69270).1" Label="return LookupResult.Good(symbol); 696911" />
<Node Id="10312:[69244..69269).1" Label="LookupResult.Good(symbol) 696912" />
<Node Id="10354:[5400..5413).1" Label="param Good(Symbol symbol) 696913" />
<Node Id="10354:[5439..5508).1" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 696914" />
<Node Id="10354:[5439..5508).2" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 696915" />
<Node Id="10354:[5439..5508).3" Label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 696916" />
<Node Id="10354:[5446..5507).1" Label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 696917" />
<Node Id="10368:[1076..1097).1" Label="param SingleLookupResult(LookupResultKind kind) 696918" />
<Node Id="10368:[1099..1112).1" Label="param SingleLookupResult(Symbol symbol) 696919" />
<Node Id="10368:[1114..1134).1" Label="param SingleLookupResult(DiagnosticInfo error) 696920" />
<Node Id="10368:[1048..1256).1" Label="param SingleLookupResult(this) 696921" />
<Node Id="10368:[1160..1169).1" Label="this.Kind 696922" />
<Node Id="10368:[1191..1202).1" Label="this.Symbol 696923" />
<Node Id="10368:[1226..1236).1" Label="this.Error 696924" />
<Node Id="10312:[69237..69270).2" Label="return LookupResult.Good(symbol); 696925" />
<Node Id="10382:[1793..1912).1" Label="result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics)) 696926" />
<Node Id="10354:[10217..10242).1" Label="param MergeEqual(SingleLookupResult result) 696927" />
<Node Id="10354:[10192..10676).1" Label="param MergeEqual(this) 696928" />
<Node Id="10354:[10272..10276).1" Label="Kind 696929" />
<Node Id="10354:[4058..4122).3" Label="get
            {
                return _kind;
            } 696930" />
<Node Id="10354:[10268..10665).1" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 696931" />
<Node Id="10354:[10268..10665).2" Label="if (Kind $ result.Kind)
            {
                // existing result is better
            }
            else if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 696932" />
<Node Id="10354:[10404..10408).1" Label="Kind 696933" />
<Node Id="10354:[10386..10665).1" Label="if (result.Kind $ Kind)
            {
                this.SetFrom(result);
            }
            else if ((object)result.Symbol != null)
            {
                // Same goodness. Include all symbols
                _symbolList.Add(result.Symbol);
            } 696934" />
<Node Id="10354:[10442..10463).1" Label="this.SetFrom(result); 696935" />
<Node Id="10354:[10442..10462).1" Label="this.SetFrom(result) 696936" />
<Node Id="10354:[8131..8155).1" Label="param SetFrom(SingleLookupResult other) 696937" />
<Node Id="10354:[8109..8324).1" Label="param SetFrom(this) 696938" />
<Node Id="10354:[8181..8186).1" Label="_kind 696939" />
<Node Id="10354:[8214..8234).1" Label="_symbolList.Clear(); 696940" />
<Node Id="10354:[8248..8278).1" Label="_symbolList.Add(other.Symbol); 696941" />
<Node Id="10354:[8248..8278).2" Label="_symbolList.Add(other.Symbol); 696942" />
<Node Id="10354:[8292..8298).1" Label="_error 696943" />
<Node Id="10354:[10442..10463).2" Label="this.SetFrom(result); 696944" />
<Node Id="10382:[1707..1928).6" Label="foreach (var typeParameter in TypeParameterMap[name])
            {
                result.MergeEqual(originalBinder.CheckViability(typeParameter, arity, options, null, diagnose, ref useSiteDiagnostics));
            } 696945" />
<Node Id="10354:[3720..3803).33" Label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 696946" />
<Node Id="10312:[4680..4787).3" Label="if (!result.IsClear)
                    {
                        binder = scope;
                    } 696947" />
<Node Id="10312:[4749..4764).1" Label="binder = scope; 696948" />
<Node Id="10312:[5087..5101).1" Label="return binder; 696949" />
<Node Id="10312:[1585..1724).9" Label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 696950" />
<Node Id="10319:[43504..43546).1" Label="diagnostics.Add(node, useSiteDiagnostics); 696951" />
<Node Id="10319:[43504..43546).2" Label="diagnostics.Add(node, useSiteDiagnostics); 696952" />
<Node Id="10319:[43504..43546).3" Label="diagnostics.Add(node, useSiteDiagnostics); 696953" />
<Node Id="10319:[43504..43546).4" Label="diagnostics.Add(node, useSiteDiagnostics); 696954" />
<Node Id="10319:[43562..43590).1" Label="Symbol bindingResult = null; 696955" />
<Node Id="10319:[43799..44676).1" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 696956" />
<Node Id="10319:[43799..44676).2" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 696957" />
<Node Id="10319:[43799..44676).3" Label="if ((object)qualifierOpt == null &&
                !IsViableType(result))
            {
                if (node.Identifier.ValueText == 'dynamic')
                {
                    if ((node.Parent == null ||
                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type
                          SyntaxFacts.IsInTypeOnlyContext(node)) &&
                        Compilation.LanguageVersion $= MessageID.IDS_FeatureDynamic.RequiredVersion())
                    {
                        bindingResult = Compilation.DynamicType;
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
                else
                {
                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);
                }
            } 696958" />
<Node Id="10319:[43853..43873).1" Label="IsViableType(result) 696959" />
<Node Id="10319:[41088..41107).1" Label="param IsViableType(LookupResult result) 696960" />
<Node Id="10319:[41138..41158).1" Label="result.IsMultiViable 696961" />
<Node Id="10354:[4919..5009).4" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 696962" />
<Node Id="10354:[4962..4966).4" Label="Kind 696963" />
<Node Id="10354:[4058..4122).6" Label="get
            {
                return _kind;
            } 696964" />
<Node Id="10354:[4094..4107).6" Label="return _kind; 696965" />
<Node Id="10319:[41133..41220).1" Label="if (!result.IsMultiViable)
            {
                return false;
            } 696966" />
<Node Id="10319:[41254..41268).1" Label="result.Symbols 696967" />
<Node Id="10354:[4525..4595).1" Label="get
            {
                return _symbolList;
            } 696968" />
<Node Id="10354:[4561..4580).1" Label="return _symbolList; 696969" />
<Node Id="10319:[41236..41680).1" Label="foreach (var s in result.Symbols)
            {
                switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                }
            } 696970" />
<Node Id="10319:[41302..41665).1" Label="switch (s.Kind)
                {
                    case SymbolKind.Alias:
                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;
                        break;
                    case SymbolKind.NamedType:
                    case SymbolKind.TypeParameter:
                        return true;
                } 696971" />
<Node Id="10319:[41634..41646).1" Label="return true; 696972" />
<Node Id="10319:[44692..45392).1" Label="if (bindingResult is null)
            {
                bool wasError;

                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);
                if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                }
            } 696973" />
<Node Id="10319:[44751..44765).1" Label="bool wasError; 696974" />
<Node Id="10319:[44785..44930).1" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696975" />
<Node Id="10319:[44785..44930).2" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696976" />
<Node Id="10319:[44785..44930).3" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696977" />
<Node Id="10319:[44785..44930).5" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696978" />
<Node Id="10319:[44785..44930).6" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696979" />
<Node Id="10319:[44785..44930).7" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696980" />
<Node Id="10319:[44785..44930).8" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696981" />
<Node Id="10319:[44785..44930).9" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696982" />
<Node Id="10319:[44785..44930).10" Label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696983" />
<Node Id="10319:[44801..44929).1" Label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 696984" />
<Node Id="10319:[84167..84186).1" Label="param ResultSymbol(LookupResult result) 696985" />
<Node Id="10319:[84201..84218).1" Label="param ResultSymbol(string simpleName) 696986" />
<Node Id="10319:[84233..84242).1" Label="param ResultSymbol(int arity) 696987" />
<Node Id="10319:[84257..84273).1" Label="param ResultSymbol(SyntaxNode where) 696988" />
<Node Id="10319:[84288..84313).1" Label="param ResultSymbol(DiagnosticBag diagnostics) 696989" />
<Node Id="10319:[84328..84359).1" Label="param ResultSymbol(bool suppressUseSiteDiagnostics) 696990" />
<Node Id="10319:[84374..84391).1" Label="param ResultSymbol(out bool wasError) 696991" />
<Node Id="10319:[84406..84447).1" Label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 696992" />
<Node Id="10319:[84462..84508).1" Label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 696993" />
<Node Id="10319:[84124..109887).1" Label="param ResultSymbol(this) 696994" />
<Node Id="10319:[84534..84675).1" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696995" />
<Node Id="10319:[84534..84675).2" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696996" />
<Node Id="10319:[84534..84675).3" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696997" />
<Node Id="10319:[84534..84675).4" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696998" />
<Node Id="10319:[84534..84675).5" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 696999" />
<Node Id="10319:[84534..84675).6" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 697000" />
<Node Id="10319:[84534..84675).7" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 697001" />
<Node Id="10319:[84534..84675).8" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 697002" />
<Node Id="10319:[84534..84675).9" Label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 697003" />
<Node Id="10319:[84550..84674).1" Label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 697004" />
<Node Id="10319:[84907..109876).1" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 697005" />
<Node Id="10319:[84907..109876).2" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 697006" />
<Node Id="10319:[84907..109876).3" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 697007" />
<Node Id="10319:[84907..109876).4" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 697008" />
<Node Id="10319:[84907..109876).5" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 697009" />
<Node Id="10319:[84907..109876).6" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 697010" />
<Node Id="10319:[84907..109876).7" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 697011" />
<Node Id="10319:[84907..109876).8" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 697012" />
<Node Id="10319:[84907..109876).9" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 697013" />
<Node Id="10319:[84907..109876).10" Label="Symbol resultSymbol(
                LookupResult result,
                string simpleName,
                int arity,
                SyntaxNode where,
                DiagnosticBag diagnostics,
                bool suppressUseSiteDiagnostics,
                out bool wasError,
                NamespaceOrTypeSymbol qualifierOpt,
                LookupOptions options)
            {
                Debug.Assert(where != null);
                Debug.Assert(diagnostics != null);

                var symbols = result.Symbols;
                wasError = false;

                if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                }

                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)
                wasError = true;

                if (result.Kind == LookupResultKind.Empty)
                {
                    string aliasOpt = null;
                    SyntaxNode node = where;
                    while (node is ExpressionSyntax)
                    {
                        if (node.Kind() == SyntaxKind.AliasQualifiedName)
                        {
                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;
                            break;
                        }
                        node = node.Parent;
                    }

                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,
                        // LAFHIS
                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);
                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);
                }

                Debug.Assert(symbols.Count $ 0);

                // Report any errors we encountered with the symbol we looked up.
                if (!suppressUseSiteDiagnostics)
                {
                    for (int i = 0; i $ symbols.Count; i++)
                    {
                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);
                    }
                }

                // result.Error might be null if we have already generated parser errors,
                // e.g. when generic name is used for attribute name.
                if (result.Error != null &&
                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.
                {
                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));
                }

                if ((symbols.Count $ 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||
                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)
                {
                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.
                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might
                    // be of different kinds.
                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);
                }
                else
                {
                    // It's a single non-type-or-namespace; error was already reported, so just return it.
                    return symbols[0];
                }
            } 697014" />
<Node Id="10319:[85320..85348).1" Label="Debug.Assert(where != null); 697015" />
<Node Id="10319:[85320..85348).2" Label="Debug.Assert(where != null); 697016" />
<Node Id="10319:[85366..85400).1" Label="Debug.Assert(diagnostics != null); 697017" />
<Node Id="10319:[85366..85400).2" Label="Debug.Assert(diagnostics != null); 697018" />
<Node Id="10319:[85434..85448).1" Label="result.Symbols 697019" />
<Node Id="10354:[4525..4595).2" Label="get
            {
                return _symbolList;
            } 697020" />
<Node Id="10354:[4561..4580).2" Label="return _symbolList; 697021" />
<Node Id="10319:[85420..85449).1" Label="var symbols = result.Symbols; 697022" />
<Node Id="10319:[85467..85484).1" Label="wasError = false; 697023" />
<Node Id="10319:[85508..85528).1" Label="result.IsMultiViable 697024" />
<Node Id="10354:[4919..5009).5" Label="get
            {
                return Kind == LookupResultKind.Viable;
            } 697025" />
<Node Id="10354:[4962..4966).5" Label="Kind 697026" />
<Node Id="10354:[4058..4122).7" Label="get
            {
                return _kind;
            } 697027" />
<Node Id="10354:[4094..4107).7" Label="return _kind; 697028" />
<Node Id="10319:[85504..106825).1" Label="if (result.IsMultiViable)
                {
                    if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    }
                } 697029" />
<Node Id="10319:[85570..106806).1" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 697030" />
<Node Id="10319:[85570..106806).2" Label="if (symbols.Count $ 1)
                    {
                        // gracefully handle symbols.Count $ 2
                        symbols.Sort(ConsistentSymbolOrder.Instance);

                        var originalSymbols = symbols.ToImmutable();

                        for (int i = 0; i $ symbols.Count; i++)
                        {
                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);
                        }

                        BestSymbolInfo secondBest;
                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);

                        Debug.Assert(!best.IsNone);
                        Debug.Assert(!secondBest.IsNone);

                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)
                        {
                            var srcSymbol = symbols[best.Index];
                            var mdSymbol = symbols[secondBest.Index];

                            object arg0;

                            if (best.IsFromSourceModule)
                            {
                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;
                            }
                            else
                            {
                                Debug.Assert(best.IsFromAddedModule);
                                arg0 = srcSymbol.ContainingModule;
                            }

                            //if names match, arities match, and containing symbols match (recursively), ...
                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))
                            {
                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)
                                {
                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        GetContainingAssembly(mdSymbol),
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)
                                {
                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.
                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,
                                        arg0,
                                        srcSymbol,
                                        mdSymbol.ContainingAssembly,
                                        mdSymbol);

                                    return originalSymbols[best.Index];
                                }
                                else
                                {
                                    // namespace would be merged with the source namespace:
                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));
                                }
                            }
                        }

                        var first = symbols[best.Index];
                        var second = symbols[secondBest.Index];

                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),
                            'This kind of ambiguity is only possible for attributes.');

                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                            'Why does the LookupResult contain the same symbol twice?');

                        CSDiagnosticInfo info;
                        bool reportError;

                        //if names match, arities match, and containing symbols match (recursively), ...
                        if (first != second &&
                            NameAndArityMatchRecursively(first, second))
                        {
                            // suppress reporting the error if we found multiple symbols from source module
                            // since an error has already been reported from the declaration
                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);

                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)
                            {
                                if (first.OriginalDefinition == second.OriginalDefinition)
                                {
                                    // We imported different generic instantiations of the same generic type
                                    // and have an ambiguous reference to a type nested in it
                                    reportError = true;

                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                                else
                                {
                                    Debug.Assert(!best.IsFromCorLibrary);

                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,
                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });

                                    // Do not report this error if the first is declared in source and the second is declared in added module,
                                    // we already reported declaration error about this name collision.
                                    // Do not report this error if both are declared in added modules,
                                    // we will report assembly level declaration error about this name collision.
                                    if (secondBest.IsFromAddedModule)
                                    {
                                        Debug.Assert(best.IsFromCompilation);
                                        reportError = false;
                                    }
                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&
                                        secondBest.IsFromCorLibrary)
                                    {
                                        // Ignore duplicate types from the cor library if necessary.
                                        // (Specifically the framework assemblies loaded at runtime in
                                        // the EE may contain types also available from mscorlib.dll.)
                                        return first;
                                    }
                                }
                            }
                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)
                            {
                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });

                                // Do not report this error if namespace is declared in source and the type is declared in added module,
                                // we already reported declaration error about this name collision.
                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)
                                {
                                    reportError = false;
                                }
                            }
                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)
                            {
                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)
                                {
                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,
                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });
                                }
                                else
                                {
                                    Debug.Assert(secondBest.IsFromAddedModule);

                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'
                                    object arg0;

                                    if (best.IsFromSourceModule)
                                    {
                                        arg0 = first.Locations.First().SourceTree.FilePath;
                                    }
                                    else
                                    {
                                        Debug.Assert(best.IsFromAddedModule);
                                        arg0 = first.ContainingModule;
                                    }

                                    ModuleSymbol arg2 = second.ContainingModule;

                                    // Merged namespaces that span multiple modules don't have a containing module,
                                    // so just use module with the smallest ordinal from the containing assembly.
                                    if ((object)arg2 == null)
                                    {
                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)
                                        {
                                            if (ns.ContainingAssembly == Compilation.Assembly)
                                            {
                                                ModuleSymbol module = ns.ContainingModule;

                                                if ((object)arg2 == null || arg2.Ordinal $ module.Ordinal)
                                                {
                                                    arg2 = module;
                                                }
                                            }
                                        }
                                    }

                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,
                                        new object[] { arg0, first, arg2, second });
                                }
                            }
                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)
                            {
                                // We will already have reported a conflicting range variable declaration.
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                            else
                            {
                                // TODO: this is not an appropriate error message here, but used as a fallback until the
                                // appropriate diagnostics are implemented.
                                // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,
                                //    whereText,
                                //    first,
                                //    second);

                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });

                                reportError = true;
                            }
                        }
                        else
                        {
                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||
                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),
                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');

                            reportError = true;

                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)
                            {
                                if (options.IsAttributeTypeLookup() &&
                                    first.Kind == SymbolKind.NamedType &&
                                    second.Kind == SymbolKind.NamedType &&
                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.
                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&
                                    Compilation.IsAttributeType((NamedTypeSymbol)second))
                                {
                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity
                                    //  SPEC:   is present, and a compile-time error results.

                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,
                                        // LAFHIS
                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });
                                }
                                else
                                {
                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'
                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,
                                        new object[] {
                                            // LAFHIS
                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,
                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),
                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });
                                }
                            }
                            else
                            {
                                // CS0229: Ambiguity between '{0}' and '{1}'
                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,
                                    new object[] { first, second });
                            }
                        }

                        wasError = true;

                        if (reportError)
                        {
                            diagnostics.Add(info, where.Location);
                        }

                        return new ExtendedErrorTypeSymbol(
                            GetContainingNamespaceOrType(originalSymbols[0]),
                            originalSymbols,
                            LookupResultKind.Ambiguous,
                            info,
                            arity);
                    }
                    else
                    {
                        // Single viable result.
                        var singleResult = symbols[0];

                        // Cannot reference System.Void directly.
                        var singleType = singleResult as TypeSymbol;
                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        }

                        return singleResult;
                    } 697031" />
<Node Id="10319:[103953..103983).1" Label="var singleResult = symbols[0]; 697032" />
<Node Id="10319:[104078..104122).1" Label="var singleType = singleResult as TypeSymbol; 697033" />
<Node Id="10319:[104148..106735).1" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 697034" />
<Node Id="10319:[104148..106735).2" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 697035" />
<Node Id="10319:[104148..106735).3" Label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')
                        {
                            wasError = true;
                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);
                            diagnostics.Add(errorInfo, where.Location);
                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.
                        }
                        // Check for bad symbol.
                        else
                        {
                            if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            }

                            if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            }
                        } 697036" />
<Node Id="10319:[104874..105336).1" Label="if (singleResult.Kind == SymbolKind.NamedType &&
                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)
                            {
                                // Complain about unembeddable types from linked assemblies.
                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);
                            } 697037" />
<Node Id="10319:[105368..106708).1" Label="if (!suppressUseSiteDiagnostics)
                            {
                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);
                            }
                            else if (singleResult.Kind == SymbolKind.ErrorType)
                            {
                                // We want to report ERR_CircularBase error on the spot to make sure
                                // that the right location is used for it.
                                var errorType = (ErrorTypeSymbol)singleResult;

                                if (errorType.Unreported)
                                {
                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;

                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)
                                    {
                                        wasError = true;
                                        diagnostics.Add(errorInfo, where.Location);
                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);
                                    }
                                }
                            } 697038" />
<Node Id="10319:[105465..105535).1" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 697039" />
<Node Id="10319:[105465..105535).2" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 697040" />
<Node Id="10319:[105465..105535).3" Label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 697041" />
<Node Id="10319:[105476..105534).1" Label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 697042" />
<Node Id="10319:[76345..76358).1" Label="param ReportUseSiteDiagnostics(Symbol symbol) 697043" />
<Node Id="10319:[76360..76385).1" Label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 697044" />
<Node Id="10319:[76387..76402).1" Label="param ReportUseSiteDiagnostics(SyntaxNode node) 697045" />
<Node Id="10319:[76428..76480).1" Label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 697046" />
<Node Id="10319:[76494..76582).1" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 697047" />
<Node Id="10319:[76494..76582).2" Label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 697048" />
<Node Id="10319:[106763..106783).1" Label="return singleResult; 697049" />
<Node Id="10319:[84691..84861).1" Label="if (symbol.Kind == SymbolKind.NamedType)
            {
                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);
            } 697050" />
<Node Id="10319:[84877..84891).1" Label="return symbol; 697051" />
<Node Id="10319:[44948..45377).1" Label="if (bindingResult.Kind == SymbolKind.Alias)
                {
                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);
                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())
                    {
                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);
                    }
                } 697052" />
<Node Id="10319:[45408..45421).1" Label="result.Free() 697053" />
<Node Id="10354:[11383..11549).1" Label="param Free(this) 697054" />
<Node Id="10354:[11428..11440).1" Label="this.Clear() 697055" />
<Node Id="10354:[3841..3991).1" Label="param Clear(this) 697056" />
<Node Id="10354:[3887..3892).1" Label="_kind 697057" />
<Node Id="10354:[3932..3952).1" Label="_symbolList.Clear(); 697058" />
<Node Id="10354:[3966..3980).1" Label="_error = null; 697059" />
<Node Id="10354:[3966..3972).1" Label="_error 697060" />
<Node Id="10354:[11428..11441).1" Label="this.Clear(); 697061" />
<Node Id="10354:[11455..11538).1" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 697062" />
<Node Id="10354:[11455..11538).2" Label="if (_pool != null)
            {
                _pool.Free(this);
            } 697063" />
<Node Id="10354:[11506..11523).1" Label="_pool.Free(this); 697064" />
<Node Id="10354:[11506..11523).2" Label="_pool.Free(this); 697065" />
<Node Id="10319:[45408..45422).1" Label="result.Free(); 697066" />
<Node Id="10319:[45436..45568).1" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 697067" />
<Node Id="10319:[45505..45551).1" Label="AreNullableAnnotationsEnabled(node.Identifier) 697068" />
<Node Id="10286:[10010..10027).3" Label="param AreNullableAnnotationsEnabled(SyntaxToken token) 697069" />
<Node Id="10286:[9966..10197).3" Label="param AreNullableAnnotationsEnabled(this) 697070" />
<Node Id="10319:[45436..45568).4" Label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 697071" />
<Node Id="10319:[45443..45567).1" Label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 697072" />
<Node Id="10287:[2306..2328).1" Label="param CreateUnannotated(bool isNullableEnabled) 697073" />
<Node Id="10287:[2330..2343).1" Label="param CreateUnannotated(Symbol symbol) 697074" />
<Node Id="10287:[2377..2471).1" Label="if (symbol is null)
                {
                    return default;
                } 697075" />
<Node Id="10287:[2489..2521).1" Label="var type = symbol as TypeSymbol; 697076" />
<Node Id="10287:[2539..2781).1" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 697077" />
<Node Id="10287:[2546..2558).1" Label="type is null 697078" />
<Node Id="10287:[2539..2781).2" Label="return type is null ?
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :
                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 697079" />
<Node Id="10287:[2680..2780).1" Label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 697080" />
<Node Id="10287:[718..757).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 697081" />
<Node Id="10287:[666..1076).1" Label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 697082" />
<Node Id="10287:[791..833).1" Label="Debug.Assert(typeWithAnnotations.HasType); 697083" />
<Node Id="10287:[851..871).1" Label="_typeWithAnnotations 697084" />
<Node Id="10287:[912..927).1" Label="_symbol = null; 697085" />
<Node Id="10287:[912..919).1" Label="_symbol 697086" />
<Node Id="10287:[945..972).1" Label="_isNullableEnabled = false; 697087" />
<Node Id="10287:[945..963).1" Label="_isNullableEnabled 697088" />
<Node Id="10319:[15383..15396).1" Label="symbol.IsType 697089" />
<Node Id="10287:[1609..1643).1" Label="=$ !_typeWithAnnotations.IsDefault 697090" />
<Node Id="10287:[1612..1643).1" Label="!_typeWithAnnotations.IsDefault 697091" />
<Node Id="10319:[15379..15933).1" Label="if (symbol.IsType ||
                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))
            {
                if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                }

                return symbol;
            } 697092" />
<Node Id="10319:[15548..15561).1" Label="symbol.IsType 697093" />
<Node Id="10319:[15544..15884).1" Label="if (symbol.IsType)
                {
                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an
                    // alias to a type) we report the obsolete type here.
                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);
                } 697094" />
<Node Id="10319:[15783..15809).1" Label="symbol.TypeWithAnnotations 697095" />
<Node Id="10287:[1474..1497).1" Label="=$ _typeWithAnnotations 697096" />
<Node Id="10287:[1477..1497).1" Label="_typeWithAnnotations 697097" />
<Node Id="10319:[15783..15865).1" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 697098" />
<Node Id="10319:[15783..15865).2" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 697099" />
<Node Id="10319:[15783..15865).3" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 697100" />
<Node Id="10319:[15783..15865).4" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 697101" />
<Node Id="10319:[15783..15865).6" Label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 697102" />
<Node Id="10286:[21504..21529).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 697103" />
<Node Id="10286:[21531..21544).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 697104" />
<Node Id="10286:[21546..21561).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 697105" />
<Node Id="10286:[21563..21583).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 697106" />
<Node Id="10286:[21462..21711).1" Label="param ReportDiagnosticsIfObsolete(this) 697107" />
<Node Id="10286:[21609..21700).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 697108" />
<Node Id="10286:[21609..21700).2" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 697109" />
<Node Id="10286:[21609..21700).3" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 697110" />
<Node Id="10286:[21609..21700).4" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 697111" />
<Node Id="10286:[21609..21699).1" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 697112" />
<Node Id="10286:[22044..22069).1" Label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 697113" />
<Node Id="10286:[22071..22084).1" Label="param ReportDiagnosticsIfObsolete(Symbol symbol) 697114" />
<Node Id="10286:[22086..22108).1" Label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 697115" />
<Node Id="10286:[22110..22130).1" Label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 697116" />
<Node Id="10286:[22002..22611).1" Label="param ReportDiagnosticsIfObsolete(this) 697117" />
<Node Id="10286:[22156..22600).1" Label="switch (symbol.Kind)
            {
                case SymbolKind.NamedType:
                case SymbolKind.Field:
                case SymbolKind.Method:
                case SymbolKind.Event:
                case SymbolKind.Property:
                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);
                    break;
            } 697118" />
<Node Id="10286:[21609..21700).5" Label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 697119" />
<Node Id="10319:[15904..15918).1" Label="return symbol; 697120" />
<Node Id="10319:[13962..14050).1" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 697121" />
<Node Id="10319:[13962..14050).2" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 697122" />
<Node Id="10319:[13962..14050).3" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 697123" />
<Node Id="10319:[13962..14050).4" Label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 697124" />
<Node Id="10319:[13969..14029).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 697125" />
<Node Id="10319:[51762..51815).1" Label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 697126" />
<Node Id="10319:[51817..51842).1" Label="param UnwrapAlias(DiagnosticBag diagnostics) 697127" />
<Node Id="10319:[51844..51861).1" Label="param UnwrapAlias(SyntaxNode syntax) 697128" />
<Node Id="10319:[51863..51909).1" Label="param UnwrapAlias(ConsList$TypeSymbol$ basesBeingResolved = null) 697129" />
<Node Id="10319:[51698..52285).1" Label="param UnwrapAlias(this) 697130" />
<Node Id="10319:[51939..51953).1" Label="symbol.IsAlias 697131" />
<Node Id="10287:[1680..1716).1" Label="=$ _symbol?.Kind == SymbolKind.Alias 697132" />
<Node Id="10287:[1683..1690).1" Label="_symbol 697133" />
<Node Id="10287:[1683..1716).1" Label="_symbol?.Kind == SymbolKind.Alias 697134" />
<Node Id="10319:[51935..52244).1" Label="if (symbol.IsAlias)
            {
                AliasSymbol discarded;
                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));
            } 697135" />
<Node Id="10319:[52260..52274).1" Label="return symbol; 697136" />
<Node Id="10319:[13969..14049).1" Label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 697137" />
<Node Id="10287:[1474..1497).2" Label="=$ _typeWithAnnotations 697138" />
<Node Id="10287:[1477..1497).2" Label="_typeWithAnnotations 697139" />
<Node Id="25002:[4395..4432).46" Label="var diagnostics = c.GetDiagnostics(); 697140" />
<Node Id="10327:[945..949).1" Label="null 697141" />
<Node Id="10327:[951..955).1" Label="null 697142" />
<Node Id="10327:[916..956).1" Label="new ConstantFieldsInProgress(null, null) 697143" />
<Node Id="10327:[1017..1043).1" Label="param ConstantFieldsInProgress(SourceFieldSymbol fieldOpt) 697144" />
<Node Id="10327:[1058..1116).1" Label="param ConstantFieldsInProgress(HashSet$SourceFieldSymbolWithSyntaxReference$ dependencies) 697145" />
<Node Id="10327:[969..1217).1" Label="param ConstantFieldsInProgress(this) 697146" />
<Node Id="10327:[749..758).1" Label="_fieldOpt 697147" />
<Node Id="10327:[832..845).1" Label="_dependencies 697148" />
<Node Id="10327:[1142..1151).1" Label="_fieldOpt 697149" />
<Node Id="10327:[1177..1190).1" Label="_dependencies 697150" />
<Node Id="10327:[908..956).1" Label="Empty = new ConstantFieldsInProgress(null, null) 697151" />
<Node Id="10327:[1273..1314).1" Label="get { return (object)_fieldOpt == null; } 697152" />
<Node Id="10327:[1279..1312).1" Label="return (object)_fieldOpt == null; 697153" />
<Node Id="10327:[1279..1312).2" Label="return (object)_fieldOpt == null; 697154" />
<Node Id="25002:[4446..4475).1" Label="diagnostics.Verify(expected); 697155" />
<Node Id="25002:[4446..4475).2" Label="diagnostics.Verify(expected); 697156" />
<Node Id="25002:[4446..4474).1" Label="diagnostics.Verify(expected) 697157" />
<Node Id="25002:[2296..2334).1" Label="param Verify(this ImmutableArray$Diagnostic$ actual) 697158" />
<Node Id="25002:[2336..2375).1" Label="param Verify(params DiagnosticDescription[] expected) 697159" />
<Node Id="25002:[2401..2451).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 697160" />
<Node Id="25002:[2401..2451).2" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 697161" />
<Node Id="25002:[2401..2450).1" Label="Verify((IEnumerable$Diagnostic$)actual, expected) 697162" />
<Node Id="25002:[1554..1589).1" Label="param Verify(this IEnumerable$Diagnostic$ actual) 697163" />
<Node Id="25002:[1591..1630).1" Label="param Verify(params DiagnosticDescription[] expected) 697164" />
<Node Id="25002:[1656..1703).1" Label="Verify(actual, expected, errorCodeOnly: false); 697165" />
<Node Id="25002:[1656..1703).2" Label="Verify(actual, expected, errorCodeOnly: false); 697166" />
<Node Id="25002:[1656..1703).3" Label="Verify(actual, expected, errorCodeOnly: false); 697167" />
<Node Id="25002:[1656..1702).1" Label="Verify(actual, expected, errorCodeOnly: false) 697168" />
<Node Id="25002:[2501..2531).1" Label="param Verify(IEnumerable$Diagnostic$ actual) 697169" />
<Node Id="25002:[2533..2565).1" Label="param Verify(DiagnosticDescription[] expected) 697170" />
<Node Id="25002:[2567..2585).1" Label="param Verify(bool errorCodeOnly) 697171" />
<Node Id="25002:[2611..2759).1" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 697172" />
<Node Id="25002:[2611..2759).2" Label="if (expected == null)
            {
                throw new ArgumentException('Must specify expected errors.', nameof(expected));
            } 697173" />
<Node Id="25002:[2775..2867).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(e =$ e.DefaultSeverity != null); 697174" />
<Node Id="25002:[2881..2977).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(e =$ e.EffectiveSeverity != null); 697175" />
<Node Id="25002:[2991..3166).1" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 697176" />
<Node Id="25002:[2991..3166).2" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 697177" />
<Node Id="25002:[2991..3166).4" Label="var unmatched = actual.Select(d =$ new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))
                                  .ToList(); 697178" />
<Node Id="25002:[3341..3730).1" Label="foreach (var d in expected)
            {
                int index = unmatched.IndexOf(d);
                if (index $ -1)
                {
                    unmatched.RemoveAt(index);
                }
                else
                {
                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
                }
            } 697179" />
<Node Id="25002:[3840..3992).1" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 697180" />
<Node Id="25002:[3840..3992).2" Label="if (unmatched.Count $ 0)
            {
                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));
            } 697181" />
<Node Id="25002:[4102..4181).1" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 697182" />
<Node Id="25003:[747..750).1" Label="{ } 697183" />
<Node Id="25003:[740..750).1" Label="None = { } 697184" />
<Node Id="25003:[814..818).1" Label="null 697185" />
<Node Id="25003:[808..818).1" Label="Any = null 697186" />
<Node Id="25002:[4102..4181).3" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 697187" />
<Node Id="25002:[4102..4181).4" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 697188" />
<Node Id="25002:[4126..4179).1" Label="DiagnosticDescription.GetAssertText(expected, actual) 697189" />
<Node Id="25003:[17577..17609).1" Label="param GetAssertText(DiagnosticDescription[] expected) 697190" />
<Node Id="25003:[17611..17641).1" Label="param GetAssertText(IEnumerable$Diagnostic$ actual) 697191" />
<Node Id="25003:[17667..17688).1" Label="const int CSharp = 1; 697192" />
<Node Id="25003:[17702..17728).1" Label="const int VisualBasic = 2; 697193" />
<Node Id="25003:[17742..17827).1" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 697194" />
<Node Id="25003:[17742..17827).2" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 697195" />
<Node Id="25003:[17757..17803).1" Label="actual.Any() && actual.First() is CSDiagnostic 697196" />
<Node Id="25003:[17742..17827).4" Label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 697197" />
<Node Id="25003:[17841..17904).1" Label="var includeDiagnosticMessagesAsComments = (language == CSharp); 697198" />
<Node Id="25003:[17918..17965).1" Label="int indentDepth = (language == CSharp) ? 4 : 1; 697199" />
<Node Id="25003:[17936..17956).1" Label="(language == CSharp) 697200" />
<Node Id="25003:[17979..18071).1" Label="var includeDefaultSeverity = expected.Any() && expected.All(d =$ d.DefaultSeverity != null); 697201" />
<Node Id="25003:[18085..18181).1" Label="var includeEffectiveSeverity = expected.Any() && expected.All(d =$ d.EffectiveSeverity != null); 697202" />
<Node Id="25003:[18197..18490).1" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 697203" />
<Node Id="25003:[18201..18226).1" Label="IsSortedOrEmpty(expected) 697204" />
<Node Id="25003:[21605..21640).1" Label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 697205" />
<Node Id="25003:[23096..23122).1" Label="new LinePositionComparer() 697206" />
<Node Id="25003:[22962..23812).1" Label="param LinePositionComparer(this) 697207" />
<Node Id="25003:[23085..23122).1" Label="Instance = new LinePositionComparer() 697208" />
<Node Id="25003:[21666..21711).1" Label="var comparer = LinePositionComparer.Instance; 697209" />
<Node Id="25003:[21725..21759).1" Label="DiagnosticDescription last = null; 697210" />
<Node Id="25003:[21773..22187).1" Label="foreach (var diagnostic in diagnostics)
            {
                if (diagnostic._startPosition == null)
                {
                    return false;
                }
                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) $ 0)
                {
                    return false;
                }
                last = diagnostic;
            } 697211" />
<Node Id="25003:[22201..22213).1" Label="return true; 697212" />
<Node Id="25003:[18197..18490).2" Label="if (IsSortedOrEmpty(expected))
            {
                // If this is a new test (empty expectations) or a test that's already sorted,
                // we sort the actual diagnostics to minimize diff noise as diagnostics change.
                actual = Sort(actual);
            } 697213" />
<Node Id="25003:[18453..18475).1" Label="actual = Sort(actual); 697214" />
<Node Id="25003:[18462..18474).1" Label="Sort(actual) 697215" />
<Node Id="25003:[21372..21407).1" Label="param Sort(IEnumerable$Diagnostic$ diagnostics) 697216" />
<Node Id="25003:[21433..21546).1" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 697217" />
<Node Id="25003:[21433..21546).2" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 697218" />
<Node Id="25003:[21433..21546).4" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 697219" />
<Node Id="25003:[21433..21546).5" Label="return diagnostics.OrderBy(d =$ d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 697220" />
<Node Id="25003:[18506..18543).1" Label="var assertText = new StringBuilder(); 697221" />
<Node Id="25003:[18557..18581).1" Label="assertText.AppendLine(); 697222" />
<Node Id="25003:[18658..18664).1" Label="int i; 697223" />
<Node Id="25003:[18678..18713).1" Label="assertText.AppendLine('Expected:'); 697224" />
<Node Id="25003:[18678..18713).3" Label="assertText.AppendLine('Expected:'); 697225" />
<Node Id="25003:[18727..18781).1" Label="var expectedText = ArrayBuilder$string$.GetInstance(); 697226" />
<Node Id="25003:[18795..18929).1" Label="foreach (var d in expected)
            {
                expectedText.Add(GetDiagnosticDescription(d, indentDepth));
            } 697227" />
<Node Id="25003:[18943..18992).1" Label="GetCommaSeparatedLines(assertText, expectedText); 697228" />
<Node Id="25003:[18943..18992).2" Label="GetCommaSeparatedLines(assertText, expectedText); 697229" />
<Node Id="25003:[18943..18991).1" Label="GetCommaSeparatedLines(assertText, expectedText) 697230" />
<Node Id="25003:[22599..22615).1" Label="param GetCommaSeparatedLines(StringBuilder sb) 697231" />
<Node Id="25003:[22617..22643).1" Label="param GetCommaSeparatedLines(ArrayBuilder$string$ lines) 697232" />
<Node Id="25003:[22669..22689).1" Label="int n = lines.Count; 697233" />
<Node Id="25003:[22703..22939).1" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 697234" />
<Node Id="25003:[22703..22939).3" Label="for (int i = 0; i $ n; i++)
            {
                sb.Append(lines[i]);
                if (i $ n - 1)
                {
                    sb.Append(',');
                }
                sb.AppendLine();
            } 697235" />
<Node Id="25003:[18943..18992).3" Label="GetCommaSeparatedLines(assertText, expectedText); 697236" />
<Node Id="25003:[19106..19139).1" Label="assertText.AppendLine('Actual:'); 697237" />
<Node Id="25003:[19106..19139).3" Label="assertText.AppendLine('Actual:'); 697238" />
<Node Id="25003:[19153..19205).1" Label="var actualText = ArrayBuilder$string$.GetInstance(); 697239" />
<Node Id="25003:[19219..19250).1" Label="var e = actual.GetEnumerator(); 697240" />
<Node Id="25003:[19264..20938).1" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 697241" />
<Node Id="25003:[19264..20938).3" Label="for (i = 0; e.MoveNext(); i++)
            {
                Diagnostic d = e.Current;
                string message = d.ToString();
                if (Regex.Match(message, @'{\d+}').Success)
                {
                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\n    ' + message);
                }

                if (i $ 0)
                {
                    assertText.AppendLine(',');
                }

                if (includeDiagnosticMessagesAsComments)
                {
                    Indent(assertText, indentDepth);
                    assertText.Append('// ');
                    assertText.AppendLine(d.ToString());
                    var l = d.Location;
                    if (l.IsInSource)
                    {
                        Indent(assertText, indentDepth);
                        assertText.Append('// ');
                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());
                    }
                }

                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);
                var diffDescription = description;
                var idx = Array.IndexOf(expected, description);
                if (idx != -1)
                {
                    diffDescription = expected[idx];
                }
                assertText.Append(GetDiagnosticDescription(description, indentDepth));
                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));
            } 697242" />
<Node Id="25003:[20952..21034).1" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 697243" />
<Node Id="25003:[20952..21034).2" Label="if (i $ 0)
            {
                assertText.AppendLine();
            } 697244" />
<Node Id="25003:[21050..21081).1" Label="assertText.AppendLine('Diff:'); 697245" />
<Node Id="25003:[21050..21081).3" Label="assertText.AppendLine('Diff:'); 697246" />
<Node Id="25003:[21095..21192).1" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 697247" />
<Node Id="25003:[21095..21192).2" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 697248" />
<Node Id="25012:[3121..3141).1" Label="new[] { '\r', '\n' } 697249" />
<Node Id="25012:[3129..3133).1" Label="'\r' 697250" />
<Node Id="25012:[3135..3139).1" Label="'\n' 697251" />
<Node Id="25012:[3121..3141).4" Label="new[] { '\r', '\n' } 697252" />
<Node Id="25012:[3121..3141).5" Label="new[] { '\r', '\n' } 697253" />
<Node Id="25012:[3102..3141).1" Label="s_lineSplitChars = new[] { '\r', '\n' } 697254" />
<Node Id="25003:[21095..21192).3" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 697255" />
<Node Id="25003:[21095..21192).4" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 697256" />
<Node Id="25003:[21113..21190).1" Label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 697257" />
<Node Id="25012:[2473..2496).1" Label="param DiffReport(IEnumerable$T$ expected) 697258" />
<Node Id="25012:[2498..2519).1" Label="param DiffReport(IEnumerable$T$ actual) 697259" />
<Node Id="25012:[2521..2537).1" Label="param DiffReport(string separator) 697260" />
<Node Id="25012:[2539..2575).1" Label="param DiffReport(IEqualityComparer$T$ comparer = null) 697261" />
<Node Id="25012:[2577..2608).1" Label="param DiffReport(Func$T, string$ toString = null) 697262" />
<Node Id="25012:[2634..2703).1" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 697263" />
<Node Id="25012:[2634..2703).2" Label="var lcs = (comparer != null) ? new LCS$T$(comparer) : LCS$T$.Default; 697264" />
<Node Id="25012:[2644..2662).1" Label="(comparer != null) 697265" />
<Node Id="25012:[1074..1101).1" Label="EqualityComparer$T$.Default 697266" />
<Node Id="25012:[1063..1102).1" Label="new LCS$T$(EqualityComparer$T$.Default) 697267" />
<Node Id="25012:[1194..1223).1" Label="param LCS(IEqualityComparer$T$ comparer) 697268" />
<Node Id="25012:[1183..1293).1" Label="param LCS(this) 697269" />
<Node Id="25012:[4230..4231).1" Label="1 697270" />
<Node Id="25012:[4217..4231).1" Label="DeleteCost = 1 697271" />
<Node Id="25012:[4277..4278).1" Label="1 697272" />
<Node Id="25012:[4264..4278).1" Label="InsertCost = 1 697273" />
<Node Id="25012:[4324..4325).1" Label="2 697274" />
<Node Id="25012:[4311..4325).1" Label="UpdateCost = 2 697275" />
<Node Id="25012:[3676..10647).1" Label="param LongestCommonSubsequence(this) 697276" />
<Node Id="25012:[1157..1166).1" Label="_comparer 697277" />
<Node Id="25012:[1257..1266).1" Label="_comparer 697278" />
<Node Id="25012:[1053..1102).1" Label="Default = new LCS$T$(EqualityComparer$T$.Default) 697279" />
<Node Id="25012:[2717..2783).1" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 697280" />
<Node Id="25012:[2717..2783).3" Label="toString = toString ?? new Func$T, string$(obj =$ obj.ToString()); 697281" />
<Node Id="25012:[2799..2869).1" Label="IList$T$ expectedList = expected as IList$T$ ?? new List$T$(expected); 697282" />
<Node Id="25012:[2883..2947).1" Label="IList$T$ actualList = actual as IList$T$ ?? new List$T$(actual); 697283" />
<Node Id="25012:[2963..3048).1" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697284" />
<Node Id="25012:[2963..3048).2" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697285" />
<Node Id="25012:[2963..3048).3" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697286" />
<Node Id="25012:[2963..3048).4" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697287" />
<Node Id="25012:[2993..3046).1" Label="lcs.CalculateDiff(expectedList, actualList, toString) 697288" />
<Node Id="25012:[1574..1592).1" Label="param CalculateDiff(IList$T$ sequenceA) 697289" />
<Node Id="25012:[1594..1612).1" Label="param CalculateDiff(IList$T$ sequenceB) 697290" />
<Node Id="25012:[1614..1638).1" Label="param CalculateDiff(Func$T, string$ toString) 697291" />
<Node Id="25012:[1533..2415).1" Label="param CalculateDiff(this) 697292" />
<Node Id="25012:[1672..2400).1" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 697293" />
<Node Id="25012:[1672..2400).2" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 697294" />
<Node Id="25012:[1672..2400).3" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 697295" />
<Node Id="25012:[1672..2400).4" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 697296" />
<Node Id="25012:[1693..1757).1" Label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 697297" />
<Node Id="25012:[5394..5413).1" Label="param GetEdits(TSequence sequenceA) 697298" />
<Node Id="25012:[5415..5426).1" Label="param GetEdits(int lengthA) 697299" />
<Node Id="25012:[5428..5447).1" Label="param GetEdits(TSequence sequenceB) 697300" />
<Node Id="25012:[5449..5460).1" Label="param GetEdits(int lengthB) 697301" />
<Node Id="25012:[5357..6686).1" Label="param GetEdits(this) 697302" />
<Node Id="25012:[5494..5563).1" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 697303" />
<Node Id="25012:[5494..5563).2" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 697304" />
<Node Id="25012:[5494..5563).3" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 697305" />
<Node Id="25012:[5494..5563).4" Label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 697306" />
<Node Id="25012:[5505..5562).1" Label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 697307" />
<Node Id="25012:[9402..9421).1" Label="param ComputeCostMatrix(TSequence sequenceA) 697308" />
<Node Id="25012:[9423..9434).1" Label="param ComputeCostMatrix(int lengthA) 697309" />
<Node Id="25012:[9436..9455).1" Label="param ComputeCostMatrix(TSequence sequenceB) 697310" />
<Node Id="25012:[9457..9468).1" Label="param ComputeCostMatrix(int lengthB) 697311" />
<Node Id="25012:[9369..10636).1" Label="param ComputeCostMatrix(this) 697312" />
<Node Id="25012:[9502..9523).1" Label="var la = lengthA + 1; 697313" />
<Node Id="25012:[9502..9523).2" Label="var la = lengthA + 1; 697314" />
<Node Id="25012:[9541..9562).1" Label="var lb = lengthB + 1; 697315" />
<Node Id="25012:[9541..9562).2" Label="var lb = lengthB + 1; 697316" />
<Node Id="25012:[9740..9764).1" Label="var d = new int[la, lb]; 697317" />
<Node Id="25012:[9784..9796).1" Label="d[0, 0] = 0; 697318" />
<Node Id="25012:[9784..9791).1" Label="d[0, 0] 697319" />
<Node Id="25012:[9814..9943).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 697320" />
<Node Id="25012:[9814..9943).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    d[i, 0] = d[i - 1, 0] + DeleteCost;
                } 697321" />
<Node Id="25012:[9963..10092).1" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 697322" />
<Node Id="25012:[9963..10092).3" Label="for (int j = 1; j $= lengthB; j++)
                {
                    d[0, j] = d[0, j - 1] + InsertCost;
                } 697323" />
<Node Id="25012:[10112..10592).1" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 697324" />
<Node Id="25012:[10112..10592).3" Label="for (int i = 1; i $= lengthA; i++)
                {
                    for (int j = 1; j $= lengthB; j++)
                    {
                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);
                        int m2 = d[i - 1, j] + DeleteCost;
                        int m3 = d[i, j - 1] + InsertCost;
                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);
                    }
                } 697325" />
<Node Id="25012:[10612..10621).1" Label="return d; 697326" />
<Node Id="25012:[5581..5597).1" Label="int i = lengthA; 697327" />
<Node Id="25012:[5615..5631).1" Label="int j = lengthB; 697328" />
<Node Id="25012:[5651..6341).1" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 697329" />
<Node Id="25012:[5651..6341).2" Label="while (i != 0 && j != 0)
                {
                    if (d[i, j] == d[i - 1, j] + DeleteCost)
                    {
                        i--;
                        yield return new Edit(EditKind.Delete, i, -1);
                    }
                    else if (d[i, j] == d[i, j - 1] + InsertCost)
                    {
                        j--;
                        yield return new Edit(EditKind.Insert, -1, j);
                    }
                    else
                    {
                        i--;
                        j--;
                        yield return new Edit(EditKind.Update, i, j);
                    }
                } 697330" />
<Node Id="25012:[6361..6506).1" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 697331" />
<Node Id="25012:[6361..6506).2" Label="while (i $ 0)
                {
                    i--;
                    yield return new Edit(EditKind.Delete, i, -1);
                } 697332" />
<Node Id="25012:[6526..6671).1" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 697333" />
<Node Id="25012:[6526..6671).2" Label="while (j $ 0)
                {
                    j--;
                    yield return new Edit(EditKind.Insert, -1, j);
                } 697334" />
<Node Id="25012:[5357..6686).2" Label="param GetEdits(this) 697335" />
<Node Id="25012:[1672..2400).5" Label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())
                {
                    switch (edit.Kind)
                    {
                        case EditKind.Delete:
                            yield return '--$ ' + toString(sequenceA[edit.IndexA]);
                            break;

                        case EditKind.Insert:
                            yield return '++$ ' + toString(sequenceB[edit.IndexB]);
                            break;

                        case EditKind.Update:
                            yield return '    ' + toString(sequenceB[edit.IndexB]);
                            break;
                    }
                } 697336" />
<Node Id="25012:[1533..2415).2" Label="param CalculateDiff(this) 697337" />
<Node Id="25012:[2963..3048).5" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697338" />
<Node Id="25012:[2963..3048).7" Label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 697339" />
<Node Id="25003:[21095..21192).10" Label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 697340" />
<Node Id="25003:[21208..21226).1" Label="actualText.Free(); 697341" />
<Node Id="25003:[21240..21260).1" Label="expectedText.Free(); 697342" />
<Node Id="25003:[21276..21305).1" Label="return assertText.ToString(); 697343" />
<Node Id="25002:[4102..4181).5" Label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 697344" />
<Node Id="25002:[2401..2451).3" Label="Verify((IEnumerable$Diagnostic$)actual, expected); 697345" />
<Node Id="25002:[4446..4475).3" Label="diagnostics.Verify(expected); 697346" />
<Node Id="25002:[4489..4523).1" Label="VerifyAssemblyIds(c, diagnostics); 697347" />
<Node Id="25002:[4489..4523).2" Label="VerifyAssemblyIds(c, diagnostics); 697348" />
<Node Id="25002:[4489..4522).1" Label="VerifyAssemblyIds(c, diagnostics) 697349" />
<Node Id="25002:[4637..4651).1" Label="param VerifyAssemblyIds(TCompilation c) 697350" />
<Node Id="25002:[4653..4691).1" Label="param VerifyAssemblyIds(ImmutableArray$Diagnostic$ diagnostics) 697351" />
<Node Id="25002:[4750..5836).1" Label="foreach (var diagnostic in diagnostics)
            {
                // If this is a diagnostic about a missing assembly, make sure that we can get back
                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about
                // a missing assembly, make sure we get no results back.
                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.False(assemblyIds.IsEmpty);

                    var diagnosticMessage = diagnostic.GetMessage();
                    foreach (var id in assemblyIds)
                    {
                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);
                    }
                }
                else
                {
                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);
                    CustomAssert.True(assemblyIds.IsEmpty);
                }
            } 697352" />
<Node Id="25002:[4489..4523).3" Label="VerifyAssemblyIds(c, diagnostics); 697353" />
<Node Id="25002:[4539..4548).1" Label="return c; 697354" />
</Nodes>
<Links>
<Link Source="25014:[390..448).1" Target="EXTERNAL" />
<Link Source="25014:[390..448).1" Target="25014:[387..448).1" />
<Link Source="28001:[588..156578).1" Target="25014:[387..448).1" />
<Link Source="21002:[772..793).1" Target="21002:[790..793).1" />
<Link Source="21002:[825..848).1" Target="21002:[845..848).1" />
<Link Source="21002:[3098..25375).1" Target="21002:[3243..25375).1" />
<Link Source="21002:[678..25421).1" Target="28001:[588..156578).1" />
<Link Source="21003:[1308..2835).1" Target="21003:[1338..2835).1" />
<Link Source="21003:[2871..3440).1" Target="21003:[2908..3440).1" />
<Link Source="21003:[3476..3915).1" Target="21003:[3516..3915).1" />
<Link Source="21003:[4192..4448).1" Target="21003:[4223..4448).1" />
<Link Source="21003:[4484..4746).1" Target="21003:[4518..4746).1" />
<Link Source="21003:[4782..5071).1" Target="21003:[4813..5071).1" />
<Link Source="21003:[5107..5397).1" Target="21003:[5142..5397).1" />
<Link Source="21003:[5433..5718).1" Target="21003:[5462..5718).1" />
<Link Source="21003:[5754..6038).1" Target="21003:[5787..6038).1" />
<Link Source="21003:[6074..6460).1" Target="21003:[6109..6460).1" />
<Link Source="21003:[6496..6920).1" Target="21003:[6535..6920).1" />
<Link Source="21003:[6956..7250).1" Target="21003:[6993..7250).1" />
<Link Source="21003:[7286..7557).1" Target="21003:[7321..7557).1" />
<Link Source="21003:[7593..7980).1" Target="21003:[7631..7980).1" />
<Link Source="21003:[8016..8155).1" Target="21003:[8047..8155).1" />
<Link Source="21003:[8191..8359).1" Target="21003:[8220..8359).1" />
<Link Source="21003:[8395..20279).1" Target="21003:[8415..20279).1" />
<Link Source="21003:[20315..20617).1" Target="21003:[20353..20617).1" />
<Link Source="21003:[20653..21473).1" Target="21003:[20689..21473).1" />
<Link Source="25004:[2227..2317).1" Target="EXTERNAL" />
<Link Source="25004:[2332..2368).1" Target="EXTERNAL" />
<Link Source="25004:[2183..2369).1" Target="25004:[2227..2317).1" />
<Link Source="25004:[2183..2369).1" Target="25004:[2332..2368).1" />
<Link Source="25004:[2183..2369).1" Target="EXTERNAL" />
<Link Source="25004:[2155..2369).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2602..2696).1" Target="EXTERNAL" />
<Link Source="25004:[2711..2747).1" Target="EXTERNAL" />
<Link Source="25004:[2558..2748).1" Target="25004:[2602..2696).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2711..2747).1" />
<Link Source="25004:[2558..2748).1" Target="25004:[2183..2369).1" />
<Link Source="25004:[2531..2748).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[2914..2947).1" Target="EXTERNAL" />
<Link Source="25004:[3094..3171).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[3094..3171).1" />
<Link Source="25004:[3077..3172).1" Target="25004:[2914..2947).1" />
<Link Source="25004:[2894..3172).1" Target="25004:[3077..3172).1" />
<Link Source="25004:[5182..5218).1" Target="EXTERNAL" />
<Link Source="25004:[3446..5219).1" Target="25004:[3490..5167).1" />
<Link Source="25004:[3446..5219).1" Target="25004:[5182..5218).1" />
<Link Source="25004:[3432..5219).1" Target="25004:[3446..5219).1" />
<Link Source="25004:[5576..5645).1" Target="EXTERNAL" />
<Link Source="25004:[5660..5696).1" Target="EXTERNAL" />
<Link Source="25004:[5532..5697).1" Target="25004:[5576..5645).1" />
<Link Source="25004:[5532..5697).1" Target="25004:[5660..5696).1" />
<Link Source="25004:[5532..5697).1" Target="EXTERNAL" />
<Link Source="25004:[5508..5697).1" Target="25004:[5532..5697).1" />
<Link Source="25004:[6321..6439).1" Target="EXTERNAL" />
<Link Source="25004:[6458..6494).1" Target="EXTERNAL" />
<Link Source="25004:[6275..6495).1" Target="25004:[6321..6439).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[6458..6494).1" />
<Link Source="25004:[6275..6495).1" Target="25004:[2558..2748).1" />
<Link Source="25004:[6244..6495).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6714..6838).1" Target="EXTERNAL" />
<Link Source="25004:[6853..6889).1" Target="EXTERNAL" />
<Link Source="25004:[6672..6890).1" Target="25004:[6714..6838).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6853..6889).1" />
<Link Source="25004:[6672..6890).1" Target="25004:[6275..6495).1" />
<Link Source="25004:[6637..6890).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7130..7249).1" Target="EXTERNAL" />
<Link Source="25004:[7264..7300).1" Target="EXTERNAL" />
<Link Source="25004:[7088..7301).1" Target="25004:[7130..7249).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[7264..7300).1" />
<Link Source="25004:[7088..7301).1" Target="25004:[6672..6890).1" />
<Link Source="25004:[7066..7301).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[7532..7667).1" Target="EXTERNAL" />
<Link Source="25004:[7682..7718).1" Target="EXTERNAL" />
<Link Source="25004:[7490..7719).1" Target="25004:[7532..7667).1" />
<Link Source="25004:[7490..7719).1" Target="25004:[7682..7718).1" />
<Link Source="25004:[7490..7719).1" Target="EXTERNAL" />
<Link Source="25004:[7464..7719).1" Target="25004:[7490..7719).1" />
<Link Source="25004:[7940..8064).1" Target="EXTERNAL" />
<Link Source="25004:[8079..8115).1" Target="EXTERNAL" />
<Link Source="25004:[7898..8116).1" Target="25004:[7940..8064).1" />
<Link Source="25004:[7898..8116).1" Target="25004:[8079..8115).1" />
<Link Source="25004:[7898..8116).1" Target="EXTERNAL" />
<Link Source="25004:[7877..8116).1" Target="25004:[7898..8116).1" />
<Link Source="25004:[8324..8442).1" Target="EXTERNAL" />
<Link Source="25004:[8457..8493).1" Target="EXTERNAL" />
<Link Source="25004:[8282..8494).1" Target="25004:[8324..8442).1" />
<Link Source="25004:[8282..8494).1" Target="25004:[8457..8493).1" />
<Link Source="25004:[8282..8494).1" Target="EXTERNAL" />
<Link Source="25004:[8264..8494).1" Target="25004:[8282..8494).1" />
<Link Source="25004:[8694..8807).1" Target="EXTERNAL" />
<Link Source="25004:[8822..8858).1" Target="EXTERNAL" />
<Link Source="25004:[8652..8859).1" Target="25004:[8694..8807).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[8822..8858).1" />
<Link Source="25004:[8652..8859).1" Target="25004:[7088..7301).1" />
<Link Source="25004:[8636..8859).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[9063..9214).1" Target="EXTERNAL" />
<Link Source="25004:[9229..9265).1" Target="EXTERNAL" />
<Link Source="25004:[9021..9266).1" Target="25004:[9063..9214).1" />
<Link Source="25004:[9021..9266).1" Target="25004:[9229..9265).1" />
<Link Source="25004:[9021..9266).1" Target="EXTERNAL" />
<Link Source="25004:[8997..9266).1" Target="25004:[9021..9266).1" />
<Link Source="25004:[10404..10440).1" Target="EXTERNAL" />
<Link Source="25004:[9436..10441).1" Target="25004:[9478..10389).1" />
<Link Source="25004:[9436..10441).1" Target="25004:[10404..10440).1" />
<Link Source="25004:[9420..10441).1" Target="25004:[9436..10441).1" />
<Link Source="25004:[10811..10967).1" Target="EXTERNAL" />
<Link Source="25004:[10982..11018).1" Target="EXTERNAL" />
<Link Source="25004:[10769..11019).1" Target="25004:[10811..10967).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[10982..11018).1" />
<Link Source="25004:[10769..11019).1" Target="25004:[8652..8859).1" />
<Link Source="25004:[10749..11019).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[11415..11589).1" Target="EXTERNAL" />
<Link Source="25004:[11604..11640).1" Target="EXTERNAL" />
<Link Source="25004:[11373..11641).1" Target="25004:[11415..11589).1" />
<Link Source="25004:[11373..11641).1" Target="25004:[11604..11640).1" />
<Link Source="25004:[11373..11641).1" Target="EXTERNAL" />
<Link Source="25004:[11345..11641).1" Target="25004:[11373..11641).1" />
<Link Source="25004:[12432..12560).1" Target="EXTERNAL" />
<Link Source="25004:[12575..12611).1" Target="EXTERNAL" />
<Link Source="25004:[12390..12612).1" Target="25004:[12432..12560).1" />
<Link Source="25004:[12390..12612).1" Target="25004:[12575..12611).1" />
<Link Source="25004:[12390..12612).1" Target="EXTERNAL" />
<Link Source="25004:[12369..12612).1" Target="25004:[12390..12612).1" />
<Link Source="25004:[12815..12944).1" Target="EXTERNAL" />
<Link Source="25004:[12959..12995).1" Target="EXTERNAL" />
<Link Source="25004:[12773..12996).1" Target="25004:[12815..12944).1" />
<Link Source="25004:[12773..12996).1" Target="25004:[12959..12995).1" />
<Link Source="25004:[12773..12996).1" Target="EXTERNAL" />
<Link Source="25004:[12760..12996).1" Target="25004:[12773..12996).1" />
<Link Source="25004:[13204..13343).1" Target="EXTERNAL" />
<Link Source="25004:[13358..13394).1" Target="EXTERNAL" />
<Link Source="25004:[13162..13395).1" Target="25004:[13204..13343).1" />
<Link Source="25004:[13162..13395).1" Target="25004:[13358..13394).1" />
<Link Source="25004:[13162..13395).1" Target="EXTERNAL" />
<Link Source="25004:[13138..13395).1" Target="25004:[13162..13395).1" />
<Link Source="25004:[13621..13796).1" Target="EXTERNAL" />
<Link Source="25004:[13811..13847).1" Target="EXTERNAL" />
<Link Source="25004:[13579..13848).1" Target="25004:[13621..13796).1" />
<Link Source="25004:[13579..13848).1" Target="25004:[13811..13847).1" />
<Link Source="25004:[13579..13848).1" Target="EXTERNAL" />
<Link Source="25004:[13551..13848).1" Target="25004:[13579..13848).1" />
<Link Source="25004:[14066..14175).1" Target="EXTERNAL" />
<Link Source="25004:[14190..14226).1" Target="EXTERNAL" />
<Link Source="25004:[14024..14227).1" Target="25004:[14066..14175).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[14190..14226).1" />
<Link Source="25004:[14024..14227).1" Target="25004:[10769..11019).1" />
<Link Source="25004:[14010..14227).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14421..14531).1" Target="EXTERNAL" />
<Link Source="25004:[14546..14582).1" Target="EXTERNAL" />
<Link Source="25004:[14379..14583).1" Target="25004:[14421..14531).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14546..14582).1" />
<Link Source="25004:[14379..14583).1" Target="25004:[14024..14227).1" />
<Link Source="25004:[14361..14583).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14798..14913).1" Target="EXTERNAL" />
<Link Source="25004:[14928..14964).1" Target="EXTERNAL" />
<Link Source="25004:[14756..14965).1" Target="25004:[14798..14913).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14928..14964).1" />
<Link Source="25004:[14756..14965).1" Target="25004:[14379..14583).1" />
<Link Source="25004:[14725..14965).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15193..15301).1" Target="EXTERNAL" />
<Link Source="25004:[15316..15352).1" Target="EXTERNAL" />
<Link Source="25004:[15151..15353).1" Target="25004:[15193..15301).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[15316..15352).1" />
<Link Source="25004:[15151..15353).1" Target="25004:[14756..14965).1" />
<Link Source="25004:[15133..15353).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[15554..15670).1" Target="EXTERNAL" />
<Link Source="25004:[15685..15721).1" Target="EXTERNAL" />
<Link Source="25004:[15512..15722).1" Target="25004:[15554..15670).1" />
<Link Source="25004:[15512..15722).1" Target="25004:[15685..15721).1" />
<Link Source="25004:[15512..15722).1" Target="EXTERNAL" />
<Link Source="25004:[15495..15722).1" Target="25004:[15512..15722).1" />
<Link Source="25004:[15925..16050).1" Target="EXTERNAL" />
<Link Source="25004:[16065..16101).1" Target="EXTERNAL" />
<Link Source="25004:[15883..16102).1" Target="25004:[15925..16050).1" />
<Link Source="25004:[15883..16102).1" Target="25004:[16065..16101).1" />
<Link Source="25004:[15883..16102).1" Target="EXTERNAL" />
<Link Source="25004:[15862..16102).1" Target="25004:[15883..16102).1" />
<Link Source="25004:[16314..16416).1" Target="EXTERNAL" />
<Link Source="25004:[16431..16467).1" Target="EXTERNAL" />
<Link Source="25004:[16272..16468).1" Target="25004:[16314..16416).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[16431..16467).1" />
<Link Source="25004:[16272..16468).1" Target="25004:[15151..15353).1" />
<Link Source="25004:[16250..16468).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[16687..16800).1" Target="EXTERNAL" />
<Link Source="25004:[16815..16851).1" Target="EXTERNAL" />
<Link Source="25004:[16645..16852).1" Target="25004:[16687..16800).1" />
<Link Source="25004:[16645..16852).1" Target="25004:[16815..16851).1" />
<Link Source="25004:[16645..16852).1" Target="EXTERNAL" />
<Link Source="25004:[16618..16852).1" Target="25004:[16645..16852).1" />
<Link Source="25004:[17083..17200).1" Target="EXTERNAL" />
<Link Source="25004:[17215..17251).1" Target="EXTERNAL" />
<Link Source="25004:[17041..17252).1" Target="25004:[17083..17200).1" />
<Link Source="25004:[17041..17252).1" Target="25004:[17215..17251).1" />
<Link Source="25004:[17041..17252).1" Target="EXTERNAL" />
<Link Source="25004:[17012..17252).1" Target="25004:[17041..17252).1" />
<Link Source="25004:[17497..17625).1" Target="EXTERNAL" />
<Link Source="25004:[17640..17676).1" Target="EXTERNAL" />
<Link Source="25004:[17455..17677).1" Target="25004:[17497..17625).1" />
<Link Source="25004:[17455..17677).1" Target="25004:[17640..17676).1" />
<Link Source="25004:[17455..17677).1" Target="EXTERNAL" />
<Link Source="25004:[17421..17677).1" Target="25004:[17455..17677).1" />
<Link Source="25004:[17911..18059).1" Target="EXTERNAL" />
<Link Source="25004:[18074..18110).1" Target="EXTERNAL" />
<Link Source="25004:[17869..18111).1" Target="25004:[17911..18059).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[18074..18110).1" />
<Link Source="25004:[17869..18111).1" Target="25004:[16272..16468).1" />
<Link Source="25004:[17850..18111).1" Target="25004:[17869..18111).1" />
<Link Source="25004:[18321..18481).1" Target="EXTERNAL" />
<Link Source="25004:[18496..18532).1" Target="EXTERNAL" />
<Link Source="25004:[18279..18533).1" Target="25004:[18321..18481).1" />
<Link Source="25004:[18279..18533).1" Target="25004:[18496..18532).1" />
<Link Source="25004:[18279..18533).1" Target="EXTERNAL" />
<Link Source="25004:[18255..18533).1" Target="25004:[18279..18533).1" />
<Link Source="25004:[18754..18880).1" Target="EXTERNAL" />
<Link Source="25004:[18895..18931).1" Target="EXTERNAL" />
<Link Source="25004:[18712..18932).1" Target="25004:[18754..18880).1" />
<Link Source="25004:[18712..18932).1" Target="25004:[18895..18931).1" />
<Link Source="25004:[18712..18932).1" Target="EXTERNAL" />
<Link Source="25004:[18687..18932).1" Target="25004:[18712..18932).1" />
<Link Source="25004:[19120..19147).1" Target="25004:[19130..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19120..19147).1" />
<Link Source="25004:[19094..19148).5" Target="25004:[19094..19148).1" />
<Link Source="25004:[19081..19148).1" Target="25004:[19094..19148).5" />
<Link Source="25004:[10673..10688).1" Target="EXTERNAL" />
<Link Source="25004:[10673..10688).1" Target="21003:[51329..51357).1" />
<Link Source="21003:[51307..51358).1" Target="25004:[10673..10688).1" />
<Link Source="21003:[51307..51358).1" Target="EXTERNAL" />
<Link Source="21003:[51292..51358).1" Target="21003:[51307..51358).1" />
<Link Source="21003:[56524..56550).1" Target="21003:[56538..56550).1" />
<Link Source="21003:[56584..56609).1" Target="21003:[56596..56609).1" />
<Link Source="21003:[92381..99056).1" Target="21003:[92394..99056).1" />
<Link Source="21003:[101743..102290).1" Target="21003:[101764..102290).1" />
<Link Source="21003:[1215..102298).1" Target="21002:[678..25421).1" />
<Link Source="25015:[917..26825).1" Target="21003:[1215..102298).1" />
<Link Source="25004:[926..968).1" Target="25015:[917..26825).1" />
<Link Source="25004:[908..913).1" Target="25004:[926..968).1" />
<Link Source="25004:[908..913).1" Target="25015:[917..26825).1" />
<Link Source="25014:[387..448).372" Target="25014:[387..448).1" />
<Link Source="25014:[387..448).372" Target="25014:[390..448).1" />
<Link Source="25014:[387..448).372" Target="25004:[908..913).1" />
<Link Source="28001:[73650..74048).1" Target="25014:[387..448).1" />
<Link Source="28001:[73830..73977).1" Target="25014:[387..448).1" />
<Link Source="28001:[73991..74037).1" Target="28001:[73830..73977).1" />
<Link Source="28001:[73991..74037).1" Target="25014:[387..448).1" />
<Link Source="28001:[74009..74015).1" Target="25014:[387..448).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[73991..74037).1" />
<Link Source="21004:[2251..2264).1" Target="28001:[74009..74015).1" />
<Link Source="21004:[2290..2296).1" Target="21004:[2251..2264).1" />
<Link Source="21004:[2290..2296).1" Target="28001:[74009..74015).1" />
<Link Source="21004:[2269..2297).1" Target="28001:[74009..74015).1" />
<Link Source="21004:[839..851).1" Target="21004:[2290..2296).1" />
<Link Source="21004:[839..851).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[814..902).1" Target="21004:[2269..2297).1" />
<Link Source="21004:[877..882).1" Target="21004:[839..851).1" />
<Link Source="21004:[877..882).1" Target="21004:[814..902).1" />
<Link Source="21004:[877..882).1" Target="21004:[2269..2297).1" />
<Link Source="28001:[73991..74037).2" Target="21004:[2269..2297).1" />
<Link Source="28001:[73991..74037).2" Target="25014:[387..448).1" />
<Link Source="28001:[73991..74037).4" Target="25014:[387..448).1" />
<Link Source="28001:[73991..74016).1" Target="25014:[387..448).1" />
<Link Source="21003:[44736..44759).1" Target="28001:[73991..74037).2" />
<Link Source="21003:[44736..44759).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[44774..44822).1" Target="28001:[73991..74037).4" />
<Link Source="21003:[44774..44822).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[44837..44876).1" Target="28001:[73991..74037).4" />
<Link Source="21003:[44837..44876).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[44891..44929).1" Target="28001:[73991..74037).4" />
<Link Source="21003:[44891..44929).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[44944..45002).1" Target="28001:[73991..74037).4" />
<Link Source="21003:[44944..45002).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45017..45041).1" Target="28001:[73991..74037).4" />
<Link Source="21003:[45017..45041).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45056..45082).1" Target="28001:[73991..74037).4" />
<Link Source="21003:[45056..45082).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45097..45128).1" Target="28001:[73991..74037).4" />
<Link Source="21003:[45097..45128).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45156..45162).1" Target="21003:[44736..44759).1" />
<Link Source="21003:[45156..45162).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45198..45213).1" Target="21003:[44944..45002).1" />
<Link Source="21003:[45198..45213).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45215..45225).1" Target="21003:[44774..44822).1" />
<Link Source="21003:[45215..45225).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45164..45226).1" Target="28001:[73991..74016).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45198..45213).1" />
<Link Source="25005:[9600..9618).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45215..45225).1" />
<Link Source="25005:[9620..9671).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9697..9732).1" Target="25005:[9600..9618).1" />
<Link Source="25005:[9697..9732).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9714..9731).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9697..9732).1" />
<Link Source="25005:[7569..7600).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[7569..7600).1" />
<Link Source="25005:[7605..9525).1" Target="25005:[9714..9731).1" />
<Link Source="25005:[8889..8907).1" Target="25005:[7605..9525).1" />
<Link Source="25005:[6208..6241).1" Target="EXTERNAL" />
<Link Source="25005:[6208..6241).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[6270..6298).1" Target="25005:[6208..6241).1" />
<Link Source="25005:[4543..4693).1" Target="25005:[6270..6298).1" />
<Link Source="25005:[4648..4670).1" Target="25005:[6270..6298).1" />
<Link Source="25004:[12011..12051).1" Target="EXTERNAL" />
<Link Source="25004:[12011..12051).1" Target="25005:[4648..4670).1" />
<Link Source="25005:[4543..4693).7" Target="25004:[12011..12051).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[4543..4693).1" />
<Link Source="25005:[4543..4693).7" Target="25005:[6270..6298).1" />
<Link Source="25005:[6208..6298).1" Target="25005:[4543..4693).7" />
<Link Source="25005:[6208..6298).1" Target="25005:[8889..8907).1" />
<Link Source="25005:[9746..9845).1" Target="21003:[45164..45226).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9620..9671).1" />
<Link Source="25005:[9746..9845).2" Target="25005:[9746..9845).1" />
<Link Source="25005:[9746..9845).2" Target="21003:[45164..45226).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[6208..6298).1" />
<Link Source="25005:[9812..9830).1" Target="25005:[9746..9845).2" />
<Link Source="21003:[45228..45235).1" Target="21003:[44837..44876).1" />
<Link Source="21003:[45228..45235).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45237..45249).1" Target="21003:[44891..44929).1" />
<Link Source="21003:[45237..45249).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45251..45263).1" Target="21003:[45017..45041).1" />
<Link Source="21003:[45251..45263).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45265..45279).1" Target="21003:[45056..45082).1" />
<Link Source="21003:[45265..45279).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45281..45299).1" Target="21003:[45097..45128).1" />
<Link Source="21003:[45281..45299).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45133..45300).1" Target="28001:[73991..74016).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45156..45162).1" />
<Link Source="21003:[45382..45405).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45420..45468).1" Target="25005:[9812..9830).1" />
<Link Source="21003:[45420..45468).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45228..45235).1" />
<Link Source="21003:[45483..45522).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45237..45249).1" />
<Link Source="21003:[45537..45575).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45251..45263).1" />
<Link Source="21003:[45590..45614).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45265..45279).1" />
<Link Source="21003:[45629..45655).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45281..45299).1" />
<Link Source="21003:[45670..45701).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45382..45405).1" />
<Link Source="21003:[45728..45734).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45420..45468).1" />
<Link Source="21003:[45736..45746).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45483..45522).1" />
<Link Source="21003:[45748..45755).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45537..45575).1" />
<Link Source="21003:[45757..45769).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45590..45614).1" />
<Link Source="21003:[45771..45783).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45629..45655).1" />
<Link Source="21003:[45785..45799).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45670..45701).1" />
<Link Source="21003:[45801..45819).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45842..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45842..45846).1" />
<Link Source="21003:[45821..45846).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45706..45847).1" Target="21003:[45133..45300).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45728..45734).1" />
<Link Source="21003:[45929..45952).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45736..45746).1" />
<Link Source="21003:[45967..46008).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45748..45755).1" />
<Link Source="21003:[46023..46055).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45757..45769).1" />
<Link Source="21003:[46070..46101).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45771..45783).1" />
<Link Source="21003:[46116..46135).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45785..45799).1" />
<Link Source="21003:[46150..46171).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45801..45819).1" />
<Link Source="21003:[46186..46209).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45821..45846).1" />
<Link Source="21003:[46224..46254).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[46070..46101).1" />
<Link Source="21003:[46280..46350).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[46150..46171).1" />
<Link Source="21003:[46280..46350).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46298..46349).1" Target="21003:[45706..45847).1" />
<Link Source="21004:[949..980).1" Target="21003:[46280..46350).1" />
<Link Source="21004:[949..980).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[982..1008).1" Target="21003:[46280..46350).2" />
<Link Source="21004:[982..1008).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[914..2190).1" Target="21003:[45929..45952).1" />
<Link Source="21004:[914..2190).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[914..2190).1" />
<Link Source="21004:[1034..2179).1" Target="21004:[877..882).1" />
<Link Source="21004:[1034..2179).1" Target="21003:[46298..46349).1" />
<Link Source="21004:[1122..1208).1" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[982..1008).1" />
<Link Source="21004:[1122..1208).3" Target="21004:[1034..2179).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[949..980).1" />
<Link Source="21004:[1122..1208).4" Target="21004:[1034..2179).1" />
<Link Source="21004:[1137..1205).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34078..34089).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34091..34111).1" Target="21004:[1122..1208).3" />
<Link Source="21003:[34091..34111).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34113..34146).1" Target="21004:[1122..1208).4" />
<Link Source="21003:[34113..34146).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[34148..34172).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34113..34146).1" />
<Link Source="21003:[34198..34304).2" Target="21003:[34198..34304).1" />
<Link Source="21003:[34198..34304).2" Target="21004:[1137..1205).1" />
<Link Source="21010:[590..618).1" Target="EXTERNAL" />
<Link Source="21010:[620..662).1" Target="EXTERNAL" />
<Link Source="21010:[567..663).5" Target="21010:[590..618).1" />
<Link Source="21010:[567..663).5" Target="21010:[620..662).1" />
<Link Source="21010:[567..663).5" Target="21010:[567..663).1" />
<Link Source="21010:[557..663).1" Target="21010:[567..663).5" />
<Link Source="21010:[742..763).1" Target="EXTERNAL" />
<Link Source="21010:[725..764).1" Target="21010:[557..663).1" />
<Link Source="21010:[725..764).1" Target="21010:[567..663).5" />
<Link Source="21010:[725..764).1" Target="21010:[742..763).1" />
<Link Source="21010:[716..764).1" Target="21010:[725..764).1" />
<Link Source="21010:[856..879).1" Target="EXTERNAL" />
<Link Source="21010:[828..880).1" Target="21010:[557..663).1" />
<Link Source="21010:[828..880).1" Target="21010:[567..663).5" />
<Link Source="21010:[828..880).1" Target="21010:[856..879).1" />
<Link Source="21010:[817..880).1" Target="21010:[828..880).1" />
<Link Source="21010:[972..995).1" Target="EXTERNAL" />
<Link Source="21010:[944..996).1" Target="21010:[557..663).1" />
<Link Source="21010:[944..996).1" Target="21010:[567..663).5" />
<Link Source="21010:[944..996).1" Target="21010:[972..995).1" />
<Link Source="21010:[933..996).1" Target="21010:[944..996).1" />
<Link Source="21010:[1090..1115).1" Target="EXTERNAL" />
<Link Source="21010:[1062..1116).1" Target="21010:[557..663).1" />
<Link Source="21010:[1062..1116).1" Target="21010:[567..663).5" />
<Link Source="21010:[1062..1116).1" Target="21010:[1090..1115).1" />
<Link Source="21010:[1049..1116).1" Target="21010:[1062..1116).1" />
<Link Source="21010:[1210..1235).1" Target="EXTERNAL" />
<Link Source="21010:[1182..1236).1" Target="21010:[557..663).1" />
<Link Source="21010:[1182..1236).1" Target="21010:[567..663).5" />
<Link Source="21010:[1182..1236).1" Target="21010:[1210..1235).1" />
<Link Source="21010:[1169..1236).1" Target="21010:[1182..1236).1" />
<Link Source="21010:[1330..1355).1" Target="EXTERNAL" />
<Link Source="21010:[1302..1356).1" Target="21010:[557..663).1" />
<Link Source="21010:[1302..1356).1" Target="21010:[567..663).5" />
<Link Source="21010:[1302..1356).1" Target="21010:[1330..1355).1" />
<Link Source="21010:[1289..1356).1" Target="21010:[1302..1356).1" />
<Link Source="21010:[1454..1477).1" Target="EXTERNAL" />
<Link Source="21010:[1426..1478).1" Target="21010:[557..663).1" />
<Link Source="21010:[1426..1478).1" Target="21010:[567..663).5" />
<Link Source="21010:[1426..1478).1" Target="21010:[1454..1477).1" />
<Link Source="21010:[1409..1478).1" Target="21010:[1426..1478).1" />
<Link Source="21010:[1576..1599).1" Target="EXTERNAL" />
<Link Source="21010:[1548..1600).1" Target="21010:[557..663).1" />
<Link Source="21010:[1548..1600).1" Target="21010:[567..663).5" />
<Link Source="21010:[1548..1600).1" Target="21010:[1576..1599).1" />
<Link Source="21010:[1531..1600).1" Target="21010:[1548..1600).1" />
<Link Source="21010:[1692..1715).1" Target="EXTERNAL" />
<Link Source="21010:[1664..1716).1" Target="21010:[557..663).1" />
<Link Source="21010:[1664..1716).1" Target="21010:[567..663).5" />
<Link Source="21010:[1664..1716).1" Target="21010:[1692..1715).1" />
<Link Source="21010:[1653..1716).1" Target="21010:[1664..1716).1" />
<Link Source="21010:[1808..1831).1" Target="EXTERNAL" />
<Link Source="21010:[1780..1832).1" Target="21010:[557..663).1" />
<Link Source="21010:[1780..1832).1" Target="21010:[567..663).5" />
<Link Source="21010:[1780..1832).1" Target="21010:[1808..1831).1" />
<Link Source="21010:[1769..1832).1" Target="21010:[1780..1832).1" />
<Link Source="21010:[1950..1976).1" Target="EXTERNAL" />
<Link Source="21010:[1920..1977).1" Target="21010:[557..663).1" />
<Link Source="21010:[1920..1977).1" Target="21010:[567..663).5" />
<Link Source="21010:[1920..1977).1" Target="21010:[1950..1976).1" />
<Link Source="21010:[1885..1977).1" Target="21010:[1920..1977).1" />
<Link Source="21010:[2060..2067).1" Target="21010:[557..663).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2067).1" />
<Link Source="21010:[7783..7814).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2080..2109).1" />
<Link Source="21010:[7816..7830).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7832..7853).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[7783..7814).1" />
<Link Source="21010:[7879..7992).1" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).2" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[7816..7830).1" />
<Link Source="21010:[7879..7992).3" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[7832..7853).1" />
<Link Source="21010:[7879..7992).4" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).3" />
<Link Source="21010:[7879..7992).5" Target="21010:[7879..7992).4" />
<Link Source="21010:[7879..7992).5" Target="21010:[2060..2110).1" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).5" />
<Link Source="21010:[7931..7989).1" Target="21010:[7879..7992).2" />
<Link Source="21010:[7931..7989).1" Target="21010:[2060..2110).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).2" />
<Link Source="21010:[7879..7992).9" Target="21010:[567..663).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[7931..7989).1" />
<Link Source="21010:[7879..7992).9" Target="21010:[7879..7992).5" />
<Link Source="21010:[7879..7992).9" Target="21010:[2060..2110).1" />
<Link Source="21010:[2030..2110).1" Target="21010:[7879..7992).9" />
<Link Source="21010:[2227..2274).1" Target="EXTERNAL" />
<Link Source="21010:[2227..2292).1" Target="21010:[2227..2274).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2227..2292).1" />
<Link Source="21010:[2227..2296).1" Target="21010:[2295..2296).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[557..663).1" />
<Link Source="21010:[2199..2297).1" Target="21010:[567..663).5" />
<Link Source="21010:[2199..2297).1" Target="21010:[2227..2296).1" />
<Link Source="21010:[2163..2297).1" Target="21010:[2199..2297).1" />
<Link Source="21010:[2401..2450).1" Target="EXTERNAL" />
<Link Source="21010:[2401..2468).1" Target="21010:[2401..2450).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[557..663).1" />
<Link Source="21010:[2373..2469).1" Target="21010:[567..663).5" />
<Link Source="21010:[2373..2469).1" Target="21010:[2401..2468).1" />
<Link Source="21010:[2350..2469).1" Target="21010:[2373..2469).1" />
<Link Source="21010:[2576..2599).1" Target="EXTERNAL" />
<Link Source="21010:[2548..2600).1" Target="21010:[557..663).1" />
<Link Source="21010:[2548..2600).1" Target="21010:[567..663).5" />
<Link Source="21010:[2548..2600).1" Target="21010:[2576..2599).1" />
<Link Source="21010:[2522..2600).1" Target="21010:[2548..2600).1" />
<Link Source="21010:[2655..2705).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[2774..2838).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2954..2982).1" Target="EXTERNAL" />
<Link Source="21010:[2984..3025).1" Target="EXTERNAL" />
<Link Source="21010:[3027..3067).1" Target="EXTERNAL" />
<Link Source="21010:[2931..3068).3" Target="21010:[2954..2982).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2984..3025).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[3027..3067).1" />
<Link Source="21010:[2931..3068).3" Target="21010:[2931..3068).1" />
<Link Source="21010:[3082..3104).1" Target="21010:[2774..2838).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2931..3068).3" />
<Link Source="21010:[2931..3105).1" Target="21010:[3082..3104).1" />
<Link Source="21010:[2931..3105).1" Target="21010:[2799..2838).1" />
<Link Source="21010:[2891..3105).1" Target="21010:[2931..3105).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3487..3556).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3524..3544).1" />
<Link Source="21010:[3487..3556).2" Target="21010:[3546..3552).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[817..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[567..663).5" />
<Link Source="21010:[3465..3557).1" Target="21010:[828..880).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).1" />
<Link Source="21010:[3465..3557).1" Target="21010:[3487..3556).2" />
<Link Source="21010:[3436..3557).1" Target="21010:[3465..3557).1" />
<Link Source="21010:[3612..3656).1" Target="21010:[1289..1356).1" />
<Link Source="21010:[3709..3748).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3801..3844).1" Target="21010:[1653..1716).1" />
<Link Source="21010:[3897..3943).1" Target="21010:[1531..1600).1" />
<Link Source="21010:[4035..4070).1" Target="EXTERNAL" />
<Link Source="21010:[4072..4097).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).1" Target="21010:[4035..4070).1" />
<Link Source="21010:[10204..10225).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4072..4097).1" />
<Link Source="21010:[10227..10262).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10264..10288).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[10204..10225).1" />
<Link Source="21010:[10335..10345).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[10227..10262).1" />
<Link Source="21010:[10347..10383).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10385..10425).1" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[10264..10288).1" />
<Link Source="21010:[10427..10451).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).1" Target="21010:[4017..4098).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10335..10345).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10347..10383).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10385..10425).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10427..10451).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[10306..10452).1" />
<Link Source="21010:[10306..10452).47" Target="21010:[4017..4098).1" />
<Link Source="21010:[4004..4098).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4188..4217).1" Target="EXTERNAL" />
<Link Source="21010:[4219..4244).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).2" Target="21010:[4188..4217).1" />
<Link Source="21010:[10204..10225).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4219..4244).1" />
<Link Source="21010:[10227..10262).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10264..10288).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10335..10345).2" Target="21010:[10204..10225).2" />
<Link Source="21010:[10335..10345).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10347..10383).2" Target="21010:[10227..10262).2" />
<Link Source="21010:[10347..10383).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10385..10425).2" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10427..10451).2" Target="21010:[10264..10288).2" />
<Link Source="21010:[10427..10451).2" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).49" Target="21010:[4170..4245).1" />
<Link Source="21010:[10306..10452).95" Target="21010:[10335..10345).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10347..10383).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10385..10425).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10427..10451).2" />
<Link Source="21010:[10306..10452).95" Target="21010:[10306..10452).49" />
<Link Source="21010:[10306..10452).95" Target="21010:[4170..4245).1" />
<Link Source="21010:[4157..4245).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4324..4358).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[4324..4358).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[4324..4358).1" Target="21010:[4353..4357).1" />
<Link Source="21010:[4306..4358).1" Target="21010:[4324..4358).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[4437..4471).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[4437..4471).1" Target="21010:[4466..4470).1" />
<Link Source="21010:[4419..4471).1" Target="21010:[4437..4471).1" />
<Link Source="21010:[4561..4596).1" Target="EXTERNAL" />
<Link Source="21010:[4598..4621).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).3" Target="21010:[4561..4596).1" />
<Link Source="21010:[10204..10225).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4598..4621).1" />
<Link Source="21010:[10227..10262).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10264..10288).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10335..10345).3" Target="21010:[10204..10225).3" />
<Link Source="21010:[10335..10345).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10347..10383).3" Target="21010:[10227..10262).3" />
<Link Source="21010:[10347..10383).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10385..10425).3" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10427..10451).3" Target="21010:[10264..10288).3" />
<Link Source="21010:[10427..10451).3" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).97" Target="21010:[4543..4622).1" />
<Link Source="21010:[10306..10452).143" Target="21010:[10335..10345).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10347..10383).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10385..10425).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10427..10451).3" />
<Link Source="21010:[10306..10452).143" Target="21010:[10306..10452).97" />
<Link Source="21010:[10306..10452).143" Target="21010:[4543..4622).1" />
<Link Source="21010:[4532..4622).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[4710..4739).1" Target="EXTERNAL" />
<Link Source="21010:[4741..4764).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).4" Target="21010:[4710..4739).1" />
<Link Source="21010:[10204..10225).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4741..4764).1" />
<Link Source="21010:[10227..10262).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10264..10288).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10335..10345).4" Target="21010:[10204..10225).4" />
<Link Source="21010:[10335..10345).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10347..10383).4" Target="21010:[10227..10262).4" />
<Link Source="21010:[10347..10383).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10385..10425).4" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10427..10451).4" Target="21010:[10264..10288).4" />
<Link Source="21010:[10427..10451).4" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).145" Target="21010:[4692..4765).1" />
<Link Source="21010:[10306..10452).191" Target="21010:[10335..10345).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10347..10383).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10385..10425).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10427..10451).4" />
<Link Source="21010:[10306..10452).191" Target="21010:[10306..10452).145" />
<Link Source="21010:[10306..10452).191" Target="21010:[4692..4765).1" />
<Link Source="21010:[4681..4765).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[4859..4892).1" Target="EXTERNAL" />
<Link Source="21010:[4894..4919).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).5" Target="21010:[4859..4892).1" />
<Link Source="21010:[10204..10225).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4894..4919).1" />
<Link Source="21010:[10227..10262).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10264..10288).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10335..10345).5" Target="21010:[10204..10225).5" />
<Link Source="21010:[10335..10345).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10347..10383).5" Target="21010:[10227..10262).5" />
<Link Source="21010:[10347..10383).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10385..10425).5" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10427..10451).5" Target="21010:[10264..10288).5" />
<Link Source="21010:[10427..10451).5" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).193" Target="21010:[4841..4920).1" />
<Link Source="21010:[10306..10452).239" Target="21010:[10335..10345).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10347..10383).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10385..10425).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10427..10451).5" />
<Link Source="21010:[10306..10452).239" Target="21010:[10306..10452).193" />
<Link Source="21010:[10306..10452).239" Target="21010:[4841..4920).1" />
<Link Source="21010:[4826..4920).1" Target="21010:[10306..10452).239" />
<Link Source="21010:[5010..5043).1" Target="EXTERNAL" />
<Link Source="21010:[5045..5068).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).6" Target="21010:[5010..5043).1" />
<Link Source="21010:[10204..10225).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[5045..5068).1" />
<Link Source="21010:[10227..10262).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10264..10288).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10335..10345).6" Target="21010:[10204..10225).6" />
<Link Source="21010:[10335..10345).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10347..10383).6" Target="21010:[10227..10262).6" />
<Link Source="21010:[10347..10383).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10385..10425).6" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10427..10451).6" Target="21010:[10264..10288).6" />
<Link Source="21010:[10427..10451).6" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).241" Target="21010:[4992..5069).1" />
<Link Source="21010:[10306..10452).287" Target="21010:[10335..10345).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10347..10383).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10385..10425).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10427..10451).6" />
<Link Source="21010:[10306..10452).287" Target="21010:[10306..10452).241" />
<Link Source="21010:[10306..10452).287" Target="21010:[4992..5069).1" />
<Link Source="21010:[4979..5069).1" Target="21010:[10306..10452).287" />
<Link Source="21010:[5164..5184).1" Target="EXTERNAL" />
<Link Source="21010:[5186..5211).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).7" Target="21010:[5164..5184).1" />
<Link Source="21010:[10204..10225).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5186..5211).1" />
<Link Source="21010:[10227..10262).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10264..10288).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10335..10345).7" Target="21010:[10204..10225).7" />
<Link Source="21010:[10335..10345).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10347..10383).7" Target="21010:[10227..10262).7" />
<Link Source="21010:[10347..10383).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10385..10425).7" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10427..10451).7" Target="21010:[10264..10288).7" />
<Link Source="21010:[10427..10451).7" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).289" Target="21010:[5146..5212).1" />
<Link Source="21010:[10306..10452).335" Target="21010:[10335..10345).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10347..10383).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10385..10425).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10427..10451).7" />
<Link Source="21010:[10306..10452).335" Target="21010:[10306..10452).289" />
<Link Source="21010:[10306..10452).335" Target="21010:[5146..5212).1" />
<Link Source="21010:[5130..5212).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[5303..5323).1" Target="EXTERNAL" />
<Link Source="21010:[5325..5348).1" Target="EXTERNAL" />
<Link Source="21010:[10204..10225).8" Target="21010:[5303..5323).1" />
<Link Source="21010:[10204..10225).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5325..5348).1" />
<Link Source="21010:[10227..10262).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10264..10288).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10335..10345).8" Target="21010:[10204..10225).8" />
<Link Source="21010:[10335..10345).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10347..10383).8" Target="21010:[10227..10262).8" />
<Link Source="21010:[10347..10383).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10385..10425).8" Target="EXTERNAL" />
<Link Source="21010:[10385..10425).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10427..10451).8" Target="21010:[10264..10288).8" />
<Link Source="21010:[10427..10451).8" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).337" Target="21010:[5285..5349).1" />
<Link Source="21010:[10306..10452).383" Target="21010:[10335..10345).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10347..10383).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10385..10425).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10427..10451).8" />
<Link Source="21010:[10306..10452).383" Target="21010:[10306..10452).337" />
<Link Source="21010:[10306..10452).383" Target="21010:[5285..5349).1" />
<Link Source="21010:[5271..5349).1" Target="21010:[10306..10452).383" />
<Link Source="21010:[5429..5461).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5429..5461).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5429..5461).1" Target="21010:[5456..5460).1" />
<Link Source="21010:[5410..5461).1" Target="21010:[5429..5461).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[5539..5571).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[5539..5571).1" Target="21010:[5566..5570).1" />
<Link Source="21010:[5520..5571).1" Target="21010:[5539..5571).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[5649..5679).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[5649..5679).1" Target="21010:[5674..5678).1" />
<Link Source="21010:[5632..5679).1" Target="21010:[5649..5679).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[4681..4765).1" />
<Link Source="21010:[5755..5785).1" Target="21010:[10306..10452).191" />
<Link Source="21010:[5755..5785).1" Target="21010:[5780..5784).1" />
<Link Source="21010:[5738..5785).1" Target="21010:[5755..5785).1" />
<Link Source="21010:[5900..5951).1" Target="EXTERNAL" />
<Link Source="21010:[5866..5952).1" Target="21010:[4004..4098).1" />
<Link Source="21010:[5866..5952).1" Target="21010:[10306..10452).47" />
<Link Source="21010:[5866..5952).1" Target="21010:[5900..5951).1" />
<Link Source="21010:[5866..5952).1" Target="EXTERNAL" />
<Link Source="21010:[5846..5952).1" Target="21010:[5866..5952).1" />
<Link Source="21010:[6065..6116).1" Target="EXTERNAL" />
<Link Source="21010:[6031..6117).1" Target="21010:[4157..4245).1" />
<Link Source="21010:[6031..6117).1" Target="21010:[10306..10452).95" />
<Link Source="21010:[6031..6117).1" Target="21010:[6065..6116).1" />
<Link Source="21010:[6031..6117).1" Target="EXTERNAL" />
<Link Source="21010:[6011..6117).1" Target="21010:[6031..6117).1" />
<Link Source="21010:[6236..6287).1" Target="EXTERNAL" />
<Link Source="21010:[6199..6288).1" Target="21010:[5130..5212).1" />
<Link Source="21010:[6199..6288).1" Target="21010:[10306..10452).335" />
<Link Source="21010:[6199..6288).1" Target="21010:[6236..6287).1" />
<Link Source="21010:[6199..6288).1" Target="EXTERNAL" />
<Link Source="21010:[6176..6288).1" Target="21010:[6199..6288).1" />
<Link Source="21010:[6397..6448).1" Target="EXTERNAL" />
<Link Source="21010:[6365..6449).1" Target="21010:[4532..4622).1" />
<Link Source="21010:[6365..6449).1" Target="21010:[10306..10452).143" />
<Link Source="21010:[6365..6449).1" Target="21010:[6397..6448).1" />
<Link Source="21010:[6365..6449).1" Target="EXTERNAL" />
<Link Source="21010:[6347..6449).1" Target="21010:[6365..6449).1" />
<Link Source="21010:[6560..6586).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="EXTERNAL" />
<Link Source="21010:[6513..6587).1" Target="21010:[6560..6586).1" />
<Link Source="21010:[6497..6587).1" Target="21010:[6513..6587).1" />
<Link Source="21003:[34259..34289).1" Target="21010:[557..663).1" />
<Link Source="21003:[34259..34289).1" Target="21003:[34198..34304).2" />
<Link Source="21003:[34320..34386).1" Target="21003:[34078..34089).1" />
<Link Source="21003:[34320..34386).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).2" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).3" Target="21003:[34320..34386).2" />
<Link Source="21003:[34320..34386).3" Target="21003:[34148..34172).1" />
<Link Source="21003:[34320..34386).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).5" Target="21004:[1137..1205).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).1" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).3" />
<Link Source="21003:[34320..34386).7" Target="21003:[34320..34386).5" />
<Link Source="21003:[34320..34386).7" Target="EXTERNAL" />
<Link Source="21003:[34320..34386).7" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).1" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).2" Target="21003:[34259..34289).1" />
<Link Source="21003:[34400..34487).2" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).3" Target="21003:[34091..34111).1" />
<Link Source="21003:[34400..34487).3" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).4" Target="21004:[1137..1205).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).1" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).2" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).3" />
<Link Source="21003:[34400..34487).6" Target="21003:[34400..34487).4" />
<Link Source="21003:[34400..34487).6" Target="21003:[34320..34386).7" />
<Link Source="21003:[34400..34487).6" Target="21010:[567..663).5" />
<Link Source="21003:[34400..34487).6" Target="21004:[1137..1205).1" />
<Link Source="21003:[34407..34486).1" Target="21004:[1137..1205).1" />
<Link Source="21003:[34554..34569).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[34554..34569).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34595..34627).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34554..34569).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34400..34487).6" />
<Link Source="21003:[34641..34667).3" Target="21003:[34641..34667).1" />
<Link Source="21003:[34641..34667).3" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).3" />
<Link Source="21003:[34681..34706).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[34681..34706).4" Target="21003:[34641..34667).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34681..34706).2" />
<Link Source="21003:[34681..34706).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34681..34706).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34740).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34720..34740).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34720..34735).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).1" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).2" Target="21003:[34407..34486).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34754..34818).2" />
<Link Source="21003:[34754..34818).4" Target="21003:[34595..34627).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34720..34735).1" />
<Link Source="21003:[34754..34818).4" Target="21003:[34407..34486).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34554..34569).1" />
<Link Source="21003:[34832..34844).1" Target="21003:[34407..34486).1" />
<Link Source="21004:[1129..1207).1" Target="21003:[34832..34844).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1122..1208).1" />
<Link Source="21004:[1129..1207).1" Target="21004:[1034..2179).1" />
<Link Source="21003:[46280..46350).3" Target="21004:[1122..1208).1" />
<Link Source="21003:[46280..46350).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46023..46055).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[46366..46650).1" />
<Link Source="21003:[46366..46650).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[46419..46533).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[46419..46533).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).2" Target="21003:[46366..46650).2" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[46419..46533).2" />
<Link Source="21003:[46419..46533).4" Target="21004:[1122..1208).1" />
<Link Source="21003:[46419..46533).4" Target="21004:[1129..1207).1" />
<Link Source="21003:[46419..46533).4" Target="21003:[34400..34487).6" />
<Link Source="21003:[46419..46533).4" Target="21003:[46366..46650).2" />
<Link Source="21003:[46563..46584).1" Target="21003:[46419..46533).4" />
<Link Source="21003:[46563..46584).1" Target="21003:[46366..46650).2" />
<Link Source="21003:[46553..46635).1" Target="21010:[4004..4098).1" />
<Link Source="21003:[46553..46635).1" Target="21003:[46563..46584).1" />
<Link Source="21003:[46755..46872).1" Target="EXTERNAL" />
<Link Source="21003:[46755..46872).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[46224..46254).1" />
<Link Source="21003:[46888..47066).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46116..46135).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46280..46350).3" />
<Link Source="21003:[47082..47319).1" Target="21003:[45967..46008).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[46553..46635).1" />
<Link Source="21003:[47082..47319).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47333..47400).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47333..47399).1" Target="21003:[45706..45847).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47400).1" />
<Link Source="25006:[11552..11587).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11613..11696).1" Target="EXTERNAL" />
<Link Source="25006:[11613..11696).1" Target="21003:[47333..47399).1" />
<Link Source="25006:[11674..11681).1" Target="25006:[11613..11696).1" />
<Link Source="21003:[47333..47400).2" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[47082..47319).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1122..1208).1" />
<Link Source="21003:[47414..47458).1" Target="21004:[1129..1207).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[34400..34487).6" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).7" />
<Link Source="21003:[47414..47458).1" Target="EXTERNAL" />
<Link Source="21003:[47414..47458).1" Target="21010:[10306..10452).47" />
<Link Source="21003:[47414..47458).1" Target="25005:[4543..4693).1" />
<Link Source="21003:[47414..47458).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47414..47458).2" Target="21003:[45706..45847).1" />
<Link Source="25004:[1041..1077).1" Target="21003:[47414..47458).2" />
<Link Source="21003:[47414..47458).4" Target="21003:[47414..47458).1" />
<Link Source="21003:[47414..47458).4" Target="25004:[1041..1077).1" />
<Link Source="21003:[47414..47458).4" Target="21003:[45706..45847).1" />
<Link Source="21003:[47689..47930).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47689..47930).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[47717..47747).1" Target="21003:[45706..45847).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47689..47930).1" />
<Link Source="21003:[48025..48054).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[48025..48054).1" />
<Link Source="21003:[48175..48211).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48175..48211).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[48175..48211).1" />
<Link Source="21003:[48225..48313).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[48225..48313).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48175..48211).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[48327..48378).1" />
<Link Source="21003:[48327..48378).2" Target="21003:[47414..47458).4" />
<Link Source="21003:[48327..48378).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).1" Target="EXTERNAL" />
<Link Source="21003:[48392..48469).1" Target="21003:[47717..47747).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[48327..48378).2" />
<Link Source="21003:[48392..48469).2" Target="21003:[48392..48469).1" />
<Link Source="21003:[48392..48469).2" Target="21003:[47717..47747).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[46186..46209).1" />
<Link Source="21003:[47689..47930).3" Target="21003:[48392..48469).2" />
<Link Source="21003:[47689..47930).3" Target="21003:[45706..45847).1" />
<Link Source="21003:[47944..47963).1" Target="21003:[47414..47458).4" />
<Link Source="21003:[47944..47963).1" Target="21003:[45706..45847).1" />
<Link Source="28001:[73991..74036).1" Target="25014:[387..448).1" />
<Link Source="25002:[4263..4282).1" Target="21003:[47944..47963).1" />
<Link Source="25002:[4263..4282).1" Target="28001:[73991..74036).1" />
<Link Source="25002:[4284..4323).1" Target="28001:[73991..74037).4" />
<Link Source="25002:[4284..4323).1" Target="28001:[73991..74036).1" />
<Link Source="25002:[4395..4432).1" Target="28001:[73991..74036).1" />
<Link Source="10345:[975..1032).1" Target="EXTERNAL" />
<Link Source="10345:[1047..1101).1" Target="EXTERNAL" />
<Link Source="10345:[1116..1166).1" Target="EXTERNAL" />
<Link Source="10345:[1753..1782).1" Target="10345:[956..960).1" />
<Link Source="10345:[1753..1782).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[975..1032).1" />
<Link Source="10345:[1797..1861).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[1047..1101).1" />
<Link Source="10345:[1876..1931).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[1116..1166).1" />
<Link Source="10345:[1946..1998).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[1181..1185).1" />
<Link Source="10345:[2013..2038).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1723..2412).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1234..1246).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1288..1300).1" Target="10345:[930..1186).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[1531..1543).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[1797..1861).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[2064..2099).1" />
<Link Source="10345:[2064..2099).2" Target="10345:[930..1186).1" />
<Link Source="10345:[2113..2145).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2113..2145).1" Target="EXTERNAL" />
<Link Source="10345:[2113..2145).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2159..2192).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2159..2192).1" Target="EXTERNAL" />
<Link Source="10345:[2159..2192).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1753..1782).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2208..2220).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1797..1861).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2249..2266).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1876..1931).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2296..2307).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[2013..2038).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2331..2343).1" Target="10345:[930..1186).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1946..1998).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[1723..2412).1" />
<Link Source="10345:[2372..2390).1" Target="10345:[930..1186).1" />
<Link Source="10345:[922..1186).1" Target="10345:[930..1186).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).3" Target="25002:[4263..4282).1" />
<Link Source="25002:[4395..4432).3" Target="21003:[48392..48469).2" />
<Link Source="25002:[4395..4432).3" Target="28001:[73991..74036).1" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13089..13118).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13144..13184).1" Target="10345:[13089..13118).1" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[13144..13184).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).2" Target="10345:[13144..13184).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).2" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).2" Target="25002:[4395..4432).1" />
<Link Source="10345:[13200..13326).4" Target="10345:[13089..13118).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).3" />
<Link Source="10345:[13200..13326).4" Target="10345:[13200..13326).1" />
<Link Source="10345:[13200..13326).4" Target="25002:[4395..4432).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[922..1186).1" />
<Link Source="10345:[13298..13311).1" Target="10345:[13200..13326).2" />
<Link Source="25002:[4395..4432).6" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).6" Target="10345:[13298..13311).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2208..2220).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2331..2343).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2249..2266).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2296..2307).1" />
<Link Source="25002:[4395..4432).6" Target="10345:[2372..2390).1" />
<Link Source="25002:[4395..4432).6" Target="EXTERNAL" />
<Link Source="25002:[4395..4432).6" Target="28001:[73991..74036).1" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24530..24565).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).3" />
<Link Source="10345:[24507..26254).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24591..26243).1" Target="25002:[4395..4432).1" />
<Link Source="10345:[24636..24685).1" Target="10345:[24530..24565).1" />
<Link Source="10345:[24636..24685).1" Target="25002:[4395..4432).6" />
<Link Source="10345:[24636..24685).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24636..24685).1" />
<Link Source="10345:[24703..24750).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[24768..26149).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26025..26098).1" Target="EXTERNAL" />
<Link Source="10345:[26025..26098).1" Target="10345:[24768..26149).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24703..24750).1" />
<Link Source="10345:[26169..26228).1" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24530..24565).1" />
<Link Source="10345:[26169..26228).2" Target="10345:[24591..26243).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[24507..26254).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26025..26098).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).1" />
<Link Source="10345:[26169..26228).3" Target="10345:[26169..26228).2" />
<Link Source="10345:[26169..26228).3" Target="10345:[24591..26243).1" />
<Link Source="10345:[24932..25204).1" Target="EXTERNAL" />
<Link Source="10345:[24932..25204).1" Target="10345:[26169..26228).3" />
<Link Source="10345:[25064..25074).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[24507..26254).1" />
<Link Source="10345:[26266..28173).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[26266..28173).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[922..1186).1" />
<Link Source="10345:[26314..26387).1" Target="10345:[25064..25074).1" />
<Link Source="10345:[26365..26372).1" Target="10345:[26314..26387).1" />
<Link Source="10345:[25064..25075).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25109..25173).1" Target="EXTERNAL" />
<Link Source="10345:[25109..25173).1" Target="10345:[24932..25204).1" />
<Link Source="10345:[25858..25865).1" Target="10345:[25109..25173).1" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[471..492).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).3" />
<Link Source="10298:[494..511).1" Target="25002:[4395..4432).1" />
<Link Source="10298:[537..568).1" Target="10298:[471..492).1" />
<Link Source="10298:[537..568).1" Target="10298:[494..511).1" />
<Link Source="10298:[537..568).1" Target="25002:[4395..4432).1" />
<Link Source="25002:[4395..4432).10" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).10" Target="10298:[537..568).1" />
<Link Source="25002:[4395..4432).10" Target="10345:[25109..25173).1" />
<Link Source="25002:[4395..4432).10" Target="28001:[73991..74036).1" />
<Link Source="10292:[1704..1721).1" Target="10292:[1720..1721).1" />
<Link Source="10292:[1752..1769).1" Target="10292:[1768..1769).1" />
<Link Source="10292:[1963..1993).1" Target="10292:[1992..1993).1" />
<Link Source="10306:[388923..389344).1" Target="10306:[388969..389344).1" />
<Link Source="10306:[389480..389543).1" Target="EXTERNAL" />
<Link Source="10306:[389562..389646).1" Target="EXTERNAL" />
<Link Source="10306:[389708..389839).1" Target="EXTERNAL" />
<Link Source="10306:[389665..389839).1" Target="10306:[389708..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389480..389543).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389562..389646).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389665..389839).1" />
<Link Source="10306:[389438..389840).17" Target="10306:[389438..389840).1" />
<Link Source="10306:[389401..389840).1" Target="10306:[389438..389840).17" />
<Link Source="10310:[84458..84496).1" Target="10310:[84494..84496).1" />
<Link Source="10316:[772..830).1" Target="10316:[802..830).1" />
<Link Source="10319:[69620..69663).1" Target="10319:[69643..69663).1" />
<Link Source="10319:[69727..69774).1" Target="10319:[69752..69774).1" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30925..30954).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[30969..31000).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31015..31040).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31055..31080).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).3" />
<Link Source="10286:[31095..31126).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31055..31080).1" />
<Link Source="10286:[31152..31210).2" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31095..31126).1" />
<Link Source="10286:[31152..31210).4" Target="10286:[31152..31210).1" />
<Link Source="10286:[31152..31210).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).2" />
<Link Source="10286:[31152..31210).5" Target="10286:[31152..31210).4" />
<Link Source="10286:[31152..31210).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31515..31598).1" Target="10286:[30969..31000).1" />
<Link Source="10286:[31515..31598).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).1" Target="10286:[30925..30954).1" />
<Link Source="10286:[31614..31710).1" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).2" Target="10286:[30969..31000).1" />
<Link Source="10286:[31614..31710).2" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).3" Target="10286:[31015..31040).1" />
<Link Source="10286:[31614..31710).3" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).4" Target="10286:[31055..31080).1" />
<Link Source="10286:[31614..31710).4" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).5" Target="10286:[31095..31126).1" />
<Link Source="10286:[31614..31710).5" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31710).6" Target="10286:[31515..31598).1" />
<Link Source="10286:[31614..31710).6" Target="25002:[4395..4432).1" />
<Link Source="10286:[31614..31709).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31710).1" />
<Link Source="10319:[80080..80109).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31710).2" />
<Link Source="10319:[80111..80133).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31710).3" />
<Link Source="10319:[80135..80160).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31710).4" />
<Link Source="10319:[80162..80186).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31710).5" />
<Link Source="10319:[80188..80212).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31710).6" />
<Link Source="10319:[80214..80237).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80188..80212).1" />
<Link Source="10319:[80263..80315).2" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80162..80186).1" />
<Link Source="10319:[80263..80315).4" Target="10319:[80263..80315).1" />
<Link Source="10319:[80263..80315).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).2" />
<Link Source="10319:[80263..80315).5" Target="10319:[80263..80315).4" />
<Link Source="10319:[80263..80315).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80331..80364).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).1" Target="10319:[80080..80109).1" />
<Link Source="10319:[80378..80479).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).2" Target="10319:[80111..80133).1" />
<Link Source="10319:[80378..80479).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).3" Target="10319:[80331..80364).1" />
<Link Source="10319:[80378..80479).3" Target="10286:[31614..31709).1" />
<Link Source="10319:[80378..80479).4" Target="10319:[80214..80237).1" />
<Link Source="10319:[80378..80479).4" Target="10286:[31614..31709).1" />
<Link Source="10319:[80400..80478).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80378..80479).1" />
<Link Source="10319:[80843..80872).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80874..80896).1" Target="10319:[80378..80479).2" />
<Link Source="10319:[80874..80896).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80898..80931).1" Target="10319:[80378..80479).3" />
<Link Source="10319:[80898..80931).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80933..80956).1" Target="10319:[80378..80479).4" />
<Link Source="10319:[80933..80956).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80874..80896).1" />
<Link Source="10319:[80982..81047).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).2" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).2" Target="25002:[4395..4432).10" />
<Link Source="10319:[80982..81047).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80982..81047).3" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2841..2854).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2856..2875).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2901..2932).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[2948..3467).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3483..3502).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[3553..4223).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).1" Target="10060:[2841..2854).1" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).2" />
<Link Source="10060:[4243..4274).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).1" Target="10060:[4243..4274).1" />
<Link Source="10060:[3518..4328).1" Target="10319:[80982..81047).3" />
<Link Source="10060:[4344..4356).1" Target="10319:[80982..81047).3" />
<Link Source="10319:[80982..81047).8" Target="10060:[3483..3502).1" />
<Link Source="10319:[80982..81047).8" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).8" Target="10319:[80400..80478).1" />
<Link Source="10060:[2841..2854).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2841..2854).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).2" Target="10060:[3483..3502).1" />
<Link Source="10060:[2856..2875).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).3" Target="10060:[2841..2854).2" />
<Link Source="10060:[2901..2932).3" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[2948..3467).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[3553..4223).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).2" Target="10060:[2841..2854).2" />
<Link Source="10060:[4243..4274).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).2" Target="10060:[4243..4274).2" />
<Link Source="10060:[3518..4328).2" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).3" Target="10060:[4243..4274).2" />
<Link Source="10060:[3553..4223).3" Target="10060:[3518..4328).2" />
<Link Source="10319:[80982..81047).15" Target="10319:[80843..80872).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80982..81047).2" />
<Link Source="10319:[80982..81047).15" Target="10060:[4344..4356).1" />
<Link Source="10319:[80982..81047).15" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80982..81047).15" />
<Link Source="10319:[81063..82500).2" Target="10319:[81063..82500).1" />
<Link Source="10319:[81063..82500).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[81129..81207).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[81129..81207).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81129..81207).2" Target="10319:[81063..82500).2" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2841..2854).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2856..2875).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).7" Target="10060:[2841..2854).4" />
<Link Source="10060:[2901..2932).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).4" Target="10060:[2841..2854).4" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).1" />
<Link Source="10060:[2948..3467).4" Target="10319:[81129..81207).2" />
<Link Source="10060:[3483..3502).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[3553..4223).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).6" Target="10060:[2841..2854).4" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).1" />
<Link Source="10060:[4243..4274).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).6" Target="10060:[4243..4274).6" />
<Link Source="10060:[3518..4328).6" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2841..2854).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).5" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[2901..2932).9" Target="10060:[2841..2854).5" />
<Link Source="10060:[2901..2932).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).5" Target="10060:[2841..2854).5" />
<Link Source="10060:[2948..3467).5" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[3553..4223).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).7" Target="10060:[2841..2854).5" />
<Link Source="10060:[4243..4274).7" Target="10319:[81129..81207).2" />
<Link Source="10060:[3518..4328).7" Target="10060:[4243..4274).7" />
<Link Source="10060:[3518..4328).7" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).1" Target="10319:[81063..82500).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).2" Target="10319:[81225..82039).1" />
<Link Source="10319:[81225..82039).2" Target="10319:[81063..82500).2" />
<Link Source="10319:[82516..82536).1" Target="10319:[80982..81047).15" />
<Link Source="10319:[82516..82536).1" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).1" Target="10286:[31614..31709).1" />
<Link Source="10319:[80495..80738).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[80495..80738).2" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).1" Target="10319:[82516..82536).1" />
<Link Source="10319:[80754..80774).1" Target="10286:[31614..31709).1" />
<Link Source="10060:[2841..2854).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2841..2854).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2856..2875).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2856..2875).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[2901..2932).17" Target="10060:[2841..2854).9" />
<Link Source="10060:[2901..2932).17" Target="10319:[80982..81047).3" />
<Link Source="10060:[2948..3467).9" Target="10060:[2841..2854).9" />
<Link Source="10060:[2948..3467).9" Target="10319:[81129..81207).2" />
<Link Source="10060:[2948..3467).9" Target="10319:[80982..81047).3" />
<Link Source="10060:[3553..4223).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[3553..4223).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[3553..4223).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[4243..4274).11" Target="10060:[2841..2854).9" />
<Link Source="10060:[4243..4274).11" Target="10319:[81129..81207).2" />
<Link Source="10060:[4243..4274).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[3518..4328).11" Target="10060:[4243..4274).11" />
<Link Source="10060:[3518..4328).11" Target="10319:[80982..81047).3" />
<Link Source="10060:[2841..2854).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2856..2875).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[2901..2932).19" Target="10060:[2841..2854).10" />
<Link Source="10060:[2901..2932).19" Target="10060:[3483..3502).7" />
<Link Source="10060:[2948..3467).10" Target="10060:[2841..2854).10" />
<Link Source="10060:[2948..3467).10" Target="10060:[3483..3502).7" />
<Link Source="10060:[3553..4223).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[3553..4223).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[4243..4274).12" Target="10060:[2841..2854).10" />
<Link Source="10060:[4243..4274).12" Target="10060:[3483..3502).7" />
<Link Source="10060:[3518..4328).12" Target="10060:[4243..4274).12" />
<Link Source="10060:[3518..4328).12" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).4" Target="10319:[81129..81207).2" />
<Link Source="10319:[81225..82039).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[81225..82039).5" Target="10319:[81225..82039).4" />
<Link Source="10319:[81225..82039).5" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[81129..81207).2" />
<Link Source="10319:[82516..82536).2" Target="10319:[80400..80478).1" />
<Link Source="10319:[80495..80738).5" Target="10060:[3483..3502).7" />
<Link Source="10319:[80495..80738).5" Target="10319:[80495..80738).1" />
<Link Source="10319:[80495..80738).5" Target="10286:[31614..31709).1" />
<Link Source="10319:[80754..80774).2" Target="10319:[82516..82536).2" />
<Link Source="10319:[80754..80774).2" Target="10286:[31614..31709).1" />
<Link Source="10319:[81225..82039).7" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10060:[3483..3502).7" />
<Link Source="10319:[82516..82536).3" Target="10319:[80400..80478).1" />
<Link Source="10319:[80754..80774).3" Target="10319:[82516..82536).3" />
<Link Source="10319:[80754..80774).3" Target="10286:[31614..31709).1" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4437..4452).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4454..4498).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4500..4523).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).3" />
<Link Source="10076:[4411..5059).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4549..4579).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4549..4579).1" Target="10060:[3483..3502).7" />
<Link Source="10076:[4549..4579).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4821..4829).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[3592..3700).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[3628..3685).1" Target="10076:[3592..3700).1" />
<Link Source="10076:[3628..3685).1" Target="10060:[3483..3502).7" />
<Link Source="10076:[3628..3685).1" Target="EXTERNAL" />
<Link Source="10076:[3628..3685).1" Target="10076:[4821..4829).1" />
<Link Source="10076:[4815..4966).1" Target="10076:[3628..3685).1" />
<Link Source="10076:[4815..4966).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).4" Target="10076:[4437..4452).1" />
<Link Source="10076:[4815..4966).4" Target="10060:[3483..3502).7" />
<Link Source="10076:[4815..4966).4" Target="10076:[4815..4966).3" />
<Link Source="10076:[4815..4966).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).1" />
<Link Source="10076:[4815..4966).5" Target="10076:[4815..4966).4" />
<Link Source="10076:[4815..4966).5" Target="25002:[4395..4432).1" />
<Link Source="10076:[4932..4951).1" Target="10076:[4437..4452).1" />
<Link Source="10076:[4932..4951).1" Target="10060:[3483..3502).7" />
<Link Source="10076:[4932..4951).1" Target="10076:[4815..4966).5" />
<Link Source="10076:[4982..5048).1" Target="10076:[4932..4951).1" />
<Link Source="10076:[4982..5048).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).2" Target="10076:[4549..4579).1" />
<Link Source="10076:[4982..5048).2" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).3" Target="10076:[4454..4498).1" />
<Link Source="10076:[4982..5048).3" Target="25002:[4395..4432).1" />
<Link Source="10076:[4982..5048).4" Target="10076:[4500..4523).1" />
<Link Source="10076:[4982..5048).4" Target="25002:[4395..4432).1" />
<Link Source="10076:[4989..5047).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4982..5048).1" />
<Link Source="10076:[5097..5112).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5114..5126).1" Target="10076:[4982..5048).2" />
<Link Source="10076:[5114..5126).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5128..5172).1" Target="10076:[4982..5048).3" />
<Link Source="10076:[5128..5172).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5174..5197).1" Target="10076:[4982..5048).4" />
<Link Source="10076:[5174..5197).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4411..5059).1" />
<Link Source="10076:[5071..5759).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5097..5112).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).2" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).2" Target="10060:[3483..3502).7" />
<Link Source="10076:[5277..5448).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).1" Target="10076:[5071..5759).1" />
<Link Source="10076:[5470..5538).1" Target="10060:[3483..3502).7" />
<Link Source="10076:[5470..5538).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5470..5538).3" Target="10076:[4989..5047).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[909..930).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).1" />
<Link Source="10077:[879..998).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[879..998).2" Target="10076:[5470..5538).3" />
<Link Source="10077:[698..707).1" Target="10077:[879..998).2" />
<Link Source="10077:[698..707).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[747..768).1" Target="10077:[879..998).2" />
<Link Source="10077:[747..768).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[798..808).1" Target="10077:[879..998).2" />
<Link Source="10077:[798..808).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[854..862).1" Target="10077:[879..998).2" />
<Link Source="10077:[854..862).1" Target="10076:[5470..5538).3" />
<Link Source="10077:[964..972).1" Target="10077:[909..930).1" />
<Link Source="10077:[964..972).1" Target="10077:[879..998).2" />
<Link Source="10077:[964..972).1" Target="10076:[5470..5538).3" />
<Link Source="10076:[5470..5538).4" Target="10076:[5470..5538).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[879..998).2" />
<Link Source="10076:[5470..5538).4" Target="10077:[698..707).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[747..768).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[798..808).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[854..862).1" />
<Link Source="10076:[5470..5538).4" Target="10077:[964..972).1" />
<Link Source="10076:[5470..5538).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[5114..5126).1" />
<Link Source="10076:[5552..5614).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[5128..5172).1" />
<Link Source="10076:[5552..5614).2" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[5174..5197).1" />
<Link Source="10076:[5552..5614).3" Target="10076:[4989..5047).1" />
<Link Source="10076:[5552..5613).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5614).1" />
<Link Source="10077:[1039..1051).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5614).2" />
<Link Source="10077:[1053..1090).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5614).3" />
<Link Source="10077:[1092..1108).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1014..1370).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[1014..1370).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1053..1090).1" />
<Link Source="10077:[1142..1210).2" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).2" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1092..1108).1" />
<Link Source="10077:[1142..1210).4" Target="10077:[1142..1210).1" />
<Link Source="10077:[1142..1210).4" Target="10076:[5552..5613).1" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).2" />
<Link Source="10077:[1142..1210).5" Target="10077:[1142..1210).4" />
<Link Source="10077:[1142..1210).5" Target="10076:[5552..5613).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1039..1051).1" />
<Link Source="10077:[1230..1239).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1230..1239).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1053..1090).1" />
<Link Source="10077:[1269..1290).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1269..1290).1" Target="10076:[5552..5613).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1092..1108).1" />
<Link Source="10077:[1332..1342).1" Target="10077:[1014..1370).1" />
<Link Source="10077:[1332..1342).1" Target="10076:[5552..5613).1" />
<Link Source="10076:[5552..5614).4" Target="10076:[4989..5047).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[5097..5112).1" />
<Link Source="10076:[5628..5664).1" Target="10076:[4989..5047).1" />
<Link Source="10076:[5644..5663).1" Target="10076:[4989..5047).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5628..5664).1" />
<Link Source="10077:[2693..2708).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2664..2780).1" Target="10076:[5470..5538).4" />
<Link Source="10077:[2664..2780).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2742..2765).1" Target="10077:[2693..2708).1" />
<Link Source="10077:[2742..2765).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2749..2764).1" Target="10076:[5644..5663).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2742..2765).1" />
<Link Source="10077:[2877..2892).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2664..2780).1" />
<Link Source="10077:[2852..2986).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2852..2986).1" />
<Link Source="10077:[2926..2971).1" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2926..2971).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2877..2892).1" />
<Link Source="10077:[2926..2971).2" Target="10076:[5470..5538).4" />
<Link Source="10077:[2926..2971).2" Target="10077:[1230..1239).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1269..1290).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[1332..1342).1" />
<Link Source="10077:[2926..2971).2" Target="10077:[2749..2764).1" />
<Link Source="10077:[2926..2971).3" Target="10077:[2749..2764).1" />
<Link Source="10077:[2398..2415).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[2398..2415).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2362..2496).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[2362..2496).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2449..2481).1" Target="10077:[2398..2415).1" />
<Link Source="10077:[2449..2481).1" Target="10077:[2926..2971).2" />
<Link Source="10077:[2449..2481).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2456..2480).1" Target="10077:[2926..2971).3" />
<Link Source="10077:[2877..2892).2" Target="10077:[2449..2481).1" />
<Link Source="10077:[2877..2892).2" Target="10077:[2456..2480).1" />
<Link Source="10077:[2852..2986).2" Target="10077:[2362..2496).1" />
<Link Source="10077:[2852..2986).2" Target="10077:[2456..2480).1" />
<Link Source="10077:[2926..2971).5" Target="10077:[2852..2986).2" />
<Link Source="10077:[2926..2971).5" Target="10077:[2877..2892).2" />
<Link Source="10077:[2926..2971).5" Target="10077:[2926..2971).2" />
<Link Source="10077:[2926..2971).5" Target="10077:[2456..2480).1" />
<Link Source="10077:[34617..34644).1" Target="10077:[2926..2971).5" />
<Link Source="10077:[34617..34644).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[34572..34731).1" Target="10077:[2926..2971).5" />
<Link Source="10077:[34572..34731).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[34678..34716).1" Target="10077:[34617..34644).1" />
<Link Source="10077:[34678..34716).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[34685..34715).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[31025..31053).1" Target="10077:[34678..34716).1" />
<Link Source="10077:[31025..31053).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34572..34731).1" />
<Link Source="10077:[30985..32417).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31087..31238).1" Target="10077:[2926..2971).5" />
<Link Source="10077:[31087..31238).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31087..31238).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).1" />
<Link Source="10077:[31087..31238).3" Target="10077:[31087..31238).2" />
<Link Source="10077:[31087..31238).3" Target="10077:[2926..2971).5" />
<Link Source="10077:[31087..31238).3" Target="10077:[34685..34715).1" />
<Link Source="10077:[31258..31297).1" Target="EXTERNAL" />
<Link Source="10077:[31258..31297).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).2" Target="10077:[31490..32331).1" />
<Link Source="10077:[31490..32331).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[30985..32417).1" />
<Link Source="10077:[31490..32331).6" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).6" Target="10077:[34685..34715).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31025..31053).1" />
<Link Source="10077:[31490..32331).7" Target="10077:[31087..31238).3" />
<Link Source="10077:[31490..32331).7" Target="10077:[34685..34715).1" />
<Link Source="10077:[31936..32331).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[31936..32331).1" Target="10077:[31490..32331).6" />
<Link Source="10077:[31936..32331).1" Target="10077:[31490..32331).2" />
<Link Source="10077:[31936..32331).2" Target="10077:[31025..31053).1" />
<Link Source="10077:[31936..32331).2" Target="10077:[31490..32331).2" />
<Link Source="10077:[32037..32089).1" Target="EXTERNAL" />
<Link Source="10077:[32037..32089).1" Target="10077:[31936..32331).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[31025..31053).1" />
<Link Source="10077:[32351..32402).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[32037..32089).1" />
<Link Source="10077:[32351..32402).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[32358..32401).1" Target="10077:[34685..34715).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32351..32402).1" />
<Link Source="10077:[32474..32502).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32504..32523).1" Target="10077:[32351..32402).2" />
<Link Source="10077:[32504..32523).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[30985..32417).1" />
<Link Source="10077:[32433..34556).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[32557..32607).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32504..32523).1" />
<Link Source="10077:[32557..32607).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32567..32606).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32557..32607).1" />
<Link Source="10077:[44159..44180).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44182..44197).1" Target="10077:[32557..32607).2" />
<Link Source="10077:[44182..44197).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[44182..44197).1" />
<Link Source="10077:[44231..44317).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44231..44317).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[44159..44180).1" />
<Link Source="10077:[44335..44374).1" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[44182..44197).1" />
<Link Source="10077:[44335..44374).2" Target="10077:[32567..32606).1" />
<Link Source="10077:[44335..44374).3" Target="10077:[32567..32606).1" />
<Link Source="10077:[44342..44373).1" Target="10077:[32567..32606).1" />
<Link Source="10076:[875..902).1" Target="10077:[44335..44374).1" />
<Link Source="10076:[875..902).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[904..919).1" Target="10077:[44335..44374).2" />
<Link Source="10076:[904..919).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[853..1034).1" Target="10077:[44335..44374).3" />
<Link Source="10076:[853..1034).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[953..968).1" Target="10076:[875..902).1" />
<Link Source="10076:[953..968).1" Target="10076:[853..1034).1" />
<Link Source="10076:[953..968).1" Target="10077:[44342..44373).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[904..919).1" />
<Link Source="10076:[1000..1010).1" Target="10076:[853..1034).1" />
<Link Source="10076:[1000..1010).1" Target="10077:[44342..44373).1" />
<Link Source="10077:[32557..32607).3" Target="10077:[44335..44374).3" />
<Link Source="10077:[32557..32607).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32627..32647).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32670..32681).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32433..34556).1" />
<Link Source="10077:[2066..2158).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[2066..2158).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[31936..32331).1" />
<Link Source="10077:[2110..2139).1" Target="10077:[32670..32681).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[2110..2139).1" />
<Link Source="10077:[32665..34501).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[32665..34501).2" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32627..32647).1" />
<Link Source="10077:[32665..34501).3" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).2" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).3" />
<Link Source="10077:[32665..34501).4" Target="10077:[32665..34501).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[953..968).1" />
<Link Source="10077:[32665..34501).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[31936..32331).1" />
<Link Source="10077:[32665..34501).4" Target="10077:[32358..32401).1" />
<Link Source="10077:[32665..34501).5" Target="10077:[32358..32401).1" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1241..1380).1" Target="10077:[32665..34501).5" />
<Link Source="10076:[1307..1365).1" Target="10076:[1241..1380).1" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).4" />
<Link Source="10076:[1307..1365).1" Target="10077:[32665..34501).5" />
<Link Source="10077:[33226..33266).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[33226..33266).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33241..33265).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2877..2892).3" Target="10077:[33226..33266).1" />
<Link Source="10077:[2877..2892).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[35299..35332).1" Target="10077:[2877..2892).3" />
<Link Source="10077:[35299..35332).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35250..35934).1" Target="10077:[2877..2892).3" />
<Link Source="10077:[35250..35934).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35366..35522).1" Target="10077:[35250..35934).1" />
<Link Source="10077:[35366..35522).1" Target="10077:[2877..2892).3" />
<Link Source="10077:[35366..35522).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35366..35522).2" Target="10077:[35299..35332).1" />
<Link Source="10077:[35366..35522).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[35366..35522).3" Target="10077:[35366..35522).1" />
<Link Source="10077:[35366..35522).3" Target="10077:[35366..35522).2" />
<Link Source="10077:[35366..35522).3" Target="10077:[2877..2892).3" />
<Link Source="10077:[35366..35522).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[35674..35777).1" Target="10077:[35250..35934).1" />
<Link Source="10077:[35674..35777).1" Target="10077:[35366..35522).3" />
<Link Source="10077:[35674..35777).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35674..35777).2" Target="10077:[35299..35332).1" />
<Link Source="10077:[35674..35777).2" Target="10077:[35366..35522).3" />
<Link Source="10077:[35674..35777).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[35797..35830).1" Target="10077:[35299..35332).1" />
<Link Source="10077:[35797..35830).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35812..35829).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[35797..35830).1" />
<Link Source="10077:[44823..44854).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[35250..35934).1" />
<Link Source="10077:[44800..46356).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[35674..35777).1" />
<Link Source="10077:[44888..44934).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44954..44972).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[44954..44972).1" />
<Link Source="10077:[44966..44971).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[44823..44854).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[35674..35777).1" />
<Link Source="10077:[44990..45616).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[44990..45616).3" Target="10077:[44800..46356).1" />
<Link Source="10077:[44990..45616).3" Target="10077:[44990..45616).1" />
<Link Source="10077:[44990..45616).3" Target="10077:[44888..44934).1" />
<Link Source="10077:[44990..45616).3" Target="10077:[35674..35777).1" />
<Link Source="10077:[44990..45616).3" Target="10077:[35812..35829).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44888..44934).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[35674..35777).1" />
<Link Source="10077:[45331..45616).1" Target="10077:[44990..45616).3" />
<Link Source="10077:[45553..45597).1" Target="10077:[44800..46356).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[44990..45616).1" />
<Link Source="10077:[45553..45597).1" Target="10077:[45331..45616).1" />
<Link Source="10077:[45553..45597).2" Target="10077:[45331..45616).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[45553..45597).1" />
<Link Source="10077:[45636..45660).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[45678..46310).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[45678..46310).1" />
<Link Source="10077:[45678..46310).2" Target="10077:[35812..35829).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[45636..45660).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[44823..44854).1" />
<Link Source="10077:[45678..46310).3" Target="10077:[35812..35829).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46088..46248).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46088..46248).2" Target="EXTERNAL" />
<Link Source="10077:[46088..46248).2" Target="10077:[45678..46310).2" />
<Link Source="10077:[46272..46291).1" Target="10077:[45636..45660).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[46088..46248).1" />
<Link Source="10077:[46272..46291).1" Target="10077:[45678..46310).2" />
<Link Source="10077:[46328..46341).1" Target="10077:[35812..35829).1" />
<Link Source="10077:[35797..35830).2" Target="10077:[46328..46341).1" />
<Link Source="10077:[35797..35830).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[35850..35919).1" Target="10077:[35299..35332).1" />
<Link Source="10077:[35850..35919).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35850..35919).2" Target="10077:[35250..35934).1" />
<Link Source="10077:[35850..35919).2" Target="10077:[46272..46291).1" />
<Link Source="10077:[35850..35919).2" Target="10077:[33241..33265).1" />
<Link Source="10077:[35850..35919).3" Target="10077:[35674..35777).1" />
<Link Source="10077:[35850..35919).3" Target="10077:[33241..33265).1" />
<Link Source="10077:[35850..35919).4" Target="10077:[35797..35830).2" />
<Link Source="10077:[35850..35919).4" Target="10077:[33241..33265).1" />
<Link Source="10077:[35857..35918).1" Target="10077:[33241..33265).1" />
<Link Source="10077:[35992..36025).1" Target="10077:[35850..35919).1" />
<Link Source="10077:[35992..36025).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36027..36039).1" Target="10077:[35850..35919).2" />
<Link Source="10077:[36027..36039).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36041..36052).1" Target="10077:[35850..35919).3" />
<Link Source="10077:[36041..36052).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36054..36066).1" Target="10077:[35850..35919).4" />
<Link Source="10077:[36054..36066).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[35950..37866).1" Target="10077:[35250..35934).1" />
<Link Source="10077:[35950..37866).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36100..36154).1" Target="10077:[36054..36066).1" />
<Link Source="10077:[36100..36154).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36100..36154).3" Target="10077:[35857..35918).1" />
<Link Source="10077:[36190..36197).1" Target="10077:[36054..36066).1" />
<Link Source="10077:[36190..36197).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36229..36235).1" Target="10077:[36041..36052).1" />
<Link Source="10077:[36229..36235).1" Target="10077:[36190..36197).1" />
<Link Source="10077:[36174..36282).1" Target="EXTERNAL" />
<Link Source="10077:[36174..36282).1" Target="10077:[36229..36235).1" />
<Link Source="10077:[36330..36380).1" Target="10077:[35992..36025).1" />
<Link Source="10077:[36330..36380).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36330..36380).2" Target="10077:[36174..36282).1" />
<Link Source="10077:[36330..36380).2" Target="10077:[35857..35918).1" />
<Link Source="10077:[36340..36379).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[36330..36380).1" />
<Link Source="10077:[44159..44180).2" Target="10077:[36340..36379).1" />
<Link Source="10077:[44182..44197).2" Target="10077:[36330..36380).2" />
<Link Source="10077:[44182..44197).2" Target="10077:[36340..36379).1" />
<Link Source="10077:[44231..44317).9" Target="10077:[44182..44197).2" />
<Link Source="10077:[44231..44317).9" Target="10077:[36340..36379).1" />
<Link Source="10077:[44231..44317).11" Target="10077:[36340..36379).1" />
<Link Source="10077:[36330..36380).3" Target="10077:[36340..36379).1" />
<Link Source="10077:[36330..36380).3" Target="10077:[35857..35918).1" />
<Link Source="10077:[36400..36414).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36437..36448).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[35950..37866).1" />
<Link Source="10077:[2066..2158).2" Target="10077:[36437..36448).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[2066..2158).2" />
<Link Source="10077:[2110..2139).2" Target="10077:[46272..46291).1" />
<Link Source="10077:[2110..2139).2" Target="10077:[36437..36448).1" />
<Link Source="10077:[36432..37817).1" Target="10077:[2110..2139).2" />
<Link Source="10077:[36432..37817).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[36432..37817).2" Target="10077:[36330..36380).3" />
<Link Source="10077:[36432..37817).2" Target="10077:[35857..35918).1" />
<Link Source="10077:[36432..37817).3" Target="10077:[36400..36414).1" />
<Link Source="10077:[36432..37817).3" Target="10077:[35857..35918).1" />
<Link Source="10077:[36432..37817).4" Target="10077:[36432..37817).2" />
<Link Source="10077:[36432..37817).4" Target="10077:[36432..37817).3" />
<Link Source="10077:[36432..37817).4" Target="10077:[36432..37817).1" />
<Link Source="10077:[36432..37817).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[36432..37817).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[36432..37817).4" Target="10077:[46272..46291).1" />
<Link Source="10077:[36432..37817).4" Target="10077:[35857..35918).1" />
<Link Source="10077:[36432..37817).5" Target="10077:[35857..35918).1" />
<Link Source="10077:[36519..36532).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[36554..36584).1" Target="10077:[35992..36025).1" />
<Link Source="10077:[36554..36584).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[36612..36620).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[2243..2331).1" Target="10077:[35950..37866).1" />
<Link Source="10077:[2243..2331).1" Target="10077:[36612..36620).1" />
<Link Source="10077:[2294..2311).1" Target="10077:[36612..36620).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[2243..2331).1" />
<Link Source="10076:[3592..3700).2" Target="10077:[36432..37817).4" />
<Link Source="10076:[3592..3700).2" Target="10077:[2294..2311).1" />
<Link Source="10077:[2287..2312).1" Target="10076:[3592..3700).2" />
<Link Source="10077:[2287..2312).1" Target="10077:[36612..36620).1" />
<Link Source="10077:[36608..37330).1" Target="10077:[2287..2312).1" />
<Link Source="10077:[36608..37330).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[37255..37307).1" Target="10077:[35992..36025).1" />
<Link Source="10077:[37255..37307).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[37255..37307).1" Target="10077:[36608..37330).1" />
<Link Source="10077:[37255..37307).2" Target="10077:[36027..36039).1" />
<Link Source="10077:[37255..37307).2" Target="10077:[36608..37330).1" />
<Link Source="10077:[37255..37307).3" Target="10077:[36608..37330).1" />
<Link Source="10077:[37263..37306).1" Target="10077:[36608..37330).1" />
<Link Source="10076:[5097..5112).2" Target="10077:[37255..37307).1" />
<Link Source="10076:[5097..5112).2" Target="10077:[37263..37306).1" />
<Link Source="10076:[5114..5126).2" Target="10077:[37255..37307).2" />
<Link Source="10076:[5114..5126).2" Target="10077:[37263..37306).1" />
<Link Source="10076:[5128..5172).2" Target="10077:[37255..37307).3" />
<Link Source="10076:[5128..5172).2" Target="10077:[37263..37306).1" />
<Link Source="10076:[5174..5197).2" Target="10077:[37255..37307).3" />
<Link Source="10076:[5174..5197).2" Target="10077:[37263..37306).1" />
<Link Source="10076:[5223..5250).5" Target="10077:[37263..37306).1" />
<Link Source="10076:[5223..5250).6" Target="10076:[5097..5112).2" />
<Link Source="10076:[5223..5250).6" Target="10076:[5223..5250).5" />
<Link Source="10076:[5223..5250).6" Target="10077:[37263..37306).1" />
<Link Source="10076:[5277..5448).5" Target="10076:[5174..5197).2" />
<Link Source="10076:[5277..5448).5" Target="10077:[37263..37306).1" />
<Link Source="10077:[1142..1210).8" Target="10077:[37263..37306).1" />
<Link Source="10077:[1142..1210).9" Target="10076:[5128..5172).2" />
<Link Source="10077:[1142..1210).9" Target="10077:[1142..1210).8" />
<Link Source="10077:[1142..1210).9" Target="10077:[37263..37306).1" />
<Link Source="10077:[1142..1210).11" Target="10076:[5174..5197).2" />
<Link Source="10077:[1142..1210).11" Target="10077:[1142..1210).8" />
<Link Source="10077:[1142..1210).11" Target="10077:[37263..37306).1" />
<Link Source="10077:[39020..39048).1" Target="10076:[5114..5126).2" />
<Link Source="10077:[39020..39048).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[38976..39245).1" Target="10076:[5114..5126).2" />
<Link Source="10077:[38976..39245).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[39020..39048).1" />
<Link Source="10077:[39082..39230).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[39170..39187).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[44823..44854).2" Target="10077:[39082..39230).1" />
<Link Source="10077:[44823..44854).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[44800..46356).2" Target="10077:[38976..39245).1" />
<Link Source="10077:[44800..46356).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[44954..44972).2" Target="10077:[39170..39187).1" />
<Link Source="10077:[44966..44971).34" Target="10077:[44954..44972).2" />
<Link Source="10077:[44966..44971).34" Target="10077:[39170..39187).1" />
<Link Source="10077:[45331..45616).5" Target="10077:[44800..46356).2" />
<Link Source="10077:[45331..45616).5" Target="10077:[44823..44854).2" />
<Link Source="10077:[45331..45616).5" Target="10076:[5114..5126).2" />
<Link Source="10077:[39082..39230).3" Target="10077:[39170..39187).1" />
<Link Source="10077:[39082..39230).3" Target="10077:[37263..37306).1" />
<Link Source="10077:[39220..39228).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[2243..2331).2" Target="10077:[38976..39245).1" />
<Link Source="10077:[2243..2331).2" Target="10077:[39220..39228).1" />
<Link Source="10076:[3592..3700).3" Target="10077:[2243..2331).2" />
<Link Source="10076:[3592..3700).3" Target="10077:[45331..45616).5" />
<Link Source="10076:[3592..3700).3" Target="10077:[39220..39228).1" />
<Link Source="10077:[39089..39229).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39082..39230).1" />
<Link Source="10077:[39298..39335).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39337..39349).1" Target="10077:[39082..39230).3" />
<Link Source="10077:[39337..39349).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39351..39364).1" Target="10076:[3592..3700).3" />
<Link Source="10077:[39351..39364).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[38976..39245).1" />
<Link Source="10077:[39261..44091).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39421..39431).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1641..1732).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[1641..1732).1" />
<Link Source="10077:[1685..1713).1" Target="10077:[45331..45616).5" />
<Link Source="10077:[1685..1713).1" Target="10077:[39421..39431).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[1685..1713).1" />
<Link Source="10077:[39398..39590).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39298..39335).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39398..39590).1" />
<Link Source="10077:[39398..39590).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39337..39349).1" />
<Link Source="10077:[39626..39633).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[39766..39774).1" Target="10077:[39626..39633).1" />
<Link Source="10077:[39610..39829).1" Target="EXTERNAL" />
<Link Source="10077:[39610..39829).1" Target="10077:[39766..39774).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39298..39335).1" />
<Link Source="10077:[39877..39936).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[39877..39936).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39887..39935).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[44159..44180).3" Target="10077:[39877..39936).1" />
<Link Source="10077:[44159..44180).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[44182..44197).3" Target="10077:[39877..39936).2" />
<Link Source="10077:[44182..44197).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).17" Target="10077:[44182..44197).3" />
<Link Source="10077:[44231..44317).17" Target="10077:[39887..39935).1" />
<Link Source="10077:[44231..44317).19" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39887..39935).1" />
<Link Source="10077:[39877..39936).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39956..39970).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39993..40004).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2066..2158).3" Target="10077:[39261..44091).1" />
<Link Source="10077:[2066..2158).3" Target="10077:[39993..40004).1" />
<Link Source="10077:[2110..2139).3" Target="10077:[2066..2158).3" />
<Link Source="10077:[2110..2139).3" Target="10077:[45331..45616).5" />
<Link Source="10077:[2110..2139).3" Target="10077:[39993..40004).1" />
<Link Source="10077:[39988..44042).1" Target="10077:[2110..2139).3" />
<Link Source="10077:[39988..44042).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[39988..44042).2" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39956..39970).1" />
<Link Source="10077:[39988..44042).3" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).2" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[39988..44042).1" />
<Link Source="10077:[39988..44042).4" Target="10077:[44159..44180).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[44182..44197).3" />
<Link Source="10077:[39988..44042).4" Target="10077:[45331..45616).5" />
<Link Source="10077:[39988..44042).4" Target="10077:[39089..39229).1" />
<Link Source="10077:[39988..44042).5" Target="10077:[39089..39229).1" />
<Link Source="10077:[40084..40108).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1843..1943).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1843..1943).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[1843..1943).1" />
<Link Source="10077:[1887..1924).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1887..1924).1" Target="10077:[40084..40108).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[1887..1924).1" />
<Link Source="10077:[40075..40109).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[40133..43967).1" Target="10077:[39351..39364).1" />
<Link Source="10077:[40133..43967).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43302..43313).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[1456..1548).1" />
<Link Source="10077:[1500..1529).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[1500..1529).1" Target="10077:[43302..43313).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[1500..1529).1" />
<Link Source="10077:[43271..43374).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40075..40109).1" />
<Link Source="10077:[43271..43374).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[39298..39335).1" />
<Link Source="10077:[43271..43374).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[39337..39349).1" />
<Link Source="10077:[43271..43374).5" Target="10077:[40133..43967).1" />
<Link Source="10077:[43271..43374).6" Target="10077:[40133..43967).1" />
<Link Source="10077:[43280..43373).1" Target="10077:[40133..43967).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43271..43374).1" />
<Link Source="10346:[1426..1457).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1459..1470).1" Target="10077:[43271..43374).3" />
<Link Source="10346:[1459..1470).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1472..1506).1" Target="10077:[43271..43374).4" />
<Link Source="10346:[1472..1506).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1508..1520).1" Target="10077:[43271..43374).5" />
<Link Source="10346:[1508..1520).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).1" Target="10077:[43271..43374).6" />
<Link Source="10346:[1399..2435).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1542..1546).1" Target="10346:[1459..1470).1" />
<Link Source="10346:[1542..1546).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1399..2435).2" Target="10077:[43280..43373).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1542..1546).1" />
<Link Source="10286:[1247..1258).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).1" />
<Link Source="10286:[1231..1520).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1260..1291).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[726..773).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[726..773).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[815..820).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[815..820).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[2975..3015).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[2975..3015).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[17802..17818).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[17802..17818).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[18200..18223).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[18200..18223).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1317..1350).2" Target="10286:[1247..1258).1" />
<Link Source="10286:[1317..1350).2" Target="10286:[1317..1350).1" />
<Link Source="10286:[1317..1350).2" Target="10346:[1399..2435).2" />
<Link Source="10286:[1364..1368).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1364..1368).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1364..1368).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1390..1400).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1390..1400).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1390..1400).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1390..1400).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1428..1444).1" Target="10286:[1247..1258).1" />
<Link Source="10286:[1428..1444).1" Target="10077:[39988..44042).4" />
<Link Source="10286:[1428..1444).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1428..1444).1" Target="10346:[1399..2435).2" />
<Link Source="10286:[1478..1494).1" Target="10286:[1260..1291).1" />
<Link Source="10286:[1478..1494).1" Target="10286:[1231..1520).1" />
<Link Source="10286:[1478..1494).1" Target="10346:[1399..2435).2" />
<Link Source="10346:[858..868).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[858..868).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[932..947).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[932..947).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[974..986).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[974..986).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1017..1033).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1017..1033).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1074..1100).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1074..1100).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1426..1457).1" />
<Link Source="10346:[1572..1612).2" Target="10346:[1572..1612).1" />
<Link Source="10346:[1572..1612).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1472..1506).1" />
<Link Source="10346:[1626..1666).2" Target="10346:[1626..1666).1" />
<Link Source="10346:[1626..1666).2" Target="10077:[43280..43373).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1426..1457).1" />
<Link Source="10346:[1682..1692).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1682..1692).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1832).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1719..1832).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1719..1832).1" />
<Link Source="10346:[1719..1734).1" Target="10346:[1399..2435).1" />
<Link Source="10346:[1719..1734).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1848..2424).1" Target="10346:[1508..1520).1" />
<Link Source="10346:[1848..2424).1" Target="10077:[43280..43373).1" />
<Link Source="10346:[1894..2409).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1894..2409).1" Target="10077:[39988..44042).4" />
<Link Source="10346:[1894..2409).1" Target="10346:[1848..2424).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1472..1506).1" />
<Link Source="10346:[1994..2057).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1994..2057).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1894..2409).1" />
<Link Source="10346:[2079..2092).1" Target="10346:[1399..2435).1" />
<Link Source="10077:[43503..43514).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[39261..44091).1" />
<Link Source="10077:[1456..1548).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[1456..1548).2" />
<Link Source="10077:[1500..1529).2" Target="10346:[1894..2409).1" />
<Link Source="10077:[1500..1529).2" Target="10077:[43503..43514).1" />
<Link Source="10077:[43402..43944).1" Target="10077:[1500..1529).2" />
<Link Source="10077:[43402..43944).1" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[39298..39335).1" />
<Link Source="10077:[43402..43944).3" Target="10077:[40133..43967).1" />
<Link Source="10077:[43402..43944).4" Target="10077:[40133..43967).1" />
<Link Source="10077:[43991..44002).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[2110..2139).4" Target="10077:[43991..44002).1" />
<Link Source="10077:[2110..2139).4" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).1" Target="10077:[2110..2139).4" />
<Link Source="10077:[43991..44023).1" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).2" Target="10077:[39877..39936).3" />
<Link Source="10077:[43991..44023).2" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).3" Target="10077:[43271..43374).6" />
<Link Source="10077:[43991..44023).3" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).2" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).3" />
<Link Source="10077:[43991..44023).4" Target="10077:[43991..44023).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[44159..44180).3" />
<Link Source="10077:[43991..44023).4" Target="10077:[44182..44197).3" />
<Link Source="10077:[43991..44023).4" Target="10286:[1428..1444).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1390..1400).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1364..1368).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[1478..1494).1" />
<Link Source="10077:[43991..44023).4" Target="10286:[18200..18223).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1682..1692).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1734).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[974..986).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1017..1033).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1074..1100).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[2079..2092).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[43402..43944).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1719..1832).1" />
<Link Source="10077:[43991..44023).4" Target="10346:[1894..2409).1" />
<Link Source="10077:[43991..44023).4" Target="10077:[39988..44042).4" />
<Link Source="10077:[43991..44023).5" Target="10077:[39988..44042).4" />
<Link Source="10076:[1089..1109).1" Target="10077:[43991..44023).4" />
<Link Source="10076:[1089..1109).1" Target="10077:[43991..44023).5" />
<Link Source="10076:[1050..1225).1" Target="10077:[43991..44023).4" />
<Link Source="10076:[1050..1225).1" Target="10077:[43991..44023).5" />
<Link Source="10076:[1143..1210).1" Target="10076:[1050..1225).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[43991..44023).4" />
<Link Source="10076:[1143..1210).1" Target="10076:[1089..1109).1" />
<Link Source="10076:[1143..1210).1" Target="10077:[43991..44023).5" />
<Link Source="10077:[44062..44076).1" Target="10077:[43271..43374).6" />
<Link Source="10077:[44062..44076).1" Target="10077:[39089..39229).1" />
<Link Source="10077:[2926..2971).14" Target="10076:[5114..5126).2" />
<Link Source="10077:[2926..2971).14" Target="10077:[44062..44076).1" />
<Link Source="10077:[2926..2971).14" Target="10076:[1143..1210).1" />
<Link Source="10077:[2926..2971).14" Target="10077:[37263..37306).1" />
<Link Source="10076:[5678..5718).1" Target="10077:[37263..37306).1" />
<Link Source="10076:[5678..5718).2" Target="10077:[37263..37306).1" />
<Link Source="10076:[5678..5718).2" Target="10077:[2926..2971).14" />
<Link Source="10076:[5678..5718).2" Target="10076:[5678..5718).1" />
<Link Source="10076:[5734..5748).1" Target="10077:[2926..2971).14" />
<Link Source="10076:[5734..5748).1" Target="10077:[37263..37306).1" />
<Link Source="10077:[37354..37742).1" Target="10077:[36041..36052).1" />
<Link Source="10077:[37354..37742).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[37653..37719).1" Target="10077:[35992..36025).1" />
<Link Source="10077:[37653..37719).1" Target="10077:[37354..37742).1" />
<Link Source="10077:[37653..37719).2" Target="10077:[35992..36025).1" />
<Link Source="10077:[37653..37719).2" Target="10076:[5678..5718).2" />
<Link Source="10077:[37653..37719).2" Target="10077:[37354..37742).1" />
<Link Source="10077:[37653..37719).3" Target="10076:[5734..5748).1" />
<Link Source="10077:[37653..37719).3" Target="10077:[37354..37742).1" />
<Link Source="10077:[37653..37719).4" Target="10077:[36054..36066).1" />
<Link Source="10077:[37653..37719).4" Target="10077:[37354..37742).1" />
<Link Source="10077:[37662..37718).1" Target="10077:[37354..37742).1" />
<Link Source="10077:[37917..37938).1" Target="10077:[37653..37719).1" />
<Link Source="10077:[37917..37938).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[37940..37955).1" Target="10077:[37653..37719).2" />
<Link Source="10077:[37940..37955).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[37957..37969).1" Target="10077:[37653..37719).3" />
<Link Source="10077:[37957..37969).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[37971..37983).1" Target="10077:[37653..37719).4" />
<Link Source="10077:[37971..37983).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[37882..38960).1" Target="10077:[35950..37866).1" />
<Link Source="10077:[37882..38960).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38017..38044).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38062..38295).1" Target="10077:[37940..37955).1" />
<Link Source="10077:[38062..38295).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38062..38295).2" Target="10077:[37662..37718).1" />
<Link Source="10077:[38062..38295).3" Target="10077:[37940..37955).1" />
<Link Source="10077:[38062..38295).3" Target="10077:[38062..38295).2" />
<Link Source="10077:[38062..38295).3" Target="10077:[37662..37718).1" />
<Link Source="10077:[38315..38347).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38367..38713).1" Target="10077:[37957..37969).1" />
<Link Source="10077:[38367..38713).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38469..38496).1" Target="10077:[38367..38713).1" />
<Link Source="10346:[3331..3400).1" Target="10077:[38367..38713).1" />
<Link Source="10346:[3331..3400).1" Target="10077:[38469..38496).1" />
<Link Source="10346:[3367..3385).1" Target="10346:[3331..3400).1" />
<Link Source="10346:[3367..3385).1" Target="10076:[5678..5718).2" />
<Link Source="10346:[3367..3385).1" Target="10077:[38469..38496).1" />
<Link Source="10077:[38457..38497).1" Target="10346:[3367..3385).1" />
<Link Source="10077:[38457..38497).1" Target="10077:[38367..38713).1" />
<Link Source="10077:[38733..38808).1" Target="10077:[37940..37955).1" />
<Link Source="10077:[38733..38808).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38733..38808).2" Target="10077:[38457..38497).1" />
<Link Source="10077:[38733..38808).2" Target="10077:[38733..38808).1" />
<Link Source="10077:[38733..38808).2" Target="10076:[5678..5718).2" />
<Link Source="10077:[38733..38808).2" Target="10077:[37662..37718).1" />
<Link Source="10077:[38826..38863).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38826..38863).2" Target="10077:[38733..38808).2" />
<Link Source="10077:[38826..38863).2" Target="10077:[38826..38863).1" />
<Link Source="10077:[38826..38863).2" Target="10077:[37662..37718).1" />
<Link Source="10077:[38881..38945).1" Target="10077:[38733..38808).2" />
<Link Source="10077:[38881..38945).1" Target="10077:[37662..37718).1" />
<Link Source="10077:[38881..38945).2" Target="10077:[37957..37969).1" />
<Link Source="10077:[38881..38945).2" Target="10077:[37662..37718).1" />
<Link Source="10077:[38881..38945).3" Target="10077:[37917..37938).1" />
<Link Source="10077:[38881..38945).3" Target="10077:[37662..37718).1" />
<Link Source="10077:[38881..38945).4" Target="10077:[37971..37983).1" />
<Link Source="10077:[38881..38945).4" Target="10077:[37662..37718).1" />
<Link Source="10077:[38881..38945).5" Target="10077:[37662..37718).1" />
<Link Source="10077:[38888..38944).1" Target="10077:[37662..37718).1" />
<Link Source="10346:[1426..1457).2" Target="10077:[38881..38945).1" />
<Link Source="10346:[1426..1457).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1459..1470).2" Target="10077:[38881..38945).2" />
<Link Source="10346:[1459..1470).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1472..1506).2" Target="10077:[38881..38945).3" />
<Link Source="10346:[1472..1506).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1508..1520).2" Target="10077:[38881..38945).4" />
<Link Source="10346:[1508..1520).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1399..2435).3" Target="10077:[38881..38945).5" />
<Link Source="10346:[1399..2435).3" Target="10077:[38888..38944).1" />
<Link Source="10346:[1399..2435).4" Target="10077:[38888..38944).1" />
<Link Source="10286:[1231..1520).2" Target="10346:[1399..2435).3" />
<Link Source="10286:[1231..1520).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[1260..1291).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[726..773).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[726..773).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[815..820).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[815..820).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[2975..3015).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[2975..3015).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[17802..17818).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[17802..17818).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[18200..18223).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[18200..18223).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[1317..1350).5" Target="10346:[1399..2435).4" />
<Link Source="10286:[1317..1350).6" Target="10346:[1459..1470).2" />
<Link Source="10286:[1317..1350).6" Target="10286:[1317..1350).5" />
<Link Source="10286:[1317..1350).6" Target="10346:[1399..2435).4" />
<Link Source="10286:[1390..1400).2" Target="10346:[1459..1470).2" />
<Link Source="10286:[1390..1400).2" Target="10077:[38733..38808).2" />
<Link Source="10286:[1390..1400).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1390..1400).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[1428..1444).2" Target="10346:[1459..1470).2" />
<Link Source="10286:[1428..1444).2" Target="10077:[38733..38808).2" />
<Link Source="10286:[1428..1444).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1428..1444).2" Target="10346:[1399..2435).4" />
<Link Source="10286:[1478..1494).2" Target="10286:[1260..1291).2" />
<Link Source="10286:[1478..1494).2" Target="10286:[1231..1520).2" />
<Link Source="10286:[1478..1494).2" Target="10346:[1399..2435).4" />
<Link Source="10346:[858..868).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[858..868).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[932..947).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[932..947).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[974..986).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[974..986).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1017..1033).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[1017..1033).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1074..1100).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[1074..1100).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1572..1612).5" Target="10077:[38888..38944).1" />
<Link Source="10346:[1572..1612).6" Target="10346:[1426..1457).2" />
<Link Source="10346:[1572..1612).6" Target="10346:[1572..1612).5" />
<Link Source="10346:[1572..1612).6" Target="10077:[38888..38944).1" />
<Link Source="10346:[1626..1666).5" Target="10077:[38888..38944).1" />
<Link Source="10346:[1626..1666).6" Target="10346:[1472..1506).2" />
<Link Source="10346:[1626..1666).6" Target="10346:[1626..1666).5" />
<Link Source="10346:[1626..1666).6" Target="10077:[38888..38944).1" />
<Link Source="10346:[1719..1832).2" Target="10346:[1472..1506).2" />
<Link Source="10346:[1719..1832).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[1719..1832).2" Target="10346:[1508..1520).2" />
<Link Source="10346:[1719..1832).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1719..1734).2" Target="10346:[1719..1832).2" />
<Link Source="10346:[1719..1734).2" Target="10346:[1399..2435).3" />
<Link Source="10346:[1719..1734).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1848..2424).2" Target="10346:[1508..1520).2" />
<Link Source="10346:[1848..2424).2" Target="10077:[38888..38944).1" />
<Link Source="10346:[1894..2409).4" Target="10346:[1472..1506).2" />
<Link Source="10346:[1894..2409).4" Target="10077:[38733..38808).2" />
<Link Source="10346:[1894..2409).4" Target="10346:[1848..2424).2" />
<Link Source="10346:[2160..2409).1" Target="10346:[1472..1506).2" />
<Link Source="10346:[2160..2409).1" Target="10346:[1894..2409).4" />
<Link Source="10346:[2265..2331).1" Target="10346:[1472..1506).2" />
<Link Source="10346:[2265..2331).1" Target="10346:[2160..2409).1" />
<Link Source="10346:[2353..2366).1" Target="10346:[2265..2331).1" />
<Link Source="10346:[2353..2366).1" Target="10346:[2160..2409).1" />
<Link Source="10346:[2353..2366).1" Target="10346:[1399..2435).3" />
<Link Source="10077:[37653..37719).5" Target="10077:[38881..38945).5" />
<Link Source="10077:[37653..37719).5" Target="10077:[37354..37742).1" />
<Link Source="10077:[37766..37777).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[2110..2139).5" Target="10077:[37766..37777).1" />
<Link Source="10077:[2110..2139).5" Target="10346:[2160..2409).1" />
<Link Source="10077:[37766..37798).1" Target="10077:[2110..2139).5" />
<Link Source="10077:[37766..37798).1" Target="10077:[36432..37817).4" />
<Link Source="10077:[37766..37798).2" Target="10077:[36330..36380).3" />
<Link Source="10077:[37766..37798).2" Target="10077:[36432..37817).4" />
<Link Source="10077:[37766..37798).3" Target="10077:[37653..37719).5" />
<Link Source="10077:[37766..37798).3" Target="10077:[36432..37817).4" />
<Link Source="10077:[37766..37798).4" Target="10077:[37766..37798).2" />
<Link Source="10077:[37766..37798).4" Target="10077:[37766..37798).3" />
<Link Source="10077:[37766..37798).4" Target="10077:[37766..37798).1" />
<Link Source="10077:[37766..37798).4" Target="10077:[44159..44180).2" />
<Link Source="10077:[37766..37798).4" Target="10077:[44182..44197).2" />
<Link Source="10077:[37766..37798).4" Target="10286:[1428..1444).2" />
<Link Source="10077:[37766..37798).4" Target="10286:[1390..1400).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[1459..1470).2" />
<Link Source="10077:[37766..37798).4" Target="10286:[1478..1494).2" />
<Link Source="10077:[37766..37798).4" Target="10286:[18200..18223).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[1426..1457).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[1719..1734).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[974..986).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[1017..1033).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[1074..1100).2" />
<Link Source="10077:[37766..37798).4" Target="10346:[2353..2366).1" />
<Link Source="10077:[37766..37798).4" Target="10346:[2160..2409).1" />
<Link Source="10077:[37766..37798).4" Target="10346:[1719..1832).2" />
<Link Source="10077:[37766..37798).4" Target="10077:[36432..37817).4" />
<Link Source="10077:[37766..37798).5" Target="10077:[36432..37817).4" />
<Link Source="10077:[37837..37851).1" Target="10077:[37653..37719).5" />
<Link Source="10077:[37837..37851).1" Target="10077:[35857..35918).1" />
<Link Source="10077:[2926..2971).18" Target="10077:[2877..2892).3" />
<Link Source="10077:[2926..2971).18" Target="10077:[37837..37851).1" />
<Link Source="10077:[2926..2971).18" Target="10077:[37766..37798).4" />
<Link Source="10077:[2926..2971).18" Target="10077:[33241..33265).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33290..34322).1" Target="10077:[39610..39829).1" />
<Link Source="10077:[33290..34322).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[33414..33451).1" Target="10077:[33290..34322).1" />
<Link Source="10346:[7369..7588).1" Target="10077:[2926..2971).18" />
<Link Source="10346:[7369..7588).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7405..7454).1" Target="10346:[7369..7588).1" />
<Link Source="10346:[7405..7454).1" Target="10077:[2926..2971).18" />
<Link Source="10346:[7405..7454).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7405..7454).1" />
<Link Source="10346:[7472..7573).2" Target="10346:[7472..7573).1" />
<Link Source="10346:[7472..7573).2" Target="10077:[33414..33451).1" />
<Link Source="10346:[7479..7503).1" Target="10346:[7472..7573).2" />
<Link Source="10346:[7479..7503).1" Target="10077:[33414..33451).1" />
<Link Source="10346:[7562..7572).1" Target="10346:[7369..7588).1" />
<Link Source="10346:[7562..7572).1" Target="10077:[2926..2971).18" />
<Link Source="10346:[7562..7572).1" Target="10346:[7479..7503).1" />
<Link Source="10077:[33373..33481).1" Target="10346:[7562..7572).1" />
<Link Source="10077:[33373..33481).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[33373..33481).2" Target="10077:[33290..34322).1" />
<Link Source="10077:[33509..34299).1" Target="10077:[32504..32523).1" />
<Link Source="10077:[33509..34299).1" Target="EXTERNAL" />
<Link Source="10077:[33509..34299).1" Target="10077:[33290..34322).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[33969..34032).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).2" Target="10077:[2926..2971).18" />
<Link Source="10077:[33969..34032).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[33969..34032).3" Target="10077:[33509..34299).1" />
<Link Source="10077:[33984..34031).1" Target="10077:[33509..34299).1" />
<Link Source="10346:[2571..2602).1" Target="10077:[33969..34032).1" />
<Link Source="10346:[2571..2602).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2604..2615).1" Target="10077:[33969..34032).2" />
<Link Source="10346:[2604..2615).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2617..2639).1" Target="10077:[33969..34032).3" />
<Link Source="10346:[2617..2639).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).1" Target="10077:[33969..34032).3" />
<Link Source="10346:[2544..2854).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2661..2665).1" Target="10346:[2604..2615).1" />
<Link Source="10346:[2661..2665).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2544..2854).2" Target="10077:[33984..34031).1" />
<Link Source="10286:[1247..1258).3" Target="10346:[2661..2665).1" />
<Link Source="10286:[1247..1258).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[1231..1520).3" Target="10346:[2544..2854).1" />
<Link Source="10286:[1231..1520).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[1260..1291).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[726..773).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[726..773).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[815..820).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[815..820).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[2975..3015).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[2975..3015).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[17802..17818).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[17802..17818).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[18200..18223).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[18200..18223).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).9" Target="10346:[2544..2854).2" />
<Link Source="10286:[1317..1350).10" Target="10286:[1247..1258).3" />
<Link Source="10286:[1317..1350).10" Target="10286:[1317..1350).9" />
<Link Source="10286:[1317..1350).10" Target="10346:[2544..2854).2" />
<Link Source="10286:[1390..1400).3" Target="10286:[1247..1258).3" />
<Link Source="10286:[1390..1400).3" Target="10077:[33373..33481).1" />
<Link Source="10286:[1390..1400).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[1390..1400).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[1428..1444).3" Target="10286:[1247..1258).3" />
<Link Source="10286:[1428..1444).3" Target="10077:[33373..33481).1" />
<Link Source="10286:[1428..1444).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[1428..1444).3" Target="10346:[2544..2854).2" />
<Link Source="10286:[1478..1494).3" Target="10286:[1260..1291).3" />
<Link Source="10286:[1478..1494).3" Target="10286:[1231..1520).3" />
<Link Source="10286:[1478..1494).3" Target="10346:[2544..2854).2" />
<Link Source="10346:[858..868).3" Target="10346:[2544..2854).1" />
<Link Source="10346:[858..868).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[932..947).3" Target="10346:[2544..2854).1" />
<Link Source="10346:[932..947).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[974..986).3" Target="10346:[2544..2854).1" />
<Link Source="10346:[974..986).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[1017..1033).3" Target="10346:[2544..2854).1" />
<Link Source="10346:[1017..1033).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[1074..1100).3" Target="10346:[2544..2854).1" />
<Link Source="10346:[1074..1100).3" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2571..2602).1" />
<Link Source="10346:[2691..2750).2" Target="10346:[2691..2750).1" />
<Link Source="10346:[2691..2750).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2571..2602).1" />
<Link Source="10346:[2766..2776).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2766..2776).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2843).1" Target="10345:[922..1186).1" />
<Link Source="10346:[2803..2843).1" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2843).2" Target="10346:[2803..2843).1" />
<Link Source="10346:[2803..2843).2" Target="10346:[2617..2639).1" />
<Link Source="10346:[2803..2843).2" Target="10077:[33984..34031).1" />
<Link Source="10346:[2803..2815).1" Target="10346:[2803..2843).2" />
<Link Source="10346:[2803..2815).1" Target="10346:[2544..2854).1" />
<Link Source="10346:[2803..2815).1" Target="10077:[33984..34031).1" />
<Link Source="10077:[34064..34272).1" Target="10077:[33509..34299).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[32474..32502).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33373..33481).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[34064..34272).1" />
<Link Source="10077:[34064..34272).2" Target="10077:[33509..34299).1" />
<Link Source="10077:[34166..34241).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[34166..34241).1" Target="10077:[34064..34272).2" />
<Link Source="10077:[34166..34241).2" Target="10077:[33969..34032).3" />
<Link Source="10077:[34166..34241).2" Target="10077:[34064..34272).2" />
<Link Source="10077:[34166..34241).3" Target="10077:[34064..34272).2" />
<Link Source="10077:[34181..34240).1" Target="10077:[34064..34272).2" />
<Link Source="10376:[838..863).1" Target="10077:[34166..34241).1" />
<Link Source="10376:[838..863).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[865..876).1" Target="10077:[34166..34241).2" />
<Link Source="10376:[865..876).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[799..1016).1" Target="10077:[34166..34241).3" />
<Link Source="10376:[799..1016).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[898..902).1" Target="10376:[865..876).1" />
<Link Source="10376:[898..902).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[799..1016).2" Target="10077:[34181..34240).1" />
<Link Source="10382:[520..531).1" Target="10376:[898..902).1" />
<Link Source="10382:[520..531).1" Target="10376:[799..1016).2" />
<Link Source="10382:[486..580).1" Target="10376:[799..1016).1" />
<Link Source="10382:[486..580).1" Target="10376:[799..1016).2" />
<Link Source="10382:[553..557).1" Target="10382:[520..531).1" />
<Link Source="10382:[553..557).1" Target="10376:[799..1016).2" />
<Link Source="10382:[486..580).2" Target="10376:[799..1016).2" />
<Link Source="10286:[1247..1258).4" Target="10382:[553..557).1" />
<Link Source="10286:[1247..1258).4" Target="10382:[486..580).2" />
<Link Source="10286:[726..773).4" Target="10382:[486..580).1" />
<Link Source="10286:[726..773).4" Target="10382:[486..580).2" />
<Link Source="10286:[815..820).4" Target="10382:[486..580).1" />
<Link Source="10286:[815..820).4" Target="10382:[486..580).2" />
<Link Source="10286:[2975..3015).4" Target="10382:[486..580).1" />
<Link Source="10286:[2975..3015).4" Target="10382:[486..580).2" />
<Link Source="10286:[17802..17818).4" Target="10382:[486..580).1" />
<Link Source="10286:[17802..17818).4" Target="10382:[486..580).2" />
<Link Source="10286:[1317..1350).13" Target="10382:[486..580).2" />
<Link Source="10286:[1317..1350).14" Target="10286:[1247..1258).4" />
<Link Source="10286:[1317..1350).14" Target="10286:[1317..1350).13" />
<Link Source="10286:[1317..1350).14" Target="10382:[486..580).2" />
<Link Source="10286:[1390..1400).4" Target="10286:[1247..1258).4" />
<Link Source="10286:[1390..1400).4" Target="10286:[1390..1400).3" />
<Link Source="10286:[1390..1400).4" Target="10382:[486..580).1" />
<Link Source="10286:[1390..1400).4" Target="10382:[486..580).2" />
<Link Source="10286:[1428..1444).4" Target="10286:[1247..1258).4" />
<Link Source="10286:[1428..1444).4" Target="10286:[1428..1444).3" />
<Link Source="10286:[1428..1444).4" Target="10382:[486..580).1" />
<Link Source="10286:[1428..1444).4" Target="10382:[486..580).2" />
<Link Source="10376:[691..701).1" Target="10376:[799..1016).1" />
<Link Source="10376:[691..701).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[765..786).1" Target="10376:[799..1016).1" />
<Link Source="10376:[765..786).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[928..968).1" Target="10077:[34181..34240).1" />
<Link Source="10376:[928..968).2" Target="10376:[838..863).1" />
<Link Source="10376:[928..968).2" Target="10376:[928..968).1" />
<Link Source="10376:[928..968).2" Target="10077:[34181..34240).1" />
<Link Source="10376:[982..992).1" Target="10376:[838..863).1" />
<Link Source="10376:[982..992).1" Target="10376:[799..1016).1" />
<Link Source="10376:[982..992).1" Target="10077:[34181..34240).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[32474..32502).1" />
<Link Source="10077:[34346..34420).1" Target="10077:[33373..33481).1" />
<Link Source="10077:[34346..34420).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34361..34419).1" Target="10076:[1307..1365).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34346..34420).1" />
<Link Source="10307:[3496..3521).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3452..3756).1" Target="10077:[34166..34241).3" />
<Link Source="10307:[3452..3756).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).1" Target="10307:[3452..3756).1" />
<Link Source="10307:[3547..3745).1" Target="10286:[1390..1400).4" />
<Link Source="10307:[3547..3745).1" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).2" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).2" Target="10077:[34361..34419).1" />
<Link Source="10307:[3555..3600).1" Target="10077:[34361..34419).1" />
<Link Source="10298:[471..492).7" Target="10307:[3547..3745).1" />
<Link Source="10298:[471..492).7" Target="10307:[3555..3600).1" />
<Link Source="10298:[494..511).7" Target="10307:[3547..3745).2" />
<Link Source="10298:[494..511).7" Target="10307:[3555..3600).1" />
<Link Source="10307:[3547..3745).4" Target="10307:[3496..3521).1" />
<Link Source="10307:[3547..3745).4" Target="10077:[34361..34419).1" />
<Link Source="10307:[3547..3745).7" Target="10298:[471..492).7" />
<Link Source="10307:[3547..3745).7" Target="10307:[3547..3745).4" />
<Link Source="10307:[3547..3745).7" Target="10077:[34361..34419).1" />
<Link Source="10307:[3554..3645).1" Target="10307:[3547..3745).7" />
<Link Source="10307:[3554..3645).1" Target="10077:[34361..34419).1" />
<Link Source="10077:[34444..34455).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[2110..2139).6" Target="10077:[34444..34455).1" />
<Link Source="10077:[2110..2139).6" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).1" Target="10077:[2110..2139).6" />
<Link Source="10077:[34444..34482).1" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).2" Target="10077:[32557..32607).3" />
<Link Source="10077:[34444..34482).2" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).3" Target="10307:[3554..3645).1" />
<Link Source="10077:[34444..34482).3" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).2" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).3" />
<Link Source="10077:[34444..34482).4" Target="10077:[34444..34482).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[953..968).1" />
<Link Source="10077:[34444..34482).4" Target="10076:[1000..1010).1" />
<Link Source="10077:[34444..34482).4" Target="10286:[1428..1444).4" />
<Link Source="10077:[34444..34482).4" Target="10286:[1390..1400).4" />
<Link Source="10077:[34444..34482).4" Target="10286:[1247..1258).4" />
<Link Source="10077:[34444..34482).4" Target="10382:[486..580).1" />
<Link Source="10077:[34444..34482).4" Target="10376:[982..992).1" />
<Link Source="10077:[34444..34482).4" Target="10376:[765..786).1" />
<Link Source="10077:[34444..34482).4" Target="10307:[3547..3745).4" />
<Link Source="10077:[34444..34482).4" Target="10286:[1428..1444).3" />
<Link Source="10077:[34444..34482).4" Target="10286:[1390..1400).3" />
<Link Source="10077:[34444..34482).4" Target="10286:[1247..1258).3" />
<Link Source="10077:[34444..34482).4" Target="10286:[1478..1494).3" />
<Link Source="10077:[34444..34482).4" Target="10286:[18200..18223).3" />
<Link Source="10077:[34444..34482).4" Target="10346:[2766..2776).1" />
<Link Source="10077:[34444..34482).4" Target="10346:[932..947).3" />
<Link Source="10077:[34444..34482).4" Target="10346:[2803..2815).1" />
<Link Source="10077:[34444..34482).4" Target="10346:[1017..1033).3" />
<Link Source="10077:[34444..34482).4" Target="10346:[1074..1100).3" />
<Link Source="10077:[34444..34482).4" Target="10076:[1307..1365).1" />
<Link Source="10077:[34444..34482).5" Target="10076:[1307..1365).1" />
<Link Source="10077:[34521..34541).1" Target="10307:[3554..3645).1" />
<Link Source="10077:[34521..34541).1" Target="10077:[32358..32401).1" />
<Link Source="10077:[2926..2971).22" Target="10077:[2926..2971).5" />
<Link Source="10077:[2926..2971).22" Target="10077:[34521..34541).1" />
<Link Source="10077:[2926..2971).22" Target="10077:[34444..34482).4" />
<Link Source="10077:[2926..2971).22" Target="10077:[2456..2480).1" />
<Link Source="10076:[5678..5718).3" Target="10076:[5470..5538).4" />
<Link Source="10076:[5678..5718).3" Target="10076:[4989..5047).1" />
<Link Source="10302:[16344..16385).1" Target="25002:[4395..4432).3" />
<Link Source="10302:[16344..16385).1" Target="25002:[4395..4432).1" />
<Link Source="10302:[16248..16799).1" Target="25002:[4395..4432).3" />
<Link Source="10302:[16248..16799).1" Target="25002:[4395..4432).1" />
<Link Source="10302:[16411..16517).1" Target="10302:[16344..16385).1" />
<Link Source="10302:[16411..16517).1" Target="10077:[2926..2971).22" />
<Link Source="10302:[16411..16517).1" Target="25002:[4395..4432).1" />
<Link Source="10302:[16533..16736).1" Target="10302:[16344..16385).1" />
<Link Source="10302:[16533..16736).1" Target="10077:[2926..2971).22" />
<Link Source="10302:[16533..16736).1" Target="25002:[4395..4432).1" />
<Link Source="10302:[16647..16721).1" Target="10302:[16533..16736).1" />
<Link Source="10302:[16659..16719).1" Target="10302:[16533..16736).1" />
<Link Source="10302:[16889..16928).1" Target="10302:[16647..16721).1" />
<Link Source="10302:[16889..16928).1" Target="10302:[16659..16719).1" />
<Link Source="10302:[16930..16956).1" Target="10302:[16647..16721).1" />
<Link Source="10302:[16930..16956).1" Target="10302:[16659..16719).1" />
<Link Source="10302:[16811..17185).1" Target="10302:[16248..16799).1" />
<Link Source="10302:[16811..17185).1" Target="10302:[16659..16719).1" />
<Link Source="10302:[16982..17174).1" Target="10302:[16889..16928).1" />
<Link Source="10302:[16982..17174).1" Target="10077:[2926..2971).22" />
<Link Source="10302:[16982..17174).1" Target="10302:[16659..16719).1" />
<Link Source="10302:[17006..17067).1" Target="10302:[16659..16719).1" />
<Link Source="10286:[10010..10027).1" Target="10302:[16982..17174).1" />
<Link Source="10286:[10010..10027).1" Target="10302:[17006..17067).1" />
<Link Source="10286:[9966..10197).1" Target="10302:[16811..17185).1" />
<Link Source="10286:[9966..10197).1" Target="10302:[17006..17067).1" />
<Link Source="10286:[10053..10100).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10053..10100).1" Target="10077:[2926..2971).22" />
<Link Source="10286:[10053..10100).1" Target="10302:[17006..17067).1" />
<Link Source="10286:[10114..10186).1" Target="10286:[10010..10027).1" />
<Link Source="10286:[10114..10186).1" Target="10077:[2926..2971).22" />
<Link Source="10286:[10114..10186).1" Target="10302:[17006..17067).1" />
<Link Source="10286:[10121..10185).1" Target="10302:[17006..17067).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9073..9094).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10114..10186).1" />
<Link Source="10286:[9096..9108).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[9966..10197).1" />
<Link Source="10286:[9029..9954).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[9073..9094).1" />
<Link Source="10286:[9134..9189).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[9096..9108).1" />
<Link Source="10286:[9203..9282).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9134..9189).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[9203..9282).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10053..10100).1" />
<Link Source="10286:[9203..9282).2" Target="10286:[10121..10185).1" />
<Link Source="10286:[9305..9942).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9305..9942).1" Target="10286:[10121..10185).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[9298..9943).1" Target="10286:[9203..9282).2" />
<Link Source="10286:[9298..9943).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[9298..9943).2" Target="EXTERNAL" />
<Link Source="10286:[9298..9943).2" Target="10286:[9305..9942).1" />
<Link Source="10286:[9798..9837).1" Target="10286:[9305..9942).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9029..9954).1" />
<Link Source="10286:[10465..10663).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[10465..10663).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9298..9943).1" />
<Link Source="10286:[10551..10586).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10607..10651).1" Target="10286:[9798..9837).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10465..10663).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10551..10586).1" />
<Link Source="10286:[10465..10663).2" Target="10286:[10607..10651).1" />
<Link Source="10325:[4462..4594).1" Target="10286:[10465..10663).2" />
<Link Source="10325:[4462..4594).1" Target="10286:[10607..10651).1" />
<Link Source="10325:[4556..4582).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4462..4594).1" />
<Link Source="10286:[10675..11259).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10675..11259).1" />
<Link Source="10286:[10741..11248).1" Target="10286:[10465..10663).2" />
<Link Source="10286:[10741..11248).1" Target="10325:[4556..4582).1" />
<Link Source="10286:[11085..11098).1" Target="10286:[10741..11248).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[11085..11098).1" />
<Link Source="10325:[4549..4583).1" Target="10286:[10607..10651).1" />
<Link Source="10286:[10600..10652).1" Target="10325:[4549..4583).1" />
<Link Source="10286:[10600..10652).1" Target="10286:[10607..10651).1" />
<Link Source="10302:[16982..17174).3" Target="10302:[16930..16956).1" />
<Link Source="10302:[16982..17174).3" Target="10286:[10600..10652).1" />
<Link Source="10302:[16982..17174).3" Target="10302:[16659..16719).1" />
<Link Source="10302:[16989..17067).1" Target="10302:[16982..17174).3" />
<Link Source="10302:[16989..17067).1" Target="10302:[16659..16719).1" />
<Link Source="10302:[16647..16721).6" Target="10302:[16411..16517).1" />
<Link Source="10302:[16647..16721).6" Target="10302:[16989..17067).1" />
<Link Source="10302:[16647..16721).6" Target="EXTERNAL" />
<Link Source="10302:[16647..16721).6" Target="10302:[16533..16736).1" />
<Link Source="10302:[16752..16788).1" Target="10302:[16411..16517).1" />
<Link Source="10302:[16752..16788).1" Target="10302:[16647..16721).6" />
<Link Source="10302:[16752..16788).1" Target="25002:[4395..4432).1" />
<Link Source="10076:[5223..5250).10" Target="10302:[16752..16788).1" />
<Link Source="10076:[5223..5250).10" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).10" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).10" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).10" Target="10302:[16752..16788).1" />
<Link Source="10076:[5277..5448).10" Target="10076:[4989..5047).1" />
<Link Source="10077:[31258..31297).2" Target="10077:[39610..39829).1" />
<Link Source="10077:[31258..31297).2" Target="10077:[34685..34715).1" />
<Link Source="10077:[44231..44317).25" Target="10302:[16752..16788).1" />
<Link Source="10077:[44231..44317).25" Target="10077:[32567..32606).1" />
<Link Source="10077:[34685..34715).3" Target="10077:[2926..2971).3" />
<Link Source="10077:[31258..31297).3" Target="10077:[39610..39829).1" />
<Link Source="10077:[31258..31297).3" Target="10077:[34685..34715).3" />
<Link Source="10077:[31490..32331).31" Target="10077:[34685..34715).3" />
<Link Source="10077:[31842..31894).1" Target="EXTERNAL" />
<Link Source="10077:[31842..31894).1" Target="10302:[16752..16788).1" />
<Link Source="10077:[32358..32401).3" Target="10077:[34685..34715).3" />
<Link Source="10077:[32567..32606).3" Target="10077:[32358..32401).3" />
<Link Source="10077:[44231..44317).33" Target="10077:[31842..31894).1" />
<Link Source="10077:[44231..44317).33" Target="10077:[32567..32606).3" />
<Link Source="10077:[44231..44317).35" Target="10077:[32567..32606).3" />
<Link Source="10077:[44335..44374).19" Target="10077:[32567..32606).3" />
<Link Source="10077:[44342..44373).5" Target="10077:[32567..32606).3" />
<Link Source="10076:[853..1034).5" Target="10077:[44335..44374).19" />
<Link Source="10076:[853..1034).5" Target="10077:[44342..44373).5" />
<Link Source="10077:[32557..32607).11" Target="10077:[44335..44374).19" />
<Link Source="10077:[32557..32607).11" Target="10077:[32358..32401).3" />
<Link Source="10077:[32627..32647).3" Target="10077:[32358..32401).3" />
<Link Source="10077:[32670..32681).3" Target="10077:[32358..32401).3" />
<Link Source="10077:[32665..34501).23" Target="10077:[32557..32607).11" />
<Link Source="10077:[32665..34501).23" Target="10077:[32358..32401).3" />
<Link Source="10077:[32665..34501).24" Target="10077:[32627..32647).3" />
<Link Source="10077:[32665..34501).24" Target="10077:[32358..32401).3" />
<Link Source="10077:[32665..34501).26" Target="10077:[32358..32401).3" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[522..547).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[549..580).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).3" />
<Link Source="10845:[499..728).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[602..612).1" Target="10845:[522..547).1" />
<Link Source="10845:[602..612).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[637..638).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[660..678).1" Target="10845:[549..580).1" />
<Link Source="10845:[660..678).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[701..705).1" Target="25002:[4395..4432).1" />
<Link Source="10845:[499..728).2" Target="25002:[4395..4432).1" />
<Link Source="10845:[764..789).1" Target="10845:[602..612).1" />
<Link Source="10845:[764..789).1" Target="10845:[499..728).2" />
<Link Source="10845:[791..816).1" Target="10845:[637..638).1" />
<Link Source="10845:[791..816).1" Target="10845:[499..728).2" />
<Link Source="10845:[818..841).1" Target="10845:[660..678).1" />
<Link Source="10845:[818..841).1" Target="10845:[499..728).2" />
<Link Source="10845:[843..878).1" Target="10845:[701..705).1" />
<Link Source="10845:[843..878).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).1" />
<Link Source="10845:[740..997).1" Target="10845:[499..728).2" />
<Link Source="10845:[900..910).1" Target="10845:[764..789).1" />
<Link Source="10845:[900..910).1" Target="10845:[499..728).2" />
<Link Source="10845:[912..933).1" Target="10845:[791..816).1" />
<Link Source="10845:[912..933).1" Target="10845:[499..728).2" />
<Link Source="10845:[935..953).1" Target="10845:[818..841).1" />
<Link Source="10845:[935..953).1" Target="10845:[499..728).2" />
<Link Source="10845:[955..974).1" Target="10845:[843..878).1" />
<Link Source="10845:[955..974).1" Target="10845:[499..728).2" />
<Link Source="10845:[740..997).2" Target="10845:[499..728).2" />
<Link Source="10843:[1173..1198).1" Target="10845:[900..910).1" />
<Link Source="10843:[1173..1198).1" Target="10845:[740..997).2" />
<Link Source="10843:[1200..1225).1" Target="10845:[912..933).1" />
<Link Source="10843:[1200..1225).1" Target="10845:[740..997).2" />
<Link Source="10843:[1227..1250).1" Target="10845:[935..953).1" />
<Link Source="10843:[1227..1250).1" Target="10845:[740..997).2" />
<Link Source="10843:[1252..1287).1" Target="10845:[955..974).1" />
<Link Source="10843:[1252..1287).1" Target="10845:[740..997).2" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).1" />
<Link Source="10843:[1147..1833).1" Target="10845:[740..997).2" />
<Link Source="10843:[734..744).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[734..744).1" Target="10845:[740..997).2" />
<Link Source="10843:[778..799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[778..799).1" Target="10845:[740..997).2" />
<Link Source="10843:[835..853).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[835..853).1" Target="10845:[740..997).2" />
<Link Source="10843:[1113..1134).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1113..1134).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).1" Target="10845:[740..997).2" />
<Link Source="10843:[1313..1354).2" Target="10843:[1173..1198).1" />
<Link Source="10843:[1313..1354).2" Target="10843:[1313..1354).1" />
<Link Source="10843:[1313..1354).2" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).1" Target="10845:[740..997).2" />
<Link Source="10843:[1368..1474).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1368..1474).2" Target="10843:[1368..1474).1" />
<Link Source="10843:[1368..1474).2" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).1" Target="10845:[740..997).2" />
<Link Source="10843:[1488..1600).2" Target="10843:[1252..1287).1" />
<Link Source="10843:[1488..1600).2" Target="10843:[1488..1600).1" />
<Link Source="10843:[1488..1600).2" Target="10845:[740..997).2" />
<Link Source="10843:[1616..1631).1" Target="10843:[1173..1198).1" />
<Link Source="10843:[1616..1631).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1616..1631).1" Target="10845:[740..997).2" />
<Link Source="10843:[1659..1685).1" Target="10843:[1200..1225).1" />
<Link Source="10843:[1659..1685).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1659..1685).1" Target="10845:[740..997).2" />
<Link Source="10843:[1724..1742).1" Target="10843:[1227..1250).1" />
<Link Source="10843:[1724..1742).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1724..1742).1" Target="10845:[740..997).2" />
<Link Source="10843:[1778..1799).1" Target="10843:[1252..1287).1" />
<Link Source="10843:[1778..1799).1" Target="10843:[1147..1833).1" />
<Link Source="10843:[1778..1799).1" Target="10845:[740..997).2" />
<Link Source="25002:[4395..4432).37" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).37" Target="10077:[31842..31894).1" />
<Link Source="25002:[4395..4432).37" Target="10843:[1616..1631).1" />
<Link Source="25002:[4395..4432).37" Target="10843:[1659..1685).1" />
<Link Source="25002:[4395..4432).37" Target="10843:[1724..1742).1" />
<Link Source="25002:[4395..4432).37" Target="10843:[1778..1799).1" />
<Link Source="25002:[4395..4432).37" Target="28001:[73991..74036).1" />
<Link Source="10076:[5223..5250).18" Target="25002:[4395..4432).37" />
<Link Source="10076:[5223..5250).18" Target="10076:[5223..5250).1" />
<Link Source="10076:[5223..5250).18" Target="10076:[4989..5047).1" />
<Link Source="10076:[5277..5448).18" Target="10076:[5174..5197).1" />
<Link Source="10076:[5277..5448).18" Target="25002:[4395..4432).37" />
<Link Source="10076:[5277..5448).18" Target="10076:[4989..5047).1" />
<Link Source="10077:[15216..15245).1" Target="25002:[4395..4432).37" />
<Link Source="10077:[15216..15245).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15171..15372).1" Target="25002:[4395..4432).37" />
<Link Source="10077:[15171..15372).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15279..15357).1" Target="10077:[15216..15245).1" />
<Link Source="10077:[15279..15357).1" Target="25002:[4395..4432).37" />
<Link Source="10077:[15279..15357).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[15286..15310).1" Target="10077:[2456..2480).1" />
<Link Source="10077:[2877..2892).10" Target="10077:[15279..15357).1" />
<Link Source="10077:[2877..2892).10" Target="10077:[15286..15310).1" />
<Link Source="10077:[2852..2986).10" Target="10077:[15171..15372).1" />
<Link Source="10077:[2852..2986).10" Target="10077:[15286..15310).1" />
<Link Source="10077:[2926..2971).57" Target="10077:[2852..2986).10" />
<Link Source="10077:[2926..2971).57" Target="10077:[2877..2892).10" />
<Link Source="10077:[2926..2971).57" Target="25002:[4395..4432).37" />
<Link Source="10077:[2926..2971).57" Target="10077:[15286..15310).1" />
<Link Source="10077:[34685..34715).4" Target="10077:[15286..15310).1" />
<Link Source="10077:[31258..31297).4" Target="10077:[39610..39829).1" />
<Link Source="10077:[31258..31297).4" Target="10077:[34685..34715).4" />
<Link Source="10077:[31490..32331).43" Target="10077:[34685..34715).4" />
<Link Source="10077:[32358..32401).4" Target="10077:[34685..34715).4" />
<Link Source="10077:[32567..32606).4" Target="10077:[32358..32401).4" />
<Link Source="10077:[44231..44317).41" Target="10077:[2926..2971).57" />
<Link Source="10077:[44231..44317).41" Target="10077:[32567..32606).4" />
<Link Source="10077:[44231..44317).43" Target="10077:[32567..32606).4" />
<Link Source="10077:[44335..44374).23" Target="10077:[32567..32606).4" />
<Link Source="10077:[44342..44373).6" Target="10077:[32567..32606).4" />
<Link Source="10076:[853..1034).6" Target="10077:[44335..44374).23" />
<Link Source="10076:[853..1034).6" Target="10077:[44342..44373).6" />
<Link Source="10077:[32557..32607).15" Target="10077:[44335..44374).23" />
<Link Source="10077:[32557..32607).15" Target="10077:[32358..32401).4" />
<Link Source="10077:[32627..32647).4" Target="10077:[32358..32401).4" />
<Link Source="10077:[32670..32681).4" Target="10077:[32358..32401).4" />
<Link Source="10077:[32665..34501).35" Target="10077:[32557..32607).15" />
<Link Source="10077:[32665..34501).35" Target="10077:[32358..32401).4" />
<Link Source="10077:[32665..34501).36" Target="10077:[32627..32647).4" />
<Link Source="10077:[32665..34501).36" Target="10077:[32358..32401).4" />
<Link Source="10077:[32665..34501).38" Target="10077:[32358..32401).4" />
<Link Source="10077:[15286..15356).1" Target="10077:[2456..2480).1" />
<Link Source="10307:[3496..3521).2" Target="10077:[2926..2971).57" />
<Link Source="10307:[3496..3521).2" Target="10077:[15286..15356).1" />
<Link Source="10307:[3452..3756).2" Target="10077:[2926..2971).57" />
<Link Source="10307:[3452..3756).2" Target="10077:[15286..15356).1" />
<Link Source="10307:[3547..3745).11" Target="EXTERNAL" />
<Link Source="10307:[3547..3745).11" Target="10077:[15286..15356).1" />
<Link Source="10307:[3555..3600).2" Target="10077:[15286..15356).1" />
<Link Source="10298:[494..511).8" Target="10307:[3547..3745).11" />
<Link Source="10298:[494..511).8" Target="10307:[3555..3600).2" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3228..3245).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3247..3264).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).3" />
<Link Source="10307:[3165..3440).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3247..3264).1" />
<Link Source="10307:[3290..3331).2" Target="10307:[3290..3331).1" />
<Link Source="10307:[3290..3331).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).1" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).2" Target="10307:[3165..3440).1" />
<Link Source="10307:[3345..3429).2" Target="10307:[3452..3756).2" />
<Link Source="10307:[3345..3429).2" Target="10307:[3228..3245).1" />
<Link Source="10307:[3345..3429).2" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).4" Target="10307:[3247..3264).1" />
<Link Source="10307:[3345..3429).4" Target="25002:[4395..4432).1" />
<Link Source="10307:[3345..3429).5" Target="25002:[4395..4432).1" />
<Link Source="10307:[3352..3428).1" Target="25002:[4395..4432).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3345..3429).1" />
<Link Source="10307:[1072..1083).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1085..1102).1" Target="10307:[3345..3429).2" />
<Link Source="10307:[1085..1102).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1104..1135).1" Target="10307:[3345..3429).4" />
<Link Source="10307:[1104..1135).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).1" Target="10307:[3345..3429).5" />
<Link Source="10307:[1028..1341).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[1072..1083).1" />
<Link Source="10307:[1161..1165).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[1085..1102).1" />
<Link Source="10307:[1167..1172).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1028..1341).2" Target="10307:[3352..3428).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1161..1165).1" />
<Link Source="10286:[1549..1560).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1562..1579).1" Target="10307:[1167..1172).1" />
<Link Source="10286:[1562..1579).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).1" />
<Link Source="10286:[1532..2083).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[726..773).5" Target="10286:[1532..2083).1" />
<Link Source="10286:[726..773).5" Target="10307:[1028..1341).2" />
<Link Source="10286:[815..820).5" Target="10286:[1532..2083).1" />
<Link Source="10286:[815..820).5" Target="10307:[1028..1341).2" />
<Link Source="10286:[2975..3015).5" Target="10286:[1532..2083).1" />
<Link Source="10286:[2975..3015).5" Target="10307:[1028..1341).2" />
<Link Source="10286:[17802..17818).5" Target="10286:[1532..2083).1" />
<Link Source="10286:[17802..17818).5" Target="10307:[1028..1341).2" />
<Link Source="10286:[18200..18223).5" Target="10286:[1532..2083).1" />
<Link Source="10286:[18200..18223).5" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1605..1638).2" Target="10286:[1549..1560).1" />
<Link Source="10286:[1605..1638).2" Target="10286:[1605..1638).1" />
<Link Source="10286:[1605..1638).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1688..1781).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1688..1781).2" Target="EXTERNAL" />
<Link Source="10286:[1688..1781).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1708..1779).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).9" Target="10286:[1688..1781).1" />
<Link Source="10298:[471..492).9" Target="10286:[1708..1779).1" />
<Link Source="10298:[494..511).9" Target="10286:[1688..1781).2" />
<Link Source="10298:[494..511).9" Target="10286:[1708..1779).1" />
<Link Source="10286:[1820..1963).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[1820..1963).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[1820..1963).2" Target="EXTERNAL" />
<Link Source="10286:[1820..1963).2" Target="10307:[1028..1341).2" />
<Link Source="10286:[1840..1888).1" Target="10307:[1028..1341).2" />
<Link Source="10298:[471..492).10" Target="10286:[1820..1963).1" />
<Link Source="10298:[471..492).10" Target="10286:[1840..1888).1" />
<Link Source="10298:[494..511).10" Target="10286:[1820..1963).2" />
<Link Source="10298:[494..511).10" Target="10286:[1840..1888).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[1977..1981).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[1977..1981).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2003..2013).1" Target="10286:[1562..1579).1" />
<Link Source="10286:[2003..2013).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2003..2013).1" Target="10307:[1028..1341).2" />
<Link Source="10286:[2036..2052).1" Target="10286:[1549..1560).1" />
<Link Source="10286:[2036..2052).1" Target="10307:[3452..3756).2" />
<Link Source="10286:[2036..2052).1" Target="10286:[1532..2083).1" />
<Link Source="10286:[2036..2052).1" Target="10307:[1028..1341).2" />
<Link Source="10307:[683..708).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[683..708).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).1" Target="10307:[3352..3428).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1104..1135).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[1206..1253).1" />
<Link Source="10307:[1206..1253).2" Target="10307:[3352..3428).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1104..1135).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[1028..1341).1" />
<Link Source="10307:[1273..1298).1" Target="10307:[3352..3428).1" />
<Link Source="25002:[4395..4432).43" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).43" Target="10307:[3345..3429).5" />
<Link Source="25002:[4395..4432).43" Target="10307:[3452..3756).2" />
<Link Source="25002:[4395..4432).43" Target="10286:[2036..2052).1" />
<Link Source="25002:[4395..4432).43" Target="10286:[2003..2013).1" />
<Link Source="25002:[4395..4432).43" Target="10286:[1977..1981).1" />
<Link Source="25002:[4395..4432).43" Target="10286:[17802..17818).5" />
<Link Source="25002:[4395..4432).43" Target="10286:[18200..18223).5" />
<Link Source="25002:[4395..4432).43" Target="10307:[1273..1298).1" />
<Link Source="25002:[4395..4432).43" Target="28001:[73991..74036).1" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13685..13708).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13710..13735).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13737..13783).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13785..13824).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).3" />
<Link Source="10319:[13647..14061).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).1" Target="10319:[13685..13708).1" />
<Link Source="10319:[13850..13948).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13850..13948).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).3" Target="10319:[13737..13783).1" />
<Link Source="10319:[13850..13948).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13850..13948).4" Target="10319:[13785..13824).1" />
<Link Source="10319:[13850..13948).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13863..13947).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13850..13948).1" />
<Link Source="10319:[14931..14954).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14956..14981).1" Target="10319:[13850..13948).2" />
<Link Source="10319:[14956..14981).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14983..15029).1" Target="10319:[13850..13948).3" />
<Link Source="10319:[14983..15029).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15031..15070).1" Target="10319:[13850..13948).4" />
<Link Source="10319:[15031..15070).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[14862..16302).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[15096..15130).1" />
<Link Source="10319:[15096..15130).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[14931..14954).1" />
<Link Source="10319:[15146..15291).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[14956..14981).1" />
<Link Source="10319:[15146..15291).2" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).3" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).4" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[14983..15029).1" />
<Link Source="10319:[15146..15291).5" Target="10319:[15146..15291).4" />
<Link Source="10319:[15146..15291).5" Target="10319:[13863..13947).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[15146..15291).5" />
<Link Source="10319:[15146..15291).6" Target="10319:[15031..15070).1" />
<Link Source="10319:[15146..15291).6" Target="10319:[13863..13947).1" />
<Link Source="10319:[15159..15290).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15146..15291).1" />
<Link Source="10319:[20002..20025).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20027..20052).1" Target="10319:[15146..15291).2" />
<Link Source="10319:[20027..20052).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20054..20093).1" Target="10319:[15146..15291).3" />
<Link Source="10319:[20054..20093).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20095..20126).1" Target="10319:[15146..15291).6" />
<Link Source="10319:[20095..20126).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[14862..16302).1" />
<Link Source="10319:[19916..30085).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20152..24647).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20152..24647).1" Target="25002:[4395..4432).43" />
<Link Source="10319:[20152..24647).1" Target="10319:[15159..15290).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20002..20025).1" />
<Link Source="10319:[20508..20675).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20027..20052).1" />
<Link Source="10319:[20508..20675).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20054..20093).1" />
<Link Source="10319:[20508..20675).3" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20095..20126).1" />
<Link Source="10319:[20508..20675).4" Target="10319:[20152..24647).1" />
<Link Source="10319:[20508..20675).5" Target="10319:[20152..24647).1" />
<Link Source="10319:[20515..20674).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20508..20675).1" />
<Link Source="10319:[41849..41874).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41889..41914).1" Target="10319:[20508..20675).2" />
<Link Source="10319:[41889..41914).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41929..41968).1" Target="10319:[20508..20675).3" />
<Link Source="10319:[41929..41968).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41983..42014).1" Target="10319:[20508..20675).4" />
<Link Source="10319:[41983..42014).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42029..42063).1" Target="10319:[20508..20675).5" />
<Link Source="10319:[42029..42063).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[19916..30085).1" />
<Link Source="10319:[41732..45579).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42089..42141).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[42089..42141).1" />
<Link Source="10319:[42478..42805).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20152..24647).1" />
<Link Source="10319:[42821..42938).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[42821..42938).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[42821..42938).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[42821..42938).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[42839..42937).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42821..42938).1" />
<Link Source="10319:[63849..63870).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63885..63919).1" Target="10319:[42821..42938).2" />
<Link Source="10319:[63885..63919).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63934..63945).1" Target="10319:[42821..42938).3" />
<Link Source="10319:[63934..63945).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63960..63969).1" Target="10319:[42821..42938).4" />
<Link Source="10319:[63960..63969).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63984..64009).1" Target="10319:[42821..42938).6" />
<Link Source="10319:[63984..64009).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[63768..64484).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[63885..63919).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[64035..64445).1" />
<Link Source="10319:[64035..64445).2" Target="10319:[42839..42937).1" />
<Link Source="10319:[64461..64473).1" Target="10319:[42839..42937).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[64461..64473).1" />
<Link Source="10319:[42821..42938).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[42821..42938).7" />
<Link Source="10319:[42952..43079).2" Target="10319:[42952..43079).1" />
<Link Source="10319:[42952..43079).2" Target="10319:[20515..20674).1" />
<Link Source="10354:[10975..11012).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10975..11012).1" />
<Link Source="10354:[11026..11097).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[11026..11097).3" Target="10354:[10826..10838).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[11026..11097).1" />
<Link Source="10354:[11142..11154).1" Target="10354:[10826..10838).1" />
<Link Source="10354:[10809..10838).1" Target="10354:[11142..11154).1" />
<Link Source="10319:[43108..43134).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11244..11285).1" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[10809..10838).1" />
<Link Source="10354:[11244..11285).2" Target="10354:[11026..11097).1" />
<Link Source="10354:[11244..11285).2" Target="10319:[43108..43134).1" />
<Link Source="10354:[11244..11285).3" Target="10319:[43108..43134).1" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).2" />
<Link Source="10354:[3419..3448).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).1" />
<Link Source="10354:[3398..3626).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3068..3073).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3068..3073).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3200..3211).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3200..3211).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3319..3325).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3319..3325).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3380..3385).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3380..3385).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3474..3479).1" Target="10354:[3419..3448).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3474..3479).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3501..3506).1" Target="EXTERNAL" />
<Link Source="10354:[3501..3506).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3501..3506).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3587).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3546..3557).1" Target="10354:[3546..3587).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3546..3557).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3615).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[3601..3607).1" Target="10354:[3601..3615).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[3398..3626).1" />
<Link Source="10354:[3601..3607).1" Target="10354:[11244..11285).3" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).2" />
<Link Source="10354:[11244..11285).4" Target="10354:[11244..11285).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3501..3506).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3557).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3601..3607).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3474..3479).1" />
<Link Source="10354:[11244..11285).4" Target="10354:[3546..3587).1" />
<Link Source="10354:[11244..11285).4" Target="10319:[43108..43134).1" />
<Link Source="10354:[11312..11328).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[3684..3818).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3684..3818).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).1" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).1" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).2" Target="10354:[11312..11328).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[3684..3818).1" />
<Link Source="10354:[3720..3803).3" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).3" Target="10354:[3720..3803).2" />
<Link Source="10354:[3720..3803).3" Target="10354:[11312..11328).1" />
<Link Source="10354:[11299..11330).1" Target="10354:[3720..3803).1" />
<Link Source="10354:[11299..11330).1" Target="10319:[43108..43134).1" />
<Link Source="10354:[11344..11360).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[11344..11360).1" Target="10319:[43108..43134).1" />
<Link Source="10319:[43095..43135).1" Target="10354:[11344..11360).1" />
<Link Source="10319:[43095..43135).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20152..24647).1" />
<Link Source="10319:[43149..43246).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43173..43245).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43149..43246).1" />
<Link Source="10319:[50313..50328).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50330..50355).1" Target="10319:[43149..43246).2" />
<Link Source="10319:[50330..50355).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[50313..50328).1" />
<Link Source="10319:[50381..51340).1" Target="10319:[43173..43245).1" />
<Link Source="10319:[51282..51325).1" Target="EXTERNAL" />
<Link Source="10319:[51282..51325).1" Target="10319:[50381..51340).1" />
<Link Source="10319:[43262..43312).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[43326..43490).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43326..43490).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[42089..42141).1" />
<Link Source="10319:[43326..43490).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[41929..41968).1" />
<Link Source="10319:[43326..43490).6" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[51282..51325).1" />
<Link Source="10319:[43326..43490).7" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[43262..43312).1" />
<Link Source="10319:[43326..43490).10" Target="10319:[20515..20674).1" />
<Link Source="10319:[43326..43489).1" Target="10319:[20515..20674).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43490).1" />
<Link Source="10312:[994..1013).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43490).2" />
<Link Source="10312:[1028..1062).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43490).3" />
<Link Source="10312:[1077..1093).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1108..1117).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43490).6" />
<Link Source="10312:[1132..1171).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43490).7" />
<Link Source="10312:[1186..1207).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43490).4" />
<Link Source="10312:[1222..1235).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43490).10" />
<Link Source="10312:[1250..1296).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[942..1750).1" Target="10319:[41732..45579).1" />
<Link Source="10312:[942..1750).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1322..1739).1" Target="10312:[1186..1207).1" />
<Link Source="10312:[1322..1739).1" Target="10319:[43326..43489).1" />
<Link Source="10312:[1326..1357).1" Target="10319:[43326..43489).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1322..1739).1" />
<Link Source="10353:[7504..7530).1" Target="10312:[1326..1357).1" />
<Link Source="10353:[7556..7642).1" Target="10353:[7504..7530).1" />
<Link Source="10353:[7556..7642).1" Target="EXTERNAL" />
<Link Source="10353:[7556..7642).1" Target="10312:[1326..1357).1" />
<Link Source="10312:[1585..1724).1" Target="10312:[994..1013).1" />
<Link Source="10312:[1585..1724).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).2" Target="10312:[1028..1062).1" />
<Link Source="10312:[1585..1724).2" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).3" Target="10312:[1077..1093).1" />
<Link Source="10312:[1585..1724).3" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).4" Target="10312:[1108..1117).1" />
<Link Source="10312:[1585..1724).4" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).5" Target="10312:[1132..1171).1" />
<Link Source="10312:[1585..1724).5" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).6" Target="10312:[1186..1207).1" />
<Link Source="10312:[1585..1724).6" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).7" Target="10312:[1222..1235).1" />
<Link Source="10312:[1585..1724).7" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1724).8" Target="10312:[1250..1296).1" />
<Link Source="10312:[1585..1724).8" Target="10353:[7556..7642).1" />
<Link Source="10312:[1585..1723).1" Target="10353:[7556..7642).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1724).1" />
<Link Source="10312:[5721..5740).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1724).2" />
<Link Source="10312:[5755..5789).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1724).3" />
<Link Source="10312:[5804..5815).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1724).4" />
<Link Source="10312:[5830..5839).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1724).5" />
<Link Source="10312:[5854..5893).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1724).6" />
<Link Source="10312:[5908..5929).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1724).7" />
<Link Source="10312:[5944..5957).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1724).8" />
<Link Source="10312:[5972..6018).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[942..1750).1" />
<Link Source="10312:[5663..6444).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).1" Target="10312:[1585..1723).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[5755..5789).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[6044..6433).1" />
<Link Source="10312:[6044..6433).2" Target="10312:[1585..1723).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[5721..5740).1" />
<Link Source="10312:[6110..6221).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).2" Target="10312:[5804..5815).1" />
<Link Source="10312:[6110..6221).2" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).3" Target="10312:[5830..5839).1" />
<Link Source="10312:[6110..6221).3" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).4" Target="10312:[5854..5893).1" />
<Link Source="10312:[6110..6221).4" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).5" Target="10312:[5908..5929).1" />
<Link Source="10312:[6110..6221).5" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).6" Target="10312:[5944..5957).1" />
<Link Source="10312:[6110..6221).6" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6221).7" Target="10312:[5972..6018).1" />
<Link Source="10312:[6110..6221).7" Target="10312:[6044..6433).2" />
<Link Source="10312:[6110..6220).1" Target="10312:[6044..6433).2" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6221).1" />
<Link Source="10312:[3696..3715).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6221).2" />
<Link Source="10312:[3717..3728).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6221).3" />
<Link Source="10312:[3730..3739).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6221).4" />
<Link Source="10312:[3741..3780).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6221).5" />
<Link Source="10312:[3782..3803).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6221).6" />
<Link Source="10312:[3805..3818).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6221).7" />
<Link Source="10312:[3820..3866).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[5663..6444).1" />
<Link Source="10312:[3645..5112).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3905..3919).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).2" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).9" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).9" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).9" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).9" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).10" Target="10312:[3905..3919).1" />
<Link Source="10354:[3720..3803).11" Target="10354:[3684..3818).2" />
<Link Source="10354:[3720..3803).11" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).11" Target="10354:[3720..3803).10" />
<Link Source="10354:[3720..3803).11" Target="10312:[3905..3919).1" />
<Link Source="10312:[3892..3921).1" Target="10354:[3720..3803).9" />
<Link Source="10312:[3892..3921).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[3935..3968).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[3948..3966).1" Target="10312:[6110..6220).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3935..3968).1" />
<Link Source="10353:[4698..4724).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4750..4847).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4750..4847).1" Target="EXTERNAL" />
<Link Source="10353:[4750..4847).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[4863..5000).1" Target="EXTERNAL" />
<Link Source="10353:[4863..5000).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[4863..5000).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5079..5183).1" Target="EXTERNAL" />
<Link Source="10353:[5079..5183).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[4698..4724).1" />
<Link Source="10353:[5197..5323).1" Target="10353:[5079..5183).1" />
<Link Source="10353:[5197..5323).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).1" Target="EXTERNAL" />
<Link Source="10353:[5485..5759).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[4698..4724).1" />
<Link Source="10353:[5485..5759).2" Target="10353:[5485..5759).1" />
<Link Source="10353:[5485..5759).2" Target="10312:[3948..3966).1" />
<Link Source="10353:[5485..5759).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).1" Target="EXTERNAL" />
<Link Source="10353:[5775..5979).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[4698..4724).1" />
<Link Source="10353:[5775..5979).3" Target="10353:[5775..5979).1" />
<Link Source="10353:[5775..5979).3" Target="10312:[3948..3966).1" />
<Link Source="10353:[5995..6029).1" Target="10353:[5775..5979).3" />
<Link Source="10353:[5995..6029).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6002..6028).1" Target="10312:[3948..3966).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[5995..6029).1" />
<Link Source="10353:[6343..6358).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).1" Target="10353:[6002..6028).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6343..6358).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6384..6410).1" />
<Link Source="10353:[6384..6410).2" Target="10353:[6002..6028).1" />
<Link Source="10312:[3984..4005).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[3645..5112).1" />
<Link Source="10312:[4019..5073).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).2" Target="10312:[6110..6220).1" />
<Link Source="10312:[4060..4080).1" Target="10312:[6110..6220).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[3696..3715).1" />
<Link Source="10354:[4919..5009).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4962..4966).1" Target="10312:[4060..4080).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4919..5009).1" />
<Link Source="10354:[4058..4122).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[4058..4122).1" />
<Link Source="10354:[4094..4107).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[4094..4107).1" Target="10354:[4962..4966).1" />
<Link Source="10354:[4955..4994).1" Target="10354:[4094..4107).1" />
<Link Source="10354:[4955..4994).1" Target="10312:[4060..4080).1" />
<Link Source="10312:[4019..5073).4" Target="10354:[4955..4994).1" />
<Link Source="10312:[4019..5073).4" Target="10312:[6110..6220).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).1" />
<Link Source="10312:[4019..5073).5" Target="10312:[4019..5073).4" />
<Link Source="10312:[4019..5073).5" Target="10312:[6110..6220).1" />
<Link Source="10312:[4134..4806).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4134..4806).2" Target="10312:[3984..4005).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4134..4806).1" />
<Link Source="10312:[4134..4806).2" Target="10312:[4019..5073).5" />
<Link Source="10312:[4534..4658).1" Target="10312:[3696..3715).1" />
<Link Source="10312:[4534..4658).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).2" Target="10312:[3717..3728).1" />
<Link Source="10312:[4534..4658).2" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).3" Target="10312:[3730..3739).1" />
<Link Source="10312:[4534..4658).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).4" Target="10312:[3741..3780).1" />
<Link Source="10312:[4534..4658).4" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).5" Target="10312:[3782..3803).1" />
<Link Source="10312:[4534..4658).5" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).6" Target="10312:[3645..5112).1" />
<Link Source="10312:[4534..4658).6" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).7" Target="10312:[3805..3818).1" />
<Link Source="10312:[4534..4658).7" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4658).8" Target="10312:[3820..3866).1" />
<Link Source="10312:[4534..4658).8" Target="10312:[4134..4806).2" />
<Link Source="10312:[4534..4657).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4658).1" />
<Link Source="10312:[5188..5207).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4658).2" />
<Link Source="10312:[5209..5220).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4658).3" />
<Link Source="10312:[5222..5231).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4658).4" />
<Link Source="10312:[5233..5272).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4658).5" />
<Link Source="10312:[5274..5295).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4658).6" />
<Link Source="10312:[5297..5318).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4658).7" />
<Link Source="10312:[5320..5333).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4658).8" />
<Link Source="10312:[5335..5381).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4019..5073).1" />
<Link Source="10312:[5124..5404).1" Target="10312:[4534..4657).1" />
<Link Source="10312:[4534..4658).9" Target="10312:[4134..4806).2" />
<Link Source="10312:[4685..4699).1" Target="10312:[4134..4806).2" />
<Link Source="10354:[3684..3818).3" Target="10312:[3696..3715).1" />
<Link Source="10354:[3684..3818).3" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).17" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).17" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).17" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).17" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).18" Target="10312:[4685..4699).1" />
<Link Source="10354:[3720..3803).19" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).19" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).19" Target="10354:[3720..3803).18" />
<Link Source="10354:[3720..3803).19" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).1" Target="10354:[3720..3803).17" />
<Link Source="10312:[4680..4787).1" Target="10312:[4134..4806).2" />
<Link Source="10312:[4826..5058).1" Target="10312:[3782..3803).1" />
<Link Source="10312:[4826..5058).1" Target="EXTERNAL" />
<Link Source="10312:[4826..5058).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4826..5058).2" Target="10312:[4019..5073).5" />
<Link Source="10382:[1340..1359).1" Target="10312:[4534..4658).1" />
<Link Source="10382:[1340..1359).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1361..1372).1" Target="10312:[4534..4658).2" />
<Link Source="10382:[1361..1372).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1374..1383).1" Target="10312:[4534..4658).3" />
<Link Source="10382:[1374..1383).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1385..1424).1" Target="10312:[4534..4658).4" />
<Link Source="10382:[1385..1424).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1426..1447).1" Target="10312:[4534..4658).5" />
<Link Source="10382:[1426..1447).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1449..1470).1" Target="10312:[4534..4658).6" />
<Link Source="10382:[1449..1470).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1472..1485).1" Target="10312:[4534..4658).7" />
<Link Source="10382:[1472..1485).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1487..1533).1" Target="10312:[5335..5381).1" />
<Link Source="10382:[1487..1533).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1275..1939).1" Target="10312:[4019..5073).5" />
<Link Source="10382:[1275..1939).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1572..1586).1" Target="10312:[4534..4657).1" />
<Link Source="10354:[3684..3818).4" Target="10382:[1340..1359).1" />
<Link Source="10354:[3684..3818).4" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).25" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).25" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).25" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).25" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).26" Target="10382:[1572..1586).1" />
<Link Source="10354:[3720..3803).27" Target="10354:[3684..3818).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[11244..11285).4" />
<Link Source="10354:[3720..3803).27" Target="10354:[3720..3803).26" />
<Link Source="10354:[3720..3803).27" Target="10382:[1572..1586).1" />
<Link Source="10382:[1559..1588).1" Target="10354:[3720..3803).25" />
<Link Source="10382:[1559..1588).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1619..1629).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[913..1046).1" Target="10382:[1275..1939).1" />
<Link Source="10382:[913..1046).1" Target="10382:[1619..1629).1" />
<Link Source="10382:[949..1031).1" Target="EXTERNAL" />
<Link Source="10382:[949..1031).1" Target="10382:[1619..1629).1" />
<Link Source="10382:[1604..1691).1" Target="10382:[949..1031).1" />
<Link Source="10382:[1604..1691).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1604..1691).2" Target="10382:[1426..1447).1" />
<Link Source="10382:[1604..1691).2" Target="10382:[1604..1691).1" />
<Link Source="10382:[1604..1691).2" Target="10312:[4534..4657).1" />
<Link Source="10382:[1604..1691).3" Target="10312:[4534..4657).1" />
<Link Source="10382:[1737..1753).1" Target="10312:[4534..4657).1" />
<Link Source="10376:[1542..2071).1" Target="10382:[1275..1939).1" />
<Link Source="10376:[1542..2071).1" Target="10382:[1737..1753).1" />
<Link Source="10376:[1578..2009).1" Target="10382:[1737..1753).1" />
<Link Source="10376:[1578..2009).2" Target="10376:[1542..2071).1" />
<Link Source="10376:[1578..2009).2" Target="10319:[50381..51340).1" />
<Link Source="10376:[1578..2009).2" Target="10376:[1578..2009).1" />
<Link Source="10376:[1578..2009).2" Target="10382:[1737..1753).1" />
<Link Source="10376:[1653..1717).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1739..1899).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[1739..1899).1" Target="10319:[50381..51340).1" />
<Link Source="10376:[1739..1899).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1850..1876).1" Target="10376:[1739..1899).1" />
<Link Source="10376:[1850..1876).1" Target="10319:[50381..51340).1" />
<Link Source="10376:[1850..1876).2" Target="10376:[1739..1899).1" />
<Link Source="10376:[1850..1876).3" Target="10376:[1653..1717).1" />
<Link Source="10376:[1850..1876).3" Target="10376:[1850..1876).1" />
<Link Source="10376:[1850..1876).3" Target="10376:[1850..1876).2" />
<Link Source="10376:[1850..1876).3" Target="10319:[50381..51340).1" />
<Link Source="10376:[1850..1876).3" Target="10376:[1739..1899).1" />
<Link Source="10376:[1921..1990).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[1921..1990).1" Target="10376:[1850..1876).3" />
<Link Source="10376:[1921..1990).1" Target="10376:[1578..2009).2" />
<Link Source="10376:[1921..1990).2" Target="10376:[1653..1717).1" />
<Link Source="10376:[1921..1990).2" Target="10376:[1578..2009).2" />
<Link Source="10376:[1921..1990).3" Target="10376:[1578..2009).2" />
<Link Source="10376:[2027..2056).1" Target="10376:[1542..2071).1" />
<Link Source="10376:[2027..2056).1" Target="10376:[1921..1990).1" />
<Link Source="10376:[2027..2056).1" Target="10382:[1737..1753).1" />
<Link Source="10382:[1707..1928).1" Target="10376:[2027..2056).1" />
<Link Source="10382:[1707..1928).1" Target="10312:[4534..4657).1" />
<Link Source="10382:[1707..1928).2" Target="10382:[1707..1928).1" />
<Link Source="10382:[1707..1928).2" Target="10382:[1361..1372).1" />
<Link Source="10382:[1707..1928).2" Target="10376:[1921..1990).1" />
<Link Source="10382:[1707..1928).2" Target="10312:[4534..4657).1" />
<Link Source="10382:[1793..1913).1" Target="10382:[1707..1928).2" />
<Link Source="10382:[1793..1913).2" Target="10382:[1374..1383).1" />
<Link Source="10382:[1793..1913).2" Target="10382:[1707..1928).2" />
<Link Source="10382:[1793..1913).3" Target="10382:[1426..1447).1" />
<Link Source="10382:[1793..1913).3" Target="10382:[1707..1928).2" />
<Link Source="10382:[1793..1913).6" Target="10382:[1472..1485).1" />
<Link Source="10382:[1793..1913).6" Target="10382:[1707..1928).2" />
<Link Source="10382:[1793..1913).7" Target="10382:[1487..1533).1" />
<Link Source="10382:[1793..1913).7" Target="10382:[1707..1928).2" />
<Link Source="10382:[1811..1911).1" Target="10382:[1707..1928).2" />
<Link Source="10312:[63424..63437).1" Target="10382:[1793..1913).1" />
<Link Source="10312:[63424..63437).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63439..63448).1" Target="10382:[1793..1913).2" />
<Link Source="10312:[63439..63448).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63450..63471).1" Target="10382:[1793..1913).3" />
<Link Source="10312:[63450..63471).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63473..63501).1" Target="10382:[1793..1913).1" />
<Link Source="10312:[63473..63501).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63503..63516).1" Target="10382:[1793..1913).6" />
<Link Source="10312:[63503..63516).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63518..63564).1" Target="10382:[1793..1913).7" />
<Link Source="10312:[63518..63564).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63566..63612).1" Target="10382:[1793..1913).1" />
<Link Source="10312:[63566..63612).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63381..70761).1" Target="10382:[1449..1470).1" />
<Link Source="10312:[63381..70761).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63638..63668).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63682..63706).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63859..64015).1" Target="10312:[63424..63437).1" />
<Link Source="10312:[63859..64015).1" Target="10382:[1707..1928).2" />
<Link Source="10312:[63859..64015).1" Target="EXTERNAL" />
<Link Source="10312:[63859..64015).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[63881..63912).1" Target="10312:[63859..64015).1" />
<Link Source="10312:[63881..63912).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[64121..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64121..69285).1" Target="10382:[1707..1928).2" />
<Link Source="10312:[64121..69285).1" Target="10382:[1811..1911).1" />
<Link Source="10312:[64121..69285).2" Target="10312:[63381..70761).1" />
<Link Source="10312:[64121..69285).2" Target="10382:[1707..1928).2" />
<Link Source="10312:[64121..69285).2" Target="10312:[64121..69285).1" />
<Link Source="10312:[64121..69285).2" Target="10382:[1811..1911).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[64353..69285).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).2" Target="10312:[63439..63448).1" />
<Link Source="10312:[64353..69285).2" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).3" Target="10312:[63503..63516).1" />
<Link Source="10312:[64353..69285).3" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).4" Target="10312:[63450..63471).1" />
<Link Source="10312:[64353..69285).4" Target="10312:[64121..69285).2" />
<Link Source="10312:[64353..69285).5" Target="10312:[63682..63706).1" />
<Link Source="10312:[64353..69285).5" Target="10312:[64121..69285).2" />
<Link Source="10312:[64357..64415).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[80978..80991).1" Target="10312:[64353..69285).1" />
<Link Source="10312:[80978..80991).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[80993..81002).1" Target="10312:[64353..69285).2" />
<Link Source="10312:[80993..81002).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81004..81017).1" Target="10312:[64353..69285).3" />
<Link Source="10312:[81004..81017).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81019..81040).1" Target="10312:[64353..69285).4" />
<Link Source="10312:[81019..81040).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81042..81069).1" Target="10312:[64353..69285).5" />
<Link Source="10312:[81042..81069).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[80978..80991).1" />
<Link Source="10312:[81095..84034).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[81095..84034).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[83750..83991).1" Target="10312:[81095..84034).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[80993..81002).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[83750..83991).1" />
<Link Source="10312:[83750..83991).2" Target="10312:[81095..84034).1" />
<Link Source="10312:[84050..84066).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[84080..84093).1" Target="10312:[64357..64415).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[84080..84093).1" />
<Link Source="10312:[64353..69285).6" Target="10312:[64121..69285).2" />
<Link Source="10312:[64537..64543).1" Target="10312:[64353..69285).6" />
<Link Source="10306:[3196..3249).1" Target="10312:[63381..70761).1" />
<Link Source="10306:[3196..3249).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).1" Target="10306:[3196..3249).1" />
<Link Source="10306:[3202..3247).1" Target="10312:[64121..69285).2" />
<Link Source="10306:[3202..3247).1" Target="10312:[64537..64543).1" />
<Link Source="10306:[3202..3247).2" Target="EXTERNAL" />
<Link Source="10306:[3202..3247).2" Target="10312:[64537..64543).1" />
<Link Source="10306:[3209..3246).1" Target="10312:[64537..64543).1" />
<Link Source="10298:[471..492).11" Target="10306:[3202..3247).1" />
<Link Source="10298:[471..492).11" Target="10306:[3209..3246).1" />
<Link Source="10298:[494..511).11" Target="10306:[3202..3247).2" />
<Link Source="10298:[494..511).11" Target="10306:[3209..3246).1" />
<Link Source="10312:[64532..69285).1" Target="10298:[471..492).11" />
<Link Source="10312:[64532..69285).1" Target="10312:[64353..69285).6" />
<Link Source="10312:[65229..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65229..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65229..69285).1" Target="10312:[64532..69285).1" />
<Link Source="10312:[65229..69285).2" Target="10312:[64532..69285).1" />
<Link Source="10312:[65474..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[65474..69285).1" Target="EXTERNAL" />
<Link Source="10312:[65474..69285).1" Target="10312:[65229..69285).1" />
<Link Source="10312:[65474..69285).2" Target="10312:[65229..69285).1" />
<Link Source="10312:[65730..65736).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65730..65736).1" />
<Link Source="10312:[65726..69285).1" Target="10312:[65474..69285).1" />
<Link Source="10312:[66182..66188).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[66182..66188).1" />
<Link Source="10312:[66177..69285).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[66177..69285).2" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[63450..63471).1" />
<Link Source="10312:[66177..69285).3" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[63473..63501).1" />
<Link Source="10312:[66177..69285).4" Target="10312:[65726..69285).1" />
<Link Source="10312:[66291..66342).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[75301..75322).1" Target="10312:[66177..69285).3" />
<Link Source="10312:[75301..75322).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75324..75352).1" Target="10312:[66177..69285).4" />
<Link Source="10312:[75324..75352).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).1" Target="10312:[75301..75322).1" />
<Link Source="10312:[75735..75866).1" Target="EXTERNAL" />
<Link Source="10312:[75735..75866).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).2" Target="10312:[66291..66342).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[75735..75866).1" />
<Link Source="10312:[75742..75804).1" Target="10312:[66291..66342).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75324..75352).1" />
<Link Source="10312:[75735..75866).4" Target="10312:[75742..75804).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[63638..63668).1" />
<Link Source="10312:[66177..69285).7" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[63518..63564).1" />
<Link Source="10312:[66177..69285).8" Target="10312:[65726..69285).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[63566..63612).1" />
<Link Source="10312:[66177..69285).9" Target="10312:[65726..69285).1" />
<Link Source="10312:[66215..66540).1" Target="10312:[65726..69285).1" />
<Link Source="10312:[77528..77541).1" Target="10312:[66177..69285).2" />
<Link Source="10312:[77528..77541).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77543..77571).1" Target="10312:[75735..75866).4" />
<Link Source="10312:[77543..77571).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77573..77604).1" Target="10312:[66177..69285).7" />
<Link Source="10312:[77573..77604).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77606..77652).1" Target="10312:[66177..69285).8" />
<Link Source="10312:[77606..77652).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77654..77700).1" Target="10312:[66177..69285).9" />
<Link Source="10312:[77654..77700).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[63381..70761).1" />
<Link Source="10312:[77501..78044).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[77726..77892).1" Target="10312:[64121..69285).2" />
<Link Source="10312:[77726..77892).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77726..77892).2" Target="EXTERNAL" />
<Link Source="10312:[77726..77892).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77730..77782).1" Target="10312:[66215..66540).1" />
<Link Source="10298:[471..492).14" Target="10312:[77726..77892).1" />
<Link Source="10298:[471..492).14" Target="10312:[77730..77782).1" />
<Link Source="10298:[494..511).14" Target="10312:[77726..77892).2" />
<Link Source="10298:[494..511).14" Target="10312:[77730..77782).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[77528..77541).1" />
<Link Source="10312:[77908..78033).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[77543..77571).1" />
<Link Source="10312:[77908..78033).2" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[77573..77604).1" />
<Link Source="10312:[77908..78033).3" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[77606..77652).1" />
<Link Source="10312:[77908..78033).4" Target="10312:[66215..66540).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[77654..77700).1" />
<Link Source="10312:[77908..78033).5" Target="10312:[66215..66540).1" />
<Link Source="10312:[77915..78032).1" Target="10312:[66215..66540).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77908..78033).1" />
<Link Source="10312:[78387..78400).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78402..78430).1" Target="10312:[77908..78033).2" />
<Link Source="10312:[78402..78430).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78432..78463).1" Target="10312:[77908..78033).3" />
<Link Source="10312:[78432..78463).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78465..78511).1" Target="10312:[77908..78033).4" />
<Link Source="10312:[78465..78511).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78513..78552).1" Target="10312:[77908..78033).5" />
<Link Source="10312:[78513..78552).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77501..78044).1" />
<Link Source="10312:[78346..78783).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[78387..78400).1" />
<Link Source="10312:[78642..78772).1" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[78402..78430).1" />
<Link Source="10312:[78642..78772).2" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[78432..78463).1" />
<Link Source="10312:[78642..78772).3" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[78465..78511).1" />
<Link Source="10312:[78642..78772).4" Target="10312:[77915..78032).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[78513..78552).1" />
<Link Source="10312:[78642..78772).5" Target="10312:[77915..78032).1" />
<Link Source="10312:[78649..78771).1" Target="10312:[77915..78032).1" />
<Link Source="10376:[1070..1083).1" Target="10312:[78642..78772).1" />
<Link Source="10376:[1070..1083).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1085..1113).1" Target="10312:[78642..78772).2" />
<Link Source="10376:[1085..1113).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1115..1146).1" Target="10312:[78642..78772).3" />
<Link Source="10376:[1115..1146).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1148..1194).1" Target="10312:[78642..78772).4" />
<Link Source="10376:[1148..1194).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1196..1235).1" Target="10312:[78642..78772).5" />
<Link Source="10376:[1196..1235).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1028..1425).1" Target="10312:[78346..78783).1" />
<Link Source="10376:[1028..1425).1" Target="10312:[64121..69285).2" />
<Link Source="10376:[1028..1425).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).1" Target="10376:[1070..1083).1" />
<Link Source="10376:[1261..1414).1" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).2" Target="10376:[1028..1425).1" />
<Link Source="10376:[1261..1414).2" Target="10312:[64121..69285).2" />
<Link Source="10376:[1261..1414).2" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).3" Target="10376:[1085..1113).1" />
<Link Source="10376:[1261..1414).3" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).4" Target="10376:[1115..1146).1" />
<Link Source="10376:[1261..1414).4" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).5" Target="10376:[1148..1194).1" />
<Link Source="10376:[1261..1414).5" Target="10312:[78649..78771).1" />
<Link Source="10376:[1261..1414).6" Target="10376:[1196..1235).1" />
<Link Source="10376:[1261..1414).6" Target="10312:[78649..78771).1" />
<Link Source="10376:[1268..1413).1" Target="10312:[78649..78771).1" />
<Link Source="10286:[30070..30083).1" Target="10376:[1261..1414).1" />
<Link Source="10286:[30070..30083).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30098..30120).1" Target="10376:[1261..1414).2" />
<Link Source="10286:[30098..30120).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30135..30160).1" Target="10376:[1261..1414).3" />
<Link Source="10286:[30135..30160).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30175..30206).1" Target="10376:[1261..1414).4" />
<Link Source="10286:[30175..30206).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30221..30268).1" Target="10376:[1261..1414).5" />
<Link Source="10286:[30221..30268).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30283..30330).1" Target="10376:[1261..1414).6" />
<Link Source="10286:[30283..30330).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30012..30691).1" Target="10376:[1028..1425).1" />
<Link Source="10286:[30012..30691).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30356..30522).1" Target="10286:[30012..30691).1" />
<Link Source="10286:[30356..30522).1" Target="10312:[64121..69285).2" />
<Link Source="10286:[30356..30522).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30356..30522).2" Target="EXTERNAL" />
<Link Source="10286:[30356..30522).2" Target="10376:[1268..1413).1" />
<Link Source="10286:[30360..30412).1" Target="10376:[1268..1413).1" />
<Link Source="10298:[471..492).15" Target="10286:[30356..30522).1" />
<Link Source="10298:[471..492).15" Target="10286:[30360..30412).1" />
<Link Source="10298:[494..511).15" Target="10286:[30356..30522).2" />
<Link Source="10298:[494..511).15" Target="10286:[30360..30412).1" />
<Link Source="10286:[30538..30680).1" Target="10286:[30070..30083).1" />
<Link Source="10286:[30538..30680).1" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).2" Target="10286:[30098..30120).1" />
<Link Source="10286:[30538..30680).2" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).3" Target="10286:[30135..30160).1" />
<Link Source="10286:[30538..30680).3" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).4" Target="10286:[30175..30206).1" />
<Link Source="10286:[30538..30680).4" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).5" Target="10286:[30221..30268).1" />
<Link Source="10286:[30538..30680).5" Target="10376:[1268..1413).1" />
<Link Source="10286:[30538..30680).6" Target="10286:[30283..30330).1" />
<Link Source="10286:[30538..30680).6" Target="10376:[1268..1413).1" />
<Link Source="10286:[30545..30679).1" Target="10376:[1268..1413).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30538..30680).1" />
<Link Source="10060:[2108..2121).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2136..2158).1" Target="10286:[30538..30680).2" />
<Link Source="10060:[2136..2158).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2173..2198).1" Target="10286:[30538..30680).3" />
<Link Source="10060:[2173..2198).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2213..2244).1" Target="10286:[30538..30680).4" />
<Link Source="10060:[2213..2244).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2259..2305).1" Target="10286:[30538..30680).5" />
<Link Source="10060:[2259..2305).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2320..2366).1" Target="10286:[30538..30680).6" />
<Link Source="10060:[2320..2366).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).1" Target="10060:[2108..2121).1" />
<Link Source="10060:[2392..2555).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).2" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).2" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).3" Target="10060:[2173..2198).1" />
<Link Source="10060:[2392..2555).3" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).4" Target="10060:[2213..2244).1" />
<Link Source="10060:[2392..2555).4" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).5" Target="10060:[2136..2158).1" />
<Link Source="10060:[2392..2555).5" Target="10312:[64121..69285).2" />
<Link Source="10060:[2392..2555).5" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).6" Target="10060:[2259..2305).1" />
<Link Source="10060:[2392..2555).6" Target="10286:[30545..30679).1" />
<Link Source="10060:[2392..2555).7" Target="10060:[2320..2366).1" />
<Link Source="10060:[2392..2555).7" Target="10286:[30545..30679).1" />
<Link Source="10060:[2399..2554).1" Target="10286:[30545..30679).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2392..2555).1" />
<Link Source="10060:[5593..5606).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5621..5634).1" Target="10060:[2392..2555).2" />
<Link Source="10060:[5621..5634).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5691..5716).1" Target="10060:[2392..2555).3" />
<Link Source="10060:[5691..5716).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5731..5762).1" Target="10060:[2392..2555).4" />
<Link Source="10060:[5731..5762).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5777..5806).1" Target="10060:[2392..2555).5" />
<Link Source="10060:[5777..5806).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5821..5867).1" Target="10060:[2392..2555).6" />
<Link Source="10060:[5821..5867).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5882..5928).1" Target="10060:[2392..2555).7" />
<Link Source="10060:[5882..5928).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5593..5606).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[5954..5991).1" />
<Link Source="10060:[5954..5991).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[5621..5634).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[6005..6042).1" />
<Link Source="10060:[6005..6042).2" Target="10060:[2399..2554).1" />
<Link Source="10060:[6056..6090).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6056..6090).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6056..6090).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[5621..5634).1" />
<Link Source="10060:[6104..6172).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6188..6219).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[6235..9907).1" Target="10060:[5593..5606).1" />
<Link Source="10060:[6235..9907).1" Target="10312:[64121..69285).2" />
<Link Source="10060:[6235..9907).1" Target="10060:[2399..2554).1" />
<Link Source="10060:[8992..9004).1" Target="10060:[6235..9907).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[66177..69285).1" />
<Link Source="10312:[66177..69285).11" Target="10060:[8992..9004).1" />
<Link Source="10312:[66177..69285).11" Target="10312:[65726..69285).1" />
<Link Source="10312:[67587..67593).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).1" Target="10312:[67587..67593).1" />
<Link Source="10312:[67582..69285).1" Target="10312:[66177..69285).11" />
<Link Source="10312:[67582..69285).2" Target="10312:[63881..63912).1" />
<Link Source="10312:[67582..69285).2" Target="10312:[66177..69285).11" />
<Link Source="10312:[67858..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[67858..69285).1" Target="EXTERNAL" />
<Link Source="10312:[67858..69285).1" Target="10312:[67582..69285).1" />
<Link Source="10312:[67858..69285).2" Target="10312:[67582..69285).1" />
<Link Source="10312:[68183..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68183..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68183..69285).1" Target="10312:[67858..69285).1" />
<Link Source="10312:[68183..69285).2" Target="10312:[67858..69285).1" />
<Link Source="10312:[68512..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68512..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68512..69285).1" Target="10312:[68183..69285).1" />
<Link Source="10312:[68512..69285).2" Target="10312:[68183..69285).1" />
<Link Source="10312:[68882..69285).1" Target="10312:[63450..63471).1" />
<Link Source="10312:[68882..69285).1" Target="EXTERNAL" />
<Link Source="10312:[68882..69285).1" Target="10312:[68512..69285).1" />
<Link Source="10312:[68882..69285).2" Target="10312:[68512..69285).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[63881..63912).1" />
<Link Source="10312:[69237..69270).1" Target="10312:[68882..69285).1" />
<Link Source="10312:[69244..69269).1" Target="10312:[68882..69285).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69237..69270).1" />
<Link Source="10354:[5400..5413).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).1" Target="EXTERNAL" />
<Link Source="10354:[5439..5508).1" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).2" Target="10354:[5400..5413).1" />
<Link Source="10354:[5439..5508).2" Target="10312:[69244..69269).1" />
<Link Source="10354:[5439..5508).3" Target="10312:[69244..69269).1" />
<Link Source="10354:[5446..5507).1" Target="10312:[69244..69269).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5439..5508).1" />
<Link Source="10368:[1076..1097).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1099..1112).1" Target="10354:[5439..5508).2" />
<Link Source="10368:[1099..1112).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1114..1134).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1114..1134).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1048..1256).1" Target="10354:[5439..5508).3" />
<Link Source="10368:[1048..1256).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1076..1097).1" />
<Link Source="10368:[1160..1169).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1160..1169).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1099..1112).1" />
<Link Source="10368:[1191..1202).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1191..1202).1" Target="10354:[5446..5507).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1114..1134).1" />
<Link Source="10368:[1226..1236).1" Target="10368:[1048..1256).1" />
<Link Source="10368:[1226..1236).1" Target="10354:[5446..5507).1" />
<Link Source="10312:[69237..69270).2" Target="10354:[5439..5508).3" />
<Link Source="10312:[69237..69270).2" Target="10312:[68882..69285).1" />
<Link Source="10382:[1793..1912).1" Target="10382:[1707..1928).2" />
<Link Source="10354:[10217..10242).1" Target="10312:[69237..69270).2" />
<Link Source="10354:[10217..10242).1" Target="10382:[1793..1912).1" />
<Link Source="10354:[10192..10676).1" Target="10382:[1340..1359).1" />
<Link Source="10354:[10192..10676).1" Target="10382:[1793..1912).1" />
<Link Source="10354:[10272..10276).1" Target="10382:[1793..1912).1" />
<Link Source="10354:[4058..4122).3" Target="10354:[10192..10676).1" />
<Link Source="10354:[4058..4122).3" Target="10354:[10272..10276).1" />
<Link Source="10354:[10268..10665).1" Target="10354:[4058..4122).3" />
<Link Source="10354:[10268..10665).1" Target="10382:[1793..1912).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10268..10665).1" />
<Link Source="10354:[10268..10665).2" Target="10354:[10217..10242).1" />
<Link Source="10354:[10268..10665).2" Target="10368:[1160..1169).1" />
<Link Source="10354:[10268..10665).2" Target="10382:[1793..1912).1" />
<Link Source="10354:[10404..10408).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10386..10665).1" Target="10354:[10404..10408).1" />
<Link Source="10354:[10386..10665).1" Target="10354:[10268..10665).2" />
<Link Source="10354:[10442..10463).1" Target="10354:[10217..10242).1" />
<Link Source="10354:[10442..10463).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[10442..10462).1" Target="10354:[10386..10665).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10463).1" />
<Link Source="10354:[8131..8155).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10192..10676).1" />
<Link Source="10354:[8109..8324).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8181..8186).1" Target="10368:[1160..1169).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8181..8186).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[11244..11285).4" />
<Link Source="10354:[8214..8234).1" Target="10354:[8181..8186).1" />
<Link Source="10354:[8214..8234).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8248..8278).1" Target="10368:[1191..1202).1" />
<Link Source="10354:[8248..8278).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8109..8324).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8214..8234).1" />
<Link Source="10354:[8248..8278).2" Target="10354:[8248..8278).1" />
<Link Source="10354:[8248..8278).2" Target="10312:[67582..69285).2" />
<Link Source="10354:[8248..8278).2" Target="10354:[10442..10462).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8131..8155).1" />
<Link Source="10354:[8292..8298).1" Target="10368:[1226..1236).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[8109..8324).1" />
<Link Source="10354:[8292..8298).1" Target="10354:[10442..10462).1" />
<Link Source="10354:[10442..10463).2" Target="10354:[10386..10665).1" />
<Link Source="10382:[1707..1928).6" Target="10382:[1707..1928).2" />
<Link Source="10382:[1707..1928).6" Target="10354:[8248..8278).2" />
<Link Source="10382:[1707..1928).6" Target="10354:[8292..8298).1" />
<Link Source="10382:[1707..1928).6" Target="10312:[4534..4657).1" />
<Link Source="10354:[3720..3803).33" Target="10354:[3684..3818).3" />
<Link Source="10354:[3720..3803).33" Target="10354:[8248..8278).2" />
<Link Source="10354:[3720..3803).33" Target="EXTERNAL" />
<Link Source="10354:[3720..3803).33" Target="10312:[4685..4699).1" />
<Link Source="10312:[4680..4787).3" Target="10354:[3720..3803).33" />
<Link Source="10312:[4680..4787).3" Target="10312:[4134..4806).2" />
<Link Source="10312:[4749..4764).1" Target="10312:[4019..5073).5" />
<Link Source="10312:[4749..4764).1" Target="10312:[4680..4787).3" />
<Link Source="10312:[5087..5101).1" Target="10312:[4749..4764).1" />
<Link Source="10312:[5087..5101).1" Target="10312:[6110..6220).1" />
<Link Source="10312:[1585..1724).9" Target="10353:[7556..7642).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[41889..41914).1" />
<Link Source="10319:[43504..43546).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[41849..41874).1" />
<Link Source="10319:[43504..43546).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).3" Target="10060:[5821..5867).1" />
<Link Source="10319:[43504..43546).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).2" />
<Link Source="10319:[43504..43546).4" Target="10319:[43504..43546).3" />
<Link Source="10319:[43504..43546).4" Target="10354:[8248..8278).2" />
<Link Source="10319:[43504..43546).4" Target="10354:[8292..8298).1" />
<Link Source="10319:[43504..43546).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[43562..43590).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[42029..42063).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[43799..44676).1" />
<Link Source="10319:[43799..44676).2" Target="10319:[20515..20674).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[43095..43135).1" />
<Link Source="10319:[43799..44676).3" Target="10319:[20515..20674).1" />
<Link Source="10319:[43853..43873).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[41088..41107).1" Target="10319:[43799..44676).3" />
<Link Source="10319:[41088..41107).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41138..41158).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4919..5009).4" Target="10319:[41088..41107).1" />
<Link Source="10354:[4919..5009).4" Target="10319:[41138..41158).1" />
<Link Source="10354:[4962..4966).4" Target="10319:[41138..41158).1" />
<Link Source="10354:[4058..4122).6" Target="10354:[4919..5009).4" />
<Link Source="10354:[4058..4122).6" Target="10354:[4962..4966).4" />
<Link Source="10354:[4094..4107).6" Target="10354:[4058..4122).6" />
<Link Source="10354:[4094..4107).6" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).6" Target="10354:[4962..4966).4" />
<Link Source="10319:[41133..41220).1" Target="10354:[4094..4107).6" />
<Link Source="10319:[41133..41220).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41254..41268).1" Target="10319:[43853..43873).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41088..41107).1" />
<Link Source="10354:[4525..4595).1" Target="10319:[41254..41268).1" />
<Link Source="10354:[4561..4580).1" Target="10354:[4525..4595).1" />
<Link Source="10354:[4561..4580).1" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).1" Target="10319:[41254..41268).1" />
<Link Source="10319:[41236..41680).1" Target="10354:[4561..4580).1" />
<Link Source="10319:[41236..41680).1" Target="10319:[43853..43873).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[41236..41680).1" />
<Link Source="10319:[41302..41665).1" Target="10319:[43504..43546).4" />
<Link Source="10319:[41634..41646).1" Target="10319:[41302..41665).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[43562..43590).1" />
<Link Source="10319:[44692..45392).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[44751..44765).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[43095..43135).1" />
<Link Source="10319:[44785..44930).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[42089..42141).1" />
<Link Source="10319:[44785..44930).2" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).3" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[41849..41874).1" />
<Link Source="10319:[44785..44930).5" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[41889..41914).1" />
<Link Source="10319:[44785..44930).6" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[41983..42014).1" />
<Link Source="10319:[44785..44930).7" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44751..44765).1" />
<Link Source="10319:[44785..44930).8" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[42029..42063).1" />
<Link Source="10319:[44785..44930).9" Target="10319:[44692..45392).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[51282..51325).1" />
<Link Source="10319:[44785..44930).10" Target="10319:[44692..45392).1" />
<Link Source="10319:[44801..44929).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44785..44930).1" />
<Link Source="10319:[84167..84186).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84201..84218).1" Target="10319:[44785..44930).2" />
<Link Source="10319:[84201..84218).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84233..84242).1" Target="10319:[44785..44930).3" />
<Link Source="10319:[84233..84242).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84257..84273).1" Target="10319:[44785..44930).5" />
<Link Source="10319:[84257..84273).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84288..84313).1" Target="10319:[44785..44930).6" />
<Link Source="10319:[84288..84313).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84328..84359).1" Target="10319:[44785..44930).7" />
<Link Source="10319:[84328..84359).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84374..84391).1" Target="10319:[44785..44930).8" />
<Link Source="10319:[84374..84391).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84406..84447).1" Target="10319:[44785..44930).9" />
<Link Source="10319:[84406..84447).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84462..84508).1" Target="10319:[44785..44930).10" />
<Link Source="10319:[84462..84508).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[41732..45579).1" />
<Link Source="10319:[84124..109887).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[84167..84186).1" />
<Link Source="10319:[84534..84675).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[84201..84218).1" />
<Link Source="10319:[84534..84675).2" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[84233..84242).1" />
<Link Source="10319:[84534..84675).3" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[84257..84273).1" />
<Link Source="10319:[84534..84675).4" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[84288..84313).1" />
<Link Source="10319:[84534..84675).5" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[84328..84359).1" />
<Link Source="10319:[84534..84675).6" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[84374..84391).1" />
<Link Source="10319:[84534..84675).7" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[84406..84447).1" />
<Link Source="10319:[84534..84675).8" Target="10319:[44801..44929).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[84462..84508).1" />
<Link Source="10319:[84534..84675).9" Target="10319:[44801..44929).1" />
<Link Source="10319:[84550..84674).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84534..84675).1" />
<Link Source="10319:[84907..109876).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).2" Target="10319:[84534..84675).2" />
<Link Source="10319:[84907..109876).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).3" Target="10319:[84534..84675).3" />
<Link Source="10319:[84907..109876).3" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).4" Target="10319:[84534..84675).4" />
<Link Source="10319:[84907..109876).4" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).5" Target="10319:[84534..84675).5" />
<Link Source="10319:[84907..109876).5" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).6" Target="10319:[84534..84675).6" />
<Link Source="10319:[84907..109876).6" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).7" Target="10319:[84534..84675).7" />
<Link Source="10319:[84907..109876).7" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).8" Target="10319:[84534..84675).8" />
<Link Source="10319:[84907..109876).8" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).9" Target="10319:[84534..84675).9" />
<Link Source="10319:[84907..109876).9" Target="10319:[84550..84674).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84124..109887).1" />
<Link Source="10319:[84907..109876).10" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84907..109876).4" />
<Link Source="10319:[85320..85348).2" Target="10319:[85320..85348).1" />
<Link Source="10319:[85320..85348).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[85366..85400).2" Target="10319:[85366..85400).1" />
<Link Source="10319:[85366..85400).2" Target="10319:[84550..84674).1" />
<Link Source="10319:[85434..85448).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[84907..109876).1" />
<Link Source="10354:[4525..4595).2" Target="10319:[85434..85448).1" />
<Link Source="10354:[4561..4580).2" Target="10354:[4525..4595).2" />
<Link Source="10354:[4561..4580).2" Target="10319:[43504..43546).4" />
<Link Source="10354:[4561..4580).2" Target="10319:[85434..85448).1" />
<Link Source="10319:[85420..85449).1" Target="10354:[4561..4580).2" />
<Link Source="10319:[85420..85449).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85467..85484).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85508..85528).1" Target="10319:[84550..84674).1" />
<Link Source="10354:[4919..5009).5" Target="10319:[84907..109876).1" />
<Link Source="10354:[4919..5009).5" Target="10319:[85508..85528).1" />
<Link Source="10354:[4962..4966).5" Target="10319:[85508..85528).1" />
<Link Source="10354:[4058..4122).7" Target="10354:[4919..5009).5" />
<Link Source="10354:[4058..4122).7" Target="10354:[4962..4966).5" />
<Link Source="10354:[4094..4107).7" Target="10354:[4058..4122).7" />
<Link Source="10354:[4094..4107).7" Target="10319:[43504..43546).4" />
<Link Source="10354:[4094..4107).7" Target="10354:[4962..4966).5" />
<Link Source="10319:[85504..106825).1" Target="10354:[4094..4107).7" />
<Link Source="10319:[85504..106825).1" Target="10319:[84550..84674).1" />
<Link Source="10319:[85570..106806).1" Target="10319:[85504..106825).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85420..85449).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[43504..43546).4" />
<Link Source="10319:[85570..106806).2" Target="10319:[85570..106806).1" />
<Link Source="10319:[85570..106806).2" Target="10319:[85504..106825).1" />
<Link Source="10319:[103953..103983).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104078..104122).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104078..104122).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).2" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[104148..106735).1" />
<Link Source="10319:[104148..106735).2" Target="10319:[85570..106806).2" />
<Link Source="10319:[104148..106735).3" Target="10319:[104078..104122).1" />
<Link Source="10319:[104148..106735).3" Target="10319:[103953..103983).1" />
<Link Source="10319:[104148..106735).3" Target="EXTERNAL" />
<Link Source="10319:[104148..106735).3" Target="10319:[85570..106806).2" />
<Link Source="10319:[104874..105336).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[104874..105336).1" Target="EXTERNAL" />
<Link Source="10319:[104874..105336).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105368..106708).1" Target="10319:[84907..109876).6" />
<Link Source="10319:[105368..106708).1" Target="10319:[104148..106735).2" />
<Link Source="10319:[105465..105535).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[105465..105535).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).2" Target="10319:[84907..109876).5" />
<Link Source="10319:[105465..105535).2" Target="10319:[105368..106708).1" />
<Link Source="10319:[105465..105535).3" Target="10319:[84907..109876).4" />
<Link Source="10319:[105465..105535).3" Target="10319:[105368..106708).1" />
<Link Source="10319:[105476..105534).1" Target="10319:[105368..106708).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105465..105535).1" />
<Link Source="10319:[76345..76358).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76360..76385).1" Target="10319:[105465..105535).2" />
<Link Source="10319:[76360..76385).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76387..76402).1" Target="10319:[105465..105535).3" />
<Link Source="10319:[76387..76402).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[76345..76358).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[76428..76480).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).1" Target="10319:[105476..105534).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76428..76480).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[76494..76582).1" />
<Link Source="10319:[76494..76582).2" Target="10319:[105476..105534).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[103953..103983).1" />
<Link Source="10319:[106763..106783).1" Target="10319:[85570..106806).2" />
<Link Source="10319:[84691..84861).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84691..84861).1" Target="10319:[76428..76480).1" />
<Link Source="10319:[84691..84861).1" Target="EXTERNAL" />
<Link Source="10319:[84691..84861).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[106763..106783).1" />
<Link Source="10319:[84877..84891).1" Target="10319:[44801..44929).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[84877..84891).1" />
<Link Source="10319:[44948..45377).1" Target="10319:[76428..76480).1" />
<Link Source="10319:[44948..45377).1" Target="EXTERNAL" />
<Link Source="10319:[44948..45377).1" Target="10319:[44692..45392).1" />
<Link Source="10319:[45408..45421).1" Target="10319:[20515..20674).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[43095..43135).1" />
<Link Source="10354:[11383..11549).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11428..11440).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[3841..3991).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3887..3892).1" Target="EXTERNAL" />
<Link Source="10354:[3887..3892).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3887..3892).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3932..3952).1" Target="10319:[76428..76480).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[3887..3892).1" />
<Link Source="10354:[3932..3952).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3980).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3966..3980).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[3841..3991).1" />
<Link Source="10354:[3966..3972).1" Target="10354:[11428..11440).1" />
<Link Source="10354:[11428..11441).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).1" Target="10319:[45408..45421).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11455..11538).2" Target="10354:[11455..11538).1" />
<Link Source="10354:[11455..11538).2" Target="10319:[45408..45421).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).1" Target="10354:[11455..11538).2" />
<Link Source="10354:[11506..11523).2" Target="10354:[11383..11549).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3932..3952).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11506..11523).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[3966..3972).1" />
<Link Source="10354:[11506..11523).2" Target="10354:[11455..11538).2" />
<Link Source="10319:[45408..45422).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45436..45568).1" Target="10319:[41849..41874).1" />
<Link Source="10319:[45436..45568).1" Target="10354:[11506..11523).2" />
<Link Source="10319:[45436..45568).1" Target="10319:[20515..20674).1" />
<Link Source="10319:[45505..45551).1" Target="10319:[20515..20674).1" />
<Link Source="10286:[10010..10027).3" Target="10319:[45436..45568).1" />
<Link Source="10286:[10010..10027).3" Target="10319:[45505..45551).1" />
<Link Source="10286:[9966..10197).3" Target="10319:[41732..45579).1" />
<Link Source="10286:[9966..10197).3" Target="10319:[45505..45551).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[84877..84891).1" />
<Link Source="10319:[45436..45568).4" Target="10319:[20515..20674).1" />
<Link Source="10319:[45443..45567).1" Target="10319:[20515..20674).1" />
<Link Source="10287:[2306..2328).1" Target="10286:[10010..10027).3" />
<Link Source="10287:[2306..2328).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2330..2343).1" Target="10319:[45436..45568).4" />
<Link Source="10287:[2330..2343).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2377..2471).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2377..2471).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2489..2521).1" Target="10287:[2330..2343).1" />
<Link Source="10287:[2489..2521).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).1" Target="10287:[2489..2521).1" />
<Link Source="10287:[2539..2781).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2546..2558).1" Target="10287:[2539..2781).1" />
<Link Source="10287:[2546..2558).1" Target="10319:[45443..45567).1" />
<Link Source="10287:[2539..2781).2" Target="10287:[2306..2328).1" />
<Link Source="10287:[2539..2781).2" Target="10287:[2546..2558).1" />
<Link Source="10287:[2680..2780).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[718..757).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[718..757).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[666..1076).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[666..1076).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[791..833).1" Target="10287:[718..757).1" />
<Link Source="10287:[791..833).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[791..833).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[851..871).1" Target="10287:[718..757).1" />
<Link Source="10287:[851..871).1" Target="10287:[666..1076).1" />
<Link Source="10287:[851..871).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..927).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[912..919).1" Target="10287:[912..927).1" />
<Link Source="10287:[912..919).1" Target="10287:[666..1076).1" />
<Link Source="10287:[912..919).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..972).1" Target="10287:[2680..2780).1" />
<Link Source="10287:[945..963).1" Target="10287:[945..972).1" />
<Link Source="10287:[945..963).1" Target="10287:[666..1076).1" />
<Link Source="10287:[945..963).1" Target="10287:[2680..2780).1" />
<Link Source="10319:[15383..15396).1" Target="10319:[13863..13947).1" />
<Link Source="10287:[1609..1643).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1609..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[1609..1643).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[851..871).1" />
<Link Source="10287:[1612..1643).1" Target="10287:[2539..2781).2" />
<Link Source="10287:[1612..1643).1" Target="10319:[15383..15396).1" />
<Link Source="10319:[15379..15933).1" Target="10287:[1612..1643).1" />
<Link Source="10319:[15379..15933).1" Target="10319:[13863..13947).1" />
<Link Source="10319:[15548..15561).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15548..15561).1" />
<Link Source="10319:[15544..15884).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[15783..15809).1" Target="10319:[15544..15884).1" />
<Link Source="10287:[1474..1497).1" Target="10287:[2546..2558).1" />
<Link Source="10287:[1474..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[1474..1497).1" />
<Link Source="10287:[1477..1497).1" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).1" Target="10319:[15783..15809).1" />
<Link Source="10319:[15783..15865).1" Target="10287:[1477..1497).1" />
<Link Source="10319:[15783..15865).1" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[14862..16302).1" />
<Link Source="10319:[15783..15865).2" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[14931..14954).1" />
<Link Source="10319:[15783..15865).3" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[14956..14981).1" />
<Link Source="10319:[15783..15865).4" Target="10319:[15544..15884).1" />
<Link Source="10319:[15783..15865).6" Target="10319:[15544..15884).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21504..21529).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21531..21544).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21546..21561).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21563..21583).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[21462..21711).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).1" Target="10286:[21504..21529).1" />
<Link Source="10286:[21609..21700).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).2" Target="10286:[21531..21544).1" />
<Link Source="10286:[21609..21700).2" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).3" Target="10286:[21546..21561).1" />
<Link Source="10286:[21609..21700).3" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21700).4" Target="10286:[21563..21583).1" />
<Link Source="10286:[21609..21700).4" Target="10319:[15783..15865).6" />
<Link Source="10286:[21609..21699).1" Target="10319:[15783..15865).6" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21700).1" />
<Link Source="10286:[22044..22069).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21700).2" />
<Link Source="10286:[22071..22084).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21700).3" />
<Link Source="10286:[22086..22108).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21700).4" />
<Link Source="10286:[22110..22130).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21462..21711).1" />
<Link Source="10286:[22002..22611).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[22071..22084).1" />
<Link Source="10286:[22156..22600).1" Target="10319:[15783..15865).1" />
<Link Source="10286:[22156..22600).1" Target="10286:[21609..21699).1" />
<Link Source="10286:[21609..21700).5" Target="10319:[15783..15865).6" />
<Link Source="10319:[15904..15918).1" Target="10287:[2546..2558).1" />
<Link Source="10319:[15904..15918).1" Target="10319:[15379..15933).1" />
<Link Source="10319:[13962..14050).1" Target="10319:[15904..15918).1" />
<Link Source="10319:[13962..14050).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).2" Target="10319:[13710..13735).1" />
<Link Source="10319:[13962..14050).2" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).3" Target="10319:[13685..13708).1" />
<Link Source="10319:[13962..14050).3" Target="25002:[4395..4432).1" />
<Link Source="10319:[13962..14050).4" Target="10319:[13737..13783).1" />
<Link Source="10319:[13962..14050).4" Target="25002:[4395..4432).1" />
<Link Source="10319:[13969..14029).1" Target="25002:[4395..4432).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[13962..14050).1" />
<Link Source="10319:[51762..51815).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51817..51842).1" Target="10319:[13962..14050).2" />
<Link Source="10319:[51817..51842).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51844..51861).1" Target="10319:[13962..14050).3" />
<Link Source="10319:[51844..51861).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51863..51909).1" Target="10319:[13962..14050).4" />
<Link Source="10319:[51863..51909).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[13647..14061).1" />
<Link Source="10319:[51698..52285).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[51939..51953).1" Target="10319:[13969..14029).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51762..51815).1" />
<Link Source="10287:[1680..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1690).1" Target="10287:[1680..1716).1" />
<Link Source="10287:[1683..1690).1" Target="10287:[912..919).1" />
<Link Source="10287:[1683..1690).1" Target="10319:[51939..51953).1" />
<Link Source="10287:[1683..1716).1" Target="10287:[1683..1690).1" />
<Link Source="10287:[1683..1716).1" Target="EXTERNAL" />
<Link Source="10287:[1683..1716).1" Target="10319:[51939..51953).1" />
<Link Source="10319:[51935..52244).1" Target="10287:[1683..1716).1" />
<Link Source="10319:[51935..52244).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[51762..51815).1" />
<Link Source="10319:[52260..52274).1" Target="10319:[13969..14029).1" />
<Link Source="10319:[13969..14049).1" Target="25002:[4395..4432).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[52260..52274).1" />
<Link Source="10287:[1474..1497).2" Target="10319:[13969..14049).1" />
<Link Source="10287:[1477..1497).2" Target="10287:[1474..1497).2" />
<Link Source="10287:[1477..1497).2" Target="10287:[851..871).1" />
<Link Source="10287:[1477..1497).2" Target="10319:[13969..14049).1" />
<Link Source="25002:[4395..4432).46" Target="25002:[4395..4432).3" />
<Link Source="25002:[4395..4432).46" Target="10287:[1477..1497).2" />
<Link Source="25002:[4395..4432).46" Target="10319:[15783..15865).1" />
<Link Source="25002:[4395..4432).46" Target="10287:[2539..2781).2" />
<Link Source="25002:[4395..4432).46" Target="28001:[73991..74036).1" />
<Link Source="10327:[1017..1043).1" Target="10327:[945..949).1" />
<Link Source="10327:[1017..1043).1" Target="10327:[916..956).1" />
<Link Source="10327:[1058..1116).1" Target="10327:[951..955).1" />
<Link Source="10327:[1058..1116).1" Target="10327:[916..956).1" />
<Link Source="10327:[969..1217).1" Target="10327:[916..956).1" />
<Link Source="10327:[749..758).1" Target="10327:[969..1217).1" />
<Link Source="10327:[749..758).1" Target="10327:[916..956).1" />
<Link Source="10327:[832..845).1" Target="10327:[969..1217).1" />
<Link Source="10327:[832..845).1" Target="10327:[916..956).1" />
<Link Source="10327:[1142..1151).1" Target="10327:[1017..1043).1" />
<Link Source="10327:[1142..1151).1" Target="10327:[969..1217).1" />
<Link Source="10327:[1142..1151).1" Target="10327:[916..956).1" />
<Link Source="10327:[1177..1190).1" Target="10327:[1058..1116).1" />
<Link Source="10327:[1177..1190).1" Target="10327:[969..1217).1" />
<Link Source="10327:[1177..1190).1" Target="10327:[916..956).1" />
<Link Source="10327:[908..956).1" Target="10327:[916..956).1" />
<Link Source="10327:[1273..1314).1" Target="25002:[4395..4432).3" />
<Link Source="10327:[1273..1314).1" Target="25002:[4395..4432).1" />
<Link Source="10327:[1279..1312).1" Target="25002:[4395..4432).1" />
<Link Source="10327:[1279..1312).2" Target="10327:[1273..1314).1" />
<Link Source="10327:[1279..1312).2" Target="25002:[4395..4432).46" />
<Link Source="10327:[1279..1312).2" Target="10327:[1279..1312).1" />
<Link Source="10327:[1279..1312).2" Target="25002:[4395..4432).1" />
<Link Source="25002:[4446..4475).1" Target="10327:[1279..1312).2" />
<Link Source="25002:[4446..4475).1" Target="28001:[73991..74036).1" />
<Link Source="25002:[4446..4475).2" Target="25002:[4284..4323).1" />
<Link Source="25002:[4446..4475).2" Target="28001:[73991..74036).1" />
<Link Source="25002:[4446..4474).1" Target="28001:[73991..74036).1" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4475).1" />
<Link Source="25002:[2296..2334).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4475).2" />
<Link Source="25002:[2336..2375).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[2296..2334).1" />
<Link Source="25002:[2401..2451).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[2336..2375).1" />
<Link Source="25002:[2401..2451).2" Target="25002:[4446..4474).1" />
<Link Source="25002:[2401..2450).1" Target="25002:[4446..4474).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2451).1" />
<Link Source="25002:[1554..1589).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2451).2" />
<Link Source="25002:[1591..1630).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[1554..1589).1" />
<Link Source="25002:[1656..1703).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[1591..1630).1" />
<Link Source="25002:[1656..1703).2" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1703).3" Target="25002:[2401..2450).1" />
<Link Source="25002:[1656..1702).1" Target="25002:[2401..2450).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1703).1" />
<Link Source="25002:[2501..2531).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1703).2" />
<Link Source="25002:[2533..2565).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1703).3" />
<Link Source="25002:[2567..2585).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2533..2565).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[2611..2759).1" />
<Link Source="25002:[2611..2759).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2775..2867).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2881..2977).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[2881..2977).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).1" Target="25002:[2501..2531).1" />
<Link Source="25002:[2991..3166).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2567..2585).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2775..2867).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[2881..2977).1" />
<Link Source="25002:[2991..3166).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).1" />
<Link Source="25002:[2991..3166).4" Target="25002:[2991..3166).2" />
<Link Source="25002:[2991..3166).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[2533..2565).1" />
<Link Source="25002:[3341..3730).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3840..3992).1" Target="25002:[1656..1702).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[2991..3166).4" />
<Link Source="25002:[3840..3992).2" Target="25002:[3840..3992).1" />
<Link Source="25002:[3840..3992).2" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).1" Target="25002:[1656..1702).1" />
<Link Source="25003:[740..750).1" Target="25003:[747..750).1" />
<Link Source="25003:[808..818).1" Target="25003:[814..818).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[2533..2565).1" />
<Link Source="25002:[4102..4181).3" Target="25002:[1656..1702).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[2501..2531).1" />
<Link Source="25002:[4102..4181).4" Target="25002:[1656..1702).1" />
<Link Source="25002:[4126..4179).1" Target="25002:[1656..1702).1" />
<Link Source="25003:[17577..17609).1" Target="25002:[4102..4181).3" />
<Link Source="25003:[17577..17609).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17611..17641).1" Target="25002:[4102..4181).4" />
<Link Source="25003:[17611..17641).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17667..17688).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17702..17728).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[17742..17827).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).2" Target="25003:[17742..17827).1" />
<Link Source="25003:[17742..17827).2" Target="25002:[2991..3166).4" />
<Link Source="25003:[17742..17827).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[17757..17803).1" Target="25003:[17742..17827).2" />
<Link Source="25003:[17757..17803).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17742..17827).4" Target="25003:[17702..17728).1" />
<Link Source="25003:[17742..17827).4" Target="25003:[17757..17803).1" />
<Link Source="25003:[17841..17904).1" Target="25003:[17742..17827).4" />
<Link Source="25003:[17841..17904).1" Target="25003:[17667..17688).1" />
<Link Source="25003:[17841..17904).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17918..17965).1" Target="25003:[17742..17827).4" />
<Link Source="25003:[17918..17965).1" Target="25003:[17667..17688).1" />
<Link Source="25003:[17918..17965).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17936..17956).1" Target="25003:[17918..17965).1" />
<Link Source="25003:[17936..17956).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[17979..18071).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[17979..18071).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18085..18181).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18085..18181).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18197..18490).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18197..18490).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18201..18226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18197..18490).1" />
<Link Source="25003:[21605..21640).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[22962..23812).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[23085..23122).1" Target="25003:[23096..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[23085..23122).1" />
<Link Source="25003:[21666..21711).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21725..21759).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[21605..21640).1" />
<Link Source="25003:[21773..22187).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[22201..22213).1" Target="25003:[18201..18226).1" />
<Link Source="25003:[18197..18490).2" Target="25003:[22201..22213).1" />
<Link Source="25003:[18197..18490).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[17611..17641).1" />
<Link Source="25003:[18453..18475).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[18462..18474).1" Target="25003:[18197..18490).2" />
<Link Source="25003:[21372..21407).1" Target="25003:[18453..18475).1" />
<Link Source="25003:[21372..21407).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[21372..21407).1" />
<Link Source="25003:[21433..21546).1" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).2" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[23085..23122).1" />
<Link Source="25003:[21433..21546).4" Target="25003:[18462..18474).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).1" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).2" />
<Link Source="25003:[21433..21546).5" Target="25003:[21433..21546).4" />
<Link Source="25003:[21433..21546).5" Target="25002:[2991..3166).4" />
<Link Source="25003:[21433..21546).5" Target="25003:[18462..18474).1" />
<Link Source="25003:[18506..18543).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18557..18581).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18557..18581).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18658..18664).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18678..18713).1" />
<Link Source="25003:[18678..18713).3" Target="25003:[18557..18581).1" />
<Link Source="25003:[18678..18713).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[18727..18781).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18795..18929).1" Target="25003:[17577..17609).1" />
<Link Source="25003:[18795..18929).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18992).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[18943..18992).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18992).2" Target="25003:[18727..18781).1" />
<Link Source="25003:[18943..18992).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[18943..18991).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18992).1" />
<Link Source="25003:[22599..22615).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18992).2" />
<Link Source="25003:[22617..22643).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[22617..22643).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[22669..22689).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).1" Target="25003:[18943..18991).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22703..22939).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[22669..22689).1" />
<Link Source="25003:[22703..22939).3" Target="25003:[18943..18991).1" />
<Link Source="25003:[18943..18992).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[19106..19139).1" />
<Link Source="25003:[19106..19139).3" Target="25003:[18678..18713).3" />
<Link Source="25003:[19106..19139).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[19153..19205).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19219..19250).1" Target="25003:[21433..21546).5" />
<Link Source="25003:[19219..19250).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[19264..20938).3" Target="25003:[19219..19250).1" />
<Link Source="25003:[19264..20938).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[20952..21034).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[19264..20938).1" />
<Link Source="25003:[20952..21034).2" Target="25003:[20952..21034).1" />
<Link Source="25003:[20952..21034).2" Target="25002:[4126..4179).1" />
<Link Source="25003:[21050..21081).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[18506..18543).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[21050..21081).1" />
<Link Source="25003:[21050..21081).3" Target="25003:[19106..19139).3" />
<Link Source="25003:[21050..21081).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21095..21192).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).2" Target="25003:[19153..19205).1" />
<Link Source="25003:[21095..21192).2" Target="25002:[4126..4179).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3129..3133).1" />
<Link Source="25012:[3121..3141).4" Target="25012:[3121..3141).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3135..3139).1" />
<Link Source="25012:[3121..3141).5" Target="25012:[3121..3141).1" />
<Link Source="25012:[3102..3141).1" Target="25012:[3121..3141).1" />
<Link Source="25003:[21095..21192).3" Target="EXTERNAL" />
<Link Source="25003:[21095..21192).3" Target="25002:[4126..4179).1" />
<Link Source="25003:[21095..21192).4" Target="25002:[4126..4179).1" />
<Link Source="25003:[21113..21190).1" Target="25002:[4126..4179).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21095..21192).1" />
<Link Source="25012:[2473..2496).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2498..2519).1" Target="25003:[21095..21192).2" />
<Link Source="25012:[2498..2519).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2521..2537).1" Target="25003:[21095..21192).3" />
<Link Source="25012:[2521..2537).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2539..2575).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2539..2575).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2577..2608).1" Target="25003:[21095..21192).4" />
<Link Source="25012:[2577..2608).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2539..2575).1" />
<Link Source="25012:[2634..2703).2" Target="25012:[2634..2703).1" />
<Link Source="25012:[2634..2703).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2644..2662).1" Target="25012:[2634..2703).2" />
<Link Source="25012:[2644..2662).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1074..1101).1" Target="EXTERNAL" />
<Link Source="25012:[1194..1223).1" Target="25012:[1074..1101).1" />
<Link Source="25012:[1194..1223).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1183..1293).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[4217..4231).1" Target="25012:[4230..4231).1" />
<Link Source="25012:[4264..4278).1" Target="25012:[4277..4278).1" />
<Link Source="25012:[4311..4325).1" Target="25012:[4324..4325).1" />
<Link Source="25012:[3676..10647).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1157..1166).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1194..1223).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1183..1293).1" />
<Link Source="25012:[1257..1266).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[1053..1102).1" Target="25012:[1063..1102).1" />
<Link Source="25012:[2717..2783).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2717..2783).1" />
<Link Source="25012:[2717..2783).3" Target="25012:[2577..2608).1" />
<Link Source="25012:[2717..2783).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2799..2869).1" Target="25012:[2473..2496).1" />
<Link Source="25012:[2799..2869).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2883..2947).1" Target="25012:[2498..2519).1" />
<Link Source="25012:[2883..2947).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).1" Target="25012:[2521..2537).1" />
<Link Source="25012:[2963..3048).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[2963..3048).2" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).3" Target="25012:[2883..2947).1" />
<Link Source="25012:[2963..3048).3" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).4" Target="25012:[2717..2783).3" />
<Link Source="25012:[2963..3048).4" Target="25003:[21113..21190).1" />
<Link Source="25012:[2993..3046).1" Target="25003:[21113..21190).1" />
<Link Source="25012:[1574..1592).1" Target="25012:[2963..3048).2" />
<Link Source="25012:[1574..1592).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1594..1612).1" Target="25012:[2963..3048).3" />
<Link Source="25012:[1594..1612).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1614..1638).1" Target="25012:[2963..3048).4" />
<Link Source="25012:[1614..1638).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2644..2662).1" />
<Link Source="25012:[1533..2415).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[1574..1592).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2799..2869).1" />
<Link Source="25012:[1672..2400).2" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).3" Target="25012:[2993..3046).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[1594..1612).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2883..2947).1" />
<Link Source="25012:[1672..2400).4" Target="25012:[2993..3046).1" />
<Link Source="25012:[1693..1757).1" Target="25012:[2993..3046).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1672..2400).1" />
<Link Source="25012:[5394..5413).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5415..5426).1" Target="25012:[1672..2400).2" />
<Link Source="25012:[5415..5426).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5428..5447).1" Target="25012:[1672..2400).3" />
<Link Source="25012:[5428..5447).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5449..5460).1" Target="25012:[1672..2400).4" />
<Link Source="25012:[5449..5460).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1533..2415).1" />
<Link Source="25012:[5357..6686).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[5394..5413).1" />
<Link Source="25012:[5494..5563).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[5415..5426).1" />
<Link Source="25012:[5494..5563).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[5428..5447).1" />
<Link Source="25012:[5494..5563).3" Target="25012:[1693..1757).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[5449..5460).1" />
<Link Source="25012:[5494..5563).4" Target="25012:[1693..1757).1" />
<Link Source="25012:[5505..5562).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5494..5563).1" />
<Link Source="25012:[9402..9421).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9423..9434).1" Target="25012:[5494..5563).2" />
<Link Source="25012:[9423..9434).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9436..9455).1" Target="25012:[5494..5563).3" />
<Link Source="25012:[9436..9455).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9457..9468).1" Target="25012:[5494..5563).4" />
<Link Source="25012:[9457..9468).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5357..6686).1" />
<Link Source="25012:[9369..10636).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9423..9434).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[9502..9523).1" />
<Link Source="25012:[9502..9523).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9457..9468).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[9541..9562).1" />
<Link Source="25012:[9541..9562).2" Target="25012:[5505..5562).1" />
<Link Source="25012:[9740..9764).1" Target="25012:[9502..9523).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[9541..9562).2" />
<Link Source="25012:[9740..9764).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9796).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9784..9796).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[9784..9791).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9814..9943).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[9814..9943).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[9963..10092).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9963..10092).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[9457..9468).1" />
<Link Source="25012:[9963..10092).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10112..10592).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[10112..10592).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[9423..9434).1" />
<Link Source="25012:[10112..10592).3" Target="25012:[5505..5562).1" />
<Link Source="25012:[10612..10621).1" Target="25012:[9740..9764).1" />
<Link Source="25012:[10612..10621).1" Target="25012:[5505..5562).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[5415..5426).1" />
<Link Source="25012:[5581..5597).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[5449..5460).1" />
<Link Source="25012:[5615..5631).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5581..5597).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[5651..6341).1" />
<Link Source="25012:[5651..6341).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[6361..6506).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[5581..5597).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[6361..6506).1" />
<Link Source="25012:[6361..6506).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).1" Target="25012:[1693..1757).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[5615..5631).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[6526..6671).1" />
<Link Source="25012:[6526..6671).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[5357..6686).2" Target="25012:[1693..1757).1" />
<Link Source="25012:[1672..2400).5" Target="25012:[5357..6686).2" />
<Link Source="25012:[1672..2400).5" Target="25012:[2993..3046).1" />
<Link Source="25012:[1533..2415).2" Target="25012:[2993..3046).1" />
<Link Source="25012:[2963..3048).5" Target="25012:[1533..2415).2" />
<Link Source="25012:[2963..3048).5" Target="25003:[21113..21190).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2963..3048).1" />
<Link Source="25012:[2963..3048).7" Target="25012:[2963..3048).5" />
<Link Source="25012:[2963..3048).7" Target="25003:[21113..21190).1" />
<Link Source="25003:[21095..21192).10" Target="25003:[18506..18543).1" />
<Link Source="25003:[21095..21192).10" Target="25012:[2963..3048).7" />
<Link Source="25003:[21095..21192).10" Target="25003:[21050..21081).3" />
<Link Source="25003:[21095..21192).10" Target="25002:[4126..4179).1" />
<Link Source="25003:[21208..21226).1" Target="25003:[19153..19205).1" />
<Link Source="25003:[21208..21226).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21240..21260).1" Target="25003:[18727..18781).1" />
<Link Source="25003:[21240..21260).1" Target="25002:[4126..4179).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[18506..18543).1" />
<Link Source="25003:[21276..21305).1" Target="25003:[21095..21192).10" />
<Link Source="25003:[21276..21305).1" Target="25002:[4126..4179).1" />
<Link Source="25002:[4102..4181).5" Target="25003:[21276..21305).1" />
<Link Source="25002:[4102..4181).5" Target="25002:[1656..1702).1" />
<Link Source="25002:[2401..2451).3" Target="25002:[4446..4474).1" />
<Link Source="25002:[4446..4475).3" Target="28001:[73991..74036).1" />
<Link Source="25002:[4489..4523).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4489..4523).1" Target="28001:[73991..74036).1" />
<Link Source="25002:[4489..4523).2" Target="10327:[1279..1312).2" />
<Link Source="25002:[4489..4523).2" Target="28001:[73991..74036).1" />
<Link Source="25002:[4489..4522).1" Target="28001:[73991..74036).1" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4523).1" />
<Link Source="25002:[4637..4651).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4523).2" />
<Link Source="25002:[4653..4691).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4653..4691).1" />
<Link Source="25002:[4750..5836).1" Target="25002:[4489..4522).1" />
<Link Source="25002:[4489..4523).3" Target="28001:[73991..74036).1" />
<Link Source="25002:[4539..4548).1" Target="25002:[4263..4282).1" />
<Link Source="25002:[4539..4548).1" Target="28001:[73991..74036).1" />
</Links>
</DirectedGraph>
