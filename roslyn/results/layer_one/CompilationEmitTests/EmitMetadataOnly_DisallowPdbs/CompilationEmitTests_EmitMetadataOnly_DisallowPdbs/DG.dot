digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 808617"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 808618"];
3 [label="param CompilationEmitTests(this) 808619"];
4 [label="param EmitMetadataTestBase(this) 808620"];
5 [label="param CSharpTestBase(this) 808621"];
6 [label="param CommonTestBase(this) 808622"];
7 [label="param TestBase(this) 808623"];
8 [label="_temp 808624"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 808625"];
10 [label="param EmitMetadataOnly_DisallowPdbs(this) 808626"];
11 [label="CSharpCompilation comp = CreateEmptyCompilation('', references: new[] { MscorlibRef },\n                options: TestOptions.DebugDll.WithDeterministic(true)); 808627"];
12 [label="MscorlibRef 808628"];
13 [label="s_mscorlibRef.Value 808629"];
14 [label="CSharpCompilation comp = CreateEmptyCompilation('', references: new[] { MscorlibRef },\n                options: TestOptions.DebugDll.WithDeterministic(true)); 808630"];
15 [label="new[] { MscorlibRef } 808631"];
16 [label="param operator(string source) 808632"];
17 [label="source 808633"];
18 [label="new CSharpTestSource(source) 808634"];
19 [label="param CSharpTestSource(object value) 808635"];
20 [label="param CSharpTestSource(this) 808636"];
21 [label="Value 808637"];
22 [label="param CreateEmptyCompilation(CSharpTestSource source) 808638"];
23 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 808639"];
24 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 808640"];
25 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 808641"];
26 [label="param CreateEmptyCompilation(string assemblyName = '') 808642"];
27 [label="param CreateEmptyCompilation(string sourceFileName = '') 808643"];
28 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 808644"];
29 [label="=> CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 808645"];
30 [label="source 808646"];
31 [label="references 808647"];
32 [label="options 808648"];
33 [label="parseOptions 808649"];
34 [label="assemblyName 808650"];
35 [label="sourceFileName 808651"];
36 [label="skipUsesIsNullable 808652"];
37 [label="null 808653"];
38 [label="experimentalFeature: null 808654"];
39 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 808655"];
40 [label="param CreateCompilationCore(CSharpTestSource source) 808656"];
41 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 808657"];
42 [label="param CreateCompilationCore(CSharpCompilationOptions options) 808658"];
43 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 808659"];
44 [label="param CreateCompilationCore(string assemblyName) 808660"];
45 [label="param CreateCompilationCore(string sourceFileName) 808661"];
46 [label="param CreateCompilationCore(bool skipUsesIsNullable) 808662"];
47 [label="param CreateCompilationCore(MessageID? experimentalFeature) 808663"];
48 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 808664"];
49 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 808665"];
50 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 808666"];
51 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 808667"];
52 [label="param GetSyntaxTrees(string sourceFileName = '') 808668"];
53 [label="param GetSyntaxTrees(this) 808669"];
54 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 808670"];
55 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 808671"];
56 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 808672"];
57 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 808673"];
58 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 808674"];
59 [label="param Parse(string text) 808675"];
60 [label="param Parse(string filename = '') 808676"];
61 [label="param Parse(CSharpParseOptions options = null) 808677"];
62 [label="param Parse(Encoding encoding = null) 808678"];
63 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 808679"];
64 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 808680"];
65 [label="options = TestOptions.Regular; 808681"];
66 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 808682"];
67 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 808683"];
68 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 808684"];
69 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 808685"];
70 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 808686"];
71 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 808687"];
72 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 808688"];
73 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 808689"];
74 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 808690"];
75 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 808691"];
76 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 808692"];
77 [label="param CheckSerializable(SyntaxTree tree) 808693"];
78 [label="var stream = new MemoryStream(); 808694"];
79 [label="var root = tree.GetRoot(); 808695"];
80 [label="var root = tree.GetRoot(); 808696"];
81 [label="root.SerializeTo(stream); 808697"];
82 [label="root.SerializeTo(stream); 808698"];
83 [label="root.SerializeTo(stream); 808699"];
84 [label="stream.Position = 0; 808700"];
85 [label="stream.Position 808701"];
86 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 808702"];
87 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 808703"];
88 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 808704"];
89 [label="return tree; 808705"];
90 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 808706"];
91 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 808707"];
92 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 808708"];
93 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 808709"];
94 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 808710"];
95 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 808711"];
96 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 808712"];
97 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 808713"];
98 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 808714"];
99 [label="param ValidateIOperations(Func<Compilation> createCompilation) 808715"];
100 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 808716"];
101 [label="return; 808717"];
102 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 808718"];
103 [label="var compilation = createCompilationLambda(); 808719"];
104 [label="var compilation = createCompilationLambda(); 808720"];
105 [label="return Guid.NewGuid().ToString('D'); 808721"];
106 [label="var compilation = createCompilationLambda(); 808722"];
107 [label="OutputKind.ConsoleApplication 808723"];
108 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 808724"];
109 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 808725"];
110 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 808726"];
111 [label="OutputKind.DynamicallyLinkedLibrary 808727"];
112 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 808728"];
113 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 808729"];
114 [label="true 808730"];
115 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 808731"];
116 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 808732"];
117 [label="param Create(string? assemblyName) 808733"];
118 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 808734"];
119 [label="param Create(IEnumerable<MetadataReference>? references = null) 808735"];
120 [label="param Create(CSharpCompilationOptions? options = null) 808736"];
121 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 808737"];
122 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 808738"];
123 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 808739"];
124 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 808740"];
125 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 808741"];
126 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 808742"];
127 [label="param Create(string? assemblyName) 808743"];
128 [label="param Create(CSharpCompilationOptions options) 808744"];
129 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 808745"];
130 [label="param Create(IEnumerable<MetadataReference>? references) 808746"];
131 [label="param Create(CSharpCompilation? previousSubmission) 808747"];
132 [label="param Create(Type? returnType) 808748"];
133 [label="param Create(Type? hostObjectType) 808749"];
134 [label="param Create(bool isSubmission) 808750"];
135 [label="RoslynDebug.Assert(options != null); 808751"];
136 [label="RoslynDebug.Assert(options != null); 808752"];
137 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 808753"];
138 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 808754"];
139 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 808755"];
140 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 808756"];
141 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 808757"];
142 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 808758"];
143 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 808759"];
144 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 808760"];
145 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 808761"];
146 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 808762"];
147 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 808763"];
148 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 808764"];
149 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 808765"];
150 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 808766"];
151 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 808767"];
152 [label="param SyntaxAndDeclarationManager(string scriptClassName) 808768"];
153 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 808769"];
154 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 808770"];
155 [label="param SyntaxAndDeclarationManager(bool isSubmission) 808771"];
156 [label="param SyntaxAndDeclarationManager(State state) 808772"];
157 [label="param SyntaxAndDeclarationManager(this) 808773"];
158 [label="externalSyntaxTrees 808774"];
159 [label="scriptClassName 808775"];
160 [label="resolver 808776"];
161 [label="messageProvider 808777"];
162 [label="isSubmission 808778"];
163 [label="param SyntaxAndDeclarationManager(this) 808779"];
164 [label="param SyntaxAndDeclarationManager(this) 808780"];
165 [label="_lazyState 808781"];
166 [label="_lazyState 808782"];
167 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 808783"];
168 [label="param CSharpCompilation(string? assemblyName) 808784"];
169 [label="param CSharpCompilation(CSharpCompilationOptions options) 808785"];
170 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 808786"];
171 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 808787"];
172 [label="param CSharpCompilation(Type? submissionReturnType) 808788"];
173 [label="param CSharpCompilation(Type? hostObjectType) 808789"];
174 [label="param CSharpCompilation(bool isSubmission) 808790"];
175 [label="param CSharpCompilation(ReferenceManager? referenceManager) 808791"];
176 [label="param CSharpCompilation(bool reuseReferenceManager) 808792"];
177 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 808793"];
178 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 808794"];
179 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 808795"];
180 [label="param CSharpCompilation(this) 808796"];
181 [label="assemblyName 808797"];
182 [label="options 808798"];
183 [label="references 808799"];
184 [label="previousSubmission 808800"];
185 [label="submissionReturnType 808801"];
186 [label="hostObjectType 808802"];
187 [label="isSubmission 808803"];
188 [label="referenceManager 808804"];
189 [label="reuseReferenceManager 808805"];
190 [label="syntaxAndDeclarations 808806"];
191 [label="syntaxAndDeclarations.ExternalSyntaxTrees 808807"];
192 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 808808"];
193 [label="semanticModelProvider 808809"];
194 [label="eventQueue 808810"];
195 [label="param CSharpCompilation(this) 808811"];
196 [label="param CSharpCompilation(string? assemblyName) 808812"];
197 [label="param CSharpCompilation(CSharpCompilationOptions options) 808813"];
198 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 808814"];
199 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 808815"];
200 [label="param CSharpCompilation(Type? submissionReturnType) 808816"];
201 [label="param CSharpCompilation(Type? hostObjectType) 808817"];
202 [label="param CSharpCompilation(bool isSubmission) 808818"];
203 [label="param CSharpCompilation(ReferenceManager? referenceManager) 808819"];
204 [label="param CSharpCompilation(bool reuseReferenceManager) 808820"];
205 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 808821"];
206 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 808822"];
207 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 808823"];
208 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 808824"];
209 [label="param CSharpCompilation(this) 808825"];
210 [label="assemblyName 808826"];
211 [label="references 808827"];
212 [label="features 808828"];
213 [label="isSubmission 808829"];
214 [label="semanticModelProvider 808830"];
215 [label="eventQueue 808831"];
216 [label="param CSharpCompilation(this) 808832"];
217 [label="param CSharpCompilation(this) 808833"];
218 [label="_options 808834"];
219 [label="_globalImports 808835"];
220 [label="_previousSubmissionImports 808836"];
221 [label="_globalNamespaceAlias 808837"];
222 [label="_scriptClass 808838"];
223 [label="_lazyHostObjectTypeSymbol 808839"];
224 [label="_lazyImportInfos 808840"];
225 [label="_conversions 808841"];
226 [label="_anonymousTypeManager 808842"];
227 [label="_lazyGlobalNamespace 808843"];
228 [label="builtInOperators 808844"];
229 [label="_lazyAssemblySymbol 808845"];
230 [label="_referenceManager 808846"];
231 [label="_syntaxAndDeclarations 808847"];
232 [label="_lazyEntryPoint 808848"];
233 [label="_lazyEmitNullablePublicOnly 808849"];
234 [label="_lazyCompilationUnitCompletedTrees 808850"];
235 [label="NullableAnalysisData 808851"];
236 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 808852"];
237 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 808853"];
238 [label="_externAliasTargets 808854"];
239 [label="_moduleInitializerMethods 808855"];
240 [label="_binderFactories 808856"];
241 [label="_ignoreAccessibilityBinderFactories 808857"];
242 [label="_lazyDeclarationDiagnostics 808858"];
243 [label="_declarationDiagnosticsFrozen 808859"];
244 [label="new DiagnosticBag() 808860"];
245 [label="_additionalCodegenWarnings = new DiagnosticBag() 808861"];
246 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 808862"];
247 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 808863"];
248 [label="WellKnownMemberSignatureComparer 808864"];
249 [label="_options 808865"];
250 [label="this.builtInOperators = new BuiltInOperators(this); 808866"];
251 [label="this.builtInOperators = new BuiltInOperators(this); 808867"];
252 [label="new BuiltInOperators(this) 808868"];
253 [label="param BuiltInOperators(CSharpCompilation compilation) 808869"];
254 [label="param BuiltInOperators(this) 808870"];
255 [label="_compilation 808871"];
256 [label="_builtInUnaryOperators 808872"];
257 [label="_builtInOperators 808873"];
258 [label="_compilation 808874"];
259 [label="this.builtInOperators 808875"];
260 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 808876"];
261 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 808877"];
262 [label="_scriptClass 808878"];
263 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 808879"];
264 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 808880"];
265 [label="_globalImports 808881"];
266 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 808882"];
267 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 808883"];
268 [label="_previousSubmissionImports 808884"];
269 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 808885"];
270 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 808886"];
271 [label="_globalNamespaceAlias 808887"];
272 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 808888"];
273 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 808889"];
274 [label="_anonymousTypeManager 808890"];
275 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 808891"];
276 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 808892"];
277 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 808893"];
278 [label="LanguageVersion? result = null; 808894"];
279 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 808895"];
280 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 808896"];
281 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 808897"];
282 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 808898"];
283 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 808899"];
284 [label="this.LanguageVersion 808900"];
285 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 808901"];
286 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 808902"];
287 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 808903"];
288 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 808904"];
289 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 808905"];
290 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 808906"];
291 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 808907"];
292 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 808908"];
293 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 808909"];
294 [label="this.Options 808910"];
295 [label="get\n            {\n                return _options;\n            } 808911"];
296 [label="return _options; 808912"];
297 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 808913"];
298 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 808914"];
299 [label="_referenceManager 808915"];
300 [label="_syntaxAndDeclarations 808916"];
301 [label="Debug.Assert(_lazyAssemblySymbol is null); 808917"];
302 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 808918"];
303 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 808919"];
304 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 808920"];
305 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 808921"];
306 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 808922"];
307 [label="compilation.AddSyntaxTrees(syntaxTrees) 808923"];
308 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 808924"];
309 [label="param AddSyntaxTrees(this) 808925"];
310 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 808926"];
311 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 808927"];
312 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 808928"];
313 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 808929"];
314 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 808930"];
315 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 808931"];
316 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 808932"];
317 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 808933"];
318 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 808934"];
319 [label="bool reuseReferenceManager = true; 808935"];
320 [label="int i = 0; 808936"];
321 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 808937"];
322 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 808938"];
323 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 808939"];
324 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 808940"];
325 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 808941"];
326 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 808942"];
327 [label="externalSyntaxTrees.Add(tree); 808943"];
328 [label="externalSyntaxTrees.Add(tree); 808944"];
329 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 808945"];
330 [label="i++; 808946"];
331 [label="externalSyntaxTrees.Free(); 808947"];
332 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 808948"];
333 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 808949"];
334 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 808950"];
335 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 808951"];
336 [label="param AddSyntaxTrees(this) 808952"];
337 [label="var scriptClassName = this.ScriptClassName; 808953"];
338 [label="var resolver = this.Resolver; 808954"];
339 [label="var messageProvider = this.MessageProvider; 808955"];
340 [label="var isSubmission = this.IsSubmission; 808956"];
341 [label="var state = _lazyState; 808957"];
342 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 808958"];
343 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 808959"];
344 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 808960"];
345 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 808961"];
346 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 808962"];
347 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 808963"];
348 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 808964"];
349 [label="param WithExternalSyntaxTrees(this) 808965"];
350 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 808966"];
351 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 808967"];
352 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 808968"];
353 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 808969"];
354 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 808970"];
355 [label="param SyntaxAndDeclarationManager(string scriptClassName) 808971"];
356 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 808972"];
357 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 808973"];
358 [label="param SyntaxAndDeclarationManager(bool isSubmission) 808974"];
359 [label="param SyntaxAndDeclarationManager(State state) 808975"];
360 [label="param SyntaxAndDeclarationManager(this) 808976"];
361 [label="param SyntaxAndDeclarationManager(this) 808977"];
362 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 808978"];
363 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 808979"];
364 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 808980"];
365 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 808981"];
366 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 808982"];
367 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 808983"];
368 [label="param Update(ReferenceManager referenceManager) 808984"];
369 [label="param Update(bool reuseReferenceManager) 808985"];
370 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 808986"];
371 [label="param Update(this) 808987"];
372 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 808988"];
373 [label="this.PreviousSubmission 808989"];
374 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 808990"];
375 [label="ScriptCompilationInfo 808991"];
376 [label="ScriptCompilationInfo?.PreviousScriptCompilation 808992"];
377 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 808993"];
378 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 808994"];
379 [label="this.SubmissionReturnType 808995"];
380 [label="=> ScriptCompilationInfo 808996"];
381 [label="ScriptCompilationInfo 808997"];
382 [label="this.HostObjectType 808998"];
383 [label="=> ScriptCompilationInfo 808999"];
384 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 809000"];
385 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 809001"];
386 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 809002"];
387 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 809003"];
388 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 809004"];
389 [label="param CSharpCompilation(string? assemblyName) 809005"];
390 [label="param CSharpCompilation(CSharpCompilationOptions options) 809006"];
391 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 809007"];
392 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 809008"];
393 [label="param CSharpCompilation(Type? submissionReturnType) 809009"];
394 [label="param CSharpCompilation(Type? hostObjectType) 809010"];
395 [label="param CSharpCompilation(bool isSubmission) 809011"];
396 [label="param CSharpCompilation(ReferenceManager? referenceManager) 809012"];
397 [label="param CSharpCompilation(bool reuseReferenceManager) 809013"];
398 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 809014"];
399 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 809015"];
400 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 809016"];
401 [label="param CSharpCompilation(this) 809017"];
402 [label="previousSubmission 809018"];
403 [label="submissionReturnType 809019"];
404 [label="hostObjectType 809020"];
405 [label="syntaxAndDeclarations.ExternalSyntaxTrees 809021"];
406 [label="eventQueue 809022"];
407 [label="param CSharpCompilation(this) 809023"];
408 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 809024"];
409 [label="param CSharpCompilation(Type? submissionReturnType) 809025"];
410 [label="param CSharpCompilation(Type? hostObjectType) 809026"];
411 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 809027"];
412 [label="param CSharpCompilation(this) 809028"];
413 [label="eventQueue 809029"];
414 [label="param CSharpCompilation(this) 809030"];
415 [label="_options 809031"];
416 [label="_globalImports 809032"];
417 [label="_previousSubmissionImports 809033"];
418 [label="_globalNamespaceAlias 809034"];
419 [label="_scriptClass 809035"];
420 [label="_lazyHostObjectTypeSymbol 809036"];
421 [label="_lazyImportInfos 809037"];
422 [label="_conversions 809038"];
423 [label="_anonymousTypeManager 809039"];
424 [label="_lazyGlobalNamespace 809040"];
425 [label="builtInOperators 809041"];
426 [label="_lazyAssemblySymbol 809042"];
427 [label="_referenceManager 809043"];
428 [label="_syntaxAndDeclarations 809044"];
429 [label="_lazyEntryPoint 809045"];
430 [label="_lazyEmitNullablePublicOnly 809046"];
431 [label="_lazyCompilationUnitCompletedTrees 809047"];
432 [label="NullableAnalysisData 809048"];
433 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 809049"];
434 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 809050"];
435 [label="_externAliasTargets 809051"];
436 [label="_moduleInitializerMethods 809052"];
437 [label="_binderFactories 809053"];
438 [label="_ignoreAccessibilityBinderFactories 809054"];
439 [label="_lazyDeclarationDiagnostics 809055"];
440 [label="_declarationDiagnosticsFrozen 809056"];
441 [label="new DiagnosticBag() 809057"];
442 [label="_additionalCodegenWarnings = new DiagnosticBag() 809058"];
443 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 809059"];
444 [label="this.builtInOperators = new BuiltInOperators(this); 809060"];
445 [label="this.builtInOperators = new BuiltInOperators(this); 809061"];
446 [label="new BuiltInOperators(this) 809062"];
447 [label="param BuiltInOperators(CSharpCompilation compilation) 809063"];
448 [label="param BuiltInOperators(this) 809064"];
449 [label="_compilation 809065"];
450 [label="_builtInUnaryOperators 809066"];
451 [label="_builtInOperators 809067"];
452 [label="_compilation 809068"];
453 [label="this.builtInOperators 809069"];
454 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 809070"];
455 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 809071"];
456 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 809072"];
457 [label="LanguageVersion? result = null; 809073"];
458 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 809074"];
459 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 809075"];
460 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 809076"];
461 [label="result = version; 809077"];
462 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 809078"];
463 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809079"];
464 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809080"];
465 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809081"];
466 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809082"];
467 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809083"];
468 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 809084"];
469 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 809085"];
470 [label="referenceManager.AssertCanReuseForCompilation(this); 809086"];
471 [label="referenceManager.AssertCanReuseForCompilation(this); 809087"];
472 [label="_referenceManager 809088"];
473 [label="Debug.Assert(_lazyAssemblySymbol is null); 809089"];
474 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 809090"];
475 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 809091"];
476 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 809092"];
477 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 809093"];
478 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 809094"];
479 [label="return compilation; 809095"];
480 [label="var compilation = createCompilationLambda(); 809096"];
481 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 809097"];
482 [label="IsNullableEnabled(compilation) 809098"];
483 [label="param IsNullableEnabled(CSharpCompilation compilation) 809099"];
484 [label="compilation.SyntaxTrees 809100"];
485 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 809101"];
486 [label="_syntaxAndDeclarations.GetLazyState() 809102"];
487 [label="param GetLazyState(this) 809103"];
488 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 809104"];
489 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 809105"];
490 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 809106"];
491 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 809107"];
492 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 809108"];
493 [label="param CreateState(string scriptClassName) 809109"];
494 [label="param CreateState(SourceReferenceResolver resolver) 809110"];
495 [label="param CreateState(CommonMessageProvider messageProvider) 809111"];
496 [label="param CreateState(bool isSubmission) 809112"];
497 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 809113"];
498 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 809114"];
499 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 809115"];
500 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 809116"];
501 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 809117"];
502 [label="var declTable = DeclarationTable.Empty; 809118"];
503 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 809119"];
504 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 809120"];
505 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 809121"];
506 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 809122"];
507 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 809123"];
508 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 809124"];
509 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 809125"];
510 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 809126"];
511 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 809127"];
512 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 809128"];
513 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 809129"];
514 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 809130"];
515 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 809131"];
516 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 809132"];
517 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 809133"];
518 [label="param AppendAllSyntaxTrees(string scriptClassName) 809134"];
519 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 809135"];
520 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 809136"];
521 [label="param AppendAllSyntaxTrees(bool isSubmission) 809137"];
522 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 809138"];
523 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 809139"];
524 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 809140"];
525 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 809141"];
526 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 809142"];
527 [label="var sourceCodeKind = tree.Options.Kind; 809143"];
528 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 809144"];
529 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 809145"];
530 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 809146"];
531 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 809147"];
532 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 809148"];
533 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 809149"];
534 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 809150"];
535 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 809151"];
536 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 809152"];
537 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 809153"];
538 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 809154"];
539 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 809155"];
540 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 809156"];
541 [label="declMapBuilder.Add(tree, lazyRoot); 809157"];
542 [label="declMapBuilder.Add(tree, lazyRoot); 809158"];
543 [label="declMapBuilder.Add(tree, lazyRoot); 809159"];
544 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 809160"];
545 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 809161"];
546 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 809162"];
547 [label="treesBuilder.Add(tree); 809163"];
548 [label="treesBuilder.Add(tree); 809164"];
549 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 809165"];
550 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 809166"];
551 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 809167"];
552 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 809168"];
553 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 809169"];
554 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 809170"];
555 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 809171"];
556 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 809172"];
557 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 809173"];
558 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 809174"];
559 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 809175"];
560 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 809176"];
561 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 809177"];
562 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 809178"];
563 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 809179"];
564 [label="param State(DeclarationTable declarationTable) 809180"];
565 [label="param State(this) 809181"];
566 [label="OrdinalMap 809182"];
567 [label="LoadDirectiveMap 809183"];
568 [label="LoadedSyntaxTreeMap 809184"];
569 [label="RootNamespaces 809185"];
570 [label="DeclarationTable 809186"];
571 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 809187"];
572 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 809188"];
573 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 809189"];
574 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 809190"];
575 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 809191"];
576 [label="this.SyntaxTrees 809192"];
577 [label="this.OrdinalMap 809193"];
578 [label="this.LoadDirectiveMap 809194"];
579 [label="this.LoadedSyntaxTreeMap 809195"];
580 [label="this.RootNamespaces 809196"];
581 [label="this.DeclarationTable 809197"];
582 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 809198"];
583 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 809199"];
584 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 809200"];
585 [label="return _lazyState; 809201"];
586 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 809202"];
587 [label="var trees = compilation.SyntaxTrees; 809203"];
588 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 809204"];
589 [label="var options = (CSharpParseOptions)trees[0].Options; 809205"];
590 [label="var options = (CSharpParseOptions)trees[0].Options; 809206"];
591 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 809207"];
592 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 809208"];
593 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 809209"];
594 [label="return compilation; 809210"];
595 [label="CSharpCompilation comp = CreateEmptyCompilation('', references: new[] { MscorlibRef },\n                options: TestOptions.DebugDll.WithDeterministic(true)); 809211"];
596 [label="using (var output = new MemoryStream())\n            using (var pdbOutput = new MemoryStream())\n            {\n                CustomAssert.Throws<ArgumentException>(() => comp.Emit(output, pdbOutput,\n                    options: EmitOptions.Default.WithEmitMetadataOnly(true)));\n            } 809212"];
597 [label="using (var pdbOutput = new MemoryStream())\n            {\n                CustomAssert.Throws<ArgumentException>(() => comp.Emit(output, pdbOutput,\n                    options: EmitOptions.Default.WithEmitMetadataOnly(true)));\n            } 809213"];
598 [label="CustomAssert.Throws<ArgumentException>(() => comp.Emit(output, pdbOutput,\n                    options: EmitOptions.Default.WithEmitMetadataOnly(true))); 809214"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 1;
13 -> 12;
14 -> 13;
14 -> 1;
15 -> 14;
15 -> 11;
15 -> 1;
16 -> 15;
16 -> 11;
17 -> 16;
17 -> 11;
18 -> 11;
19 -> 17;
19 -> 18;
20 -> 18;
21 -> 19;
21 -> 20;
21 -> 18;
22 -> 15;
22 -> 11;
23 -> 15;
23 -> 11;
24 -> 15;
24 -> 11;
25 -> 15;
25 -> 11;
26 -> 15;
26 -> 11;
27 -> 15;
27 -> 11;
28 -> 15;
28 -> 11;
29 -> 15;
29 -> 11;
30 -> 22;
30 -> 11;
31 -> 23;
31 -> 11;
32 -> 24;
32 -> 11;
33 -> 25;
33 -> 11;
34 -> 26;
34 -> 11;
35 -> 27;
35 -> 11;
36 -> 28;
36 -> 11;
37 -> 11;
38 -> 37;
38 -> 11;
39 -> 11;
40 -> 30;
40 -> 39;
41 -> 31;
41 -> 39;
42 -> 32;
42 -> 39;
43 -> 33;
43 -> 39;
44 -> 34;
44 -> 39;
45 -> 35;
45 -> 39;
46 -> 36;
46 -> 39;
47 -> 38;
47 -> 39;
48 -> 43;
48 -> 39;
49 -> 45;
49 -> 39;
50 -> 39;
51 -> 48;
51 -> 50;
52 -> 49;
52 -> 50;
53 -> 40;
53 -> 50;
54 -> 53;
54 -> 21;
54 -> 50;
55 -> 54;
56 -> 52;
56 -> 54;
57 -> 51;
57 -> 54;
58 -> 54;
59 -> 55;
59 -> 58;
60 -> 56;
60 -> 58;
61 -> 57;
61 -> 58;
62 -> 55;
62 -> 58;
63 -> 58;
64 -> 61;
64 -> 63;
64 -> 58;
65 -> 0;
65 -> 64;
66 -> 59;
66 -> 58;
67 -> 0;
67 -> 58;
68 -> 67;
68 -> 62;
68 -> 58;
69 -> 58;
70 -> 66;
70 -> 68;
70 -> 69;
70 -> 0;
70 -> 58;
71 -> 70;
71 -> 58;
72 -> 65;
72 -> 58;
73 -> 60;
73 -> 58;
74 -> 58;
75 -> 71;
75 -> 72;
75 -> 73;
75 -> 74;
75 -> 70;
75 -> 0;
75 -> 58;
76 -> 58;
77 -> 75;
77 -> 76;
78 -> 76;
79 -> 76;
80 -> 77;
80 -> 75;
80 -> 79;
80 -> 76;
81 -> 78;
81 -> 76;
82 -> 76;
83 -> 80;
83 -> 75;
83 -> 79;
83 -> 81;
83 -> 82;
83 -> 78;
83 -> 76;
84 -> 76;
85 -> 84;
85 -> 78;
85 -> 76;
86 -> 78;
86 -> 76;
87 -> 76;
88 -> 86;
88 -> 87;
88 -> 78;
88 -> 85;
88 -> 76;
89 -> 77;
89 -> 76;
90 -> 89;
90 -> 55;
90 -> 54;
91 -> 55;
91 -> 39;
92 -> 39;
93 -> 42;
93 -> 92;
93 -> 39;
94 -> 0;
94 -> 39;
95 -> 47;
95 -> 39;
96 -> 44;
96 -> 91;
96 -> 41;
96 -> 42;
96 -> 39;
97 -> 96;
97 -> 39;
98 -> 39;
99 -> 97;
99 -> 98;
100 -> 0;
100 -> 98;
101 -> 100;
102 -> 39;
103 -> 96;
103 -> 55;
103 -> 90;
103 -> 75;
103 -> 21;
103 -> 39;
104 -> 39;
105 -> 104;
106 -> 103;
106 -> 105;
106 -> 39;
107 -> 0;
109 -> 107;
109 -> 108;
110 -> 109;
111 -> 0;
113 -> 111;
113 -> 112;
115 -> 113;
115 -> 114;
116 -> 115;
117 -> 103;
117 -> 104;
118 -> 103;
118 -> 104;
119 -> 103;
119 -> 104;
120 -> 103;
120 -> 104;
121 -> 117;
121 -> 104;
122 -> 120;
122 -> 104;
123 -> 118;
123 -> 104;
124 -> 119;
124 -> 104;
125 -> 104;
126 -> 104;
127 -> 121;
127 -> 126;
128 -> 122;
128 -> 126;
129 -> 123;
129 -> 126;
130 -> 124;
130 -> 126;
131 -> 125;
131 -> 126;
132 -> 125;
132 -> 126;
133 -> 125;
133 -> 126;
134 -> 125;
134 -> 126;
135 -> 126;
136 -> 128;
136 -> 135;
136 -> 126;
137 -> 134;
137 -> 126;
138 -> 130;
138 -> 126;
139 -> 138;
139 -> 106;
139 -> 126;
140 -> 127;
140 -> 126;
141 -> 128;
141 -> 126;
142 -> 139;
142 -> 126;
143 -> 131;
143 -> 126;
144 -> 132;
144 -> 126;
145 -> 133;
145 -> 126;
146 -> 134;
146 -> 126;
147 -> 126;
148 -> 0;
148 -> 126;
149 -> 128;
149 -> 139;
149 -> 126;
150 -> 126;
151 -> 148;
151 -> 150;
152 -> 149;
152 -> 150;
153 -> 149;
153 -> 150;
154 -> 148;
154 -> 150;
155 -> 146;
155 -> 150;
156 -> 147;
156 -> 150;
157 -> 147;
157 -> 150;
158 -> 151;
158 -> 150;
159 -> 152;
159 -> 150;
160 -> 153;
160 -> 150;
161 -> 154;
161 -> 150;
162 -> 155;
162 -> 150;
163 -> 150;
164 -> 163;
164 -> 158;
164 -> 159;
164 -> 160;
164 -> 161;
164 -> 162;
164 -> 0;
164 -> 139;
164 -> 150;
165 -> 163;
165 -> 150;
166 -> 156;
166 -> 163;
166 -> 150;
167 -> 126;
168 -> 140;
168 -> 167;
169 -> 141;
169 -> 167;
170 -> 142;
170 -> 167;
171 -> 143;
171 -> 167;
172 -> 144;
172 -> 167;
173 -> 145;
173 -> 167;
174 -> 146;
174 -> 167;
175 -> 147;
175 -> 167;
176 -> 147;
176 -> 167;
177 -> 147;
177 -> 167;
178 -> 147;
178 -> 167;
179 -> 147;
179 -> 167;
180 -> 147;
180 -> 167;
181 -> 168;
181 -> 167;
182 -> 169;
182 -> 167;
183 -> 170;
183 -> 167;
184 -> 171;
184 -> 167;
185 -> 172;
185 -> 167;
186 -> 173;
186 -> 167;
187 -> 174;
187 -> 167;
188 -> 175;
188 -> 167;
189 -> 176;
189 -> 167;
190 -> 177;
190 -> 167;
191 -> 177;
191 -> 164;
191 -> 167;
192 -> 191;
192 -> 164;
192 -> 165;
192 -> 166;
192 -> 167;
193 -> 178;
193 -> 167;
194 -> 179;
194 -> 167;
195 -> 167;
196 -> 181;
196 -> 195;
197 -> 182;
197 -> 195;
198 -> 183;
198 -> 195;
199 -> 184;
199 -> 195;
200 -> 185;
200 -> 195;
201 -> 186;
201 -> 195;
202 -> 187;
202 -> 195;
203 -> 188;
203 -> 195;
204 -> 189;
204 -> 195;
205 -> 190;
205 -> 195;
206 -> 192;
206 -> 195;
207 -> 193;
207 -> 195;
208 -> 194;
208 -> 195;
209 -> 180;
209 -> 195;
210 -> 196;
210 -> 195;
211 -> 198;
211 -> 195;
212 -> 206;
212 -> 195;
213 -> 202;
213 -> 195;
214 -> 207;
214 -> 195;
215 -> 208;
215 -> 195;
216 -> 195;
217 -> 216;
217 -> 210;
217 -> 211;
217 -> 212;
217 -> 213;
217 -> 214;
217 -> 215;
217 -> 139;
217 -> 192;
217 -> 195;
218 -> 216;
218 -> 195;
219 -> 216;
219 -> 195;
220 -> 216;
220 -> 195;
221 -> 216;
221 -> 195;
222 -> 216;
222 -> 195;
223 -> 216;
223 -> 195;
224 -> 216;
224 -> 195;
225 -> 216;
225 -> 195;
226 -> 216;
226 -> 195;
227 -> 216;
227 -> 195;
228 -> 216;
228 -> 195;
229 -> 216;
229 -> 195;
230 -> 216;
230 -> 195;
231 -> 216;
231 -> 195;
232 -> 216;
232 -> 195;
233 -> 216;
233 -> 195;
234 -> 216;
234 -> 195;
235 -> 216;
235 -> 195;
236 -> 216;
236 -> 195;
237 -> 216;
237 -> 195;
238 -> 216;
238 -> 195;
239 -> 216;
239 -> 195;
240 -> 216;
240 -> 195;
241 -> 216;
241 -> 195;
242 -> 216;
242 -> 195;
243 -> 216;
243 -> 195;
244 -> 195;
245 -> 244;
245 -> 216;
245 -> 195;
246 -> 216;
246 -> 195;
247 -> 246;
247 -> 217;
247 -> 218;
247 -> 219;
247 -> 220;
247 -> 221;
247 -> 222;
247 -> 223;
247 -> 224;
247 -> 225;
247 -> 226;
247 -> 227;
247 -> 228;
247 -> 229;
247 -> 230;
247 -> 231;
247 -> 232;
247 -> 233;
247 -> 234;
247 -> 235;
247 -> 236;
247 -> 237;
247 -> 238;
247 -> 239;
247 -> 240;
247 -> 241;
247 -> 242;
247 -> 243;
247 -> 245;
247 -> 244;
247 -> 195;
248 -> 247;
248 -> 216;
248 -> 195;
249 -> 197;
249 -> 216;
249 -> 195;
250 -> 216;
250 -> 195;
251 -> 195;
252 -> 195;
253 -> 250;
253 -> 252;
254 -> 251;
254 -> 252;
255 -> 254;
255 -> 252;
256 -> 254;
256 -> 252;
257 -> 254;
257 -> 252;
258 -> 253;
258 -> 254;
258 -> 252;
259 -> 251;
259 -> 216;
259 -> 195;
260 -> 216;
260 -> 247;
260 -> 195;
261 -> 260;
261 -> 247;
261 -> 248;
261 -> 249;
261 -> 259;
261 -> 258;
261 -> 256;
261 -> 257;
261 -> 195;
262 -> 261;
262 -> 216;
262 -> 195;
263 -> 216;
263 -> 261;
263 -> 195;
264 -> 263;
264 -> 261;
264 -> 262;
264 -> 195;
265 -> 264;
265 -> 216;
265 -> 195;
266 -> 216;
266 -> 264;
266 -> 195;
267 -> 266;
267 -> 264;
267 -> 265;
267 -> 195;
268 -> 267;
268 -> 216;
268 -> 195;
269 -> 216;
269 -> 267;
269 -> 195;
270 -> 269;
270 -> 267;
270 -> 268;
270 -> 195;
271 -> 270;
271 -> 216;
271 -> 195;
272 -> 216;
272 -> 195;
273 -> 272;
273 -> 270;
273 -> 271;
273 -> 195;
274 -> 273;
274 -> 216;
274 -> 195;
275 -> 205;
275 -> 273;
275 -> 195;
276 -> 195;
277 -> 275;
277 -> 276;
278 -> 276;
279 -> 277;
279 -> 276;
280 -> 279;
280 -> 273;
280 -> 274;
280 -> 276;
281 -> 0;
281 -> 276;
282 -> 281;
282 -> 278;
282 -> 276;
283 -> 282;
283 -> 195;
284 -> 283;
284 -> 216;
284 -> 195;
285 -> 202;
285 -> 195;
286 -> 285;
287 -> 199;
287 -> 286;
287 -> 285;
288 -> 200;
288 -> 286;
288 -> 285;
289 -> 287;
289 -> 288;
289 -> 285;
290 -> 201;
290 -> 286;
290 -> 285;
291 -> 289;
291 -> 290;
291 -> 285;
292 -> 204;
292 -> 195;
293 -> 216;
293 -> 273;
293 -> 274;
293 -> 284;
293 -> 292;
294 -> 292;
295 -> 216;
295 -> 294;
296 -> 295;
296 -> 293;
296 -> 294;
297 -> 203;
297 -> 292;
298 -> 293;
298 -> 296;
298 -> 297;
298 -> 292;
299 -> 298;
299 -> 216;
299 -> 292;
300 -> 205;
300 -> 216;
300 -> 195;
301 -> 216;
301 -> 298;
301 -> 195;
302 -> 195;
303 -> 216;
303 -> 298;
303 -> 302;
303 -> 195;
304 -> 126;
305 -> 129;
305 -> 304;
305 -> 126;
306 -> 129;
306 -> 305;
307 -> 305;
308 -> 306;
308 -> 307;
309 -> 147;
309 -> 307;
310 -> 307;
311 -> 308;
311 -> 310;
311 -> 307;
312 -> 308;
312 -> 307;
313 -> 312;
313 -> 298;
313 -> 299;
313 -> 300;
313 -> 307;
314 -> 307;
315 -> 309;
315 -> 313;
315 -> 307;
316 -> 314;
316 -> 307;
317 -> 315;
317 -> 313;
317 -> 307;
318 -> 316;
318 -> 317;
318 -> 314;
318 -> 313;
318 -> 307;
319 -> 307;
320 -> 307;
321 -> 308;
321 -> 307;
322 -> 321;
322 -> 318;
322 -> 307;
323 -> 322;
324 -> 322;
325 -> 322;
326 -> 309;
326 -> 325;
326 -> 322;
327 -> 322;
328 -> 314;
328 -> 327;
328 -> 325;
328 -> 322;
329 -> 319;
329 -> 322;
329 -> 328;
330 -> 320;
330 -> 322;
331 -> 314;
331 -> 328;
331 -> 307;
332 -> 309;
332 -> 331;
332 -> 307;
333 -> 308;
333 -> 307;
334 -> 307;
335 -> 333;
335 -> 334;
336 -> 315;
336 -> 334;
337 -> 336;
337 -> 331;
337 -> 334;
338 -> 336;
338 -> 331;
338 -> 334;
339 -> 336;
339 -> 331;
339 -> 334;
340 -> 336;
340 -> 331;
340 -> 334;
341 -> 336;
341 -> 331;
341 -> 334;
342 -> 335;
342 -> 334;
343 -> 336;
343 -> 331;
343 -> 342;
343 -> 334;
344 -> 334;
345 -> 341;
345 -> 344;
345 -> 334;
346 -> 343;
346 -> 345;
347 -> 345;
348 -> 346;
348 -> 347;
349 -> 336;
349 -> 347;
350 -> 348;
350 -> 347;
351 -> 349;
351 -> 343;
351 -> 347;
352 -> 347;
353 -> 347;
354 -> 350;
354 -> 353;
355 -> 351;
355 -> 353;
356 -> 351;
356 -> 353;
357 -> 351;
357 -> 353;
358 -> 351;
358 -> 353;
359 -> 352;
359 -> 353;
360 -> 352;
360 -> 353;
361 -> 353;
361 -> 354;
361 -> 355;
361 -> 356;
361 -> 357;
361 -> 358;
361 -> 343;
362 -> 352;
362 -> 345;
363 -> 362;
363 -> 307;
364 -> 309;
364 -> 361;
364 -> 307;
365 -> 329;
365 -> 307;
366 -> 363;
366 -> 307;
367 -> 307;
368 -> 364;
368 -> 367;
369 -> 365;
369 -> 367;
370 -> 366;
370 -> 367;
371 -> 309;
371 -> 367;
372 -> 371;
372 -> 361;
372 -> 367;
373 -> 367;
374 -> 371;
374 -> 373;
375 -> 374;
375 -> 361;
375 -> 373;
376 -> 375;
376 -> 373;
377 -> 376;
377 -> 367;
378 -> 371;
378 -> 361;
378 -> 353;
378 -> 359;
378 -> 367;
379 -> 367;
380 -> 378;
380 -> 379;
381 -> 380;
381 -> 378;
381 -> 379;
382 -> 367;
383 -> 381;
383 -> 382;
384 -> 368;
384 -> 367;
385 -> 369;
385 -> 367;
386 -> 370;
386 -> 367;
387 -> 367;
388 -> 367;
389 -> 372;
389 -> 388;
390 -> 372;
390 -> 388;
391 -> 372;
391 -> 388;
392 -> 377;
392 -> 388;
393 -> 381;
393 -> 388;
394 -> 383;
394 -> 388;
395 -> 383;
395 -> 388;
396 -> 384;
396 -> 388;
397 -> 385;
397 -> 388;
398 -> 386;
398 -> 388;
399 -> 383;
399 -> 388;
400 -> 387;
400 -> 388;
401 -> 387;
401 -> 388;
402 -> 392;
402 -> 388;
403 -> 393;
403 -> 388;
404 -> 394;
404 -> 388;
405 -> 398;
405 -> 383;
405 -> 388;
406 -> 400;
406 -> 388;
407 -> 388;
408 -> 402;
408 -> 407;
409 -> 403;
409 -> 407;
410 -> 404;
410 -> 407;
411 -> 406;
411 -> 407;
412 -> 401;
412 -> 407;
413 -> 411;
413 -> 407;
414 -> 407;
415 -> 414;
415 -> 407;
416 -> 414;
416 -> 407;
417 -> 414;
417 -> 407;
418 -> 414;
418 -> 407;
419 -> 414;
419 -> 407;
420 -> 414;
420 -> 407;
421 -> 414;
421 -> 407;
422 -> 414;
422 -> 407;
423 -> 414;
423 -> 407;
424 -> 414;
424 -> 407;
425 -> 414;
425 -> 407;
426 -> 414;
426 -> 407;
427 -> 414;
427 -> 407;
428 -> 414;
428 -> 407;
429 -> 414;
429 -> 407;
430 -> 414;
430 -> 407;
431 -> 414;
431 -> 407;
432 -> 414;
432 -> 407;
433 -> 414;
433 -> 407;
434 -> 414;
434 -> 407;
435 -> 414;
435 -> 407;
436 -> 414;
436 -> 407;
437 -> 414;
437 -> 407;
438 -> 414;
438 -> 407;
439 -> 414;
439 -> 407;
440 -> 414;
440 -> 407;
441 -> 407;
442 -> 441;
442 -> 414;
442 -> 407;
443 -> 414;
443 -> 407;
444 -> 414;
444 -> 407;
445 -> 407;
446 -> 407;
447 -> 444;
447 -> 446;
448 -> 445;
448 -> 446;
449 -> 448;
449 -> 446;
450 -> 448;
450 -> 446;
451 -> 448;
451 -> 446;
452 -> 447;
452 -> 448;
452 -> 446;
453 -> 445;
453 -> 414;
453 -> 407;
454 -> 414;
454 -> 407;
455 -> 407;
456 -> 405;
456 -> 455;
457 -> 455;
458 -> 456;
458 -> 455;
459 -> 458;
459 -> 405;
460 -> 458;
461 -> 459;
461 -> 460;
462 -> 395;
462 -> 407;
463 -> 462;
464 -> 408;
464 -> 463;
464 -> 462;
465 -> 409;
465 -> 463;
465 -> 462;
466 -> 464;
466 -> 465;
466 -> 462;
467 -> 410;
467 -> 463;
467 -> 462;
468 -> 466;
468 -> 467;
468 -> 462;
469 -> 396;
469 -> 397;
470 -> 414;
470 -> 397;
471 -> 396;
471 -> 470;
471 -> 405;
471 -> 461;
471 -> 397;
472 -> 396;
472 -> 414;
472 -> 397;
473 -> 414;
473 -> 471;
473 -> 407;
474 -> 407;
475 -> 414;
475 -> 471;
475 -> 474;
475 -> 407;
476 -> 387;
476 -> 307;
477 -> 476;
477 -> 305;
478 -> 477;
478 -> 471;
478 -> 126;
479 -> 477;
479 -> 126;
480 -> 103;
480 -> 479;
480 -> 471;
480 -> 472;
480 -> 398;
480 -> 39;
481 -> 480;
481 -> 39;
482 -> 39;
483 -> 481;
483 -> 482;
484 -> 482;
485 -> 483;
485 -> 484;
486 -> 484;
487 -> 485;
487 -> 480;
487 -> 486;
488 -> 486;
489 -> 487;
489 -> 480;
489 -> 488;
489 -> 486;
490 -> 487;
490 -> 480;
490 -> 489;
491 -> 489;
492 -> 490;
492 -> 491;
493 -> 490;
493 -> 491;
494 -> 490;
494 -> 491;
495 -> 490;
495 -> 491;
496 -> 490;
496 -> 491;
497 -> 491;
498 -> 491;
499 -> 491;
500 -> 491;
501 -> 491;
502 -> 0;
502 -> 491;
503 -> 492;
503 -> 491;
504 -> 497;
504 -> 503;
505 -> 503;
506 -> 493;
506 -> 503;
507 -> 494;
507 -> 503;
508 -> 495;
508 -> 503;
509 -> 496;
509 -> 503;
510 -> 498;
510 -> 503;
511 -> 499;
511 -> 503;
512 -> 500;
512 -> 503;
513 -> 501;
513 -> 503;
514 -> 502;
514 -> 503;
515 -> 503;
516 -> 504;
516 -> 515;
517 -> 505;
517 -> 515;
518 -> 506;
518 -> 515;
519 -> 507;
519 -> 515;
520 -> 508;
520 -> 515;
521 -> 509;
521 -> 515;
522 -> 510;
522 -> 515;
523 -> 511;
523 -> 515;
524 -> 512;
524 -> 515;
525 -> 513;
525 -> 515;
526 -> 514;
526 -> 515;
527 -> 517;
527 -> 480;
527 -> 515;
528 -> 527;
528 -> 0;
528 -> 515;
529 -> 517;
529 -> 515;
530 -> 518;
530 -> 515;
531 -> 521;
531 -> 515;
532 -> 525;
532 -> 515;
533 -> 526;
533 -> 515;
534 -> 515;
535 -> 529;
535 -> 534;
536 -> 530;
536 -> 534;
537 -> 531;
537 -> 534;
538 -> 532;
538 -> 534;
539 -> 533;
539 -> 534;
540 -> 535;
540 -> 536;
540 -> 537;
540 -> 534;
541 -> 535;
541 -> 534;
542 -> 540;
542 -> 534;
543 -> 538;
543 -> 541;
543 -> 542;
543 -> 501;
543 -> 540;
543 -> 534;
544 -> 540;
544 -> 534;
545 -> 539;
545 -> 544;
545 -> 0;
545 -> 543;
545 -> 534;
546 -> 515;
547 -> 517;
547 -> 515;
548 -> 516;
548 -> 547;
548 -> 497;
548 -> 545;
548 -> 515;
549 -> 517;
549 -> 515;
550 -> 522;
550 -> 498;
550 -> 515;
551 -> 522;
551 -> 549;
551 -> 550;
551 -> 498;
551 -> 548;
551 -> 515;
552 -> 497;
552 -> 551;
552 -> 491;
553 -> 498;
553 -> 551;
553 -> 491;
554 -> 499;
554 -> 491;
555 -> 500;
555 -> 491;
556 -> 545;
556 -> 491;
557 -> 491;
558 -> 491;
559 -> 552;
559 -> 558;
560 -> 553;
560 -> 558;
561 -> 554;
561 -> 558;
562 -> 555;
562 -> 558;
563 -> 553;
563 -> 558;
564 -> 556;
564 -> 558;
565 -> 557;
565 -> 558;
566 -> 565;
566 -> 558;
567 -> 565;
567 -> 558;
568 -> 565;
568 -> 558;
569 -> 565;
569 -> 558;
570 -> 565;
570 -> 558;
571 -> 559;
571 -> 558;
572 -> 559;
572 -> 552;
572 -> 558;
573 -> 559;
573 -> 558;
574 -> 563;
574 -> 571;
574 -> 558;
575 -> 0;
575 -> 558;
576 -> 559;
576 -> 565;
576 -> 558;
577 -> 560;
577 -> 565;
577 -> 558;
578 -> 561;
578 -> 565;
578 -> 558;
579 -> 562;
579 -> 565;
579 -> 558;
580 -> 563;
580 -> 565;
580 -> 558;
581 -> 564;
581 -> 565;
581 -> 558;
582 -> 557;
582 -> 489;
583 -> 489;
584 -> 490;
584 -> 582;
584 -> 583;
584 -> 577;
584 -> 578;
584 -> 579;
584 -> 580;
584 -> 581;
584 -> 576;
584 -> 574;
584 -> 552;
584 -> 554;
584 -> 555;
584 -> 489;
585 -> 487;
585 -> 584;
585 -> 486;
586 -> 585;
586 -> 484;
587 -> 586;
587 -> 482;
588 -> 587;
588 -> 584;
588 -> 482;
589 -> 482;
590 -> 587;
590 -> 589;
590 -> 584;
590 -> 482;
591 -> 0;
591 -> 482;
592 -> 590;
592 -> 591;
592 -> 482;
593 -> 46;
593 -> 592;
593 -> 39;
594 -> 480;
594 -> 39;
595 -> 15;
595 -> 594;
595 -> 592;
595 -> 1;
596 -> 1;
597 -> 1;
598 -> 595;
598 -> 596;
598 -> 597;
598 -> 0;
598 -> 1;
}